/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(routes)/notes/page",{

/***/ "(app-pages-browser)/./node_modules/fflate/esm/browser.js":
/*!********************************************!*\
  !*** ./node_modules/fflate/esm/browser.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncCompress: function() { return /* binding */ AsyncGzip; },\n/* harmony export */   AsyncDecompress: function() { return /* binding */ AsyncDecompress; },\n/* harmony export */   AsyncDeflate: function() { return /* binding */ AsyncDeflate; },\n/* harmony export */   AsyncGunzip: function() { return /* binding */ AsyncGunzip; },\n/* harmony export */   AsyncGzip: function() { return /* binding */ AsyncGzip; },\n/* harmony export */   AsyncInflate: function() { return /* binding */ AsyncInflate; },\n/* harmony export */   AsyncUnzipInflate: function() { return /* binding */ AsyncUnzipInflate; },\n/* harmony export */   AsyncUnzlib: function() { return /* binding */ AsyncUnzlib; },\n/* harmony export */   AsyncZipDeflate: function() { return /* binding */ AsyncZipDeflate; },\n/* harmony export */   AsyncZlib: function() { return /* binding */ AsyncZlib; },\n/* harmony export */   Compress: function() { return /* binding */ Gzip; },\n/* harmony export */   DecodeUTF8: function() { return /* binding */ DecodeUTF8; },\n/* harmony export */   Decompress: function() { return /* binding */ Decompress; },\n/* harmony export */   Deflate: function() { return /* binding */ Deflate; },\n/* harmony export */   EncodeUTF8: function() { return /* binding */ EncodeUTF8; },\n/* harmony export */   FlateErrorCode: function() { return /* binding */ FlateErrorCode; },\n/* harmony export */   Gunzip: function() { return /* binding */ Gunzip; },\n/* harmony export */   Gzip: function() { return /* binding */ Gzip; },\n/* harmony export */   Inflate: function() { return /* binding */ Inflate; },\n/* harmony export */   Unzip: function() { return /* binding */ Unzip; },\n/* harmony export */   UnzipInflate: function() { return /* binding */ UnzipInflate; },\n/* harmony export */   UnzipPassThrough: function() { return /* binding */ UnzipPassThrough; },\n/* harmony export */   Unzlib: function() { return /* binding */ Unzlib; },\n/* harmony export */   Zip: function() { return /* binding */ Zip; },\n/* harmony export */   ZipDeflate: function() { return /* binding */ ZipDeflate; },\n/* harmony export */   ZipPassThrough: function() { return /* binding */ ZipPassThrough; },\n/* harmony export */   Zlib: function() { return /* binding */ Zlib; },\n/* harmony export */   compress: function() { return /* binding */ gzip; },\n/* harmony export */   compressSync: function() { return /* binding */ gzipSync; },\n/* harmony export */   decompress: function() { return /* binding */ decompress; },\n/* harmony export */   decompressSync: function() { return /* binding */ decompressSync; },\n/* harmony export */   deflate: function() { return /* binding */ deflate; },\n/* harmony export */   deflateSync: function() { return /* binding */ deflateSync; },\n/* harmony export */   gunzip: function() { return /* binding */ gunzip; },\n/* harmony export */   gunzipSync: function() { return /* binding */ gunzipSync; },\n/* harmony export */   gzip: function() { return /* binding */ gzip; },\n/* harmony export */   gzipSync: function() { return /* binding */ gzipSync; },\n/* harmony export */   inflate: function() { return /* binding */ inflate; },\n/* harmony export */   inflateSync: function() { return /* binding */ inflateSync; },\n/* harmony export */   strFromU8: function() { return /* binding */ strFromU8; },\n/* harmony export */   strToU8: function() { return /* binding */ strToU8; },\n/* harmony export */   unzip: function() { return /* binding */ unzip; },\n/* harmony export */   unzipSync: function() { return /* binding */ unzipSync; },\n/* harmony export */   unzlib: function() { return /* binding */ unzlib; },\n/* harmony export */   unzlibSync: function() { return /* binding */ unzlibSync; },\n/* harmony export */   zip: function() { return /* binding */ zip; },\n/* harmony export */   zipSync: function() { return /* binding */ zipSync; },\n/* harmony export */   zlib: function() { return /* binding */ zlib; },\n/* harmony export */   zlibSync: function() { return /* binding */ zlibSync; }\n/* harmony export */ });\n// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar ch2 = {};\nvar wk = (function (c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([\n        c + ';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'\n    ], { type: 'text/javascript' }))));\n    w.onmessage = function (e) {\n        var d = e.data, ed = d.$e$;\n        if (ed) {\n            var err = new Error(ed[0]);\n            err['code'] = ed[1];\n            err.stack = ed[2];\n            cb(err, null);\n        }\n        else\n            cb(null, d);\n    };\n    w.postMessage(msg, transfer);\n    return w;\n});\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new i32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return { b: b, r: r };\n};\nvar _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b.b, revfd = _b.r;\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >> 8) | ((x & 0x00FF) << 8)) >> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 1; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    return new u8(v.subarray(s, e));\n};\n/**\n * Codes for errors generated within this library\n */\nvar FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, st, buf, dict) {\n    // source length       dict length\n    var sl = dat.length, dl = dict ? dict.length : 0;\n    if (!sl || st.f && !st.l)\n        return buf || new u8(0);\n    var noBuf = !buf;\n    // have to estimate size\n    var resize = noBuf || st.i != 2;\n    // no state\n    var noSt = st.i;\n    // Assumes roughly 33% compression ratio average\n    if (noBuf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (resize)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17\n        if (resize)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (resize)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                if (bt < dt) {\n                    var shift = dl - dt, dend = Math.min(dt, end);\n                    if (shift + bt < 0)\n                        err(3);\n                    for (; bt < dend; ++bt)\n                        buf[bt] = dict[shift + bt];\n                }\n                for (; bt < end; ++bt)\n                    buf[bt] = buf[bt - dt];\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    // don't reallocate for streams or user buffers\n    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n    d[o + 2] |= v >> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return { t: et, l: 0 };\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return { t: v, l: 1 };\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return { t: new u8(tr), l: mbt };\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return { c: cl.subarray(0, cli), n: s };\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a.t, mlb = _a.l;\n    var _b = hTree(df, 15), ddt = _b.t, mdb = _b.l;\n    var _c = lc(dlt), lclt = _c.c, nlc = _c.n;\n    var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        ++lcfreq[lclt[i] & 31];\n    for (var i = 0; i < lcdt.length; ++i)\n        ++lcfreq[lcdt[i] & 31];\n    var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];\n    if (bs >= 0 && flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >> 5) & 127), p += clct[i] >> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        var sym = syms[i];\n        if (sym > 255) {\n            var len = (sym >> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (sym >> 23) & 31), p += fleb[len];\n            var dst = sym & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (sym >> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[sym]), p += ll[sym];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, st) {\n    var s = st.z || dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var lst = st.l;\n    var pos = (st.r || 0) & 7;\n    if (lvl) {\n        if (pos)\n            w[0] = st.r >> 3;\n        var opt = deo[lvl - 1];\n        var n = opt >> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new i32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index          l/lind  waitdx          blkpos\n        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;\n        for (; i + 2 < s; ++i) {\n            // hash value\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = i - dif + j & 32767;\n                                    var pti = prev[ti];\n                                    var cd = ti - pti & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += imod - pimod & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one int32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        for (i = Math.max(i, wi); i < s; ++i) {\n            syms[li++] = dat[i];\n            ++lf[dat[i]];\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        if (!lst) {\n            st.r = (pos & 7) | w[(pos / 8) | 0] << 3;\n            // shft(pos) now 1 less if pos & 7 != 0\n            pos -= 7;\n            st.h = head, st.p = prev, st.i = i, st.w = wi;\n        }\n    }\n    else {\n        for (var i = st.w || 0; i < s + lst; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[(pos / 8) | 0] = lst;\n                e = s;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n        st.i = s;\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Adler32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a & 0xFF00) << 8 | (b & 255) << 8 | (b >> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    if (!st) {\n        st = { l: 1 };\n        if (opt.dictionary) {\n            var dict = opt.dictionary.subarray(-32768);\n            var newDat = new u8(dict.length + dat.length);\n            newDat.set(dict);\n            newDat.set(dat, dict.length);\n            dat = newDat;\n            st.w = dict.length;\n        }\n    }\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? (st.l ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 20) : (12 + opt.mem), pre, post, st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return fnStr;\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            fnStr = wcln(fns[i], fnStr, td_1);\n        ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };\n    }\n    var td = mrg({}, ch[id].e);\n    return wk(ch[id].c + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt]; };\nvar bDflt = function () { return [u8, u16, i32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zls]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get opts\nvar gopt = function (o) { return o && {\n    out: o.size && new u8(o.size),\n    dictionary: o.dictionary\n}; };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) {\n        if (ev.data.length) {\n            strm.push(ev.data[0], ev.data[1]);\n            postMessage([ev.data[0].length]);\n        }\n        else\n            strm.flush();\n    };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id, flush, ext) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else if (!Array.isArray(dat))\n            ext(dat);\n        else if (dat.length == 1) {\n            strm.queuedSize -= dat[0];\n            if (strm.ondrain)\n                strm.ondrain(dat[0]);\n        }\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.queuedSize = 0;\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        strm.queuedSize += d.length;\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n    if (flush) {\n        strm.flush = function () { w.postMessage([]); };\n    }\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += (d[10] | d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + (o.filename ? o.filename.length + 1 : 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (o.dictionary && 32);\n    c[1] |= 31 - ((c[0] << 8) | c[1]) % 31;\n    if (o.dictionary) {\n        var h = adler();\n        h.p(o.dictionary);\n        wbytes(c, 2, h.d());\n    }\n};\n// zlib start\nvar zls = function (d, dict) {\n    if ((d[0] & 15) != 8 || (d[0] >> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if ((d[1] >> 5 & 1) == +!dict)\n        err(6, 'invalid zlib data: ' + (d[1] & 32 ? 'need' : 'unexpected') + ' dictionary');\n    return (d[1] >> 3 & 4) + 2;\n};\nfunction StrmOpt(opts, cb) {\n    if (typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n        this.s = { l: 0, i: 32768, w: 32768, z: 32768 };\n        // Buffer length must always be 0 mod 32768 for index calculations to be correct when modifying head and prev\n        // 98304 = 32768 (lookback) + 65536 (common chunk size)\n        this.b = new u8(98304);\n        if (this.o.dictionary) {\n            var dict = this.o.dictionary.subarray(-32768);\n            this.b.set(dict, 32768 - dict.length);\n            this.s.i = 32768 - dict.length;\n        }\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, this.s), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        var endLen = chunk.length + this.s.z;\n        if (endLen > this.b.length) {\n            if (endLen > 2 * this.b.length - 32768) {\n                var newBuf = new u8(endLen & -32768);\n                newBuf.set(this.b.subarray(0, this.s.z));\n                this.b = newBuf;\n            }\n            var split = this.b.length - this.s.z;\n            this.b.set(chunk.subarray(0, split), this.s.z);\n            this.s.z = this.b.length;\n            this.p(this.b, false);\n            this.b.set(this.b.subarray(-32768));\n            this.b.set(chunk.subarray(split), 32768);\n            this.s.z = chunk.length - split + 32768;\n            this.s.i = 32766, this.s.w = 32768;\n        }\n        else {\n            this.b.set(chunk, this.s.z);\n            this.s.z += chunk.length;\n        }\n        this.s.l = final & 1;\n        if (this.s.z > this.s.w + 8191 || final) {\n            this.p(this.b, final || false);\n            this.s.w = this.s.i, this.s.i -= 2;\n        }\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * deflated output for small inputs.\n     */\n    Deflate.prototype.flush = function () {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        this.p(this.b, false);\n        this.s.w = this.s.i, this.s.i -= 2;\n    };\n    return Deflate;\n}());\n\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6, 1);\n    }\n    return AsyncDeflate;\n}());\n\nfunction deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nfunction deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    function Inflate(opts, cb) {\n        // no StrmOpt here to avoid adding to workerizer\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);\n        this.s = { i: 0, b: dict ? dict.length : 0 };\n        this.o = new u8(32768);\n        this.p = new u8(0);\n        if (dict)\n            this.o.set(dict);\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        if (!this.p.length)\n            this.p = c;\n        else if (c.length) {\n            var n = new u8(this.p.length + c.length);\n            n.set(this.p), n.set(c, this.p.length), this.p = n;\n        }\n    };\n    Inflate.prototype.c = function (final) {\n        this.s.i = +(this.d = final || false);\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.s, this.o);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\n\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    function AsyncInflate(opts, cb) {\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Inflate(ev.data);\n            onmessage = astrm(strm);\n        }, 7, 0);\n    }\n    return AsyncInflate;\n}());\n\nfunction inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gopt(ev.data[1]))); }, 1, cb);\n}\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction inflateSync(data, opts) {\n    return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        this.l += chunk.length;\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, this.s);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * GZIPped output for small inputs.\n     */\n    Gzip.prototype.flush = function () {\n        Deflate.prototype.flush.call(this);\n    };\n    return Gzip;\n}());\n\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8, 1);\n    }\n    return AsyncGzip;\n}());\n\nfunction gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nfunction gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\n/**\n * Streaming single or multi-member GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    function Gunzip(opts, cb) {\n        this.v = 1;\n        this.r = 0;\n        Inflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        this.r += chunk.length;\n        if (this.v) {\n            var p = this.p.subarray(this.v - 1);\n            var s = p.length > 3 ? gzs(p) : 4;\n            if (s > p.length) {\n                if (!final)\n                    return;\n            }\n            else if (this.v > 1 && this.onmember) {\n                this.onmember(this.r - p.length);\n            }\n            this.p = p.subarray(s), this.v = 0;\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n        // process concatenated GZIP\n        if (this.s.f && !this.s.l && !final) {\n            this.v = shft(this.s.p) + 9;\n            this.s = { i: 0 };\n            this.o = new u8(0);\n            this.push(new u8(0), final);\n        }\n    };\n    return Gunzip;\n}());\n\n/**\n * Asynchronous streaming single or multi-member GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    function AsyncGunzip(opts, cb) {\n        var _this = this;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gunzip(ev.data);\n            strm.onmember = function (offset) { return postMessage(offset); };\n            onmessage = astrm(strm);\n        }, 9, 0, function (offset) { return _this.onmember && _this.onmember(offset); });\n    }\n    return AsyncGunzip;\n}());\n\nfunction gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0], ev.data[1])); }, 3, cb);\n}\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction gunzipSync(data, opts) {\n    var st = gzs(data);\n    if (st + 8 > data.length)\n        err(6, 'invalid gzip data');\n    return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);\n}\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f && 4, this.s);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * zlibbed output for small inputs.\n     */\n    Zlib.prototype.flush = function () {\n        Deflate.prototype.flush.call(this);\n    };\n    return Zlib;\n}());\n\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10, 1);\n    }\n    return AsyncZlib;\n}());\n\nfunction zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nfunction zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, opts.dictionary ? 6 : 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    function Unzlib(opts, cb) {\n        Inflate.call(this, opts, cb);\n        this.v = opts && opts.dictionary ? 2 : 1;\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 6 && !final)\n                return;\n            this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\n\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    function AsyncUnzlib(opts, cb) {\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Unzlib(ev.data);\n            onmessage = astrm(strm);\n        }, 11, 0);\n    }\n    return AsyncUnzlib;\n}());\n\nfunction unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gopt(ev.data[1]))); }, 5, cb);\n}\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction unzlibSync(data, opts) {\n    return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\n// Default algorithm for compression (used because having a known output size allows faster decompression)\n\n\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    function Decompress(opts, cb) {\n        this.o = StrmOpt.call(this, opts, cb) || {};\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n    }\n    // init substream\n    // overriden by AsyncDecompress\n    Decompress.prototype.i = function () {\n        var _this = this;\n        this.s.ondata = function (dat, final) {\n            _this.ondata(dat, final);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(this.o)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(this.o)\n                        : new this.Z(this.o);\n                this.i();\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\n\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    function AsyncDecompress(opts, cb) {\n        Decompress.call(this, opts, cb);\n        this.queuedSize = 0;\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n    }\n    AsyncDecompress.prototype.i = function () {\n        var _this = this;\n        this.s.ondata = function (err, dat, final) {\n            _this.ondata(err, dat, final);\n        };\n        this.s.ondrain = function (size) {\n            _this.queuedSize -= size;\n            if (_this.ondrain)\n                _this.ondrain(size);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        this.queuedSize += chunk.length;\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\n\nfunction decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction decompressSync(data, opts) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, opts)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, opts)\n            : unzlibSync(data, opts);\n}\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return { s: r, r: slc(d, i - 1) };\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (final) {\n            if (r.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = r;\n        this.ondata(s, final);\n    };\n    return DecodeUTF8;\n}());\n\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\n\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nfunction strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nfunction strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td) {\n        return td.decode(dat);\n    }\n    else {\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (r.length)\n            err(8);\n        return s;\n    }\n}\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >> 1)), b += 4;\n    if (c != -1) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\n\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\n\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\n\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u, -1);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this.ondata(err, dat, final);\n                    _this.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this.d & 1))\n                        return;\n                    _this.u.splice(-1, 1);\n                    _this.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\n\nfunction zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nfunction zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\n\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this = this;\n        this.i = new Inflate(function (dat, final) {\n            _this.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\n\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\n\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this.k[0] == chks_3 && _this.c)\n                                        _this.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\n\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nfunction unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = b4(data, e - 12);\n            z = b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = b4(data, ze + 32);\n                o = b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    // Synchronously decompress under 512KB, or barely-compressed data\n                    if (su < 524288 || sc > 0.8 * su) {\n                        try {\n                            cbl(null, inflateSync(infl, { out: new u8(su) }));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nfunction unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = b4(data, e - 12);\n        z = b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = b4(data, ze + 32);\n            o = b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), { out: new u8(su) });\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/fflate/esm/browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/jspdf/dist/jspdf.es.min.js":
/*!*************************************************!*\
  !*** ./node_modules/jspdf/dist/jspdf.es.min.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AcroForm: function() { return /* binding */ St; },\n/* harmony export */   AcroFormAppearance: function() { return /* binding */ At; },\n/* harmony export */   AcroFormButton: function() { return /* binding */ mt; },\n/* harmony export */   AcroFormCheckBox: function() { return /* binding */ wt; },\n/* harmony export */   AcroFormChoiceField: function() { return /* binding */ ft; },\n/* harmony export */   AcroFormComboBox: function() { return /* binding */ pt; },\n/* harmony export */   AcroFormEditBox: function() { return /* binding */ gt; },\n/* harmony export */   AcroFormListBox: function() { return /* binding */ dt; },\n/* harmony export */   AcroFormPasswordField: function() { return /* binding */ Lt; },\n/* harmony export */   AcroFormPushButton: function() { return /* binding */ vt; },\n/* harmony export */   AcroFormRadioButton: function() { return /* binding */ bt; },\n/* harmony export */   AcroFormTextField: function() { return /* binding */ Nt; },\n/* harmony export */   GState: function() { return /* binding */ j; },\n/* harmony export */   ShadingPattern: function() { return /* binding */ B; },\n/* harmony export */   TilingPattern: function() { return /* binding */ M; },\n/* harmony export */   jsPDF: function() { return /* binding */ E; }\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/typeof.js\");\n/* harmony import */ var fflate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fflate */ \"(app-pages-browser)/./node_modules/fflate/esm/browser.js\");\n/** @license\n *\n * jsPDF - PDF Document creation from JavaScript\n * Version 2.5.2 Built on 2024-09-17T13:29:57.859Z\n *                      CommitID 00000000\n *\n * Copyright (c) 2010-2021 James Hall <james@parall.ax>, https://github.com/MrRio/jsPDF\n *               2015-2021 yWorks GmbH, http://www.yworks.com\n *               2015-2021 Lukas Holländer <lukas.hollaender@yworks.com>, https://github.com/HackbrettXXX\n *               2016-2018 Aras Abbasi <aras.abbasi@gmail.com>\n *               2010 Aaron Spike, https://github.com/acspike\n *               2012 Willow Systems Corporation, https://github.com/willowsystems\n *               2012 Pablo Hess, https://github.com/pablohess\n *               2012 Florian Jenett, https://github.com/fjenett\n *               2013 Warren Weckesser, https://github.com/warrenweckesser\n *               2013 Youssef Beddad, https://github.com/lifof\n *               2013 Lee Driscoll, https://github.com/lsdriscoll\n *               2013 Stefan Slonevskiy, https://github.com/stefslon\n *               2013 Jeremy Morel, https://github.com/jmorel\n *               2013 Christoph Hartmann, https://github.com/chris-rock\n *               2014 Juan Pablo Gaviria, https://github.com/juanpgaviria\n *               2014 James Makes, https://github.com/dollaruw\n *               2014 Diego Casorran, https://github.com/diegocr\n *               2014 Steven Spungin, https://github.com/Flamenco\n *               2014 Kenneth Glassey, https://github.com/Gavvers\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * Contributor(s):\n *    siefkenj, ahwolf, rickygu, Midnith, saintclair, eaparango,\n *    kim3er, mfo, alnorth, Flamenco\n */\n\nvar n=function(){return\"undefined\"!=typeof window?window:\"undefined\"!=typeof __webpack_require__.g?__webpack_require__.g:\"undefined\"!=typeof self?self:this}();function i(){n.console&&\"function\"==typeof n.console.log&&n.console.log.apply(n.console,arguments)}var a={log:i,warn:function(t){n.console&&(\"function\"==typeof n.console.warn?n.console.warn.apply(n.console,arguments):i.call(null,arguments))},error:function(t){n.console&&(\"function\"==typeof n.console.error?n.console.error.apply(n.console,arguments):i(t))}};function o(t,e,r){var n=new XMLHttpRequest;n.open(\"GET\",t),n.responseType=\"blob\",n.onload=function(){l(n.response,e,r)},n.onerror=function(){a.error(\"could not download file\")},n.send()}function s(t){var e=new XMLHttpRequest;e.open(\"HEAD\",t,!1);try{e.send()}catch(t){}return e.status>=200&&e.status<=299}function c(t){try{t.dispatchEvent(new MouseEvent(\"click\"))}catch(r){var e=document.createEvent(\"MouseEvents\");e.initMouseEvent(\"click\",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),t.dispatchEvent(e)}}var u,h,l=n.saveAs||(\"object\"!==(\"undefined\"==typeof window?\"undefined\":(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(window))||window!==n?function(){}:\"undefined\"!=typeof HTMLAnchorElement&&\"download\"in HTMLAnchorElement.prototype?function(t,e,r){var i=n.URL||n.webkitURL,a=document.createElement(\"a\");e=e||t.name||\"download\",a.download=e,a.rel=\"noopener\",\"string\"==typeof t?(a.href=t,a.origin!==location.origin?s(a.href)?o(t,e,r):c(a,a.target=\"_blank\"):c(a)):(a.href=i.createObjectURL(t),setTimeout((function(){i.revokeObjectURL(a.href)}),4e4),setTimeout((function(){c(a)}),0))}:\"msSaveOrOpenBlob\"in navigator?function(e,r,n){if(r=r||e.name||\"download\",\"string\"==typeof e)if(s(e))o(e,r,n);else{var i=document.createElement(\"a\");i.href=e,i.target=\"_blank\",setTimeout((function(){c(i)}))}else navigator.msSaveOrOpenBlob(function(e,r){return void 0===r?r={autoBom:!1}:\"object\"!==(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(r)&&(a.warn(\"Deprecated: Expected third argument to be a object\"),r={autoBom:!r}),r.autoBom&&/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(e.type)?new Blob([String.fromCharCode(65279),e],{type:e.type}):e}(e,n),r)}:function(e,r,i,a){if((a=a||open(\"\",\"_blank\"))&&(a.document.title=a.document.body.innerText=\"downloading...\"),\"string\"==typeof e)return o(e,r,i);var s=\"application/octet-stream\"===e.type,c=/constructor/i.test(n.HTMLElement)||n.safari,u=/CriOS\\/[\\d]+/.test(navigator.userAgent);if((u||s&&c)&&\"object\"===(\"undefined\"==typeof FileReader?\"undefined\":(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(FileReader))){var h=new FileReader;h.onloadend=function(){var t=h.result;t=u?t:t.replace(/^data:[^;]*;/,\"data:attachment/file;\"),a?a.location.href=t:location=t,a=null},h.readAsDataURL(e)}else{var l=n.URL||n.webkitURL,f=l.createObjectURL(e);a?a.location=f:location.href=f,a=null,setTimeout((function(){l.revokeObjectURL(f)}),4e4)}});\n/**\n * A class to parse color values\n * @author Stoyan Stefanov <sstoo@gmail.com>\n * {@link   http://www.phpied.com/rgb-color-parser-in-javascript/}\n * @license Use it if you like it\n */function f(t){var e;t=t||\"\",this.ok=!1,\"#\"==t.charAt(0)&&(t=t.substr(1,6));t={aliceblue:\"f0f8ff\",antiquewhite:\"faebd7\",aqua:\"00ffff\",aquamarine:\"7fffd4\",azure:\"f0ffff\",beige:\"f5f5dc\",bisque:\"ffe4c4\",black:\"000000\",blanchedalmond:\"ffebcd\",blue:\"0000ff\",blueviolet:\"8a2be2\",brown:\"a52a2a\",burlywood:\"deb887\",cadetblue:\"5f9ea0\",chartreuse:\"7fff00\",chocolate:\"d2691e\",coral:\"ff7f50\",cornflowerblue:\"6495ed\",cornsilk:\"fff8dc\",crimson:\"dc143c\",cyan:\"00ffff\",darkblue:\"00008b\",darkcyan:\"008b8b\",darkgoldenrod:\"b8860b\",darkgray:\"a9a9a9\",darkgreen:\"006400\",darkkhaki:\"bdb76b\",darkmagenta:\"8b008b\",darkolivegreen:\"556b2f\",darkorange:\"ff8c00\",darkorchid:\"9932cc\",darkred:\"8b0000\",darksalmon:\"e9967a\",darkseagreen:\"8fbc8f\",darkslateblue:\"483d8b\",darkslategray:\"2f4f4f\",darkturquoise:\"00ced1\",darkviolet:\"9400d3\",deeppink:\"ff1493\",deepskyblue:\"00bfff\",dimgray:\"696969\",dodgerblue:\"1e90ff\",feldspar:\"d19275\",firebrick:\"b22222\",floralwhite:\"fffaf0\",forestgreen:\"228b22\",fuchsia:\"ff00ff\",gainsboro:\"dcdcdc\",ghostwhite:\"f8f8ff\",gold:\"ffd700\",goldenrod:\"daa520\",gray:\"808080\",green:\"008000\",greenyellow:\"adff2f\",honeydew:\"f0fff0\",hotpink:\"ff69b4\",indianred:\"cd5c5c\",indigo:\"4b0082\",ivory:\"fffff0\",khaki:\"f0e68c\",lavender:\"e6e6fa\",lavenderblush:\"fff0f5\",lawngreen:\"7cfc00\",lemonchiffon:\"fffacd\",lightblue:\"add8e6\",lightcoral:\"f08080\",lightcyan:\"e0ffff\",lightgoldenrodyellow:\"fafad2\",lightgrey:\"d3d3d3\",lightgreen:\"90ee90\",lightpink:\"ffb6c1\",lightsalmon:\"ffa07a\",lightseagreen:\"20b2aa\",lightskyblue:\"87cefa\",lightslateblue:\"8470ff\",lightslategray:\"778899\",lightsteelblue:\"b0c4de\",lightyellow:\"ffffe0\",lime:\"00ff00\",limegreen:\"32cd32\",linen:\"faf0e6\",magenta:\"ff00ff\",maroon:\"800000\",mediumaquamarine:\"66cdaa\",mediumblue:\"0000cd\",mediumorchid:\"ba55d3\",mediumpurple:\"9370d8\",mediumseagreen:\"3cb371\",mediumslateblue:\"7b68ee\",mediumspringgreen:\"00fa9a\",mediumturquoise:\"48d1cc\",mediumvioletred:\"c71585\",midnightblue:\"191970\",mintcream:\"f5fffa\",mistyrose:\"ffe4e1\",moccasin:\"ffe4b5\",navajowhite:\"ffdead\",navy:\"000080\",oldlace:\"fdf5e6\",olive:\"808000\",olivedrab:\"6b8e23\",orange:\"ffa500\",orangered:\"ff4500\",orchid:\"da70d6\",palegoldenrod:\"eee8aa\",palegreen:\"98fb98\",paleturquoise:\"afeeee\",palevioletred:\"d87093\",papayawhip:\"ffefd5\",peachpuff:\"ffdab9\",peru:\"cd853f\",pink:\"ffc0cb\",plum:\"dda0dd\",powderblue:\"b0e0e6\",purple:\"800080\",red:\"ff0000\",rosybrown:\"bc8f8f\",royalblue:\"4169e1\",saddlebrown:\"8b4513\",salmon:\"fa8072\",sandybrown:\"f4a460\",seagreen:\"2e8b57\",seashell:\"fff5ee\",sienna:\"a0522d\",silver:\"c0c0c0\",skyblue:\"87ceeb\",slateblue:\"6a5acd\",slategray:\"708090\",snow:\"fffafa\",springgreen:\"00ff7f\",steelblue:\"4682b4\",tan:\"d2b48c\",teal:\"008080\",thistle:\"d8bfd8\",tomato:\"ff6347\",turquoise:\"40e0d0\",violet:\"ee82ee\",violetred:\"d02090\",wheat:\"f5deb3\",white:\"ffffff\",whitesmoke:\"f5f5f5\",yellow:\"ffff00\",yellowgreen:\"9acd32\"}[t=(t=t.replace(/ /g,\"\")).toLowerCase()]||t;for(var r=[{re:/^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/,example:[\"rgb(123, 234, 45)\",\"rgb(255,234,245)\"],process:function(t){return[parseInt(t[1]),parseInt(t[2]),parseInt(t[3])]}},{re:/^(\\w{2})(\\w{2})(\\w{2})$/,example:[\"#00ff00\",\"336699\"],process:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]}},{re:/^(\\w{1})(\\w{1})(\\w{1})$/,example:[\"#fb0\",\"f0f\"],process:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]}}],n=0;n<r.length;n++){var i=r[n].re,a=r[n].process,o=i.exec(t);o&&(e=a(o),this.r=e[0],this.g=e[1],this.b=e[2],this.ok=!0)}this.r=this.r<0||isNaN(this.r)?0:this.r>255?255:this.r,this.g=this.g<0||isNaN(this.g)?0:this.g>255?255:this.g,this.b=this.b<0||isNaN(this.b)?0:this.b>255?255:this.b,this.toRGB=function(){return\"rgb(\"+this.r+\", \"+this.g+\", \"+this.b+\")\"},this.toHex=function(){var t=this.r.toString(16),e=this.g.toString(16),r=this.b.toString(16);return 1==t.length&&(t=\"0\"+t),1==e.length&&(e=\"0\"+e),1==r.length&&(r=\"0\"+r),\"#\"+t+e+r}}\n/**\n * @license\n * Joseph Myers does not specify a particular license for his work.\n *\n * Author: Joseph Myers\n * Accessed from: http://www.myersdaily.org/joseph/javascript/md5.js\n *\n * Modified by: Owen Leong\n */\nfunction d(t,e){var r=t[0],n=t[1],i=t[2],a=t[3];r=g(r,n,i,a,e[0],7,-680876936),a=g(a,r,n,i,e[1],12,-389564586),i=g(i,a,r,n,e[2],17,606105819),n=g(n,i,a,r,e[3],22,-1044525330),r=g(r,n,i,a,e[4],7,-176418897),a=g(a,r,n,i,e[5],12,1200080426),i=g(i,a,r,n,e[6],17,-1473231341),n=g(n,i,a,r,e[7],22,-45705983),r=g(r,n,i,a,e[8],7,1770035416),a=g(a,r,n,i,e[9],12,-1958414417),i=g(i,a,r,n,e[10],17,-42063),n=g(n,i,a,r,e[11],22,-1990404162),r=g(r,n,i,a,e[12],7,1804603682),a=g(a,r,n,i,e[13],12,-40341101),i=g(i,a,r,n,e[14],17,-1502002290),r=m(r,n=g(n,i,a,r,e[15],22,1236535329),i,a,e[1],5,-165796510),a=m(a,r,n,i,e[6],9,-1069501632),i=m(i,a,r,n,e[11],14,643717713),n=m(n,i,a,r,e[0],20,-373897302),r=m(r,n,i,a,e[5],5,-701558691),a=m(a,r,n,i,e[10],9,38016083),i=m(i,a,r,n,e[15],14,-660478335),n=m(n,i,a,r,e[4],20,-405537848),r=m(r,n,i,a,e[9],5,568446438),a=m(a,r,n,i,e[14],9,-1019803690),i=m(i,a,r,n,e[3],14,-187363961),n=m(n,i,a,r,e[8],20,1163531501),r=m(r,n,i,a,e[13],5,-1444681467),a=m(a,r,n,i,e[2],9,-51403784),i=m(i,a,r,n,e[7],14,1735328473),r=v(r,n=m(n,i,a,r,e[12],20,-1926607734),i,a,e[5],4,-378558),a=v(a,r,n,i,e[8],11,-2022574463),i=v(i,a,r,n,e[11],16,1839030562),n=v(n,i,a,r,e[14],23,-35309556),r=v(r,n,i,a,e[1],4,-1530992060),a=v(a,r,n,i,e[4],11,1272893353),i=v(i,a,r,n,e[7],16,-155497632),n=v(n,i,a,r,e[10],23,-1094730640),r=v(r,n,i,a,e[13],4,681279174),a=v(a,r,n,i,e[0],11,-358537222),i=v(i,a,r,n,e[3],16,-722521979),n=v(n,i,a,r,e[6],23,76029189),r=v(r,n,i,a,e[9],4,-640364487),a=v(a,r,n,i,e[12],11,-421815835),i=v(i,a,r,n,e[15],16,530742520),r=b(r,n=v(n,i,a,r,e[2],23,-995338651),i,a,e[0],6,-198630844),a=b(a,r,n,i,e[7],10,1126891415),i=b(i,a,r,n,e[14],15,-1416354905),n=b(n,i,a,r,e[5],21,-57434055),r=b(r,n,i,a,e[12],6,1700485571),a=b(a,r,n,i,e[3],10,-1894986606),i=b(i,a,r,n,e[10],15,-1051523),n=b(n,i,a,r,e[1],21,-2054922799),r=b(r,n,i,a,e[8],6,1873313359),a=b(a,r,n,i,e[15],10,-30611744),i=b(i,a,r,n,e[6],15,-1560198380),n=b(n,i,a,r,e[13],21,1309151649),r=b(r,n,i,a,e[4],6,-145523070),a=b(a,r,n,i,e[11],10,-1120210379),i=b(i,a,r,n,e[2],15,718787259),n=b(n,i,a,r,e[9],21,-343485551),t[0]=_(r,t[0]),t[1]=_(n,t[1]),t[2]=_(i,t[2]),t[3]=_(a,t[3])}function p(t,e,r,n,i,a){return e=_(_(e,t),_(n,a)),_(e<<i|e>>>32-i,r)}function g(t,e,r,n,i,a,o){return p(e&r|~e&n,t,e,i,a,o)}function m(t,e,r,n,i,a,o){return p(e&n|r&~n,t,e,i,a,o)}function v(t,e,r,n,i,a,o){return p(e^r^n,t,e,i,a,o)}function b(t,e,r,n,i,a,o){return p(r^(e|~n),t,e,i,a,o)}function y(t){var e,r=t.length,n=[1732584193,-271733879,-1732584194,271733878];for(e=64;e<=t.length;e+=64)d(n,w(t.substring(e-64,e)));t=t.substring(e-64);var i=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(e=0;e<t.length;e++)i[e>>2]|=t.charCodeAt(e)<<(e%4<<3);if(i[e>>2]|=128<<(e%4<<3),e>55)for(d(n,i),e=0;e<16;e++)i[e]=0;return i[14]=8*r,d(n,i),n}function w(t){var e,r=[];for(e=0;e<64;e+=4)r[e>>2]=t.charCodeAt(e)+(t.charCodeAt(e+1)<<8)+(t.charCodeAt(e+2)<<16)+(t.charCodeAt(e+3)<<24);return r}u=n.atob.bind(n),h=n.btoa.bind(n);var N=\"0123456789abcdef\".split(\"\");function L(t){for(var e=\"\",r=0;r<4;r++)e+=N[t>>8*r+4&15]+N[t>>8*r&15];return e}function A(t){return String.fromCharCode((255&t)>>0,(65280&t)>>8,(16711680&t)>>16,(4278190080&t)>>24)}function x(t){return y(t).map(A).join(\"\")}var S=\"5d41402abc4b2a76b9719d911017c592\"!=function(t){for(var e=0;e<t.length;e++)t[e]=L(t[e]);return t.join(\"\")}(y(\"hello\"));function _(t,e){if(S){var r=(65535&t)+(65535&e);return(t>>16)+(e>>16)+(r>>16)<<16|65535&r}return t+e&4294967295}\n/**\n * @license\n * FPDF is released under a permissive license: there is no usage restriction.\n * You may embed it freely in your application (commercial or not), with or\n * without modifications.\n *\n * Reference: http://www.fpdf.org/en/script/script37.php\n */function P(t,e){var r,n,i,a;if(t!==r){for(var o=(i=t,a=1+(256/t.length>>0),new Array(a+1).join(i)),s=[],c=0;c<256;c++)s[c]=c;var u=0;for(c=0;c<256;c++){var h=s[c];u=(u+h+o.charCodeAt(c))%256,s[c]=s[u],s[u]=h}r=t,n=s}else s=n;var l=e.length,f=0,d=0,p=\"\";for(c=0;c<l;c++)d=(d+(h=s[f=(f+1)%256]))%256,s[f]=s[d],s[d]=h,o=s[(s[f]+s[d])%256],p+=String.fromCharCode(e.charCodeAt(c)^o);return p}\n/**\n * @license\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n * Author: Owen Leong (@owenl131)\n * Date: 15 Oct 2020\n * References:\n * https://www.cs.cmu.edu/~dst/Adobe/Gallery/anon21jul01-pdf-encryption.txt\n * https://github.com/foliojs/pdfkit/blob/master/lib/security.js\n * http://www.fpdf.org/en/script/script37.php\n */var k={print:4,modify:8,copy:16,\"annot-forms\":32};function I(t,e,r,n){this.v=1,this.r=2;var i=192;t.forEach((function(t){if(void 0!==k.perm)throw new Error(\"Invalid permission: \"+t);i+=k[t]})),this.padding=\"(¿N^NuAd\\0NVÿú\u0001\\b..\\0¶Ðh>/\\f©þdSiz\";var a=(e+this.padding).substr(0,32),o=(r+this.padding).substr(0,32);this.O=this.processOwnerPassword(a,o),this.P=-(1+(255^i)),this.encryptionKey=x(a+this.O+this.lsbFirstWord(this.P)+this.hexToBytes(n)).substr(0,5),this.U=P(this.encryptionKey,this.padding)}function F(t){if(/[^\\u0000-\\u00ff]/.test(t))throw new Error(\"Invalid PDF Name Object: \"+t+\", Only accept ASCII characters.\");for(var e=\"\",r=t.length,n=0;n<r;n++){var i=t.charCodeAt(n);if(i<33||35===i||37===i||40===i||41===i||47===i||60===i||62===i||91===i||93===i||123===i||125===i||i>126)e+=\"#\"+(\"0\"+i.toString(16)).slice(-2);else e+=t[n]}return e}function C(e){if(\"object\"!==(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e))throw new Error(\"Invalid Context passed to initialize PubSub (jsPDF-module)\");var r={};this.subscribe=function(t,e,n){if(n=n||!1,\"string\"!=typeof t||\"function\"!=typeof e||\"boolean\"!=typeof n)throw new Error(\"Invalid arguments passed to PubSub.subscribe (jsPDF-module)\");r.hasOwnProperty(t)||(r[t]={});var i=Math.random().toString(35);return r[t][i]=[e,!!n],i},this.unsubscribe=function(t){for(var e in r)if(r[e][t])return delete r[e][t],0===Object.keys(r[e]).length&&delete r[e],!0;return!1},this.publish=function(t){if(r.hasOwnProperty(t)){var i=Array.prototype.slice.call(arguments,1),o=[];for(var s in r[t]){var c=r[t][s];try{c[0].apply(e,i)}catch(t){n.console&&a.error(\"jsPDF PubSub Error\",t.message,t)}c[1]&&o.push(s)}o.length&&o.forEach(this.unsubscribe)}},this.getTopics=function(){return r}}function j(t){if(!(this instanceof j))return new j(t);var e=\"opacity,stroke-opacity\".split(\",\");for(var r in t)t.hasOwnProperty(r)&&e.indexOf(r)>=0&&(this[r]=t[r]);this.id=\"\",this.objectNumber=-1}function O(t,e){this.gState=t,this.matrix=e,this.id=\"\",this.objectNumber=-1}function B(t,e,r,n,i){if(!(this instanceof B))return new B(t,e,r,n,i);this.type=\"axial\"===t?2:3,this.coords=e,this.colors=r,O.call(this,n,i)}function M(t,e,r,n,i){if(!(this instanceof M))return new M(t,e,r,n,i);this.boundingBox=t,this.xStep=e,this.yStep=r,this.stream=\"\",this.cloneIndex=0,O.call(this,n,i)}function E(e){var r,i=\"string\"==typeof arguments[0]?arguments[0]:\"p\",o=arguments[1],s=arguments[2],c=arguments[3],u=[],d=1,p=16,g=\"S\",m=null;\"object\"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e=e||{})&&(i=e.orientation,o=e.unit||o,s=e.format||s,c=e.compress||e.compressPdf||c,null!==(m=e.encryption||null)&&(m.userPassword=m.userPassword||\"\",m.ownerPassword=m.ownerPassword||\"\",m.userPermissions=m.userPermissions||[]),d=\"number\"==typeof e.userUnit?Math.abs(e.userUnit):1,void 0!==e.precision&&(r=e.precision),void 0!==e.floatPrecision&&(p=e.floatPrecision),g=e.defaultPathOperation||\"S\"),u=e.filters||(!0===c?[\"FlateEncode\"]:u),o=o||\"mm\",i=(\"\"+(i||\"P\")).toLowerCase();var v=e.putOnlyUsedFonts||!1,b={},y={internal:{},__private__:{}};y.__private__.PubSub=C;var w=\"1.3\",N=y.__private__.getPdfVersion=function(){return w};y.__private__.setPdfVersion=function(t){w=t};var L={a0:[2383.94,3370.39],a1:[1683.78,2383.94],a2:[1190.55,1683.78],a3:[841.89,1190.55],a4:[595.28,841.89],a5:[419.53,595.28],a6:[297.64,419.53],a7:[209.76,297.64],a8:[147.4,209.76],a9:[104.88,147.4],a10:[73.7,104.88],b0:[2834.65,4008.19],b1:[2004.09,2834.65],b2:[1417.32,2004.09],b3:[1000.63,1417.32],b4:[708.66,1000.63],b5:[498.9,708.66],b6:[354.33,498.9],b7:[249.45,354.33],b8:[175.75,249.45],b9:[124.72,175.75],b10:[87.87,124.72],c0:[2599.37,3676.54],c1:[1836.85,2599.37],c2:[1298.27,1836.85],c3:[918.43,1298.27],c4:[649.13,918.43],c5:[459.21,649.13],c6:[323.15,459.21],c7:[229.61,323.15],c8:[161.57,229.61],c9:[113.39,161.57],c10:[79.37,113.39],dl:[311.81,623.62],letter:[612,792],\"government-letter\":[576,756],legal:[612,1008],\"junior-legal\":[576,360],ledger:[1224,792],tabloid:[792,1224],\"credit-card\":[153,243]};y.__private__.getPageFormats=function(){return L};var A=y.__private__.getPageFormat=function(t){return L[t]};s=s||\"a4\";var x={COMPAT:\"compat\",ADVANCED:\"advanced\"},S=x.COMPAT;function _(){this.saveGraphicsState(),lt(new Vt(_t,0,0,-_t,0,Rr()*_t).toString()+\" cm\"),this.setFontSize(this.getFontSize()/_t),g=\"n\",S=x.ADVANCED}function P(){this.restoreGraphicsState(),g=\"S\",S=x.COMPAT}var k=y.__private__.combineFontStyleAndFontWeight=function(t,e){if(\"bold\"==t&&\"normal\"==e||\"bold\"==t&&400==e||\"normal\"==t&&\"italic\"==e||\"bold\"==t&&\"italic\"==e)throw new Error(\"Invalid Combination of fontweight and fontstyle\");return e&&(t=400==e||\"normal\"===e?\"italic\"===t?\"italic\":\"normal\":700!=e&&\"bold\"!==e||\"normal\"!==t?(700==e?\"bold\":e)+\"\"+t:\"bold\"),t};y.advancedAPI=function(t){var e=S===x.COMPAT;return e&&_.call(this),\"function\"!=typeof t||(t(this),e&&P.call(this)),this},y.compatAPI=function(t){var e=S===x.ADVANCED;return e&&P.call(this),\"function\"!=typeof t||(t(this),e&&_.call(this)),this},y.isAdvancedAPI=function(){return S===x.ADVANCED};var O,q=function(t){if(S!==x.ADVANCED)throw new Error(t+\" is only available in 'advanced' API mode. You need to call advancedAPI() first.\")},D=y.roundToPrecision=y.__private__.roundToPrecision=function(t,e){var n=r||e;if(isNaN(t)||isNaN(n))throw new Error(\"Invalid argument passed to jsPDF.roundToPrecision\");return t.toFixed(n).replace(/0+$/,\"\")};O=y.hpf=y.__private__.hpf=\"number\"==typeof p?function(t){if(isNaN(t))throw new Error(\"Invalid argument passed to jsPDF.hpf\");return D(t,p)}:\"smart\"===p?function(t){if(isNaN(t))throw new Error(\"Invalid argument passed to jsPDF.hpf\");return D(t,t>-1&&t<1?16:5)}:function(t){if(isNaN(t))throw new Error(\"Invalid argument passed to jsPDF.hpf\");return D(t,16)};var R=y.f2=y.__private__.f2=function(t){if(isNaN(t))throw new Error(\"Invalid argument passed to jsPDF.f2\");return D(t,2)},T=y.__private__.f3=function(t){if(isNaN(t))throw new Error(\"Invalid argument passed to jsPDF.f3\");return D(t,3)},U=y.scale=y.__private__.scale=function(t){if(isNaN(t))throw new Error(\"Invalid argument passed to jsPDF.scale\");return S===x.COMPAT?t*_t:S===x.ADVANCED?t:void 0},z=function(t){return S===x.COMPAT?Rr()-t:S===x.ADVANCED?t:void 0},H=function(t){return U(z(t))};y.__private__.setPrecision=y.setPrecision=function(t){\"number\"==typeof parseInt(t,10)&&(r=parseInt(t,10))};var W,V=\"00000000000000000000000000000000\",G=y.__private__.getFileId=function(){return V},Y=y.__private__.setFileId=function(t){return V=void 0!==t&&/^[a-fA-F0-9]{32}$/.test(t)?t.toUpperCase():V.split(\"\").map((function(){return\"ABCDEF0123456789\".charAt(Math.floor(16*Math.random()))})).join(\"\"),null!==m&&(Ye=new I(m.userPermissions,m.userPassword,m.ownerPassword,V)),V};y.setFileId=function(t){return Y(t),this},y.getFileId=function(){return G()};var J=y.__private__.convertDateToPDFDate=function(t){var e=t.getTimezoneOffset(),r=e<0?\"+\":\"-\",n=Math.floor(Math.abs(e/60)),i=Math.abs(e%60),a=[r,Q(n),\"'\",Q(i),\"'\"].join(\"\");return[\"D:\",t.getFullYear(),Q(t.getMonth()+1),Q(t.getDate()),Q(t.getHours()),Q(t.getMinutes()),Q(t.getSeconds()),a].join(\"\")},X=y.__private__.convertPDFDateToDate=function(t){var e=parseInt(t.substr(2,4),10),r=parseInt(t.substr(6,2),10)-1,n=parseInt(t.substr(8,2),10),i=parseInt(t.substr(10,2),10),a=parseInt(t.substr(12,2),10),o=parseInt(t.substr(14,2),10);return new Date(e,r,n,i,a,o,0)},K=y.__private__.setCreationDate=function(t){var e;if(void 0===t&&(t=new Date),t instanceof Date)e=J(t);else{if(!/^D:(20[0-2][0-9]|203[0-7]|19[7-9][0-9])(0[0-9]|1[0-2])([0-2][0-9]|3[0-1])(0[0-9]|1[0-9]|2[0-3])(0[0-9]|[1-5][0-9])(0[0-9]|[1-5][0-9])(\\+0[0-9]|\\+1[0-4]|-0[0-9]|-1[0-1])'(0[0-9]|[1-5][0-9])'?$/.test(t))throw new Error(\"Invalid argument passed to jsPDF.setCreationDate\");e=t}return W=e},Z=y.__private__.getCreationDate=function(t){var e=W;return\"jsDate\"===t&&(e=X(W)),e};y.setCreationDate=function(t){return K(t),this},y.getCreationDate=function(t){return Z(t)};var $,Q=y.__private__.padd2=function(t){return(\"0\"+parseInt(t)).slice(-2)},tt=y.__private__.padd2Hex=function(t){return(\"00\"+(t=t.toString())).substr(t.length)},et=0,rt=[],nt=[],it=0,at=[],ot=[],st=!1,ct=nt,ut=function(){et=0,it=0,nt=[],rt=[],at=[],Qt=Kt(),te=Kt()};y.__private__.setCustomOutputDestination=function(t){st=!0,ct=t};var ht=function(t){st||(ct=t)};y.__private__.resetCustomOutputDestination=function(){st=!1,ct=nt};var lt=y.__private__.out=function(t){return t=t.toString(),it+=t.length+1,ct.push(t),ct},ft=y.__private__.write=function(t){return lt(1===arguments.length?t.toString():Array.prototype.join.call(arguments,\" \"))},dt=y.__private__.getArrayBuffer=function(t){for(var e=t.length,r=new ArrayBuffer(e),n=new Uint8Array(r);e--;)n[e]=t.charCodeAt(e);return r},pt=[[\"Helvetica\",\"helvetica\",\"normal\",\"WinAnsiEncoding\"],[\"Helvetica-Bold\",\"helvetica\",\"bold\",\"WinAnsiEncoding\"],[\"Helvetica-Oblique\",\"helvetica\",\"italic\",\"WinAnsiEncoding\"],[\"Helvetica-BoldOblique\",\"helvetica\",\"bolditalic\",\"WinAnsiEncoding\"],[\"Courier\",\"courier\",\"normal\",\"WinAnsiEncoding\"],[\"Courier-Bold\",\"courier\",\"bold\",\"WinAnsiEncoding\"],[\"Courier-Oblique\",\"courier\",\"italic\",\"WinAnsiEncoding\"],[\"Courier-BoldOblique\",\"courier\",\"bolditalic\",\"WinAnsiEncoding\"],[\"Times-Roman\",\"times\",\"normal\",\"WinAnsiEncoding\"],[\"Times-Bold\",\"times\",\"bold\",\"WinAnsiEncoding\"],[\"Times-Italic\",\"times\",\"italic\",\"WinAnsiEncoding\"],[\"Times-BoldItalic\",\"times\",\"bolditalic\",\"WinAnsiEncoding\"],[\"ZapfDingbats\",\"zapfdingbats\",\"normal\",null],[\"Symbol\",\"symbol\",\"normal\",null]];y.__private__.getStandardFonts=function(){return pt};var gt=e.fontSize||16;y.__private__.setFontSize=y.setFontSize=function(t){return gt=S===x.ADVANCED?t/_t:t,this};var mt,vt=y.__private__.getFontSize=y.getFontSize=function(){return S===x.COMPAT?gt:gt*_t},bt=e.R2L||!1;y.__private__.setR2L=y.setR2L=function(t){return bt=t,this},y.__private__.getR2L=y.getR2L=function(){return bt};var yt,wt=y.__private__.setZoomMode=function(t){var e=[void 0,null,\"fullwidth\",\"fullheight\",\"fullpage\",\"original\"];if(/^(?:\\d+\\.\\d*|\\d*\\.\\d+|\\d+)%$/.test(t))mt=t;else if(isNaN(t)){if(-1===e.indexOf(t))throw new Error('zoom must be Integer (e.g. 2), a percentage Value (e.g. 300%) or fullwidth, fullheight, fullpage, original. \"'+t+'\" is not recognized.');mt=t}else mt=parseInt(t,10)};y.__private__.getZoomMode=function(){return mt};var Nt,Lt=y.__private__.setPageMode=function(t){if(-1==[void 0,null,\"UseNone\",\"UseOutlines\",\"UseThumbs\",\"FullScreen\"].indexOf(t))throw new Error('Page mode must be one of UseNone, UseOutlines, UseThumbs, or FullScreen. \"'+t+'\" is not recognized.');yt=t};y.__private__.getPageMode=function(){return yt};var At=y.__private__.setLayoutMode=function(t){if(-1==[void 0,null,\"continuous\",\"single\",\"twoleft\",\"tworight\",\"two\"].indexOf(t))throw new Error('Layout mode must be one of continuous, single, twoleft, tworight. \"'+t+'\" is not recognized.');Nt=t};y.__private__.getLayoutMode=function(){return Nt},y.__private__.setDisplayMode=y.setDisplayMode=function(t,e,r){return wt(t),At(e),Lt(r),this};var xt={title:\"\",subject:\"\",author:\"\",keywords:\"\",creator:\"\"};y.__private__.getDocumentProperty=function(t){if(-1===Object.keys(xt).indexOf(t))throw new Error(\"Invalid argument passed to jsPDF.getDocumentProperty\");return xt[t]},y.__private__.getDocumentProperties=function(){return xt},y.__private__.setDocumentProperties=y.setProperties=y.setDocumentProperties=function(t){for(var e in xt)xt.hasOwnProperty(e)&&t[e]&&(xt[e]=t[e]);return this},y.__private__.setDocumentProperty=function(t,e){if(-1===Object.keys(xt).indexOf(t))throw new Error(\"Invalid arguments passed to jsPDF.setDocumentProperty\");return xt[t]=e};var St,_t,Pt,kt,It,Ft={},Ct={},jt=[],Ot={},Bt={},Mt={},Et={},qt=null,Dt=0,Rt=[],Tt=new C(y),Ut=e.hotfixes||[],zt={},Ht={},Wt=[],Vt=function t(e,r,n,i,a,o){if(!(this instanceof t))return new t(e,r,n,i,a,o);isNaN(e)&&(e=1),isNaN(r)&&(r=0),isNaN(n)&&(n=0),isNaN(i)&&(i=1),isNaN(a)&&(a=0),isNaN(o)&&(o=0),this._matrix=[e,r,n,i,a,o]};Object.defineProperty(Vt.prototype,\"sx\",{get:function(){return this._matrix[0]},set:function(t){this._matrix[0]=t}}),Object.defineProperty(Vt.prototype,\"shy\",{get:function(){return this._matrix[1]},set:function(t){this._matrix[1]=t}}),Object.defineProperty(Vt.prototype,\"shx\",{get:function(){return this._matrix[2]},set:function(t){this._matrix[2]=t}}),Object.defineProperty(Vt.prototype,\"sy\",{get:function(){return this._matrix[3]},set:function(t){this._matrix[3]=t}}),Object.defineProperty(Vt.prototype,\"tx\",{get:function(){return this._matrix[4]},set:function(t){this._matrix[4]=t}}),Object.defineProperty(Vt.prototype,\"ty\",{get:function(){return this._matrix[5]},set:function(t){this._matrix[5]=t}}),Object.defineProperty(Vt.prototype,\"a\",{get:function(){return this._matrix[0]},set:function(t){this._matrix[0]=t}}),Object.defineProperty(Vt.prototype,\"b\",{get:function(){return this._matrix[1]},set:function(t){this._matrix[1]=t}}),Object.defineProperty(Vt.prototype,\"c\",{get:function(){return this._matrix[2]},set:function(t){this._matrix[2]=t}}),Object.defineProperty(Vt.prototype,\"d\",{get:function(){return this._matrix[3]},set:function(t){this._matrix[3]=t}}),Object.defineProperty(Vt.prototype,\"e\",{get:function(){return this._matrix[4]},set:function(t){this._matrix[4]=t}}),Object.defineProperty(Vt.prototype,\"f\",{get:function(){return this._matrix[5]},set:function(t){this._matrix[5]=t}}),Object.defineProperty(Vt.prototype,\"rotation\",{get:function(){return Math.atan2(this.shx,this.sx)}}),Object.defineProperty(Vt.prototype,\"scaleX\",{get:function(){return this.decompose().scale.sx}}),Object.defineProperty(Vt.prototype,\"scaleY\",{get:function(){return this.decompose().scale.sy}}),Object.defineProperty(Vt.prototype,\"isIdentity\",{get:function(){return 1===this.sx&&(0===this.shy&&(0===this.shx&&(1===this.sy&&(0===this.tx&&0===this.ty))))}}),Vt.prototype.join=function(t){return[this.sx,this.shy,this.shx,this.sy,this.tx,this.ty].map(O).join(t)},Vt.prototype.multiply=function(t){var e=t.sx*this.sx+t.shy*this.shx,r=t.sx*this.shy+t.shy*this.sy,n=t.shx*this.sx+t.sy*this.shx,i=t.shx*this.shy+t.sy*this.sy,a=t.tx*this.sx+t.ty*this.shx+this.tx,o=t.tx*this.shy+t.ty*this.sy+this.ty;return new Vt(e,r,n,i,a,o)},Vt.prototype.decompose=function(){var t=this.sx,e=this.shy,r=this.shx,n=this.sy,i=this.tx,a=this.ty,o=Math.sqrt(t*t+e*e),s=(t/=o)*r+(e/=o)*n;r-=t*s,n-=e*s;var c=Math.sqrt(r*r+n*n);return s/=c,t*(n/=c)<e*(r/=c)&&(t=-t,e=-e,s=-s,o=-o),{scale:new Vt(o,0,0,c,0,0),translate:new Vt(1,0,0,1,i,a),rotate:new Vt(t,e,-e,t,0,0),skew:new Vt(1,0,s,1,0,0)}},Vt.prototype.toString=function(t){return this.join(\" \")},Vt.prototype.inversed=function(){var t=this.sx,e=this.shy,r=this.shx,n=this.sy,i=this.tx,a=this.ty,o=1/(t*n-e*r),s=n*o,c=-e*o,u=-r*o,h=t*o;return new Vt(s,c,u,h,-s*i-u*a,-c*i-h*a)},Vt.prototype.applyToPoint=function(t){var e=t.x*this.sx+t.y*this.shx+this.tx,r=t.x*this.shy+t.y*this.sy+this.ty;return new Cr(e,r)},Vt.prototype.applyToRectangle=function(t){var e=this.applyToPoint(t),r=this.applyToPoint(new Cr(t.x+t.w,t.y+t.h));return new jr(e.x,e.y,r.x-e.x,r.y-e.y)},Vt.prototype.clone=function(){var t=this.sx,e=this.shy,r=this.shx,n=this.sy,i=this.tx,a=this.ty;return new Vt(t,e,r,n,i,a)},y.Matrix=Vt;var Gt=y.matrixMult=function(t,e){return e.multiply(t)},Yt=new Vt(1,0,0,1,0,0);y.unitMatrix=y.identityMatrix=Yt;var Jt=function(t,e){if(!Bt[t]){var r=(e instanceof B?\"Sh\":\"P\")+(Object.keys(Ot).length+1).toString(10);e.id=r,Bt[t]=r,Ot[r]=e,Tt.publish(\"addPattern\",e)}};y.ShadingPattern=B,y.TilingPattern=M,y.addShadingPattern=function(t,e){return q(\"addShadingPattern()\"),Jt(t,e),this},y.beginTilingPattern=function(t){q(\"beginTilingPattern()\"),Br(t.boundingBox[0],t.boundingBox[1],t.boundingBox[2]-t.boundingBox[0],t.boundingBox[3]-t.boundingBox[1],t.matrix)},y.endTilingPattern=function(t,e){q(\"endTilingPattern()\"),e.stream=ot[$].join(\"\\n\"),Jt(t,e),Tt.publish(\"endTilingPattern\",e),Wt.pop().restore()};var Xt=y.__private__.newObject=function(){var t=Kt();return Zt(t,!0),t},Kt=y.__private__.newObjectDeferred=function(){return et++,rt[et]=function(){return it},et},Zt=function(t,e){return e=\"boolean\"==typeof e&&e,rt[t]=it,e&&lt(t+\" 0 obj\"),t},$t=y.__private__.newAdditionalObject=function(){var t={objId:Kt(),content:\"\"};return at.push(t),t},Qt=Kt(),te=Kt(),ee=y.__private__.decodeColorString=function(t){var e=t.split(\" \");if(2!==e.length||\"g\"!==e[1]&&\"G\"!==e[1]){if(5===e.length&&(\"k\"===e[4]||\"K\"===e[4])){e=[(1-e[0])*(1-e[3]),(1-e[1])*(1-e[3]),(1-e[2])*(1-e[3]),\"r\"]}}else{var r=parseFloat(e[0]);e=[r,r,r,\"r\"]}for(var n=\"#\",i=0;i<3;i++)n+=(\"0\"+Math.floor(255*parseFloat(e[i])).toString(16)).slice(-2);return n},re=y.__private__.encodeColorString=function(e){var r;\"string\"==typeof e&&(e={ch1:e});var n=e.ch1,i=e.ch2,a=e.ch3,o=e.ch4,s=\"draw\"===e.pdfColorType?[\"G\",\"RG\",\"K\"]:[\"g\",\"rg\",\"k\"];if(\"string\"==typeof n&&\"#\"!==n.charAt(0)){var c=new f(n);if(c.ok)n=c.toHex();else if(!/^\\d*\\.?\\d*$/.test(n))throw new Error('Invalid color \"'+n+'\" passed to jsPDF.encodeColorString.')}if(\"string\"==typeof n&&/^#[0-9A-Fa-f]{3}$/.test(n)&&(n=\"#\"+n[1]+n[1]+n[2]+n[2]+n[3]+n[3]),\"string\"==typeof n&&/^#[0-9A-Fa-f]{6}$/.test(n)){var u=parseInt(n.substr(1),16);n=u>>16&255,i=u>>8&255,a=255&u}if(void 0===i||void 0===o&&n===i&&i===a)if(\"string\"==typeof n)r=n+\" \"+s[0];else switch(e.precision){case 2:r=R(n/255)+\" \"+s[0];break;case 3:default:r=T(n/255)+\" \"+s[0]}else if(void 0===o||\"object\"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(o)){if(o&&!isNaN(o.a)&&0===o.a)return r=[\"1.\",\"1.\",\"1.\",s[1]].join(\" \");if(\"string\"==typeof n)r=[n,i,a,s[1]].join(\" \");else switch(e.precision){case 2:r=[R(n/255),R(i/255),R(a/255),s[1]].join(\" \");break;default:case 3:r=[T(n/255),T(i/255),T(a/255),s[1]].join(\" \")}}else if(\"string\"==typeof n)r=[n,i,a,o,s[2]].join(\" \");else switch(e.precision){case 2:r=[R(n),R(i),R(a),R(o),s[2]].join(\" \");break;case 3:default:r=[T(n),T(i),T(a),T(o),s[2]].join(\" \")}return r},ne=y.__private__.getFilters=function(){return u},ie=y.__private__.putStream=function(t){var e=(t=t||{}).data||\"\",r=t.filters||ne(),n=t.alreadyAppliedFilters||[],i=t.addLength1||!1,a=e.length,o=t.objectId,s=function(t){return t};if(null!==m&&void 0===o)throw new Error(\"ObjectId must be passed to putStream for file encryption\");null!==m&&(s=Ye.encryptor(o,0));var c={};!0===r&&(r=[\"FlateEncode\"]);var u=t.additionalKeyValues||[],h=(c=void 0!==E.API.processDataByFilters?E.API.processDataByFilters(e,r):{data:e,reverseChain:[]}).reverseChain+(Array.isArray(n)?n.join(\" \"):n.toString());if(0!==c.data.length&&(u.push({key:\"Length\",value:c.data.length}),!0===i&&u.push({key:\"Length1\",value:a})),0!=h.length)if(h.split(\"/\").length-1==1)u.push({key:\"Filter\",value:h});else{u.push({key:\"Filter\",value:\"[\"+h+\"]\"});for(var l=0;l<u.length;l+=1)if(\"DecodeParms\"===u[l].key){for(var f=[],d=0;d<c.reverseChain.split(\"/\").length-1;d+=1)f.push(\"null\");f.push(u[l].value),u[l].value=\"[\"+f.join(\" \")+\"]\"}}lt(\"<<\");for(var p=0;p<u.length;p++)lt(\"/\"+u[p].key+\" \"+u[p].value);lt(\">>\"),0!==c.data.length&&(lt(\"stream\"),lt(s(c.data)),lt(\"endstream\"))},ae=y.__private__.putPage=function(t){var e=t.number,r=t.data,n=t.objId,i=t.contentsObjId;Zt(n,!0),lt(\"<</Type /Page\"),lt(\"/Parent \"+t.rootDictionaryObjId+\" 0 R\"),lt(\"/Resources \"+t.resourceDictionaryObjId+\" 0 R\"),lt(\"/MediaBox [\"+parseFloat(O(t.mediaBox.bottomLeftX))+\" \"+parseFloat(O(t.mediaBox.bottomLeftY))+\" \"+O(t.mediaBox.topRightX)+\" \"+O(t.mediaBox.topRightY)+\"]\"),null!==t.cropBox&&lt(\"/CropBox [\"+O(t.cropBox.bottomLeftX)+\" \"+O(t.cropBox.bottomLeftY)+\" \"+O(t.cropBox.topRightX)+\" \"+O(t.cropBox.topRightY)+\"]\"),null!==t.bleedBox&&lt(\"/BleedBox [\"+O(t.bleedBox.bottomLeftX)+\" \"+O(t.bleedBox.bottomLeftY)+\" \"+O(t.bleedBox.topRightX)+\" \"+O(t.bleedBox.topRightY)+\"]\"),null!==t.trimBox&&lt(\"/TrimBox [\"+O(t.trimBox.bottomLeftX)+\" \"+O(t.trimBox.bottomLeftY)+\" \"+O(t.trimBox.topRightX)+\" \"+O(t.trimBox.topRightY)+\"]\"),null!==t.artBox&&lt(\"/ArtBox [\"+O(t.artBox.bottomLeftX)+\" \"+O(t.artBox.bottomLeftY)+\" \"+O(t.artBox.topRightX)+\" \"+O(t.artBox.topRightY)+\"]\"),\"number\"==typeof t.userUnit&&1!==t.userUnit&&lt(\"/UserUnit \"+t.userUnit),Tt.publish(\"putPage\",{objId:n,pageContext:Rt[e],pageNumber:e,page:r}),lt(\"/Contents \"+i+\" 0 R\"),lt(\">>\"),lt(\"endobj\");var a=r.join(\"\\n\");return S===x.ADVANCED&&(a+=\"\\nQ\"),Zt(i,!0),ie({data:a,filters:ne(),objectId:i}),lt(\"endobj\"),n},oe=y.__private__.putPages=function(){var t,e,r=[];for(t=1;t<=Dt;t++)Rt[t].objId=Kt(),Rt[t].contentsObjId=Kt();for(t=1;t<=Dt;t++)r.push(ae({number:t,data:ot[t],objId:Rt[t].objId,contentsObjId:Rt[t].contentsObjId,mediaBox:Rt[t].mediaBox,cropBox:Rt[t].cropBox,bleedBox:Rt[t].bleedBox,trimBox:Rt[t].trimBox,artBox:Rt[t].artBox,userUnit:Rt[t].userUnit,rootDictionaryObjId:Qt,resourceDictionaryObjId:te}));Zt(Qt,!0),lt(\"<</Type /Pages\");var n=\"/Kids [\";for(e=0;e<Dt;e++)n+=r[e]+\" 0 R \";lt(n+\"]\"),lt(\"/Count \"+Dt),lt(\">>\"),lt(\"endobj\"),Tt.publish(\"postPutPages\")},se=function(t){Tt.publish(\"putFont\",{font:t,out:lt,newObject:Xt,putStream:ie}),!0!==t.isAlreadyPutted&&(t.objectNumber=Xt(),lt(\"<<\"),lt(\"/Type /Font\"),lt(\"/BaseFont /\"+F(t.postScriptName)),lt(\"/Subtype /Type1\"),\"string\"==typeof t.encoding&&lt(\"/Encoding /\"+t.encoding),lt(\"/FirstChar 32\"),lt(\"/LastChar 255\"),lt(\">>\"),lt(\"endobj\"))},ce=function(){for(var t in Ft)Ft.hasOwnProperty(t)&&(!1===v||!0===v&&b.hasOwnProperty(t))&&se(Ft[t])},ue=function(t){t.objectNumber=Xt();var e=[];e.push({key:\"Type\",value:\"/XObject\"}),e.push({key:\"Subtype\",value:\"/Form\"}),e.push({key:\"BBox\",value:\"[\"+[O(t.x),O(t.y),O(t.x+t.width),O(t.y+t.height)].join(\" \")+\"]\"}),e.push({key:\"Matrix\",value:\"[\"+t.matrix.toString()+\"]\"});var r=t.pages[1].join(\"\\n\");ie({data:r,additionalKeyValues:e,objectId:t.objectNumber}),lt(\"endobj\")},he=function(){for(var t in zt)zt.hasOwnProperty(t)&&ue(zt[t])},le=function(t,e){var r,n=[],i=1/(e-1);for(r=0;r<1;r+=i)n.push(r);if(n.push(1),0!=t[0].offset){var a={offset:0,color:t[0].color};t.unshift(a)}if(1!=t[t.length-1].offset){var o={offset:1,color:t[t.length-1].color};t.push(o)}for(var s=\"\",c=0,u=0;u<n.length;u++){for(r=n[u];r>t[c+1].offset;)c++;var h=t[c].offset,l=(r-h)/(t[c+1].offset-h),f=t[c].color,d=t[c+1].color;s+=tt(Math.round((1-l)*f[0]+l*d[0]).toString(16))+tt(Math.round((1-l)*f[1]+l*d[1]).toString(16))+tt(Math.round((1-l)*f[2]+l*d[2]).toString(16))}return s.trim()},fe=function(t,e){e||(e=21);var r=Xt(),n=le(t.colors,e),i=[];i.push({key:\"FunctionType\",value:\"0\"}),i.push({key:\"Domain\",value:\"[0.0 1.0]\"}),i.push({key:\"Size\",value:\"[\"+e+\"]\"}),i.push({key:\"BitsPerSample\",value:\"8\"}),i.push({key:\"Range\",value:\"[0.0 1.0 0.0 1.0 0.0 1.0]\"}),i.push({key:\"Decode\",value:\"[0.0 1.0 0.0 1.0 0.0 1.0]\"}),ie({data:n,additionalKeyValues:i,alreadyAppliedFilters:[\"/ASCIIHexDecode\"],objectId:r}),lt(\"endobj\"),t.objectNumber=Xt(),lt(\"<< /ShadingType \"+t.type),lt(\"/ColorSpace /DeviceRGB\");var a=\"/Coords [\"+O(parseFloat(t.coords[0]))+\" \"+O(parseFloat(t.coords[1]))+\" \";2===t.type?a+=O(parseFloat(t.coords[2]))+\" \"+O(parseFloat(t.coords[3])):a+=O(parseFloat(t.coords[2]))+\" \"+O(parseFloat(t.coords[3]))+\" \"+O(parseFloat(t.coords[4]))+\" \"+O(parseFloat(t.coords[5])),lt(a+=\"]\"),t.matrix&&lt(\"/Matrix [\"+t.matrix.toString()+\"]\"),lt(\"/Function \"+r+\" 0 R\"),lt(\"/Extend [true true]\"),lt(\">>\"),lt(\"endobj\")},de=function(t,e){var r=Kt(),n=Xt();e.push({resourcesOid:r,objectOid:n}),t.objectNumber=n;var i=[];i.push({key:\"Type\",value:\"/Pattern\"}),i.push({key:\"PatternType\",value:\"1\"}),i.push({key:\"PaintType\",value:\"1\"}),i.push({key:\"TilingType\",value:\"1\"}),i.push({key:\"BBox\",value:\"[\"+t.boundingBox.map(O).join(\" \")+\"]\"}),i.push({key:\"XStep\",value:O(t.xStep)}),i.push({key:\"YStep\",value:O(t.yStep)}),i.push({key:\"Resources\",value:r+\" 0 R\"}),t.matrix&&i.push({key:\"Matrix\",value:\"[\"+t.matrix.toString()+\"]\"}),ie({data:t.stream,additionalKeyValues:i,objectId:t.objectNumber}),lt(\"endobj\")},pe=function(t){var e;for(e in Ot)Ot.hasOwnProperty(e)&&(Ot[e]instanceof B?fe(Ot[e]):Ot[e]instanceof M&&de(Ot[e],t))},ge=function(t){for(var e in t.objectNumber=Xt(),lt(\"<<\"),t)switch(e){case\"opacity\":lt(\"/ca \"+R(t[e]));break;case\"stroke-opacity\":lt(\"/CA \"+R(t[e]))}lt(\">>\"),lt(\"endobj\")},me=function(){var t;for(t in Mt)Mt.hasOwnProperty(t)&&ge(Mt[t])},ve=function(){for(var t in lt(\"/XObject <<\"),zt)zt.hasOwnProperty(t)&&zt[t].objectNumber>=0&&lt(\"/\"+t+\" \"+zt[t].objectNumber+\" 0 R\");Tt.publish(\"putXobjectDict\"),lt(\">>\")},be=function(){Ye.oid=Xt(),lt(\"<<\"),lt(\"/Filter /Standard\"),lt(\"/V \"+Ye.v),lt(\"/R \"+Ye.r),lt(\"/U <\"+Ye.toHexString(Ye.U)+\">\"),lt(\"/O <\"+Ye.toHexString(Ye.O)+\">\"),lt(\"/P \"+Ye.P),lt(\">>\"),lt(\"endobj\")},ye=function(){for(var t in lt(\"/Font <<\"),Ft)Ft.hasOwnProperty(t)&&(!1===v||!0===v&&b.hasOwnProperty(t))&&lt(\"/\"+t+\" \"+Ft[t].objectNumber+\" 0 R\");lt(\">>\")},we=function(){if(Object.keys(Ot).length>0){for(var t in lt(\"/Shading <<\"),Ot)Ot.hasOwnProperty(t)&&Ot[t]instanceof B&&Ot[t].objectNumber>=0&&lt(\"/\"+t+\" \"+Ot[t].objectNumber+\" 0 R\");Tt.publish(\"putShadingPatternDict\"),lt(\">>\")}},Ne=function(t){if(Object.keys(Ot).length>0){for(var e in lt(\"/Pattern <<\"),Ot)Ot.hasOwnProperty(e)&&Ot[e]instanceof y.TilingPattern&&Ot[e].objectNumber>=0&&Ot[e].objectNumber<t&&lt(\"/\"+e+\" \"+Ot[e].objectNumber+\" 0 R\");Tt.publish(\"putTilingPatternDict\"),lt(\">>\")}},Le=function(){if(Object.keys(Mt).length>0){var t;for(t in lt(\"/ExtGState <<\"),Mt)Mt.hasOwnProperty(t)&&Mt[t].objectNumber>=0&&lt(\"/\"+t+\" \"+Mt[t].objectNumber+\" 0 R\");Tt.publish(\"putGStateDict\"),lt(\">>\")}},Ae=function(t){Zt(t.resourcesOid,!0),lt(\"<<\"),lt(\"/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]\"),ye(),we(),Ne(t.objectOid),Le(),ve(),lt(\">>\"),lt(\"endobj\")},xe=function(){var t=[];ce(),me(),he(),pe(t),Tt.publish(\"putResources\"),t.forEach(Ae),Ae({resourcesOid:te,objectOid:Number.MAX_SAFE_INTEGER}),Tt.publish(\"postPutResources\")},Se=function(){Tt.publish(\"putAdditionalObjects\");for(var t=0;t<at.length;t++){var e=at[t];Zt(e.objId,!0),lt(e.content),lt(\"endobj\")}Tt.publish(\"postPutAdditionalObjects\")},_e=function(t){Ct[t.fontName]=Ct[t.fontName]||{},Ct[t.fontName][t.fontStyle]=t.id},Pe=function(t,e,r,n,i){var a={id:\"F\"+(Object.keys(Ft).length+1).toString(10),postScriptName:t,fontName:e,fontStyle:r,encoding:n,isStandardFont:i||!1,metadata:{}};return Tt.publish(\"addFont\",{font:a,instance:this}),Ft[a.id]=a,_e(a),a.id},ke=function(t){for(var e=0,r=pt.length;e<r;e++){var n=Pe.call(this,t[e][0],t[e][1],t[e][2],pt[e][3],!0);!1===v&&(b[n]=!0);var i=t[e][0].split(\"-\");_e({id:n,fontName:i[0],fontStyle:i[1]||\"\"})}Tt.publish(\"addFonts\",{fonts:Ft,dictionary:Ct})},Ie=function(t){return t.foo=function(){try{return t.apply(this,arguments)}catch(t){var e=t.stack||\"\";~e.indexOf(\" at \")&&(e=e.split(\" at \")[1]);var r=\"Error in function \"+e.split(\"\\n\")[0].split(\"<\")[0]+\": \"+t.message;if(!n.console)throw new Error(r);n.console.error(r,t),n.alert&&alert(r)}},t.foo.bar=t,t.foo},Fe=function(t,e){var r,n,i,a,o,s,c,u,h;if(i=(e=e||{}).sourceEncoding||\"Unicode\",o=e.outputEncoding,(e.autoencode||o)&&Ft[St].metadata&&Ft[St].metadata[i]&&Ft[St].metadata[i].encoding&&(a=Ft[St].metadata[i].encoding,!o&&Ft[St].encoding&&(o=Ft[St].encoding),!o&&a.codePages&&(o=a.codePages[0]),\"string\"==typeof o&&(o=a[o]),o)){for(c=!1,s=[],r=0,n=t.length;r<n;r++)(u=o[t.charCodeAt(r)])?s.push(String.fromCharCode(u)):s.push(t[r]),s[r].charCodeAt(0)>>8&&(c=!0);t=s.join(\"\")}for(r=t.length;void 0===c&&0!==r;)t.charCodeAt(r-1)>>8&&(c=!0),r--;if(!c)return t;for(s=e.noBOM?[]:[254,255],r=0,n=t.length;r<n;r++){if((h=(u=t.charCodeAt(r))>>8)>>8)throw new Error(\"Character at position \"+r+\" of string '\"+t+\"' exceeds 16bits. Cannot be encoded into UCS-2 BE\");s.push(h),s.push(u-(h<<8))}return String.fromCharCode.apply(void 0,s)},Ce=y.__private__.pdfEscape=y.pdfEscape=function(t,e){return Fe(t,e).replace(/\\\\/g,\"\\\\\\\\\").replace(/\\(/g,\"\\\\(\").replace(/\\)/g,\"\\\\)\")},je=y.__private__.beginPage=function(t){ot[++Dt]=[],Rt[Dt]={objId:0,contentsObjId:0,userUnit:Number(d),artBox:null,bleedBox:null,cropBox:null,trimBox:null,mediaBox:{bottomLeftX:0,bottomLeftY:0,topRightX:Number(t[0]),topRightY:Number(t[1])}},Me(Dt),ht(ot[$])},Oe=function(t,e){var r,n,o;switch(i=e||i,\"string\"==typeof t&&(r=A(t.toLowerCase()),Array.isArray(r)&&(n=r[0],o=r[1])),Array.isArray(t)&&(n=t[0]*_t,o=t[1]*_t),isNaN(n)&&(n=s[0],o=s[1]),(n>14400||o>14400)&&(a.warn(\"A page in a PDF can not be wider or taller than 14400 userUnit. jsPDF limits the width/height to 14400\"),n=Math.min(14400,n),o=Math.min(14400,o)),s=[n,o],i.substr(0,1)){case\"l\":o>n&&(s=[o,n]);break;case\"p\":n>o&&(s=[o,n])}je(s),pr(fr),lt(Lr),0!==kr&&lt(kr+\" J\"),0!==Ir&&lt(Ir+\" j\"),Tt.publish(\"addPage\",{pageNumber:Dt})},Be=function(t){t>0&&t<=Dt&&(ot.splice(t,1),Rt.splice(t,1),Dt--,$>Dt&&($=Dt),this.setPage($))},Me=function(t){t>0&&t<=Dt&&($=t)},Ee=y.__private__.getNumberOfPages=y.getNumberOfPages=function(){return ot.length-1},qe=function(t,e,r){var n,i=void 0;return r=r||{},t=void 0!==t?t:Ft[St].fontName,e=void 0!==e?e:Ft[St].fontStyle,n=t.toLowerCase(),void 0!==Ct[n]&&void 0!==Ct[n][e]?i=Ct[n][e]:void 0!==Ct[t]&&void 0!==Ct[t][e]?i=Ct[t][e]:!1===r.disableWarning&&a.warn(\"Unable to look up font label for font '\"+t+\"', '\"+e+\"'. Refer to getFontList() for available fonts.\"),i||r.noFallback||null==(i=Ct.times[e])&&(i=Ct.times.normal),i},De=y.__private__.putInfo=function(){var t=Xt(),e=function(t){return t};for(var r in null!==m&&(e=Ye.encryptor(t,0)),lt(\"<<\"),lt(\"/Producer (\"+Ce(e(\"jsPDF \"+E.version))+\")\"),xt)xt.hasOwnProperty(r)&&xt[r]&&lt(\"/\"+r.substr(0,1).toUpperCase()+r.substr(1)+\" (\"+Ce(e(xt[r]))+\")\");lt(\"/CreationDate (\"+Ce(e(W))+\")\"),lt(\">>\"),lt(\"endobj\")},Re=y.__private__.putCatalog=function(t){var e=(t=t||{}).rootDictionaryObjId||Qt;switch(Xt(),lt(\"<<\"),lt(\"/Type /Catalog\"),lt(\"/Pages \"+e+\" 0 R\"),mt||(mt=\"fullwidth\"),mt){case\"fullwidth\":lt(\"/OpenAction [3 0 R /FitH null]\");break;case\"fullheight\":lt(\"/OpenAction [3 0 R /FitV null]\");break;case\"fullpage\":lt(\"/OpenAction [3 0 R /Fit]\");break;case\"original\":lt(\"/OpenAction [3 0 R /XYZ null null 1]\");break;default:var r=\"\"+mt;\"%\"===r.substr(r.length-1)&&(mt=parseInt(mt)/100),\"number\"==typeof mt&&lt(\"/OpenAction [3 0 R /XYZ null null \"+R(mt)+\"]\")}switch(Nt||(Nt=\"continuous\"),Nt){case\"continuous\":lt(\"/PageLayout /OneColumn\");break;case\"single\":lt(\"/PageLayout /SinglePage\");break;case\"two\":case\"twoleft\":lt(\"/PageLayout /TwoColumnLeft\");break;case\"tworight\":lt(\"/PageLayout /TwoColumnRight\")}yt&&lt(\"/PageMode /\"+yt),Tt.publish(\"putCatalog\"),lt(\">>\"),lt(\"endobj\")},Te=y.__private__.putTrailer=function(){lt(\"trailer\"),lt(\"<<\"),lt(\"/Size \"+(et+1)),lt(\"/Root \"+et+\" 0 R\"),lt(\"/Info \"+(et-1)+\" 0 R\"),null!==m&&lt(\"/Encrypt \"+Ye.oid+\" 0 R\"),lt(\"/ID [ <\"+V+\"> <\"+V+\"> ]\"),lt(\">>\")},Ue=y.__private__.putHeader=function(){lt(\"%PDF-\"+w),lt(\"%ºß¬à\")},ze=y.__private__.putXRef=function(){var t=\"0000000000\";lt(\"xref\"),lt(\"0 \"+(et+1)),lt(\"0000000000 65535 f \");for(var e=1;e<=et;e++){\"function\"==typeof rt[e]?lt((t+rt[e]()).slice(-10)+\" 00000 n \"):void 0!==rt[e]?lt((t+rt[e]).slice(-10)+\" 00000 n \"):lt(\"0000000000 00000 n \")}},He=y.__private__.buildDocument=function(){ut(),ht(nt),Tt.publish(\"buildDocument\"),Ue(),oe(),Se(),xe(),null!==m&&be(),De(),Re();var t=it;return ze(),Te(),lt(\"startxref\"),lt(\"\"+t),lt(\"%%EOF\"),ht(ot[$]),nt.join(\"\\n\")},We=y.__private__.getBlob=function(t){return new Blob([dt(t)],{type:\"application/pdf\"})},Ve=y.output=y.__private__.output=Ie((function(t,e){switch(\"string\"==typeof(e=e||{})?e={filename:e}:e.filename=e.filename||\"generated.pdf\",t){case void 0:return He();case\"save\":y.save(e.filename);break;case\"arraybuffer\":return dt(He());case\"blob\":return We(He());case\"bloburi\":case\"bloburl\":if(void 0!==n.URL&&\"function\"==typeof n.URL.createObjectURL)return n.URL&&n.URL.createObjectURL(We(He()))||void 0;a.warn(\"bloburl is not supported by your system, because URL.createObjectURL is not supported by your browser.\");break;case\"datauristring\":case\"dataurlstring\":var r=\"\",i=He();try{r=h(i)}catch(t){r=h(unescape(encodeURIComponent(i)))}return\"data:application/pdf;filename=\"+e.filename+\";base64,\"+r;case\"pdfobjectnewwindow\":if(\"[object Window]\"===Object.prototype.toString.call(n)){var o=\"https://cdnjs.cloudflare.com/ajax/libs/pdfobject/2.1.1/pdfobject.min.js\",s=' integrity=\"sha512-4ze/a9/4jqu+tX9dfOqJYSvyYd5M6qum/3HpCLr+/Jqf0whc37VUbkpNGHR7/8pSnCFw47T1fmIpwBV7UySh3g==\" crossorigin=\"anonymous\"';e.pdfObjectUrl&&(o=e.pdfObjectUrl,s=\"\");var c='<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><script src=\"'+o+'\"'+s+'><\\/script><script >PDFObject.embed(\"'+this.output(\"dataurlstring\")+'\", '+JSON.stringify(e)+\");<\\/script></body></html>\",u=n.open();return null!==u&&u.document.write(c),u}throw new Error(\"The option pdfobjectnewwindow just works in a browser-environment.\");case\"pdfjsnewwindow\":if(\"[object Window]\"===Object.prototype.toString.call(n)){var l='<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe id=\"pdfViewer\" src=\"'+(e.pdfJsUrl||\"examples/PDF.js/web/viewer.html\")+\"?file=&downloadName=\"+e.filename+'\" width=\"500px\" height=\"400px\" /></body></html>',f=n.open();if(null!==f){f.document.write(l);var d=this;f.document.documentElement.querySelector(\"#pdfViewer\").onload=function(){f.document.title=e.filename,f.document.documentElement.querySelector(\"#pdfViewer\").contentWindow.PDFViewerApplication.open(d.output(\"bloburl\"))}}return f}throw new Error(\"The option pdfjsnewwindow just works in a browser-environment.\");case\"dataurlnewwindow\":if(\"[object Window]\"!==Object.prototype.toString.call(n))throw new Error(\"The option dataurlnewwindow just works in a browser-environment.\");var p='<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe src=\"'+this.output(\"datauristring\",e)+'\"></iframe></body></html>',g=n.open();if(null!==g&&(g.document.write(p),g.document.title=e.filename),g||\"undefined\"==typeof safari)return g;break;case\"datauri\":case\"dataurl\":return n.document.location.href=this.output(\"datauristring\",e);default:return null}})),Ge=function(t){return!0===Array.isArray(Ut)&&Ut.indexOf(t)>-1};switch(o){case\"pt\":_t=1;break;case\"mm\":_t=72/25.4;break;case\"cm\":_t=72/2.54;break;case\"in\":_t=72;break;case\"px\":_t=1==Ge(\"px_scaling\")?.75:96/72;break;case\"pc\":case\"em\":_t=12;break;case\"ex\":_t=6;break;default:if(\"number\"!=typeof o)throw new Error(\"Invalid unit: \"+o);_t=o}var Ye=null;K(),Y();var Je=function(t){return null!==m?Ye.encryptor(t,0):function(t){return t}},Xe=y.__private__.getPageInfo=y.getPageInfo=function(t){if(isNaN(t)||t%1!=0)throw new Error(\"Invalid argument passed to jsPDF.getPageInfo\");return{objId:Rt[t].objId,pageNumber:t,pageContext:Rt[t]}},Ke=y.__private__.getPageInfoByObjId=function(t){if(isNaN(t)||t%1!=0)throw new Error(\"Invalid argument passed to jsPDF.getPageInfoByObjId\");for(var e in Rt)if(Rt[e].objId===t)break;return Xe(e)},Ze=y.__private__.getCurrentPageInfo=y.getCurrentPageInfo=function(){return{objId:Rt[$].objId,pageNumber:$,pageContext:Rt[$]}};y.addPage=function(){return Oe.apply(this,arguments),this},y.setPage=function(){return Me.apply(this,arguments),ht.call(this,ot[$]),this},y.insertPage=function(t){return this.addPage(),this.movePage($,t),this},y.movePage=function(t,e){var r,n;if(t>e){r=ot[t],n=Rt[t];for(var i=t;i>e;i--)ot[i]=ot[i-1],Rt[i]=Rt[i-1];ot[e]=r,Rt[e]=n,this.setPage(e)}else if(t<e){r=ot[t],n=Rt[t];for(var a=t;a<e;a++)ot[a]=ot[a+1],Rt[a]=Rt[a+1];ot[e]=r,Rt[e]=n,this.setPage(e)}return this},y.deletePage=function(){return Be.apply(this,arguments),this},y.__private__.text=y.text=function(e,r,n,i,a){var o,s,c,u,h,l,f,d,p,g=(i=i||{}).scope||this;if(\"number\"==typeof e&&\"number\"==typeof r&&(\"string\"==typeof n||Array.isArray(n))){var m=n;n=r,r=e,e=m}if(arguments[3]instanceof Vt==!1?(c=arguments[4],u=arguments[5],\"object\"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(f=arguments[3])&&null!==f||(\"string\"==typeof c&&(u=c,c=null),\"string\"==typeof f&&(u=f,f=null),\"number\"==typeof f&&(c=f,f=null),i={flags:f,angle:c,align:u})):(q(\"The transform parameter of text() with a Matrix value\"),p=a),isNaN(r)||isNaN(n)||null==e)throw new Error(\"Invalid arguments passed to jsPDF.text\");if(0===e.length)return g;var v=\"\",y=!1,w=\"number\"==typeof i.lineHeightFactor?i.lineHeightFactor:lr,N=g.internal.scaleFactor;function L(t){return t=t.split(\"\\t\").join(Array(i.TabLen||9).join(\" \")),Ce(t,f)}function A(t){for(var e,r=t.concat(),n=[],i=r.length;i--;)\"string\"==typeof(e=r.shift())?n.push(e):Array.isArray(t)&&(1===e.length||void 0===e[1]&&void 0===e[2])?n.push(e[0]):n.push([e[0],e[1],e[2]]);return n}function _(t,e){var r;if(\"string\"==typeof t)r=e(t)[0];else if(Array.isArray(t)){for(var n,i,a=t.concat(),o=[],s=a.length;s--;)\"string\"==typeof(n=a.shift())?o.push(e(n)[0]):Array.isArray(n)&&\"string\"==typeof n[0]&&(i=e(n[0],n[1],n[2]),o.push([i[0],i[1],i[2]]));r=o}return r}var P=!1,k=!0;if(\"string\"==typeof e)P=!0;else if(Array.isArray(e)){var I=e.concat();s=[];for(var F,C=I.length;C--;)(\"string\"!=typeof(F=I.shift())||Array.isArray(F)&&\"string\"!=typeof F[0])&&(k=!1);P=k}if(!1===P)throw new Error('Type of text must be string or Array. \"'+e+'\" is not recognized.');\"string\"==typeof e&&(e=e.match(/[\\r?\\n]/)?e.split(/\\r\\n|\\r|\\n/g):[e]);var j=gt/g.internal.scaleFactor,B=j*(w-1);switch(i.baseline){case\"bottom\":n-=B;break;case\"top\":n+=j-B;break;case\"hanging\":n+=j-2*B;break;case\"middle\":n+=j/2-B}if((l=i.maxWidth||0)>0&&(\"string\"==typeof e?e=g.splitTextToSize(e,l):\"[object Array]\"===Object.prototype.toString.call(e)&&(e=e.reduce((function(t,e){return t.concat(g.splitTextToSize(e,l))}),[]))),o={text:e,x:r,y:n,options:i,mutex:{pdfEscape:Ce,activeFontKey:St,fonts:Ft,activeFontSize:gt}},Tt.publish(\"preProcessText\",o),e=o.text,c=(i=o.options).angle,p instanceof Vt==!1&&c&&\"number\"==typeof c){c*=Math.PI/180,0===i.rotationDirection&&(c=-c),S===x.ADVANCED&&(c=-c);var M=Math.cos(c),E=Math.sin(c);p=new Vt(M,E,-E,M,0,0)}else c&&c instanceof Vt&&(p=c);S!==x.ADVANCED||p||(p=Yt),void 0!==(h=i.charSpace||_r)&&(v+=O(U(h))+\" Tc\\n\",this.setCharSpace(this.getCharSpace()||0)),void 0!==(d=i.horizontalScale)&&(v+=O(100*d)+\" Tz\\n\");i.lang;var D=-1,R=void 0!==i.renderingMode?i.renderingMode:i.stroke,T=g.internal.getCurrentPageInfo().pageContext;switch(R){case 0:case!1:case\"fill\":D=0;break;case 1:case!0:case\"stroke\":D=1;break;case 2:case\"fillThenStroke\":D=2;break;case 3:case\"invisible\":D=3;break;case 4:case\"fillAndAddForClipping\":D=4;break;case 5:case\"strokeAndAddPathForClipping\":D=5;break;case 6:case\"fillThenStrokeAndAddToPathForClipping\":D=6;break;case 7:case\"addToPathForClipping\":D=7}var z=void 0!==T.usedRenderingMode?T.usedRenderingMode:-1;-1!==D?v+=D+\" Tr\\n\":-1!==z&&(v+=\"0 Tr\\n\"),-1!==D&&(T.usedRenderingMode=D),u=i.align||\"left\";var H,W=gt*w,V=g.internal.pageSize.getWidth(),G=Ft[St];h=i.charSpace||_r,l=i.maxWidth||0,f=Object.assign({autoencode:!0,noBOM:!0},i.flags);var Y=[],J=function(t){return g.getStringUnitWidth(t,{font:G,charSpace:h,fontSize:gt,doKerning:!1})*gt/N};if(\"[object Array]\"===Object.prototype.toString.call(e)){var X;s=A(e),\"left\"!==u&&(H=s.map(J));var K,Z=0;if(\"right\"===u){r-=H[0],e=[],C=s.length;for(var $=0;$<C;$++)0===$?(K=br(r),X=yr(n)):(K=U(Z-H[$]),X=-W),e.push([s[$],K,X]),Z=H[$]}else if(\"center\"===u){r-=H[0]/2,e=[],C=s.length;for(var Q=0;Q<C;Q++)0===Q?(K=br(r),X=yr(n)):(K=U((Z-H[Q])/2),X=-W),e.push([s[Q],K,X]),Z=H[Q]}else if(\"left\"===u){e=[],C=s.length;for(var tt=0;tt<C;tt++)e.push(s[tt])}else if(\"justify\"===u&&\"Identity-H\"===G.encoding){e=[],C=s.length,l=0!==l?l:V;for(var et=0,rt=0;rt<C;rt++)if(X=0===rt?yr(n):-W,K=0===rt?br(r):et,rt<C-1){var nt=U((l-H[rt])/(s[rt].split(\" \").length-1)),it=s[rt].split(\" \");e.push([it[0]+\" \",K,X]),et=0;for(var at=1;at<it.length;at++){var ot=(J(it[at-1]+\" \"+it[at])-J(it[at]))*N+nt;at==it.length-1?e.push([it[at],ot,0]):e.push([it[at]+\" \",ot,0]),et-=ot}}else e.push([s[rt],K,X]);e.push([\"\",et,0])}else{if(\"justify\"!==u)throw new Error('Unrecognized alignment option, use \"left\", \"center\", \"right\" or \"justify\".');e=[],C=s.length,l=0!==l?l:V;for(rt=0;rt<C;rt++)X=0===rt?yr(n):-W,K=0===rt?br(r):0,rt<C-1?Y.push(O(U((l-H[rt])/(s[rt].split(\" \").length-1)))):Y.push(0),e.push([s[rt],K,X])}}var st=\"boolean\"==typeof i.R2L?i.R2L:bt;!0===st&&(e=_(e,(function(t,e,r){return[t.split(\"\").reverse().join(\"\"),e,r]}))),o={text:e,x:r,y:n,options:i,mutex:{pdfEscape:Ce,activeFontKey:St,fonts:Ft,activeFontSize:gt}},Tt.publish(\"postProcessText\",o),e=o.text,y=o.mutex.isHex||!1;var ct=Ft[St].encoding;\"WinAnsiEncoding\"!==ct&&\"StandardEncoding\"!==ct||(e=_(e,(function(t,e,r){return[L(t),e,r]}))),s=A(e),e=[];for(var ut,ht,ft,dt=0,pt=1,mt=Array.isArray(s[0])?pt:dt,vt=\"\",yt=function(t,e,r){var n=\"\";return r instanceof Vt?(r=\"number\"==typeof i.angle?Gt(r,new Vt(1,0,0,1,t,e)):Gt(new Vt(1,0,0,1,t,e),r),S===x.ADVANCED&&(r=Gt(new Vt(1,0,0,-1,0,0),r)),n=r.join(\" \")+\" Tm\\n\"):n=O(t)+\" \"+O(e)+\" Td\\n\",n},wt=0;wt<s.length;wt++){switch(vt=\"\",mt){case pt:ft=(y?\"<\":\"(\")+s[wt][0]+(y?\">\":\")\"),ut=parseFloat(s[wt][1]),ht=parseFloat(s[wt][2]);break;case dt:ft=(y?\"<\":\"(\")+s[wt]+(y?\">\":\")\"),ut=br(r),ht=yr(n)}void 0!==Y&&void 0!==Y[wt]&&(vt=Y[wt]+\" Tw\\n\"),0===wt?e.push(vt+yt(ut,ht,p)+ft):mt===dt?e.push(vt+ft):mt===pt&&e.push(vt+yt(ut,ht,p)+ft)}e=mt===dt?e.join(\" Tj\\nT* \"):e.join(\" Tj\\n\"),e+=\" Tj\\n\";var Nt=\"BT\\n/\";return Nt+=St+\" \"+gt+\" Tf\\n\",Nt+=O(gt*w)+\" TL\\n\",Nt+=xr+\"\\n\",Nt+=v,Nt+=e,lt(Nt+=\"ET\"),b[St]=!0,g};var $e=y.__private__.clip=y.clip=function(t){return lt(\"evenodd\"===t?\"W*\":\"W\"),this};y.clipEvenOdd=function(){return $e(\"evenodd\")},y.__private__.discardPath=y.discardPath=function(){return lt(\"n\"),this};var Qe=y.__private__.isValidStyle=function(t){var e=!1;return-1!==[void 0,null,\"S\",\"D\",\"F\",\"DF\",\"FD\",\"f\",\"f*\",\"B\",\"B*\",\"n\"].indexOf(t)&&(e=!0),e};y.__private__.setDefaultPathOperation=y.setDefaultPathOperation=function(t){return Qe(t)&&(g=t),this};var tr=y.__private__.getStyle=y.getStyle=function(t){var e=g;switch(t){case\"D\":case\"S\":e=\"S\";break;case\"F\":e=\"f\";break;case\"FD\":case\"DF\":e=\"B\";break;case\"f\":case\"f*\":case\"B\":case\"B*\":e=t}return e},er=y.close=function(){return lt(\"h\"),this};y.stroke=function(){return lt(\"S\"),this},y.fill=function(t){return rr(\"f\",t),this},y.fillEvenOdd=function(t){return rr(\"f*\",t),this},y.fillStroke=function(t){return rr(\"B\",t),this},y.fillStrokeEvenOdd=function(t){return rr(\"B*\",t),this};var rr=function(e,r){\"object\"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(r)?ar(r,e):lt(e)},nr=function(t){null===t||S===x.ADVANCED&&void 0===t||(t=tr(t),lt(t))};function ir(t,e,r,n,i){var a=new M(e||this.boundingBox,r||this.xStep,n||this.yStep,this.gState,i||this.matrix);a.stream=this.stream;var o=t+\"$$\"+this.cloneIndex+++\"$$\";return Jt(o,a),a}var ar=function(t,e){var r=Bt[t.key],n=Ot[r];if(n instanceof B)lt(\"q\"),lt(or(e)),n.gState&&y.setGState(n.gState),lt(t.matrix.toString()+\" cm\"),lt(\"/\"+r+\" sh\"),lt(\"Q\");else if(n instanceof M){var i=new Vt(1,0,0,-1,0,Rr());t.matrix&&(i=i.multiply(t.matrix||Yt),r=ir.call(n,t.key,t.boundingBox,t.xStep,t.yStep,i).id),lt(\"q\"),lt(\"/Pattern cs\"),lt(\"/\"+r+\" scn\"),n.gState&&y.setGState(n.gState),lt(e),lt(\"Q\")}},or=function(t){switch(t){case\"f\":case\"F\":return\"W n\";case\"f*\":return\"W* n\";case\"B\":return\"W S\";case\"B*\":return\"W* S\";case\"S\":return\"W S\";case\"n\":return\"W n\"}},sr=y.moveTo=function(t,e){return lt(O(U(t))+\" \"+O(H(e))+\" m\"),this},cr=y.lineTo=function(t,e){return lt(O(U(t))+\" \"+O(H(e))+\" l\"),this},ur=y.curveTo=function(t,e,r,n,i,a){return lt([O(U(t)),O(H(e)),O(U(r)),O(H(n)),O(U(i)),O(H(a)),\"c\"].join(\" \")),this};y.__private__.line=y.line=function(t,e,r,n,i){if(isNaN(t)||isNaN(e)||isNaN(r)||isNaN(n)||!Qe(i))throw new Error(\"Invalid arguments passed to jsPDF.line\");return S===x.COMPAT?this.lines([[r-t,n-e]],t,e,[1,1],i||\"S\"):this.lines([[r-t,n-e]],t,e,[1,1]).stroke()},y.__private__.lines=y.lines=function(t,e,r,n,i,a){var o,s,c,u,h,l,f,d,p,g,m,v;if(\"number\"==typeof t&&(v=r,r=e,e=t,t=v),n=n||[1,1],a=a||!1,isNaN(e)||isNaN(r)||!Array.isArray(t)||!Array.isArray(n)||!Qe(i)||\"boolean\"!=typeof a)throw new Error(\"Invalid arguments passed to jsPDF.lines\");for(sr(e,r),o=n[0],s=n[1],u=t.length,g=e,m=r,c=0;c<u;c++)2===(h=t[c]).length?(g=h[0]*o+g,m=h[1]*s+m,cr(g,m)):(l=h[0]*o+g,f=h[1]*s+m,d=h[2]*o+g,p=h[3]*s+m,g=h[4]*o+g,m=h[5]*s+m,ur(l,f,d,p,g,m));return a&&er(),nr(i),this},y.path=function(t){for(var e=0;e<t.length;e++){var r=t[e],n=r.c;switch(r.op){case\"m\":sr(n[0],n[1]);break;case\"l\":cr(n[0],n[1]);break;case\"c\":ur.apply(this,n);break;case\"h\":er()}}return this},y.__private__.rect=y.rect=function(t,e,r,n,i){if(isNaN(t)||isNaN(e)||isNaN(r)||isNaN(n)||!Qe(i))throw new Error(\"Invalid arguments passed to jsPDF.rect\");return S===x.COMPAT&&(n=-n),lt([O(U(t)),O(H(e)),O(U(r)),O(U(n)),\"re\"].join(\" \")),nr(i),this},y.__private__.triangle=y.triangle=function(t,e,r,n,i,a,o){if(isNaN(t)||isNaN(e)||isNaN(r)||isNaN(n)||isNaN(i)||isNaN(a)||!Qe(o))throw new Error(\"Invalid arguments passed to jsPDF.triangle\");return this.lines([[r-t,n-e],[i-r,a-n],[t-i,e-a]],t,e,[1,1],o,!0),this},y.__private__.roundedRect=y.roundedRect=function(t,e,r,n,i,a,o){if(isNaN(t)||isNaN(e)||isNaN(r)||isNaN(n)||isNaN(i)||isNaN(a)||!Qe(o))throw new Error(\"Invalid arguments passed to jsPDF.roundedRect\");var s=4/3*(Math.SQRT2-1);return i=Math.min(i,.5*r),a=Math.min(a,.5*n),this.lines([[r-2*i,0],[i*s,0,i,a-a*s,i,a],[0,n-2*a],[0,a*s,-i*s,a,-i,a],[2*i-r,0],[-i*s,0,-i,-a*s,-i,-a],[0,2*a-n],[0,-a*s,i*s,-a,i,-a]],t+i,e,[1,1],o,!0),this},y.__private__.ellipse=y.ellipse=function(t,e,r,n,i){if(isNaN(t)||isNaN(e)||isNaN(r)||isNaN(n)||!Qe(i))throw new Error(\"Invalid arguments passed to jsPDF.ellipse\");var a=4/3*(Math.SQRT2-1)*r,o=4/3*(Math.SQRT2-1)*n;return sr(t+r,e),ur(t+r,e-o,t+a,e-n,t,e-n),ur(t-a,e-n,t-r,e-o,t-r,e),ur(t-r,e+o,t-a,e+n,t,e+n),ur(t+a,e+n,t+r,e+o,t+r,e),nr(i),this},y.__private__.circle=y.circle=function(t,e,r,n){if(isNaN(t)||isNaN(e)||isNaN(r)||!Qe(n))throw new Error(\"Invalid arguments passed to jsPDF.circle\");return this.ellipse(t,e,r,r,n)},y.setFont=function(t,e,r){return r&&(e=k(e,r)),St=qe(t,e,{disableWarning:!1}),this};var hr=y.__private__.getFont=y.getFont=function(){return Ft[qe.apply(y,arguments)]};y.__private__.getFontList=y.getFontList=function(){var t,e,r={};for(t in Ct)if(Ct.hasOwnProperty(t))for(e in r[t]=[],Ct[t])Ct[t].hasOwnProperty(e)&&r[t].push(e);return r},y.addFont=function(t,e,r,n,i){var a=[\"StandardEncoding\",\"MacRomanEncoding\",\"Identity-H\",\"WinAnsiEncoding\"];return arguments[3]&&-1!==a.indexOf(arguments[3])?i=arguments[3]:arguments[3]&&-1==a.indexOf(arguments[3])&&(r=k(r,n)),i=i||\"Identity-H\",Pe.call(this,t,e,r,i)};var lr,fr=e.lineWidth||.200025,dr=y.__private__.getLineWidth=y.getLineWidth=function(){return fr},pr=y.__private__.setLineWidth=y.setLineWidth=function(t){return fr=t,lt(O(U(t))+\" w\"),this};y.__private__.setLineDash=E.API.setLineDash=E.API.setLineDashPattern=function(t,e){if(t=t||[],e=e||0,isNaN(e)||!Array.isArray(t))throw new Error(\"Invalid arguments passed to jsPDF.setLineDash\");return t=t.map((function(t){return O(U(t))})).join(\" \"),e=O(U(e)),lt(\"[\"+t+\"] \"+e+\" d\"),this};var gr=y.__private__.getLineHeight=y.getLineHeight=function(){return gt*lr};y.__private__.getLineHeight=y.getLineHeight=function(){return gt*lr};var mr=y.__private__.setLineHeightFactor=y.setLineHeightFactor=function(t){return\"number\"==typeof(t=t||1.15)&&(lr=t),this},vr=y.__private__.getLineHeightFactor=y.getLineHeightFactor=function(){return lr};mr(e.lineHeight);var br=y.__private__.getHorizontalCoordinate=function(t){return U(t)},yr=y.__private__.getVerticalCoordinate=function(t){return S===x.ADVANCED?t:Rt[$].mediaBox.topRightY-Rt[$].mediaBox.bottomLeftY-U(t)},wr=y.__private__.getHorizontalCoordinateString=y.getHorizontalCoordinateString=function(t){return O(br(t))},Nr=y.__private__.getVerticalCoordinateString=y.getVerticalCoordinateString=function(t){return O(yr(t))},Lr=e.strokeColor||\"0 G\";y.__private__.getStrokeColor=y.getDrawColor=function(){return ee(Lr)},y.__private__.setStrokeColor=y.setDrawColor=function(t,e,r,n){return Lr=re({ch1:t,ch2:e,ch3:r,ch4:n,pdfColorType:\"draw\",precision:2}),lt(Lr),this};var Ar=e.fillColor||\"0 g\";y.__private__.getFillColor=y.getFillColor=function(){return ee(Ar)},y.__private__.setFillColor=y.setFillColor=function(t,e,r,n){return Ar=re({ch1:t,ch2:e,ch3:r,ch4:n,pdfColorType:\"fill\",precision:2}),lt(Ar),this};var xr=e.textColor||\"0 g\",Sr=y.__private__.getTextColor=y.getTextColor=function(){return ee(xr)};y.__private__.setTextColor=y.setTextColor=function(t,e,r,n){return xr=re({ch1:t,ch2:e,ch3:r,ch4:n,pdfColorType:\"text\",precision:3}),this};var _r=e.charSpace,Pr=y.__private__.getCharSpace=y.getCharSpace=function(){return parseFloat(_r||0)};y.__private__.setCharSpace=y.setCharSpace=function(t){if(isNaN(t))throw new Error(\"Invalid argument passed to jsPDF.setCharSpace\");return _r=t,this};var kr=0;y.CapJoinStyles={0:0,butt:0,but:0,miter:0,1:1,round:1,rounded:1,circle:1,2:2,projecting:2,project:2,square:2,bevel:2},y.__private__.setLineCap=y.setLineCap=function(t){var e=y.CapJoinStyles[t];if(void 0===e)throw new Error(\"Line cap style of '\"+t+\"' is not recognized. See or extend .CapJoinStyles property for valid styles\");return kr=e,lt(e+\" J\"),this};var Ir=0;y.__private__.setLineJoin=y.setLineJoin=function(t){var e=y.CapJoinStyles[t];if(void 0===e)throw new Error(\"Line join style of '\"+t+\"' is not recognized. See or extend .CapJoinStyles property for valid styles\");return Ir=e,lt(e+\" j\"),this},y.__private__.setLineMiterLimit=y.__private__.setMiterLimit=y.setLineMiterLimit=y.setMiterLimit=function(t){if(t=t||0,isNaN(t))throw new Error(\"Invalid argument passed to jsPDF.setLineMiterLimit\");return lt(O(U(t))+\" M\"),this},y.GState=j,y.setGState=function(t){(t=\"string\"==typeof t?Mt[Et[t]]:Fr(null,t)).equals(qt)||(lt(\"/\"+t.id+\" gs\"),qt=t)};var Fr=function(t,e){if(!t||!Et[t]){var r=!1;for(var n in Mt)if(Mt.hasOwnProperty(n)&&Mt[n].equals(e)){r=!0;break}if(r)e=Mt[n];else{var i=\"GS\"+(Object.keys(Mt).length+1).toString(10);Mt[i]=e,e.id=i}return t&&(Et[t]=e.id),Tt.publish(\"addGState\",e),e}};y.addGState=function(t,e){return Fr(t,e),this},y.saveGraphicsState=function(){return lt(\"q\"),jt.push({key:St,size:gt,color:xr}),this},y.restoreGraphicsState=function(){lt(\"Q\");var t=jt.pop();return St=t.key,gt=t.size,xr=t.color,qt=null,this},y.setCurrentTransformationMatrix=function(t){return lt(t.toString()+\" cm\"),this},y.comment=function(t){return lt(\"#\"+t),this};var Cr=function(t,e){var r=t||0;Object.defineProperty(this,\"x\",{enumerable:!0,get:function(){return r},set:function(t){isNaN(t)||(r=parseFloat(t))}});var n=e||0;Object.defineProperty(this,\"y\",{enumerable:!0,get:function(){return n},set:function(t){isNaN(t)||(n=parseFloat(t))}});var i=\"pt\";return Object.defineProperty(this,\"type\",{enumerable:!0,get:function(){return i},set:function(t){i=t.toString()}}),this},jr=function(t,e,r,n){Cr.call(this,t,e),this.type=\"rect\";var i=r||0;Object.defineProperty(this,\"w\",{enumerable:!0,get:function(){return i},set:function(t){isNaN(t)||(i=parseFloat(t))}});var a=n||0;return Object.defineProperty(this,\"h\",{enumerable:!0,get:function(){return a},set:function(t){isNaN(t)||(a=parseFloat(t))}}),this},Or=function(){this.page=Dt,this.currentPage=$,this.pages=ot.slice(0),this.pagesContext=Rt.slice(0),this.x=Pt,this.y=kt,this.matrix=It,this.width=qr($),this.height=Rr($),this.outputDestination=ct,this.id=\"\",this.objectNumber=-1};Or.prototype.restore=function(){Dt=this.page,$=this.currentPage,Rt=this.pagesContext,ot=this.pages,Pt=this.x,kt=this.y,It=this.matrix,Dr($,this.width),Tr($,this.height),ct=this.outputDestination};var Br=function(t,e,r,n,i){Wt.push(new Or),Dt=$=0,ot=[],Pt=t,kt=e,It=i,je([r,n])},Mr=function(t){if(Ht[t])Wt.pop().restore();else{var e=new Or,r=\"Xo\"+(Object.keys(zt).length+1).toString(10);e.id=r,Ht[t]=r,zt[r]=e,Tt.publish(\"addFormObject\",e),Wt.pop().restore()}};for(var Er in y.beginFormObject=function(t,e,r,n,i){return Br(t,e,r,n,i),this},y.endFormObject=function(t){return Mr(t),this},y.doFormObject=function(t,e){var r=zt[Ht[t]];return lt(\"q\"),lt(e.toString()+\" cm\"),lt(\"/\"+r.id+\" Do\"),lt(\"Q\"),this},y.getFormObject=function(t){var e=zt[Ht[t]];return{x:e.x,y:e.y,width:e.width,height:e.height,matrix:e.matrix}},y.save=function(t,e){return t=t||\"generated.pdf\",(e=e||{}).returnPromise=e.returnPromise||!1,!1===e.returnPromise?(l(We(He()),t),\"function\"==typeof l.unload&&n.setTimeout&&setTimeout(l.unload,911),this):new Promise((function(e,r){try{var i=l(We(He()),t);\"function\"==typeof l.unload&&n.setTimeout&&setTimeout(l.unload,911),e(i)}catch(t){r(t.message)}}))},E.API)E.API.hasOwnProperty(Er)&&(\"events\"===Er&&E.API.events.length?function(t,e){var r,n,i;for(i=e.length-1;-1!==i;i--)r=e[i][0],n=e[i][1],t.subscribe.apply(t,[r].concat(\"function\"==typeof n?[n]:n))}(Tt,E.API.events):y[Er]=E.API[Er]);var qr=y.getPageWidth=function(t){return(Rt[t=t||$].mediaBox.topRightX-Rt[t].mediaBox.bottomLeftX)/_t},Dr=y.setPageWidth=function(t,e){Rt[t].mediaBox.topRightX=e*_t+Rt[t].mediaBox.bottomLeftX},Rr=y.getPageHeight=function(t){return(Rt[t=t||$].mediaBox.topRightY-Rt[t].mediaBox.bottomLeftY)/_t},Tr=y.setPageHeight=function(t,e){Rt[t].mediaBox.topRightY=e*_t+Rt[t].mediaBox.bottomLeftY};return y.internal={pdfEscape:Ce,getStyle:tr,getFont:hr,getFontSize:vt,getCharSpace:Pr,getTextColor:Sr,getLineHeight:gr,getLineHeightFactor:vr,getLineWidth:dr,write:ft,getHorizontalCoordinate:br,getVerticalCoordinate:yr,getCoordinateString:wr,getVerticalCoordinateString:Nr,collections:{},newObject:Xt,newAdditionalObject:$t,newObjectDeferred:Kt,newObjectDeferredBegin:Zt,getFilters:ne,putStream:ie,events:Tt,scaleFactor:_t,pageSize:{getWidth:function(){return qr($)},setWidth:function(t){Dr($,t)},getHeight:function(){return Rr($)},setHeight:function(t){Tr($,t)}},encryptionOptions:m,encryption:Ye,getEncryptor:Je,output:Ve,getNumberOfPages:Ee,pages:ot,out:lt,f2:R,f3:T,getPageInfo:Xe,getPageInfoByObjId:Ke,getCurrentPageInfo:Ze,getPDFVersion:N,Point:Cr,Rectangle:jr,Matrix:Vt,hasHotfix:Ge},Object.defineProperty(y.internal.pageSize,\"width\",{get:function(){return qr($)},set:function(t){Dr($,t)},enumerable:!0,configurable:!0}),Object.defineProperty(y.internal.pageSize,\"height\",{get:function(){return Rr($)},set:function(t){Tr($,t)},enumerable:!0,configurable:!0}),ke.call(y,pt),St=\"F1\",Oe(s,i),Tt.publish(\"initialized\"),y}I.prototype.lsbFirstWord=function(t){return String.fromCharCode(t>>0&255,t>>8&255,t>>16&255,t>>24&255)},I.prototype.toHexString=function(t){return t.split(\"\").map((function(t){return(\"0\"+(255&t.charCodeAt(0)).toString(16)).slice(-2)})).join(\"\")},I.prototype.hexToBytes=function(t){for(var e=[],r=0;r<t.length;r+=2)e.push(String.fromCharCode(parseInt(t.substr(r,2),16)));return e.join(\"\")},I.prototype.processOwnerPassword=function(t,e){return P(x(e).substr(0,5),t)},I.prototype.encryptor=function(t,e){var r=x(this.encryptionKey+String.fromCharCode(255&t,t>>8&255,t>>16&255,255&e,e>>8&255)).substr(0,10);return function(t){return P(r,t)}},j.prototype.equals=function(e){var r,n=\"id,objectNumber,equals\";if(!e||(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e)!==(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this))return!1;var i=0;for(r in this)if(!(n.indexOf(r)>=0)){if(this.hasOwnProperty(r)&&!e.hasOwnProperty(r))return!1;if(this[r]!==e[r])return!1;i++}for(r in e)e.hasOwnProperty(r)&&n.indexOf(r)<0&&i--;return 0===i},E.API={events:[]},E.version=\"2.5.2\";var q=E.API,D=1,R=function(t){return t.replace(/\\\\/g,\"\\\\\\\\\").replace(/\\(/g,\"\\\\(\").replace(/\\)/g,\"\\\\)\")},T=function(t){return t.replace(/\\\\\\\\/g,\"\\\\\").replace(/\\\\\\(/g,\"(\").replace(/\\\\\\)/g,\")\")},U=function(t){return t.toFixed(2)},z=function(t){return t.toFixed(5)};q.__acroform__={};var H=function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t},W=function(t){return t*D},V=function(t){var e=new ut,r=At.internal.getHeight(t)||0,n=At.internal.getWidth(t)||0;return e.BBox=[0,0,Number(U(n)),Number(U(r))],e},G=q.__acroform__.setBit=function(t,e){if(t=t||0,e=e||0,isNaN(t)||isNaN(e))throw new Error(\"Invalid arguments passed to jsPDF.API.__acroform__.setBit\");return t|=1<<e},Y=q.__acroform__.clearBit=function(t,e){if(t=t||0,e=e||0,isNaN(t)||isNaN(e))throw new Error(\"Invalid arguments passed to jsPDF.API.__acroform__.clearBit\");return t&=~(1<<e)},J=q.__acroform__.getBit=function(t,e){if(isNaN(t)||isNaN(e))throw new Error(\"Invalid arguments passed to jsPDF.API.__acroform__.getBit\");return 0==(t&1<<e)?0:1},X=q.__acroform__.getBitForPdf=function(t,e){if(isNaN(t)||isNaN(e))throw new Error(\"Invalid arguments passed to jsPDF.API.__acroform__.getBitForPdf\");return J(t,e-1)},K=q.__acroform__.setBitForPdf=function(t,e){if(isNaN(t)||isNaN(e))throw new Error(\"Invalid arguments passed to jsPDF.API.__acroform__.setBitForPdf\");return G(t,e-1)},Z=q.__acroform__.clearBitForPdf=function(t,e){if(isNaN(t)||isNaN(e))throw new Error(\"Invalid arguments passed to jsPDF.API.__acroform__.clearBitForPdf\");return Y(t,e-1)},$=q.__acroform__.calculateCoordinates=function(t,e){var r=e.internal.getHorizontalCoordinate,n=e.internal.getVerticalCoordinate,i=t[0],a=t[1],o=t[2],s=t[3],c={};return c.lowerLeft_X=r(i)||0,c.lowerLeft_Y=n(a+s)||0,c.upperRight_X=r(i+o)||0,c.upperRight_Y=n(a)||0,[Number(U(c.lowerLeft_X)),Number(U(c.lowerLeft_Y)),Number(U(c.upperRight_X)),Number(U(c.upperRight_Y))]},Q=function(t){if(t.appearanceStreamContent)return t.appearanceStreamContent;if(t.V||t.DV){var e=[],r=t._V||t.DV,n=tt(t,r),i=t.scope.internal.getFont(t.fontName,t.fontStyle).id;e.push(\"/Tx BMC\"),e.push(\"q\"),e.push(\"BT\"),e.push(t.scope.__private__.encodeColorString(t.color)),e.push(\"/\"+i+\" \"+U(n.fontSize)+\" Tf\"),e.push(\"1 0 0 1 0 0 Tm\"),e.push(n.text),e.push(\"ET\"),e.push(\"Q\"),e.push(\"EMC\");var a=V(t);return a.scope=t.scope,a.stream=e.join(\"\\n\"),a}},tt=function(t,e){var r=0===t.fontSize?t.maxFontSize:t.fontSize,n={text:\"\",fontSize:\"\"},i=(e=\")\"==(e=\"(\"==e.substr(0,1)?e.substr(1):e).substr(e.length-1)?e.substr(0,e.length-1):e).split(\" \");i=t.multiline?i.map((function(t){return t.split(\"\\n\")})):i.map((function(t){return[t]}));var a=r,o=At.internal.getHeight(t)||0;o=o<0?-o:o;var s=At.internal.getWidth(t)||0;s=s<0?-s:s;var c=function(e,r,n){if(e+1<i.length){var a=r+\" \"+i[e+1][0];return et(a,t,n).width<=s-4}return!1};a++;t:for(;a>0;){e=\"\",a--;var u,h,l=et(\"3\",t,a).height,f=t.multiline?o-a:(o-l)/2,d=f+=2,p=0,g=0,m=0;if(a<=0){e=\"(...) Tj\\n\",e+=\"% Width of Text: \"+et(e,t,a=12).width+\", FieldWidth:\"+s+\"\\n\";break}for(var v=\"\",b=0,y=0;y<i.length;y++)if(i.hasOwnProperty(y)){var w=!1;if(1!==i[y].length&&m!==i[y].length-1){if((l+2)*(b+2)+2>o)continue t;v+=i[y][m],w=!0,g=y,y--}else{v=\" \"==(v+=i[y][m]+\" \").substr(v.length-1)?v.substr(0,v.length-1):v;var N=parseInt(y),L=c(N,v,a),A=y>=i.length-1;if(L&&!A){v+=\" \",m=0;continue}if(L||A){if(A)g=N;else if(t.multiline&&(l+2)*(b+2)+2>o)continue t}else{if(!t.multiline)continue t;if((l+2)*(b+2)+2>o)continue t;g=N}}for(var x=\"\",S=p;S<=g;S++){var _=i[S];if(t.multiline){if(S===g){x+=_[m]+\" \",m=(m+1)%_.length;continue}if(S===p){x+=_[_.length-1]+\" \";continue}}x+=_[0]+\" \"}switch(x=\" \"==x.substr(x.length-1)?x.substr(0,x.length-1):x,h=et(x,t,a).width,t.textAlign){case\"right\":u=s-h-2;break;case\"center\":u=(s-h)/2;break;case\"left\":default:u=2}e+=U(u)+\" \"+U(d)+\" Td\\n\",e+=\"(\"+R(x)+\") Tj\\n\",e+=-U(u)+\" 0 Td\\n\",d=-(a+2),h=0,p=w?g:g+1,b++,v=\"\"}else;break}return n.text=e,n.fontSize=a,n},et=function(t,e,r){var n=e.scope.internal.getFont(e.fontName,e.fontStyle),i=e.scope.getStringUnitWidth(t,{font:n,fontSize:parseFloat(r),charSpace:0})*parseFloat(r);return{height:e.scope.getStringUnitWidth(\"3\",{font:n,fontSize:parseFloat(r),charSpace:0})*parseFloat(r)*1.5,width:i}},rt={fields:[],xForms:[],acroFormDictionaryRoot:null,printedOut:!1,internal:null,isInitialized:!1},nt=function(t,e){var r={type:\"reference\",object:t};void 0===e.internal.getPageInfo(t.page).pageContext.annotations.find((function(t){return t.type===r.type&&t.object===r.object}))&&e.internal.getPageInfo(t.page).pageContext.annotations.push(r)},it=function(e,r){for(var n in e)if(e.hasOwnProperty(n)){var i=n,a=e[n];r.internal.newObjectDeferredBegin(a.objId,!0),\"object\"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(a)&&\"function\"==typeof a.putStream&&a.putStream(),delete e[i]}},at=function(e,r){if(r.scope=e,void 0!==e.internal&&(void 0===e.internal.acroformPlugin||!1===e.internal.acroformPlugin.isInitialized)){if(lt.FieldNum=0,e.internal.acroformPlugin=JSON.parse(JSON.stringify(rt)),e.internal.acroformPlugin.acroFormDictionaryRoot)throw new Error(\"Exception while creating AcroformDictionary\");D=e.internal.scaleFactor,e.internal.acroformPlugin.acroFormDictionaryRoot=new ht,e.internal.acroformPlugin.acroFormDictionaryRoot.scope=e,e.internal.acroformPlugin.acroFormDictionaryRoot._eventID=e.internal.events.subscribe(\"postPutResources\",(function(){!function(t){t.internal.events.unsubscribe(t.internal.acroformPlugin.acroFormDictionaryRoot._eventID),delete t.internal.acroformPlugin.acroFormDictionaryRoot._eventID,t.internal.acroformPlugin.printedOut=!0}(e)})),e.internal.events.subscribe(\"buildDocument\",(function(){!function(t){t.internal.acroformPlugin.acroFormDictionaryRoot.objId=void 0;var e=t.internal.acroformPlugin.acroFormDictionaryRoot.Fields;for(var r in e)if(e.hasOwnProperty(r)){var n=e[r];n.objId=void 0,n.hasAnnotation&&nt(n,t)}}(e)})),e.internal.events.subscribe(\"putCatalog\",(function(){!function(t){if(void 0===t.internal.acroformPlugin.acroFormDictionaryRoot)throw new Error(\"putCatalogCallback: Root missing.\");t.internal.write(\"/AcroForm \"+t.internal.acroformPlugin.acroFormDictionaryRoot.objId+\" 0 R\")}(e)})),e.internal.events.subscribe(\"postPutPages\",(function(r){!function(e,r){var n=!e;for(var i in e||(r.internal.newObjectDeferredBegin(r.internal.acroformPlugin.acroFormDictionaryRoot.objId,!0),r.internal.acroformPlugin.acroFormDictionaryRoot.putStream()),e=e||r.internal.acroformPlugin.acroFormDictionaryRoot.Kids)if(e.hasOwnProperty(i)){var a=e[i],o=[],s=a.Rect;if(a.Rect&&(a.Rect=$(a.Rect,r)),r.internal.newObjectDeferredBegin(a.objId,!0),a.DA=At.createDefaultAppearanceStream(a),\"object\"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(a)&&\"function\"==typeof a.getKeyValueListForStream&&(o=a.getKeyValueListForStream()),a.Rect=s,a.hasAppearanceStream&&!a.appearanceStreamContent){var c=Q(a);o.push({key:\"AP\",value:\"<</N \"+c+\">>\"}),r.internal.acroformPlugin.xForms.push(c)}if(a.appearanceStreamContent){var u=\"\";for(var h in a.appearanceStreamContent)if(a.appearanceStreamContent.hasOwnProperty(h)){var l=a.appearanceStreamContent[h];if(u+=\"/\"+h+\" \",u+=\"<<\",Object.keys(l).length>=1||Array.isArray(l)){for(var i in l)if(l.hasOwnProperty(i)){var f=l[i];\"function\"==typeof f&&(f=f.call(r,a)),u+=\"/\"+i+\" \"+f+\" \",r.internal.acroformPlugin.xForms.indexOf(f)>=0||r.internal.acroformPlugin.xForms.push(f)}}else\"function\"==typeof(f=l)&&(f=f.call(r,a)),u+=\"/\"+i+\" \"+f,r.internal.acroformPlugin.xForms.indexOf(f)>=0||r.internal.acroformPlugin.xForms.push(f);u+=\">>\"}o.push({key:\"AP\",value:\"<<\\n\"+u+\">>\"})}r.internal.putStream({additionalKeyValues:o,objectId:a.objId}),r.internal.out(\"endobj\")}n&&it(r.internal.acroformPlugin.xForms,r)}(r,e)})),e.internal.acroformPlugin.isInitialized=!0}},ot=q.__acroform__.arrayToPdfArray=function(e,r,n){var i=function(t){return t};if(Array.isArray(e)){for(var a=\"[\",o=0;o<e.length;o++)switch(0!==o&&(a+=\" \"),(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e[o])){case\"boolean\":case\"number\":case\"object\":a+=e[o].toString();break;case\"string\":\"/\"!==e[o].substr(0,1)?(void 0!==r&&n&&(i=n.internal.getEncryptor(r)),a+=\"(\"+R(i(e[o].toString()))+\")\"):a+=e[o].toString()}return a+=\"]\"}throw new Error(\"Invalid argument passed to jsPDF.__acroform__.arrayToPdfArray\")};var st=function(t,e,r){var n=function(t){return t};return void 0!==e&&r&&(n=r.internal.getEncryptor(e)),(t=t||\"\").toString(),t=\"(\"+R(n(t))+\")\"},ct=function(){this._objId=void 0,this._scope=void 0,Object.defineProperty(this,\"objId\",{get:function(){if(void 0===this._objId){if(void 0===this.scope)return;this._objId=this.scope.internal.newObjectDeferred()}return this._objId},set:function(t){this._objId=t}}),Object.defineProperty(this,\"scope\",{value:this._scope,writable:!0})};ct.prototype.toString=function(){return this.objId+\" 0 R\"},ct.prototype.putStream=function(){var t=this.getKeyValueListForStream();this.scope.internal.putStream({data:this.stream,additionalKeyValues:t,objectId:this.objId}),this.scope.internal.out(\"endobj\")},ct.prototype.getKeyValueListForStream=function(){var t=[],e=Object.getOwnPropertyNames(this).filter((function(t){return\"content\"!=t&&\"appearanceStreamContent\"!=t&&\"scope\"!=t&&\"objId\"!=t&&\"_\"!=t.substring(0,1)}));for(var r in e)if(!1===Object.getOwnPropertyDescriptor(this,e[r]).configurable){var n=e[r],i=this[n];i&&(Array.isArray(i)?t.push({key:n,value:ot(i,this.objId,this.scope)}):i instanceof ct?(i.scope=this.scope,t.push({key:n,value:i.objId+\" 0 R\"})):\"function\"!=typeof i&&t.push({key:n,value:i}))}return t};var ut=function(){ct.call(this),Object.defineProperty(this,\"Type\",{value:\"/XObject\",configurable:!1,writable:!0}),Object.defineProperty(this,\"Subtype\",{value:\"/Form\",configurable:!1,writable:!0}),Object.defineProperty(this,\"FormType\",{value:1,configurable:!1,writable:!0});var t,e=[];Object.defineProperty(this,\"BBox\",{configurable:!1,get:function(){return e},set:function(t){e=t}}),Object.defineProperty(this,\"Resources\",{value:\"2 0 R\",configurable:!1,writable:!0}),Object.defineProperty(this,\"stream\",{enumerable:!1,configurable:!0,set:function(e){t=e.trim()},get:function(){return t||null}})};H(ut,ct);var ht=function(){ct.call(this);var t,e=[];Object.defineProperty(this,\"Kids\",{enumerable:!1,configurable:!0,get:function(){return e.length>0?e:void 0}}),Object.defineProperty(this,\"Fields\",{enumerable:!1,configurable:!1,get:function(){return e}}),Object.defineProperty(this,\"DA\",{enumerable:!1,configurable:!1,get:function(){if(t){var e=function(t){return t};return this.scope&&(e=this.scope.internal.getEncryptor(this.objId)),\"(\"+R(e(t))+\")\"}},set:function(e){t=e}})};H(ht,ct);var lt=function t(){ct.call(this);var e=4;Object.defineProperty(this,\"F\",{enumerable:!1,configurable:!1,get:function(){return e},set:function(t){if(isNaN(t))throw new Error('Invalid value \"'+t+'\" for attribute F supplied.');e=t}}),Object.defineProperty(this,\"showWhenPrinted\",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(e,3))},set:function(t){!0===Boolean(t)?this.F=K(e,3):this.F=Z(e,3)}});var r=0;Object.defineProperty(this,\"Ff\",{enumerable:!1,configurable:!1,get:function(){return r},set:function(t){if(isNaN(t))throw new Error('Invalid value \"'+t+'\" for attribute Ff supplied.');r=t}});var n=[];Object.defineProperty(this,\"Rect\",{enumerable:!1,configurable:!1,get:function(){if(0!==n.length)return n},set:function(t){n=void 0!==t?t:[]}}),Object.defineProperty(this,\"x\",{enumerable:!0,configurable:!0,get:function(){return!n||isNaN(n[0])?0:n[0]},set:function(t){n[0]=t}}),Object.defineProperty(this,\"y\",{enumerable:!0,configurable:!0,get:function(){return!n||isNaN(n[1])?0:n[1]},set:function(t){n[1]=t}}),Object.defineProperty(this,\"width\",{enumerable:!0,configurable:!0,get:function(){return!n||isNaN(n[2])?0:n[2]},set:function(t){n[2]=t}}),Object.defineProperty(this,\"height\",{enumerable:!0,configurable:!0,get:function(){return!n||isNaN(n[3])?0:n[3]},set:function(t){n[3]=t}});var i=\"\";Object.defineProperty(this,\"FT\",{enumerable:!0,configurable:!1,get:function(){return i},set:function(t){switch(t){case\"/Btn\":case\"/Tx\":case\"/Ch\":case\"/Sig\":i=t;break;default:throw new Error('Invalid value \"'+t+'\" for attribute FT supplied.')}}});var a=null;Object.defineProperty(this,\"T\",{enumerable:!0,configurable:!1,get:function(){if(!a||a.length<1){if(this instanceof yt)return;a=\"FieldObject\"+t.FieldNum++}var e=function(t){return t};return this.scope&&(e=this.scope.internal.getEncryptor(this.objId)),\"(\"+R(e(a))+\")\"},set:function(t){a=t.toString()}}),Object.defineProperty(this,\"fieldName\",{configurable:!0,enumerable:!0,get:function(){return a},set:function(t){a=t}});var o=\"helvetica\";Object.defineProperty(this,\"fontName\",{enumerable:!0,configurable:!0,get:function(){return o},set:function(t){o=t}});var s=\"normal\";Object.defineProperty(this,\"fontStyle\",{enumerable:!0,configurable:!0,get:function(){return s},set:function(t){s=t}});var c=0;Object.defineProperty(this,\"fontSize\",{enumerable:!0,configurable:!0,get:function(){return c},set:function(t){c=t}});var u=void 0;Object.defineProperty(this,\"maxFontSize\",{enumerable:!0,configurable:!0,get:function(){return void 0===u?50/D:u},set:function(t){u=t}});var h=\"black\";Object.defineProperty(this,\"color\",{enumerable:!0,configurable:!0,get:function(){return h},set:function(t){h=t}});var l=\"/F1 0 Tf 0 g\";Object.defineProperty(this,\"DA\",{enumerable:!0,configurable:!1,get:function(){if(!(!l||this instanceof yt||this instanceof Nt))return st(l,this.objId,this.scope)},set:function(t){t=t.toString(),l=t}});var f=null;Object.defineProperty(this,\"DV\",{enumerable:!1,configurable:!1,get:function(){if(f)return this instanceof mt==!1?st(f,this.objId,this.scope):f},set:function(t){t=t.toString(),f=this instanceof mt==!1?\"(\"===t.substr(0,1)?T(t.substr(1,t.length-2)):T(t):t}}),Object.defineProperty(this,\"defaultValue\",{enumerable:!0,configurable:!0,get:function(){return this instanceof mt==!0?T(f.substr(1,f.length-1)):f},set:function(t){t=t.toString(),f=this instanceof mt==!0?\"/\"+t:t}});var d=null;Object.defineProperty(this,\"_V\",{enumerable:!1,configurable:!1,get:function(){if(d)return d},set:function(t){this.V=t}}),Object.defineProperty(this,\"V\",{enumerable:!1,configurable:!1,get:function(){if(d)return this instanceof mt==!1?st(d,this.objId,this.scope):d},set:function(t){t=t.toString(),d=this instanceof mt==!1?\"(\"===t.substr(0,1)?T(t.substr(1,t.length-2)):T(t):t}}),Object.defineProperty(this,\"value\",{enumerable:!0,configurable:!0,get:function(){return this instanceof mt==!0?T(d.substr(1,d.length-1)):d},set:function(t){t=t.toString(),d=this instanceof mt==!0?\"/\"+t:t}}),Object.defineProperty(this,\"hasAnnotation\",{enumerable:!0,configurable:!0,get:function(){return this.Rect}}),Object.defineProperty(this,\"Type\",{enumerable:!0,configurable:!1,get:function(){return this.hasAnnotation?\"/Annot\":null}}),Object.defineProperty(this,\"Subtype\",{enumerable:!0,configurable:!1,get:function(){return this.hasAnnotation?\"/Widget\":null}});var p,g=!1;Object.defineProperty(this,\"hasAppearanceStream\",{enumerable:!0,configurable:!0,get:function(){return g},set:function(t){t=Boolean(t),g=t}}),Object.defineProperty(this,\"page\",{enumerable:!0,configurable:!0,get:function(){if(p)return p},set:function(t){p=t}}),Object.defineProperty(this,\"readOnly\",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,1))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,1):this.Ff=Z(this.Ff,1)}}),Object.defineProperty(this,\"required\",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,2))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,2):this.Ff=Z(this.Ff,2)}}),Object.defineProperty(this,\"noExport\",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,3))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,3):this.Ff=Z(this.Ff,3)}});var m=null;Object.defineProperty(this,\"Q\",{enumerable:!0,configurable:!1,get:function(){if(null!==m)return m},set:function(t){if(-1===[0,1,2].indexOf(t))throw new Error('Invalid value \"'+t+'\" for attribute Q supplied.');m=t}}),Object.defineProperty(this,\"textAlign\",{get:function(){var t;switch(m){case 0:default:t=\"left\";break;case 1:t=\"center\";break;case 2:t=\"right\"}return t},configurable:!0,enumerable:!0,set:function(t){switch(t){case\"right\":case 2:m=2;break;case\"center\":case 1:m=1;break;case\"left\":case 0:default:m=0}}})};H(lt,ct);var ft=function(){lt.call(this),this.FT=\"/Ch\",this.V=\"()\",this.fontName=\"zapfdingbats\";var t=0;Object.defineProperty(this,\"TI\",{enumerable:!0,configurable:!1,get:function(){return t},set:function(e){t=e}}),Object.defineProperty(this,\"topIndex\",{enumerable:!0,configurable:!0,get:function(){return t},set:function(e){t=e}});var e=[];Object.defineProperty(this,\"Opt\",{enumerable:!0,configurable:!1,get:function(){return ot(e,this.objId,this.scope)},set:function(t){var r,n;n=[],\"string\"==typeof(r=t)&&(n=function(t,e,r){r||(r=1);for(var n,i=[];n=e.exec(t);)i.push(n[r]);return i}(r,/\\((.*?)\\)/g)),e=n}}),this.getOptions=function(){return e},this.setOptions=function(t){e=t,this.sort&&e.sort()},this.addOption=function(t){t=(t=t||\"\").toString(),e.push(t),this.sort&&e.sort()},this.removeOption=function(t,r){for(r=r||!1,t=(t=t||\"\").toString();-1!==e.indexOf(t)&&(e.splice(e.indexOf(t),1),!1!==r););},Object.defineProperty(this,\"combo\",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,18))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,18):this.Ff=Z(this.Ff,18)}}),Object.defineProperty(this,\"edit\",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,19))},set:function(t){!0===this.combo&&(!0===Boolean(t)?this.Ff=K(this.Ff,19):this.Ff=Z(this.Ff,19))}}),Object.defineProperty(this,\"sort\",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,20))},set:function(t){!0===Boolean(t)?(this.Ff=K(this.Ff,20),e.sort()):this.Ff=Z(this.Ff,20)}}),Object.defineProperty(this,\"multiSelect\",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,22))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,22):this.Ff=Z(this.Ff,22)}}),Object.defineProperty(this,\"doNotSpellCheck\",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,23))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,23):this.Ff=Z(this.Ff,23)}}),Object.defineProperty(this,\"commitOnSelChange\",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,27))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,27):this.Ff=Z(this.Ff,27)}}),this.hasAppearanceStream=!1};H(ft,lt);var dt=function(){ft.call(this),this.fontName=\"helvetica\",this.combo=!1};H(dt,ft);var pt=function(){dt.call(this),this.combo=!0};H(pt,dt);var gt=function(){pt.call(this),this.edit=!0};H(gt,pt);var mt=function(){lt.call(this),this.FT=\"/Btn\",Object.defineProperty(this,\"noToggleToOff\",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,15))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,15):this.Ff=Z(this.Ff,15)}}),Object.defineProperty(this,\"radio\",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,16))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,16):this.Ff=Z(this.Ff,16)}}),Object.defineProperty(this,\"pushButton\",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,17))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,17):this.Ff=Z(this.Ff,17)}}),Object.defineProperty(this,\"radioIsUnison\",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,26))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,26):this.Ff=Z(this.Ff,26)}});var e,r={};Object.defineProperty(this,\"MK\",{enumerable:!1,configurable:!1,get:function(){var t=function(t){return t};if(this.scope&&(t=this.scope.internal.getEncryptor(this.objId)),0!==Object.keys(r).length){var e,n=[];for(e in n.push(\"<<\"),r)n.push(\"/\"+e+\" (\"+R(t(r[e]))+\")\");return n.push(\">>\"),n.join(\"\\n\")}},set:function(e){\"object\"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e)&&(r=e)}}),Object.defineProperty(this,\"caption\",{enumerable:!0,configurable:!0,get:function(){return r.CA||\"\"},set:function(t){\"string\"==typeof t&&(r.CA=t)}}),Object.defineProperty(this,\"AS\",{enumerable:!1,configurable:!1,get:function(){return e},set:function(t){e=t}}),Object.defineProperty(this,\"appearanceState\",{enumerable:!0,configurable:!0,get:function(){return e.substr(1,e.length-1)},set:function(t){e=\"/\"+t}})};H(mt,lt);var vt=function(){mt.call(this),this.pushButton=!0};H(vt,mt);var bt=function(){mt.call(this),this.radio=!0,this.pushButton=!1;var t=[];Object.defineProperty(this,\"Kids\",{enumerable:!0,configurable:!1,get:function(){return t},set:function(e){t=void 0!==e?e:[]}})};H(bt,mt);var yt=function(){var e,r;lt.call(this),Object.defineProperty(this,\"Parent\",{enumerable:!1,configurable:!1,get:function(){return e},set:function(t){e=t}}),Object.defineProperty(this,\"optionName\",{enumerable:!1,configurable:!0,get:function(){return r},set:function(t){r=t}});var n,i={};Object.defineProperty(this,\"MK\",{enumerable:!1,configurable:!1,get:function(){var t=function(t){return t};this.scope&&(t=this.scope.internal.getEncryptor(this.objId));var e,r=[];for(e in r.push(\"<<\"),i)r.push(\"/\"+e+\" (\"+R(t(i[e]))+\")\");return r.push(\">>\"),r.join(\"\\n\")},set:function(e){\"object\"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e)&&(i=e)}}),Object.defineProperty(this,\"caption\",{enumerable:!0,configurable:!0,get:function(){return i.CA||\"\"},set:function(t){\"string\"==typeof t&&(i.CA=t)}}),Object.defineProperty(this,\"AS\",{enumerable:!1,configurable:!1,get:function(){return n},set:function(t){n=t}}),Object.defineProperty(this,\"appearanceState\",{enumerable:!0,configurable:!0,get:function(){return n.substr(1,n.length-1)},set:function(t){n=\"/\"+t}}),this.caption=\"l\",this.appearanceState=\"Off\",this._AppearanceType=At.RadioButton.Circle,this.appearanceStreamContent=this._AppearanceType.createAppearanceStream(this.optionName)};H(yt,lt),bt.prototype.setAppearance=function(t){if(!(\"createAppearanceStream\"in t)||!(\"getCA\"in t))throw new Error(\"Couldn't assign Appearance to RadioButton. Appearance was Invalid!\");for(var e in this.Kids)if(this.Kids.hasOwnProperty(e)){var r=this.Kids[e];r.appearanceStreamContent=t.createAppearanceStream(r.optionName),r.caption=t.getCA()}},bt.prototype.createOption=function(t){var e=new yt;return e.Parent=this,e.optionName=t,this.Kids.push(e),xt.call(this.scope,e),e};var wt=function(){mt.call(this),this.fontName=\"zapfdingbats\",this.caption=\"3\",this.appearanceState=\"On\",this.value=\"On\",this.textAlign=\"center\",this.appearanceStreamContent=At.CheckBox.createAppearanceStream()};H(wt,mt);var Nt=function(){lt.call(this),this.FT=\"/Tx\",Object.defineProperty(this,\"multiline\",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,13))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,13):this.Ff=Z(this.Ff,13)}}),Object.defineProperty(this,\"fileSelect\",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,21))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,21):this.Ff=Z(this.Ff,21)}}),Object.defineProperty(this,\"doNotSpellCheck\",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,23))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,23):this.Ff=Z(this.Ff,23)}}),Object.defineProperty(this,\"doNotScroll\",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,24))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,24):this.Ff=Z(this.Ff,24)}}),Object.defineProperty(this,\"comb\",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,25))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,25):this.Ff=Z(this.Ff,25)}}),Object.defineProperty(this,\"richText\",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,26))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,26):this.Ff=Z(this.Ff,26)}});var t=null;Object.defineProperty(this,\"MaxLen\",{enumerable:!0,configurable:!1,get:function(){return t},set:function(e){t=e}}),Object.defineProperty(this,\"maxLength\",{enumerable:!0,configurable:!0,get:function(){return t},set:function(e){Number.isInteger(e)&&(t=e)}}),Object.defineProperty(this,\"hasAppearanceStream\",{enumerable:!0,configurable:!0,get:function(){return this.V||this.DV}})};H(Nt,lt);var Lt=function(){Nt.call(this),Object.defineProperty(this,\"password\",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,14))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,14):this.Ff=Z(this.Ff,14)}}),this.password=!0};H(Lt,Nt);var At={CheckBox:{createAppearanceStream:function(){return{N:{On:At.CheckBox.YesNormal},D:{On:At.CheckBox.YesPushDown,Off:At.CheckBox.OffPushDown}}},YesPushDown:function(t){var e=V(t);e.scope=t.scope;var r=[],n=t.scope.internal.getFont(t.fontName,t.fontStyle).id,i=t.scope.__private__.encodeColorString(t.color),a=tt(t,t.caption);return r.push(\"0.749023 g\"),r.push(\"0 0 \"+U(At.internal.getWidth(t))+\" \"+U(At.internal.getHeight(t))+\" re\"),r.push(\"f\"),r.push(\"BMC\"),r.push(\"q\"),r.push(\"0 0 1 rg\"),r.push(\"/\"+n+\" \"+U(a.fontSize)+\" Tf \"+i),r.push(\"BT\"),r.push(a.text),r.push(\"ET\"),r.push(\"Q\"),r.push(\"EMC\"),e.stream=r.join(\"\\n\"),e},YesNormal:function(t){var e=V(t);e.scope=t.scope;var r=t.scope.internal.getFont(t.fontName,t.fontStyle).id,n=t.scope.__private__.encodeColorString(t.color),i=[],a=At.internal.getHeight(t),o=At.internal.getWidth(t),s=tt(t,t.caption);return i.push(\"1 g\"),i.push(\"0 0 \"+U(o)+\" \"+U(a)+\" re\"),i.push(\"f\"),i.push(\"q\"),i.push(\"0 0 1 rg\"),i.push(\"0 0 \"+U(o-1)+\" \"+U(a-1)+\" re\"),i.push(\"W\"),i.push(\"n\"),i.push(\"0 g\"),i.push(\"BT\"),i.push(\"/\"+r+\" \"+U(s.fontSize)+\" Tf \"+n),i.push(s.text),i.push(\"ET\"),i.push(\"Q\"),e.stream=i.join(\"\\n\"),e},OffPushDown:function(t){var e=V(t);e.scope=t.scope;var r=[];return r.push(\"0.749023 g\"),r.push(\"0 0 \"+U(At.internal.getWidth(t))+\" \"+U(At.internal.getHeight(t))+\" re\"),r.push(\"f\"),e.stream=r.join(\"\\n\"),e}},RadioButton:{Circle:{createAppearanceStream:function(t){var e={D:{Off:At.RadioButton.Circle.OffPushDown},N:{}};return e.N[t]=At.RadioButton.Circle.YesNormal,e.D[t]=At.RadioButton.Circle.YesPushDown,e},getCA:function(){return\"l\"},YesNormal:function(t){var e=V(t);e.scope=t.scope;var r=[],n=At.internal.getWidth(t)<=At.internal.getHeight(t)?At.internal.getWidth(t)/4:At.internal.getHeight(t)/4;n=Number((.9*n).toFixed(5));var i=At.internal.Bezier_C,a=Number((n*i).toFixed(5));return r.push(\"q\"),r.push(\"1 0 0 1 \"+z(At.internal.getWidth(t)/2)+\" \"+z(At.internal.getHeight(t)/2)+\" cm\"),r.push(n+\" 0 m\"),r.push(n+\" \"+a+\" \"+a+\" \"+n+\" 0 \"+n+\" c\"),r.push(\"-\"+a+\" \"+n+\" -\"+n+\" \"+a+\" -\"+n+\" 0 c\"),r.push(\"-\"+n+\" -\"+a+\" -\"+a+\" -\"+n+\" 0 -\"+n+\" c\"),r.push(a+\" -\"+n+\" \"+n+\" -\"+a+\" \"+n+\" 0 c\"),r.push(\"f\"),r.push(\"Q\"),e.stream=r.join(\"\\n\"),e},YesPushDown:function(t){var e=V(t);e.scope=t.scope;var r=[],n=At.internal.getWidth(t)<=At.internal.getHeight(t)?At.internal.getWidth(t)/4:At.internal.getHeight(t)/4;n=Number((.9*n).toFixed(5));var i=Number((2*n).toFixed(5)),a=Number((i*At.internal.Bezier_C).toFixed(5)),o=Number((n*At.internal.Bezier_C).toFixed(5));return r.push(\"0.749023 g\"),r.push(\"q\"),r.push(\"1 0 0 1 \"+z(At.internal.getWidth(t)/2)+\" \"+z(At.internal.getHeight(t)/2)+\" cm\"),r.push(i+\" 0 m\"),r.push(i+\" \"+a+\" \"+a+\" \"+i+\" 0 \"+i+\" c\"),r.push(\"-\"+a+\" \"+i+\" -\"+i+\" \"+a+\" -\"+i+\" 0 c\"),r.push(\"-\"+i+\" -\"+a+\" -\"+a+\" -\"+i+\" 0 -\"+i+\" c\"),r.push(a+\" -\"+i+\" \"+i+\" -\"+a+\" \"+i+\" 0 c\"),r.push(\"f\"),r.push(\"Q\"),r.push(\"0 g\"),r.push(\"q\"),r.push(\"1 0 0 1 \"+z(At.internal.getWidth(t)/2)+\" \"+z(At.internal.getHeight(t)/2)+\" cm\"),r.push(n+\" 0 m\"),r.push(n+\" \"+o+\" \"+o+\" \"+n+\" 0 \"+n+\" c\"),r.push(\"-\"+o+\" \"+n+\" -\"+n+\" \"+o+\" -\"+n+\" 0 c\"),r.push(\"-\"+n+\" -\"+o+\" -\"+o+\" -\"+n+\" 0 -\"+n+\" c\"),r.push(o+\" -\"+n+\" \"+n+\" -\"+o+\" \"+n+\" 0 c\"),r.push(\"f\"),r.push(\"Q\"),e.stream=r.join(\"\\n\"),e},OffPushDown:function(t){var e=V(t);e.scope=t.scope;var r=[],n=At.internal.getWidth(t)<=At.internal.getHeight(t)?At.internal.getWidth(t)/4:At.internal.getHeight(t)/4;n=Number((.9*n).toFixed(5));var i=Number((2*n).toFixed(5)),a=Number((i*At.internal.Bezier_C).toFixed(5));return r.push(\"0.749023 g\"),r.push(\"q\"),r.push(\"1 0 0 1 \"+z(At.internal.getWidth(t)/2)+\" \"+z(At.internal.getHeight(t)/2)+\" cm\"),r.push(i+\" 0 m\"),r.push(i+\" \"+a+\" \"+a+\" \"+i+\" 0 \"+i+\" c\"),r.push(\"-\"+a+\" \"+i+\" -\"+i+\" \"+a+\" -\"+i+\" 0 c\"),r.push(\"-\"+i+\" -\"+a+\" -\"+a+\" -\"+i+\" 0 -\"+i+\" c\"),r.push(a+\" -\"+i+\" \"+i+\" -\"+a+\" \"+i+\" 0 c\"),r.push(\"f\"),r.push(\"Q\"),e.stream=r.join(\"\\n\"),e}},Cross:{createAppearanceStream:function(t){var e={D:{Off:At.RadioButton.Cross.OffPushDown},N:{}};return e.N[t]=At.RadioButton.Cross.YesNormal,e.D[t]=At.RadioButton.Cross.YesPushDown,e},getCA:function(){return\"8\"},YesNormal:function(t){var e=V(t);e.scope=t.scope;var r=[],n=At.internal.calculateCross(t);return r.push(\"q\"),r.push(\"1 1 \"+U(At.internal.getWidth(t)-2)+\" \"+U(At.internal.getHeight(t)-2)+\" re\"),r.push(\"W\"),r.push(\"n\"),r.push(U(n.x1.x)+\" \"+U(n.x1.y)+\" m\"),r.push(U(n.x2.x)+\" \"+U(n.x2.y)+\" l\"),r.push(U(n.x4.x)+\" \"+U(n.x4.y)+\" m\"),r.push(U(n.x3.x)+\" \"+U(n.x3.y)+\" l\"),r.push(\"s\"),r.push(\"Q\"),e.stream=r.join(\"\\n\"),e},YesPushDown:function(t){var e=V(t);e.scope=t.scope;var r=At.internal.calculateCross(t),n=[];return n.push(\"0.749023 g\"),n.push(\"0 0 \"+U(At.internal.getWidth(t))+\" \"+U(At.internal.getHeight(t))+\" re\"),n.push(\"f\"),n.push(\"q\"),n.push(\"1 1 \"+U(At.internal.getWidth(t)-2)+\" \"+U(At.internal.getHeight(t)-2)+\" re\"),n.push(\"W\"),n.push(\"n\"),n.push(U(r.x1.x)+\" \"+U(r.x1.y)+\" m\"),n.push(U(r.x2.x)+\" \"+U(r.x2.y)+\" l\"),n.push(U(r.x4.x)+\" \"+U(r.x4.y)+\" m\"),n.push(U(r.x3.x)+\" \"+U(r.x3.y)+\" l\"),n.push(\"s\"),n.push(\"Q\"),e.stream=n.join(\"\\n\"),e},OffPushDown:function(t){var e=V(t);e.scope=t.scope;var r=[];return r.push(\"0.749023 g\"),r.push(\"0 0 \"+U(At.internal.getWidth(t))+\" \"+U(At.internal.getHeight(t))+\" re\"),r.push(\"f\"),e.stream=r.join(\"\\n\"),e}}},createDefaultAppearanceStream:function(t){var e=t.scope.internal.getFont(t.fontName,t.fontStyle).id,r=t.scope.__private__.encodeColorString(t.color);return\"/\"+e+\" \"+t.fontSize+\" Tf \"+r}};At.internal={Bezier_C:.551915024494,calculateCross:function(t){var e=At.internal.getWidth(t),r=At.internal.getHeight(t),n=Math.min(e,r);return{x1:{x:(e-n)/2,y:(r-n)/2+n},x2:{x:(e-n)/2+n,y:(r-n)/2},x3:{x:(e-n)/2,y:(r-n)/2},x4:{x:(e-n)/2+n,y:(r-n)/2+n}}}},At.internal.getWidth=function(e){var r=0;return\"object\"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e)&&(r=W(e.Rect[2])),r},At.internal.getHeight=function(e){var r=0;return\"object\"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e)&&(r=W(e.Rect[3])),r};var xt=q.addField=function(t){if(at(this,t),!(t instanceof lt))throw new Error(\"Invalid argument passed to jsPDF.addField.\");var e;return(e=t).scope.internal.acroformPlugin.printedOut&&(e.scope.internal.acroformPlugin.printedOut=!1,e.scope.internal.acroformPlugin.acroFormDictionaryRoot=null),e.scope.internal.acroformPlugin.acroFormDictionaryRoot.Fields.push(e),t.page=t.scope.internal.getCurrentPageInfo().pageNumber,this};q.AcroFormChoiceField=ft,q.AcroFormListBox=dt,q.AcroFormComboBox=pt,q.AcroFormEditBox=gt,q.AcroFormButton=mt,q.AcroFormPushButton=vt,q.AcroFormRadioButton=bt,q.AcroFormCheckBox=wt,q.AcroFormTextField=Nt,q.AcroFormPasswordField=Lt,q.AcroFormAppearance=At,q.AcroForm={ChoiceField:ft,ListBox:dt,ComboBox:pt,EditBox:gt,Button:mt,PushButton:vt,RadioButton:bt,CheckBox:wt,TextField:Nt,PasswordField:Lt,Appearance:At},E.AcroForm={ChoiceField:ft,ListBox:dt,ComboBox:pt,EditBox:gt,Button:mt,PushButton:vt,RadioButton:bt,CheckBox:wt,TextField:Nt,PasswordField:Lt,Appearance:At};var St=E.AcroForm;function _t(t){return t.reduce((function(t,e,r){return t[e]=r,t}),{})}!function(e){e.__addimage__={};var r=\"UNKNOWN\",n={PNG:[[137,80,78,71]],TIFF:[[77,77,0,42],[73,73,42,0]],JPEG:[[255,216,255,224,void 0,void 0,74,70,73,70,0],[255,216,255,225,void 0,void 0,69,120,105,102,0,0],[255,216,255,219],[255,216,255,238]],JPEG2000:[[0,0,0,12,106,80,32,32]],GIF87a:[[71,73,70,56,55,97]],GIF89a:[[71,73,70,56,57,97]],WEBP:[[82,73,70,70,void 0,void 0,void 0,void 0,87,69,66,80]],BMP:[[66,77],[66,65],[67,73],[67,80],[73,67],[80,84]]},i=e.__addimage__.getImageFileTypeByImageData=function(t,e){var i,a,o,s,c,u=r;if(\"RGBA\"===(e=e||r)||void 0!==t.data&&t.data instanceof Uint8ClampedArray&&\"height\"in t&&\"width\"in t)return\"RGBA\";if(x(t))for(c in n)for(o=n[c],i=0;i<o.length;i+=1){for(s=!0,a=0;a<o[i].length;a+=1)if(void 0!==o[i][a]&&o[i][a]!==t[a]){s=!1;break}if(!0===s){u=c;break}}else for(c in n)for(o=n[c],i=0;i<o.length;i+=1){for(s=!0,a=0;a<o[i].length;a+=1)if(void 0!==o[i][a]&&o[i][a]!==t.charCodeAt(a)){s=!1;break}if(!0===s){u=c;break}}return u===r&&e!==r&&(u=e),u},a=function t(e){for(var r=this.internal.write,n=this.internal.putStream,i=(0,this.internal.getFilters)();-1!==i.indexOf(\"FlateEncode\");)i.splice(i.indexOf(\"FlateEncode\"),1);e.objectId=this.internal.newObject();var a=[];if(a.push({key:\"Type\",value:\"/XObject\"}),a.push({key:\"Subtype\",value:\"/Image\"}),a.push({key:\"Width\",value:e.width}),a.push({key:\"Height\",value:e.height}),e.colorSpace===b.INDEXED?a.push({key:\"ColorSpace\",value:\"[/Indexed /DeviceRGB \"+(e.palette.length/3-1)+\" \"+(\"sMask\"in e&&void 0!==e.sMask?e.objectId+2:e.objectId+1)+\" 0 R]\"}):(a.push({key:\"ColorSpace\",value:\"/\"+e.colorSpace}),e.colorSpace===b.DEVICE_CMYK&&a.push({key:\"Decode\",value:\"[1 0 1 0 1 0 1 0]\"})),a.push({key:\"BitsPerComponent\",value:e.bitsPerComponent}),\"decodeParameters\"in e&&void 0!==e.decodeParameters&&a.push({key:\"DecodeParms\",value:\"<<\"+e.decodeParameters+\">>\"}),\"transparency\"in e&&Array.isArray(e.transparency)){for(var o=\"\",s=0,c=e.transparency.length;s<c;s++)o+=e.transparency[s]+\" \"+e.transparency[s]+\" \";a.push({key:\"Mask\",value:\"[\"+o+\"]\"})}void 0!==e.sMask&&a.push({key:\"SMask\",value:e.objectId+1+\" 0 R\"});var u=void 0!==e.filter?[\"/\"+e.filter]:void 0;if(n({data:e.data,additionalKeyValues:a,alreadyAppliedFilters:u,objectId:e.objectId}),r(\"endobj\"),\"sMask\"in e&&void 0!==e.sMask){var h=\"/Predictor \"+e.predictor+\" /Colors 1 /BitsPerComponent \"+e.bitsPerComponent+\" /Columns \"+e.width,l={width:e.width,height:e.height,colorSpace:\"DeviceGray\",bitsPerComponent:e.bitsPerComponent,decodeParameters:h,data:e.sMask};\"filter\"in e&&(l.filter=e.filter),t.call(this,l)}if(e.colorSpace===b.INDEXED){var f=this.internal.newObject();n({data:_(new Uint8Array(e.palette)),objectId:f}),r(\"endobj\")}},o=function(){var t=this.internal.collections.addImage_images;for(var e in t)a.call(this,t[e])},s=function(){var t,e=this.internal.collections.addImage_images,r=this.internal.write;for(var n in e)r(\"/I\"+(t=e[n]).index,t.objectId,\"0\",\"R\")},c=function(){this.internal.collections.addImage_images||(this.internal.collections.addImage_images={},this.internal.events.subscribe(\"putResources\",o),this.internal.events.subscribe(\"putXobjectDict\",s))},h=function(){var t=this.internal.collections.addImage_images;return c.call(this),t},l=function(){return Object.keys(this.internal.collections.addImage_images).length},f=function(t){return\"function\"==typeof e[\"process\"+t.toUpperCase()]},d=function(e){return\"object\"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e)&&1===e.nodeType},p=function(t,r){if(\"IMG\"===t.nodeName&&t.hasAttribute(\"src\")){var n=\"\"+t.getAttribute(\"src\");if(0===n.indexOf(\"data:image/\"))return u(unescape(n).split(\"base64,\").pop());var i=e.loadFile(n,!0);if(void 0!==i)return i}if(\"CANVAS\"===t.nodeName){if(0===t.width||0===t.height)throw new Error(\"Given canvas must have data. Canvas width: \"+t.width+\", height: \"+t.height);var a;switch(r){case\"PNG\":a=\"image/png\";break;case\"WEBP\":a=\"image/webp\";break;case\"JPEG\":case\"JPG\":default:a=\"image/jpeg\"}return u(t.toDataURL(a,1).split(\"base64,\").pop())}},g=function(t){var e=this.internal.collections.addImage_images;if(e)for(var r in e)if(t===e[r].alias)return e[r]},m=function(t,e,r){return t||e||(t=-96,e=-96),t<0&&(t=-1*r.width*72/t/this.internal.scaleFactor),e<0&&(e=-1*r.height*72/e/this.internal.scaleFactor),0===t&&(t=e*r.width/r.height),0===e&&(e=t*r.height/r.width),[t,e]},v=function(t,e,r,n,i,a){var o=m.call(this,r,n,i),s=this.internal.getCoordinateString,c=this.internal.getVerticalCoordinateString,u=h.call(this);if(r=o[0],n=o[1],u[i.index]=i,a){a*=Math.PI/180;var l=Math.cos(a),f=Math.sin(a),d=function(t){return t.toFixed(4)},p=[d(l),d(f),d(-1*f),d(l),0,0,\"cm\"]}this.internal.write(\"q\"),a?(this.internal.write([1,\"0\",\"0\",1,s(t),c(e+n),\"cm\"].join(\" \")),this.internal.write(p.join(\" \")),this.internal.write([s(r),\"0\",\"0\",s(n),\"0\",\"0\",\"cm\"].join(\" \"))):this.internal.write([s(r),\"0\",\"0\",s(n),s(t),c(e+n),\"cm\"].join(\" \")),this.isAdvancedAPI()&&this.internal.write([1,0,0,-1,0,0,\"cm\"].join(\" \")),this.internal.write(\"/I\"+i.index+\" Do\"),this.internal.write(\"Q\")},b=e.color_spaces={DEVICE_RGB:\"DeviceRGB\",DEVICE_GRAY:\"DeviceGray\",DEVICE_CMYK:\"DeviceCMYK\",CAL_GREY:\"CalGray\",CAL_RGB:\"CalRGB\",LAB:\"Lab\",ICC_BASED:\"ICCBased\",INDEXED:\"Indexed\",PATTERN:\"Pattern\",SEPARATION:\"Separation\",DEVICE_N:\"DeviceN\"};e.decode={DCT_DECODE:\"DCTDecode\",FLATE_DECODE:\"FlateDecode\",LZW_DECODE:\"LZWDecode\",JPX_DECODE:\"JPXDecode\",JBIG2_DECODE:\"JBIG2Decode\",ASCII85_DECODE:\"ASCII85Decode\",ASCII_HEX_DECODE:\"ASCIIHexDecode\",RUN_LENGTH_DECODE:\"RunLengthDecode\",CCITT_FAX_DECODE:\"CCITTFaxDecode\"};var y=e.image_compression={NONE:\"NONE\",FAST:\"FAST\",MEDIUM:\"MEDIUM\",SLOW:\"SLOW\"},w=e.__addimage__.sHashCode=function(t){var e,r,n=0;if(\"string\"==typeof t)for(r=t.length,e=0;e<r;e++)n=(n<<5)-n+t.charCodeAt(e),n|=0;else if(x(t))for(r=t.byteLength/2,e=0;e<r;e++)n=(n<<5)-n+t[e],n|=0;return n},N=e.__addimage__.validateStringAsBase64=function(t){(t=t||\"\").toString().trim();var e=!0;return 0===t.length&&(e=!1),t.length%4!=0&&(e=!1),!1===/^[A-Za-z0-9+/]+$/.test(t.substr(0,t.length-2))&&(e=!1),!1===/^[A-Za-z0-9/][A-Za-z0-9+/]|[A-Za-z0-9+/]=|==$/.test(t.substr(-2))&&(e=!1),e},L=e.__addimage__.extractImageFromDataUrl=function(t){var e=(t=t||\"\").split(\"base64,\"),r=null;if(2===e.length){var n=/^data:(\\w*\\/\\w*);*(charset=(?!charset=)[\\w=-]*)*;*$/.exec(e[0]);Array.isArray(n)&&(r={mimeType:n[1],charset:n[2],data:e[1]})}return r},A=e.__addimage__.supportsArrayBuffer=function(){return\"undefined\"!=typeof ArrayBuffer&&\"undefined\"!=typeof Uint8Array};e.__addimage__.isArrayBuffer=function(t){return A()&&t instanceof ArrayBuffer};var x=e.__addimage__.isArrayBufferView=function(t){return A()&&\"undefined\"!=typeof Uint32Array&&(t instanceof Int8Array||t instanceof Uint8Array||\"undefined\"!=typeof Uint8ClampedArray&&t instanceof Uint8ClampedArray||t instanceof Int16Array||t instanceof Uint16Array||t instanceof Int32Array||t instanceof Uint32Array||t instanceof Float32Array||t instanceof Float64Array)},S=e.__addimage__.binaryStringToUint8Array=function(t){for(var e=t.length,r=new Uint8Array(e),n=0;n<e;n++)r[n]=t.charCodeAt(n);return r},_=e.__addimage__.arrayBufferToBinaryString=function(t){for(var e=\"\",r=x(t)?t:new Uint8Array(t),n=0;n<r.length;n+=8192)e+=String.fromCharCode.apply(null,r.subarray(n,n+8192));return e};e.addImage=function(){var e,n,i,a,o,s,u,h,l;if(\"number\"==typeof arguments[1]?(n=r,i=arguments[1],a=arguments[2],o=arguments[3],s=arguments[4],u=arguments[5],h=arguments[6],l=arguments[7]):(n=arguments[1],i=arguments[2],a=arguments[3],o=arguments[4],s=arguments[5],u=arguments[6],h=arguments[7],l=arguments[8]),\"object\"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e=arguments[0])&&!d(e)&&\"imageData\"in e){var f=e;e=f.imageData,n=f.format||n||r,i=f.x||i||0,a=f.y||a||0,o=f.w||f.width||o,s=f.h||f.height||s,u=f.alias||u,h=f.compression||h,l=f.rotation||f.angle||l}var p=this.internal.getFilters();if(void 0===h&&-1!==p.indexOf(\"FlateEncode\")&&(h=\"SLOW\"),isNaN(i)||isNaN(a))throw new Error(\"Invalid coordinates passed to jsPDF.addImage\");c.call(this);var g=P.call(this,e,n,u,h);return v.call(this,i,a,o,s,g,l),this};var P=function(t,n,a,o){var s,c,u;if(\"string\"==typeof t&&i(t)===r){t=unescape(t);var h=k(t,!1);(\"\"!==h||void 0!==(h=e.loadFile(t,!0)))&&(t=h)}if(d(t)&&(t=p(t,n)),n=i(t,n),!f(n))throw new Error(\"addImage does not support files of type '\"+n+\"', please ensure that a plugin for '\"+n+\"' support is added.\");if((null==(u=a)||0===u.length)&&(a=function(t){return\"string\"==typeof t||x(t)?w(t):x(t.data)?w(t.data):null}(t)),(s=g.call(this,a))||(A()&&(t instanceof Uint8Array||\"RGBA\"===n||(c=t,t=S(t))),s=this[\"process\"+n.toUpperCase()](t,l.call(this),a,function(t){return t&&\"string\"==typeof t&&(t=t.toUpperCase()),t in e.image_compression?t:y.NONE}(o),c)),!s)throw new Error(\"An unknown error occurred whilst processing the image.\");return s},k=e.__addimage__.convertBase64ToBinaryString=function(t,e){var r;e=\"boolean\"!=typeof e||e;var n,i=\"\";if(\"string\"==typeof t){n=null!==(r=L(t))?r.data:t;try{i=u(n)}catch(t){if(e)throw N(n)?new Error(\"atob-Error in jsPDF.convertBase64ToBinaryString \"+t.message):new Error(\"Supplied Data is not a valid base64-String jsPDF.convertBase64ToBinaryString \")}}return i};e.getImageProperties=function(t){var n,a,o=\"\";if(d(t)&&(t=p(t)),\"string\"==typeof t&&i(t)===r&&(\"\"===(o=k(t,!1))&&(o=e.loadFile(t)||\"\"),t=o),a=i(t),!f(a))throw new Error(\"addImage does not support files of type '\"+a+\"', please ensure that a plugin for '\"+a+\"' support is added.\");if(!A()||t instanceof Uint8Array||(t=S(t)),!(n=this[\"process\"+a.toUpperCase()](t)))throw new Error(\"An unknown error occurred whilst processing the image\");return n.fileType=a,n}}(E.API),\n/**\n * @license\n * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */\nfunction(t){var e=function(t){if(void 0!==t&&\"\"!=t)return!0};E.API.events.push([\"addPage\",function(t){this.internal.getPageInfo(t.pageNumber).pageContext.annotations=[]}]),t.events.push([\"putPage\",function(t){for(var r,n,i,a=this.internal.getCoordinateString,o=this.internal.getVerticalCoordinateString,s=this.internal.getPageInfoByObjId(t.objId),c=t.pageContext.annotations,u=!1,h=0;h<c.length&&!u;h++)switch((r=c[h]).type){case\"link\":(e(r.options.url)||e(r.options.pageNumber))&&(u=!0);break;case\"reference\":case\"text\":case\"freetext\":u=!0}if(0!=u){this.internal.write(\"/Annots [\");for(var l=0;l<c.length;l++){r=c[l];var f=this.internal.pdfEscape,d=this.internal.getEncryptor(t.objId);switch(r.type){case\"reference\":this.internal.write(\" \"+r.object.objId+\" 0 R \");break;case\"text\":var p=this.internal.newAdditionalObject(),g=this.internal.newAdditionalObject(),m=this.internal.getEncryptor(p.objId),v=r.title||\"Note\";i=\"<</Type /Annot /Subtype /Text \"+(n=\"/Rect [\"+a(r.bounds.x)+\" \"+o(r.bounds.y+r.bounds.h)+\" \"+a(r.bounds.x+r.bounds.w)+\" \"+o(r.bounds.y)+\"] \")+\"/Contents (\"+f(m(r.contents))+\")\",i+=\" /Popup \"+g.objId+\" 0 R\",i+=\" /P \"+s.objId+\" 0 R\",i+=\" /T (\"+f(m(v))+\") >>\",p.content=i;var b=p.objId+\" 0 R\";i=\"<</Type /Annot /Subtype /Popup \"+(n=\"/Rect [\"+a(r.bounds.x+30)+\" \"+o(r.bounds.y+r.bounds.h)+\" \"+a(r.bounds.x+r.bounds.w+30)+\" \"+o(r.bounds.y)+\"] \")+\" /Parent \"+b,r.open&&(i+=\" /Open true\"),i+=\" >>\",g.content=i,this.internal.write(p.objId,\"0 R\",g.objId,\"0 R\");break;case\"freetext\":n=\"/Rect [\"+a(r.bounds.x)+\" \"+o(r.bounds.y)+\" \"+a(r.bounds.x+r.bounds.w)+\" \"+o(r.bounds.y+r.bounds.h)+\"] \";var y=r.color||\"#000000\";i=\"<</Type /Annot /Subtype /FreeText \"+n+\"/Contents (\"+f(d(r.contents))+\")\",i+=\" /DS(font: Helvetica,sans-serif 12.0pt; text-align:left; color:#\"+y+\")\",i+=\" /Border [0 0 0]\",i+=\" >>\",this.internal.write(i);break;case\"link\":if(r.options.name){var w=this.annotations._nameMap[r.options.name];r.options.pageNumber=w.page,r.options.top=w.y}else r.options.top||(r.options.top=0);if(n=\"/Rect [\"+r.finalBounds.x+\" \"+r.finalBounds.y+\" \"+r.finalBounds.w+\" \"+r.finalBounds.h+\"] \",i=\"\",r.options.url)i=\"<</Type /Annot /Subtype /Link \"+n+\"/Border [0 0 0] /A <</S /URI /URI (\"+f(d(r.options.url))+\") >>\";else if(r.options.pageNumber){switch(i=\"<</Type /Annot /Subtype /Link \"+n+\"/Border [0 0 0] /Dest [\"+this.internal.getPageInfo(r.options.pageNumber).objId+\" 0 R\",r.options.magFactor=r.options.magFactor||\"XYZ\",r.options.magFactor){case\"Fit\":i+=\" /Fit]\";break;case\"FitH\":i+=\" /FitH \"+r.options.top+\"]\";break;case\"FitV\":r.options.left=r.options.left||0,i+=\" /FitV \"+r.options.left+\"]\";break;case\"XYZ\":default:var N=o(r.options.top);r.options.left=r.options.left||0,void 0===r.options.zoom&&(r.options.zoom=0),i+=\" /XYZ \"+r.options.left+\" \"+N+\" \"+r.options.zoom+\"]\"}}\"\"!=i&&(i+=\" >>\",this.internal.write(i))}}this.internal.write(\"]\")}}]),t.createAnnotation=function(t){var e=this.internal.getCurrentPageInfo();switch(t.type){case\"link\":this.link(t.bounds.x,t.bounds.y,t.bounds.w,t.bounds.h,t);break;case\"text\":case\"freetext\":e.pageContext.annotations.push(t)}},t.link=function(t,e,r,n,i){var a=this.internal.getCurrentPageInfo(),o=this.internal.getCoordinateString,s=this.internal.getVerticalCoordinateString;a.pageContext.annotations.push({finalBounds:{x:o(t),y:s(e),w:o(t+r),h:s(e+n)},options:i,type:\"link\"})},t.textWithLink=function(t,e,r,n){var i,a,o=this.getTextWidth(t),s=this.internal.getLineHeight()/this.internal.scaleFactor;if(void 0!==n.maxWidth){a=n.maxWidth;var c=this.splitTextToSize(t,a).length;i=Math.ceil(s*c)}else a=o,i=s;return this.text(t,e,r,n),r+=.2*s,\"center\"===n.align&&(e-=o/2),\"right\"===n.align&&(e-=o),this.link(e,r-s,a,i,n),o},t.getTextWidth=function(t){var e=this.internal.getFontSize();return this.getStringUnitWidth(t)*e/this.internal.scaleFactor}}(E.API),\n/**\n * @license\n * Copyright (c) 2017 Aras Abbasi\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */\nfunction(t){var e={1569:[65152],1570:[65153,65154],1571:[65155,65156],1572:[65157,65158],1573:[65159,65160],1574:[65161,65162,65163,65164],1575:[65165,65166],1576:[65167,65168,65169,65170],1577:[65171,65172],1578:[65173,65174,65175,65176],1579:[65177,65178,65179,65180],1580:[65181,65182,65183,65184],1581:[65185,65186,65187,65188],1582:[65189,65190,65191,65192],1583:[65193,65194],1584:[65195,65196],1585:[65197,65198],1586:[65199,65200],1587:[65201,65202,65203,65204],1588:[65205,65206,65207,65208],1589:[65209,65210,65211,65212],1590:[65213,65214,65215,65216],1591:[65217,65218,65219,65220],1592:[65221,65222,65223,65224],1593:[65225,65226,65227,65228],1594:[65229,65230,65231,65232],1601:[65233,65234,65235,65236],1602:[65237,65238,65239,65240],1603:[65241,65242,65243,65244],1604:[65245,65246,65247,65248],1605:[65249,65250,65251,65252],1606:[65253,65254,65255,65256],1607:[65257,65258,65259,65260],1608:[65261,65262],1609:[65263,65264,64488,64489],1610:[65265,65266,65267,65268],1649:[64336,64337],1655:[64477],1657:[64358,64359,64360,64361],1658:[64350,64351,64352,64353],1659:[64338,64339,64340,64341],1662:[64342,64343,64344,64345],1663:[64354,64355,64356,64357],1664:[64346,64347,64348,64349],1667:[64374,64375,64376,64377],1668:[64370,64371,64372,64373],1670:[64378,64379,64380,64381],1671:[64382,64383,64384,64385],1672:[64392,64393],1676:[64388,64389],1677:[64386,64387],1678:[64390,64391],1681:[64396,64397],1688:[64394,64395],1700:[64362,64363,64364,64365],1702:[64366,64367,64368,64369],1705:[64398,64399,64400,64401],1709:[64467,64468,64469,64470],1711:[64402,64403,64404,64405],1713:[64410,64411,64412,64413],1715:[64406,64407,64408,64409],1722:[64414,64415],1723:[64416,64417,64418,64419],1726:[64426,64427,64428,64429],1728:[64420,64421],1729:[64422,64423,64424,64425],1733:[64480,64481],1734:[64473,64474],1735:[64471,64472],1736:[64475,64476],1737:[64482,64483],1739:[64478,64479],1740:[64508,64509,64510,64511],1744:[64484,64485,64486,64487],1746:[64430,64431],1747:[64432,64433]},r={65247:{65154:65269,65156:65271,65160:65273,65166:65275},65248:{65154:65270,65156:65272,65160:65274,65166:65276},65165:{65247:{65248:{65258:65010}}},1617:{1612:64606,1613:64607,1614:64608,1615:64609,1616:64610}},n={1612:64606,1613:64607,1614:64608,1615:64609,1616:64610},i=[1570,1571,1573,1575];t.__arabicParser__={};var a=t.__arabicParser__.isInArabicSubstitutionA=function(t){return void 0!==e[t.charCodeAt(0)]},o=t.__arabicParser__.isArabicLetter=function(t){return\"string\"==typeof t&&/^[\\u0600-\\u06FF\\u0750-\\u077F\\u08A0-\\u08FF\\uFB50-\\uFDFF\\uFE70-\\uFEFF]+$/.test(t)},s=t.__arabicParser__.isArabicEndLetter=function(t){return o(t)&&a(t)&&e[t.charCodeAt(0)].length<=2},c=t.__arabicParser__.isArabicAlfLetter=function(t){return o(t)&&i.indexOf(t.charCodeAt(0))>=0};t.__arabicParser__.arabicLetterHasIsolatedForm=function(t){return o(t)&&a(t)&&e[t.charCodeAt(0)].length>=1};var u=t.__arabicParser__.arabicLetterHasFinalForm=function(t){return o(t)&&a(t)&&e[t.charCodeAt(0)].length>=2};t.__arabicParser__.arabicLetterHasInitialForm=function(t){return o(t)&&a(t)&&e[t.charCodeAt(0)].length>=3};var h=t.__arabicParser__.arabicLetterHasMedialForm=function(t){return o(t)&&a(t)&&4==e[t.charCodeAt(0)].length},l=t.__arabicParser__.resolveLigatures=function(t){var e=0,n=r,i=\"\",a=0;for(e=0;e<t.length;e+=1)void 0!==n[t.charCodeAt(e)]?(a++,\"number\"==typeof(n=n[t.charCodeAt(e)])&&(i+=String.fromCharCode(n),n=r,a=0),e===t.length-1&&(n=r,i+=t.charAt(e-(a-1)),e-=a-1,a=0)):(n=r,i+=t.charAt(e-a),e-=a,a=0);return i};t.__arabicParser__.isArabicDiacritic=function(t){return void 0!==t&&void 0!==n[t.charCodeAt(0)]};var f=t.__arabicParser__.getCorrectForm=function(t,e,r){return o(t)?!1===a(t)?-1:!u(t)||!o(e)&&!o(r)||!o(r)&&s(e)||s(t)&&!o(e)||s(t)&&c(e)||s(t)&&s(e)?0:h(t)&&o(e)&&!s(e)&&o(r)&&u(r)?3:s(t)||!o(r)?1:2:-1},d=function(t){var r=0,n=0,i=0,a=\"\",s=\"\",c=\"\",u=(t=t||\"\").split(\"\\\\s+\"),h=[];for(r=0;r<u.length;r+=1){for(h.push(\"\"),n=0;n<u[r].length;n+=1)a=u[r][n],s=u[r][n-1],c=u[r][n+1],o(a)?(i=f(a,s,c),h[r]+=-1!==i?String.fromCharCode(e[a.charCodeAt(0)][i]):a):h[r]+=a;h[r]=l(h[r])}return h.join(\" \")},p=t.__arabicParser__.processArabic=t.processArabic=function(){var t,e=\"string\"==typeof arguments[0]?arguments[0]:arguments[0].text,r=[];if(Array.isArray(e)){var n=0;for(r=[],n=0;n<e.length;n+=1)Array.isArray(e[n])?r.push([d(e[n][0]),e[n][1],e[n][2]]):r.push([d(e[n])]);t=r}else t=d(e);return\"string\"==typeof arguments[0]?t:(arguments[0].text=t,arguments[0])};t.events.push([\"preProcessText\",p])}(E.API),E.API.autoPrint=function(t){var e;switch((t=t||{}).variant=t.variant||\"non-conform\",t.variant){case\"javascript\":this.addJS(\"print({});\");break;case\"non-conform\":default:this.internal.events.subscribe(\"postPutResources\",(function(){e=this.internal.newObject(),this.internal.out(\"<<\"),this.internal.out(\"/S /Named\"),this.internal.out(\"/Type /Action\"),this.internal.out(\"/N /Print\"),this.internal.out(\">>\"),this.internal.out(\"endobj\")})),this.internal.events.subscribe(\"putCatalog\",(function(){this.internal.out(\"/OpenAction \"+e+\" 0 R\")}))}return this},\n/**\n * @license\n * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */\nfunction(t){var e=function(){var t=void 0;Object.defineProperty(this,\"pdf\",{get:function(){return t},set:function(e){t=e}});var e=150;Object.defineProperty(this,\"width\",{get:function(){return e},set:function(t){e=isNaN(t)||!1===Number.isInteger(t)||t<0?150:t,this.getContext(\"2d\").pageWrapXEnabled&&(this.getContext(\"2d\").pageWrapX=e+1)}});var r=300;Object.defineProperty(this,\"height\",{get:function(){return r},set:function(t){r=isNaN(t)||!1===Number.isInteger(t)||t<0?300:t,this.getContext(\"2d\").pageWrapYEnabled&&(this.getContext(\"2d\").pageWrapY=r+1)}});var n=[];Object.defineProperty(this,\"childNodes\",{get:function(){return n},set:function(t){n=t}});var i={};Object.defineProperty(this,\"style\",{get:function(){return i},set:function(t){i=t}}),Object.defineProperty(this,\"parentNode\",{})};e.prototype.getContext=function(t,e){var r;if(\"2d\"!==(t=t||\"2d\"))return null;for(r in e)this.pdf.context2d.hasOwnProperty(r)&&(this.pdf.context2d[r]=e[r]);return this.pdf.context2d._canvas=this,this.pdf.context2d},e.prototype.toDataURL=function(){throw new Error(\"toDataURL is not implemented.\")},t.events.push([\"initialized\",function(){this.canvas=new e,this.canvas.pdf=this}])}(E.API),function(e){var r={left:0,top:0,bottom:0,right:0},n=!1,i=function(){void 0===this.internal.__cell__&&(this.internal.__cell__={},this.internal.__cell__.padding=3,this.internal.__cell__.headerFunction=void 0,this.internal.__cell__.margins=Object.assign({},r),this.internal.__cell__.margins.width=this.getPageWidth(),a.call(this))},a=function(){this.internal.__cell__.lastCell=new o,this.internal.__cell__.pages=1},o=function(){var t=arguments[0];Object.defineProperty(this,\"x\",{enumerable:!0,get:function(){return t},set:function(e){t=e}});var e=arguments[1];Object.defineProperty(this,\"y\",{enumerable:!0,get:function(){return e},set:function(t){e=t}});var r=arguments[2];Object.defineProperty(this,\"width\",{enumerable:!0,get:function(){return r},set:function(t){r=t}});var n=arguments[3];Object.defineProperty(this,\"height\",{enumerable:!0,get:function(){return n},set:function(t){n=t}});var i=arguments[4];Object.defineProperty(this,\"text\",{enumerable:!0,get:function(){return i},set:function(t){i=t}});var a=arguments[5];Object.defineProperty(this,\"lineNumber\",{enumerable:!0,get:function(){return a},set:function(t){a=t}});var o=arguments[6];return Object.defineProperty(this,\"align\",{enumerable:!0,get:function(){return o},set:function(t){o=t}}),this};o.prototype.clone=function(){return new o(this.x,this.y,this.width,this.height,this.text,this.lineNumber,this.align)},o.prototype.toArray=function(){return[this.x,this.y,this.width,this.height,this.text,this.lineNumber,this.align]},e.setHeaderFunction=function(t){return i.call(this),this.internal.__cell__.headerFunction=\"function\"==typeof t?t:void 0,this},e.getTextDimensions=function(t,e){i.call(this);var r=(e=e||{}).fontSize||this.getFontSize(),n=e.font||this.getFont(),a=e.scaleFactor||this.internal.scaleFactor,o=0,s=0,c=0,u=this;if(!Array.isArray(t)&&\"string\"!=typeof t){if(\"number\"!=typeof t)throw new Error(\"getTextDimensions expects text-parameter to be of type String or type Number or an Array of Strings.\");t=String(t)}var h=e.maxWidth;h>0?\"string\"==typeof t?t=this.splitTextToSize(t,h):\"[object Array]\"===Object.prototype.toString.call(t)&&(t=t.reduce((function(t,e){return t.concat(u.splitTextToSize(e,h))}),[])):t=Array.isArray(t)?t:[t];for(var l=0;l<t.length;l++)o<(c=this.getStringUnitWidth(t[l],{font:n})*r)&&(o=c);return 0!==o&&(s=t.length),{w:o/=a,h:Math.max((s*r*this.getLineHeightFactor()-r*(this.getLineHeightFactor()-1))/a,0)}},e.cellAddPage=function(){i.call(this),this.addPage();var t=this.internal.__cell__.margins||r;return this.internal.__cell__.lastCell=new o(t.left,t.top,void 0,void 0),this.internal.__cell__.pages+=1,this};var s=e.cell=function(){var t;t=arguments[0]instanceof o?arguments[0]:new o(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]),i.call(this);var e=this.internal.__cell__.lastCell,a=this.internal.__cell__.padding,s=this.internal.__cell__.margins||r,c=this.internal.__cell__.tableHeaderRow,u=this.internal.__cell__.printHeaders;return void 0!==e.lineNumber&&(e.lineNumber===t.lineNumber?(t.x=(e.x||0)+(e.width||0),t.y=e.y||0):e.y+e.height+t.height+s.bottom>this.getPageHeight()?(this.cellAddPage(),t.y=s.top,u&&c&&(this.printHeaderRow(t.lineNumber,!0),t.y+=c[0].height)):t.y=e.y+e.height||t.y),void 0!==t.text[0]&&(this.rect(t.x,t.y,t.width,t.height,!0===n?\"FD\":void 0),\"right\"===t.align?this.text(t.text,t.x+t.width-a,t.y+a,{align:\"right\",baseline:\"top\"}):\"center\"===t.align?this.text(t.text,t.x+t.width/2,t.y+a,{align:\"center\",baseline:\"top\",maxWidth:t.width-a-a}):this.text(t.text,t.x+a,t.y+a,{align:\"left\",baseline:\"top\",maxWidth:t.width-a-a})),this.internal.__cell__.lastCell=t,this};e.table=function(e,n,u,h,l){if(i.call(this),!u)throw new Error(\"No data for PDF table.\");var f,d,p,g,m=[],v=[],b=[],y={},w={},N=[],L=[],A=(l=l||{}).autoSize||!1,x=!1!==l.printHeaders,S=l.css&&void 0!==l.css[\"font-size\"]?16*l.css[\"font-size\"]:l.fontSize||12,_=l.margins||Object.assign({width:this.getPageWidth()},r),P=\"number\"==typeof l.padding?l.padding:3,k=l.headerBackgroundColor||\"#c8c8c8\",I=l.headerTextColor||\"#000\";if(a.call(this),this.internal.__cell__.printHeaders=x,this.internal.__cell__.margins=_,this.internal.__cell__.table_font_size=S,this.internal.__cell__.padding=P,this.internal.__cell__.headerBackgroundColor=k,this.internal.__cell__.headerTextColor=I,this.setFontSize(S),null==h)v=m=Object.keys(u[0]),b=m.map((function(){return\"left\"}));else if(Array.isArray(h)&&\"object\"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(h[0]))for(m=h.map((function(t){return t.name})),v=h.map((function(t){return t.prompt||t.name||\"\"})),b=h.map((function(t){return t.align||\"left\"})),f=0;f<h.length;f+=1)w[h[f].name]=h[f].width*(19.049976/25.4);else Array.isArray(h)&&\"string\"==typeof h[0]&&(v=m=h,b=m.map((function(){return\"left\"})));if(A||Array.isArray(h)&&\"string\"==typeof h[0])for(f=0;f<m.length;f+=1){for(y[g=m[f]]=u.map((function(t){return t[g]})),this.setFont(void 0,\"bold\"),N.push(this.getTextDimensions(v[f],{fontSize:this.internal.__cell__.table_font_size,scaleFactor:this.internal.scaleFactor}).w),d=y[g],this.setFont(void 0,\"normal\"),p=0;p<d.length;p+=1)N.push(this.getTextDimensions(d[p],{fontSize:this.internal.__cell__.table_font_size,scaleFactor:this.internal.scaleFactor}).w);w[g]=Math.max.apply(null,N)+P+P,N=[]}if(x){var F={};for(f=0;f<m.length;f+=1)F[m[f]]={},F[m[f]].text=v[f],F[m[f]].align=b[f];var C=c.call(this,F,w);L=m.map((function(t){return new o(e,n,w[t],C,F[t].text,void 0,F[t].align)})),this.setTableHeaderRow(L),this.printHeaderRow(1,!1)}var j=h.reduce((function(t,e){return t[e.name]=e.align,t}),{});for(f=0;f<u.length;f+=1){\"rowStart\"in l&&l.rowStart instanceof Function&&l.rowStart({row:f,data:u[f]},this);var O=c.call(this,u[f],w);for(p=0;p<m.length;p+=1){var B=u[f][m[p]];\"cellStart\"in l&&l.cellStart instanceof Function&&l.cellStart({row:f,col:p,data:B},this),s.call(this,new o(e,n,w[m[p]],O,B,f+2,j[m[p]]))}}return this.internal.__cell__.table_x=e,this.internal.__cell__.table_y=n,this};var c=function(t,e){var r=this.internal.__cell__.padding,n=this.internal.__cell__.table_font_size,i=this.internal.scaleFactor;return Object.keys(t).map((function(n){var i=t[n];return this.splitTextToSize(i.hasOwnProperty(\"text\")?i.text:i,e[n]-r-r)}),this).map((function(t){return this.getLineHeightFactor()*t.length*n/i+r+r}),this).reduce((function(t,e){return Math.max(t,e)}),0)};e.setTableHeaderRow=function(t){i.call(this),this.internal.__cell__.tableHeaderRow=t},e.printHeaderRow=function(t,e){if(i.call(this),!this.internal.__cell__.tableHeaderRow)throw new Error(\"Property tableHeaderRow does not exist.\");var r;if(n=!0,\"function\"==typeof this.internal.__cell__.headerFunction){var a=this.internal.__cell__.headerFunction(this,this.internal.__cell__.pages);this.internal.__cell__.lastCell=new o(a[0],a[1],a[2],a[3],void 0,-1)}this.setFont(void 0,\"bold\");for(var c=[],u=0;u<this.internal.__cell__.tableHeaderRow.length;u+=1){r=this.internal.__cell__.tableHeaderRow[u].clone(),e&&(r.y=this.internal.__cell__.margins.top||0,c.push(r)),r.lineNumber=t;var h=this.getTextColor();this.setTextColor(this.internal.__cell__.headerTextColor),this.setFillColor(this.internal.__cell__.headerBackgroundColor),s.call(this,r),this.setTextColor(h)}c.length>0&&this.setTableHeaderRow(c),this.setFont(void 0,\"normal\"),n=!1}}(E.API);var Pt={italic:[\"italic\",\"oblique\",\"normal\"],oblique:[\"oblique\",\"italic\",\"normal\"],normal:[\"normal\",\"oblique\",\"italic\"]},kt=[\"ultra-condensed\",\"extra-condensed\",\"condensed\",\"semi-condensed\",\"normal\",\"semi-expanded\",\"expanded\",\"extra-expanded\",\"ultra-expanded\"],It=_t(kt),Ft=[100,200,300,400,500,600,700,800,900],Ct=_t(Ft);function jt(t){var e=t.family.replace(/\"|'/g,\"\").toLowerCase(),r=function(t){return Pt[t=t||\"normal\"]?t:\"normal\"}(t.style),n=function(t){if(!t)return 400;if(\"number\"==typeof t)return t>=100&&t<=900&&t%100==0?t:400;if(/^\\d00$/.test(t))return parseInt(t);switch(t){case\"bold\":return 700;case\"normal\":default:return 400}}(t.weight),i=function(t){return\"number\"==typeof It[t=t||\"normal\"]?t:\"normal\"}(t.stretch);return{family:e,style:r,weight:n,stretch:i,src:t.src||[],ref:t.ref||{name:e,style:[i,r,n].join(\" \")}}}function Ot(t,e,r,n){var i;for(i=r;i>=0&&i<e.length;i+=n)if(t[e[i]])return t[e[i]];for(i=r;i>=0&&i<e.length;i-=n)if(t[e[i]])return t[e[i]]}var Bt={\"sans-serif\":\"helvetica\",fixed:\"courier\",monospace:\"courier\",terminal:\"courier\",cursive:\"times\",fantasy:\"times\",serif:\"times\"},Mt={caption:\"times\",icon:\"times\",menu:\"times\",\"message-box\":\"times\",\"small-caption\":\"times\",\"status-bar\":\"times\"};function Et(t){return[t.stretch,t.style,t.weight,t.family].join(\" \")}function qt(t,e,r){for(var n=(r=r||{}).defaultFontFamily||\"times\",i=Object.assign({},Bt,r.genericFontFamilies||{}),a=null,o=null,s=0;s<e.length;++s)if(i[(a=jt(e[s])).family]&&(a.family=i[a.family]),t.hasOwnProperty(a.family)){o=t[a.family];break}if(!(o=o||t[n]))throw new Error(\"Could not find a font-family for the rule '\"+Et(a)+\"' and default family '\"+n+\"'.\");if(o=function(t,e){if(e[t])return e[t];var r=It[t],n=r<=It.normal?-1:1,i=Ot(e,kt,r,n);if(!i)throw new Error(\"Could not find a matching font-stretch value for \"+t);return i}(a.stretch,o),o=function(t,e){if(e[t])return e[t];for(var r=Pt[t],n=0;n<r.length;++n)if(e[r[n]])return e[r[n]];throw new Error(\"Could not find a matching font-style for \"+t)}(a.style,o),!(o=function(t,e){if(e[t])return e[t];if(400===t&&e[500])return e[500];if(500===t&&e[400])return e[400];var r=Ct[t],n=Ot(e,Ft,r,t<400?-1:1);if(!n)throw new Error(\"Could not find a matching font-weight for value \"+t);return n}(a.weight,o)))throw new Error(\"Failed to resolve a font for the rule '\"+Et(a)+\"'.\");return o}function Dt(t){return t.trimLeft()}function Rt(t,e){for(var r=0;r<t.length;){if(t.charAt(r)===e)return[t.substring(0,r),t.substring(r+1)];r+=1}return null}function Tt(t){var e=t.match(/^(-[a-z_]|[a-z_])[a-z0-9_-]*/i);return null===e?null:[e[0],t.substring(e[0].length)]}var Ut,zt,Ht,Wt=[\"times\"];!function(e){var r,n,i,o,s,c,u,h,l,d=function(t){return t=t||{},this.isStrokeTransparent=t.isStrokeTransparent||!1,this.strokeOpacity=t.strokeOpacity||1,this.strokeStyle=t.strokeStyle||\"#000000\",this.fillStyle=t.fillStyle||\"#000000\",this.isFillTransparent=t.isFillTransparent||!1,this.fillOpacity=t.fillOpacity||1,this.font=t.font||\"10px sans-serif\",this.textBaseline=t.textBaseline||\"alphabetic\",this.textAlign=t.textAlign||\"left\",this.lineWidth=t.lineWidth||1,this.lineJoin=t.lineJoin||\"miter\",this.lineCap=t.lineCap||\"butt\",this.path=t.path||[],this.transform=void 0!==t.transform?t.transform.clone():new h,this.globalCompositeOperation=t.globalCompositeOperation||\"normal\",this.globalAlpha=t.globalAlpha||1,this.clip_path=t.clip_path||[],this.currentPoint=t.currentPoint||new c,this.miterLimit=t.miterLimit||10,this.lastPoint=t.lastPoint||new c,this.lineDashOffset=t.lineDashOffset||0,this.lineDash=t.lineDash||[],this.margin=t.margin||[0,0,0,0],this.prevPageLastElemOffset=t.prevPageLastElemOffset||0,this.ignoreClearRect=\"boolean\"!=typeof t.ignoreClearRect||t.ignoreClearRect,this};e.events.push([\"initialized\",function(){this.context2d=new p(this),r=this.internal.f2,n=this.internal.getCoordinateString,i=this.internal.getVerticalCoordinateString,o=this.internal.getHorizontalCoordinate,s=this.internal.getVerticalCoordinate,c=this.internal.Point,u=this.internal.Rectangle,h=this.internal.Matrix,l=new d}]);var p=function(t){Object.defineProperty(this,\"canvas\",{get:function(){return{parentNode:!1,style:!1}}});var e=t;Object.defineProperty(this,\"pdf\",{get:function(){return e}});var r=!1;Object.defineProperty(this,\"pageWrapXEnabled\",{get:function(){return r},set:function(t){r=Boolean(t)}});var n=!1;Object.defineProperty(this,\"pageWrapYEnabled\",{get:function(){return n},set:function(t){n=Boolean(t)}});var i=0;Object.defineProperty(this,\"posX\",{get:function(){return i},set:function(t){isNaN(t)||(i=t)}});var a=0;Object.defineProperty(this,\"posY\",{get:function(){return a},set:function(t){isNaN(t)||(a=t)}}),Object.defineProperty(this,\"margin\",{get:function(){return l.margin},set:function(t){var e;\"number\"==typeof t?e=[t,t,t,t]:((e=new Array(4))[0]=t[0],e[1]=t.length>=2?t[1]:e[0],e[2]=t.length>=3?t[2]:e[0],e[3]=t.length>=4?t[3]:e[1]),l.margin=e}});var o=!1;Object.defineProperty(this,\"autoPaging\",{get:function(){return o},set:function(t){o=t}});var s=0;Object.defineProperty(this,\"lastBreak\",{get:function(){return s},set:function(t){s=t}});var c=[];Object.defineProperty(this,\"pageBreaks\",{get:function(){return c},set:function(t){c=t}}),Object.defineProperty(this,\"ctx\",{get:function(){return l},set:function(t){t instanceof d&&(l=t)}}),Object.defineProperty(this,\"path\",{get:function(){return l.path},set:function(t){l.path=t}});var u=[];Object.defineProperty(this,\"ctxStack\",{get:function(){return u},set:function(t){u=t}}),Object.defineProperty(this,\"fillStyle\",{get:function(){return this.ctx.fillStyle},set:function(t){var e;e=g(t),this.ctx.fillStyle=e.style,this.ctx.isFillTransparent=0===e.a,this.ctx.fillOpacity=e.a,this.pdf.setFillColor(e.r,e.g,e.b,{a:e.a}),this.pdf.setTextColor(e.r,e.g,e.b,{a:e.a})}}),Object.defineProperty(this,\"strokeStyle\",{get:function(){return this.ctx.strokeStyle},set:function(t){var e=g(t);this.ctx.strokeStyle=e.style,this.ctx.isStrokeTransparent=0===e.a,this.ctx.strokeOpacity=e.a,0===e.a?this.pdf.setDrawColor(255,255,255):(e.a,this.pdf.setDrawColor(e.r,e.g,e.b))}}),Object.defineProperty(this,\"lineCap\",{get:function(){return this.ctx.lineCap},set:function(t){-1!==[\"butt\",\"round\",\"square\"].indexOf(t)&&(this.ctx.lineCap=t,this.pdf.setLineCap(t))}}),Object.defineProperty(this,\"lineWidth\",{get:function(){return this.ctx.lineWidth},set:function(t){isNaN(t)||(this.ctx.lineWidth=t,this.pdf.setLineWidth(t))}}),Object.defineProperty(this,\"lineJoin\",{get:function(){return this.ctx.lineJoin},set:function(t){-1!==[\"bevel\",\"round\",\"miter\"].indexOf(t)&&(this.ctx.lineJoin=t,this.pdf.setLineJoin(t))}}),Object.defineProperty(this,\"miterLimit\",{get:function(){return this.ctx.miterLimit},set:function(t){isNaN(t)||(this.ctx.miterLimit=t,this.pdf.setMiterLimit(t))}}),Object.defineProperty(this,\"textBaseline\",{get:function(){return this.ctx.textBaseline},set:function(t){this.ctx.textBaseline=t}}),Object.defineProperty(this,\"textAlign\",{get:function(){return this.ctx.textAlign},set:function(t){-1!==[\"right\",\"end\",\"center\",\"left\",\"start\"].indexOf(t)&&(this.ctx.textAlign=t)}});var h=null;function f(t,e){if(null===h){var r=function(t){var e=[];return Object.keys(t).forEach((function(r){t[r].forEach((function(t){var n=null;switch(t){case\"bold\":n={family:r,weight:\"bold\"};break;case\"italic\":n={family:r,style:\"italic\"};break;case\"bolditalic\":n={family:r,weight:\"bold\",style:\"italic\"};break;case\"\":case\"normal\":n={family:r}}null!==n&&(n.ref={name:r,style:t},e.push(n))}))})),e}(t.getFontList());h=function(t){for(var e={},r=0;r<t.length;++r){var n=jt(t[r]),i=n.family,a=n.stretch,o=n.style,s=n.weight;e[i]=e[i]||{},e[i][a]=e[i][a]||{},e[i][a][o]=e[i][a][o]||{},e[i][a][o][s]=n}return e}(r.concat(e))}return h}var p=null;Object.defineProperty(this,\"fontFaces\",{get:function(){return p},set:function(t){h=null,p=t}}),Object.defineProperty(this,\"font\",{get:function(){return this.ctx.font},set:function(t){var e;if(this.ctx.font=t,null!==(e=/^\\s*(?=(?:(?:[-a-z]+\\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\\1|\\2|\\3)\\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\\d]+(?:\\%|in|[cem]m|ex|p[ctx]))(?:\\s*\\/\\s*(normal|[.\\d]+(?:\\%|in|[cem]m|ex|p[ctx])))?\\s*([-_,\\\"\\'\\sa-z]+?)\\s*$/i.exec(t))){var r=e[1],n=(e[2],e[3]),i=e[4],a=(e[5],e[6]),o=/^([.\\d]+)((?:%|in|[cem]m|ex|p[ctx]))$/i.exec(i)[2];i=\"px\"===o?Math.floor(parseFloat(i)*this.pdf.internal.scaleFactor):\"em\"===o?Math.floor(parseFloat(i)*this.pdf.getFontSize()):Math.floor(parseFloat(i)*this.pdf.internal.scaleFactor),this.pdf.setFontSize(i);var s=function(t){var e,r,n=[],i=t.trim();if(\"\"===i)return Wt;if(i in Mt)return[Mt[i]];for(;\"\"!==i;){switch(r=null,e=(i=Dt(i)).charAt(0)){case'\"':case\"'\":r=Rt(i.substring(1),e);break;default:r=Tt(i)}if(null===r)return Wt;if(n.push(r[0]),\"\"!==(i=Dt(r[1]))&&\",\"!==i.charAt(0))return Wt;i=i.replace(/^,/,\"\")}return n}(a);if(this.fontFaces){var c=qt(f(this.pdf,this.fontFaces),s.map((function(t){return{family:t,stretch:\"normal\",weight:n,style:r}})));this.pdf.setFont(c.ref.name,c.ref.style)}else{var u=\"\";(\"bold\"===n||parseInt(n,10)>=700||\"bold\"===r)&&(u=\"bold\"),\"italic\"===r&&(u+=\"italic\"),0===u.length&&(u=\"normal\");for(var h=\"\",l={arial:\"Helvetica\",Arial:\"Helvetica\",verdana:\"Helvetica\",Verdana:\"Helvetica\",helvetica:\"Helvetica\",Helvetica:\"Helvetica\",\"sans-serif\":\"Helvetica\",fixed:\"Courier\",monospace:\"Courier\",terminal:\"Courier\",cursive:\"Times\",fantasy:\"Times\",serif:\"Times\"},d=0;d<s.length;d++){if(void 0!==this.pdf.internal.getFont(s[d],u,{noFallback:!0,disableWarning:!0})){h=s[d];break}if(\"bolditalic\"===u&&void 0!==this.pdf.internal.getFont(s[d],\"bold\",{noFallback:!0,disableWarning:!0}))h=s[d],u=\"bold\";else if(void 0!==this.pdf.internal.getFont(s[d],\"normal\",{noFallback:!0,disableWarning:!0})){h=s[d],u=\"normal\";break}}if(\"\"===h)for(var p=0;p<s.length;p++)if(l[s[p]]){h=l[s[p]];break}h=\"\"===h?\"Times\":h,this.pdf.setFont(h,u)}}}}),Object.defineProperty(this,\"globalCompositeOperation\",{get:function(){return this.ctx.globalCompositeOperation},set:function(t){this.ctx.globalCompositeOperation=t}}),Object.defineProperty(this,\"globalAlpha\",{get:function(){return this.ctx.globalAlpha},set:function(t){this.ctx.globalAlpha=t}}),Object.defineProperty(this,\"lineDashOffset\",{get:function(){return this.ctx.lineDashOffset},set:function(t){this.ctx.lineDashOffset=t,T.call(this)}}),Object.defineProperty(this,\"lineDash\",{get:function(){return this.ctx.lineDash},set:function(t){this.ctx.lineDash=t,T.call(this)}}),Object.defineProperty(this,\"ignoreClearRect\",{get:function(){return this.ctx.ignoreClearRect},set:function(t){this.ctx.ignoreClearRect=Boolean(t)}})};p.prototype.setLineDash=function(t){this.lineDash=t},p.prototype.getLineDash=function(){return this.lineDash.length%2?this.lineDash.concat(this.lineDash):this.lineDash.slice()},p.prototype.fill=function(){A.call(this,\"fill\",!1)},p.prototype.stroke=function(){A.call(this,\"stroke\",!1)},p.prototype.beginPath=function(){this.path=[{type:\"begin\"}]},p.prototype.moveTo=function(t,e){if(isNaN(t)||isNaN(e))throw a.error(\"jsPDF.context2d.moveTo: Invalid arguments\",arguments),new Error(\"Invalid arguments passed to jsPDF.context2d.moveTo\");var r=this.ctx.transform.applyToPoint(new c(t,e));this.path.push({type:\"mt\",x:r.x,y:r.y}),this.ctx.lastPoint=new c(t,e)},p.prototype.closePath=function(){var e=new c(0,0),r=0;for(r=this.path.length-1;-1!==r;r--)if(\"begin\"===this.path[r].type&&\"object\"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this.path[r+1])&&\"number\"==typeof this.path[r+1].x){e=new c(this.path[r+1].x,this.path[r+1].y);break}this.path.push({type:\"close\"}),this.ctx.lastPoint=new c(e.x,e.y)},p.prototype.lineTo=function(t,e){if(isNaN(t)||isNaN(e))throw a.error(\"jsPDF.context2d.lineTo: Invalid arguments\",arguments),new Error(\"Invalid arguments passed to jsPDF.context2d.lineTo\");var r=this.ctx.transform.applyToPoint(new c(t,e));this.path.push({type:\"lt\",x:r.x,y:r.y}),this.ctx.lastPoint=new c(r.x,r.y)},p.prototype.clip=function(){this.ctx.clip_path=JSON.parse(JSON.stringify(this.path)),A.call(this,null,!0)},p.prototype.quadraticCurveTo=function(t,e,r,n){if(isNaN(r)||isNaN(n)||isNaN(t)||isNaN(e))throw a.error(\"jsPDF.context2d.quadraticCurveTo: Invalid arguments\",arguments),new Error(\"Invalid arguments passed to jsPDF.context2d.quadraticCurveTo\");var i=this.ctx.transform.applyToPoint(new c(r,n)),o=this.ctx.transform.applyToPoint(new c(t,e));this.path.push({type:\"qct\",x1:o.x,y1:o.y,x:i.x,y:i.y}),this.ctx.lastPoint=new c(i.x,i.y)},p.prototype.bezierCurveTo=function(t,e,r,n,i,o){if(isNaN(i)||isNaN(o)||isNaN(t)||isNaN(e)||isNaN(r)||isNaN(n))throw a.error(\"jsPDF.context2d.bezierCurveTo: Invalid arguments\",arguments),new Error(\"Invalid arguments passed to jsPDF.context2d.bezierCurveTo\");var s=this.ctx.transform.applyToPoint(new c(i,o)),u=this.ctx.transform.applyToPoint(new c(t,e)),h=this.ctx.transform.applyToPoint(new c(r,n));this.path.push({type:\"bct\",x1:u.x,y1:u.y,x2:h.x,y2:h.y,x:s.x,y:s.y}),this.ctx.lastPoint=new c(s.x,s.y)},p.prototype.arc=function(t,e,r,n,i,o){if(isNaN(t)||isNaN(e)||isNaN(r)||isNaN(n)||isNaN(i))throw a.error(\"jsPDF.context2d.arc: Invalid arguments\",arguments),new Error(\"Invalid arguments passed to jsPDF.context2d.arc\");if(o=Boolean(o),!this.ctx.transform.isIdentity){var s=this.ctx.transform.applyToPoint(new c(t,e));t=s.x,e=s.y;var u=this.ctx.transform.applyToPoint(new c(0,r)),h=this.ctx.transform.applyToPoint(new c(0,0));r=Math.sqrt(Math.pow(u.x-h.x,2)+Math.pow(u.y-h.y,2))}Math.abs(i-n)>=2*Math.PI&&(n=0,i=2*Math.PI),this.path.push({type:\"arc\",x:t,y:e,radius:r,startAngle:n,endAngle:i,counterclockwise:o})},p.prototype.arcTo=function(t,e,r,n,i){throw new Error(\"arcTo not implemented.\")},p.prototype.rect=function(t,e,r,n){if(isNaN(t)||isNaN(e)||isNaN(r)||isNaN(n))throw a.error(\"jsPDF.context2d.rect: Invalid arguments\",arguments),new Error(\"Invalid arguments passed to jsPDF.context2d.rect\");this.moveTo(t,e),this.lineTo(t+r,e),this.lineTo(t+r,e+n),this.lineTo(t,e+n),this.lineTo(t,e),this.lineTo(t+r,e),this.lineTo(t,e)},p.prototype.fillRect=function(t,e,r,n){if(isNaN(t)||isNaN(e)||isNaN(r)||isNaN(n))throw a.error(\"jsPDF.context2d.fillRect: Invalid arguments\",arguments),new Error(\"Invalid arguments passed to jsPDF.context2d.fillRect\");if(!m.call(this)){var i={};\"butt\"!==this.lineCap&&(i.lineCap=this.lineCap,this.lineCap=\"butt\"),\"miter\"!==this.lineJoin&&(i.lineJoin=this.lineJoin,this.lineJoin=\"miter\"),this.beginPath(),this.rect(t,e,r,n),this.fill(),i.hasOwnProperty(\"lineCap\")&&(this.lineCap=i.lineCap),i.hasOwnProperty(\"lineJoin\")&&(this.lineJoin=i.lineJoin)}},p.prototype.strokeRect=function(t,e,r,n){if(isNaN(t)||isNaN(e)||isNaN(r)||isNaN(n))throw a.error(\"jsPDF.context2d.strokeRect: Invalid arguments\",arguments),new Error(\"Invalid arguments passed to jsPDF.context2d.strokeRect\");v.call(this)||(this.beginPath(),this.rect(t,e,r,n),this.stroke())},p.prototype.clearRect=function(t,e,r,n){if(isNaN(t)||isNaN(e)||isNaN(r)||isNaN(n))throw a.error(\"jsPDF.context2d.clearRect: Invalid arguments\",arguments),new Error(\"Invalid arguments passed to jsPDF.context2d.clearRect\");this.ignoreClearRect||(this.fillStyle=\"#ffffff\",this.fillRect(t,e,r,n))},p.prototype.save=function(t){t=\"boolean\"!=typeof t||t;for(var e=this.pdf.internal.getCurrentPageInfo().pageNumber,r=0;r<this.pdf.internal.getNumberOfPages();r++)this.pdf.setPage(r+1),this.pdf.internal.out(\"q\");if(this.pdf.setPage(e),t){this.ctx.fontSize=this.pdf.internal.getFontSize();var n=new d(this.ctx);this.ctxStack.push(this.ctx),this.ctx=n}},p.prototype.restore=function(t){t=\"boolean\"!=typeof t||t;for(var e=this.pdf.internal.getCurrentPageInfo().pageNumber,r=0;r<this.pdf.internal.getNumberOfPages();r++)this.pdf.setPage(r+1),this.pdf.internal.out(\"Q\");this.pdf.setPage(e),t&&0!==this.ctxStack.length&&(this.ctx=this.ctxStack.pop(),this.fillStyle=this.ctx.fillStyle,this.strokeStyle=this.ctx.strokeStyle,this.font=this.ctx.font,this.lineCap=this.ctx.lineCap,this.lineWidth=this.ctx.lineWidth,this.lineJoin=this.ctx.lineJoin,this.lineDash=this.ctx.lineDash,this.lineDashOffset=this.ctx.lineDashOffset)},p.prototype.toDataURL=function(){throw new Error(\"toDataUrl not implemented.\")};var g=function(t){var e,r,n,i;if(!0===t.isCanvasGradient&&(t=t.getColor()),!t)return{r:0,g:0,b:0,a:0,style:t};if(/transparent|rgba\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*0+\\s*\\)/.test(t))e=0,r=0,n=0,i=0;else{var a=/rgb\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)/.exec(t);if(null!==a)e=parseInt(a[1]),r=parseInt(a[2]),n=parseInt(a[3]),i=1;else if(null!==(a=/rgba\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*([\\d.]+)\\s*\\)/.exec(t)))e=parseInt(a[1]),r=parseInt(a[2]),n=parseInt(a[3]),i=parseFloat(a[4]);else{if(i=1,\"string\"==typeof t&&\"#\"!==t.charAt(0)){var o=new f(t);t=o.ok?o.toHex():\"#000000\"}4===t.length?(e=t.substring(1,2),e+=e,r=t.substring(2,3),r+=r,n=t.substring(3,4),n+=n):(e=t.substring(1,3),r=t.substring(3,5),n=t.substring(5,7)),e=parseInt(e,16),r=parseInt(r,16),n=parseInt(n,16)}}return{r:e,g:r,b:n,a:i,style:t}},m=function(){return this.ctx.isFillTransparent||0==this.globalAlpha},v=function(){return Boolean(this.ctx.isStrokeTransparent||0==this.globalAlpha)};p.prototype.fillText=function(t,e,r,n){if(isNaN(e)||isNaN(r)||\"string\"!=typeof t)throw a.error(\"jsPDF.context2d.fillText: Invalid arguments\",arguments),new Error(\"Invalid arguments passed to jsPDF.context2d.fillText\");if(n=isNaN(n)?void 0:n,!m.call(this)){var i=q(this.ctx.transform.rotation),o=this.ctx.transform.scaleX;C.call(this,{text:t,x:e,y:r,scale:o,angle:i,align:this.textAlign,maxWidth:n})}},p.prototype.strokeText=function(t,e,r,n){if(isNaN(e)||isNaN(r)||\"string\"!=typeof t)throw a.error(\"jsPDF.context2d.strokeText: Invalid arguments\",arguments),new Error(\"Invalid arguments passed to jsPDF.context2d.strokeText\");if(!v.call(this)){n=isNaN(n)?void 0:n;var i=q(this.ctx.transform.rotation),o=this.ctx.transform.scaleX;C.call(this,{text:t,x:e,y:r,scale:o,renderingMode:\"stroke\",angle:i,align:this.textAlign,maxWidth:n})}},p.prototype.measureText=function(t){if(\"string\"!=typeof t)throw a.error(\"jsPDF.context2d.measureText: Invalid arguments\",arguments),new Error(\"Invalid arguments passed to jsPDF.context2d.measureText\");var e=this.pdf,r=this.pdf.internal.scaleFactor,n=e.internal.getFontSize(),i=e.getStringUnitWidth(t)*n/e.internal.scaleFactor,o=function(t){var e=(t=t||{}).width||0;return Object.defineProperty(this,\"width\",{get:function(){return e}}),this};return new o({width:i*=Math.round(96*r/72*1e4)/1e4})},p.prototype.scale=function(t,e){if(isNaN(t)||isNaN(e))throw a.error(\"jsPDF.context2d.scale: Invalid arguments\",arguments),new Error(\"Invalid arguments passed to jsPDF.context2d.scale\");var r=new h(t,0,0,e,0,0);this.ctx.transform=this.ctx.transform.multiply(r)},p.prototype.rotate=function(t){if(isNaN(t))throw a.error(\"jsPDF.context2d.rotate: Invalid arguments\",arguments),new Error(\"Invalid arguments passed to jsPDF.context2d.rotate\");var e=new h(Math.cos(t),Math.sin(t),-Math.sin(t),Math.cos(t),0,0);this.ctx.transform=this.ctx.transform.multiply(e)},p.prototype.translate=function(t,e){if(isNaN(t)||isNaN(e))throw a.error(\"jsPDF.context2d.translate: Invalid arguments\",arguments),new Error(\"Invalid arguments passed to jsPDF.context2d.translate\");var r=new h(1,0,0,1,t,e);this.ctx.transform=this.ctx.transform.multiply(r)},p.prototype.transform=function(t,e,r,n,i,o){if(isNaN(t)||isNaN(e)||isNaN(r)||isNaN(n)||isNaN(i)||isNaN(o))throw a.error(\"jsPDF.context2d.transform: Invalid arguments\",arguments),new Error(\"Invalid arguments passed to jsPDF.context2d.transform\");var s=new h(t,e,r,n,i,o);this.ctx.transform=this.ctx.transform.multiply(s)},p.prototype.setTransform=function(t,e,r,n,i,a){t=isNaN(t)?1:t,e=isNaN(e)?0:e,r=isNaN(r)?0:r,n=isNaN(n)?1:n,i=isNaN(i)?0:i,a=isNaN(a)?0:a,this.ctx.transform=new h(t,e,r,n,i,a)};var b=function(){return this.margin[0]>0||this.margin[1]>0||this.margin[2]>0||this.margin[3]>0};p.prototype.drawImage=function(t,e,r,n,i,a,o,s,c){var l=this.pdf.getImageProperties(t),f=1,d=1,p=1,g=1;void 0!==n&&void 0!==s&&(p=s/n,g=c/i,f=l.width/n*s/n,d=l.height/i*c/i),void 0===a&&(a=e,o=r,e=0,r=0),void 0!==n&&void 0===s&&(s=n,c=i),void 0===n&&void 0===s&&(s=l.width,c=l.height);for(var m,v=this.ctx.transform.decompose(),w=q(v.rotate.shx),A=new h,S=(A=(A=(A=A.multiply(v.translate)).multiply(v.skew)).multiply(v.scale)).applyToRectangle(new u(a-e*p,o-r*g,n*f,i*d)),_=y.call(this,S),P=[],k=0;k<_.length;k+=1)-1===P.indexOf(_[k])&&P.push(_[k]);if(L(P),this.autoPaging)for(var I=P[0],F=P[P.length-1],C=I;C<F+1;C++){this.pdf.setPage(C);var j=this.pdf.internal.pageSize.width-this.margin[3]-this.margin[1],O=1===C?this.posY+this.margin[0]:this.margin[0],B=this.pdf.internal.pageSize.height-this.posY-this.margin[0]-this.margin[2],M=this.pdf.internal.pageSize.height-this.margin[0]-this.margin[2],E=1===C?0:B+(C-2)*M;if(0!==this.ctx.clip_path.length){var D=this.path;m=JSON.parse(JSON.stringify(this.ctx.clip_path)),this.path=N(m,this.posX+this.margin[3],-E+O+this.ctx.prevPageLastElemOffset),x.call(this,\"fill\",!0),this.path=D}var R=JSON.parse(JSON.stringify(S));R=N([R],this.posX+this.margin[3],-E+O+this.ctx.prevPageLastElemOffset)[0];var T=(C>I||C<F)&&b.call(this);T&&(this.pdf.saveGraphicsState(),this.pdf.rect(this.margin[3],this.margin[0],j,M,null).clip().discardPath()),this.pdf.addImage(t,\"JPEG\",R.x,R.y,R.w,R.h,null,null,w),T&&this.pdf.restoreGraphicsState()}else this.pdf.addImage(t,\"JPEG\",S.x,S.y,S.w,S.h,null,null,w)};var y=function(t,e,r){var n=[];e=e||this.pdf.internal.pageSize.width,r=r||this.pdf.internal.pageSize.height-this.margin[0]-this.margin[2];var i=this.posY+this.ctx.prevPageLastElemOffset;switch(t.type){default:case\"mt\":case\"lt\":n.push(Math.floor((t.y+i)/r)+1);break;case\"arc\":n.push(Math.floor((t.y+i-t.radius)/r)+1),n.push(Math.floor((t.y+i+t.radius)/r)+1);break;case\"qct\":var a=D(this.ctx.lastPoint.x,this.ctx.lastPoint.y,t.x1,t.y1,t.x,t.y);n.push(Math.floor((a.y+i)/r)+1),n.push(Math.floor((a.y+a.h+i)/r)+1);break;case\"bct\":var o=R(this.ctx.lastPoint.x,this.ctx.lastPoint.y,t.x1,t.y1,t.x2,t.y2,t.x,t.y);n.push(Math.floor((o.y+i)/r)+1),n.push(Math.floor((o.y+o.h+i)/r)+1);break;case\"rect\":n.push(Math.floor((t.y+i)/r)+1),n.push(Math.floor((t.y+t.h+i)/r)+1)}for(var s=0;s<n.length;s+=1)for(;this.pdf.internal.getNumberOfPages()<n[s];)w.call(this);return n},w=function(){var t=this.fillStyle,e=this.strokeStyle,r=this.font,n=this.lineCap,i=this.lineWidth,a=this.lineJoin;this.pdf.addPage(),this.fillStyle=t,this.strokeStyle=e,this.font=r,this.lineCap=n,this.lineWidth=i,this.lineJoin=a},N=function(t,e,r){for(var n=0;n<t.length;n++)switch(t[n].type){case\"bct\":t[n].x2+=e,t[n].y2+=r;case\"qct\":t[n].x1+=e,t[n].y1+=r;case\"mt\":case\"lt\":case\"arc\":default:t[n].x+=e,t[n].y+=r}return t},L=function(t){return t.sort((function(t,e){return t-e}))},A=function(t,e){for(var r,n,i=this.fillStyle,a=this.strokeStyle,o=this.lineCap,s=this.lineWidth,c=Math.abs(s*this.ctx.transform.scaleX),u=this.lineJoin,h=JSON.parse(JSON.stringify(this.path)),l=JSON.parse(JSON.stringify(this.path)),f=[],d=0;d<l.length;d++)if(void 0!==l[d].x)for(var p=y.call(this,l[d]),g=0;g<p.length;g+=1)-1===f.indexOf(p[g])&&f.push(p[g]);for(var m=0;m<f.length;m++)for(;this.pdf.internal.getNumberOfPages()<f[m];)w.call(this);if(L(f),this.autoPaging)for(var v=f[0],A=f[f.length-1],S=v;S<A+1;S++){this.pdf.setPage(S),this.fillStyle=i,this.strokeStyle=a,this.lineCap=o,this.lineWidth=c,this.lineJoin=u;var _=this.pdf.internal.pageSize.width-this.margin[3]-this.margin[1],P=1===S?this.posY+this.margin[0]:this.margin[0],k=this.pdf.internal.pageSize.height-this.posY-this.margin[0]-this.margin[2],I=this.pdf.internal.pageSize.height-this.margin[0]-this.margin[2],F=1===S?0:k+(S-2)*I;if(0!==this.ctx.clip_path.length){var C=this.path;r=JSON.parse(JSON.stringify(this.ctx.clip_path)),this.path=N(r,this.posX+this.margin[3],-F+P+this.ctx.prevPageLastElemOffset),x.call(this,t,!0),this.path=C}if(n=JSON.parse(JSON.stringify(h)),this.path=N(n,this.posX+this.margin[3],-F+P+this.ctx.prevPageLastElemOffset),!1===e||0===S){var j=(S>v||S<A)&&b.call(this);j&&(this.pdf.saveGraphicsState(),this.pdf.rect(this.margin[3],this.margin[0],_,I,null).clip().discardPath()),x.call(this,t,e),j&&this.pdf.restoreGraphicsState()}this.lineWidth=s}else this.lineWidth=c,x.call(this,t,e),this.lineWidth=s;this.path=h},x=function(t,e){if((\"stroke\"!==t||e||!v.call(this))&&(\"stroke\"===t||e||!m.call(this))){for(var r,n,i=[],a=this.path,o=0;o<a.length;o++){var s=a[o];switch(s.type){case\"begin\":i.push({begin:!0});break;case\"close\":i.push({close:!0});break;case\"mt\":i.push({start:s,deltas:[],abs:[]});break;case\"lt\":var c=i.length;if(a[o-1]&&!isNaN(a[o-1].x)&&(r=[s.x-a[o-1].x,s.y-a[o-1].y],c>0))for(;c>=0;c--)if(!0!==i[c-1].close&&!0!==i[c-1].begin){i[c-1].deltas.push(r),i[c-1].abs.push(s);break}break;case\"bct\":r=[s.x1-a[o-1].x,s.y1-a[o-1].y,s.x2-a[o-1].x,s.y2-a[o-1].y,s.x-a[o-1].x,s.y-a[o-1].y],i[i.length-1].deltas.push(r);break;case\"qct\":var u=a[o-1].x+2/3*(s.x1-a[o-1].x),h=a[o-1].y+2/3*(s.y1-a[o-1].y),l=s.x+2/3*(s.x1-s.x),f=s.y+2/3*(s.y1-s.y),d=s.x,p=s.y;r=[u-a[o-1].x,h-a[o-1].y,l-a[o-1].x,f-a[o-1].y,d-a[o-1].x,p-a[o-1].y],i[i.length-1].deltas.push(r);break;case\"arc\":i.push({deltas:[],abs:[],arc:!0}),Array.isArray(i[i.length-1].abs)&&i[i.length-1].abs.push(s)}}n=e?null:\"stroke\"===t?\"stroke\":\"fill\";for(var g=!1,b=0;b<i.length;b++)if(i[b].arc)for(var y=i[b].abs,w=0;w<y.length;w++){var N=y[w];\"arc\"===N.type?P.call(this,N.x,N.y,N.radius,N.startAngle,N.endAngle,N.counterclockwise,void 0,e,!g):j.call(this,N.x,N.y),g=!0}else if(!0===i[b].close)this.pdf.internal.out(\"h\"),g=!1;else if(!0!==i[b].begin){var L=i[b].start.x,A=i[b].start.y;O.call(this,i[b].deltas,L,A),g=!0}n&&k.call(this,n),e&&I.call(this)}},S=function(t){var e=this.pdf.internal.getFontSize()/this.pdf.internal.scaleFactor,r=e*(this.pdf.internal.getLineHeightFactor()-1);switch(this.ctx.textBaseline){case\"bottom\":return t-r;case\"top\":return t+e-r;case\"hanging\":return t+e-2*r;case\"middle\":return t+e/2-r;case\"ideographic\":return t;case\"alphabetic\":default:return t}},_=function(t){return t+this.pdf.internal.getFontSize()/this.pdf.internal.scaleFactor*(this.pdf.internal.getLineHeightFactor()-1)};p.prototype.createLinearGradient=function(){var t=function(){};return t.colorStops=[],t.addColorStop=function(t,e){this.colorStops.push([t,e])},t.getColor=function(){return 0===this.colorStops.length?\"#000000\":this.colorStops[0][1]},t.isCanvasGradient=!0,t},p.prototype.createPattern=function(){return this.createLinearGradient()},p.prototype.createRadialGradient=function(){return this.createLinearGradient()};var P=function(t,e,r,n,i,a,o,s,c){for(var u=M.call(this,r,n,i,a),h=0;h<u.length;h++){var l=u[h];0===h&&(c?F.call(this,l.x1+t,l.y1+e):j.call(this,l.x1+t,l.y1+e)),B.call(this,t,e,l.x2,l.y2,l.x3,l.y3,l.x4,l.y4)}s?I.call(this):k.call(this,o)},k=function(t){switch(t){case\"stroke\":this.pdf.internal.out(\"S\");break;case\"fill\":this.pdf.internal.out(\"f\")}},I=function(){this.pdf.clip(),this.pdf.discardPath()},F=function(t,e){this.pdf.internal.out(n(t)+\" \"+i(e)+\" m\")},C=function(t){var e;switch(t.align){case\"right\":case\"end\":e=\"right\";break;case\"center\":e=\"center\";break;case\"left\":case\"start\":default:e=\"left\"}var r=this.pdf.getTextDimensions(t.text),n=S.call(this,t.y),i=_.call(this,n)-r.h,a=this.ctx.transform.applyToPoint(new c(t.x,n)),o=this.ctx.transform.decompose(),s=new h;s=(s=(s=s.multiply(o.translate)).multiply(o.skew)).multiply(o.scale);for(var l,f,d,p=this.ctx.transform.applyToRectangle(new u(t.x,n,r.w,r.h)),g=s.applyToRectangle(new u(t.x,i,r.w,r.h)),m=y.call(this,g),v=[],w=0;w<m.length;w+=1)-1===v.indexOf(m[w])&&v.push(m[w]);if(L(v),this.autoPaging)for(var A=v[0],P=v[v.length-1],k=A;k<P+1;k++){this.pdf.setPage(k);var I=1===k?this.posY+this.margin[0]:this.margin[0],F=this.pdf.internal.pageSize.height-this.posY-this.margin[0]-this.margin[2],C=this.pdf.internal.pageSize.height-this.margin[2],j=C-this.margin[0],O=this.pdf.internal.pageSize.width-this.margin[1],B=O-this.margin[3],M=1===k?0:F+(k-2)*j;if(0!==this.ctx.clip_path.length){var E=this.path;l=JSON.parse(JSON.stringify(this.ctx.clip_path)),this.path=N(l,this.posX+this.margin[3],-1*M+I),x.call(this,\"fill\",!0),this.path=E}var q=N([JSON.parse(JSON.stringify(g))],this.posX+this.margin[3],-M+I+this.ctx.prevPageLastElemOffset)[0];t.scale>=.01&&(f=this.pdf.internal.getFontSize(),this.pdf.setFontSize(f*t.scale),d=this.lineWidth,this.lineWidth=d*t.scale);var D=\"text\"!==this.autoPaging;if(D||q.y+q.h<=C){if(D||q.y>=I&&q.x<=O){var R=D?t.text:this.pdf.splitTextToSize(t.text,t.maxWidth||O-q.x)[0],T=N([JSON.parse(JSON.stringify(p))],this.posX+this.margin[3],-M+I+this.ctx.prevPageLastElemOffset)[0],U=D&&(k>A||k<P)&&b.call(this);U&&(this.pdf.saveGraphicsState(),this.pdf.rect(this.margin[3],this.margin[0],B,j,null).clip().discardPath()),this.pdf.text(R,T.x,T.y,{angle:t.angle,align:e,renderingMode:t.renderingMode}),U&&this.pdf.restoreGraphicsState()}}else q.y<C&&(this.ctx.prevPageLastElemOffset+=C-q.y);t.scale>=.01&&(this.pdf.setFontSize(f),this.lineWidth=d)}else t.scale>=.01&&(f=this.pdf.internal.getFontSize(),this.pdf.setFontSize(f*t.scale),d=this.lineWidth,this.lineWidth=d*t.scale),this.pdf.text(t.text,a.x+this.posX,a.y+this.posY,{angle:t.angle,align:e,renderingMode:t.renderingMode,maxWidth:t.maxWidth}),t.scale>=.01&&(this.pdf.setFontSize(f),this.lineWidth=d)},j=function(t,e,r,a){r=r||0,a=a||0,this.pdf.internal.out(n(t+r)+\" \"+i(e+a)+\" l\")},O=function(t,e,r){return this.pdf.lines(t,e,r,null,null)},B=function(t,e,n,i,a,c,u,h){this.pdf.internal.out([r(o(n+t)),r(s(i+e)),r(o(a+t)),r(s(c+e)),r(o(u+t)),r(s(h+e)),\"c\"].join(\" \"))},M=function(t,e,r,n){for(var i=2*Math.PI,a=Math.PI/2;e>r;)e-=i;var o=Math.abs(r-e);o<i&&n&&(o=i-o);for(var s=[],c=n?-1:1,u=e;o>1e-5;){var h=u+c*Math.min(o,a);s.push(E.call(this,t,u,h)),o-=Math.abs(h-u),u=h}return s},E=function(t,e,r){var n=(r-e)/2,i=t*Math.cos(n),a=t*Math.sin(n),o=i,s=-a,c=o*o+s*s,u=c+o*i+s*a,h=4/3*(Math.sqrt(2*c*u)-u)/(o*a-s*i),l=o-h*s,f=s+h*o,d=l,p=-f,g=n+e,m=Math.cos(g),v=Math.sin(g);return{x1:t*Math.cos(e),y1:t*Math.sin(e),x2:l*m-f*v,y2:l*v+f*m,x3:d*m-p*v,y3:d*v+p*m,x4:t*Math.cos(r),y4:t*Math.sin(r)}},q=function(t){return 180*t/Math.PI},D=function(t,e,r,n,i,a){var o=t+.5*(r-t),s=e+.5*(n-e),c=i+.5*(r-i),h=a+.5*(n-a),l=Math.min(t,i,o,c),f=Math.max(t,i,o,c),d=Math.min(e,a,s,h),p=Math.max(e,a,s,h);return new u(l,d,f-l,p-d)},R=function(t,e,r,n,i,a,o,s){var c,h,l,f,d,p,g,m,v,b,y,w,N,L,A=r-t,x=n-e,S=i-r,_=a-n,P=o-i,k=s-a;for(h=0;h<41;h++)v=(g=(l=t+(c=h/40)*A)+c*((d=r+c*S)-l))+c*(d+c*(i+c*P-d)-g),b=(m=(f=e+c*x)+c*((p=n+c*_)-f))+c*(p+c*(a+c*k-p)-m),0==h?(y=v,w=b,N=v,L=b):(y=Math.min(y,v),w=Math.min(w,b),N=Math.max(N,v),L=Math.max(L,b));return new u(Math.round(y),Math.round(w),Math.round(N-y),Math.round(L-w))},T=function(){if(this.prevLineDash||this.ctx.lineDash.length||this.ctx.lineDashOffset){var t,e,r=(t=this.ctx.lineDash,e=this.ctx.lineDashOffset,JSON.stringify({lineDash:t,lineDashOffset:e}));this.prevLineDash!==r&&(this.pdf.setLineDash(this.ctx.lineDash,this.ctx.lineDashOffset),this.prevLineDash=r)}}}(E.API),\n/**\n * @license\n * jsPDF filters PlugIn\n * Copyright (c) 2014 Aras Abbasi\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */\nfunction(t){var r=function(t){var e,r,n,i,a,o,s,c,u,h;for(/[^\\x00-\\xFF]/.test(t),r=[],n=0,i=(t+=e=\"\\0\\0\\0\\0\".slice(t.length%4||4)).length;i>n;n+=4)0!==(a=(t.charCodeAt(n)<<24)+(t.charCodeAt(n+1)<<16)+(t.charCodeAt(n+2)<<8)+t.charCodeAt(n+3))?(o=(a=((a=((a=((a=(a-(h=a%85))/85)-(u=a%85))/85)-(c=a%85))/85)-(s=a%85))/85)%85,r.push(o+33,s+33,c+33,u+33,h+33)):r.push(122);return function(t,e){for(var r=e;r>0;r--)t.pop()}(r,e.length),String.fromCharCode.apply(String,r)+\"~>\"},n=function(t){var e,r,n,i,a,o=String,s=\"length\",c=255,u=\"charCodeAt\",h=\"slice\",l=\"replace\";for(t[h](-2),t=t[h](0,-2)[l](/\\s/g,\"\")[l](\"z\",\"!!!!!\"),n=[],i=0,a=(t+=e=\"uuuuu\"[h](t[s]%5||5))[s];a>i;i+=5)r=52200625*(t[u](i)-33)+614125*(t[u](i+1)-33)+7225*(t[u](i+2)-33)+85*(t[u](i+3)-33)+(t[u](i+4)-33),n.push(c&r>>24,c&r>>16,c&r>>8,c&r);return function(t,e){for(var r=e;r>0;r--)t.pop()}(n,e[s]),o.fromCharCode.apply(o,n)},i=function(t){var e=new RegExp(/^([0-9A-Fa-f]{2})+$/);if(-1!==(t=t.replace(/\\s/g,\"\")).indexOf(\">\")&&(t=t.substr(0,t.indexOf(\">\"))),t.length%2&&(t+=\"0\"),!1===e.test(t))return\"\";for(var r=\"\",n=0;n<t.length;n+=2)r+=String.fromCharCode(\"0x\"+(t[n]+t[n+1]));return r},a=function(t){for(var r=new Uint8Array(t.length),n=t.length;n--;)r[n]=t.charCodeAt(n);return t=(r=(0,fflate__WEBPACK_IMPORTED_MODULE_1__.zlibSync)(r)).reduce((function(t,e){return t+String.fromCharCode(e)}),\"\")};t.processDataByFilters=function(t,e){var o=0,s=t||\"\",c=[];for(\"string\"==typeof(e=e||[])&&(e=[e]),o=0;o<e.length;o+=1)switch(e[o]){case\"ASCII85Decode\":case\"/ASCII85Decode\":s=n(s),c.push(\"/ASCII85Encode\");break;case\"ASCII85Encode\":case\"/ASCII85Encode\":s=r(s),c.push(\"/ASCII85Decode\");break;case\"ASCIIHexDecode\":case\"/ASCIIHexDecode\":s=i(s),c.push(\"/ASCIIHexEncode\");break;case\"ASCIIHexEncode\":case\"/ASCIIHexEncode\":s=s.split(\"\").map((function(t){return(\"0\"+t.charCodeAt().toString(16)).slice(-2)})).join(\"\")+\">\",c.push(\"/ASCIIHexDecode\");break;case\"FlateEncode\":case\"/FlateEncode\":s=a(s),c.push(\"/FlateDecode\");break;default:throw new Error('The filter: \"'+e[o]+'\" is not implemented')}return{data:s,reverseChain:c.reverse().join(\" \")}}}(E.API),\n/**\n * @license\n * jsPDF fileloading PlugIn\n * Copyright (c) 2018 Aras Abbasi (aras.abbasi@gmail.com)\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */\nfunction(t){t.loadFile=function(t,e,r){return function(t,e,r){e=!1!==e,r=\"function\"==typeof r?r:function(){};var n=void 0;try{n=function(t,e,r){var n=new XMLHttpRequest,i=0,a=function(t){var e=t.length,r=[],n=String.fromCharCode;for(i=0;i<e;i+=1)r.push(n(255&t.charCodeAt(i)));return r.join(\"\")};if(n.open(\"GET\",t,!e),n.overrideMimeType(\"text/plain; charset=x-user-defined\"),!1===e&&(n.onload=function(){200===n.status?r(a(this.responseText)):r(void 0)}),n.send(null),e&&200===n.status)return a(n.responseText)}(t,e,r)}catch(t){}return n}(t,e,r)},t.loadImageFile=t.loadFile}(E.API),function(e){function r(){return(n.html2canvas?Promise.resolve(n.html2canvas):__webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_html2canvas_dist_html2canvas_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! html2canvas */ \"(app-pages-browser)/./node_modules/html2canvas/dist/html2canvas.js\", 23))).catch((function(t){return Promise.reject(new Error(\"Could not load html2canvas: \"+t))})).then((function(t){return t.default?t.default:t}))}function i(){return(n.DOMPurify?Promise.resolve(n.DOMPurify):__webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_jspdf_node_modules_dompurify_dist_purify_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! dompurify */ \"(app-pages-browser)/./node_modules/jspdf/node_modules/dompurify/dist/purify.js\", 23))).catch((function(t){return Promise.reject(new Error(\"Could not load dompurify: \"+t))})).then((function(t){return t.default?t.default:t}))}var a=function(e){var r=(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e);return\"undefined\"===r?\"undefined\":\"string\"===r||e instanceof String?\"string\":\"number\"===r||e instanceof Number?\"number\":\"function\"===r||e instanceof Function?\"function\":e&&e.constructor===Array?\"array\":e&&1===e.nodeType?\"element\":\"object\"===r?\"object\":\"unknown\"},o=function(t,e){var r=document.createElement(t);for(var n in e.className&&(r.className=e.className),e.innerHTML&&e.dompurify&&(r.innerHTML=e.dompurify.sanitize(e.innerHTML)),e.style)r.style[n]=e.style[n];return r},s=function t(e){var r=Object.assign(t.convert(Promise.resolve()),JSON.parse(JSON.stringify(t.template))),n=t.convert(Promise.resolve(),r);return n=(n=n.setProgress(1,t,1,[t])).set(e)};(s.prototype=Object.create(Promise.prototype)).constructor=s,s.convert=function(t,e){return t.__proto__=e||s.prototype,t},s.template={prop:{src:null,container:null,overlay:null,canvas:null,img:null,pdf:null,pageSize:null,callback:function(){}},progress:{val:0,state:null,n:0,stack:[]},opt:{filename:\"file.pdf\",margin:[0,0,0,0],enableLinks:!0,x:0,y:0,html2canvas:{},jsPDF:{},backgroundColor:\"transparent\"}},s.prototype.from=function(t,e){return this.then((function(){switch(e=e||function(t){switch(a(t)){case\"string\":return\"string\";case\"element\":return\"canvas\"===t.nodeName.toLowerCase()?\"canvas\":\"element\";default:return\"unknown\"}}(t)){case\"string\":return this.then(i).then((function(e){return this.set({src:o(\"div\",{innerHTML:t,dompurify:e})})}));case\"element\":return this.set({src:t});case\"canvas\":return this.set({canvas:t});case\"img\":return this.set({img:t});default:return this.error(\"Unknown source type.\")}}))},s.prototype.to=function(t){switch(t){case\"container\":return this.toContainer();case\"canvas\":return this.toCanvas();case\"img\":return this.toImg();case\"pdf\":return this.toPdf();default:return this.error(\"Invalid target.\")}},s.prototype.toContainer=function(){return this.thenList([function(){return this.prop.src||this.error(\"Cannot duplicate - no source HTML.\")},function(){return this.prop.pageSize||this.setPageSize()}]).then((function(){var t={position:\"relative\",display:\"inline-block\",width:(\"number\"!=typeof this.opt.width||isNaN(this.opt.width)||\"number\"!=typeof this.opt.windowWidth||isNaN(this.opt.windowWidth)?Math.max(this.prop.src.clientWidth,this.prop.src.scrollWidth,this.prop.src.offsetWidth):this.opt.windowWidth)+\"px\",left:0,right:0,top:0,margin:\"auto\",backgroundColor:this.opt.backgroundColor},e=function t(e,r){for(var n=3===e.nodeType?document.createTextNode(e.nodeValue):e.cloneNode(!1),i=e.firstChild;i;i=i.nextSibling)!0!==r&&1===i.nodeType&&\"SCRIPT\"===i.nodeName||n.appendChild(t(i,r));return 1===e.nodeType&&(\"CANVAS\"===e.nodeName?(n.width=e.width,n.height=e.height,n.getContext(\"2d\").drawImage(e,0,0)):\"TEXTAREA\"!==e.nodeName&&\"SELECT\"!==e.nodeName||(n.value=e.value),n.addEventListener(\"load\",(function(){n.scrollTop=e.scrollTop,n.scrollLeft=e.scrollLeft}),!0)),n}(this.prop.src,this.opt.html2canvas.javascriptEnabled);\"BODY\"===e.tagName&&(t.height=Math.max(document.body.scrollHeight,document.body.offsetHeight,document.documentElement.clientHeight,document.documentElement.scrollHeight,document.documentElement.offsetHeight)+\"px\"),this.prop.overlay=o(\"div\",{className:\"html2pdf__overlay\",style:{position:\"fixed\",overflow:\"hidden\",zIndex:1e3,left:\"-100000px\",right:0,bottom:0,top:0}}),this.prop.container=o(\"div\",{className:\"html2pdf__container\",style:t}),this.prop.container.appendChild(e),this.prop.container.firstChild.appendChild(o(\"div\",{style:{clear:\"both\",border:\"0 none transparent\",margin:0,padding:0,height:0}})),this.prop.container.style.float=\"none\",this.prop.overlay.appendChild(this.prop.container),document.body.appendChild(this.prop.overlay),this.prop.container.firstChild.style.position=\"relative\",this.prop.container.height=Math.max(this.prop.container.firstChild.clientHeight,this.prop.container.firstChild.scrollHeight,this.prop.container.firstChild.offsetHeight)+\"px\"}))},s.prototype.toCanvas=function(){var t=[function(){return document.body.contains(this.prop.container)||this.toContainer()}];return this.thenList(t).then(r).then((function(t){var e=Object.assign({},this.opt.html2canvas);return delete e.onrendered,t(this.prop.container,e)})).then((function(t){(this.opt.html2canvas.onrendered||function(){})(t),this.prop.canvas=t,document.body.removeChild(this.prop.overlay)}))},s.prototype.toContext2d=function(){var t=[function(){return document.body.contains(this.prop.container)||this.toContainer()}];return this.thenList(t).then(r).then((function(t){var e=this.opt.jsPDF,r=this.opt.fontFaces,n=\"number\"!=typeof this.opt.width||isNaN(this.opt.width)||\"number\"!=typeof this.opt.windowWidth||isNaN(this.opt.windowWidth)?1:this.opt.width/this.opt.windowWidth,i=Object.assign({async:!0,allowTaint:!0,scale:n,scrollX:this.opt.scrollX||0,scrollY:this.opt.scrollY||0,backgroundColor:\"#ffffff\",imageTimeout:15e3,logging:!0,proxy:null,removeContainer:!0,foreignObjectRendering:!1,useCORS:!1},this.opt.html2canvas);if(delete i.onrendered,e.context2d.autoPaging=void 0===this.opt.autoPaging||this.opt.autoPaging,e.context2d.posX=this.opt.x,e.context2d.posY=this.opt.y,e.context2d.margin=this.opt.margin,e.context2d.fontFaces=r,r)for(var a=0;a<r.length;++a){var o=r[a],s=o.src.find((function(t){return\"truetype\"===t.format}));s&&e.addFont(s.url,o.ref.name,o.ref.style)}return i.windowHeight=i.windowHeight||0,i.windowHeight=0==i.windowHeight?Math.max(this.prop.container.clientHeight,this.prop.container.scrollHeight,this.prop.container.offsetHeight):i.windowHeight,e.context2d.save(!0),t(this.prop.container,i)})).then((function(t){this.opt.jsPDF.context2d.restore(!0),(this.opt.html2canvas.onrendered||function(){})(t),this.prop.canvas=t,document.body.removeChild(this.prop.overlay)}))},s.prototype.toImg=function(){return this.thenList([function(){return this.prop.canvas||this.toCanvas()}]).then((function(){var t=this.prop.canvas.toDataURL(\"image/\"+this.opt.image.type,this.opt.image.quality);this.prop.img=document.createElement(\"img\"),this.prop.img.src=t}))},s.prototype.toPdf=function(){return this.thenList([function(){return this.toContext2d()}]).then((function(){this.prop.pdf=this.prop.pdf||this.opt.jsPDF}))},s.prototype.output=function(t,e,r){return\"img\"===(r=r||\"pdf\").toLowerCase()||\"image\"===r.toLowerCase()?this.outputImg(t,e):this.outputPdf(t,e)},s.prototype.outputPdf=function(t,e){return this.thenList([function(){return this.prop.pdf||this.toPdf()}]).then((function(){return this.prop.pdf.output(t,e)}))},s.prototype.outputImg=function(t){return this.thenList([function(){return this.prop.img||this.toImg()}]).then((function(){switch(t){case void 0:case\"img\":return this.prop.img;case\"datauristring\":case\"dataurlstring\":return this.prop.img.src;case\"datauri\":case\"dataurl\":return document.location.href=this.prop.img.src;default:throw'Image output type \"'+t+'\" is not supported.'}}))},s.prototype.save=function(t){return this.thenList([function(){return this.prop.pdf||this.toPdf()}]).set(t?{filename:t}:null).then((function(){this.prop.pdf.save(this.opt.filename)}))},s.prototype.doCallback=function(){return this.thenList([function(){return this.prop.pdf||this.toPdf()}]).then((function(){this.prop.callback(this.prop.pdf)}))},s.prototype.set=function(t){if(\"object\"!==a(t))return this;var e=Object.keys(t||{}).map((function(e){if(e in s.template.prop)return function(){this.prop[e]=t[e]};switch(e){case\"margin\":return this.setMargin.bind(this,t.margin);case\"jsPDF\":return function(){return this.opt.jsPDF=t.jsPDF,this.setPageSize()};case\"pageSize\":return this.setPageSize.bind(this,t.pageSize);default:return function(){this.opt[e]=t[e]}}}),this);return this.then((function(){return this.thenList(e)}))},s.prototype.get=function(t,e){return this.then((function(){var r=t in s.template.prop?this.prop[t]:this.opt[t];return e?e(r):r}))},s.prototype.setMargin=function(t){return this.then((function(){switch(a(t)){case\"number\":t=[t,t,t,t];case\"array\":if(2===t.length&&(t=[t[0],t[1],t[0],t[1]]),4===t.length)break;default:return this.error(\"Invalid margin array.\")}this.opt.margin=t})).then(this.setPageSize)},s.prototype.setPageSize=function(t){function e(t,e){return Math.floor(t*e/72*96)}return this.then((function(){(t=t||E.getPageSize(this.opt.jsPDF)).hasOwnProperty(\"inner\")||(t.inner={width:t.width-this.opt.margin[1]-this.opt.margin[3],height:t.height-this.opt.margin[0]-this.opt.margin[2]},t.inner.px={width:e(t.inner.width,t.k),height:e(t.inner.height,t.k)},t.inner.ratio=t.inner.height/t.inner.width),this.prop.pageSize=t}))},s.prototype.setProgress=function(t,e,r,n){return null!=t&&(this.progress.val=t),null!=e&&(this.progress.state=e),null!=r&&(this.progress.n=r),null!=n&&(this.progress.stack=n),this.progress.ratio=this.progress.val/this.progress.state,this},s.prototype.updateProgress=function(t,e,r,n){return this.setProgress(t?this.progress.val+t:null,e||null,r?this.progress.n+r:null,n?this.progress.stack.concat(n):null)},s.prototype.then=function(t,e){var r=this;return this.thenCore(t,e,(function(t,e){return r.updateProgress(null,null,1,[t]),Promise.prototype.then.call(this,(function(e){return r.updateProgress(null,t),e})).then(t,e).then((function(t){return r.updateProgress(1),t}))}))},s.prototype.thenCore=function(t,e,r){r=r||Promise.prototype.then;t&&(t=t.bind(this)),e&&(e=e.bind(this));var n=-1!==Promise.toString().indexOf(\"[native code]\")&&\"Promise\"===Promise.name?this:s.convert(Object.assign({},this),Promise.prototype),i=r.call(n,t,e);return s.convert(i,this.__proto__)},s.prototype.thenExternal=function(t,e){return Promise.prototype.then.call(this,t,e)},s.prototype.thenList=function(t){var e=this;return t.forEach((function(t){e=e.thenCore(t)})),e},s.prototype.catch=function(t){t&&(t=t.bind(this));var e=Promise.prototype.catch.call(this,t);return s.convert(e,this)},s.prototype.catchExternal=function(t){return Promise.prototype.catch.call(this,t)},s.prototype.error=function(t){return this.then((function(){throw new Error(t)}))},s.prototype.using=s.prototype.set,s.prototype.saveAs=s.prototype.save,s.prototype.export=s.prototype.output,s.prototype.run=s.prototype.then,E.getPageSize=function(e,r,n){if(\"object\"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e)){var i=e;e=i.orientation,r=i.unit||r,n=i.format||n}r=r||\"mm\",n=n||\"a4\",e=(\"\"+(e||\"P\")).toLowerCase();var a,o=(\"\"+n).toLowerCase(),s={a0:[2383.94,3370.39],a1:[1683.78,2383.94],a2:[1190.55,1683.78],a3:[841.89,1190.55],a4:[595.28,841.89],a5:[419.53,595.28],a6:[297.64,419.53],a7:[209.76,297.64],a8:[147.4,209.76],a9:[104.88,147.4],a10:[73.7,104.88],b0:[2834.65,4008.19],b1:[2004.09,2834.65],b2:[1417.32,2004.09],b3:[1000.63,1417.32],b4:[708.66,1000.63],b5:[498.9,708.66],b6:[354.33,498.9],b7:[249.45,354.33],b8:[175.75,249.45],b9:[124.72,175.75],b10:[87.87,124.72],c0:[2599.37,3676.54],c1:[1836.85,2599.37],c2:[1298.27,1836.85],c3:[918.43,1298.27],c4:[649.13,918.43],c5:[459.21,649.13],c6:[323.15,459.21],c7:[229.61,323.15],c8:[161.57,229.61],c9:[113.39,161.57],c10:[79.37,113.39],dl:[311.81,623.62],letter:[612,792],\"government-letter\":[576,756],legal:[612,1008],\"junior-legal\":[576,360],ledger:[1224,792],tabloid:[792,1224],\"credit-card\":[153,243]};switch(r){case\"pt\":a=1;break;case\"mm\":a=72/25.4;break;case\"cm\":a=72/2.54;break;case\"in\":a=72;break;case\"px\":a=.75;break;case\"pc\":case\"em\":a=12;break;case\"ex\":a=6;break;default:throw\"Invalid unit: \"+r}var c,u=0,h=0;if(s.hasOwnProperty(o))u=s[o][1]/a,h=s[o][0]/a;else try{u=n[1],h=n[0]}catch(t){throw new Error(\"Invalid format: \"+n)}if(\"p\"===e||\"portrait\"===e)e=\"p\",h>u&&(c=h,h=u,u=c);else{if(\"l\"!==e&&\"landscape\"!==e)throw\"Invalid orientation: \"+e;e=\"l\",u>h&&(c=h,h=u,u=c)}return{width:h,height:u,unit:r,k:a,orientation:e}},e.html=function(t,e){(e=e||{}).callback=e.callback||function(){},e.html2canvas=e.html2canvas||{},e.html2canvas.canvas=e.html2canvas.canvas||this.canvas,e.jsPDF=e.jsPDF||this,e.fontFaces=e.fontFaces?e.fontFaces.map(jt):null;var r=new s(e);return e.worker?r:r.from(t).doCallback()}}(E.API),E.API.addJS=function(t){return Ht=t,this.internal.events.subscribe(\"postPutResources\",(function(){Ut=this.internal.newObject(),this.internal.out(\"<<\"),this.internal.out(\"/Names [(EmbeddedJS) \"+(Ut+1)+\" 0 R]\"),this.internal.out(\">>\"),this.internal.out(\"endobj\"),zt=this.internal.newObject(),this.internal.out(\"<<\"),this.internal.out(\"/S /JavaScript\"),this.internal.out(\"/JS (\"+Ht+\")\"),this.internal.out(\">>\"),this.internal.out(\"endobj\")})),this.internal.events.subscribe(\"putCatalog\",(function(){void 0!==Ut&&void 0!==zt&&this.internal.out(\"/Names <</JavaScript \"+Ut+\" 0 R>>\")})),this},\n/**\n * @license\n * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */\nfunction(t){var e;t.events.push([\"postPutResources\",function(){var t=this,r=/^(\\d+) 0 obj$/;if(this.outline.root.children.length>0)for(var n=t.outline.render().split(/\\r\\n/),i=0;i<n.length;i++){var a=n[i],o=r.exec(a);if(null!=o){var s=o[1];t.internal.newObjectDeferredBegin(s,!1)}t.internal.write(a)}if(this.outline.createNamedDestinations){var c=this.internal.pages.length,u=[];for(i=0;i<c;i++){var h=t.internal.newObject();u.push(h);var l=t.internal.getPageInfo(i+1);t.internal.write(\"<< /D[\"+l.objId+\" 0 R /XYZ null null null]>> endobj\")}var f=t.internal.newObject();t.internal.write(\"<< /Names [ \");for(i=0;i<u.length;i++)t.internal.write(\"(page_\"+(i+1)+\")\"+u[i]+\" 0 R\");t.internal.write(\" ] >>\",\"endobj\"),e=t.internal.newObject(),t.internal.write(\"<< /Dests \"+f+\" 0 R\"),t.internal.write(\">>\",\"endobj\")}}]),t.events.push([\"putCatalog\",function(){this.outline.root.children.length>0&&(this.internal.write(\"/Outlines\",this.outline.makeRef(this.outline.root)),this.outline.createNamedDestinations&&this.internal.write(\"/Names \"+e+\" 0 R\"))}]),t.events.push([\"initialized\",function(){var t=this;t.outline={createNamedDestinations:!1,root:{children:[]}},t.outline.add=function(t,e,r){var n={title:e,options:r,children:[]};return null==t&&(t=this.root),t.children.push(n),n},t.outline.render=function(){return this.ctx={},this.ctx.val=\"\",this.ctx.pdf=t,this.genIds_r(this.root),this.renderRoot(this.root),this.renderItems(this.root),this.ctx.val},t.outline.genIds_r=function(e){e.id=t.internal.newObjectDeferred();for(var r=0;r<e.children.length;r++)this.genIds_r(e.children[r])},t.outline.renderRoot=function(t){this.objStart(t),this.line(\"/Type /Outlines\"),t.children.length>0&&(this.line(\"/First \"+this.makeRef(t.children[0])),this.line(\"/Last \"+this.makeRef(t.children[t.children.length-1]))),this.line(\"/Count \"+this.count_r({count:0},t)),this.objEnd()},t.outline.renderItems=function(e){for(var r=this.ctx.pdf.internal.getVerticalCoordinateString,n=0;n<e.children.length;n++){var i=e.children[n];this.objStart(i),this.line(\"/Title \"+this.makeString(i.title)),this.line(\"/Parent \"+this.makeRef(e)),n>0&&this.line(\"/Prev \"+this.makeRef(e.children[n-1])),n<e.children.length-1&&this.line(\"/Next \"+this.makeRef(e.children[n+1])),i.children.length>0&&(this.line(\"/First \"+this.makeRef(i.children[0])),this.line(\"/Last \"+this.makeRef(i.children[i.children.length-1])));var a=this.count=this.count_r({count:0},i);if(a>0&&this.line(\"/Count \"+a),i.options&&i.options.pageNumber){var o=t.internal.getPageInfo(i.options.pageNumber);this.line(\"/Dest [\"+o.objId+\" 0 R /XYZ 0 \"+r(0)+\" 0]\")}this.objEnd()}for(var s=0;s<e.children.length;s++)this.renderItems(e.children[s])},t.outline.line=function(t){this.ctx.val+=t+\"\\r\\n\"},t.outline.makeRef=function(t){return t.id+\" 0 R\"},t.outline.makeString=function(e){return\"(\"+t.internal.pdfEscape(e)+\")\"},t.outline.objStart=function(t){this.ctx.val+=\"\\r\\n\"+t.id+\" 0 obj\\r\\n<<\\r\\n\"},t.outline.objEnd=function(){this.ctx.val+=\">> \\r\\nendobj\\r\\n\"},t.outline.count_r=function(t,e){for(var r=0;r<e.children.length;r++)t.count++,this.count_r(t,e.children[r]);return t.count}}])}(E.API),\n/**\n * @license\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */\nfunction(t){var e=[192,193,194,195,196,197,198,199];t.processJPEG=function(t,r,n,i,a,o){var s,c=this.decode.DCT_DECODE,u=null;if(\"string\"==typeof t||this.__addimage__.isArrayBuffer(t)||this.__addimage__.isArrayBufferView(t)){switch(t=a||t,t=this.__addimage__.isArrayBuffer(t)?new Uint8Array(t):t,(s=function(t){for(var r,n=256*t.charCodeAt(4)+t.charCodeAt(5),i=t.length,a={width:0,height:0,numcomponents:1},o=4;o<i;o+=2){if(o+=n,-1!==e.indexOf(t.charCodeAt(o+1))){r=256*t.charCodeAt(o+5)+t.charCodeAt(o+6),a={width:256*t.charCodeAt(o+7)+t.charCodeAt(o+8),height:r,numcomponents:t.charCodeAt(o+9)};break}n=256*t.charCodeAt(o+2)+t.charCodeAt(o+3)}return a}(t=this.__addimage__.isArrayBufferView(t)?this.__addimage__.arrayBufferToBinaryString(t):t)).numcomponents){case 1:o=this.color_spaces.DEVICE_GRAY;break;case 4:o=this.color_spaces.DEVICE_CMYK;break;case 3:o=this.color_spaces.DEVICE_RGB}u={data:t,width:s.width,height:s.height,colorSpace:o,bitsPerComponent:8,filter:c,index:r,alias:n}}return u}}(E.API);var Vt,Gt,Yt,Jt,Xt,Kt=function(){var t,e,i;function a(t){var e,r,n,i,a,o,s,c,u,h,l,f,d,p;for(this.data=t,this.pos=8,this.palette=[],this.imgData=[],this.transparency={},this.animation=null,this.text={},o=null;;){switch(e=this.readUInt32(),u=function(){var t,e;for(e=[],t=0;t<4;++t)e.push(String.fromCharCode(this.data[this.pos++]));return e}.call(this).join(\"\")){case\"IHDR\":this.width=this.readUInt32(),this.height=this.readUInt32(),this.bits=this.data[this.pos++],this.colorType=this.data[this.pos++],this.compressionMethod=this.data[this.pos++],this.filterMethod=this.data[this.pos++],this.interlaceMethod=this.data[this.pos++];break;case\"acTL\":this.animation={numFrames:this.readUInt32(),numPlays:this.readUInt32()||1/0,frames:[]};break;case\"PLTE\":this.palette=this.read(e);break;case\"fcTL\":o&&this.animation.frames.push(o),this.pos+=4,o={width:this.readUInt32(),height:this.readUInt32(),xOffset:this.readUInt32(),yOffset:this.readUInt32()},a=this.readUInt16(),i=this.readUInt16()||100,o.delay=1e3*a/i,o.disposeOp=this.data[this.pos++],o.blendOp=this.data[this.pos++],o.data=[];break;case\"IDAT\":case\"fdAT\":for(\"fdAT\"===u&&(this.pos+=4,e-=4),t=(null!=o?o.data:void 0)||this.imgData,f=0;0<=e?f<e:f>e;0<=e?++f:--f)t.push(this.data[this.pos++]);break;case\"tRNS\":switch(this.transparency={},this.colorType){case 3:if(n=this.palette.length/3,this.transparency.indexed=this.read(e),this.transparency.indexed.length>n)throw new Error(\"More transparent colors than palette size\");if((h=n-this.transparency.indexed.length)>0)for(d=0;0<=h?d<h:d>h;0<=h?++d:--d)this.transparency.indexed.push(255);break;case 0:this.transparency.grayscale=this.read(e)[0];break;case 2:this.transparency.rgb=this.read(e)}break;case\"tEXt\":s=(l=this.read(e)).indexOf(0),c=String.fromCharCode.apply(String,l.slice(0,s)),this.text[c]=String.fromCharCode.apply(String,l.slice(s+1));break;case\"IEND\":return o&&this.animation.frames.push(o),this.colors=function(){switch(this.colorType){case 0:case 3:case 4:return 1;case 2:case 6:return 3}}.call(this),this.hasAlphaChannel=4===(p=this.colorType)||6===p,r=this.colors+(this.hasAlphaChannel?1:0),this.pixelBitlength=this.bits*r,this.colorSpace=function(){switch(this.colors){case 1:return\"DeviceGray\";case 3:return\"DeviceRGB\"}}.call(this),void(this.imgData=new Uint8Array(this.imgData));default:this.pos+=e}if(this.pos+=4,this.pos>this.data.length)throw new Error(\"Incomplete or corrupt PNG file\")}}a.prototype.read=function(t){var e,r;for(r=[],e=0;0<=t?e<t:e>t;0<=t?++e:--e)r.push(this.data[this.pos++]);return r},a.prototype.readUInt32=function(){return this.data[this.pos++]<<24|this.data[this.pos++]<<16|this.data[this.pos++]<<8|this.data[this.pos++]},a.prototype.readUInt16=function(){return this.data[this.pos++]<<8|this.data[this.pos++]},a.prototype.decodePixels=function(t){var e=this.pixelBitlength/8,n=new Uint8Array(this.width*this.height*e),i=0,a=this;if(null==t&&(t=this.imgData),0===t.length)return new Uint8Array(0);function o(r,o,s,c){var u,h,l,f,d,p,g,m,v,b,y,w,N,L,A,x,S,_,P,k,I,F=Math.ceil((a.width-r)/s),C=Math.ceil((a.height-o)/c),j=a.width==F&&a.height==C;for(L=e*F,w=j?n:new Uint8Array(L*C),p=t.length,N=0,h=0;N<C&&i<p;){switch(t[i++]){case 0:for(f=S=0;S<L;f=S+=1)w[h++]=t[i++];break;case 1:for(f=_=0;_<L;f=_+=1)u=t[i++],d=f<e?0:w[h-e],w[h++]=(u+d)%256;break;case 2:for(f=P=0;P<L;f=P+=1)u=t[i++],l=(f-f%e)/e,A=N&&w[(N-1)*L+l*e+f%e],w[h++]=(A+u)%256;break;case 3:for(f=k=0;k<L;f=k+=1)u=t[i++],l=(f-f%e)/e,d=f<e?0:w[h-e],A=N&&w[(N-1)*L+l*e+f%e],w[h++]=(u+Math.floor((d+A)/2))%256;break;case 4:for(f=I=0;I<L;f=I+=1)u=t[i++],l=(f-f%e)/e,d=f<e?0:w[h-e],0===N?A=x=0:(A=w[(N-1)*L+l*e+f%e],x=l&&w[(N-1)*L+(l-1)*e+f%e]),g=d+A-x,m=Math.abs(g-d),b=Math.abs(g-A),y=Math.abs(g-x),v=m<=b&&m<=y?d:b<=y?A:x,w[h++]=(u+v)%256;break;default:throw new Error(\"Invalid filter algorithm: \"+t[i-1])}if(!j){var O=((o+N*c)*a.width+r)*e,B=N*L;for(f=0;f<F;f+=1){for(var M=0;M<e;M+=1)n[O++]=w[B++];O+=(s-1)*e}}N++}}return t=(0,fflate__WEBPACK_IMPORTED_MODULE_1__.unzlibSync)(t),1==a.interlaceMethod?(o(0,0,8,8),o(4,0,8,8),o(0,4,4,8),o(2,0,4,4),o(0,2,2,4),o(1,0,2,2),o(0,1,1,2)):o(0,0,1,1),n},a.prototype.decodePalette=function(){var t,e,r,n,i,a,o,s,c;for(r=this.palette,a=this.transparency.indexed||[],i=new Uint8Array((a.length||0)+r.length),n=0,t=0,e=o=0,s=r.length;o<s;e=o+=3)i[n++]=r[e],i[n++]=r[e+1],i[n++]=r[e+2],i[n++]=null!=(c=a[t++])?c:255;return i},a.prototype.copyToImageData=function(t,e){var r,n,i,a,o,s,c,u,h,l,f;if(n=this.colors,h=null,r=this.hasAlphaChannel,this.palette.length&&(h=null!=(f=this._decodedPalette)?f:this._decodedPalette=this.decodePalette(),n=4,r=!0),u=(i=t.data||t).length,o=h||e,a=s=0,1===n)for(;a<u;)c=h?4*e[a/4]:s,l=o[c++],i[a++]=l,i[a++]=l,i[a++]=l,i[a++]=r?o[c++]:255,s=c;else for(;a<u;)c=h?4*e[a/4]:s,i[a++]=o[c++],i[a++]=o[c++],i[a++]=o[c++],i[a++]=r?o[c++]:255,s=c},a.prototype.decode=function(){var t;return t=new Uint8Array(this.width*this.height*4),this.copyToImageData(t,this.decodePixels()),t};var o=function(){if(\"[object Window]\"===Object.prototype.toString.call(n)){try{e=n.document.createElement(\"canvas\"),i=e.getContext(\"2d\")}catch(t){return!1}return!0}return!1};return o(),t=function(t){var r;if(!0===o())return i.width=t.width,i.height=t.height,i.clearRect(0,0,t.width,t.height),i.putImageData(t,0,0),(r=new Image).src=e.toDataURL(),r;throw new Error(\"This method requires a Browser with Canvas-capability.\")},a.prototype.decodeFrames=function(e){var r,n,i,a,o,s,c,u;if(this.animation){for(u=[],n=o=0,s=(c=this.animation.frames).length;o<s;n=++o)r=c[n],i=e.createImageData(r.width,r.height),a=this.decodePixels(new Uint8Array(r.data)),this.copyToImageData(i,a),r.imageData=i,u.push(r.image=t(i));return u}},a.prototype.renderFrame=function(t,e){var r,n,i;return r=(n=this.animation.frames)[e],i=n[e-1],0===e&&t.clearRect(0,0,this.width,this.height),1===(null!=i?i.disposeOp:void 0)?t.clearRect(i.xOffset,i.yOffset,i.width,i.height):2===(null!=i?i.disposeOp:void 0)&&t.putImageData(i.imageData,i.xOffset,i.yOffset),0===r.blendOp&&t.clearRect(r.xOffset,r.yOffset,r.width,r.height),t.drawImage(r.image,r.xOffset,r.yOffset)},a.prototype.animate=function(t){var e,r,n,i,a,o,s=this;return r=0,o=this.animation,i=o.numFrames,n=o.frames,a=o.numPlays,(e=function(){var o,c;if(o=r++%i,c=n[o],s.renderFrame(t,o),i>1&&r/i<a)return s.animation._timeout=setTimeout(e,c.delay)})()},a.prototype.stopAnimation=function(){var t;return clearTimeout(null!=(t=this.animation)?t._timeout:void 0)},a.prototype.render=function(t){var e,r;return t._png&&t._png.stopAnimation(),t._png=this,t.width=this.width,t.height=this.height,e=t.getContext(\"2d\"),this.animation?(this.decodeFrames(e),this.animate(e)):(r=e.createImageData(this.width,this.height),this.copyToImageData(r,this.decodePixels()),e.putImageData(r,0,0))},a}();\n/**\n * @license\n *\n * Copyright (c) 2014 James Robb, https://github.com/jamesbrobb\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n * ====================================================================\n */\n/**\n * @license\n * (c) Dean McNamee <dean@gmail.com>, 2013.\n *\n * https://github.com/deanm/omggif\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n *\n * omggif is a JavaScript implementation of a GIF 89a encoder and decoder,\n * including animation and compression.  It does not rely on any specific\n * underlying system, so should run in the browser, Node, or Plask.\n */\nfunction Zt(t){var e=0;if(71!==t[e++]||73!==t[e++]||70!==t[e++]||56!==t[e++]||56!=(t[e++]+1&253)||97!==t[e++])throw new Error(\"Invalid GIF 87a/89a header.\");var r=t[e++]|t[e++]<<8,n=t[e++]|t[e++]<<8,i=t[e++],a=i>>7,o=1<<(7&i)+1;t[e++];t[e++];var s=null,c=null;a&&(s=e,c=o,e+=3*o);var u=!0,h=[],l=0,f=null,d=0,p=null;for(this.width=r,this.height=n;u&&e<t.length;)switch(t[e++]){case 33:switch(t[e++]){case 255:if(11!==t[e]||78==t[e+1]&&69==t[e+2]&&84==t[e+3]&&83==t[e+4]&&67==t[e+5]&&65==t[e+6]&&80==t[e+7]&&69==t[e+8]&&50==t[e+9]&&46==t[e+10]&&48==t[e+11]&&3==t[e+12]&&1==t[e+13]&&0==t[e+16])e+=14,p=t[e++]|t[e++]<<8,e++;else for(e+=12;;){if(!((P=t[e++])>=0))throw Error(\"Invalid block size\");if(0===P)break;e+=P}break;case 249:if(4!==t[e++]||0!==t[e+4])throw new Error(\"Invalid graphics extension block.\");var g=t[e++];l=t[e++]|t[e++]<<8,f=t[e++],0==(1&g)&&(f=null),d=g>>2&7,e++;break;case 254:for(;;){if(!((P=t[e++])>=0))throw Error(\"Invalid block size\");if(0===P)break;e+=P}break;default:throw new Error(\"Unknown graphic control label: 0x\"+t[e-1].toString(16))}break;case 44:var m=t[e++]|t[e++]<<8,v=t[e++]|t[e++]<<8,b=t[e++]|t[e++]<<8,y=t[e++]|t[e++]<<8,w=t[e++],N=w>>6&1,L=1<<(7&w)+1,A=s,x=c,S=!1;if(w>>7){S=!0;A=e,x=L,e+=3*L}var _=e;for(e++;;){var P;if(!((P=t[e++])>=0))throw Error(\"Invalid block size\");if(0===P)break;e+=P}h.push({x:m,y:v,width:b,height:y,has_local_palette:S,palette_offset:A,palette_size:x,data_offset:_,data_length:e-_,transparent_index:f,interlaced:!!N,delay:l,disposal:d});break;case 59:u=!1;break;default:throw new Error(\"Unknown gif block: 0x\"+t[e-1].toString(16))}this.numFrames=function(){return h.length},this.loopCount=function(){return p},this.frameInfo=function(t){if(t<0||t>=h.length)throw new Error(\"Frame index out of range.\");return h[t]},this.decodeAndBlitFrameBGRA=function(e,n){var i=this.frameInfo(e),a=i.width*i.height,o=new Uint8Array(a);$t(t,i.data_offset,o,a);var s=i.palette_offset,c=i.transparent_index;null===c&&(c=256);var u=i.width,h=r-u,l=u,f=4*(i.y*r+i.x),d=4*((i.y+i.height)*r+i.x),p=f,g=4*h;!0===i.interlaced&&(g+=4*r*7);for(var m=8,v=0,b=o.length;v<b;++v){var y=o[v];if(0===l&&(l=u,(p+=g)>=d&&(g=4*h+4*r*(m-1),p=f+(u+h)*(m<<1),m>>=1)),y===c)p+=4;else{var w=t[s+3*y],N=t[s+3*y+1],L=t[s+3*y+2];n[p++]=L,n[p++]=N,n[p++]=w,n[p++]=255}--l}},this.decodeAndBlitFrameRGBA=function(e,n){var i=this.frameInfo(e),a=i.width*i.height,o=new Uint8Array(a);$t(t,i.data_offset,o,a);var s=i.palette_offset,c=i.transparent_index;null===c&&(c=256);var u=i.width,h=r-u,l=u,f=4*(i.y*r+i.x),d=4*((i.y+i.height)*r+i.x),p=f,g=4*h;!0===i.interlaced&&(g+=4*r*7);for(var m=8,v=0,b=o.length;v<b;++v){var y=o[v];if(0===l&&(l=u,(p+=g)>=d&&(g=4*h+4*r*(m-1),p=f+(u+h)*(m<<1),m>>=1)),y===c)p+=4;else{var w=t[s+3*y],N=t[s+3*y+1],L=t[s+3*y+2];n[p++]=w,n[p++]=N,n[p++]=L,n[p++]=255}--l}}}function $t(t,e,r,n){for(var i=t[e++],o=1<<i,s=o+1,c=s+1,u=i+1,h=(1<<u)-1,l=0,f=0,d=0,p=t[e++],g=new Int32Array(4096),m=null;;){for(;l<16&&0!==p;)f|=t[e++]<<l,l+=8,1===p?p=t[e++]:--p;if(l<u)break;var v=f&h;if(f>>=u,l-=u,v!==o){if(v===s)break;for(var b=v<c?v:m,y=0,w=b;w>o;)w=g[w]>>8,++y;var N=w;if(d+y+(b!==v?1:0)>n)return void a.log(\"Warning, gif stream longer than expected.\");r[d++]=N;var L=d+=y;for(b!==v&&(r[d++]=N),w=b;y--;)w=g[w],r[--L]=255&w,w>>=8;null!==m&&c<4096&&(g[c++]=m<<8|N,c>=h+1&&u<12&&(++u,h=h<<1|1)),m=v}else c=s+1,h=(1<<(u=i+1))-1,m=null}return d!==n&&a.log(\"Warning, gif stream shorter than expected.\"),r}\n/**\n * @license\n  Copyright (c) 2008, Adobe Systems Incorporated\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without \n  modification, are permitted provided that the following conditions are\n  met:\n\n  * Redistributions of source code must retain the above copyright notice, \n    this list of conditions and the following disclaimer.\n  \n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the \n    documentation and/or other materials provided with the distribution.\n  \n  * Neither the name of Adobe Systems Incorporated nor the names of its \n    contributors may be used to endorse or promote products derived from \n    this software without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n  IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR \n  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/function Qt(t){var e,r,n,i,a,o=Math.floor,s=new Array(64),c=new Array(64),u=new Array(64),h=new Array(64),l=new Array(65535),f=new Array(65535),d=new Array(64),p=new Array(64),g=[],m=0,v=7,b=new Array(64),y=new Array(64),w=new Array(64),N=new Array(256),L=new Array(2048),A=[0,1,5,6,14,15,27,28,2,4,7,13,16,26,29,42,3,8,12,17,25,30,41,43,9,11,18,24,31,40,44,53,10,19,23,32,39,45,52,54,20,22,33,38,46,51,55,60,21,34,37,47,50,56,59,61,35,36,48,49,57,58,62,63],x=[0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0],S=[0,1,2,3,4,5,6,7,8,9,10,11],_=[0,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,125],P=[1,2,3,0,4,17,5,18,33,49,65,6,19,81,97,7,34,113,20,50,129,145,161,8,35,66,177,193,21,82,209,240,36,51,98,114,130,9,10,22,23,24,25,26,37,38,39,40,41,42,52,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,225,226,227,228,229,230,231,232,233,234,241,242,243,244,245,246,247,248,249,250],k=[0,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0],I=[0,1,2,3,4,5,6,7,8,9,10,11],F=[0,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,119],C=[0,1,2,3,17,4,5,33,49,6,18,65,81,7,97,113,19,34,50,129,8,20,66,145,161,177,193,9,35,51,82,240,21,98,114,209,10,22,36,52,225,37,241,23,24,25,26,38,39,40,41,42,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,130,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,226,227,228,229,230,231,232,233,234,242,243,244,245,246,247,248,249,250];function j(t,e){for(var r=0,n=0,i=new Array,a=1;a<=16;a++){for(var o=1;o<=t[a];o++)i[e[n]]=[],i[e[n]][0]=r,i[e[n]][1]=a,n++,r++;r*=2}return i}function O(t){for(var e=t[0],r=t[1]-1;r>=0;)e&1<<r&&(m|=1<<v),r--,--v<0&&(255==m?(B(255),B(0)):B(m),v=7,m=0)}function B(t){g.push(t)}function M(t){B(t>>8&255),B(255&t)}function E(t,e,r,n,i){for(var a,o=i[0],s=i[240],c=function(t,e){var r,n,i,a,o,s,c,u,h,l,f=0;for(h=0;h<8;++h){r=t[f],n=t[f+1],i=t[f+2],a=t[f+3],o=t[f+4],s=t[f+5],c=t[f+6];var p=r+(u=t[f+7]),g=r-u,m=n+c,v=n-c,b=i+s,y=i-s,w=a+o,N=a-o,L=p+w,A=p-w,x=m+b,S=m-b;t[f]=L+x,t[f+4]=L-x;var _=.707106781*(S+A);t[f+2]=A+_,t[f+6]=A-_;var P=.382683433*((L=N+y)-(S=v+g)),k=.5411961*L+P,I=1.306562965*S+P,F=.707106781*(x=y+v),C=g+F,j=g-F;t[f+5]=j+k,t[f+3]=j-k,t[f+1]=C+I,t[f+7]=C-I,f+=8}for(f=0,h=0;h<8;++h){r=t[f],n=t[f+8],i=t[f+16],a=t[f+24],o=t[f+32],s=t[f+40],c=t[f+48];var O=r+(u=t[f+56]),B=r-u,M=n+c,E=n-c,q=i+s,D=i-s,R=a+o,T=a-o,U=O+R,z=O-R,H=M+q,W=M-q;t[f]=U+H,t[f+32]=U-H;var V=.707106781*(W+z);t[f+16]=z+V,t[f+48]=z-V;var G=.382683433*((U=T+D)-(W=E+B)),Y=.5411961*U+G,J=1.306562965*W+G,X=.707106781*(H=D+E),K=B+X,Z=B-X;t[f+40]=Z+Y,t[f+24]=Z-Y,t[f+8]=K+J,t[f+56]=K-J,f++}for(h=0;h<64;++h)l=t[h]*e[h],d[h]=l>0?l+.5|0:l-.5|0;return d}(t,e),u=0;u<64;++u)p[A[u]]=c[u];var h=p[0]-r;r=p[0],0==h?O(n[0]):(O(n[f[a=32767+h]]),O(l[a]));for(var g=63;g>0&&0==p[g];)g--;if(0==g)return O(o),r;for(var m,v=1;v<=g;){for(var b=v;0==p[v]&&v<=g;)++v;var y=v-b;if(y>=16){m=y>>4;for(var w=1;w<=m;++w)O(s);y&=15}a=32767+p[v],O(i[(y<<4)+f[a]]),O(l[a]),v++}return 63!=g&&O(o),r}function q(t){(t=Math.min(Math.max(t,1),100),a!=t)&&(!function(t){for(var e=[16,11,10,16,24,40,51,61,12,12,14,19,26,58,60,55,14,13,16,24,40,57,69,56,14,17,22,29,51,87,80,62,18,22,37,56,68,109,103,77,24,35,55,64,81,104,113,92,49,64,78,87,103,121,120,101,72,92,95,98,112,100,103,99],r=0;r<64;r++){var n=o((e[r]*t+50)/100);n=Math.min(Math.max(n,1),255),s[A[r]]=n}for(var i=[17,18,24,47,99,99,99,99,18,21,26,66,99,99,99,99,24,26,56,99,99,99,99,99,47,66,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99],a=0;a<64;a++){var l=o((i[a]*t+50)/100);l=Math.min(Math.max(l,1),255),c[A[a]]=l}for(var f=[1,1.387039845,1.306562965,1.175875602,1,.785694958,.5411961,.275899379],d=0,p=0;p<8;p++)for(var g=0;g<8;g++)u[d]=1/(s[A[d]]*f[p]*f[g]*8),h[d]=1/(c[A[d]]*f[p]*f[g]*8),d++}(t<50?Math.floor(5e3/t):Math.floor(200-2*t)),a=t)}this.encode=function(t,a){a&&q(a),g=new Array,m=0,v=7,M(65496),M(65504),M(16),B(74),B(70),B(73),B(70),B(0),B(1),B(1),B(0),M(1),M(1),B(0),B(0),function(){M(65499),M(132),B(0);for(var t=0;t<64;t++)B(s[t]);B(1);for(var e=0;e<64;e++)B(c[e])}(),function(t,e){M(65472),M(17),B(8),M(e),M(t),B(3),B(1),B(17),B(0),B(2),B(17),B(1),B(3),B(17),B(1)}(t.width,t.height),function(){M(65476),M(418),B(0);for(var t=0;t<16;t++)B(x[t+1]);for(var e=0;e<=11;e++)B(S[e]);B(16);for(var r=0;r<16;r++)B(_[r+1]);for(var n=0;n<=161;n++)B(P[n]);B(1);for(var i=0;i<16;i++)B(k[i+1]);for(var a=0;a<=11;a++)B(I[a]);B(17);for(var o=0;o<16;o++)B(F[o+1]);for(var s=0;s<=161;s++)B(C[s])}(),M(65498),M(12),B(3),B(1),B(0),B(2),B(17),B(3),B(17),B(0),B(63),B(0);var o=0,l=0,f=0;m=0,v=7,this.encode.displayName=\"_encode_\";for(var d,p,N,A,j,D,R,T,U,z=t.data,H=t.width,W=t.height,V=4*H,G=0;G<W;){for(d=0;d<V;){for(j=V*G+d,R=-1,T=0,U=0;U<64;U++)D=j+(T=U>>3)*V+(R=4*(7&U)),G+T>=W&&(D-=V*(G+1+T-W)),d+R>=V&&(D-=d+R-V+4),p=z[D++],N=z[D++],A=z[D++],b[U]=(L[p]+L[N+256>>0]+L[A+512>>0]>>16)-128,y[U]=(L[p+768>>0]+L[N+1024>>0]+L[A+1280>>0]>>16)-128,w[U]=(L[p+1280>>0]+L[N+1536>>0]+L[A+1792>>0]>>16)-128;o=E(b,u,o,e,n),l=E(y,h,l,r,i),f=E(w,h,f,r,i),d+=32}G+=8}if(v>=0){var Y=[];Y[1]=v+1,Y[0]=(1<<v+1)-1,O(Y)}return M(65497),new Uint8Array(g)},t=t||50,function(){for(var t=String.fromCharCode,e=0;e<256;e++)N[e]=t(e)}(),e=j(x,S),r=j(k,I),n=j(_,P),i=j(F,C),function(){for(var t=1,e=2,r=1;r<=15;r++){for(var n=t;n<e;n++)f[32767+n]=r,l[32767+n]=[],l[32767+n][1]=r,l[32767+n][0]=n;for(var i=-(e-1);i<=-t;i++)f[32767+i]=r,l[32767+i]=[],l[32767+i][1]=r,l[32767+i][0]=e-1+i;t<<=1,e<<=1}}(),function(){for(var t=0;t<256;t++)L[t]=19595*t,L[t+256>>0]=38470*t,L[t+512>>0]=7471*t+32768,L[t+768>>0]=-11059*t,L[t+1024>>0]=-21709*t,L[t+1280>>0]=32768*t+8421375,L[t+1536>>0]=-27439*t,L[t+1792>>0]=-5329*t}(),q(t)}\n/**\n * @license\n * Copyright (c) 2017 Aras Abbasi\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */function te(t,e){if(this.pos=0,this.buffer=t,this.datav=new DataView(t.buffer),this.is_with_alpha=!!e,this.bottom_up=!0,this.flag=String.fromCharCode(this.buffer[0])+String.fromCharCode(this.buffer[1]),this.pos+=2,-1===[\"BM\",\"BA\",\"CI\",\"CP\",\"IC\",\"PT\"].indexOf(this.flag))throw new Error(\"Invalid BMP File\");this.parseHeader(),this.parseBGR()}function ee(t){function e(t){if(!t)throw Error(\"assert :P\")}function r(t,e,r){for(var n=0;4>n;n++)if(t[e+n]!=r.charCodeAt(n))return!0;return!1}function n(t,e,r,n,i){for(var a=0;a<i;a++)t[e+a]=r[n+a]}function i(t,e,r,n){for(var i=0;i<n;i++)t[e+i]=r}function a(t){return new Int32Array(t)}function o(t,e){for(var r=[],n=0;n<t;n++)r.push(new e);return r}function s(t,e){var r=[];return function t(r,n,i){for(var a=i[n],o=0;o<a&&(r.push(i.length>n+1?[]:new e),!(i.length<n+1));o++)t(r[o],n+1,i)}(r,0,t),r}var c=function(){var t=this;function c(t,e){for(var r=1<<e-1>>>0;t&r;)r>>>=1;return r?(t&r-1)+r:t}function u(t,r,n,i,a){e(!(i%n));do{t[r+(i-=n)]=a}while(0<i)}function h(t,r,n,i,o){if(e(2328>=o),512>=o)var s=a(512);else if(null==(s=a(o)))return 0;return function(t,r,n,i,o,s){var h,f,d=r,p=1<<n,g=a(16),m=a(16);for(e(0!=o),e(null!=i),e(null!=t),e(0<n),f=0;f<o;++f){if(15<i[f])return 0;++g[i[f]]}if(g[0]==o)return 0;for(m[1]=0,h=1;15>h;++h){if(g[h]>1<<h)return 0;m[h+1]=m[h]+g[h]}for(f=0;f<o;++f)h=i[f],0<i[f]&&(s[m[h]++]=f);if(1==m[15])return(i=new l).g=0,i.value=s[0],u(t,d,1,p,i),p;var v,b=-1,y=p-1,w=0,N=1,L=1,A=1<<n;for(f=0,h=1,o=2;h<=n;++h,o<<=1){if(N+=L<<=1,0>(L-=g[h]))return 0;for(;0<g[h];--g[h])(i=new l).g=h,i.value=s[f++],u(t,d+w,o,A,i),w=c(w,h)}for(h=n+1,o=2;15>=h;++h,o<<=1){if(N+=L<<=1,0>(L-=g[h]))return 0;for(;0<g[h];--g[h]){if(i=new l,(w&y)!=b){for(d+=A,v=1<<(b=h)-n;15>b&&!(0>=(v-=g[b]));)++b,v<<=1;p+=A=1<<(v=b-n),t[r+(b=w&y)].g=v+n,t[r+b].value=d-r-b}i.g=h-n,i.value=s[f++],u(t,d+(w>>n),o,A,i),w=c(w,h)}}return N!=2*m[15]-1?0:p}(t,r,n,i,o,s)}function l(){this.value=this.g=0}function f(){this.value=this.g=0}function d(){this.G=o(5,l),this.H=a(5),this.jc=this.Qb=this.qb=this.nd=0,this.pd=o(Dr,f)}function p(t,r,n,i){e(null!=t),e(null!=r),e(2147483648>i),t.Ca=254,t.I=0,t.b=-8,t.Ka=0,t.oa=r,t.pa=n,t.Jd=r,t.Yc=n+i,t.Zc=4<=i?n+i-4+1:n,_(t)}function g(t,e){for(var r=0;0<e--;)r|=k(t,128)<<e;return r}function m(t,e){var r=g(t,e);return P(t)?-r:r}function v(t,r,n,i){var a,o=0;for(e(null!=t),e(null!=r),e(4294967288>i),t.Sb=i,t.Ra=0,t.u=0,t.h=0,4<i&&(i=4),a=0;a<i;++a)o+=r[n+a]<<8*a;t.Ra=o,t.bb=i,t.oa=r,t.pa=n}function b(t){for(;8<=t.u&&t.bb<t.Sb;)t.Ra>>>=8,t.Ra+=t.oa[t.pa+t.bb]<<Ur-8>>>0,++t.bb,t.u-=8;A(t)&&(t.h=1,t.u=0)}function y(t,r){if(e(0<=r),!t.h&&r<=Tr){var n=L(t)&Rr[r];return t.u+=r,b(t),n}return t.h=1,t.u=0}function w(){this.b=this.Ca=this.I=0,this.oa=[],this.pa=0,this.Jd=[],this.Yc=0,this.Zc=[],this.Ka=0}function N(){this.Ra=0,this.oa=[],this.h=this.u=this.bb=this.Sb=this.pa=0}function L(t){return t.Ra>>>(t.u&Ur-1)>>>0}function A(t){return e(t.bb<=t.Sb),t.h||t.bb==t.Sb&&t.u>Ur}function x(t,e){t.u=e,t.h=A(t)}function S(t){t.u>=zr&&(e(t.u>=zr),b(t))}function _(t){e(null!=t&&null!=t.oa),t.pa<t.Zc?(t.I=(t.oa[t.pa++]|t.I<<8)>>>0,t.b+=8):(e(null!=t&&null!=t.oa),t.pa<t.Yc?(t.b+=8,t.I=t.oa[t.pa++]|t.I<<8):t.Ka?t.b=0:(t.I<<=8,t.b+=8,t.Ka=1))}function P(t){return g(t,1)}function k(t,e){var r=t.Ca;0>t.b&&_(t);var n=t.b,i=r*e>>>8,a=(t.I>>>n>i)+0;for(a?(r-=i,t.I-=i+1<<n>>>0):r=i+1,n=r,i=0;256<=n;)i+=8,n>>=8;return n=7^i+Hr[n],t.b-=n,t.Ca=(r<<n)-1,a}function I(t,e,r){t[e+0]=r>>24&255,t[e+1]=r>>16&255,t[e+2]=r>>8&255,t[e+3]=r>>0&255}function F(t,e){return t[e+0]<<0|t[e+1]<<8}function C(t,e){return F(t,e)|t[e+2]<<16}function j(t,e){return F(t,e)|F(t,e+2)<<16}function O(t,r){var n=1<<r;return e(null!=t),e(0<r),t.X=a(n),null==t.X?0:(t.Mb=32-r,t.Xa=r,1)}function B(t,r){e(null!=t),e(null!=r),e(t.Xa==r.Xa),n(r.X,0,t.X,0,1<<r.Xa)}function M(){this.X=[],this.Xa=this.Mb=0}function E(t,r,n,i){e(null!=n),e(null!=i);var a=n[0],o=i[0];return 0==a&&(a=(t*o+r/2)/r),0==o&&(o=(r*a+t/2)/t),0>=a||0>=o?0:(n[0]=a,i[0]=o,1)}function q(t,e){return t+(1<<e)-1>>>e}function D(t,e){return((4278255360&t)+(4278255360&e)>>>0&4278255360)+((16711935&t)+(16711935&e)>>>0&16711935)>>>0}function R(e,r){t[r]=function(r,n,i,a,o,s,c){var u;for(u=0;u<o;++u){var h=t[e](s[c+u-1],i,a+u);s[c+u]=D(r[n+u],h)}}}function T(){this.ud=this.hd=this.jd=0}function U(t,e){return((4278124286&(t^e))>>>1)+(t&e)>>>0}function z(t){return 0<=t&&256>t?t:0>t?0:255<t?255:void 0}function H(t,e){return z(t+(t-e+.5>>1))}function W(t,e,r){return Math.abs(e-r)-Math.abs(t-r)}function V(t,e,r,n,i,a,o){for(n=a[o-1],r=0;r<i;++r)a[o+r]=n=D(t[e+r],n)}function G(t,e,r,n,i){var a;for(a=0;a<r;++a){var o=t[e+a],s=o>>8&255,c=16711935&(c=(c=16711935&o)+((s<<16)+s));n[i+a]=(4278255360&o)+c>>>0}}function Y(t,e){e.jd=t>>0&255,e.hd=t>>8&255,e.ud=t>>16&255}function J(t,e,r,n,i,a){var o;for(o=0;o<n;++o){var s=e[r+o],c=s>>>8,u=s,h=255&(h=(h=s>>>16)+((t.jd<<24>>24)*(c<<24>>24)>>>5));u=255&(u=(u=u+((t.hd<<24>>24)*(c<<24>>24)>>>5))+((t.ud<<24>>24)*(h<<24>>24)>>>5));i[a+o]=(4278255360&s)+(h<<16)+u}}function X(e,r,n,i,a){t[r]=function(t,e,r,n,o,s,c,u,h){for(n=c;n<u;++n)for(c=0;c<h;++c)o[s++]=a(r[i(t[e++])])},t[e]=function(e,r,o,s,c,u,h){var l=8>>e.b,f=e.Ea,d=e.K[0],p=e.w;if(8>l)for(e=(1<<e.b)-1,p=(1<<l)-1;r<o;++r){var g,m=0;for(g=0;g<f;++g)g&e||(m=i(s[c++])),u[h++]=a(d[m&p]),m>>=l}else t[\"VP8LMapColor\"+n](s,c,d,p,u,h,r,o,f)}}function K(t,e,r,n,i){for(r=e+r;e<r;){var a=t[e++];n[i++]=a>>16&255,n[i++]=a>>8&255,n[i++]=a>>0&255}}function Z(t,e,r,n,i){for(r=e+r;e<r;){var a=t[e++];n[i++]=a>>16&255,n[i++]=a>>8&255,n[i++]=a>>0&255,n[i++]=a>>24&255}}function $(t,e,r,n,i){for(r=e+r;e<r;){var a=(o=t[e++])>>16&240|o>>12&15,o=o>>0&240|o>>28&15;n[i++]=a,n[i++]=o}}function Q(t,e,r,n,i){for(r=e+r;e<r;){var a=(o=t[e++])>>16&248|o>>13&7,o=o>>5&224|o>>3&31;n[i++]=a,n[i++]=o}}function tt(t,e,r,n,i){for(r=e+r;e<r;){var a=t[e++];n[i++]=a>>0&255,n[i++]=a>>8&255,n[i++]=a>>16&255}}function et(t,e,r,i,a,o){if(0==o)for(r=e+r;e<r;)I(i,((o=t[e++])[0]>>24|o[1]>>8&65280|o[2]<<8&16711680|o[3]<<24)>>>0),a+=32;else n(i,a,t,e,r)}function rt(e,r){t[r][0]=t[e+\"0\"],t[r][1]=t[e+\"1\"],t[r][2]=t[e+\"2\"],t[r][3]=t[e+\"3\"],t[r][4]=t[e+\"4\"],t[r][5]=t[e+\"5\"],t[r][6]=t[e+\"6\"],t[r][7]=t[e+\"7\"],t[r][8]=t[e+\"8\"],t[r][9]=t[e+\"9\"],t[r][10]=t[e+\"10\"],t[r][11]=t[e+\"11\"],t[r][12]=t[e+\"12\"],t[r][13]=t[e+\"13\"],t[r][14]=t[e+\"0\"],t[r][15]=t[e+\"0\"]}function nt(t){return t==Hn||t==Wn||t==Vn||t==Gn}function it(){this.eb=[],this.size=this.A=this.fb=0}function at(){this.y=[],this.f=[],this.ea=[],this.F=[],this.Tc=this.Ed=this.Cd=this.Fd=this.lb=this.Db=this.Ab=this.fa=this.J=this.W=this.N=this.O=0}function ot(){this.Rd=this.height=this.width=this.S=0,this.f={},this.f.RGBA=new it,this.f.kb=new at,this.sd=null}function st(){this.width=[0],this.height=[0],this.Pd=[0],this.Qd=[0],this.format=[0]}function ct(){this.Id=this.fd=this.Md=this.hb=this.ib=this.da=this.bd=this.cd=this.j=this.v=this.Da=this.Sd=this.ob=0}function ut(t){return alert(\"todo:WebPSamplerProcessPlane\"),t.T}function ht(t,e){var r=t.T,i=e.ba.f.RGBA,a=i.eb,o=i.fb+t.ka*i.A,s=vi[e.ba.S],c=t.y,u=t.O,h=t.f,l=t.N,f=t.ea,d=t.W,p=e.cc,g=e.dc,m=e.Mc,v=e.Nc,b=t.ka,y=t.ka+t.T,w=t.U,N=w+1>>1;for(0==b?s(c,u,null,null,h,l,f,d,h,l,f,d,a,o,null,null,w):(s(e.ec,e.fc,c,u,p,g,m,v,h,l,f,d,a,o-i.A,a,o,w),++r);b+2<y;b+=2)p=h,g=l,m=f,v=d,l+=t.Rc,d+=t.Rc,o+=2*i.A,s(c,(u+=2*t.fa)-t.fa,c,u,p,g,m,v,h,l,f,d,a,o-i.A,a,o,w);return u+=t.fa,t.j+y<t.o?(n(e.ec,e.fc,c,u,w),n(e.cc,e.dc,h,l,N),n(e.Mc,e.Nc,f,d,N),r--):1&y||s(c,u,null,null,h,l,f,d,h,l,f,d,a,o+i.A,null,null,w),r}function lt(t,r,n){var i=t.F,a=[t.J];if(null!=i){var o=t.U,s=r.ba.S,c=s==Tn||s==Vn;r=r.ba.f.RGBA;var u=[0],h=t.ka;u[0]=t.T,t.Kb&&(0==h?--u[0]:(--h,a[0]-=t.width),t.j+t.ka+t.T==t.o&&(u[0]=t.o-t.j-h));var l=r.eb;h=r.fb+h*r.A;t=Sn(i,a[0],t.width,o,u,l,h+(c?0:3),r.A),e(n==u),t&&nt(s)&&An(l,h,c,o,u,r.A)}return 0}function ft(t){var e=t.ma,r=e.ba.S,n=11>r,i=r==qn||r==Rn||r==Tn||r==Un||12==r||nt(r);if(e.memory=null,e.Ib=null,e.Jb=null,e.Nd=null,!Mr(e.Oa,t,i?11:12))return 0;if(i&&nt(r)&&br(),t.da)alert(\"todo:use_scaling\");else{if(n){if(e.Ib=ut,t.Kb){if(r=t.U+1>>1,e.memory=a(t.U+2*r),null==e.memory)return 0;e.ec=e.memory,e.fc=0,e.cc=e.ec,e.dc=e.fc+t.U,e.Mc=e.cc,e.Nc=e.dc+r,e.Ib=ht,br()}}else alert(\"todo:EmitYUV\");i&&(e.Jb=lt,n&&mr())}if(n&&!Ci){for(t=0;256>t;++t)ji[t]=89858*(t-128)+_i>>Si,Mi[t]=-22014*(t-128)+_i,Bi[t]=-45773*(t-128),Oi[t]=113618*(t-128)+_i>>Si;for(t=Pi;t<ki;++t)e=76283*(t-16)+_i>>Si,Ei[t-Pi]=Vt(e,255),qi[t-Pi]=Vt(e+8>>4,15);Ci=1}return 1}function dt(t){var r=t.ma,n=t.U,i=t.T;return e(!(1&t.ka)),0>=n||0>=i?0:(n=r.Ib(t,r),null!=r.Jb&&r.Jb(t,r,n),r.Dc+=n,1)}function pt(t){t.ma.memory=null}function gt(t,e,r,n){return 47!=y(t,8)?0:(e[0]=y(t,14)+1,r[0]=y(t,14)+1,n[0]=y(t,1),0!=y(t,3)?0:!t.h)}function mt(t,e){if(4>t)return t+1;var r=t-2>>1;return(2+(1&t)<<r)+y(e,r)+1}function vt(t,e){return 120<e?e-120:1<=(r=((r=$n[e-1])>>4)*t+(8-(15&r)))?r:1;var r}function bt(t,e,r){var n=L(r),i=t[e+=255&n].g-8;return 0<i&&(x(r,r.u+8),n=L(r),e+=t[e].value,e+=n&(1<<i)-1),x(r,r.u+t[e].g),t[e].value}function yt(t,r,n){return n.g+=t.g,n.value+=t.value<<r>>>0,e(8>=n.g),t.g}function wt(t,r,n){var i=t.xc;return e((r=0==i?0:t.vc[t.md*(n>>i)+(r>>i)])<t.Wb),t.Ya[r]}function Nt(t,r,i,a){var o=t.ab,s=t.c*r,c=t.C;r=c+r;var u=i,h=a;for(a=t.Ta,i=t.Ua;0<o--;){var l=t.gc[o],f=c,d=r,p=u,g=h,m=(h=a,u=i,l.Ea);switch(e(f<d),e(d<=l.nc),l.hc){case 2:Gr(p,g,(d-f)*m,h,u);break;case 0:var v=f,b=d,y=h,w=u,N=(_=l).Ea;0==v&&(Wr(p,g,null,null,1,y,w),V(p,g+1,0,0,N-1,y,w+1),g+=N,w+=N,++v);for(var L=1<<_.b,A=L-1,x=q(N,_.b),S=_.K,_=_.w+(v>>_.b)*x;v<b;){var P=S,k=_,I=1;for(Vr(p,g,y,w-N,1,y,w);I<N;){var F=(I&~A)+L;F>N&&(F=N),(0,Zr[P[k++]>>8&15])(p,g+ +I,y,w+I-N,F-I,y,w+I),I=F}g+=N,w+=N,++v&A||(_+=x)}d!=l.nc&&n(h,u-m,h,u+(d-f-1)*m,m);break;case 1:for(m=p,b=g,N=(p=l.Ea)-(w=p&~(y=(g=1<<l.b)-1)),v=q(p,l.b),L=l.K,l=l.w+(f>>l.b)*v;f<d;){for(A=L,x=l,S=new T,_=b+w,P=b+p;b<_;)Y(A[x++],S),$r(S,m,b,g,h,u),b+=g,u+=g;b<P&&(Y(A[x++],S),$r(S,m,b,N,h,u),b+=N,u+=N),++f&y||(l+=v)}break;case 3:if(p==h&&g==u&&0<l.b){for(b=h,p=m=u+(d-f)*m-(w=(d-f)*q(l.Ea,l.b)),g=h,y=u,v=[],w=(N=w)-1;0<=w;--w)v[w]=g[y+w];for(w=N-1;0<=w;--w)b[p+w]=v[w];Yr(l,f,d,h,m,h,u)}else Yr(l,f,d,p,g,h,u)}u=a,h=i}h!=i&&n(a,i,u,h,s)}function Lt(t,r){var n=t.V,i=t.Ba+t.c*t.C,a=r-t.C;if(e(r<=t.l.o),e(16>=a),0<a){var o=t.l,s=t.Ta,c=t.Ua,u=o.width;if(Nt(t,a,n,i),a=c=[c],e((n=t.C)<(i=r)),e(o.v<o.va),i>o.o&&(i=o.o),n<o.j){var h=o.j-n;n=o.j;a[0]+=h*u}if(n>=i?n=0:(a[0]+=4*o.v,o.ka=n-o.j,o.U=o.va-o.v,o.T=i-n,n=1),n){if(c=c[0],11>(n=t.ca).S){var l=n.f.RGBA,f=(i=n.S,a=o.U,o=o.T,h=l.eb,l.A),d=o;for(l=l.fb+t.Ma*l.A;0<d--;){var p=s,g=c,m=a,v=h,b=l;switch(i){case En:Qr(p,g,m,v,b);break;case qn:tn(p,g,m,v,b);break;case Hn:tn(p,g,m,v,b),An(v,b,0,m,1,0);break;case Dn:nn(p,g,m,v,b);break;case Rn:et(p,g,m,v,b,1);break;case Wn:et(p,g,m,v,b,1),An(v,b,0,m,1,0);break;case Tn:et(p,g,m,v,b,0);break;case Vn:et(p,g,m,v,b,0),An(v,b,1,m,1,0);break;case Un:en(p,g,m,v,b);break;case Gn:en(p,g,m,v,b),xn(v,b,m,1,0);break;case zn:rn(p,g,m,v,b);break;default:e(0)}c+=u,l+=f}t.Ma+=o}else alert(\"todo:EmitRescaledRowsYUVA\");e(t.Ma<=n.height)}}t.C=r,e(t.C<=t.i)}function At(t){var e;if(0<t.ua)return 0;for(e=0;e<t.Wb;++e){var r=t.Ya[e].G,n=t.Ya[e].H;if(0<r[1][n[1]+0].g||0<r[2][n[2]+0].g||0<r[3][n[3]+0].g)return 0}return 1}function xt(t,r,n,i,a,o){if(0!=t.Z){var s=t.qd,c=t.rd;for(e(null!=mi[t.Z]);r<n;++r)mi[t.Z](s,c,i,a,i,a,o),s=i,c=a,a+=o;t.qd=s,t.rd=c}}function St(t,r){var n=t.l.ma,i=0==n.Z||1==n.Z?t.l.j:t.C;i=t.C<i?i:t.C;if(e(r<=t.l.o),r>i){var a=t.l.width,o=n.ca,s=n.tb+a*i,c=t.V,u=t.Ba+t.c*i,h=t.gc;e(1==t.ab),e(3==h[0].hc),Xr(h[0],i,r,c,u,o,s),xt(n,i,r,o,s,a)}t.C=t.Ma=r}function _t(t,r,n,i,a,o,s){var c=t.$/i,u=t.$%i,h=t.m,l=t.s,f=n+t.$,d=f;a=n+i*a;var p=n+i*o,g=280+l.ua,m=t.Pb?c:16777216,v=0<l.ua?l.Wa:null,b=l.wc,y=f<p?wt(l,u,c):null;e(t.C<o),e(p<=a);var w=!1;t:for(;;){for(;w||f<p;){var N=0;if(c>=m){var _=f-n;e((m=t).Pb),m.wd=m.m,m.xd=_,0<m.s.ua&&B(m.s.Wa,m.s.vb),m=c+ti}if(u&b||(y=wt(l,u,c)),e(null!=y),y.Qb&&(r[f]=y.qb,w=!0),!w)if(S(h),y.jc){N=h,_=r;var P=f,k=y.pd[L(N)&Dr-1];e(y.jc),256>k.g?(x(N,N.u+k.g),_[P]=k.value,N=0):(x(N,N.u+k.g-256),e(256<=k.value),N=k.value),0==N&&(w=!0)}else N=bt(y.G[0],y.H[0],h);if(h.h)break;if(w||256>N){if(!w)if(y.nd)r[f]=(y.qb|N<<8)>>>0;else{if(S(h),w=bt(y.G[1],y.H[1],h),S(h),_=bt(y.G[2],y.H[2],h),P=bt(y.G[3],y.H[3],h),h.h)break;r[f]=(P<<24|w<<16|N<<8|_)>>>0}if(w=!1,++f,++u>=i&&(u=0,++c,null!=s&&c<=o&&!(c%16)&&s(t,c),null!=v))for(;d<f;)N=r[d++],v.X[(506832829*N&4294967295)>>>v.Mb]=N}else if(280>N){if(N=mt(N-256,h),_=bt(y.G[4],y.H[4],h),S(h),_=vt(i,_=mt(_,h)),h.h)break;if(f-n<_||a-f<N)break t;for(P=0;P<N;++P)r[f+P]=r[f+P-_];for(f+=N,u+=N;u>=i;)u-=i,++c,null!=s&&c<=o&&!(c%16)&&s(t,c);if(e(f<=a),u&b&&(y=wt(l,u,c)),null!=v)for(;d<f;)N=r[d++],v.X[(506832829*N&4294967295)>>>v.Mb]=N}else{if(!(N<g))break t;for(w=N-280,e(null!=v);d<f;)N=r[d++],v.X[(506832829*N&4294967295)>>>v.Mb]=N;N=f,e(!(w>>>(_=v).Xa)),r[N]=_.X[w],w=!0}w||e(h.h==A(h))}if(t.Pb&&h.h&&f<a)e(t.m.h),t.a=5,t.m=t.wd,t.$=t.xd,0<t.s.ua&&B(t.s.vb,t.s.Wa);else{if(h.h)break t;null!=s&&s(t,c>o?o:c),t.a=0,t.$=f-n}return 1}return t.a=3,0}function Pt(t){e(null!=t),t.vc=null,t.yc=null,t.Ya=null;var r=t.Wa;null!=r&&(r.X=null),t.vb=null,e(null!=t)}function kt(){var e=new or;return null==e?null:(e.a=0,e.xb=gi,rt(\"Predictor\",\"VP8LPredictors\"),rt(\"Predictor\",\"VP8LPredictors_C\"),rt(\"PredictorAdd\",\"VP8LPredictorsAdd\"),rt(\"PredictorAdd\",\"VP8LPredictorsAdd_C\"),Gr=G,$r=J,Qr=K,tn=Z,en=$,rn=Q,nn=tt,t.VP8LMapColor32b=Jr,t.VP8LMapColor8b=Kr,e)}function It(t,r,n,s,c){var u=1,f=[t],p=[r],g=s.m,m=s.s,v=null,b=0;t:for(;;){if(n)for(;u&&y(g,1);){var w=f,N=p,A=s,_=1,P=A.m,k=A.gc[A.ab],I=y(P,2);if(A.Oc&1<<I)u=0;else{switch(A.Oc|=1<<I,k.hc=I,k.Ea=w[0],k.nc=N[0],k.K=[null],++A.ab,e(4>=A.ab),I){case 0:case 1:k.b=y(P,3)+2,_=It(q(k.Ea,k.b),q(k.nc,k.b),0,A,k.K),k.K=k.K[0];break;case 3:var F,C=y(P,8)+1,j=16<C?0:4<C?1:2<C?2:3;if(w[0]=q(k.Ea,j),k.b=j,F=_=It(C,1,0,A,k.K)){var B,M=C,E=k,R=1<<(8>>E.b),T=a(R);if(null==T)F=0;else{var U=E.K[0],z=E.w;for(T[0]=E.K[0][0],B=1;B<1*M;++B)T[B]=D(U[z+B],T[B-1]);for(;B<4*R;++B)T[B]=0;E.K[0]=null,E.K[0]=T,F=1}}_=F;break;case 2:break;default:e(0)}u=_}}if(f=f[0],p=p[0],u&&y(g,1)&&!(u=1<=(b=y(g,4))&&11>=b)){s.a=3;break t}var H;if(H=u)e:{var W,V,G,Y=s,J=f,X=p,K=b,Z=n,$=Y.m,Q=Y.s,tt=[null],et=1,rt=0,nt=Qn[K];r:for(;;){if(Z&&y($,1)){var it=y($,3)+2,at=q(J,it),ot=q(X,it),st=at*ot;if(!It(at,ot,0,Y,tt))break r;for(tt=tt[0],Q.xc=it,W=0;W<st;++W){var ct=tt[W]>>8&65535;tt[W]=ct,ct>=et&&(et=ct+1)}}if($.h)break r;for(V=0;5>V;++V){var ut=Xn[V];!V&&0<K&&(ut+=1<<K),rt<ut&&(rt=ut)}var ht=o(et*nt,l),lt=et,ft=o(lt,d);if(null==ft)var dt=null;else e(65536>=lt),dt=ft;var pt=a(rt);if(null==dt||null==pt||null==ht){Y.a=1;break r}var gt=ht;for(W=G=0;W<et;++W){var mt=dt[W],vt=mt.G,bt=mt.H,wt=0,Nt=1,Lt=0;for(V=0;5>V;++V){ut=Xn[V],vt[V]=gt,bt[V]=G,!V&&0<K&&(ut+=1<<K);n:{var At,xt=ut,St=Y,kt=pt,Ft=gt,Ct=G,jt=0,Ot=St.m,Bt=y(Ot,1);if(i(kt,0,0,xt),Bt){var Mt=y(Ot,1)+1,Et=y(Ot,1),qt=y(Ot,0==Et?1:8);kt[qt]=1,2==Mt&&(kt[qt=y(Ot,8)]=1);var Dt=1}else{var Rt=a(19),Tt=y(Ot,4)+4;if(19<Tt){St.a=3;var Ut=0;break n}for(At=0;At<Tt;++At)Rt[Zn[At]]=y(Ot,3);var zt=void 0,Ht=void 0,Wt=St,Vt=Rt,Gt=xt,Yt=kt,Jt=0,Xt=Wt.m,Kt=8,Zt=o(128,l);i:for(;h(Zt,0,7,Vt,19);){if(y(Xt,1)){var $t=2+2*y(Xt,3);if((zt=2+y(Xt,$t))>Gt)break i}else zt=Gt;for(Ht=0;Ht<Gt&&zt--;){S(Xt);var Qt=Zt[0+(127&L(Xt))];x(Xt,Xt.u+Qt.g);var te=Qt.value;if(16>te)Yt[Ht++]=te,0!=te&&(Kt=te);else{var ee=16==te,re=te-16,ne=Jn[re],ie=y(Xt,Yn[re])+ne;if(Ht+ie>Gt)break i;for(var ae=ee?Kt:0;0<ie--;)Yt[Ht++]=ae}}Jt=1;break i}Jt||(Wt.a=3),Dt=Jt}(Dt=Dt&&!Ot.h)&&(jt=h(Ft,Ct,8,kt,xt)),Dt&&0!=jt?Ut=jt:(St.a=3,Ut=0)}if(0==Ut)break r;if(Nt&&1==Kn[V]&&(Nt=0==gt[G].g),wt+=gt[G].g,G+=Ut,3>=V){var oe,se=pt[0];for(oe=1;oe<ut;++oe)pt[oe]>se&&(se=pt[oe]);Lt+=se}}if(mt.nd=Nt,mt.Qb=0,Nt&&(mt.qb=(vt[3][bt[3]+0].value<<24|vt[1][bt[1]+0].value<<16|vt[2][bt[2]+0].value)>>>0,0==wt&&256>vt[0][bt[0]+0].value&&(mt.Qb=1,mt.qb+=vt[0][bt[0]+0].value<<8)),mt.jc=!mt.Qb&&6>Lt,mt.jc){var ce,ue=mt;for(ce=0;ce<Dr;++ce){var he=ce,le=ue.pd[he],fe=ue.G[0][ue.H[0]+he];256<=fe.value?(le.g=fe.g+256,le.value=fe.value):(le.g=0,le.value=0,he>>=yt(fe,8,le),he>>=yt(ue.G[1][ue.H[1]+he],16,le),he>>=yt(ue.G[2][ue.H[2]+he],0,le),yt(ue.G[3][ue.H[3]+he],24,le))}}}Q.vc=tt,Q.Wb=et,Q.Ya=dt,Q.yc=ht,H=1;break e}H=0}if(!(u=H)){s.a=3;break t}if(0<b){if(m.ua=1<<b,!O(m.Wa,b)){s.a=1,u=0;break t}}else m.ua=0;var de=s,pe=f,ge=p,me=de.s,ve=me.xc;if(de.c=pe,de.i=ge,me.md=q(pe,ve),me.wc=0==ve?-1:(1<<ve)-1,n){s.xb=pi;break t}if(null==(v=a(f*p))){s.a=1,u=0;break t}u=(u=_t(s,v,0,f,p,p,null))&&!g.h;break t}return u?(null!=c?c[0]=v:(e(null==v),e(n)),s.$=0,n||Pt(m)):Pt(m),u}function Ft(t,r){var n=t.c*t.i,i=n+r+16*r;return e(t.c<=r),t.V=a(i),null==t.V?(t.Ta=null,t.Ua=0,t.a=1,0):(t.Ta=t.V,t.Ua=t.Ba+n+r,1)}function Ct(t,r){var n=t.C,i=r-n,a=t.V,o=t.Ba+t.c*n;for(e(r<=t.l.o);0<i;){var s=16<i?16:i,c=t.l.ma,u=t.l.width,h=u*s,l=c.ca,f=c.tb+u*n,d=t.Ta,p=t.Ua;Nt(t,s,a,o),_n(d,p,l,f,h),xt(c,n,n+s,l,f,u),i-=s,a+=s*t.c,n+=s}e(n==r),t.C=t.Ma=r}function jt(){this.ub=this.yd=this.td=this.Rb=0}function Ot(){this.Kd=this.Ld=this.Ud=this.Td=this.i=this.c=0}function Bt(){this.Fb=this.Bb=this.Cb=0,this.Zb=a(4),this.Lb=a(4)}function Mt(){this.Yb=function(){var t=[];return function t(e,r,n){for(var i=n[r],a=0;a<i&&(e.push(n.length>r+1?[]:0),!(n.length<r+1));a++)t(e[a],r+1,n)}(t,0,[3,11]),t}()}function Et(){this.jb=a(3),this.Wc=s([4,8],Mt),this.Xc=s([4,17],Mt)}function qt(){this.Pc=this.wb=this.Tb=this.zd=0,this.vd=new a(4),this.od=new a(4)}function Dt(){this.ld=this.La=this.dd=this.tc=0}function Rt(){this.Na=this.la=0}function Tt(){this.Sc=[0,0],this.Eb=[0,0],this.Qc=[0,0],this.ia=this.lc=0}function Ut(){this.ad=a(384),this.Za=0,this.Ob=a(16),this.$b=this.Ad=this.ia=this.Gc=this.Hc=this.Dd=0}function zt(){this.uc=this.M=this.Nb=0,this.wa=Array(new Dt),this.Y=0,this.ya=Array(new Ut),this.aa=0,this.l=new Gt}function Ht(){this.y=a(16),this.f=a(8),this.ea=a(8)}function Wt(){this.cb=this.a=0,this.sc=\"\",this.m=new w,this.Od=new jt,this.Kc=new Ot,this.ed=new qt,this.Qa=new Bt,this.Ic=this.$c=this.Aa=0,this.D=new zt,this.Xb=this.Va=this.Hb=this.zb=this.yb=this.Ub=this.za=0,this.Jc=o(8,w),this.ia=0,this.pb=o(4,Tt),this.Pa=new Et,this.Bd=this.kc=0,this.Ac=[],this.Bc=0,this.zc=[0,0,0,0],this.Gd=Array(new Ht),this.Hd=0,this.rb=Array(new Rt),this.sb=0,this.wa=Array(new Dt),this.Y=0,this.oc=[],this.pc=0,this.sa=[],this.ta=0,this.qa=[],this.ra=0,this.Ha=[],this.B=this.R=this.Ia=0,this.Ec=[],this.M=this.ja=this.Vb=this.Fc=0,this.ya=Array(new Ut),this.L=this.aa=0,this.gd=s([4,2],Dt),this.ga=null,this.Fa=[],this.Cc=this.qc=this.P=0,this.Gb=[],this.Uc=0,this.mb=[],this.nb=0,this.rc=[],this.Ga=this.Vc=0}function Vt(t,e){return 0>t?0:t>e?e:t}function Gt(){this.T=this.U=this.ka=this.height=this.width=0,this.y=[],this.f=[],this.ea=[],this.Rc=this.fa=this.W=this.N=this.O=0,this.ma=\"void\",this.put=\"VP8IoPutHook\",this.ac=\"VP8IoSetupHook\",this.bc=\"VP8IoTeardownHook\",this.ha=this.Kb=0,this.data=[],this.hb=this.ib=this.da=this.o=this.j=this.va=this.v=this.Da=this.ob=this.w=0,this.F=[],this.J=0}function Yt(){var t=new Wt;return null!=t&&(t.a=0,t.sc=\"OK\",t.cb=0,t.Xb=0,ni||(ni=Zt)),t}function Jt(t,e,r){return 0==t.a&&(t.a=e,t.sc=r,t.cb=0),0}function Xt(t,e,r){return 3<=r&&157==t[e+0]&&1==t[e+1]&&42==t[e+2]}function Kt(t,r){if(null==t)return 0;if(t.a=0,t.sc=\"OK\",null==r)return Jt(t,2,\"null VP8Io passed to VP8GetHeaders()\");var n=r.data,a=r.w,o=r.ha;if(4>o)return Jt(t,7,\"Truncated header.\");var s=n[a+0]|n[a+1]<<8|n[a+2]<<16,c=t.Od;if(c.Rb=!(1&s),c.td=s>>1&7,c.yd=s>>4&1,c.ub=s>>5,3<c.td)return Jt(t,3,\"Incorrect keyframe parameters.\");if(!c.yd)return Jt(t,4,\"Frame not displayable.\");a+=3,o-=3;var u=t.Kc;if(c.Rb){if(7>o)return Jt(t,7,\"cannot parse picture header\");if(!Xt(n,a,o))return Jt(t,3,\"Bad code word\");u.c=16383&(n[a+4]<<8|n[a+3]),u.Td=n[a+4]>>6,u.i=16383&(n[a+6]<<8|n[a+5]),u.Ud=n[a+6]>>6,a+=7,o-=7,t.za=u.c+15>>4,t.Ub=u.i+15>>4,r.width=u.c,r.height=u.i,r.Da=0,r.j=0,r.v=0,r.va=r.width,r.o=r.height,r.da=0,r.ib=r.width,r.hb=r.height,r.U=r.width,r.T=r.height,i((s=t.Pa).jb,0,255,s.jb.length),e(null!=(s=t.Qa)),s.Cb=0,s.Bb=0,s.Fb=1,i(s.Zb,0,0,s.Zb.length),i(s.Lb,0,0,s.Lb)}if(c.ub>o)return Jt(t,7,\"bad partition length\");p(s=t.m,n,a,c.ub),a+=c.ub,o-=c.ub,c.Rb&&(u.Ld=P(s),u.Kd=P(s)),u=t.Qa;var h,l=t.Pa;if(e(null!=s),e(null!=u),u.Cb=P(s),u.Cb){if(u.Bb=P(s),P(s)){for(u.Fb=P(s),h=0;4>h;++h)u.Zb[h]=P(s)?m(s,7):0;for(h=0;4>h;++h)u.Lb[h]=P(s)?m(s,6):0}if(u.Bb)for(h=0;3>h;++h)l.jb[h]=P(s)?g(s,8):255}else u.Bb=0;if(s.Ka)return Jt(t,3,\"cannot parse segment header\");if((u=t.ed).zd=P(s),u.Tb=g(s,6),u.wb=g(s,3),u.Pc=P(s),u.Pc&&P(s)){for(l=0;4>l;++l)P(s)&&(u.vd[l]=m(s,6));for(l=0;4>l;++l)P(s)&&(u.od[l]=m(s,6))}if(t.L=0==u.Tb?0:u.zd?1:2,s.Ka)return Jt(t,3,\"cannot parse filter header\");var f=o;if(o=h=a,a=h+f,u=f,t.Xb=(1<<g(t.m,2))-1,f<3*(l=t.Xb))n=7;else{for(h+=3*l,u-=3*l,f=0;f<l;++f){var d=n[o+0]|n[o+1]<<8|n[o+2]<<16;d>u&&(d=u),p(t.Jc[+f],n,h,d),h+=d,u-=d,o+=3}p(t.Jc[+l],n,h,u),n=h<a?0:5}if(0!=n)return Jt(t,n,\"cannot parse partitions\");for(n=g(h=t.m,7),o=P(h)?m(h,4):0,a=P(h)?m(h,4):0,u=P(h)?m(h,4):0,l=P(h)?m(h,4):0,h=P(h)?m(h,4):0,f=t.Qa,d=0;4>d;++d){if(f.Cb){var v=f.Zb[d];f.Fb||(v+=n)}else{if(0<d){t.pb[d]=t.pb[0];continue}v=n}var b=t.pb[d];b.Sc[0]=ei[Vt(v+o,127)],b.Sc[1]=ri[Vt(v+0,127)],b.Eb[0]=2*ei[Vt(v+a,127)],b.Eb[1]=101581*ri[Vt(v+u,127)]>>16,8>b.Eb[1]&&(b.Eb[1]=8),b.Qc[0]=ei[Vt(v+l,117)],b.Qc[1]=ri[Vt(v+h,127)],b.lc=v+h}if(!c.Rb)return Jt(t,4,\"Not a key frame.\");for(P(s),c=t.Pa,n=0;4>n;++n){for(o=0;8>o;++o)for(a=0;3>a;++a)for(u=0;11>u;++u)l=k(s,ui[n][o][a][u])?g(s,8):si[n][o][a][u],c.Wc[n][o].Yb[a][u]=l;for(o=0;17>o;++o)c.Xc[n][o]=c.Wc[n][hi[o]]}return t.kc=P(s),t.kc&&(t.Bd=g(s,8)),t.cb=1}function Zt(t,e,r,n,i,a,o){var s=e[i].Yb[r];for(r=0;16>i;++i){if(!k(t,s[r+0]))return i;for(;!k(t,s[r+1]);)if(s=e[++i].Yb[0],r=0,16==i)return 16;var c=e[i+1].Yb;if(k(t,s[r+2])){var u=t,h=0;if(k(u,(f=s)[(l=r)+3]))if(k(u,f[l+6])){for(s=0,l=2*(h=k(u,f[l+8]))+(f=k(u,f[l+9+h])),h=0,f=ii[l];f[s];++s)h+=h+k(u,f[s]);h+=3+(8<<l)}else k(u,f[l+7])?(h=7+2*k(u,165),h+=k(u,145)):h=5+k(u,159);else h=k(u,f[l+4])?3+k(u,f[l+5]):2;s=c[2]}else h=1,s=c[1];c=o+ai[i],0>(u=t).b&&_(u);var l,f=u.b,d=(l=u.Ca>>1)-(u.I>>f)>>31;--u.b,u.Ca+=d,u.Ca|=1,u.I-=(l+1&d)<<f,a[c]=((h^d)-d)*n[(0<i)+0]}return 16}function $t(t){var e=t.rb[t.sb-1];e.la=0,e.Na=0,i(t.zc,0,0,t.zc.length),t.ja=0}function Qt(t,r){if(null==t)return 0;if(null==r)return Jt(t,2,\"NULL VP8Io parameter in VP8Decode().\");if(!t.cb&&!Kt(t,r))return 0;if(e(t.cb),null==r.ac||r.ac(r)){r.ob&&(t.L=0);var s=Ri[t.L];if(2==t.L?(t.yb=0,t.zb=0):(t.yb=r.v-s>>4,t.zb=r.j-s>>4,0>t.yb&&(t.yb=0),0>t.zb&&(t.zb=0)),t.Va=r.o+15+s>>4,t.Hb=r.va+15+s>>4,t.Hb>t.za&&(t.Hb=t.za),t.Va>t.Ub&&(t.Va=t.Ub),0<t.L){var c=t.ed;for(s=0;4>s;++s){var u;if(t.Qa.Cb){var h=t.Qa.Lb[s];t.Qa.Fb||(h+=c.Tb)}else h=c.Tb;for(u=0;1>=u;++u){var l=t.gd[s][u],f=h;if(c.Pc&&(f+=c.vd[0],u&&(f+=c.od[0])),0<(f=0>f?0:63<f?63:f)){var d=f;0<c.wb&&((d=4<c.wb?d>>2:d>>1)>9-c.wb&&(d=9-c.wb)),1>d&&(d=1),l.dd=d,l.tc=2*f+d,l.ld=40<=f?2:15<=f?1:0}else l.tc=0;l.La=u}}}s=0}else Jt(t,6,\"Frame setup failed\"),s=t.a;if(s=0==s){if(s){t.$c=0,0<t.Aa||(t.Ic=Ui);t:{s=t.Ic;c=4*(d=t.za);var p=32*d,g=d+1,m=0<t.L?d*(0<t.Aa?2:1):0,v=(2==t.Aa?2:1)*d;if((l=c+832+(u=3*(16*s+Ri[t.L])/2*p)+(h=null!=t.Fa&&0<t.Fa.length?t.Kc.c*t.Kc.i:0))!=l)s=0;else{if(l>t.Vb){if(t.Vb=0,t.Ec=a(l),t.Fc=0,null==t.Ec){s=Jt(t,1,\"no memory during frame initialization.\");break t}t.Vb=l}l=t.Ec,f=t.Fc,t.Ac=l,t.Bc=f,f+=c,t.Gd=o(p,Ht),t.Hd=0,t.rb=o(g+1,Rt),t.sb=1,t.wa=m?o(m,Dt):null,t.Y=0,t.D.Nb=0,t.D.wa=t.wa,t.D.Y=t.Y,0<t.Aa&&(t.D.Y+=d),e(!0),t.oc=l,t.pc=f,f+=832,t.ya=o(v,Ut),t.aa=0,t.D.ya=t.ya,t.D.aa=t.aa,2==t.Aa&&(t.D.aa+=d),t.R=16*d,t.B=8*d,d=(p=Ri[t.L])*t.R,p=p/2*t.B,t.sa=l,t.ta=f+d,t.qa=t.sa,t.ra=t.ta+16*s*t.R+p,t.Ha=t.qa,t.Ia=t.ra+8*s*t.B+p,t.$c=0,f+=u,t.mb=h?l:null,t.nb=h?f:null,e(f+h<=t.Fc+t.Vb),$t(t),i(t.Ac,t.Bc,0,c),s=1}}if(s){if(r.ka=0,r.y=t.sa,r.O=t.ta,r.f=t.qa,r.N=t.ra,r.ea=t.Ha,r.Vd=t.Ia,r.fa=t.R,r.Rc=t.B,r.F=null,r.J=0,!Cn){for(s=-255;255>=s;++s)Pn[255+s]=0>s?-s:s;for(s=-1020;1020>=s;++s)kn[1020+s]=-128>s?-128:127<s?127:s;for(s=-112;112>=s;++s)In[112+s]=-16>s?-16:15<s?15:s;for(s=-255;510>=s;++s)Fn[255+s]=0>s?0:255<s?255:s;Cn=1}an=ue,on=ae,cn=oe,un=se,hn=ce,sn=ie,ln=Je,fn=Xe,dn=$e,pn=Qe,gn=Ke,mn=Ze,vn=tr,bn=er,yn=ze,wn=He,Nn=We,Ln=Ve,fi[0]=xe,fi[1]=le,fi[2]=Le,fi[3]=Ae,fi[4]=Se,fi[5]=Pe,fi[6]=_e,fi[7]=ke,fi[8]=Fe,fi[9]=Ie,li[0]=ve,li[1]=de,li[2]=pe,li[3]=ge,li[4]=be,li[5]=ye,li[6]=we,di[0]=Be,di[1]=fe,di[2]=Ce,di[3]=je,di[4]=Ee,di[5]=Me,di[6]=qe,s=1}else s=0}s&&(s=function(t,r){for(t.M=0;t.M<t.Va;++t.M){var o,s=t.Jc[t.M&t.Xb],c=t.m,u=t;for(o=0;o<u.za;++o){var h=c,l=u,f=l.Ac,d=l.Bc+4*o,p=l.zc,g=l.ya[l.aa+o];if(l.Qa.Bb?g.$b=k(h,l.Pa.jb[0])?2+k(h,l.Pa.jb[2]):k(h,l.Pa.jb[1]):g.$b=0,l.kc&&(g.Ad=k(h,l.Bd)),g.Za=!k(h,145)+0,g.Za){var m=g.Ob,v=0;for(l=0;4>l;++l){var b,y=p[0+l];for(b=0;4>b;++b){y=ci[f[d+b]][y];for(var w=oi[k(h,y[0])];0<w;)w=oi[2*w+k(h,y[w])];y=-w,f[d+b]=y}n(m,v,f,d,4),v+=4,p[0+l]=y}}else y=k(h,156)?k(h,128)?1:3:k(h,163)?2:0,g.Ob[0]=y,i(f,d,y,4),i(p,0,y,4);g.Dd=k(h,142)?k(h,114)?k(h,183)?1:3:2:0}if(u.m.Ka)return Jt(t,7,\"Premature end-of-partition0 encountered.\");for(;t.ja<t.za;++t.ja){if(u=s,h=(c=t).rb[c.sb-1],f=c.rb[c.sb+c.ja],o=c.ya[c.aa+c.ja],d=c.kc?o.Ad:0)h.la=f.la=0,o.Za||(h.Na=f.Na=0),o.Hc=0,o.Gc=0,o.ia=0;else{var N,L;h=f,f=u,d=c.Pa.Xc,p=c.ya[c.aa+c.ja],g=c.pb[p.$b];if(l=p.ad,m=0,v=c.rb[c.sb-1],y=b=0,i(l,m,0,384),p.Za)var A=0,x=d[3];else{w=a(16);var S=h.Na+v.Na;if(S=ni(f,d[1],S,g.Eb,0,w,0),h.Na=v.Na=(0<S)+0,1<S)an(w,0,l,m);else{var _=w[0]+3>>3;for(w=0;256>w;w+=16)l[m+w]=_}A=1,x=d[0]}var P=15&h.la,I=15&v.la;for(w=0;4>w;++w){var F=1&I;for(_=L=0;4>_;++_)P=P>>1|(F=(S=ni(f,x,S=F+(1&P),g.Sc,A,l,m))>A)<<7,L=L<<2|(3<S?3:1<S?2:0!=l[m+0]),m+=16;P>>=4,I=I>>1|F<<7,b=(b<<8|L)>>>0}for(x=P,A=I>>4,N=0;4>N;N+=2){for(L=0,P=h.la>>4+N,I=v.la>>4+N,w=0;2>w;++w){for(F=1&I,_=0;2>_;++_)S=F+(1&P),P=P>>1|(F=0<(S=ni(f,d[2],S,g.Qc,0,l,m)))<<3,L=L<<2|(3<S?3:1<S?2:0!=l[m+0]),m+=16;P>>=2,I=I>>1|F<<5}y|=L<<4*N,x|=P<<4<<N,A|=(240&I)<<N}h.la=x,v.la=A,p.Hc=b,p.Gc=y,p.ia=43690&y?0:g.ia,d=!(b|y)}if(0<c.L&&(c.wa[c.Y+c.ja]=c.gd[o.$b][o.Za],c.wa[c.Y+c.ja].La|=!d),u.Ka)return Jt(t,7,\"Premature end-of-file encountered.\")}if($t(t),c=r,u=1,o=(s=t).D,h=0<s.L&&s.M>=s.zb&&s.M<=s.Va,0==s.Aa)t:{if(o.M=s.M,o.uc=h,Or(s,o),u=1,o=(L=s.D).Nb,h=(y=Ri[s.L])*s.R,f=y/2*s.B,w=16*o*s.R,_=8*o*s.B,d=s.sa,p=s.ta-h+w,g=s.qa,l=s.ra-f+_,m=s.Ha,v=s.Ia-f+_,I=0==(P=L.M),b=P>=s.Va-1,2==s.Aa&&Or(s,L),L.uc)for(F=(S=s).D.M,e(S.D.uc),L=S.yb;L<S.Hb;++L){A=L,x=F;var C=(j=(U=S).D).Nb;N=U.R;var j=j.wa[j.Y+A],O=U.sa,B=U.ta+16*C*N+16*A,M=j.dd,E=j.tc;if(0!=E)if(e(3<=E),1==U.L)0<A&&wn(O,B,N,E+4),j.La&&Ln(O,B,N,E),0<x&&yn(O,B,N,E+4),j.La&&Nn(O,B,N,E);else{var q=U.B,D=U.qa,R=U.ra+8*C*q+8*A,T=U.Ha,U=U.Ia+8*C*q+8*A;C=j.ld;0<A&&(fn(O,B,N,E+4,M,C),pn(D,R,T,U,q,E+4,M,C)),j.La&&(mn(O,B,N,E,M,C),bn(D,R,T,U,q,E,M,C)),0<x&&(ln(O,B,N,E+4,M,C),dn(D,R,T,U,q,E+4,M,C)),j.La&&(gn(O,B,N,E,M,C),vn(D,R,T,U,q,E,M,C))}}if(s.ia&&alert(\"todo:DitherRow\"),null!=c.put){if(L=16*P,P=16*(P+1),I?(c.y=s.sa,c.O=s.ta+w,c.f=s.qa,c.N=s.ra+_,c.ea=s.Ha,c.W=s.Ia+_):(L-=y,c.y=d,c.O=p,c.f=g,c.N=l,c.ea=m,c.W=v),b||(P-=y),P>c.o&&(P=c.o),c.F=null,c.J=null,null!=s.Fa&&0<s.Fa.length&&L<P&&(c.J=lr(s,c,L,P-L),c.F=s.mb,null==c.F&&0==c.F.length)){u=Jt(s,3,\"Could not decode alpha data.\");break t}L<c.j&&(y=c.j-L,L=c.j,e(!(1&y)),c.O+=s.R*y,c.N+=s.B*(y>>1),c.W+=s.B*(y>>1),null!=c.F&&(c.J+=c.width*y)),L<P&&(c.O+=c.v,c.N+=c.v>>1,c.W+=c.v>>1,null!=c.F&&(c.J+=c.v),c.ka=L-c.j,c.U=c.va-c.v,c.T=P-L,u=c.put(c))}o+1!=s.Ic||b||(n(s.sa,s.ta-h,d,p+16*s.R,h),n(s.qa,s.ra-f,g,l+8*s.B,f),n(s.Ha,s.Ia-f,m,v+8*s.B,f))}if(!u)return Jt(t,6,\"Output aborted.\")}return 1}(t,r)),null!=r.bc&&r.bc(r),s&=1}return s?(t.cb=0,s):0}function te(t,e,r,n,i){i=t[e+r+32*n]+(i>>3),t[e+r+32*n]=-256&i?0>i?0:255:i}function ee(t,e,r,n,i,a){te(t,e,0,r,n+i),te(t,e,1,r,n+a),te(t,e,2,r,n-a),te(t,e,3,r,n-i)}function re(t){return(20091*t>>16)+t}function ne(t,e,r,n){var i,o=0,s=a(16);for(i=0;4>i;++i){var c=t[e+0]+t[e+8],u=t[e+0]-t[e+8],h=(35468*t[e+4]>>16)-re(t[e+12]),l=re(t[e+4])+(35468*t[e+12]>>16);s[o+0]=c+l,s[o+1]=u+h,s[o+2]=u-h,s[o+3]=c-l,o+=4,e++}for(i=o=0;4>i;++i)c=(t=s[o+0]+4)+s[o+8],u=t-s[o+8],h=(35468*s[o+4]>>16)-re(s[o+12]),te(r,n,0,0,c+(l=re(s[o+4])+(35468*s[o+12]>>16))),te(r,n,1,0,u+h),te(r,n,2,0,u-h),te(r,n,3,0,c-l),o++,n+=32}function ie(t,e,r,n){var i=t[e+0]+4,a=35468*t[e+4]>>16,o=re(t[e+4]),s=35468*t[e+1]>>16;ee(r,n,0,i+o,t=re(t[e+1]),s),ee(r,n,1,i+a,t,s),ee(r,n,2,i-a,t,s),ee(r,n,3,i-o,t,s)}function ae(t,e,r,n,i){ne(t,e,r,n),i&&ne(t,e+16,r,n+4)}function oe(t,e,r,n){on(t,e+0,r,n,1),on(t,e+32,r,n+128,1)}function se(t,e,r,n){var i;for(t=t[e+0]+4,i=0;4>i;++i)for(e=0;4>e;++e)te(r,n,e,i,t)}function ce(t,e,r,n){t[e+0]&&un(t,e+0,r,n),t[e+16]&&un(t,e+16,r,n+4),t[e+32]&&un(t,e+32,r,n+128),t[e+48]&&un(t,e+48,r,n+128+4)}function ue(t,e,r,n){var i,o=a(16);for(i=0;4>i;++i){var s=t[e+0+i]+t[e+12+i],c=t[e+4+i]+t[e+8+i],u=t[e+4+i]-t[e+8+i],h=t[e+0+i]-t[e+12+i];o[0+i]=s+c,o[8+i]=s-c,o[4+i]=h+u,o[12+i]=h-u}for(i=0;4>i;++i)s=(t=o[0+4*i]+3)+o[3+4*i],c=o[1+4*i]+o[2+4*i],u=o[1+4*i]-o[2+4*i],h=t-o[3+4*i],r[n+0]=s+c>>3,r[n+16]=h+u>>3,r[n+32]=s-c>>3,r[n+48]=h-u>>3,n+=64}function he(t,e,r){var n,i=e-32,a=Bn,o=255-t[i-1];for(n=0;n<r;++n){var s,c=a,u=o+t[e-1];for(s=0;s<r;++s)t[e+s]=c[u+t[i+s]];e+=32}}function le(t,e){he(t,e,4)}function fe(t,e){he(t,e,8)}function de(t,e){he(t,e,16)}function pe(t,e){var r;for(r=0;16>r;++r)n(t,e+32*r,t,e-32,16)}function ge(t,e){var r;for(r=16;0<r;--r)i(t,e,t[e-1],16),e+=32}function me(t,e,r){var n;for(n=0;16>n;++n)i(e,r+32*n,t,16)}function ve(t,e){var r,n=16;for(r=0;16>r;++r)n+=t[e-1+32*r]+t[e+r-32];me(n>>5,t,e)}function be(t,e){var r,n=8;for(r=0;16>r;++r)n+=t[e-1+32*r];me(n>>4,t,e)}function ye(t,e){var r,n=8;for(r=0;16>r;++r)n+=t[e+r-32];me(n>>4,t,e)}function we(t,e){me(128,t,e)}function Ne(t,e,r){return t+2*e+r+2>>2}function Le(t,e){var r,i=e-32;i=new Uint8Array([Ne(t[i-1],t[i+0],t[i+1]),Ne(t[i+0],t[i+1],t[i+2]),Ne(t[i+1],t[i+2],t[i+3]),Ne(t[i+2],t[i+3],t[i+4])]);for(r=0;4>r;++r)n(t,e+32*r,i,0,i.length)}function Ae(t,e){var r=t[e-1],n=t[e-1+32],i=t[e-1+64],a=t[e-1+96];I(t,e+0,16843009*Ne(t[e-1-32],r,n)),I(t,e+32,16843009*Ne(r,n,i)),I(t,e+64,16843009*Ne(n,i,a)),I(t,e+96,16843009*Ne(i,a,a))}function xe(t,e){var r,n=4;for(r=0;4>r;++r)n+=t[e+r-32]+t[e-1+32*r];for(n>>=3,r=0;4>r;++r)i(t,e+32*r,n,4)}function Se(t,e){var r=t[e-1+0],n=t[e-1+32],i=t[e-1+64],a=t[e-1-32],o=t[e+0-32],s=t[e+1-32],c=t[e+2-32],u=t[e+3-32];t[e+0+96]=Ne(n,i,t[e-1+96]),t[e+1+96]=t[e+0+64]=Ne(r,n,i),t[e+2+96]=t[e+1+64]=t[e+0+32]=Ne(a,r,n),t[e+3+96]=t[e+2+64]=t[e+1+32]=t[e+0+0]=Ne(o,a,r),t[e+3+64]=t[e+2+32]=t[e+1+0]=Ne(s,o,a),t[e+3+32]=t[e+2+0]=Ne(c,s,o),t[e+3+0]=Ne(u,c,s)}function _e(t,e){var r=t[e+1-32],n=t[e+2-32],i=t[e+3-32],a=t[e+4-32],o=t[e+5-32],s=t[e+6-32],c=t[e+7-32];t[e+0+0]=Ne(t[e+0-32],r,n),t[e+1+0]=t[e+0+32]=Ne(r,n,i),t[e+2+0]=t[e+1+32]=t[e+0+64]=Ne(n,i,a),t[e+3+0]=t[e+2+32]=t[e+1+64]=t[e+0+96]=Ne(i,a,o),t[e+3+32]=t[e+2+64]=t[e+1+96]=Ne(a,o,s),t[e+3+64]=t[e+2+96]=Ne(o,s,c),t[e+3+96]=Ne(s,c,c)}function Pe(t,e){var r=t[e-1+0],n=t[e-1+32],i=t[e-1+64],a=t[e-1-32],o=t[e+0-32],s=t[e+1-32],c=t[e+2-32],u=t[e+3-32];t[e+0+0]=t[e+1+64]=a+o+1>>1,t[e+1+0]=t[e+2+64]=o+s+1>>1,t[e+2+0]=t[e+3+64]=s+c+1>>1,t[e+3+0]=c+u+1>>1,t[e+0+96]=Ne(i,n,r),t[e+0+64]=Ne(n,r,a),t[e+0+32]=t[e+1+96]=Ne(r,a,o),t[e+1+32]=t[e+2+96]=Ne(a,o,s),t[e+2+32]=t[e+3+96]=Ne(o,s,c),t[e+3+32]=Ne(s,c,u)}function ke(t,e){var r=t[e+0-32],n=t[e+1-32],i=t[e+2-32],a=t[e+3-32],o=t[e+4-32],s=t[e+5-32],c=t[e+6-32],u=t[e+7-32];t[e+0+0]=r+n+1>>1,t[e+1+0]=t[e+0+64]=n+i+1>>1,t[e+2+0]=t[e+1+64]=i+a+1>>1,t[e+3+0]=t[e+2+64]=a+o+1>>1,t[e+0+32]=Ne(r,n,i),t[e+1+32]=t[e+0+96]=Ne(n,i,a),t[e+2+32]=t[e+1+96]=Ne(i,a,o),t[e+3+32]=t[e+2+96]=Ne(a,o,s),t[e+3+64]=Ne(o,s,c),t[e+3+96]=Ne(s,c,u)}function Ie(t,e){var r=t[e-1+0],n=t[e-1+32],i=t[e-1+64],a=t[e-1+96];t[e+0+0]=r+n+1>>1,t[e+2+0]=t[e+0+32]=n+i+1>>1,t[e+2+32]=t[e+0+64]=i+a+1>>1,t[e+1+0]=Ne(r,n,i),t[e+3+0]=t[e+1+32]=Ne(n,i,a),t[e+3+32]=t[e+1+64]=Ne(i,a,a),t[e+3+64]=t[e+2+64]=t[e+0+96]=t[e+1+96]=t[e+2+96]=t[e+3+96]=a}function Fe(t,e){var r=t[e-1+0],n=t[e-1+32],i=t[e-1+64],a=t[e-1+96],o=t[e-1-32],s=t[e+0-32],c=t[e+1-32],u=t[e+2-32];t[e+0+0]=t[e+2+32]=r+o+1>>1,t[e+0+32]=t[e+2+64]=n+r+1>>1,t[e+0+64]=t[e+2+96]=i+n+1>>1,t[e+0+96]=a+i+1>>1,t[e+3+0]=Ne(s,c,u),t[e+2+0]=Ne(o,s,c),t[e+1+0]=t[e+3+32]=Ne(r,o,s),t[e+1+32]=t[e+3+64]=Ne(n,r,o),t[e+1+64]=t[e+3+96]=Ne(i,n,r),t[e+1+96]=Ne(a,i,n)}function Ce(t,e){var r;for(r=0;8>r;++r)n(t,e+32*r,t,e-32,8)}function je(t,e){var r;for(r=0;8>r;++r)i(t,e,t[e-1],8),e+=32}function Oe(t,e,r){var n;for(n=0;8>n;++n)i(e,r+32*n,t,8)}function Be(t,e){var r,n=8;for(r=0;8>r;++r)n+=t[e+r-32]+t[e-1+32*r];Oe(n>>4,t,e)}function Me(t,e){var r,n=4;for(r=0;8>r;++r)n+=t[e+r-32];Oe(n>>3,t,e)}function Ee(t,e){var r,n=4;for(r=0;8>r;++r)n+=t[e-1+32*r];Oe(n>>3,t,e)}function qe(t,e){Oe(128,t,e)}function De(t,e,r){var n=t[e-r],i=t[e+0],a=3*(i-n)+jn[1020+t[e-2*r]-t[e+r]],o=On[112+(a+4>>3)];t[e-r]=Bn[255+n+On[112+(a+3>>3)]],t[e+0]=Bn[255+i-o]}function Re(t,e,r,n){var i=t[e+0],a=t[e+r];return Mn[255+t[e-2*r]-t[e-r]]>n||Mn[255+a-i]>n}function Te(t,e,r,n){return 4*Mn[255+t[e-r]-t[e+0]]+Mn[255+t[e-2*r]-t[e+r]]<=n}function Ue(t,e,r,n,i){var a=t[e-3*r],o=t[e-2*r],s=t[e-r],c=t[e+0],u=t[e+r],h=t[e+2*r],l=t[e+3*r];return 4*Mn[255+s-c]+Mn[255+o-u]>n?0:Mn[255+t[e-4*r]-a]<=i&&Mn[255+a-o]<=i&&Mn[255+o-s]<=i&&Mn[255+l-h]<=i&&Mn[255+h-u]<=i&&Mn[255+u-c]<=i}function ze(t,e,r,n){var i=2*n+1;for(n=0;16>n;++n)Te(t,e+n,r,i)&&De(t,e+n,r)}function He(t,e,r,n){var i=2*n+1;for(n=0;16>n;++n)Te(t,e+n*r,1,i)&&De(t,e+n*r,1)}function We(t,e,r,n){var i;for(i=3;0<i;--i)ze(t,e+=4*r,r,n)}function Ve(t,e,r,n){var i;for(i=3;0<i;--i)He(t,e+=4,r,n)}function Ge(t,e,r,n,i,a,o,s){for(a=2*a+1;0<i--;){if(Ue(t,e,r,a,o))if(Re(t,e,r,s))De(t,e,r);else{var c=t,u=e,h=r,l=c[u-2*h],f=c[u-h],d=c[u+0],p=c[u+h],g=c[u+2*h],m=27*(b=jn[1020+3*(d-f)+jn[1020+l-p]])+63>>7,v=18*b+63>>7,b=9*b+63>>7;c[u-3*h]=Bn[255+c[u-3*h]+b],c[u-2*h]=Bn[255+l+v],c[u-h]=Bn[255+f+m],c[u+0]=Bn[255+d-m],c[u+h]=Bn[255+p-v],c[u+2*h]=Bn[255+g-b]}e+=n}}function Ye(t,e,r,n,i,a,o,s){for(a=2*a+1;0<i--;){if(Ue(t,e,r,a,o))if(Re(t,e,r,s))De(t,e,r);else{var c=t,u=e,h=r,l=c[u-h],f=c[u+0],d=c[u+h],p=On[112+((g=3*(f-l))+4>>3)],g=On[112+(g+3>>3)],m=p+1>>1;c[u-2*h]=Bn[255+c[u-2*h]+m],c[u-h]=Bn[255+l+g],c[u+0]=Bn[255+f-p],c[u+h]=Bn[255+d-m]}e+=n}}function Je(t,e,r,n,i,a){Ge(t,e,r,1,16,n,i,a)}function Xe(t,e,r,n,i,a){Ge(t,e,1,r,16,n,i,a)}function Ke(t,e,r,n,i,a){var o;for(o=3;0<o;--o)Ye(t,e+=4*r,r,1,16,n,i,a)}function Ze(t,e,r,n,i,a){var o;for(o=3;0<o;--o)Ye(t,e+=4,1,r,16,n,i,a)}function $e(t,e,r,n,i,a,o,s){Ge(t,e,i,1,8,a,o,s),Ge(r,n,i,1,8,a,o,s)}function Qe(t,e,r,n,i,a,o,s){Ge(t,e,1,i,8,a,o,s),Ge(r,n,1,i,8,a,o,s)}function tr(t,e,r,n,i,a,o,s){Ye(t,e+4*i,i,1,8,a,o,s),Ye(r,n+4*i,i,1,8,a,o,s)}function er(t,e,r,n,i,a,o,s){Ye(t,e+4,1,i,8,a,o,s),Ye(r,n+4,1,i,8,a,o,s)}function rr(){this.ba=new ot,this.ec=[],this.cc=[],this.Mc=[],this.Dc=this.Nc=this.dc=this.fc=0,this.Oa=new ct,this.memory=0,this.Ib=\"OutputFunc\",this.Jb=\"OutputAlphaFunc\",this.Nd=\"OutputRowFunc\"}function nr(){this.data=[],this.offset=this.kd=this.ha=this.w=0,this.na=[],this.xa=this.gb=this.Ja=this.Sa=this.P=0}function ir(){this.nc=this.Ea=this.b=this.hc=0,this.K=[],this.w=0}function ar(){this.ua=0,this.Wa=new M,this.vb=new M,this.md=this.xc=this.wc=0,this.vc=[],this.Wb=0,this.Ya=new d,this.yc=new l}function or(){this.xb=this.a=0,this.l=new Gt,this.ca=new ot,this.V=[],this.Ba=0,this.Ta=[],this.Ua=0,this.m=new N,this.Pb=0,this.wd=new N,this.Ma=this.$=this.C=this.i=this.c=this.xd=0,this.s=new ar,this.ab=0,this.gc=o(4,ir),this.Oc=0}function sr(){this.Lc=this.Z=this.$a=this.i=this.c=0,this.l=new Gt,this.ic=0,this.ca=[],this.tb=0,this.qd=null,this.rd=0}function cr(t,e,r,n,i,a,o){for(t=null==t?0:t[e+0],e=0;e<o;++e)i[a+e]=t+r[n+e]&255,t=i[a+e]}function ur(t,e,r,n,i,a,o){var s;if(null==t)cr(null,null,r,n,i,a,o);else for(s=0;s<o;++s)i[a+s]=t[e+s]+r[n+s]&255}function hr(t,e,r,n,i,a,o){if(null==t)cr(null,null,r,n,i,a,o);else{var s,c=t[e+0],u=c,h=c;for(s=0;s<o;++s)u=h+(c=t[e+s])-u,h=r[n+s]+(-256&u?0>u?0:255:u)&255,u=c,i[a+s]=h}}function lr(t,r,i,o){var s=r.width,c=r.o;if(e(null!=t&&null!=r),0>i||0>=o||i+o>c)return null;if(!t.Cc){if(null==t.ga){var u;if(t.ga=new sr,(u=null==t.ga)||(u=r.width*r.o,e(0==t.Gb.length),t.Gb=a(u),t.Uc=0,null==t.Gb?u=0:(t.mb=t.Gb,t.nb=t.Uc,t.rc=null,u=1),u=!u),!u){u=t.ga;var h=t.Fa,l=t.P,f=t.qc,d=t.mb,p=t.nb,g=l+1,m=f-1,b=u.l;if(e(null!=h&&null!=d&&null!=r),mi[0]=null,mi[1]=cr,mi[2]=ur,mi[3]=hr,u.ca=d,u.tb=p,u.c=r.width,u.i=r.height,e(0<u.c&&0<u.i),1>=f)r=0;else if(u.$a=h[l+0]>>0&3,u.Z=h[l+0]>>2&3,u.Lc=h[l+0]>>4&3,l=h[l+0]>>6&3,0>u.$a||1<u.$a||4<=u.Z||1<u.Lc||l)r=0;else if(b.put=dt,b.ac=ft,b.bc=pt,b.ma=u,b.width=r.width,b.height=r.height,b.Da=r.Da,b.v=r.v,b.va=r.va,b.j=r.j,b.o=r.o,u.$a)t:{e(1==u.$a),r=kt();e:for(;;){if(null==r){r=0;break t}if(e(null!=u),u.mc=r,r.c=u.c,r.i=u.i,r.l=u.l,r.l.ma=u,r.l.width=u.c,r.l.height=u.i,r.a=0,v(r.m,h,g,m),!It(u.c,u.i,1,r,null))break e;if(1==r.ab&&3==r.gc[0].hc&&At(r.s)?(u.ic=1,h=r.c*r.i,r.Ta=null,r.Ua=0,r.V=a(h),r.Ba=0,null==r.V?(r.a=1,r=0):r=1):(u.ic=0,r=Ft(r,u.c)),!r)break e;r=1;break t}u.mc=null,r=0}else r=m>=u.c*u.i;u=!r}if(u)return null;1!=t.ga.Lc?t.Ga=0:o=c-i}e(null!=t.ga),e(i+o<=c);t:{if(r=(h=t.ga).c,c=h.l.o,0==h.$a){if(g=t.rc,m=t.Vc,b=t.Fa,l=t.P+1+i*r,f=t.mb,d=t.nb+i*r,e(l<=t.P+t.qc),0!=h.Z)for(e(null!=mi[h.Z]),u=0;u<o;++u)mi[h.Z](g,m,b,l,f,d,r),g=f,m=d,d+=r,l+=r;else for(u=0;u<o;++u)n(f,d,b,l,r),g=f,m=d,d+=r,l+=r;t.rc=g,t.Vc=m}else{if(e(null!=h.mc),r=i+o,e(null!=(u=h.mc)),e(r<=u.i),u.C>=r)r=1;else if(h.ic||mr(),h.ic){h=u.V,g=u.Ba,m=u.c;var y=u.i,w=(b=1,l=u.$/m,f=u.$%m,d=u.m,p=u.s,u.$),N=m*y,L=m*r,x=p.wc,_=w<L?wt(p,f,l):null;e(w<=N),e(r<=y),e(At(p));e:for(;;){for(;!d.h&&w<L;){if(f&x||(_=wt(p,f,l)),e(null!=_),S(d),256>(y=bt(_.G[0],_.H[0],d)))h[g+w]=y,++w,++f>=m&&(f=0,++l<=r&&!(l%16)&&St(u,l));else{if(!(280>y)){b=0;break e}y=mt(y-256,d);var P,k=bt(_.G[4],_.H[4],d);if(S(d),!(w>=(k=vt(m,k=mt(k,d)))&&N-w>=y)){b=0;break e}for(P=0;P<y;++P)h[g+w+P]=h[g+w+P-k];for(w+=y,f+=y;f>=m;)f-=m,++l<=r&&!(l%16)&&St(u,l);w<L&&f&x&&(_=wt(p,f,l))}e(d.h==A(d))}St(u,l>r?r:l);break e}!b||d.h&&w<N?(b=0,u.a=d.h?5:3):u.$=w,r=b}else r=_t(u,u.V,u.Ba,u.c,u.i,r,Ct);if(!r){o=0;break t}}i+o>=c&&(t.Cc=1),o=1}if(!o)return null;if(t.Cc&&(null!=(o=t.ga)&&(o.mc=null),t.ga=null,0<t.Ga))return alert(\"todo:WebPDequantizeLevels\"),null}return t.nb+i*s}function fr(t,e,r,n,i,a){for(;0<i--;){var o,s=t,c=e+(r?1:0),u=t,h=e+(r?0:3);for(o=0;o<n;++o){var l=u[h+4*o];255!=l&&(l*=32897,s[c+4*o+0]=s[c+4*o+0]*l>>23,s[c+4*o+1]=s[c+4*o+1]*l>>23,s[c+4*o+2]=s[c+4*o+2]*l>>23)}e+=a}}function dr(t,e,r,n,i){for(;0<n--;){var a;for(a=0;a<r;++a){var o=t[e+2*a+0],s=15&(u=t[e+2*a+1]),c=4369*s,u=(240&u|u>>4)*c>>16;t[e+2*a+0]=(240&o|o>>4)*c>>16&240|(15&o|o<<4)*c>>16>>4&15,t[e+2*a+1]=240&u|s}e+=i}}function pr(t,e,r,n,i,a,o,s){var c,u,h=255;for(u=0;u<i;++u){for(c=0;c<n;++c){var l=t[e+c];a[o+4*c]=l,h&=l}e+=r,o+=s}return 255!=h}function gr(t,e,r,n,i){var a;for(a=0;a<i;++a)r[n+a]=t[e+a]>>8}function mr(){An=fr,xn=dr,Sn=pr,_n=gr}function vr(r,n,i){t[r]=function(t,r,a,o,s,c,u,h,l,f,d,p,g,m,v,b,y){var w,N=y-1>>1,L=s[c+0]|u[h+0]<<16,A=l[f+0]|d[p+0]<<16;e(null!=t);var x=3*L+A+131074>>2;for(n(t[r+0],255&x,x>>16,g,m),null!=a&&(x=3*A+L+131074>>2,n(a[o+0],255&x,x>>16,v,b)),w=1;w<=N;++w){var S=s[c+w]|u[h+w]<<16,_=l[f+w]|d[p+w]<<16,P=L+S+A+_+524296,k=P+2*(S+A)>>3;x=k+L>>1,L=(P=P+2*(L+_)>>3)+S>>1,n(t[r+2*w-1],255&x,x>>16,g,m+(2*w-1)*i),n(t[r+2*w-0],255&L,L>>16,g,m+(2*w-0)*i),null!=a&&(x=P+A>>1,L=k+_>>1,n(a[o+2*w-1],255&x,x>>16,v,b+(2*w-1)*i),n(a[o+2*w+0],255&L,L>>16,v,b+(2*w+0)*i)),L=S,A=_}1&y||(x=3*L+A+131074>>2,n(t[r+y-1],255&x,x>>16,g,m+(y-1)*i),null!=a&&(x=3*A+L+131074>>2,n(a[o+y-1],255&x,x>>16,v,b+(y-1)*i)))}}function br(){vi[En]=bi,vi[qn]=wi,vi[Dn]=yi,vi[Rn]=Ni,vi[Tn]=Li,vi[Un]=Ai,vi[zn]=xi,vi[Hn]=wi,vi[Wn]=Ni,vi[Vn]=Li,vi[Gn]=Ai}function yr(t){return t&~Fi?0>t?0:255:t>>Ii}function wr(t,e){return yr((19077*t>>8)+(26149*e>>8)-14234)}function Nr(t,e,r){return yr((19077*t>>8)-(6419*e>>8)-(13320*r>>8)+8708)}function Lr(t,e){return yr((19077*t>>8)+(33050*e>>8)-17685)}function Ar(t,e,r,n,i){n[i+0]=wr(t,r),n[i+1]=Nr(t,e,r),n[i+2]=Lr(t,e)}function xr(t,e,r,n,i){n[i+0]=Lr(t,e),n[i+1]=Nr(t,e,r),n[i+2]=wr(t,r)}function Sr(t,e,r,n,i){var a=Nr(t,e,r);e=a<<3&224|Lr(t,e)>>3,n[i+0]=248&wr(t,r)|a>>5,n[i+1]=e}function _r(t,e,r,n,i){var a=240&Lr(t,e)|15;n[i+0]=240&wr(t,r)|Nr(t,e,r)>>4,n[i+1]=a}function Pr(t,e,r,n,i){n[i+0]=255,Ar(t,e,r,n,i+1)}function kr(t,e,r,n,i){xr(t,e,r,n,i),n[i+3]=255}function Ir(t,e,r,n,i){Ar(t,e,r,n,i),n[i+3]=255}function Vt(t,e){return 0>t?0:t>e?e:t}function Fr(e,r,n){t[e]=function(t,e,i,a,o,s,c,u,h){for(var l=u+(-2&h)*n;u!=l;)r(t[e+0],i[a+0],o[s+0],c,u),r(t[e+1],i[a+0],o[s+0],c,u+n),e+=2,++a,++s,u+=2*n;1&h&&r(t[e+0],i[a+0],o[s+0],c,u)}}function Cr(t,e,r){return 0==r?0==t?0==e?6:5:0==e?4:0:r}function jr(t,e,r,n,i){switch(t>>>30){case 3:on(e,r,n,i,0);break;case 2:sn(e,r,n,i);break;case 1:un(e,r,n,i)}}function Or(t,e){var r,a,o=e.M,s=e.Nb,c=t.oc,u=t.pc+40,h=t.oc,l=t.pc+584,f=t.oc,d=t.pc+600;for(r=0;16>r;++r)c[u+32*r-1]=129;for(r=0;8>r;++r)h[l+32*r-1]=129,f[d+32*r-1]=129;for(0<o?c[u-1-32]=h[l-1-32]=f[d-1-32]=129:(i(c,u-32-1,127,21),i(h,l-32-1,127,9),i(f,d-32-1,127,9)),a=0;a<t.za;++a){var p=e.ya[e.aa+a];if(0<a){for(r=-1;16>r;++r)n(c,u+32*r-4,c,u+32*r+12,4);for(r=-1;8>r;++r)n(h,l+32*r-4,h,l+32*r+4,4),n(f,d+32*r-4,f,d+32*r+4,4)}var g=t.Gd,m=t.Hd+a,v=p.ad,b=p.Hc;if(0<o&&(n(c,u-32,g[m].y,0,16),n(h,l-32,g[m].f,0,8),n(f,d-32,g[m].ea,0,8)),p.Za){var y=c,w=u-32+16;for(0<o&&(a>=t.za-1?i(y,w,g[m].y[15],4):n(y,w,g[m+1].y,0,4)),r=0;4>r;r++)y[w+128+r]=y[w+256+r]=y[w+384+r]=y[w+0+r];for(r=0;16>r;++r,b<<=2)y=c,w=u+Di[r],fi[p.Ob[r]](y,w),jr(b,v,16*+r,y,w)}else if(y=Cr(a,o,p.Ob[0]),li[y](c,u),0!=b)for(r=0;16>r;++r,b<<=2)jr(b,v,16*+r,c,u+Di[r]);for(r=p.Gc,y=Cr(a,o,p.Dd),di[y](h,l),di[y](f,d),b=v,y=h,w=l,255&(p=r>>0)&&(170&p?cn(b,256,y,w):hn(b,256,y,w)),p=f,b=d,255&(r>>=8)&&(170&r?cn(v,320,p,b):hn(v,320,p,b)),o<t.Ub-1&&(n(g[m].y,0,c,u+480,16),n(g[m].f,0,h,l+224,8),n(g[m].ea,0,f,d+224,8)),r=8*s*t.B,g=t.sa,m=t.ta+16*a+16*s*t.R,v=t.qa,p=t.ra+8*a+r,b=t.Ha,y=t.Ia+8*a+r,r=0;16>r;++r)n(g,m+r*t.R,c,u+32*r,16);for(r=0;8>r;++r)n(v,p+r*t.B,h,l+32*r,8),n(b,y+r*t.B,f,d+32*r,8)}}function Br(t,n,i,a,o,s,c,u,h){var l=[0],f=[0],d=0,p=null!=h?h.kd:0,g=null!=h?h:new nr;if(null==t||12>i)return 7;g.data=t,g.w=n,g.ha=i,n=[n],i=[i],g.gb=[g.gb];t:{var m=n,b=i,y=g.gb;if(e(null!=t),e(null!=b),e(null!=y),y[0]=0,12<=b[0]&&!r(t,m[0],\"RIFF\")){if(r(t,m[0]+8,\"WEBP\")){y=3;break t}var w=j(t,m[0]+4);if(12>w||4294967286<w){y=3;break t}if(p&&w>b[0]-8){y=7;break t}y[0]=w,m[0]+=12,b[0]-=12}y=0}if(0!=y)return y;for(w=0<g.gb[0],i=i[0];;){t:{var L=t;b=n,y=i;var A=l,x=f,S=m=[0];if((k=d=[d])[0]=0,8>y[0])y=7;else{if(!r(L,b[0],\"VP8X\")){if(10!=j(L,b[0]+4)){y=3;break t}if(18>y[0]){y=7;break t}var _=j(L,b[0]+8),P=1+C(L,b[0]+12);if(2147483648<=P*(L=1+C(L,b[0]+15))){y=3;break t}null!=S&&(S[0]=_),null!=A&&(A[0]=P),null!=x&&(x[0]=L),b[0]+=18,y[0]-=18,k[0]=1}y=0}}if(d=d[0],m=m[0],0!=y)return y;if(b=!!(2&m),!w&&d)return 3;if(null!=s&&(s[0]=!!(16&m)),null!=c&&(c[0]=b),null!=u&&(u[0]=0),c=l[0],m=f[0],d&&b&&null==h){y=0;break}if(4>i){y=7;break}if(w&&d||!w&&!d&&!r(t,n[0],\"ALPH\")){i=[i],g.na=[g.na],g.P=[g.P],g.Sa=[g.Sa];t:{_=t,y=n,w=i;var k=g.gb;A=g.na,x=g.P,S=g.Sa;P=22,e(null!=_),e(null!=w),L=y[0];var I=w[0];for(e(null!=A),e(null!=S),A[0]=null,x[0]=null,S[0]=0;;){if(y[0]=L,w[0]=I,8>I){y=7;break t}var F=j(_,L+4);if(4294967286<F){y=3;break t}var O=8+F+1&-2;if(P+=O,0<k&&P>k){y=3;break t}if(!r(_,L,\"VP8 \")||!r(_,L,\"VP8L\")){y=0;break t}if(I[0]<O){y=7;break t}r(_,L,\"ALPH\")||(A[0]=_,x[0]=L+8,S[0]=F),L+=O,I-=O}}if(i=i[0],g.na=g.na[0],g.P=g.P[0],g.Sa=g.Sa[0],0!=y)break}i=[i],g.Ja=[g.Ja],g.xa=[g.xa];t:if(k=t,y=n,w=i,A=g.gb[0],x=g.Ja,S=g.xa,_=y[0],L=!r(k,_,\"VP8 \"),P=!r(k,_,\"VP8L\"),e(null!=k),e(null!=w),e(null!=x),e(null!=S),8>w[0])y=7;else{if(L||P){if(k=j(k,_+4),12<=A&&k>A-12){y=3;break t}if(p&&k>w[0]-8){y=7;break t}x[0]=k,y[0]+=8,w[0]-=8,S[0]=P}else S[0]=5<=w[0]&&47==k[_+0]&&!(k[_+4]>>5),x[0]=w[0];y=0}if(i=i[0],g.Ja=g.Ja[0],g.xa=g.xa[0],n=n[0],0!=y)break;if(4294967286<g.Ja)return 3;if(null==u||b||(u[0]=g.xa?2:1),c=[c],m=[m],g.xa){if(5>i){y=7;break}u=c,p=m,b=s,null==t||5>i?t=0:5<=i&&47==t[n+0]&&!(t[n+4]>>5)?(w=[0],k=[0],A=[0],v(x=new N,t,n,i),gt(x,w,k,A)?(null!=u&&(u[0]=w[0]),null!=p&&(p[0]=k[0]),null!=b&&(b[0]=A[0]),t=1):t=0):t=0}else{if(10>i){y=7;break}u=m,null==t||10>i||!Xt(t,n+3,i-3)?t=0:(p=t[n+0]|t[n+1]<<8|t[n+2]<<16,b=16383&(t[n+7]<<8|t[n+6]),t=16383&(t[n+9]<<8|t[n+8]),1&p||3<(p>>1&7)||!(p>>4&1)||p>>5>=g.Ja||!b||!t?t=0:(c&&(c[0]=b),u&&(u[0]=t),t=1))}if(!t)return 3;if(c=c[0],m=m[0],d&&(l[0]!=c||f[0]!=m))return 3;null!=h&&(h[0]=g,h.offset=n-h.w,e(4294967286>n-h.w),e(h.offset==h.ha-i));break}return 0==y||7==y&&d&&null==h?(null!=s&&(s[0]|=null!=g.na&&0<g.na.length),null!=a&&(a[0]=c),null!=o&&(o[0]=m),0):y}function Mr(t,e,r){var n=e.width,i=e.height,a=0,o=0,s=n,c=i;if(e.Da=null!=t&&0<t.Da,e.Da&&(s=t.cd,c=t.bd,a=t.v,o=t.j,11>r||(a&=-2,o&=-2),0>a||0>o||0>=s||0>=c||a+s>n||o+c>i))return 0;if(e.v=a,e.j=o,e.va=a+s,e.o=o+c,e.U=s,e.T=c,e.da=null!=t&&0<t.da,e.da){if(!E(s,c,r=[t.ib],a=[t.hb]))return 0;e.ib=r[0],e.hb=a[0]}return e.ob=null!=t&&t.ob,e.Kb=null==t||!t.Sd,e.da&&(e.ob=e.ib<3*n/4&&e.hb<3*i/4,e.Kb=0),1}function Er(t){if(null==t)return 2;if(11>t.S){var e=t.f.RGBA;e.fb+=(t.height-1)*e.A,e.A=-e.A}else e=t.f.kb,t=t.height,e.O+=(t-1)*e.fa,e.fa=-e.fa,e.N+=(t-1>>1)*e.Ab,e.Ab=-e.Ab,e.W+=(t-1>>1)*e.Db,e.Db=-e.Db,null!=e.F&&(e.J+=(t-1)*e.lb,e.lb=-e.lb);return 0}function qr(t,e,r,n){if(null==n||0>=t||0>=e)return 2;if(null!=r){if(r.Da){var i=r.cd,o=r.bd,s=-2&r.v,c=-2&r.j;if(0>s||0>c||0>=i||0>=o||s+i>t||c+o>e)return 2;t=i,e=o}if(r.da){if(!E(t,e,i=[r.ib],o=[r.hb]))return 2;t=i[0],e=o[0]}}n.width=t,n.height=e;t:{var u=n.width,h=n.height;if(t=n.S,0>=u||0>=h||!(t>=En&&13>t))t=2;else{if(0>=n.Rd&&null==n.sd){s=o=i=e=0;var l=(c=u*zi[t])*h;if(11>t||(o=(h+1)/2*(e=(u+1)/2),12==t&&(s=(i=u)*h)),null==(h=a(l+2*o+s))){t=1;break t}n.sd=h,11>t?((u=n.f.RGBA).eb=h,u.fb=0,u.A=c,u.size=l):((u=n.f.kb).y=h,u.O=0,u.fa=c,u.Fd=l,u.f=h,u.N=0+l,u.Ab=e,u.Cd=o,u.ea=h,u.W=0+l+o,u.Db=e,u.Ed=o,12==t&&(u.F=h,u.J=0+l+2*o),u.Tc=s,u.lb=i)}if(e=1,i=n.S,o=n.width,s=n.height,i>=En&&13>i)if(11>i)t=n.f.RGBA,e&=(c=Math.abs(t.A))*(s-1)+o<=t.size,e&=c>=o*zi[i],e&=null!=t.eb;else{t=n.f.kb,c=(o+1)/2,l=(s+1)/2,u=Math.abs(t.fa);h=Math.abs(t.Ab);var f=Math.abs(t.Db),d=Math.abs(t.lb),p=d*(s-1)+o;e&=u*(s-1)+o<=t.Fd,e&=h*(l-1)+c<=t.Cd,e=(e&=f*(l-1)+c<=t.Ed)&u>=o&h>=c&f>=c,e&=null!=t.y,e&=null!=t.f,e&=null!=t.ea,12==i&&(e&=d>=o,e&=p<=t.Tc,e&=null!=t.F)}else e=0;t=e?0:2}}return 0!=t||null!=r&&r.fd&&(t=Er(n)),t}var Dr=64,Rr=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535,131071,262143,524287,1048575,2097151,4194303,8388607,16777215],Tr=24,Ur=32,zr=8,Hr=[0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7];R(\"Predictor0\",\"PredictorAdd0\"),t.Predictor0=function(){return 4278190080},t.Predictor1=function(t){return t},t.Predictor2=function(t,e,r){return e[r+0]},t.Predictor3=function(t,e,r){return e[r+1]},t.Predictor4=function(t,e,r){return e[r-1]},t.Predictor5=function(t,e,r){return U(U(t,e[r+1]),e[r+0])},t.Predictor6=function(t,e,r){return U(t,e[r-1])},t.Predictor7=function(t,e,r){return U(t,e[r+0])},t.Predictor8=function(t,e,r){return U(e[r-1],e[r+0])},t.Predictor9=function(t,e,r){return U(e[r+0],e[r+1])},t.Predictor10=function(t,e,r){return U(U(t,e[r-1]),U(e[r+0],e[r+1]))},t.Predictor11=function(t,e,r){var n=e[r+0];return 0>=W(n>>24&255,t>>24&255,(e=e[r-1])>>24&255)+W(n>>16&255,t>>16&255,e>>16&255)+W(n>>8&255,t>>8&255,e>>8&255)+W(255&n,255&t,255&e)?n:t},t.Predictor12=function(t,e,r){var n=e[r+0];return(z((t>>24&255)+(n>>24&255)-((e=e[r-1])>>24&255))<<24|z((t>>16&255)+(n>>16&255)-(e>>16&255))<<16|z((t>>8&255)+(n>>8&255)-(e>>8&255))<<8|z((255&t)+(255&n)-(255&e)))>>>0},t.Predictor13=function(t,e,r){var n=e[r-1];return(H((t=U(t,e[r+0]))>>24&255,n>>24&255)<<24|H(t>>16&255,n>>16&255)<<16|H(t>>8&255,n>>8&255)<<8|H(t>>0&255,n>>0&255))>>>0};var Wr=t.PredictorAdd0;t.PredictorAdd1=V,R(\"Predictor2\",\"PredictorAdd2\"),R(\"Predictor3\",\"PredictorAdd3\"),R(\"Predictor4\",\"PredictorAdd4\"),R(\"Predictor5\",\"PredictorAdd5\"),R(\"Predictor6\",\"PredictorAdd6\"),R(\"Predictor7\",\"PredictorAdd7\"),R(\"Predictor8\",\"PredictorAdd8\"),R(\"Predictor9\",\"PredictorAdd9\"),R(\"Predictor10\",\"PredictorAdd10\"),R(\"Predictor11\",\"PredictorAdd11\"),R(\"Predictor12\",\"PredictorAdd12\"),R(\"Predictor13\",\"PredictorAdd13\");var Vr=t.PredictorAdd2;X(\"ColorIndexInverseTransform\",\"MapARGB\",\"32b\",(function(t){return t>>8&255}),(function(t){return t})),X(\"VP8LColorIndexInverseTransformAlpha\",\"MapAlpha\",\"8b\",(function(t){return t}),(function(t){return t>>8&255}));var Gr,Yr=t.ColorIndexInverseTransform,Jr=t.MapARGB,Xr=t.VP8LColorIndexInverseTransformAlpha,Kr=t.MapAlpha,Zr=t.VP8LPredictorsAdd=[];Zr.length=16,(t.VP8LPredictors=[]).length=16,(t.VP8LPredictorsAdd_C=[]).length=16,(t.VP8LPredictors_C=[]).length=16;var $r,Qr,tn,en,rn,nn,an,on,sn,cn,un,hn,ln,fn,dn,pn,gn,mn,vn,bn,yn,wn,Nn,Ln,An,xn,Sn,_n,Pn=a(511),kn=a(2041),In=a(225),Fn=a(767),Cn=0,jn=kn,On=In,Bn=Fn,Mn=Pn,En=0,qn=1,Dn=2,Rn=3,Tn=4,Un=5,zn=6,Hn=7,Wn=8,Vn=9,Gn=10,Yn=[2,3,7],Jn=[3,3,11],Xn=[280,256,256,256,40],Kn=[0,1,1,1,0],Zn=[17,18,0,1,2,3,4,5,16,6,7,8,9,10,11,12,13,14,15],$n=[24,7,23,25,40,6,39,41,22,26,38,42,56,5,55,57,21,27,54,58,37,43,72,4,71,73,20,28,53,59,70,74,36,44,88,69,75,52,60,3,87,89,19,29,86,90,35,45,68,76,85,91,51,61,104,2,103,105,18,30,102,106,34,46,84,92,67,77,101,107,50,62,120,1,119,121,83,93,17,31,100,108,66,78,118,122,33,47,117,123,49,63,99,109,82,94,0,116,124,65,79,16,32,98,110,48,115,125,81,95,64,114,126,97,111,80,113,127,96,112],Qn=[2954,2956,2958,2962,2970,2986,3018,3082,3212,3468,3980,5004],ti=8,ei=[4,5,6,7,8,9,10,10,11,12,13,14,15,16,17,17,18,19,20,20,21,21,22,22,23,23,24,25,25,26,27,28,29,30,31,32,33,34,35,36,37,37,38,39,40,41,42,43,44,45,46,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,93,95,96,98,100,101,102,104,106,108,110,112,114,116,118,122,124,126,128,130,132,134,136,138,140,143,145,148,151,154,157],ri=[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,119,122,125,128,131,134,137,140,143,146,149,152,155,158,161,164,167,170,173,177,181,185,189,193,197,201,205,209,213,217,221,225,229,234,239,245,249,254,259,264,269,274,279,284],ni=null,ii=[[173,148,140,0],[176,155,140,135,0],[180,157,141,134,130,0],[254,254,243,230,196,177,153,140,133,130,129,0]],ai=[0,1,4,8,5,2,3,6,9,12,13,10,7,11,14,15],oi=[-0,1,-1,2,-2,3,4,6,-3,5,-4,-5,-6,7,-7,8,-8,-9],si=[[[[128,128,128,128,128,128,128,128,128,128,128],[128,128,128,128,128,128,128,128,128,128,128],[128,128,128,128,128,128,128,128,128,128,128]],[[253,136,254,255,228,219,128,128,128,128,128],[189,129,242,255,227,213,255,219,128,128,128],[106,126,227,252,214,209,255,255,128,128,128]],[[1,98,248,255,236,226,255,255,128,128,128],[181,133,238,254,221,234,255,154,128,128,128],[78,134,202,247,198,180,255,219,128,128,128]],[[1,185,249,255,243,255,128,128,128,128,128],[184,150,247,255,236,224,128,128,128,128,128],[77,110,216,255,236,230,128,128,128,128,128]],[[1,101,251,255,241,255,128,128,128,128,128],[170,139,241,252,236,209,255,255,128,128,128],[37,116,196,243,228,255,255,255,128,128,128]],[[1,204,254,255,245,255,128,128,128,128,128],[207,160,250,255,238,128,128,128,128,128,128],[102,103,231,255,211,171,128,128,128,128,128]],[[1,152,252,255,240,255,128,128,128,128,128],[177,135,243,255,234,225,128,128,128,128,128],[80,129,211,255,194,224,128,128,128,128,128]],[[1,1,255,128,128,128,128,128,128,128,128],[246,1,255,128,128,128,128,128,128,128,128],[255,128,128,128,128,128,128,128,128,128,128]]],[[[198,35,237,223,193,187,162,160,145,155,62],[131,45,198,221,172,176,220,157,252,221,1],[68,47,146,208,149,167,221,162,255,223,128]],[[1,149,241,255,221,224,255,255,128,128,128],[184,141,234,253,222,220,255,199,128,128,128],[81,99,181,242,176,190,249,202,255,255,128]],[[1,129,232,253,214,197,242,196,255,255,128],[99,121,210,250,201,198,255,202,128,128,128],[23,91,163,242,170,187,247,210,255,255,128]],[[1,200,246,255,234,255,128,128,128,128,128],[109,178,241,255,231,245,255,255,128,128,128],[44,130,201,253,205,192,255,255,128,128,128]],[[1,132,239,251,219,209,255,165,128,128,128],[94,136,225,251,218,190,255,255,128,128,128],[22,100,174,245,186,161,255,199,128,128,128]],[[1,182,249,255,232,235,128,128,128,128,128],[124,143,241,255,227,234,128,128,128,128,128],[35,77,181,251,193,211,255,205,128,128,128]],[[1,157,247,255,236,231,255,255,128,128,128],[121,141,235,255,225,227,255,255,128,128,128],[45,99,188,251,195,217,255,224,128,128,128]],[[1,1,251,255,213,255,128,128,128,128,128],[203,1,248,255,255,128,128,128,128,128,128],[137,1,177,255,224,255,128,128,128,128,128]]],[[[253,9,248,251,207,208,255,192,128,128,128],[175,13,224,243,193,185,249,198,255,255,128],[73,17,171,221,161,179,236,167,255,234,128]],[[1,95,247,253,212,183,255,255,128,128,128],[239,90,244,250,211,209,255,255,128,128,128],[155,77,195,248,188,195,255,255,128,128,128]],[[1,24,239,251,218,219,255,205,128,128,128],[201,51,219,255,196,186,128,128,128,128,128],[69,46,190,239,201,218,255,228,128,128,128]],[[1,191,251,255,255,128,128,128,128,128,128],[223,165,249,255,213,255,128,128,128,128,128],[141,124,248,255,255,128,128,128,128,128,128]],[[1,16,248,255,255,128,128,128,128,128,128],[190,36,230,255,236,255,128,128,128,128,128],[149,1,255,128,128,128,128,128,128,128,128]],[[1,226,255,128,128,128,128,128,128,128,128],[247,192,255,128,128,128,128,128,128,128,128],[240,128,255,128,128,128,128,128,128,128,128]],[[1,134,252,255,255,128,128,128,128,128,128],[213,62,250,255,255,128,128,128,128,128,128],[55,93,255,128,128,128,128,128,128,128,128]],[[128,128,128,128,128,128,128,128,128,128,128],[128,128,128,128,128,128,128,128,128,128,128],[128,128,128,128,128,128,128,128,128,128,128]]],[[[202,24,213,235,186,191,220,160,240,175,255],[126,38,182,232,169,184,228,174,255,187,128],[61,46,138,219,151,178,240,170,255,216,128]],[[1,112,230,250,199,191,247,159,255,255,128],[166,109,228,252,211,215,255,174,128,128,128],[39,77,162,232,172,180,245,178,255,255,128]],[[1,52,220,246,198,199,249,220,255,255,128],[124,74,191,243,183,193,250,221,255,255,128],[24,71,130,219,154,170,243,182,255,255,128]],[[1,182,225,249,219,240,255,224,128,128,128],[149,150,226,252,216,205,255,171,128,128,128],[28,108,170,242,183,194,254,223,255,255,128]],[[1,81,230,252,204,203,255,192,128,128,128],[123,102,209,247,188,196,255,233,128,128,128],[20,95,153,243,164,173,255,203,128,128,128]],[[1,222,248,255,216,213,128,128,128,128,128],[168,175,246,252,235,205,255,255,128,128,128],[47,116,215,255,211,212,255,255,128,128,128]],[[1,121,236,253,212,214,255,255,128,128,128],[141,84,213,252,201,202,255,219,128,128,128],[42,80,160,240,162,185,255,205,128,128,128]],[[1,1,255,128,128,128,128,128,128,128,128],[244,1,255,128,128,128,128,128,128,128,128],[238,1,255,128,128,128,128,128,128,128,128]]]],ci=[[[231,120,48,89,115,113,120,152,112],[152,179,64,126,170,118,46,70,95],[175,69,143,80,85,82,72,155,103],[56,58,10,171,218,189,17,13,152],[114,26,17,163,44,195,21,10,173],[121,24,80,195,26,62,44,64,85],[144,71,10,38,171,213,144,34,26],[170,46,55,19,136,160,33,206,71],[63,20,8,114,114,208,12,9,226],[81,40,11,96,182,84,29,16,36]],[[134,183,89,137,98,101,106,165,148],[72,187,100,130,157,111,32,75,80],[66,102,167,99,74,62,40,234,128],[41,53,9,178,241,141,26,8,107],[74,43,26,146,73,166,49,23,157],[65,38,105,160,51,52,31,115,128],[104,79,12,27,217,255,87,17,7],[87,68,71,44,114,51,15,186,23],[47,41,14,110,182,183,21,17,194],[66,45,25,102,197,189,23,18,22]],[[88,88,147,150,42,46,45,196,205],[43,97,183,117,85,38,35,179,61],[39,53,200,87,26,21,43,232,171],[56,34,51,104,114,102,29,93,77],[39,28,85,171,58,165,90,98,64],[34,22,116,206,23,34,43,166,73],[107,54,32,26,51,1,81,43,31],[68,25,106,22,64,171,36,225,114],[34,19,21,102,132,188,16,76,124],[62,18,78,95,85,57,50,48,51]],[[193,101,35,159,215,111,89,46,111],[60,148,31,172,219,228,21,18,111],[112,113,77,85,179,255,38,120,114],[40,42,1,196,245,209,10,25,109],[88,43,29,140,166,213,37,43,154],[61,63,30,155,67,45,68,1,209],[100,80,8,43,154,1,51,26,71],[142,78,78,16,255,128,34,197,171],[41,40,5,102,211,183,4,1,221],[51,50,17,168,209,192,23,25,82]],[[138,31,36,171,27,166,38,44,229],[67,87,58,169,82,115,26,59,179],[63,59,90,180,59,166,93,73,154],[40,40,21,116,143,209,34,39,175],[47,15,16,183,34,223,49,45,183],[46,17,33,183,6,98,15,32,183],[57,46,22,24,128,1,54,17,37],[65,32,73,115,28,128,23,128,205],[40,3,9,115,51,192,18,6,223],[87,37,9,115,59,77,64,21,47]],[[104,55,44,218,9,54,53,130,226],[64,90,70,205,40,41,23,26,57],[54,57,112,184,5,41,38,166,213],[30,34,26,133,152,116,10,32,134],[39,19,53,221,26,114,32,73,255],[31,9,65,234,2,15,1,118,73],[75,32,12,51,192,255,160,43,51],[88,31,35,67,102,85,55,186,85],[56,21,23,111,59,205,45,37,192],[55,38,70,124,73,102,1,34,98]],[[125,98,42,88,104,85,117,175,82],[95,84,53,89,128,100,113,101,45],[75,79,123,47,51,128,81,171,1],[57,17,5,71,102,57,53,41,49],[38,33,13,121,57,73,26,1,85],[41,10,67,138,77,110,90,47,114],[115,21,2,10,102,255,166,23,6],[101,29,16,10,85,128,101,196,26],[57,18,10,102,102,213,34,20,43],[117,20,15,36,163,128,68,1,26]],[[102,61,71,37,34,53,31,243,192],[69,60,71,38,73,119,28,222,37],[68,45,128,34,1,47,11,245,171],[62,17,19,70,146,85,55,62,70],[37,43,37,154,100,163,85,160,1],[63,9,92,136,28,64,32,201,85],[75,15,9,9,64,255,184,119,16],[86,6,28,5,64,255,25,248,1],[56,8,17,132,137,255,55,116,128],[58,15,20,82,135,57,26,121,40]],[[164,50,31,137,154,133,25,35,218],[51,103,44,131,131,123,31,6,158],[86,40,64,135,148,224,45,183,128],[22,26,17,131,240,154,14,1,209],[45,16,21,91,64,222,7,1,197],[56,21,39,155,60,138,23,102,213],[83,12,13,54,192,255,68,47,28],[85,26,85,85,128,128,32,146,171],[18,11,7,63,144,171,4,4,246],[35,27,10,146,174,171,12,26,128]],[[190,80,35,99,180,80,126,54,45],[85,126,47,87,176,51,41,20,32],[101,75,128,139,118,146,116,128,85],[56,41,15,176,236,85,37,9,62],[71,30,17,119,118,255,17,18,138],[101,38,60,138,55,70,43,26,142],[146,36,19,30,171,255,97,27,20],[138,45,61,62,219,1,81,188,64],[32,41,20,117,151,142,20,21,163],[112,19,12,61,195,128,48,4,24]]],ui=[[[[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[176,246,255,255,255,255,255,255,255,255,255],[223,241,252,255,255,255,255,255,255,255,255],[249,253,253,255,255,255,255,255,255,255,255]],[[255,244,252,255,255,255,255,255,255,255,255],[234,254,254,255,255,255,255,255,255,255,255],[253,255,255,255,255,255,255,255,255,255,255]],[[255,246,254,255,255,255,255,255,255,255,255],[239,253,254,255,255,255,255,255,255,255,255],[254,255,254,255,255,255,255,255,255,255,255]],[[255,248,254,255,255,255,255,255,255,255,255],[251,255,254,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,253,254,255,255,255,255,255,255,255,255],[251,254,254,255,255,255,255,255,255,255,255],[254,255,254,255,255,255,255,255,255,255,255]],[[255,254,253,255,254,255,255,255,255,255,255],[250,255,254,255,254,255,255,255,255,255,255],[254,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]]],[[[217,255,255,255,255,255,255,255,255,255,255],[225,252,241,253,255,255,254,255,255,255,255],[234,250,241,250,253,255,253,254,255,255,255]],[[255,254,255,255,255,255,255,255,255,255,255],[223,254,254,255,255,255,255,255,255,255,255],[238,253,254,254,255,255,255,255,255,255,255]],[[255,248,254,255,255,255,255,255,255,255,255],[249,254,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,253,255,255,255,255,255,255,255,255,255],[247,254,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,253,254,255,255,255,255,255,255,255,255],[252,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,254,254,255,255,255,255,255,255,255,255],[253,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,254,253,255,255,255,255,255,255,255,255],[250,255,255,255,255,255,255,255,255,255,255],[254,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]]],[[[186,251,250,255,255,255,255,255,255,255,255],[234,251,244,254,255,255,255,255,255,255,255],[251,251,243,253,254,255,254,255,255,255,255]],[[255,253,254,255,255,255,255,255,255,255,255],[236,253,254,255,255,255,255,255,255,255,255],[251,253,253,254,254,255,255,255,255,255,255]],[[255,254,254,255,255,255,255,255,255,255,255],[254,254,254,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,254,255,255,255,255,255,255,255,255,255],[254,254,255,255,255,255,255,255,255,255,255],[254,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[254,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]]],[[[248,255,255,255,255,255,255,255,255,255,255],[250,254,252,254,255,255,255,255,255,255,255],[248,254,249,253,255,255,255,255,255,255,255]],[[255,253,253,255,255,255,255,255,255,255,255],[246,253,253,255,255,255,255,255,255,255,255],[252,254,251,254,254,255,255,255,255,255,255]],[[255,254,252,255,255,255,255,255,255,255,255],[248,254,253,255,255,255,255,255,255,255,255],[253,255,254,254,255,255,255,255,255,255,255]],[[255,251,254,255,255,255,255,255,255,255,255],[245,251,254,255,255,255,255,255,255,255,255],[253,253,254,255,255,255,255,255,255,255,255]],[[255,251,253,255,255,255,255,255,255,255,255],[252,253,254,255,255,255,255,255,255,255,255],[255,254,255,255,255,255,255,255,255,255,255]],[[255,252,255,255,255,255,255,255,255,255,255],[249,255,254,255,255,255,255,255,255,255,255],[255,255,254,255,255,255,255,255,255,255,255]],[[255,255,253,255,255,255,255,255,255,255,255],[250,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[254,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]]]],hi=[0,1,2,3,6,4,5,6,6,6,6,6,6,6,6,7,0],li=[],fi=[],di=[],pi=1,gi=2,mi=[],vi=[];vr(\"UpsampleRgbLinePair\",Ar,3),vr(\"UpsampleBgrLinePair\",xr,3),vr(\"UpsampleRgbaLinePair\",Ir,4),vr(\"UpsampleBgraLinePair\",kr,4),vr(\"UpsampleArgbLinePair\",Pr,4),vr(\"UpsampleRgba4444LinePair\",_r,2),vr(\"UpsampleRgb565LinePair\",Sr,2);var bi=t.UpsampleRgbLinePair,yi=t.UpsampleBgrLinePair,wi=t.UpsampleRgbaLinePair,Ni=t.UpsampleBgraLinePair,Li=t.UpsampleArgbLinePair,Ai=t.UpsampleRgba4444LinePair,xi=t.UpsampleRgb565LinePair,Si=16,_i=1<<Si-1,Pi=-227,ki=482,Ii=6,Fi=(256<<Ii)-1,Ci=0,ji=a(256),Oi=a(256),Bi=a(256),Mi=a(256),Ei=a(ki-Pi),qi=a(ki-Pi);Fr(\"YuvToRgbRow\",Ar,3),Fr(\"YuvToBgrRow\",xr,3),Fr(\"YuvToRgbaRow\",Ir,4),Fr(\"YuvToBgraRow\",kr,4),Fr(\"YuvToArgbRow\",Pr,4),Fr(\"YuvToRgba4444Row\",_r,2),Fr(\"YuvToRgb565Row\",Sr,2);var Di=[0,4,8,12,128,132,136,140,256,260,264,268,384,388,392,396],Ri=[0,2,8],Ti=[8,7,6,4,4,2,2,2,1,1,1,1],Ui=1;this.WebPDecodeRGBA=function(t,r,n,i,a){var o=qn,s=new rr,c=new ot;s.ba=c,c.S=o,c.width=[c.width],c.height=[c.height];var u=c.width,h=c.height,l=new st;if(null==l||null==t)var f=2;else e(null!=l),f=Br(t,r,n,l.width,l.height,l.Pd,l.Qd,l.format,null);if(0!=f?u=0:(null!=u&&(u[0]=l.width[0]),null!=h&&(h[0]=l.height[0]),u=1),u){c.width=c.width[0],c.height=c.height[0],null!=i&&(i[0]=c.width),null!=a&&(a[0]=c.height);t:{if(i=new Gt,(a=new nr).data=t,a.w=r,a.ha=n,a.kd=1,r=[0],e(null!=a),(0==(t=Br(a.data,a.w,a.ha,null,null,null,r,null,a))||7==t)&&r[0]&&(t=4),0==(r=t)){if(e(null!=s),i.data=a.data,i.w=a.w+a.offset,i.ha=a.ha-a.offset,i.put=dt,i.ac=ft,i.bc=pt,i.ma=s,a.xa){if(null==(t=kt())){s=1;break t}if(function(t,r){var n=[0],i=[0],a=[0];e:for(;;){if(null==t)return 0;if(null==r)return t.a=2,0;if(t.l=r,t.a=0,v(t.m,r.data,r.w,r.ha),!gt(t.m,n,i,a)){t.a=3;break e}if(t.xb=gi,r.width=n[0],r.height=i[0],!It(n[0],i[0],1,t,null))break e;return 1}return e(0!=t.a),0}(t,i)){if(i=0==(r=qr(i.width,i.height,s.Oa,s.ba))){e:{i=t;r:for(;;){if(null==i){i=0;break e}if(e(null!=i.s.yc),e(null!=i.s.Ya),e(0<i.s.Wb),e(null!=(n=i.l)),e(null!=(a=n.ma)),0!=i.xb){if(i.ca=a.ba,i.tb=a.tb,e(null!=i.ca),!Mr(a.Oa,n,Rn)){i.a=2;break r}if(!Ft(i,n.width))break r;if(n.da)break r;if((n.da||nt(i.ca.S))&&mr(),11>i.ca.S||(alert(\"todo:WebPInitConvertARGBToYUV\"),null!=i.ca.f.kb.F&&mr()),i.Pb&&0<i.s.ua&&null==i.s.vb.X&&!O(i.s.vb,i.s.Wa.Xa)){i.a=1;break r}i.xb=0}if(!_t(i,i.V,i.Ba,i.c,i.i,n.o,Lt))break r;a.Dc=i.Ma,i=1;break e}e(0!=i.a),i=0}i=!i}i&&(r=t.a)}else r=t.a}else{if(null==(t=new Yt)){s=1;break t}if(t.Fa=a.na,t.P=a.P,t.qc=a.Sa,Kt(t,i)){if(0==(r=qr(i.width,i.height,s.Oa,s.ba))){if(t.Aa=0,n=s.Oa,e(null!=(a=t)),null!=n){if(0<(u=0>(u=n.Md)?0:100<u?255:255*u/100)){for(h=l=0;4>h;++h)12>(f=a.pb[h]).lc&&(f.ia=u*Ti[0>f.lc?0:f.lc]>>3),l|=f.ia;l&&(alert(\"todo:VP8InitRandom\"),a.ia=1)}a.Ga=n.Id,100<a.Ga?a.Ga=100:0>a.Ga&&(a.Ga=0)}Qt(t,i)||(r=t.a)}}else r=t.a}0==r&&null!=s.Oa&&s.Oa.fd&&(r=Er(s.ba))}s=r}o=0!=s?null:11>o?c.f.RGBA.eb:c.f.kb.y}else o=null;return o};var zi=[3,4,3,4,4,2,2,4,4,4,2,1,1]};function u(t,e){for(var r=\"\",n=0;n<4;n++)r+=String.fromCharCode(t[e++]);return r}function h(t,e){return(t[e+0]<<0|t[e+1]<<8|t[e+2]<<16)>>>0}function l(t,e){return(t[e+0]<<0|t[e+1]<<8|t[e+2]<<16|t[e+3]<<24)>>>0}new c;var f=[0],d=[0],p=[],g=new c,m=t,v=function(t,e){var r={},n=0,i=!1,a=0,o=0;if(r.frames=[],!\n/** @license\n   * Copyright (c) 2017 Dominik Homberger\n  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n  https://webpjs.appspot.com\n  WebPRiffParser dominikhlbg@gmail.com\n  */\nfunction(t,e,r,n){for(var i=0;i<n;i++)if(t[e+i]!=r.charCodeAt(i))return!0;return!1}(t,e,\"RIFF\",4)){var s,c;l(t,e+=4);for(e+=8;e<t.length;){var f=u(t,e),d=l(t,e+=4);e+=4;var p=d+(1&d);switch(f){case\"VP8 \":case\"VP8L\":void 0===r.frames[n]&&(r.frames[n]={});(v=r.frames[n]).src_off=i?o:e-8,v.src_size=a+d+8,n++,i&&(i=!1,a=0,o=0);break;case\"VP8X\":(v=r.header={}).feature_flags=t[e];var g=e+4;v.canvas_width=1+h(t,g);g+=3;v.canvas_height=1+h(t,g);g+=3;break;case\"ALPH\":i=!0,a=p+8,o=e-8;break;case\"ANIM\":(v=r.header).bgcolor=l(t,e);g=e+4;v.loop_count=(s=t)[(c=g)+0]<<0|s[c+1]<<8;g+=2;break;case\"ANMF\":var m,v;(v=r.frames[n]={}).offset_x=2*h(t,e),e+=3,v.offset_y=2*h(t,e),e+=3,v.width=1+h(t,e),e+=3,v.height=1+h(t,e),e+=3,v.duration=h(t,e),e+=3,m=t[e++],v.dispose=1&m,v.blend=m>>1&1}\"ANMF\"!=f&&(e+=p)}return r}}(m,0);v.response=m,v.rgbaoutput=!0,v.dataurl=!1;var b=v.header?v.header:null,y=v.frames?v.frames:null;if(b){b.loop_counter=b.loop_count,f=[b.canvas_height],d=[b.canvas_width];for(var w=0;w<y.length&&0!=y[w].blend;w++);}var N=y[0],L=g.WebPDecodeRGBA(m,N.src_off,N.src_size,d,f);N.rgba=L,N.imgwidth=d[0],N.imgheight=f[0];for(var A=0;A<d[0]*f[0]*4;A++)p[A]=L[A];return this.width=d,this.height=f,this.data=p,this}!function(t){var r=function(){return\"function\"==typeof fflate__WEBPACK_IMPORTED_MODULE_1__.zlibSync},n=function(r,n,a,h){var l=4,f=s;switch(h){case t.image_compression.FAST:l=1,f=o;break;case t.image_compression.MEDIUM:l=6,f=c;break;case t.image_compression.SLOW:l=9,f=u}r=i(r,n,a,f);var d=(0,fflate__WEBPACK_IMPORTED_MODULE_1__.zlibSync)(r,{level:l});return t.__addimage__.arrayBufferToBinaryString(d)},i=function(t,e,r,n){for(var i,a,o,s=t.length/e,c=new Uint8Array(t.length+s),u=l(),h=0;h<s;h+=1){if(o=h*e,i=t.subarray(o,o+e),n)c.set(n(i,r,a),o+h);else{for(var d,p=u.length,g=[];d<p;d+=1)g[d]=u[d](i,r,a);var m=f(g.concat());c.set(g[m],o+h)}a=i}return c},a=function(t){var e=Array.apply([],t);return e.unshift(0),e},o=function(t,e){var r,n=[],i=t.length;n[0]=1;for(var a=0;a<i;a+=1)r=t[a-e]||0,n[a+1]=t[a]-r+256&255;return n},s=function(t,e,r){var n,i=[],a=t.length;i[0]=2;for(var o=0;o<a;o+=1)n=r&&r[o]||0,i[o+1]=t[o]-n+256&255;return i},c=function(t,e,r){var n,i,a=[],o=t.length;a[0]=3;for(var s=0;s<o;s+=1)n=t[s-e]||0,i=r&&r[s]||0,a[s+1]=t[s]+256-(n+i>>>1)&255;return a},u=function(t,e,r){var n,i,a,o,s=[],c=t.length;s[0]=4;for(var u=0;u<c;u+=1)n=t[u-e]||0,i=r&&r[u]||0,a=r&&r[u-e]||0,o=h(n,i,a),s[u+1]=t[u]-o+256&255;return s},h=function(t,e,r){if(t===e&&e===r)return t;var n=Math.abs(e-r),i=Math.abs(t-r),a=Math.abs(t+e-r-r);return n<=i&&n<=a?t:i<=a?e:r},l=function(){return[a,o,s,c,u]},f=function(t){var e=t.map((function(t){return t.reduce((function(t,e){return t+Math.abs(e)}),0)}));return e.indexOf(Math.min.apply(null,e))};t.processPNG=function(e,i,a,o){var s,c,u,h,l,f,d,p,g,m,v,b,y,w,N,L=this.decode.FLATE_DECODE,A=\"\";if(this.__addimage__.isArrayBuffer(e)&&(e=new Uint8Array(e)),this.__addimage__.isArrayBufferView(e)){if(e=(u=new Kt(e)).imgData,c=u.bits,s=u.colorSpace,l=u.colors,-1!==[4,6].indexOf(u.colorType)){if(8===u.bits){g=(p=32==u.pixelBitlength?new Uint32Array(u.decodePixels().buffer):16==u.pixelBitlength?new Uint16Array(u.decodePixels().buffer):new Uint8Array(u.decodePixels().buffer)).length,v=new Uint8Array(g*u.colors),m=new Uint8Array(g);var x,S=u.pixelBitlength-u.bits;for(w=0,N=0;w<g;w++){for(y=p[w],x=0;x<S;)v[N++]=y>>>x&255,x+=u.bits;m[w]=y>>>x&255}}if(16===u.bits){g=(p=new Uint32Array(u.decodePixels().buffer)).length,v=new Uint8Array(g*(32/u.pixelBitlength)*u.colors),m=new Uint8Array(g*(32/u.pixelBitlength)),b=u.colors>1,w=0,N=0;for(var _=0;w<g;)y=p[w++],v[N++]=y>>>0&255,b&&(v[N++]=y>>>16&255,y=p[w++],v[N++]=y>>>0&255),m[_++]=y>>>16&255;c=8}o!==t.image_compression.NONE&&r()?(e=n(v,u.width*u.colors,u.colors,o),d=n(m,u.width,1,o)):(e=v,d=m,L=void 0)}if(3===u.colorType&&(s=this.color_spaces.INDEXED,f=u.palette,u.transparency.indexed)){var P=u.transparency.indexed,k=0;for(w=0,g=P.length;w<g;++w)k+=P[w];if((k/=255)===g-1&&-1!==P.indexOf(0))h=[P.indexOf(0)];else if(k!==g){for(p=u.decodePixels(),m=new Uint8Array(p.length),w=0,g=p.length;w<g;w++)m[w]=P[p[w]];d=n(m,u.width,1)}}var I=function(e){var r;switch(e){case t.image_compression.FAST:r=11;break;case t.image_compression.MEDIUM:r=13;break;case t.image_compression.SLOW:r=14;break;default:r=12}return r}(o);return L===this.decode.FLATE_DECODE&&(A=\"/Predictor \"+I+\" \"),A+=\"/Colors \"+l+\" /BitsPerComponent \"+c+\" /Columns \"+u.width,(this.__addimage__.isArrayBuffer(e)||this.__addimage__.isArrayBufferView(e))&&(e=this.__addimage__.arrayBufferToBinaryString(e)),(d&&this.__addimage__.isArrayBuffer(d)||this.__addimage__.isArrayBufferView(d))&&(d=this.__addimage__.arrayBufferToBinaryString(d)),{alias:a,data:e,index:i,filter:L,decodeParameters:A,transparency:h,palette:f,sMask:d,predictor:I,width:u.width,height:u.height,bitsPerComponent:c,colorSpace:s}}}}(E.API),function(t){t.processGIF89A=function(e,r,n,i){var a=new Zt(e),o=a.width,s=a.height,c=[];a.decodeAndBlitFrameRGBA(0,c);var u={data:c,width:o,height:s},h=new Qt(100).encode(u,100);return t.processJPEG.call(this,h,r,n,i)},t.processGIF87A=t.processGIF89A}(E.API),te.prototype.parseHeader=function(){if(this.fileSize=this.datav.getUint32(this.pos,!0),this.pos+=4,this.reserved=this.datav.getUint32(this.pos,!0),this.pos+=4,this.offset=this.datav.getUint32(this.pos,!0),this.pos+=4,this.headerSize=this.datav.getUint32(this.pos,!0),this.pos+=4,this.width=this.datav.getUint32(this.pos,!0),this.pos+=4,this.height=this.datav.getInt32(this.pos,!0),this.pos+=4,this.planes=this.datav.getUint16(this.pos,!0),this.pos+=2,this.bitPP=this.datav.getUint16(this.pos,!0),this.pos+=2,this.compress=this.datav.getUint32(this.pos,!0),this.pos+=4,this.rawSize=this.datav.getUint32(this.pos,!0),this.pos+=4,this.hr=this.datav.getUint32(this.pos,!0),this.pos+=4,this.vr=this.datav.getUint32(this.pos,!0),this.pos+=4,this.colors=this.datav.getUint32(this.pos,!0),this.pos+=4,this.importantColors=this.datav.getUint32(this.pos,!0),this.pos+=4,16===this.bitPP&&this.is_with_alpha&&(this.bitPP=15),this.bitPP<15){var t=0===this.colors?1<<this.bitPP:this.colors;this.palette=new Array(t);for(var e=0;e<t;e++){var r=this.datav.getUint8(this.pos++,!0),n=this.datav.getUint8(this.pos++,!0),i=this.datav.getUint8(this.pos++,!0),a=this.datav.getUint8(this.pos++,!0);this.palette[e]={red:i,green:n,blue:r,quad:a}}}this.height<0&&(this.height*=-1,this.bottom_up=!1)},te.prototype.parseBGR=function(){this.pos=this.offset;try{var t=\"bit\"+this.bitPP,e=this.width*this.height*4;this.data=new Uint8Array(e),this[t]()}catch(t){a.log(\"bit decode error:\"+t)}},te.prototype.bit1=function(){var t,e=Math.ceil(this.width/8),r=e%4;for(t=this.height-1;t>=0;t--){for(var n=this.bottom_up?t:this.height-1-t,i=0;i<e;i++)for(var a=this.datav.getUint8(this.pos++,!0),o=n*this.width*4+8*i*4,s=0;s<8&&8*i+s<this.width;s++){var c=this.palette[a>>7-s&1];this.data[o+4*s]=c.blue,this.data[o+4*s+1]=c.green,this.data[o+4*s+2]=c.red,this.data[o+4*s+3]=255}0!==r&&(this.pos+=4-r)}},te.prototype.bit4=function(){for(var t=Math.ceil(this.width/2),e=t%4,r=this.height-1;r>=0;r--){for(var n=this.bottom_up?r:this.height-1-r,i=0;i<t;i++){var a=this.datav.getUint8(this.pos++,!0),o=n*this.width*4+2*i*4,s=a>>4,c=15&a,u=this.palette[s];if(this.data[o]=u.blue,this.data[o+1]=u.green,this.data[o+2]=u.red,this.data[o+3]=255,2*i+1>=this.width)break;u=this.palette[c],this.data[o+4]=u.blue,this.data[o+4+1]=u.green,this.data[o+4+2]=u.red,this.data[o+4+3]=255}0!==e&&(this.pos+=4-e)}},te.prototype.bit8=function(){for(var t=this.width%4,e=this.height-1;e>=0;e--){for(var r=this.bottom_up?e:this.height-1-e,n=0;n<this.width;n++){var i=this.datav.getUint8(this.pos++,!0),a=r*this.width*4+4*n;if(i<this.palette.length){var o=this.palette[i];this.data[a]=o.red,this.data[a+1]=o.green,this.data[a+2]=o.blue,this.data[a+3]=255}else this.data[a]=255,this.data[a+1]=255,this.data[a+2]=255,this.data[a+3]=255}0!==t&&(this.pos+=4-t)}},te.prototype.bit15=function(){for(var t=this.width%3,e=parseInt(\"11111\",2),r=this.height-1;r>=0;r--){for(var n=this.bottom_up?r:this.height-1-r,i=0;i<this.width;i++){var a=this.datav.getUint16(this.pos,!0);this.pos+=2;var o=(a&e)/e*255|0,s=(a>>5&e)/e*255|0,c=(a>>10&e)/e*255|0,u=a>>15?255:0,h=n*this.width*4+4*i;this.data[h]=c,this.data[h+1]=s,this.data[h+2]=o,this.data[h+3]=u}this.pos+=t}},te.prototype.bit16=function(){for(var t=this.width%3,e=parseInt(\"11111\",2),r=parseInt(\"111111\",2),n=this.height-1;n>=0;n--){for(var i=this.bottom_up?n:this.height-1-n,a=0;a<this.width;a++){var o=this.datav.getUint16(this.pos,!0);this.pos+=2;var s=(o&e)/e*255|0,c=(o>>5&r)/r*255|0,u=(o>>11)/e*255|0,h=i*this.width*4+4*a;this.data[h]=u,this.data[h+1]=c,this.data[h+2]=s,this.data[h+3]=255}this.pos+=t}},te.prototype.bit24=function(){for(var t=this.height-1;t>=0;t--){for(var e=this.bottom_up?t:this.height-1-t,r=0;r<this.width;r++){var n=this.datav.getUint8(this.pos++,!0),i=this.datav.getUint8(this.pos++,!0),a=this.datav.getUint8(this.pos++,!0),o=e*this.width*4+4*r;this.data[o]=a,this.data[o+1]=i,this.data[o+2]=n,this.data[o+3]=255}this.pos+=this.width%4}},te.prototype.bit32=function(){for(var t=this.height-1;t>=0;t--)for(var e=this.bottom_up?t:this.height-1-t,r=0;r<this.width;r++){var n=this.datav.getUint8(this.pos++,!0),i=this.datav.getUint8(this.pos++,!0),a=this.datav.getUint8(this.pos++,!0),o=this.datav.getUint8(this.pos++,!0),s=e*this.width*4+4*r;this.data[s]=a,this.data[s+1]=i,this.data[s+2]=n,this.data[s+3]=o}},te.prototype.getData=function(){return this.data},\n/**\n * @license\n * Copyright (c) 2018 Aras Abbasi\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */\nfunction(t){t.processBMP=function(e,r,n,i){var a=new te(e,!1),o=a.width,s=a.height,c={data:a.getData(),width:o,height:s},u=new Qt(100).encode(c,100);return t.processJPEG.call(this,u,r,n,i)}}(E.API),ee.prototype.getData=function(){return this.data},\n/**\n * @license\n * Copyright (c) 2019 Aras Abbasi\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */\nfunction(t){t.processWEBP=function(e,r,n,i){var a=new ee(e,!1),o=a.width,s=a.height,c={data:a.getData(),width:o,height:s},u=new Qt(100).encode(c,100);return t.processJPEG.call(this,u,r,n,i)}}(E.API),E.API.processRGBA=function(t,e,r){for(var n=t.data,i=n.length,a=new Uint8Array(i/4*3),o=new Uint8Array(i/4),s=0,c=0,u=0;u<i;u+=4){var h=n[u],l=n[u+1],f=n[u+2],d=n[u+3];a[s++]=h,a[s++]=l,a[s++]=f,o[c++]=d}var p=this.__addimage__.arrayBufferToBinaryString(a);return{alpha:this.__addimage__.arrayBufferToBinaryString(o),data:p,index:e,alias:r,colorSpace:\"DeviceRGB\",bitsPerComponent:8,width:t.width,height:t.height}},E.API.setLanguage=function(t){return void 0===this.internal.languageSettings&&(this.internal.languageSettings={},this.internal.languageSettings.isSubscribed=!1),void 0!=={af:\"Afrikaans\",sq:\"Albanian\",ar:\"Arabic (Standard)\",\"ar-DZ\":\"Arabic (Algeria)\",\"ar-BH\":\"Arabic (Bahrain)\",\"ar-EG\":\"Arabic (Egypt)\",\"ar-IQ\":\"Arabic (Iraq)\",\"ar-JO\":\"Arabic (Jordan)\",\"ar-KW\":\"Arabic (Kuwait)\",\"ar-LB\":\"Arabic (Lebanon)\",\"ar-LY\":\"Arabic (Libya)\",\"ar-MA\":\"Arabic (Morocco)\",\"ar-OM\":\"Arabic (Oman)\",\"ar-QA\":\"Arabic (Qatar)\",\"ar-SA\":\"Arabic (Saudi Arabia)\",\"ar-SY\":\"Arabic (Syria)\",\"ar-TN\":\"Arabic (Tunisia)\",\"ar-AE\":\"Arabic (U.A.E.)\",\"ar-YE\":\"Arabic (Yemen)\",an:\"Aragonese\",hy:\"Armenian\",as:\"Assamese\",ast:\"Asturian\",az:\"Azerbaijani\",eu:\"Basque\",be:\"Belarusian\",bn:\"Bengali\",bs:\"Bosnian\",br:\"Breton\",bg:\"Bulgarian\",my:\"Burmese\",ca:\"Catalan\",ch:\"Chamorro\",ce:\"Chechen\",zh:\"Chinese\",\"zh-HK\":\"Chinese (Hong Kong)\",\"zh-CN\":\"Chinese (PRC)\",\"zh-SG\":\"Chinese (Singapore)\",\"zh-TW\":\"Chinese (Taiwan)\",cv:\"Chuvash\",co:\"Corsican\",cr:\"Cree\",hr:\"Croatian\",cs:\"Czech\",da:\"Danish\",nl:\"Dutch (Standard)\",\"nl-BE\":\"Dutch (Belgian)\",en:\"English\",\"en-AU\":\"English (Australia)\",\"en-BZ\":\"English (Belize)\",\"en-CA\":\"English (Canada)\",\"en-IE\":\"English (Ireland)\",\"en-JM\":\"English (Jamaica)\",\"en-NZ\":\"English (New Zealand)\",\"en-PH\":\"English (Philippines)\",\"en-ZA\":\"English (South Africa)\",\"en-TT\":\"English (Trinidad & Tobago)\",\"en-GB\":\"English (United Kingdom)\",\"en-US\":\"English (United States)\",\"en-ZW\":\"English (Zimbabwe)\",eo:\"Esperanto\",et:\"Estonian\",fo:\"Faeroese\",fj:\"Fijian\",fi:\"Finnish\",fr:\"French (Standard)\",\"fr-BE\":\"French (Belgium)\",\"fr-CA\":\"French (Canada)\",\"fr-FR\":\"French (France)\",\"fr-LU\":\"French (Luxembourg)\",\"fr-MC\":\"French (Monaco)\",\"fr-CH\":\"French (Switzerland)\",fy:\"Frisian\",fur:\"Friulian\",gd:\"Gaelic (Scots)\",\"gd-IE\":\"Gaelic (Irish)\",gl:\"Galacian\",ka:\"Georgian\",de:\"German (Standard)\",\"de-AT\":\"German (Austria)\",\"de-DE\":\"German (Germany)\",\"de-LI\":\"German (Liechtenstein)\",\"de-LU\":\"German (Luxembourg)\",\"de-CH\":\"German (Switzerland)\",el:\"Greek\",gu:\"Gujurati\",ht:\"Haitian\",he:\"Hebrew\",hi:\"Hindi\",hu:\"Hungarian\",is:\"Icelandic\",id:\"Indonesian\",iu:\"Inuktitut\",ga:\"Irish\",it:\"Italian (Standard)\",\"it-CH\":\"Italian (Switzerland)\",ja:\"Japanese\",kn:\"Kannada\",ks:\"Kashmiri\",kk:\"Kazakh\",km:\"Khmer\",ky:\"Kirghiz\",tlh:\"Klingon\",ko:\"Korean\",\"ko-KP\":\"Korean (North Korea)\",\"ko-KR\":\"Korean (South Korea)\",la:\"Latin\",lv:\"Latvian\",lt:\"Lithuanian\",lb:\"Luxembourgish\",mk:\"North Macedonia\",ms:\"Malay\",ml:\"Malayalam\",mt:\"Maltese\",mi:\"Maori\",mr:\"Marathi\",mo:\"Moldavian\",nv:\"Navajo\",ng:\"Ndonga\",ne:\"Nepali\",no:\"Norwegian\",nb:\"Norwegian (Bokmal)\",nn:\"Norwegian (Nynorsk)\",oc:\"Occitan\",or:\"Oriya\",om:\"Oromo\",fa:\"Persian\",\"fa-IR\":\"Persian/Iran\",pl:\"Polish\",pt:\"Portuguese\",\"pt-BR\":\"Portuguese (Brazil)\",pa:\"Punjabi\",\"pa-IN\":\"Punjabi (India)\",\"pa-PK\":\"Punjabi (Pakistan)\",qu:\"Quechua\",rm:\"Rhaeto-Romanic\",ro:\"Romanian\",\"ro-MO\":\"Romanian (Moldavia)\",ru:\"Russian\",\"ru-MO\":\"Russian (Moldavia)\",sz:\"Sami (Lappish)\",sg:\"Sango\",sa:\"Sanskrit\",sc:\"Sardinian\",sd:\"Sindhi\",si:\"Singhalese\",sr:\"Serbian\",sk:\"Slovak\",sl:\"Slovenian\",so:\"Somani\",sb:\"Sorbian\",es:\"Spanish\",\"es-AR\":\"Spanish (Argentina)\",\"es-BO\":\"Spanish (Bolivia)\",\"es-CL\":\"Spanish (Chile)\",\"es-CO\":\"Spanish (Colombia)\",\"es-CR\":\"Spanish (Costa Rica)\",\"es-DO\":\"Spanish (Dominican Republic)\",\"es-EC\":\"Spanish (Ecuador)\",\"es-SV\":\"Spanish (El Salvador)\",\"es-GT\":\"Spanish (Guatemala)\",\"es-HN\":\"Spanish (Honduras)\",\"es-MX\":\"Spanish (Mexico)\",\"es-NI\":\"Spanish (Nicaragua)\",\"es-PA\":\"Spanish (Panama)\",\"es-PY\":\"Spanish (Paraguay)\",\"es-PE\":\"Spanish (Peru)\",\"es-PR\":\"Spanish (Puerto Rico)\",\"es-ES\":\"Spanish (Spain)\",\"es-UY\":\"Spanish (Uruguay)\",\"es-VE\":\"Spanish (Venezuela)\",sx:\"Sutu\",sw:\"Swahili\",sv:\"Swedish\",\"sv-FI\":\"Swedish (Finland)\",\"sv-SV\":\"Swedish (Sweden)\",ta:\"Tamil\",tt:\"Tatar\",te:\"Teluga\",th:\"Thai\",tig:\"Tigre\",ts:\"Tsonga\",tn:\"Tswana\",tr:\"Turkish\",tk:\"Turkmen\",uk:\"Ukrainian\",hsb:\"Upper Sorbian\",ur:\"Urdu\",ve:\"Venda\",vi:\"Vietnamese\",vo:\"Volapuk\",wa:\"Walloon\",cy:\"Welsh\",xh:\"Xhosa\",ji:\"Yiddish\",zu:\"Zulu\"}[t]&&(this.internal.languageSettings.languageCode=t,!1===this.internal.languageSettings.isSubscribed&&(this.internal.events.subscribe(\"putCatalog\",(function(){this.internal.write(\"/Lang (\"+this.internal.languageSettings.languageCode+\")\")})),this.internal.languageSettings.isSubscribed=!0)),this},Vt=E.API,Gt=Vt.getCharWidthsArray=function(e,r){var n,i,a=(r=r||{}).font||this.internal.getFont(),o=r.fontSize||this.internal.getFontSize(),s=r.charSpace||this.internal.getCharSpace(),c=r.widths?r.widths:a.metadata.Unicode.widths,u=c.fof?c.fof:1,h=r.kerning?r.kerning:a.metadata.Unicode.kerning,l=h.fof?h.fof:1,f=!1!==r.doKerning,d=0,p=e.length,g=0,m=c[0]||u,v=[];for(n=0;n<p;n++)i=e.charCodeAt(n),\"function\"==typeof a.metadata.widthOfString?v.push((a.metadata.widthOfGlyph(a.metadata.characterToGlyph(i))+s*(1e3/o)||0)/1e3):(d=f&&\"object\"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(h[i])&&!isNaN(parseInt(h[i][g],10))?h[i][g]/l:0,v.push((c[i]||m)/u+d)),g=i;return v},Yt=Vt.getStringUnitWidth=function(t,e){var r=(e=e||{}).fontSize||this.internal.getFontSize(),n=e.font||this.internal.getFont(),i=e.charSpace||this.internal.getCharSpace();return Vt.processArabic&&(t=Vt.processArabic(t)),\"function\"==typeof n.metadata.widthOfString?n.metadata.widthOfString(t,r,i)/r:Gt.apply(this,arguments).reduce((function(t,e){return t+e}),0)},Jt=function(t,e,r,n){for(var i=[],a=0,o=t.length,s=0;a!==o&&s+e[a]<r;)s+=e[a],a++;i.push(t.slice(0,a));var c=a;for(s=0;a!==o;)s+e[a]>n&&(i.push(t.slice(c,a)),s=0,c=a),s+=e[a],a++;return c!==a&&i.push(t.slice(c,a)),i},Xt=function(t,e,r){r||(r={});var n,i,a,o,s,c,u,h=[],l=[h],f=r.textIndent||0,d=0,p=0,g=t.split(\" \"),m=Gt.apply(this,[\" \",r])[0];if(c=-1===r.lineIndent?g[0].length+2:r.lineIndent||0){var v=Array(c).join(\" \"),b=[];g.map((function(t){(t=t.split(/\\s*\\n/)).length>1?b=b.concat(t.map((function(t,e){return(e&&t.length?\"\\n\":\"\")+t}))):b.push(t[0])})),g=b,c=Yt.apply(this,[v,r])}for(a=0,o=g.length;a<o;a++){var y=0;if(n=g[a],c&&\"\\n\"==n[0]&&(n=n.substr(1),y=1),f+d+(p=(i=Gt.apply(this,[n,r])).reduce((function(t,e){return t+e}),0))>e||y){if(p>e){for(s=Jt.apply(this,[n,i,e-(f+d),e]),h.push(s.shift()),h=[s.pop()];s.length;)l.push([s.shift()]);p=i.slice(n.length-(h[0]?h[0].length:0)).reduce((function(t,e){return t+e}),0)}else h=[n];l.push(h),f=p+c,d=m}else h.push(n),f+=d+p,d=m}return u=c?function(t,e){return(e?v:\"\")+t.join(\" \")}:function(t){return t.join(\" \")},l.map(u)},Vt.splitTextToSize=function(t,e,r){var n,i=(r=r||{}).fontSize||this.internal.getFontSize(),a=function(t){if(t.widths&&t.kerning)return{widths:t.widths,kerning:t.kerning};var e=this.internal.getFont(t.fontName,t.fontStyle);return e.metadata.Unicode?{widths:e.metadata.Unicode.widths||{0:1},kerning:e.metadata.Unicode.kerning||{}}:{font:e.metadata,fontSize:this.internal.getFontSize(),charSpace:this.internal.getCharSpace()}}.call(this,r);n=Array.isArray(t)?t:String(t).split(/\\r?\\n/);var o=1*this.internal.scaleFactor*e/i;a.textIndent=r.textIndent?1*r.textIndent*this.internal.scaleFactor/i:0,a.lineIndent=r.lineIndent;var s,c,u=[];for(s=0,c=n.length;s<c;s++)u=u.concat(Xt.apply(this,[n[s],o,a]));return u},function(e){e.__fontmetrics__=e.__fontmetrics__||{};for(var r=\"klmnopqrstuvwxyz\",n={},i={},a=0;a<r.length;a++)n[r[a]]=\"0123456789abcdef\"[a],i[\"0123456789abcdef\"[a]]=r[a];var o=function(t){return\"0x\"+parseInt(t,10).toString(16)},s=e.__fontmetrics__.compress=function(e){var r,n,a,c,u=[\"{\"];for(var h in e){if(r=e[h],isNaN(parseInt(h,10))?n=\"'\"+h+\"'\":(h=parseInt(h,10),n=(n=o(h).slice(2)).slice(0,-1)+i[n.slice(-1)]),\"number\"==typeof r)r<0?(a=o(r).slice(3),c=\"-\"):(a=o(r).slice(2),c=\"\"),a=c+a.slice(0,-1)+i[a.slice(-1)];else{if(\"object\"!==(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(r))throw new Error(\"Don't know what to do with value type \"+(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(r)+\".\");a=s(r)}u.push(n+a)}return u.push(\"}\"),u.join(\"\")},c=e.__fontmetrics__.uncompress=function(t){if(\"string\"!=typeof t)throw new Error(\"Invalid argument passed to uncompress.\");for(var e,r,i,a,o={},s=1,c=o,u=[],h=\"\",l=\"\",f=t.length-1,d=1;d<f;d+=1)\"'\"==(a=t[d])?e?(i=e.join(\"\"),e=void 0):e=[]:e?e.push(a):\"{\"==a?(u.push([c,i]),c={},i=void 0):\"}\"==a?((r=u.pop())[0][r[1]]=c,i=void 0,c=r[0]):\"-\"==a?s=-1:void 0===i?n.hasOwnProperty(a)?(h+=n[a],i=parseInt(h,16)*s,s=1,h=\"\"):h+=a:n.hasOwnProperty(a)?(l+=n[a],c[i]=parseInt(l,16)*s,s=1,i=void 0,l=\"\"):l+=a;return o},u={codePages:[\"WinAnsiEncoding\"],WinAnsiEncoding:c(\"{19m8n201n9q201o9r201s9l201t9m201u8m201w9n201x9o201y8o202k8q202l8r202m9p202q8p20aw8k203k8t203t8v203u9v2cq8s212m9t15m8w15n9w2dw9s16k8u16l9u17s9z17x8y17y9y}\")},h={Unicode:{Courier:u,\"Courier-Bold\":u,\"Courier-BoldOblique\":u,\"Courier-Oblique\":u,Helvetica:u,\"Helvetica-Bold\":u,\"Helvetica-BoldOblique\":u,\"Helvetica-Oblique\":u,\"Times-Roman\":u,\"Times-Bold\":u,\"Times-BoldItalic\":u,\"Times-Italic\":u}},l={Unicode:{\"Courier-Oblique\":c(\"{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}\"),\"Times-BoldItalic\":c(\"{'widths'{k3o2q4ycx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2r202m2n2n3m2o3m2p5n202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5n4l4m4m4m4n4m4o4s4p4m4q4m4r4s4s4y4t2r4u3m4v4m4w3x4x5t4y4s4z4s5k3x5l4s5m4m5n3r5o3x5p4s5q4m5r5t5s4m5t3x5u3x5v2l5w1w5x2l5y3t5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q2l6r3m6s3r6t1w6u1w6v3m6w1w6x4y6y3r6z3m7k3m7l3m7m2r7n2r7o1w7p3r7q2w7r4m7s3m7t2w7u2r7v2n7w1q7x2n7y3t202l3mcl4mal2ram3man3mao3map3mar3mas2lat4uau1uav3maw3way4uaz2lbk2sbl3t'fof'6obo2lbp3tbq3mbr1tbs2lbu1ybv3mbz3mck4m202k3mcm4mcn4mco4mcp4mcq5ycr4mcs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz2w203k6o212m6o2dw2l2cq2l3t3m3u2l17s3x19m3m}'kerning'{cl{4qu5kt5qt5rs17ss5ts}201s{201ss}201t{cks4lscmscnscoscpscls2wu2yu201ts}201x{2wu2yu}2k{201ts}2w{4qx5kx5ou5qx5rs17su5tu}2x{17su5tu5ou}2y{4qx5kx5ou5qx5rs17ss5ts}'fof'-6ofn{17sw5tw5ou5qw5rs}7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qs}3v{17su5tu5os5qs}7p{17su5tu}ck{4qu5kt5qt5rs17ss5ts}4l{4qu5kt5qt5rs17ss5ts}cm{4qu5kt5qt5rs17ss5ts}cn{4qu5kt5qt5rs17ss5ts}co{4qu5kt5qt5rs17ss5ts}cp{4qu5kt5qt5rs17ss5ts}6l{4qu5ou5qw5rt17su5tu}5q{ckuclucmucnucoucpu4lu}5r{ckuclucmucnucoucpu4lu}7q{cksclscmscnscoscps4ls}6p{4qu5ou5qw5rt17sw5tw}ek{4qu5ou5qw5rt17su5tu}el{4qu5ou5qw5rt17su5tu}em{4qu5ou5qw5rt17su5tu}en{4qu5ou5qw5rt17su5tu}eo{4qu5ou5qw5rt17su5tu}ep{4qu5ou5qw5rt17su5tu}es{17ss5ts5qs4qu}et{4qu5ou5qw5rt17sw5tw}eu{4qu5ou5qw5rt17ss5ts}ev{17ss5ts5qs4qu}6z{17sw5tw5ou5qw5rs}fm{17sw5tw5ou5qw5rs}7n{201ts}fo{17sw5tw5ou5qw5rs}fp{17sw5tw5ou5qw5rs}fq{17sw5tw5ou5qw5rs}7r{cksclscmscnscoscps4ls}fs{17sw5tw5ou5qw5rs}ft{17su5tu}fu{17su5tu}fv{17su5tu}fw{17su5tu}fz{cksclscmscnscoscps4ls}}}\"),\"Helvetica-Bold\":c(\"{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}\"),Courier:c(\"{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}\"),\"Courier-BoldOblique\":c(\"{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}\"),\"Times-Bold\":c(\"{'widths'{k3q2q5ncx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2l202m2n2n3m2o3m2p6o202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5x4l4s4m4m4n4s4o4s4p4m4q3x4r4y4s4y4t2r4u3m4v4y4w4m4x5y4y4s4z4y5k3x5l4y5m4s5n3r5o4m5p4s5q4s5r6o5s4s5t4s5u4m5v2l5w1w5x2l5y3u5z3m6k2l6l3m6m3r6n2w6o3r6p2w6q2l6r3m6s3r6t1w6u2l6v3r6w1w6x5n6y3r6z3m7k3r7l3r7m2w7n2r7o2l7p3r7q3m7r4s7s3m7t3m7u2w7v2r7w1q7x2r7y3o202l3mcl4sal2lam3man3mao3map3mar3mas2lat4uau1yav3maw3tay4uaz2lbk2sbl3t'fof'6obo2lbp3rbr1tbs2lbu2lbv3mbz3mck4s202k3mcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3rek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3m3u2l17s4s19m3m}'kerning'{cl{4qt5ks5ot5qy5rw17sv5tv}201t{cks4lscmscnscoscpscls4wv}2k{201ts}2w{4qu5ku7mu5os5qx5ru17su5tu}2x{17su5tu5ou5qs}2y{4qv5kv7mu5ot5qz5ru17su5tu}'fof'-6o7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qu}3v{17su5tu5os5qu}fu{17su5tu5ou5qu}7p{17su5tu5ou5qu}ck{4qt5ks5ot5qy5rw17sv5tv}4l{4qt5ks5ot5qy5rw17sv5tv}cm{4qt5ks5ot5qy5rw17sv5tv}cn{4qt5ks5ot5qy5rw17sv5tv}co{4qt5ks5ot5qy5rw17sv5tv}cp{4qt5ks5ot5qy5rw17sv5tv}6l{17st5tt5ou5qu}17s{ckuclucmucnucoucpu4lu4wu}5o{ckuclucmucnucoucpu4lu4wu}5q{ckzclzcmzcnzcozcpz4lz4wu}5r{ckxclxcmxcnxcoxcpx4lx4wu}5t{ckuclucmucnucoucpu4lu4wu}7q{ckuclucmucnucoucpu4lu}6p{17sw5tw5ou5qu}ek{17st5tt5qu}el{17st5tt5ou5qu}em{17st5tt5qu}en{17st5tt5qu}eo{17st5tt5qu}ep{17st5tt5ou5qu}es{17ss5ts5qu}et{17sw5tw5ou5qu}eu{17sw5tw5ou5qu}ev{17ss5ts5qu}6z{17sw5tw5ou5qu5rs}fm{17sw5tw5ou5qu5rs}fn{17sw5tw5ou5qu5rs}fo{17sw5tw5ou5qu5rs}fp{17sw5tw5ou5qu5rs}fq{17sw5tw5ou5qu5rs}7r{cktcltcmtcntcotcpt4lt5os}fs{17sw5tw5ou5qu5rs}ft{17su5tu5ou5qu}7m{5os}fv{17su5tu5ou5qu}fw{17su5tu5ou5qu}fz{cksclscmscnscoscps4ls}}}\"),Symbol:c(\"{'widths'{k3uaw4r19m3m2k1t2l2l202m2y2n3m2p5n202q6o3k3m2s2l2t2l2v3r2w1t3m3m2y1t2z1wbk2sbl3r'fof'6o3n3m3o3m3p3m3q3m3r3m3s3m3t3m3u1w3v1w3w3r3x3r3y3r3z2wbp3t3l3m5v2l5x2l5z3m2q4yfr3r7v3k7w1o7x3k}'kerning'{'fof'-6o}}\"),Helvetica:c(\"{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}\"),\"Helvetica-BoldOblique\":c(\"{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}\"),ZapfDingbats:c(\"{'widths'{k4u2k1w'fof'6o}'kerning'{'fof'-6o}}\"),\"Courier-Bold\":c(\"{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}\"),\"Times-Italic\":c(\"{'widths'{k3n2q4ycx2l201n3m201o5t201s2l201t2l201u2l201w3r201x3r201y3r2k1t2l2l202m2n2n3m2o3m2p5n202q5t2r1p2s2l2t2l2u3m2v4n2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w4n3x4n3y4n3z3m4k5w4l3x4m3x4n4m4o4s4p3x4q3x4r4s4s4s4t2l4u2w4v4m4w3r4x5n4y4m4z4s5k3x5l4s5m3x5n3m5o3r5p4s5q3x5r5n5s3x5t3r5u3r5v2r5w1w5x2r5y2u5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q1w6r3m6s3m6t1w6u1w6v2w6w1w6x4s6y3m6z3m7k3m7l3m7m2r7n2r7o1w7p3m7q2w7r4m7s2w7t2w7u2r7v2s7w1v7x2s7y3q202l3mcl3xal2ram3man3mao3map3mar3mas2lat4wau1vav3maw4nay4waz2lbk2sbl4n'fof'6obo2lbp3mbq3obr1tbs2lbu1zbv3mbz3mck3x202k3mcm3xcn3xco3xcp3xcq5tcr4mcs3xct3xcu3xcv3xcw2l2m2ucy2lcz2ldl4mdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr4nfs3mft3mfu3mfv3mfw3mfz2w203k6o212m6m2dw2l2cq2l3t3m3u2l17s3r19m3m}'kerning'{cl{5kt4qw}201s{201sw}201t{201tw2wy2yy6q-t}201x{2wy2yy}2k{201tw}2w{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}2x{17ss5ts5os}2y{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}'fof'-6o6t{17ss5ts5qs}7t{5os}3v{5qs}7p{17su5tu5qs}ck{5kt4qw}4l{5kt4qw}cm{5kt4qw}cn{5kt4qw}co{5kt4qw}cp{5kt4qw}6l{4qs5ks5ou5qw5ru17su5tu}17s{2ks}5q{ckvclvcmvcnvcovcpv4lv}5r{ckuclucmucnucoucpu4lu}5t{2ks}6p{4qs5ks5ou5qw5ru17su5tu}ek{4qs5ks5ou5qw5ru17su5tu}el{4qs5ks5ou5qw5ru17su5tu}em{4qs5ks5ou5qw5ru17su5tu}en{4qs5ks5ou5qw5ru17su5tu}eo{4qs5ks5ou5qw5ru17su5tu}ep{4qs5ks5ou5qw5ru17su5tu}es{5ks5qs4qs}et{4qs5ks5ou5qw5ru17su5tu}eu{4qs5ks5qw5ru17su5tu}ev{5ks5qs4qs}ex{17ss5ts5qs}6z{4qv5ks5ou5qw5ru17su5tu}fm{4qv5ks5ou5qw5ru17su5tu}fn{4qv5ks5ou5qw5ru17su5tu}fo{4qv5ks5ou5qw5ru17su5tu}fp{4qv5ks5ou5qw5ru17su5tu}fq{4qv5ks5ou5qw5ru17su5tu}7r{5os}fs{4qv5ks5ou5qw5ru17su5tu}ft{17su5tu5qs}fu{17su5tu5qs}fv{17su5tu5qs}fw{17su5tu5qs}}}\"),\"Times-Roman\":c(\"{'widths'{k3n2q4ycx2l201n3m201o6o201s2l201t2l201u2l201w2w201x2w201y2w2k1t2l2l202m2n2n3m2o3m2p5n202q6o2r1m2s2l2t2l2u3m2v3s2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v1w3w3s3x3s3y3s3z2w4k5w4l4s4m4m4n4m4o4s4p3x4q3r4r4s4s4s4t2l4u2r4v4s4w3x4x5t4y4s4z4s5k3r5l4s5m4m5n3r5o3x5p4s5q4s5r5y5s4s5t4s5u3x5v2l5w1w5x2l5y2z5z3m6k2l6l2w6m3m6n2w6o3m6p2w6q2l6r3m6s3m6t1w6u1w6v3m6w1w6x4y6y3m6z3m7k3m7l3m7m2l7n2r7o1w7p3m7q3m7r4s7s3m7t3m7u2w7v3k7w1o7x3k7y3q202l3mcl4sal2lam3man3mao3map3mar3mas2lat4wau1vav3maw3say4waz2lbk2sbl3s'fof'6obo2lbp3mbq2xbr1tbs2lbu1zbv3mbz2wck4s202k3mcm4scn4sco4scp4scq5tcr4mcs3xct3xcu3xcv3xcw2l2m2tcy2lcz2ldl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek2wel2wem2wen2weo2wep2weq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr3sfs3mft3mfu3mfv3mfw3mfz3m203k6o212m6m2dw2l2cq2l3t3m3u1w17s4s19m3m}'kerning'{cl{4qs5ku17sw5ou5qy5rw201ss5tw201ws}201s{201ss}201t{ckw4lwcmwcnwcowcpwclw4wu201ts}2k{201ts}2w{4qs5kw5os5qx5ru17sx5tx}2x{17sw5tw5ou5qu}2y{4qs5kw5os5qx5ru17sx5tx}'fof'-6o7t{ckuclucmucnucoucpu4lu5os5rs}3u{17su5tu5qs}3v{17su5tu5qs}7p{17sw5tw5qs}ck{4qs5ku17sw5ou5qy5rw201ss5tw201ws}4l{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cm{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cn{4qs5ku17sw5ou5qy5rw201ss5tw201ws}co{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cp{4qs5ku17sw5ou5qy5rw201ss5tw201ws}6l{17su5tu5os5qw5rs}17s{2ktclvcmvcnvcovcpv4lv4wuckv}5o{ckwclwcmwcnwcowcpw4lw4wu}5q{ckyclycmycnycoycpy4ly4wu5ms}5r{cktcltcmtcntcotcpt4lt4ws}5t{2ktclvcmvcnvcovcpv4lv4wuckv}7q{cksclscmscnscoscps4ls}6p{17su5tu5qw5rs}ek{5qs5rs}el{17su5tu5os5qw5rs}em{17su5tu5os5qs5rs}en{17su5qs5rs}eo{5qs5rs}ep{17su5tu5os5qw5rs}es{5qs}et{17su5tu5qw5rs}eu{17su5tu5qs5rs}ev{5qs}6z{17sv5tv5os5qx5rs}fm{5os5qt5rs}fn{17sv5tv5os5qx5rs}fo{17sv5tv5os5qx5rs}fp{5os5qt5rs}fq{5os5qt5rs}7r{ckuclucmucnucoucpu4lu5os}fs{17sv5tv5os5qx5rs}ft{17ss5ts5qs}fu{17sw5tw5qs}fv{17sw5tw5qs}fw{17ss5ts5qs}fz{ckuclucmucnucoucpu4lu5os5rs}}}\"),\"Helvetica-Oblique\":c(\"{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}\")}};e.events.push([\"addFont\",function(t){var e=t.font,r=l.Unicode[e.postScriptName];r&&(e.metadata.Unicode={},e.metadata.Unicode.widths=r.widths,e.metadata.Unicode.kerning=r.kerning);var n=h.Unicode[e.postScriptName];n&&(e.metadata.Unicode.encoding=n,e.encoding=n.codePages[0])}])}(E.API),\n/**\n * @license\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */\nfunction(t){var e=function(t){for(var e=t.length,r=new Uint8Array(e),n=0;n<e;n++)r[n]=t.charCodeAt(n);return r};t.API.events.push([\"addFont\",function(r){var n=void 0,i=r.font,a=r.instance;if(!i.isStandardFont){if(void 0===a)throw new Error(\"Font does not exist in vFS, import fonts or remove declaration doc.addFont('\"+i.postScriptName+\"').\");if(\"string\"!=typeof(n=!1===a.existsFileInVFS(i.postScriptName)?a.loadFile(i.postScriptName):a.getFileFromVFS(i.postScriptName)))throw new Error(\"Font is not stored as string-data in vFS, import fonts or remove declaration doc.addFont('\"+i.postScriptName+\"').\");!function(r,n){n=/^\\x00\\x01\\x00\\x00/.test(n)?e(n):e(u(n)),r.metadata=t.API.TTFFont.open(n),r.metadata.Unicode=r.metadata.Unicode||{encoding:{},kerning:{},widths:[]},r.metadata.glyIdsUsed=[0]}(i,n)}}])}(E),\n/** @license\n * Copyright (c) 2012 Willow Systems Corporation, https://github.com/willowsystems\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n * ====================================================================\n */\nfunction(t){function e(){return(n.canvg?Promise.resolve(n.canvg):__webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_canvg_lib_index_es_js\").then(__webpack_require__.bind(__webpack_require__, /*! canvg */ \"(app-pages-browser)/./node_modules/canvg/lib/index.es.js\"))).catch((function(t){return Promise.reject(new Error(\"Could not load canvg: \"+t))})).then((function(t){return t.default?t.default:t}))}E.API.addSvgAsImage=function(t,r,n,i,o,s,c,u){if(isNaN(r)||isNaN(n))throw a.error(\"jsPDF.addSvgAsImage: Invalid coordinates\",arguments),new Error(\"Invalid coordinates passed to jsPDF.addSvgAsImage\");if(isNaN(i)||isNaN(o))throw a.error(\"jsPDF.addSvgAsImage: Invalid measurements\",arguments),new Error(\"Invalid measurements (width and/or height) passed to jsPDF.addSvgAsImage\");var h=document.createElement(\"canvas\");h.width=i,h.height=o;var l=h.getContext(\"2d\");l.fillStyle=\"#fff\",l.fillRect(0,0,h.width,h.height);var f={ignoreMouse:!0,ignoreAnimation:!0,ignoreDimensions:!0},d=this;return e().then((function(e){return e.fromString(l,t,f)}),(function(){return Promise.reject(new Error(\"Could not load canvg.\"))})).then((function(t){return t.render(f)})).then((function(){d.addImage(h.toDataURL(\"image/jpeg\",1),r,n,i,o,c,u)}))}}(),E.API.putTotalPages=function(t){var e,r=0;parseInt(this.internal.getFont().id.substr(1),10)<15?(e=new RegExp(t,\"g\"),r=this.internal.getNumberOfPages()):(e=new RegExp(this.pdfEscape16(t,this.internal.getFont()),\"g\"),r=this.pdfEscape16(this.internal.getNumberOfPages()+\"\",this.internal.getFont()));for(var n=1;n<=this.internal.getNumberOfPages();n++)for(var i=0;i<this.internal.pages[n].length;i++)this.internal.pages[n][i]=this.internal.pages[n][i].replace(e,r);return this},E.API.viewerPreferences=function(e,r){var n;e=e||{},r=r||!1;var i,a,o,s={HideToolbar:{defaultValue:!1,value:!1,type:\"boolean\",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.3},HideMenubar:{defaultValue:!1,value:!1,type:\"boolean\",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.3},HideWindowUI:{defaultValue:!1,value:!1,type:\"boolean\",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.3},FitWindow:{defaultValue:!1,value:!1,type:\"boolean\",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.3},CenterWindow:{defaultValue:!1,value:!1,type:\"boolean\",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.3},DisplayDocTitle:{defaultValue:!1,value:!1,type:\"boolean\",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.4},NonFullScreenPageMode:{defaultValue:\"UseNone\",value:\"UseNone\",type:\"name\",explicitSet:!1,valueSet:[\"UseNone\",\"UseOutlines\",\"UseThumbs\",\"UseOC\"],pdfVersion:1.3},Direction:{defaultValue:\"L2R\",value:\"L2R\",type:\"name\",explicitSet:!1,valueSet:[\"L2R\",\"R2L\"],pdfVersion:1.3},ViewArea:{defaultValue:\"CropBox\",value:\"CropBox\",type:\"name\",explicitSet:!1,valueSet:[\"MediaBox\",\"CropBox\",\"TrimBox\",\"BleedBox\",\"ArtBox\"],pdfVersion:1.4},ViewClip:{defaultValue:\"CropBox\",value:\"CropBox\",type:\"name\",explicitSet:!1,valueSet:[\"MediaBox\",\"CropBox\",\"TrimBox\",\"BleedBox\",\"ArtBox\"],pdfVersion:1.4},PrintArea:{defaultValue:\"CropBox\",value:\"CropBox\",type:\"name\",explicitSet:!1,valueSet:[\"MediaBox\",\"CropBox\",\"TrimBox\",\"BleedBox\",\"ArtBox\"],pdfVersion:1.4},PrintClip:{defaultValue:\"CropBox\",value:\"CropBox\",type:\"name\",explicitSet:!1,valueSet:[\"MediaBox\",\"CropBox\",\"TrimBox\",\"BleedBox\",\"ArtBox\"],pdfVersion:1.4},PrintScaling:{defaultValue:\"AppDefault\",value:\"AppDefault\",type:\"name\",explicitSet:!1,valueSet:[\"AppDefault\",\"None\"],pdfVersion:1.6},Duplex:{defaultValue:\"\",value:\"none\",type:\"name\",explicitSet:!1,valueSet:[\"Simplex\",\"DuplexFlipShortEdge\",\"DuplexFlipLongEdge\",\"none\"],pdfVersion:1.7},PickTrayByPDFSize:{defaultValue:!1,value:!1,type:\"boolean\",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.7},PrintPageRange:{defaultValue:\"\",value:\"\",type:\"array\",explicitSet:!1,valueSet:null,pdfVersion:1.7},NumCopies:{defaultValue:1,value:1,type:\"integer\",explicitSet:!1,valueSet:null,pdfVersion:1.7}},c=Object.keys(s),u=[],h=0,l=0,f=0;function d(t,e){var r,n=!1;for(r=0;r<t.length;r+=1)t[r]===e&&(n=!0);return n}if(void 0===this.internal.viewerpreferences&&(this.internal.viewerpreferences={},this.internal.viewerpreferences.configuration=JSON.parse(JSON.stringify(s)),this.internal.viewerpreferences.isSubscribed=!1),n=this.internal.viewerpreferences.configuration,\"reset\"===e||!0===r){var p=c.length;for(f=0;f<p;f+=1)n[c[f]].value=n[c[f]].defaultValue,n[c[f]].explicitSet=!1}if(\"object\"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(e))for(a in e)if(o=e[a],d(c,a)&&void 0!==o){if(\"boolean\"===n[a].type&&\"boolean\"==typeof o)n[a].value=o;else if(\"name\"===n[a].type&&d(n[a].valueSet,o))n[a].value=o;else if(\"integer\"===n[a].type&&Number.isInteger(o))n[a].value=o;else if(\"array\"===n[a].type){for(h=0;h<o.length;h+=1)if(i=!0,1===o[h].length&&\"number\"==typeof o[h][0])u.push(String(o[h]-1));else if(o[h].length>1){for(l=0;l<o[h].length;l+=1)\"number\"!=typeof o[h][l]&&(i=!1);!0===i&&u.push([o[h][0]-1,o[h][1]-1].join(\" \"))}n[a].value=\"[\"+u.join(\" \")+\"]\"}else n[a].value=n[a].defaultValue;n[a].explicitSet=!0}return!1===this.internal.viewerpreferences.isSubscribed&&(this.internal.events.subscribe(\"putCatalog\",(function(){var t,e=[];for(t in n)!0===n[t].explicitSet&&(\"name\"===n[t].type?e.push(\"/\"+t+\" /\"+n[t].value):e.push(\"/\"+t+\" \"+n[t].value));0!==e.length&&this.internal.write(\"/ViewerPreferences\\n<<\\n\"+e.join(\"\\n\")+\"\\n>>\")})),this.internal.viewerpreferences.isSubscribed=!0),this.internal.viewerpreferences.configuration=n,this},\n/** ====================================================================\n * @license\n * jsPDF XMP metadata plugin\n * Copyright (c) 2016 Jussi Utunen, u-jussi@suomi24.fi\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n * ====================================================================\n */\nfunction(t){var e=function(){var t='<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"><rdf:Description rdf:about=\"\" xmlns:jspdf=\"'+this.internal.__metadata__.namespaceuri+'\"><jspdf:metadata>',e=unescape(encodeURIComponent('<x:xmpmeta xmlns:x=\"adobe:ns:meta/\">')),r=unescape(encodeURIComponent(t)),n=unescape(encodeURIComponent(this.internal.__metadata__.metadata)),i=unescape(encodeURIComponent(\"</jspdf:metadata></rdf:Description></rdf:RDF>\")),a=unescape(encodeURIComponent(\"</x:xmpmeta>\")),o=r.length+n.length+i.length+e.length+a.length;this.internal.__metadata__.metadata_object_number=this.internal.newObject(),this.internal.write(\"<< /Type /Metadata /Subtype /XML /Length \"+o+\" >>\"),this.internal.write(\"stream\"),this.internal.write(e+r+n+i+a),this.internal.write(\"endstream\"),this.internal.write(\"endobj\")},r=function(){this.internal.__metadata__.metadata_object_number&&this.internal.write(\"/Metadata \"+this.internal.__metadata__.metadata_object_number+\" 0 R\")};t.addMetadata=function(t,n){return void 0===this.internal.__metadata__&&(this.internal.__metadata__={metadata:t,namespaceuri:n||\"http://jspdf.default.namespaceuri/\"},this.internal.events.subscribe(\"putCatalog\",r),this.internal.events.subscribe(\"postPutResources\",e)),this}}(E.API),function(t){var e=t.API,r=e.pdfEscape16=function(t,e){for(var r,n=e.metadata.Unicode.widths,i=[\"\",\"0\",\"00\",\"000\",\"0000\"],a=[\"\"],o=0,s=t.length;o<s;++o){if(r=e.metadata.characterToGlyph(t.charCodeAt(o)),e.metadata.glyIdsUsed.push(r),e.metadata.toUnicode[r]=t.charCodeAt(o),-1==n.indexOf(r)&&(n.push(r),n.push([parseInt(e.metadata.widthOfGlyph(r),10)])),\"0\"==r)return a.join(\"\");r=r.toString(16),a.push(i[4-r.length],r)}return a.join(\"\")},n=function(t){var e,r,n,i,a,o,s;for(a=\"/CIDInit /ProcSet findresource begin\\n12 dict begin\\nbegincmap\\n/CIDSystemInfo <<\\n  /Registry (Adobe)\\n  /Ordering (UCS)\\n  /Supplement 0\\n>> def\\n/CMapName /Adobe-Identity-UCS def\\n/CMapType 2 def\\n1 begincodespacerange\\n<0000><ffff>\\nendcodespacerange\",n=[],o=0,s=(r=Object.keys(t).sort((function(t,e){return t-e}))).length;o<s;o++)e=r[o],n.length>=100&&(a+=\"\\n\"+n.length+\" beginbfchar\\n\"+n.join(\"\\n\")+\"\\nendbfchar\",n=[]),void 0!==t[e]&&null!==t[e]&&\"function\"==typeof t[e].toString&&(i=(\"0000\"+t[e].toString(16)).slice(-4),e=(\"0000\"+(+e).toString(16)).slice(-4),n.push(\"<\"+e+\"><\"+i+\">\"));return n.length&&(a+=\"\\n\"+n.length+\" beginbfchar\\n\"+n.join(\"\\n\")+\"\\nendbfchar\\n\"),a+=\"endcmap\\nCMapName currentdict /CMap defineresource pop\\nend\\nend\"};e.events.push([\"putFont\",function(e){!function(e){var r=e.font,i=e.out,a=e.newObject,o=e.putStream;if(r.metadata instanceof t.API.TTFFont&&\"Identity-H\"===r.encoding){for(var s=r.metadata.Unicode.widths,c=r.metadata.subset.encode(r.metadata.glyIdsUsed,1),u=\"\",h=0;h<c.length;h++)u+=String.fromCharCode(c[h]);var l=a();o({data:u,addLength1:!0,objectId:l}),i(\"endobj\");var f=a();o({data:n(r.metadata.toUnicode),addLength1:!0,objectId:f}),i(\"endobj\");var d=a();i(\"<<\"),i(\"/Type /FontDescriptor\"),i(\"/FontName /\"+F(r.fontName)),i(\"/FontFile2 \"+l+\" 0 R\"),i(\"/FontBBox \"+t.API.PDFObject.convert(r.metadata.bbox)),i(\"/Flags \"+r.metadata.flags),i(\"/StemV \"+r.metadata.stemV),i(\"/ItalicAngle \"+r.metadata.italicAngle),i(\"/Ascent \"+r.metadata.ascender),i(\"/Descent \"+r.metadata.decender),i(\"/CapHeight \"+r.metadata.capHeight),i(\">>\"),i(\"endobj\");var p=a();i(\"<<\"),i(\"/Type /Font\"),i(\"/BaseFont /\"+F(r.fontName)),i(\"/FontDescriptor \"+d+\" 0 R\"),i(\"/W \"+t.API.PDFObject.convert(s)),i(\"/CIDToGIDMap /Identity\"),i(\"/DW 1000\"),i(\"/Subtype /CIDFontType2\"),i(\"/CIDSystemInfo\"),i(\"<<\"),i(\"/Supplement 0\"),i(\"/Registry (Adobe)\"),i(\"/Ordering (\"+r.encoding+\")\"),i(\">>\"),i(\">>\"),i(\"endobj\"),r.objectNumber=a(),i(\"<<\"),i(\"/Type /Font\"),i(\"/Subtype /Type0\"),i(\"/ToUnicode \"+f+\" 0 R\"),i(\"/BaseFont /\"+F(r.fontName)),i(\"/Encoding /\"+r.encoding),i(\"/DescendantFonts [\"+p+\" 0 R]\"),i(\">>\"),i(\"endobj\"),r.isAlreadyPutted=!0}}(e)}]);e.events.push([\"putFont\",function(e){!function(e){var r=e.font,i=e.out,a=e.newObject,o=e.putStream;if(r.metadata instanceof t.API.TTFFont&&\"WinAnsiEncoding\"===r.encoding){for(var s=r.metadata.rawData,c=\"\",u=0;u<s.length;u++)c+=String.fromCharCode(s[u]);var h=a();o({data:c,addLength1:!0,objectId:h}),i(\"endobj\");var l=a();o({data:n(r.metadata.toUnicode),addLength1:!0,objectId:l}),i(\"endobj\");var f=a();i(\"<<\"),i(\"/Descent \"+r.metadata.decender),i(\"/CapHeight \"+r.metadata.capHeight),i(\"/StemV \"+r.metadata.stemV),i(\"/Type /FontDescriptor\"),i(\"/FontFile2 \"+h+\" 0 R\"),i(\"/Flags 96\"),i(\"/FontBBox \"+t.API.PDFObject.convert(r.metadata.bbox)),i(\"/FontName /\"+F(r.fontName)),i(\"/ItalicAngle \"+r.metadata.italicAngle),i(\"/Ascent \"+r.metadata.ascender),i(\">>\"),i(\"endobj\"),r.objectNumber=a();for(var d=0;d<r.metadata.hmtx.widths.length;d++)r.metadata.hmtx.widths[d]=parseInt(r.metadata.hmtx.widths[d]*(1e3/r.metadata.head.unitsPerEm));i(\"<</Subtype/TrueType/Type/Font/ToUnicode \"+l+\" 0 R/BaseFont/\"+F(r.fontName)+\"/FontDescriptor \"+f+\" 0 R/Encoding/\"+r.encoding+\" /FirstChar 29 /LastChar 255 /Widths \"+t.API.PDFObject.convert(r.metadata.hmtx.widths)+\">>\"),i(\"endobj\"),r.isAlreadyPutted=!0}}(e)}]);var i=function(t){var e,n=t.text||\"\",i=t.x,a=t.y,o=t.options||{},s=t.mutex||{},c=s.pdfEscape,u=s.activeFontKey,h=s.fonts,l=u,f=\"\",d=0,p=\"\",g=h[l].encoding;if(\"Identity-H\"!==h[l].encoding)return{text:n,x:i,y:a,options:o,mutex:s};for(p=n,l=u,Array.isArray(n)&&(p=n[0]),d=0;d<p.length;d+=1)h[l].metadata.hasOwnProperty(\"cmap\")&&(e=h[l].metadata.cmap.unicode.codeMap[p[d].charCodeAt(0)]),e||p[d].charCodeAt(0)<256&&h[l].metadata.hasOwnProperty(\"Unicode\")?f+=p[d]:f+=\"\";var m=\"\";return parseInt(l.slice(1))<14||\"WinAnsiEncoding\"===g?m=c(f,l).split(\"\").map((function(t){return t.charCodeAt(0).toString(16)})).join(\"\"):\"Identity-H\"===g&&(m=r(f,h[l])),s.isHex=!0,{text:m,x:i,y:a,options:o,mutex:s}};e.events.push([\"postProcessText\",function(t){var e=t.text||\"\",r=[],n={text:e,x:t.x,y:t.y,options:t.options,mutex:t.mutex};if(Array.isArray(e)){var a=0;for(a=0;a<e.length;a+=1)Array.isArray(e[a])&&3===e[a].length?r.push([i(Object.assign({},n,{text:e[a][0]})).text,e[a][1],e[a][2]]):r.push(i(Object.assign({},n,{text:e[a]})).text);t.text=r}else t.text=i(Object.assign({},n,{text:e})).text}])}(E),\n/**\n * @license\n * jsPDF virtual FileSystem functionality\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */\nfunction(t){var e=function(){return void 0===this.internal.vFS&&(this.internal.vFS={}),!0};t.existsFileInVFS=function(t){return e.call(this),void 0!==this.internal.vFS[t]},t.addFileToVFS=function(t,r){return e.call(this),this.internal.vFS[t]=r,this},t.getFileFromVFS=function(t){return e.call(this),void 0!==this.internal.vFS[t]?this.internal.vFS[t]:null}}(E.API),\n/**\n * @license\n * Unicode Bidi Engine based on the work of Alex Shensis (@asthensis)\n * MIT License\n */\nfunction(t){t.__bidiEngine__=t.prototype.__bidiEngine__=function(t){var r,n,i,a,o,s,c,u=e,h=[[0,3,0,1,0,0,0],[0,3,0,1,2,2,0],[0,3,0,17,2,0,1],[0,3,5,5,4,1,0],[0,3,21,21,4,0,1],[0,3,5,5,4,2,0]],l=[[2,0,1,1,0,1,0],[2,0,1,1,0,2,0],[2,0,2,1,3,2,0],[2,0,2,33,3,1,1]],f={L:0,R:1,EN:2,AN:3,N:4,B:5,S:6},d={0:0,5:1,6:2,7:3,32:4,251:5,254:6,255:7},p=[\"(\",\")\",\"(\",\"<\",\">\",\"<\",\"[\",\"]\",\"[\",\"{\",\"}\",\"{\",\"«\",\"»\",\"«\",\"‹\",\"›\",\"‹\",\"⁅\",\"⁆\",\"⁅\",\"⁽\",\"⁾\",\"⁽\",\"₍\",\"₎\",\"₍\",\"≤\",\"≥\",\"≤\",\"〈\",\"〉\",\"〈\",\"﹙\",\"﹚\",\"﹙\",\"﹛\",\"﹜\",\"﹛\",\"﹝\",\"﹞\",\"﹝\",\"﹤\",\"﹥\",\"﹤\"],g=new RegExp(/^([1-4|9]|1[0-9]|2[0-9]|3[0168]|4[04589]|5[012]|7[78]|159|16[0-9]|17[0-2]|21[569]|22[03489]|250)$/),m=!1,v=0;this.__bidiEngine__={};var b=function(t){var e=t.charCodeAt(),r=e>>8,n=d[r];return void 0!==n?u[256*n+(255&e)]:252===r||253===r?\"AL\":g.test(r)?\"L\":8===r?\"R\":\"N\"},y=function(t){for(var e,r=0;r<t.length;r++){if(\"L\"===(e=b(t.charAt(r))))return!1;if(\"R\"===e)return!0}return!1},w=function(t,e,o,s){var c,u,h,l,f=e[s];switch(f){case\"L\":case\"R\":m=!1;break;case\"N\":case\"AN\":break;case\"EN\":m&&(f=\"AN\");break;case\"AL\":m=!0,f=\"R\";break;case\"WS\":f=\"N\";break;case\"CS\":s<1||s+1>=e.length||\"EN\"!==(c=o[s-1])&&\"AN\"!==c||\"EN\"!==(u=e[s+1])&&\"AN\"!==u?f=\"N\":m&&(u=\"AN\"),f=u===c?u:\"N\";break;case\"ES\":f=\"EN\"===(c=s>0?o[s-1]:\"B\")&&s+1<e.length&&\"EN\"===e[s+1]?\"EN\":\"N\";break;case\"ET\":if(s>0&&\"EN\"===o[s-1]){f=\"EN\";break}if(m){f=\"N\";break}for(h=s+1,l=e.length;h<l&&\"ET\"===e[h];)h++;f=h<l&&\"EN\"===e[h]?\"EN\":\"N\";break;case\"NSM\":if(i&&!a){for(l=e.length,h=s+1;h<l&&\"NSM\"===e[h];)h++;if(h<l){var d=t[s],p=d>=1425&&d<=2303||64286===d;if(c=e[h],p&&(\"R\"===c||\"AL\"===c)){f=\"R\";break}}}f=s<1||\"B\"===(c=e[s-1])?\"N\":o[s-1];break;case\"B\":m=!1,r=!0,f=v;break;case\"S\":n=!0,f=\"N\";break;case\"LRE\":case\"RLE\":case\"LRO\":case\"RLO\":case\"PDF\":m=!1;break;case\"BN\":f=\"N\"}return f},N=function(t,e,r){var n=t.split(\"\");return r&&L(n,r,{hiLevel:v}),n.reverse(),e&&e.reverse(),n.join(\"\")},L=function(t,e,i){var a,o,s,c,u,d=-1,p=t.length,g=0,y=[],N=v?l:h,L=[];for(m=!1,r=!1,n=!1,o=0;o<p;o++)L[o]=b(t[o]);for(s=0;s<p;s++){if(u=g,y[s]=w(t,L,y,s),a=240&(g=N[u][f[y[s]]]),g&=15,e[s]=c=N[g][5],a>0)if(16===a){for(o=d;o<s;o++)e[o]=1;d=-1}else d=-1;if(N[g][6])-1===d&&(d=s);else if(d>-1){for(o=d;o<s;o++)e[o]=c;d=-1}\"B\"===L[s]&&(e[s]=0),i.hiLevel|=c}n&&function(t,e,r){for(var n=0;n<r;n++)if(\"S\"===t[n]){e[n]=v;for(var i=n-1;i>=0&&\"WS\"===t[i];i--)e[i]=v}}(L,e,p)},A=function(t,e,n,i,a){if(!(a.hiLevel<t)){if(1===t&&1===v&&!r)return e.reverse(),void(n&&n.reverse());for(var o,s,c,u,h=e.length,l=0;l<h;){if(i[l]>=t){for(c=l+1;c<h&&i[c]>=t;)c++;for(u=l,s=c-1;u<s;u++,s--)o=e[u],e[u]=e[s],e[s]=o,n&&(o=n[u],n[u]=n[s],n[s]=o);l=c}l++}}},x=function(t,e,r){var n=t.split(\"\"),i={hiLevel:v};return r||(r=[]),L(n,r,i),function(t,e,r){if(0!==r.hiLevel&&c)for(var n,i=0;i<t.length;i++)1===e[i]&&(n=p.indexOf(t[i]))>=0&&(t[i]=p[n+1])}(n,r,i),A(2,n,e,r,i),A(1,n,e,r,i),n.join(\"\")};return this.__bidiEngine__.doBidiReorder=function(t,e,r){if(function(t,e){if(e)for(var r=0;r<t.length;r++)e[r]=r;void 0===a&&(a=y(t)),void 0===s&&(s=y(t))}(t,e),i||!o||s)if(i&&o&&a^s)v=a?1:0,t=N(t,e,r);else if(!i&&o&&s)v=a?1:0,t=x(t,e,r),t=N(t,e);else if(!i||a||o||s){if(i&&!o&&a^s)t=N(t,e),a?(v=0,t=x(t,e,r)):(v=1,t=x(t,e,r),t=N(t,e));else if(i&&a&&!o&&s)v=1,t=x(t,e,r),t=N(t,e);else if(!i&&!o&&a^s){var n=c;a?(v=1,t=x(t,e,r),v=0,c=!1,t=x(t,e,r),c=n):(v=0,t=x(t,e,r),t=N(t,e),v=1,c=!1,t=x(t,e,r),c=n,t=N(t,e))}}else v=0,t=x(t,e,r);else v=a?1:0,t=x(t,e,r);return t},this.__bidiEngine__.setOptions=function(t){t&&(i=t.isInputVisual,o=t.isOutputVisual,a=t.isInputRtl,s=t.isOutputRtl,c=t.isSymmetricSwapping)},this.__bidiEngine__.setOptions(t),this.__bidiEngine__};var e=[\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"S\",\"B\",\"S\",\"WS\",\"B\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"B\",\"B\",\"B\",\"S\",\"WS\",\"N\",\"N\",\"ET\",\"ET\",\"ET\",\"N\",\"N\",\"N\",\"N\",\"N\",\"ES\",\"CS\",\"ES\",\"CS\",\"CS\",\"EN\",\"EN\",\"EN\",\"EN\",\"EN\",\"EN\",\"EN\",\"EN\",\"EN\",\"EN\",\"CS\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"N\",\"N\",\"N\",\"N\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"B\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"CS\",\"N\",\"ET\",\"ET\",\"ET\",\"ET\",\"N\",\"N\",\"N\",\"N\",\"L\",\"N\",\"N\",\"BN\",\"N\",\"N\",\"ET\",\"ET\",\"EN\",\"EN\",\"N\",\"L\",\"N\",\"N\",\"N\",\"EN\",\"L\",\"N\",\"N\",\"N\",\"N\",\"N\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"N\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"N\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"N\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"N\",\"N\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"N\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"N\",\"L\",\"N\",\"N\",\"N\",\"N\",\"N\",\"ET\",\"N\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"R\",\"NSM\",\"R\",\"NSM\",\"NSM\",\"R\",\"NSM\",\"NSM\",\"R\",\"NSM\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"N\",\"N\",\"N\",\"N\",\"N\",\"R\",\"R\",\"R\",\"R\",\"R\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"AN\",\"AN\",\"AN\",\"AN\",\"AN\",\"AN\",\"N\",\"N\",\"AL\",\"ET\",\"ET\",\"AL\",\"CS\",\"AL\",\"N\",\"N\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"AL\",\"AL\",\"N\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"AN\",\"AN\",\"AN\",\"AN\",\"AN\",\"AN\",\"AN\",\"AN\",\"AN\",\"AN\",\"ET\",\"AN\",\"AN\",\"AL\",\"AL\",\"AL\",\"NSM\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"AN\",\"N\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"AL\",\"AL\",\"NSM\",\"NSM\",\"N\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"AL\",\"AL\",\"EN\",\"EN\",\"EN\",\"EN\",\"EN\",\"EN\",\"EN\",\"EN\",\"EN\",\"EN\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"N\",\"AL\",\"AL\",\"NSM\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"N\",\"N\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"AL\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"R\",\"R\",\"N\",\"N\",\"N\",\"N\",\"R\",\"N\",\"N\",\"N\",\"N\",\"N\",\"WS\",\"WS\",\"WS\",\"WS\",\"WS\",\"WS\",\"WS\",\"WS\",\"WS\",\"WS\",\"WS\",\"BN\",\"BN\",\"BN\",\"L\",\"R\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"WS\",\"B\",\"LRE\",\"RLE\",\"PDF\",\"LRO\",\"RLO\",\"CS\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"CS\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"WS\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"N\",\"LRI\",\"RLI\",\"FSI\",\"PDI\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"BN\",\"EN\",\"L\",\"N\",\"N\",\"EN\",\"EN\",\"EN\",\"EN\",\"EN\",\"EN\",\"ES\",\"ES\",\"N\",\"N\",\"N\",\"L\",\"EN\",\"EN\",\"EN\",\"EN\",\"EN\",\"EN\",\"EN\",\"EN\",\"EN\",\"EN\",\"ES\",\"ES\",\"N\",\"N\",\"N\",\"N\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"N\",\"N\",\"N\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"ET\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"L\",\"L\",\"L\",\"L\",\"L\",\"N\",\"N\",\"N\",\"N\",\"N\",\"R\",\"NSM\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"ES\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"N\",\"R\",\"R\",\"R\",\"R\",\"R\",\"N\",\"R\",\"N\",\"R\",\"R\",\"N\",\"R\",\"R\",\"N\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"NSM\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"CS\",\"N\",\"CS\",\"N\",\"N\",\"CS\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"ET\",\"N\",\"N\",\"ES\",\"ES\",\"N\",\"N\",\"N\",\"N\",\"N\",\"ET\",\"ET\",\"N\",\"N\",\"N\",\"N\",\"N\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"N\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"AL\",\"N\",\"N\",\"BN\",\"N\",\"N\",\"N\",\"ET\",\"ET\",\"ET\",\"N\",\"N\",\"N\",\"N\",\"N\",\"ES\",\"CS\",\"ES\",\"CS\",\"CS\",\"EN\",\"EN\",\"EN\",\"EN\",\"EN\",\"EN\",\"EN\",\"EN\",\"EN\",\"EN\",\"CS\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"N\",\"N\",\"N\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"N\",\"N\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"N\",\"N\",\"L\",\"L\",\"L\",\"L\",\"L\",\"L\",\"N\",\"N\",\"L\",\"L\",\"L\",\"N\",\"N\",\"N\",\"ET\",\"ET\",\"N\",\"N\",\"N\",\"ET\",\"ET\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\",\"N\"],r=new t.__bidiEngine__({isInputVisual:!0});t.API.events.push([\"postProcessText\",function(t){var e=t.text,n=(t.x,t.y,t.options||{}),i=(t.mutex,n.lang,[]);if(n.isInputVisual=\"boolean\"!=typeof n.isInputVisual||n.isInputVisual,r.setOptions(n),\"[object Array]\"===Object.prototype.toString.call(e)){var a=0;for(i=[],a=0;a<e.length;a+=1)\"[object Array]\"===Object.prototype.toString.call(e[a])?i.push([r.doBidiReorder(e[a][0]),e[a][1],e[a][2]]):i.push([r.doBidiReorder(e[a])]);t.text=i}else t.text=r.doBidiReorder(e);r.setOptions({isInputVisual:!0})}])}(E),E.API.TTFFont=function(){function t(t){var e;if(this.rawData=t,e=this.contents=new ne(t),this.contents.pos=4,\"ttcf\"===e.readString(4))throw new Error(\"TTCF not supported.\");e.pos=0,this.parse(),this.subset=new Le(this),this.registerTTF()}return t.open=function(e){return new t(e)},t.prototype.parse=function(){return this.directory=new ie(this.contents),this.head=new se(this),this.name=new pe(this),this.cmap=new ue(this),this.toUnicode={},this.hhea=new he(this),this.maxp=new ge(this),this.hmtx=new me(this),this.post=new fe(this),this.os2=new le(this),this.loca=new Ne(this),this.glyf=new be(this),this.ascender=this.os2.exists&&this.os2.ascender||this.hhea.ascender,this.decender=this.os2.exists&&this.os2.decender||this.hhea.decender,this.lineGap=this.os2.exists&&this.os2.lineGap||this.hhea.lineGap,this.bbox=[this.head.xMin,this.head.yMin,this.head.xMax,this.head.yMax]},t.prototype.registerTTF=function(){var t,e,r,n,i;if(this.scaleFactor=1e3/this.head.unitsPerEm,this.bbox=function(){var e,r,n,i;for(i=[],e=0,r=(n=this.bbox).length;e<r;e++)t=n[e],i.push(Math.round(t*this.scaleFactor));return i}.call(this),this.stemV=0,this.post.exists?(r=255&(n=this.post.italic_angle),0!=(32768&(e=n>>16))&&(e=-(1+(65535^e))),this.italicAngle=+(e+\".\"+r)):this.italicAngle=0,this.ascender=Math.round(this.ascender*this.scaleFactor),this.decender=Math.round(this.decender*this.scaleFactor),this.lineGap=Math.round(this.lineGap*this.scaleFactor),this.capHeight=this.os2.exists&&this.os2.capHeight||this.ascender,this.xHeight=this.os2.exists&&this.os2.xHeight||0,this.familyClass=(this.os2.exists&&this.os2.familyClass||0)>>8,this.isSerif=1===(i=this.familyClass)||2===i||3===i||4===i||5===i||7===i,this.isScript=10===this.familyClass,this.flags=0,this.post.isFixedPitch&&(this.flags|=1),this.isSerif&&(this.flags|=2),this.isScript&&(this.flags|=8),0!==this.italicAngle&&(this.flags|=64),this.flags|=32,!this.cmap.unicode)throw new Error(\"No unicode cmap for font\")},t.prototype.characterToGlyph=function(t){var e;return(null!=(e=this.cmap.unicode)?e.codeMap[t]:void 0)||0},t.prototype.widthOfGlyph=function(t){var e;return e=1e3/this.head.unitsPerEm,this.hmtx.forGlyph(t).advance*e},t.prototype.widthOfString=function(t,e,r){var n,i,a,o;for(a=0,i=0,o=(t=\"\"+t).length;0<=o?i<o:i>o;i=0<=o?++i:--i)n=t.charCodeAt(i),a+=this.widthOfGlyph(this.characterToGlyph(n))+r*(1e3/e)||0;return a*(e/1e3)},t.prototype.lineHeight=function(t,e){var r;return null==e&&(e=!1),r=e?this.lineGap:0,(this.ascender+r-this.decender)/1e3*t},t}();var re,ne=function(){function t(t){this.data=null!=t?t:[],this.pos=0,this.length=this.data.length}return t.prototype.readByte=function(){return this.data[this.pos++]},t.prototype.writeByte=function(t){return this.data[this.pos++]=t},t.prototype.readUInt32=function(){return 16777216*this.readByte()+(this.readByte()<<16)+(this.readByte()<<8)+this.readByte()},t.prototype.writeUInt32=function(t){return this.writeByte(t>>>24&255),this.writeByte(t>>16&255),this.writeByte(t>>8&255),this.writeByte(255&t)},t.prototype.readInt32=function(){var t;return(t=this.readUInt32())>=2147483648?t-4294967296:t},t.prototype.writeInt32=function(t){return t<0&&(t+=4294967296),this.writeUInt32(t)},t.prototype.readUInt16=function(){return this.readByte()<<8|this.readByte()},t.prototype.writeUInt16=function(t){return this.writeByte(t>>8&255),this.writeByte(255&t)},t.prototype.readInt16=function(){var t;return(t=this.readUInt16())>=32768?t-65536:t},t.prototype.writeInt16=function(t){return t<0&&(t+=65536),this.writeUInt16(t)},t.prototype.readString=function(t){var e,r;for(r=[],e=0;0<=t?e<t:e>t;e=0<=t?++e:--e)r[e]=String.fromCharCode(this.readByte());return r.join(\"\")},t.prototype.writeString=function(t){var e,r,n;for(n=[],e=0,r=t.length;0<=r?e<r:e>r;e=0<=r?++e:--e)n.push(this.writeByte(t.charCodeAt(e)));return n},t.prototype.readShort=function(){return this.readInt16()},t.prototype.writeShort=function(t){return this.writeInt16(t)},t.prototype.readLongLong=function(){var t,e,r,n,i,a,o,s;return t=this.readByte(),e=this.readByte(),r=this.readByte(),n=this.readByte(),i=this.readByte(),a=this.readByte(),o=this.readByte(),s=this.readByte(),128&t?-1*(72057594037927940*(255^t)+281474976710656*(255^e)+1099511627776*(255^r)+4294967296*(255^n)+16777216*(255^i)+65536*(255^a)+256*(255^o)+(255^s)+1):72057594037927940*t+281474976710656*e+1099511627776*r+4294967296*n+16777216*i+65536*a+256*o+s},t.prototype.writeLongLong=function(t){var e,r;return e=Math.floor(t/4294967296),r=4294967295&t,this.writeByte(e>>24&255),this.writeByte(e>>16&255),this.writeByte(e>>8&255),this.writeByte(255&e),this.writeByte(r>>24&255),this.writeByte(r>>16&255),this.writeByte(r>>8&255),this.writeByte(255&r)},t.prototype.readInt=function(){return this.readInt32()},t.prototype.writeInt=function(t){return this.writeInt32(t)},t.prototype.read=function(t){var e,r;for(e=[],r=0;0<=t?r<t:r>t;r=0<=t?++r:--r)e.push(this.readByte());return e},t.prototype.write=function(t){var e,r,n,i;for(i=[],r=0,n=t.length;r<n;r++)e=t[r],i.push(this.writeByte(e));return i},t}(),ie=function(){var t;function e(t){var e,r,n;for(this.scalarType=t.readInt(),this.tableCount=t.readShort(),this.searchRange=t.readShort(),this.entrySelector=t.readShort(),this.rangeShift=t.readShort(),this.tables={},r=0,n=this.tableCount;0<=n?r<n:r>n;r=0<=n?++r:--r)e={tag:t.readString(4),checksum:t.readInt(),offset:t.readInt(),length:t.readInt()},this.tables[e.tag]=e}return e.prototype.encode=function(e){var r,n,i,a,o,s,c,u,h,l,f,d,p;for(p in f=Object.keys(e).length,s=Math.log(2),h=16*Math.floor(Math.log(f)/s),a=Math.floor(h/s),u=16*f-h,(n=new ne).writeInt(this.scalarType),n.writeShort(f),n.writeShort(h),n.writeShort(a),n.writeShort(u),i=16*f,c=n.pos+i,o=null,d=[],e)for(l=e[p],n.writeString(p),n.writeInt(t(l)),n.writeInt(c),n.writeInt(l.length),d=d.concat(l),\"head\"===p&&(o=c),c+=l.length;c%4;)d.push(0),c++;return n.write(d),r=2981146554-t(n.data),n.pos=o+8,n.writeUInt32(r),n.data},t=function(t){var e,r,n,i;for(t=ve.call(t);t.length%4;)t.push(0);for(n=new ne(t),r=0,e=0,i=t.length;e<i;e=e+=4)r+=n.readUInt32();return 4294967295&r},e}(),ae={}.hasOwnProperty,oe=function(t,e){for(var r in e)ae.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}return n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype,t};re=function(){function t(t){var e;this.file=t,e=this.file.directory.tables[this.tag],this.exists=!!e,e&&(this.offset=e.offset,this.length=e.length,this.parse(this.file.contents))}return t.prototype.parse=function(){},t.prototype.encode=function(){},t.prototype.raw=function(){return this.exists?(this.file.contents.pos=this.offset,this.file.contents.read(this.length)):null},t}();var se=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return oe(e,re),e.prototype.tag=\"head\",e.prototype.parse=function(t){return t.pos=this.offset,this.version=t.readInt(),this.revision=t.readInt(),this.checkSumAdjustment=t.readInt(),this.magicNumber=t.readInt(),this.flags=t.readShort(),this.unitsPerEm=t.readShort(),this.created=t.readLongLong(),this.modified=t.readLongLong(),this.xMin=t.readShort(),this.yMin=t.readShort(),this.xMax=t.readShort(),this.yMax=t.readShort(),this.macStyle=t.readShort(),this.lowestRecPPEM=t.readShort(),this.fontDirectionHint=t.readShort(),this.indexToLocFormat=t.readShort(),this.glyphDataFormat=t.readShort()},e.prototype.encode=function(t){var e;return(e=new ne).writeInt(this.version),e.writeInt(this.revision),e.writeInt(this.checkSumAdjustment),e.writeInt(this.magicNumber),e.writeShort(this.flags),e.writeShort(this.unitsPerEm),e.writeLongLong(this.created),e.writeLongLong(this.modified),e.writeShort(this.xMin),e.writeShort(this.yMin),e.writeShort(this.xMax),e.writeShort(this.yMax),e.writeShort(this.macStyle),e.writeShort(this.lowestRecPPEM),e.writeShort(this.fontDirectionHint),e.writeShort(t),e.writeShort(this.glyphDataFormat),e.data},e}(),ce=function(){function t(t,e){var r,n,i,a,o,s,c,u,h,l,f,d,p,g,m,v,b;switch(this.platformID=t.readUInt16(),this.encodingID=t.readShort(),this.offset=e+t.readInt(),h=t.pos,t.pos=this.offset,this.format=t.readUInt16(),this.length=t.readUInt16(),this.language=t.readUInt16(),this.isUnicode=3===this.platformID&&1===this.encodingID&&4===this.format||0===this.platformID&&4===this.format,this.codeMap={},this.format){case 0:for(s=0;s<256;++s)this.codeMap[s]=t.readByte();break;case 4:for(f=t.readUInt16(),l=f/2,t.pos+=6,i=function(){var e,r;for(r=[],s=e=0;0<=l?e<l:e>l;s=0<=l?++e:--e)r.push(t.readUInt16());return r}(),t.pos+=2,p=function(){var e,r;for(r=[],s=e=0;0<=l?e<l:e>l;s=0<=l?++e:--e)r.push(t.readUInt16());return r}(),c=function(){var e,r;for(r=[],s=e=0;0<=l?e<l:e>l;s=0<=l?++e:--e)r.push(t.readUInt16());return r}(),u=function(){var e,r;for(r=[],s=e=0;0<=l?e<l:e>l;s=0<=l?++e:--e)r.push(t.readUInt16());return r}(),n=(this.length-t.pos+this.offset)/2,o=function(){var e,r;for(r=[],s=e=0;0<=n?e<n:e>n;s=0<=n?++e:--e)r.push(t.readUInt16());return r}(),s=m=0,b=i.length;m<b;s=++m)for(g=i[s],r=v=d=p[s];d<=g?v<=g:v>=g;r=d<=g?++v:--v)0===u[s]?a=r+c[s]:0!==(a=o[u[s]/2+(r-d)-(l-s)]||0)&&(a+=c[s]),this.codeMap[r]=65535&a}t.pos=h}return t.encode=function(t,e){var r,n,i,a,o,s,c,u,h,l,f,d,p,g,m,v,b,y,w,N,L,A,x,S,_,P,k,I,F,C,j,O,B,M,E,q,D,R,T,U,z,H,W,V,G,Y;switch(I=new ne,a=Object.keys(t).sort((function(t,e){return t-e})),e){case\"macroman\":for(p=0,g=function(){var t=[];for(d=0;d<256;++d)t.push(0);return t}(),v={0:0},i={},F=0,B=a.length;F<B;F++)null==v[W=t[n=a[F]]]&&(v[W]=++p),i[n]={old:t[n],new:v[t[n]]},g[n]=v[t[n]];return I.writeUInt16(1),I.writeUInt16(0),I.writeUInt32(12),I.writeUInt16(0),I.writeUInt16(262),I.writeUInt16(0),I.write(g),{charMap:i,subtable:I.data,maxGlyphID:p+1};case\"unicode\":for(P=[],h=[],b=0,v={},r={},m=c=null,C=0,M=a.length;C<M;C++)null==v[w=t[n=a[C]]]&&(v[w]=++b),r[n]={old:w,new:v[w]},o=v[w]-n,null!=m&&o===c||(m&&h.push(m),P.push(n),c=o),m=n;for(m&&h.push(m),h.push(65535),P.push(65535),S=2*(x=P.length),A=2*Math.pow(Math.log(x)/Math.LN2,2),l=Math.log(A/2)/Math.LN2,L=2*x-A,s=[],N=[],f=[],d=j=0,E=P.length;j<E;d=++j){if(_=P[d],u=h[d],65535===_){s.push(0),N.push(0);break}if(_-(k=r[_].new)>=32768)for(s.push(0),N.push(2*(f.length+x-d)),n=O=_;_<=u?O<=u:O>=u;n=_<=u?++O:--O)f.push(r[n].new);else s.push(k-_),N.push(0)}for(I.writeUInt16(3),I.writeUInt16(1),I.writeUInt32(12),I.writeUInt16(4),I.writeUInt16(16+8*x+2*f.length),I.writeUInt16(0),I.writeUInt16(S),I.writeUInt16(A),I.writeUInt16(l),I.writeUInt16(L),z=0,q=h.length;z<q;z++)n=h[z],I.writeUInt16(n);for(I.writeUInt16(0),H=0,D=P.length;H<D;H++)n=P[H],I.writeUInt16(n);for(V=0,R=s.length;V<R;V++)o=s[V],I.writeUInt16(o);for(G=0,T=N.length;G<T;G++)y=N[G],I.writeUInt16(y);for(Y=0,U=f.length;Y<U;Y++)p=f[Y],I.writeUInt16(p);return{charMap:r,subtable:I.data,maxGlyphID:b+1}}},t}(),ue=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return oe(e,re),e.prototype.tag=\"cmap\",e.prototype.parse=function(t){var e,r,n;for(t.pos=this.offset,this.version=t.readUInt16(),n=t.readUInt16(),this.tables=[],this.unicode=null,r=0;0<=n?r<n:r>n;r=0<=n?++r:--r)e=new ce(t,this.offset),this.tables.push(e),e.isUnicode&&null==this.unicode&&(this.unicode=e);return!0},e.encode=function(t,e){var r,n;return null==e&&(e=\"macroman\"),r=ce.encode(t,e),(n=new ne).writeUInt16(0),n.writeUInt16(1),r.table=n.data.concat(r.subtable),r},e}(),he=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return oe(e,re),e.prototype.tag=\"hhea\",e.prototype.parse=function(t){return t.pos=this.offset,this.version=t.readInt(),this.ascender=t.readShort(),this.decender=t.readShort(),this.lineGap=t.readShort(),this.advanceWidthMax=t.readShort(),this.minLeftSideBearing=t.readShort(),this.minRightSideBearing=t.readShort(),this.xMaxExtent=t.readShort(),this.caretSlopeRise=t.readShort(),this.caretSlopeRun=t.readShort(),this.caretOffset=t.readShort(),t.pos+=8,this.metricDataFormat=t.readShort(),this.numberOfMetrics=t.readUInt16()},e}(),le=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return oe(e,re),e.prototype.tag=\"OS/2\",e.prototype.parse=function(t){if(t.pos=this.offset,this.version=t.readUInt16(),this.averageCharWidth=t.readShort(),this.weightClass=t.readUInt16(),this.widthClass=t.readUInt16(),this.type=t.readShort(),this.ySubscriptXSize=t.readShort(),this.ySubscriptYSize=t.readShort(),this.ySubscriptXOffset=t.readShort(),this.ySubscriptYOffset=t.readShort(),this.ySuperscriptXSize=t.readShort(),this.ySuperscriptYSize=t.readShort(),this.ySuperscriptXOffset=t.readShort(),this.ySuperscriptYOffset=t.readShort(),this.yStrikeoutSize=t.readShort(),this.yStrikeoutPosition=t.readShort(),this.familyClass=t.readShort(),this.panose=function(){var e,r;for(r=[],e=0;e<10;++e)r.push(t.readByte());return r}(),this.charRange=function(){var e,r;for(r=[],e=0;e<4;++e)r.push(t.readInt());return r}(),this.vendorID=t.readString(4),this.selection=t.readShort(),this.firstCharIndex=t.readShort(),this.lastCharIndex=t.readShort(),this.version>0&&(this.ascent=t.readShort(),this.descent=t.readShort(),this.lineGap=t.readShort(),this.winAscent=t.readShort(),this.winDescent=t.readShort(),this.codePageRange=function(){var e,r;for(r=[],e=0;e<2;e=++e)r.push(t.readInt());return r}(),this.version>1))return this.xHeight=t.readShort(),this.capHeight=t.readShort(),this.defaultChar=t.readShort(),this.breakChar=t.readShort(),this.maxContext=t.readShort()},e}(),fe=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return oe(e,re),e.prototype.tag=\"post\",e.prototype.parse=function(t){var e,r,n;switch(t.pos=this.offset,this.format=t.readInt(),this.italicAngle=t.readInt(),this.underlinePosition=t.readShort(),this.underlineThickness=t.readShort(),this.isFixedPitch=t.readInt(),this.minMemType42=t.readInt(),this.maxMemType42=t.readInt(),this.minMemType1=t.readInt(),this.maxMemType1=t.readInt(),this.format){case 65536:break;case 131072:var i;for(r=t.readUInt16(),this.glyphNameIndex=[],i=0;0<=r?i<r:i>r;i=0<=r?++i:--i)this.glyphNameIndex.push(t.readUInt16());for(this.names=[],n=[];t.pos<this.offset+this.length;)e=t.readByte(),n.push(this.names.push(t.readString(e)));return n;case 151552:return r=t.readUInt16(),this.offsets=t.read(r);case 196608:break;case 262144:return this.map=function(){var e,r,n;for(n=[],i=e=0,r=this.file.maxp.numGlyphs;0<=r?e<r:e>r;i=0<=r?++e:--e)n.push(t.readUInt32());return n}.call(this)}},e}(),de=function(t,e){this.raw=t,this.length=t.length,this.platformID=e.platformID,this.encodingID=e.encodingID,this.languageID=e.languageID},pe=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return oe(e,re),e.prototype.tag=\"name\",e.prototype.parse=function(t){var e,r,n,i,a,o,s,c,u,h,l;for(t.pos=this.offset,t.readShort(),e=t.readShort(),o=t.readShort(),r=[],i=0;0<=e?i<e:i>e;i=0<=e?++i:--i)r.push({platformID:t.readShort(),encodingID:t.readShort(),languageID:t.readShort(),nameID:t.readShort(),length:t.readShort(),offset:this.offset+o+t.readShort()});for(s={},i=u=0,h=r.length;u<h;i=++u)n=r[i],t.pos=n.offset,c=t.readString(n.length),a=new de(c,n),null==s[l=n.nameID]&&(s[l]=[]),s[n.nameID].push(a);this.strings=s,this.copyright=s[0],this.fontFamily=s[1],this.fontSubfamily=s[2],this.uniqueSubfamily=s[3],this.fontName=s[4],this.version=s[5];try{this.postscriptName=s[6][0].raw.replace(/[\\x00-\\x19\\x80-\\xff]/g,\"\")}catch(t){this.postscriptName=s[4][0].raw.replace(/[\\x00-\\x19\\x80-\\xff]/g,\"\")}return this.trademark=s[7],this.manufacturer=s[8],this.designer=s[9],this.description=s[10],this.vendorUrl=s[11],this.designerUrl=s[12],this.license=s[13],this.licenseUrl=s[14],this.preferredFamily=s[15],this.preferredSubfamily=s[17],this.compatibleFull=s[18],this.sampleText=s[19]},e}(),ge=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return oe(e,re),e.prototype.tag=\"maxp\",e.prototype.parse=function(t){return t.pos=this.offset,this.version=t.readInt(),this.numGlyphs=t.readUInt16(),this.maxPoints=t.readUInt16(),this.maxContours=t.readUInt16(),this.maxCompositePoints=t.readUInt16(),this.maxComponentContours=t.readUInt16(),this.maxZones=t.readUInt16(),this.maxTwilightPoints=t.readUInt16(),this.maxStorage=t.readUInt16(),this.maxFunctionDefs=t.readUInt16(),this.maxInstructionDefs=t.readUInt16(),this.maxStackElements=t.readUInt16(),this.maxSizeOfInstructions=t.readUInt16(),this.maxComponentElements=t.readUInt16(),this.maxComponentDepth=t.readUInt16()},e}(),me=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return oe(e,re),e.prototype.tag=\"hmtx\",e.prototype.parse=function(t){var e,r,n,i,a,o,s;for(t.pos=this.offset,this.metrics=[],e=0,o=this.file.hhea.numberOfMetrics;0<=o?e<o:e>o;e=0<=o?++e:--e)this.metrics.push({advance:t.readUInt16(),lsb:t.readInt16()});for(n=this.file.maxp.numGlyphs-this.file.hhea.numberOfMetrics,this.leftSideBearings=function(){var r,i;for(i=[],e=r=0;0<=n?r<n:r>n;e=0<=n?++r:--r)i.push(t.readInt16());return i}(),this.widths=function(){var t,e,r,n;for(n=[],t=0,e=(r=this.metrics).length;t<e;t++)i=r[t],n.push(i.advance);return n}.call(this),r=this.widths[this.widths.length-1],s=[],e=a=0;0<=n?a<n:a>n;e=0<=n?++a:--a)s.push(this.widths.push(r));return s},e.prototype.forGlyph=function(t){return t in this.metrics?this.metrics[t]:{advance:this.metrics[this.metrics.length-1].advance,lsb:this.leftSideBearings[t-this.metrics.length]}},e}(),ve=[].slice,be=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return oe(e,re),e.prototype.tag=\"glyf\",e.prototype.parse=function(){return this.cache={}},e.prototype.glyphFor=function(t){var e,r,n,i,a,o,s,c,u,h;return t in this.cache?this.cache[t]:(i=this.file.loca,e=this.file.contents,r=i.indexOf(t),0===(n=i.lengthOf(t))?this.cache[t]=null:(e.pos=this.offset+r,a=(o=new ne(e.read(n))).readShort(),c=o.readShort(),h=o.readShort(),s=o.readShort(),u=o.readShort(),this.cache[t]=-1===a?new we(o,c,h,s,u):new ye(o,a,c,h,s,u),this.cache[t]))},e.prototype.encode=function(t,e,r){var n,i,a,o,s;for(a=[],i=[],o=0,s=e.length;o<s;o++)n=t[e[o]],i.push(a.length),n&&(a=a.concat(n.encode(r)));return i.push(a.length),{table:a,offsets:i}},e}(),ye=function(){function t(t,e,r,n,i,a){this.raw=t,this.numberOfContours=e,this.xMin=r,this.yMin=n,this.xMax=i,this.yMax=a,this.compound=!1}return t.prototype.encode=function(){return this.raw.data},t}(),we=function(){function t(t,e,r,n,i){var a,o;for(this.raw=t,this.xMin=e,this.yMin=r,this.xMax=n,this.yMax=i,this.compound=!0,this.glyphIDs=[],this.glyphOffsets=[],a=this.raw;o=a.readShort(),this.glyphOffsets.push(a.pos),this.glyphIDs.push(a.readUInt16()),32&o;)a.pos+=1&o?4:2,128&o?a.pos+=8:64&o?a.pos+=4:8&o&&(a.pos+=2)}return 1,8,32,64,128,t.prototype.encode=function(){var t,e,r;for(e=new ne(ve.call(this.raw.data)),t=0,r=this.glyphIDs.length;t<r;++t)e.pos=this.glyphOffsets[t];return e.data},t}(),Ne=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return oe(e,re),e.prototype.tag=\"loca\",e.prototype.parse=function(t){var e,r;return t.pos=this.offset,e=this.file.head.indexToLocFormat,this.offsets=0===e?function(){var e,n;for(n=[],r=0,e=this.length;r<e;r+=2)n.push(2*t.readUInt16());return n}.call(this):function(){var e,n;for(n=[],r=0,e=this.length;r<e;r+=4)n.push(t.readUInt32());return n}.call(this)},e.prototype.indexOf=function(t){return this.offsets[t]},e.prototype.lengthOf=function(t){return this.offsets[t+1]-this.offsets[t]},e.prototype.encode=function(t,e){for(var r=new Uint32Array(this.offsets.length),n=0,i=0,a=0;a<r.length;++a)if(r[a]=n,i<e.length&&e[i]==a){++i,r[a]=n;var o=this.offsets[a],s=this.offsets[a+1]-o;s>0&&(n+=s)}for(var c=new Array(4*r.length),u=0;u<r.length;++u)c[4*u+3]=255&r[u],c[4*u+2]=(65280&r[u])>>8,c[4*u+1]=(16711680&r[u])>>16,c[4*u]=(4278190080&r[u])>>24;return c},e}(),Le=function(){function t(t){this.font=t,this.subset={},this.unicodes={},this.next=33}return t.prototype.generateCmap=function(){var t,e,r,n,i;for(e in n=this.font.cmap.tables[0].codeMap,t={},i=this.subset)r=i[e],t[e]=n[r];return t},t.prototype.glyphsFor=function(t){var e,r,n,i,a,o,s;for(n={},a=0,o=t.length;a<o;a++)n[i=t[a]]=this.font.glyf.glyphFor(i);for(i in e=[],n)(null!=(r=n[i])?r.compound:void 0)&&e.push.apply(e,r.glyphIDs);if(e.length>0)for(i in s=this.glyphsFor(e))r=s[i],n[i]=r;return n},t.prototype.encode=function(t,e){var r,n,i,a,o,s,c,u,h,l,f,d,p,g,m;for(n in r=ue.encode(this.generateCmap(),\"unicode\"),a=this.glyphsFor(t),f={0:0},m=r.charMap)f[(s=m[n]).old]=s.new;for(d in l=r.maxGlyphID,a)d in f||(f[d]=l++);return u=function(t){var e,r;for(e in r={},t)r[t[e]]=e;return r}(f),h=Object.keys(u).sort((function(t,e){return t-e})),p=function(){var t,e,r;for(r=[],t=0,e=h.length;t<e;t++)o=h[t],r.push(u[o]);return r}(),i=this.font.glyf.encode(a,p,f),c=this.font.loca.encode(i.offsets,p),g={cmap:this.font.cmap.raw(),glyf:i.table,loca:c,hmtx:this.font.hmtx.raw(),hhea:this.font.hhea.raw(),maxp:this.font.maxp.raw(),post:this.font.post.raw(),name:this.font.name.raw(),head:this.font.head.encode(e)},this.font.os2.exists&&(g[\"OS/2\"]=this.font.os2.raw()),this.font.directory.encode(g)},t}();E.API.PDFObject=function(){var t;function e(){}return t=function(t,e){return(Array(e+1).join(\"0\")+t).slice(-e)},e.convert=function(r){var n,i,a,o;if(Array.isArray(r))return\"[\"+function(){var t,i,a;for(a=[],t=0,i=r.length;t<i;t++)n=r[t],a.push(e.convert(n));return a}().join(\" \")+\"]\";if(\"string\"==typeof r)return\"/\"+r;if(null!=r?r.isString:void 0)return\"(\"+r+\")\";if(r instanceof Date)return\"(D:\"+t(r.getUTCFullYear(),4)+t(r.getUTCMonth(),2)+t(r.getUTCDate(),2)+t(r.getUTCHours(),2)+t(r.getUTCMinutes(),2)+t(r.getUTCSeconds(),2)+\"Z)\";if(\"[object Object]\"==={}.toString.call(r)){for(i in a=[\"<<\"],r)o=r[i],a.push(\"/\"+i+\" \"+e.convert(o));return a.push(\">>\"),a.join(\"\\n\")}return\"\"+r},e}();/* harmony default export */ __webpack_exports__[\"default\"] = (E);\n//# sourceMappingURL=jspdf.es.min.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/jspdf/dist/jspdf.es.min.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/buffer/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/next/dist/compiled/buffer/index.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(function(){var e={675:function(e,r){\"use strict\";r.byteLength=byteLength;r.toByteArray=toByteArray;r.fromByteArray=fromByteArray;var t=[];var f=[];var n=typeof Uint8Array!==\"undefined\"?Uint8Array:Array;var i=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";for(var o=0,u=i.length;o<u;++o){t[o]=i[o];f[i.charCodeAt(o)]=o}f[\"-\".charCodeAt(0)]=62;f[\"_\".charCodeAt(0)]=63;function getLens(e){var r=e.length;if(r%4>0){throw new Error(\"Invalid string. Length must be a multiple of 4\")}var t=e.indexOf(\"=\");if(t===-1)t=r;var f=t===r?0:4-t%4;return[t,f]}function byteLength(e){var r=getLens(e);var t=r[0];var f=r[1];return(t+f)*3/4-f}function _byteLength(e,r,t){return(r+t)*3/4-t}function toByteArray(e){var r;var t=getLens(e);var i=t[0];var o=t[1];var u=new n(_byteLength(e,i,o));var a=0;var s=o>0?i-4:i;var h;for(h=0;h<s;h+=4){r=f[e.charCodeAt(h)]<<18|f[e.charCodeAt(h+1)]<<12|f[e.charCodeAt(h+2)]<<6|f[e.charCodeAt(h+3)];u[a++]=r>>16&255;u[a++]=r>>8&255;u[a++]=r&255}if(o===2){r=f[e.charCodeAt(h)]<<2|f[e.charCodeAt(h+1)]>>4;u[a++]=r&255}if(o===1){r=f[e.charCodeAt(h)]<<10|f[e.charCodeAt(h+1)]<<4|f[e.charCodeAt(h+2)]>>2;u[a++]=r>>8&255;u[a++]=r&255}return u}function tripletToBase64(e){return t[e>>18&63]+t[e>>12&63]+t[e>>6&63]+t[e&63]}function encodeChunk(e,r,t){var f;var n=[];for(var i=r;i<t;i+=3){f=(e[i]<<16&16711680)+(e[i+1]<<8&65280)+(e[i+2]&255);n.push(tripletToBase64(f))}return n.join(\"\")}function fromByteArray(e){var r;var f=e.length;var n=f%3;var i=[];var o=16383;for(var u=0,a=f-n;u<a;u+=o){i.push(encodeChunk(e,u,u+o>a?a:u+o))}if(n===1){r=e[f-1];i.push(t[r>>2]+t[r<<4&63]+\"==\")}else if(n===2){r=(e[f-2]<<8)+e[f-1];i.push(t[r>>10]+t[r>>4&63]+t[r<<2&63]+\"=\")}return i.join(\"\")}},72:function(e,r,t){\"use strict\";\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */var f=t(675);var n=t(783);var i=typeof Symbol===\"function\"&&typeof Symbol.for===\"function\"?Symbol.for(\"nodejs.util.inspect.custom\"):null;r.Buffer=Buffer;r.SlowBuffer=SlowBuffer;r.INSPECT_MAX_BYTES=50;var o=2147483647;r.kMaxLength=o;Buffer.TYPED_ARRAY_SUPPORT=typedArraySupport();if(!Buffer.TYPED_ARRAY_SUPPORT&&typeof console!==\"undefined\"&&typeof console.error===\"function\"){console.error(\"This browser lacks typed array (Uint8Array) support which is required by \"+\"`buffer` v5.x. Use `buffer` v4.x if you require old browser support.\")}function typedArraySupport(){try{var e=new Uint8Array(1);var r={foo:function(){return 42}};Object.setPrototypeOf(r,Uint8Array.prototype);Object.setPrototypeOf(e,r);return e.foo()===42}catch(e){return false}}Object.defineProperty(Buffer.prototype,\"parent\",{enumerable:true,get:function(){if(!Buffer.isBuffer(this))return undefined;return this.buffer}});Object.defineProperty(Buffer.prototype,\"offset\",{enumerable:true,get:function(){if(!Buffer.isBuffer(this))return undefined;return this.byteOffset}});function createBuffer(e){if(e>o){throw new RangeError('The value \"'+e+'\" is invalid for option \"size\"')}var r=new Uint8Array(e);Object.setPrototypeOf(r,Buffer.prototype);return r}function Buffer(e,r,t){if(typeof e===\"number\"){if(typeof r===\"string\"){throw new TypeError('The \"string\" argument must be of type string. Received type number')}return allocUnsafe(e)}return from(e,r,t)}Buffer.poolSize=8192;function from(e,r,t){if(typeof e===\"string\"){return fromString(e,r)}if(ArrayBuffer.isView(e)){return fromArrayLike(e)}if(e==null){throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, \"+\"or Array-like Object. Received type \"+typeof e)}if(isInstance(e,ArrayBuffer)||e&&isInstance(e.buffer,ArrayBuffer)){return fromArrayBuffer(e,r,t)}if(typeof SharedArrayBuffer!==\"undefined\"&&(isInstance(e,SharedArrayBuffer)||e&&isInstance(e.buffer,SharedArrayBuffer))){return fromArrayBuffer(e,r,t)}if(typeof e===\"number\"){throw new TypeError('The \"value\" argument must not be of type number. Received type number')}var f=e.valueOf&&e.valueOf();if(f!=null&&f!==e){return Buffer.from(f,r,t)}var n=fromObject(e);if(n)return n;if(typeof Symbol!==\"undefined\"&&Symbol.toPrimitive!=null&&typeof e[Symbol.toPrimitive]===\"function\"){return Buffer.from(e[Symbol.toPrimitive](\"string\"),r,t)}throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, \"+\"or Array-like Object. Received type \"+typeof e)}Buffer.from=function(e,r,t){return from(e,r,t)};Object.setPrototypeOf(Buffer.prototype,Uint8Array.prototype);Object.setPrototypeOf(Buffer,Uint8Array);function assertSize(e){if(typeof e!==\"number\"){throw new TypeError('\"size\" argument must be of type number')}else if(e<0){throw new RangeError('The value \"'+e+'\" is invalid for option \"size\"')}}function alloc(e,r,t){assertSize(e);if(e<=0){return createBuffer(e)}if(r!==undefined){return typeof t===\"string\"?createBuffer(e).fill(r,t):createBuffer(e).fill(r)}return createBuffer(e)}Buffer.alloc=function(e,r,t){return alloc(e,r,t)};function allocUnsafe(e){assertSize(e);return createBuffer(e<0?0:checked(e)|0)}Buffer.allocUnsafe=function(e){return allocUnsafe(e)};Buffer.allocUnsafeSlow=function(e){return allocUnsafe(e)};function fromString(e,r){if(typeof r!==\"string\"||r===\"\"){r=\"utf8\"}if(!Buffer.isEncoding(r)){throw new TypeError(\"Unknown encoding: \"+r)}var t=byteLength(e,r)|0;var f=createBuffer(t);var n=f.write(e,r);if(n!==t){f=f.slice(0,n)}return f}function fromArrayLike(e){var r=e.length<0?0:checked(e.length)|0;var t=createBuffer(r);for(var f=0;f<r;f+=1){t[f]=e[f]&255}return t}function fromArrayBuffer(e,r,t){if(r<0||e.byteLength<r){throw new RangeError('\"offset\" is outside of buffer bounds')}if(e.byteLength<r+(t||0)){throw new RangeError('\"length\" is outside of buffer bounds')}var f;if(r===undefined&&t===undefined){f=new Uint8Array(e)}else if(t===undefined){f=new Uint8Array(e,r)}else{f=new Uint8Array(e,r,t)}Object.setPrototypeOf(f,Buffer.prototype);return f}function fromObject(e){if(Buffer.isBuffer(e)){var r=checked(e.length)|0;var t=createBuffer(r);if(t.length===0){return t}e.copy(t,0,0,r);return t}if(e.length!==undefined){if(typeof e.length!==\"number\"||numberIsNaN(e.length)){return createBuffer(0)}return fromArrayLike(e)}if(e.type===\"Buffer\"&&Array.isArray(e.data)){return fromArrayLike(e.data)}}function checked(e){if(e>=o){throw new RangeError(\"Attempt to allocate Buffer larger than maximum \"+\"size: 0x\"+o.toString(16)+\" bytes\")}return e|0}function SlowBuffer(e){if(+e!=e){e=0}return Buffer.alloc(+e)}Buffer.isBuffer=function isBuffer(e){return e!=null&&e._isBuffer===true&&e!==Buffer.prototype};Buffer.compare=function compare(e,r){if(isInstance(e,Uint8Array))e=Buffer.from(e,e.offset,e.byteLength);if(isInstance(r,Uint8Array))r=Buffer.from(r,r.offset,r.byteLength);if(!Buffer.isBuffer(e)||!Buffer.isBuffer(r)){throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array')}if(e===r)return 0;var t=e.length;var f=r.length;for(var n=0,i=Math.min(t,f);n<i;++n){if(e[n]!==r[n]){t=e[n];f=r[n];break}}if(t<f)return-1;if(f<t)return 1;return 0};Buffer.isEncoding=function isEncoding(e){switch(String(e).toLowerCase()){case\"hex\":case\"utf8\":case\"utf-8\":case\"ascii\":case\"latin1\":case\"binary\":case\"base64\":case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return true;default:return false}};Buffer.concat=function concat(e,r){if(!Array.isArray(e)){throw new TypeError('\"list\" argument must be an Array of Buffers')}if(e.length===0){return Buffer.alloc(0)}var t;if(r===undefined){r=0;for(t=0;t<e.length;++t){r+=e[t].length}}var f=Buffer.allocUnsafe(r);var n=0;for(t=0;t<e.length;++t){var i=e[t];if(isInstance(i,Uint8Array)){i=Buffer.from(i)}if(!Buffer.isBuffer(i)){throw new TypeError('\"list\" argument must be an Array of Buffers')}i.copy(f,n);n+=i.length}return f};function byteLength(e,r){if(Buffer.isBuffer(e)){return e.length}if(ArrayBuffer.isView(e)||isInstance(e,ArrayBuffer)){return e.byteLength}if(typeof e!==\"string\"){throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. '+\"Received type \"+typeof e)}var t=e.length;var f=arguments.length>2&&arguments[2]===true;if(!f&&t===0)return 0;var n=false;for(;;){switch(r){case\"ascii\":case\"latin1\":case\"binary\":return t;case\"utf8\":case\"utf-8\":return utf8ToBytes(e).length;case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return t*2;case\"hex\":return t>>>1;case\"base64\":return base64ToBytes(e).length;default:if(n){return f?-1:utf8ToBytes(e).length}r=(\"\"+r).toLowerCase();n=true}}}Buffer.byteLength=byteLength;function slowToString(e,r,t){var f=false;if(r===undefined||r<0){r=0}if(r>this.length){return\"\"}if(t===undefined||t>this.length){t=this.length}if(t<=0){return\"\"}t>>>=0;r>>>=0;if(t<=r){return\"\"}if(!e)e=\"utf8\";while(true){switch(e){case\"hex\":return hexSlice(this,r,t);case\"utf8\":case\"utf-8\":return utf8Slice(this,r,t);case\"ascii\":return asciiSlice(this,r,t);case\"latin1\":case\"binary\":return latin1Slice(this,r,t);case\"base64\":return base64Slice(this,r,t);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return utf16leSlice(this,r,t);default:if(f)throw new TypeError(\"Unknown encoding: \"+e);e=(e+\"\").toLowerCase();f=true}}}Buffer.prototype._isBuffer=true;function swap(e,r,t){var f=e[r];e[r]=e[t];e[t]=f}Buffer.prototype.swap16=function swap16(){var e=this.length;if(e%2!==0){throw new RangeError(\"Buffer size must be a multiple of 16-bits\")}for(var r=0;r<e;r+=2){swap(this,r,r+1)}return this};Buffer.prototype.swap32=function swap32(){var e=this.length;if(e%4!==0){throw new RangeError(\"Buffer size must be a multiple of 32-bits\")}for(var r=0;r<e;r+=4){swap(this,r,r+3);swap(this,r+1,r+2)}return this};Buffer.prototype.swap64=function swap64(){var e=this.length;if(e%8!==0){throw new RangeError(\"Buffer size must be a multiple of 64-bits\")}for(var r=0;r<e;r+=8){swap(this,r,r+7);swap(this,r+1,r+6);swap(this,r+2,r+5);swap(this,r+3,r+4)}return this};Buffer.prototype.toString=function toString(){var e=this.length;if(e===0)return\"\";if(arguments.length===0)return utf8Slice(this,0,e);return slowToString.apply(this,arguments)};Buffer.prototype.toLocaleString=Buffer.prototype.toString;Buffer.prototype.equals=function equals(e){if(!Buffer.isBuffer(e))throw new TypeError(\"Argument must be a Buffer\");if(this===e)return true;return Buffer.compare(this,e)===0};Buffer.prototype.inspect=function inspect(){var e=\"\";var t=r.INSPECT_MAX_BYTES;e=this.toString(\"hex\",0,t).replace(/(.{2})/g,\"$1 \").trim();if(this.length>t)e+=\" ... \";return\"<Buffer \"+e+\">\"};if(i){Buffer.prototype[i]=Buffer.prototype.inspect}Buffer.prototype.compare=function compare(e,r,t,f,n){if(isInstance(e,Uint8Array)){e=Buffer.from(e,e.offset,e.byteLength)}if(!Buffer.isBuffer(e)){throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. '+\"Received type \"+typeof e)}if(r===undefined){r=0}if(t===undefined){t=e?e.length:0}if(f===undefined){f=0}if(n===undefined){n=this.length}if(r<0||t>e.length||f<0||n>this.length){throw new RangeError(\"out of range index\")}if(f>=n&&r>=t){return 0}if(f>=n){return-1}if(r>=t){return 1}r>>>=0;t>>>=0;f>>>=0;n>>>=0;if(this===e)return 0;var i=n-f;var o=t-r;var u=Math.min(i,o);var a=this.slice(f,n);var s=e.slice(r,t);for(var h=0;h<u;++h){if(a[h]!==s[h]){i=a[h];o=s[h];break}}if(i<o)return-1;if(o<i)return 1;return 0};function bidirectionalIndexOf(e,r,t,f,n){if(e.length===0)return-1;if(typeof t===\"string\"){f=t;t=0}else if(t>2147483647){t=2147483647}else if(t<-2147483648){t=-2147483648}t=+t;if(numberIsNaN(t)){t=n?0:e.length-1}if(t<0)t=e.length+t;if(t>=e.length){if(n)return-1;else t=e.length-1}else if(t<0){if(n)t=0;else return-1}if(typeof r===\"string\"){r=Buffer.from(r,f)}if(Buffer.isBuffer(r)){if(r.length===0){return-1}return arrayIndexOf(e,r,t,f,n)}else if(typeof r===\"number\"){r=r&255;if(typeof Uint8Array.prototype.indexOf===\"function\"){if(n){return Uint8Array.prototype.indexOf.call(e,r,t)}else{return Uint8Array.prototype.lastIndexOf.call(e,r,t)}}return arrayIndexOf(e,[r],t,f,n)}throw new TypeError(\"val must be string, number or Buffer\")}function arrayIndexOf(e,r,t,f,n){var i=1;var o=e.length;var u=r.length;if(f!==undefined){f=String(f).toLowerCase();if(f===\"ucs2\"||f===\"ucs-2\"||f===\"utf16le\"||f===\"utf-16le\"){if(e.length<2||r.length<2){return-1}i=2;o/=2;u/=2;t/=2}}function read(e,r){if(i===1){return e[r]}else{return e.readUInt16BE(r*i)}}var a;if(n){var s=-1;for(a=t;a<o;a++){if(read(e,a)===read(r,s===-1?0:a-s)){if(s===-1)s=a;if(a-s+1===u)return s*i}else{if(s!==-1)a-=a-s;s=-1}}}else{if(t+u>o)t=o-u;for(a=t;a>=0;a--){var h=true;for(var c=0;c<u;c++){if(read(e,a+c)!==read(r,c)){h=false;break}}if(h)return a}}return-1}Buffer.prototype.includes=function includes(e,r,t){return this.indexOf(e,r,t)!==-1};Buffer.prototype.indexOf=function indexOf(e,r,t){return bidirectionalIndexOf(this,e,r,t,true)};Buffer.prototype.lastIndexOf=function lastIndexOf(e,r,t){return bidirectionalIndexOf(this,e,r,t,false)};function hexWrite(e,r,t,f){t=Number(t)||0;var n=e.length-t;if(!f){f=n}else{f=Number(f);if(f>n){f=n}}var i=r.length;if(f>i/2){f=i/2}for(var o=0;o<f;++o){var u=parseInt(r.substr(o*2,2),16);if(numberIsNaN(u))return o;e[t+o]=u}return o}function utf8Write(e,r,t,f){return blitBuffer(utf8ToBytes(r,e.length-t),e,t,f)}function asciiWrite(e,r,t,f){return blitBuffer(asciiToBytes(r),e,t,f)}function latin1Write(e,r,t,f){return asciiWrite(e,r,t,f)}function base64Write(e,r,t,f){return blitBuffer(base64ToBytes(r),e,t,f)}function ucs2Write(e,r,t,f){return blitBuffer(utf16leToBytes(r,e.length-t),e,t,f)}Buffer.prototype.write=function write(e,r,t,f){if(r===undefined){f=\"utf8\";t=this.length;r=0}else if(t===undefined&&typeof r===\"string\"){f=r;t=this.length;r=0}else if(isFinite(r)){r=r>>>0;if(isFinite(t)){t=t>>>0;if(f===undefined)f=\"utf8\"}else{f=t;t=undefined}}else{throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\")}var n=this.length-r;if(t===undefined||t>n)t=n;if(e.length>0&&(t<0||r<0)||r>this.length){throw new RangeError(\"Attempt to write outside buffer bounds\")}if(!f)f=\"utf8\";var i=false;for(;;){switch(f){case\"hex\":return hexWrite(this,e,r,t);case\"utf8\":case\"utf-8\":return utf8Write(this,e,r,t);case\"ascii\":return asciiWrite(this,e,r,t);case\"latin1\":case\"binary\":return latin1Write(this,e,r,t);case\"base64\":return base64Write(this,e,r,t);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return ucs2Write(this,e,r,t);default:if(i)throw new TypeError(\"Unknown encoding: \"+f);f=(\"\"+f).toLowerCase();i=true}}};Buffer.prototype.toJSON=function toJSON(){return{type:\"Buffer\",data:Array.prototype.slice.call(this._arr||this,0)}};function base64Slice(e,r,t){if(r===0&&t===e.length){return f.fromByteArray(e)}else{return f.fromByteArray(e.slice(r,t))}}function utf8Slice(e,r,t){t=Math.min(e.length,t);var f=[];var n=r;while(n<t){var i=e[n];var o=null;var u=i>239?4:i>223?3:i>191?2:1;if(n+u<=t){var a,s,h,c;switch(u){case 1:if(i<128){o=i}break;case 2:a=e[n+1];if((a&192)===128){c=(i&31)<<6|a&63;if(c>127){o=c}}break;case 3:a=e[n+1];s=e[n+2];if((a&192)===128&&(s&192)===128){c=(i&15)<<12|(a&63)<<6|s&63;if(c>2047&&(c<55296||c>57343)){o=c}}break;case 4:a=e[n+1];s=e[n+2];h=e[n+3];if((a&192)===128&&(s&192)===128&&(h&192)===128){c=(i&15)<<18|(a&63)<<12|(s&63)<<6|h&63;if(c>65535&&c<1114112){o=c}}}}if(o===null){o=65533;u=1}else if(o>65535){o-=65536;f.push(o>>>10&1023|55296);o=56320|o&1023}f.push(o);n+=u}return decodeCodePointsArray(f)}var u=4096;function decodeCodePointsArray(e){var r=e.length;if(r<=u){return String.fromCharCode.apply(String,e)}var t=\"\";var f=0;while(f<r){t+=String.fromCharCode.apply(String,e.slice(f,f+=u))}return t}function asciiSlice(e,r,t){var f=\"\";t=Math.min(e.length,t);for(var n=r;n<t;++n){f+=String.fromCharCode(e[n]&127)}return f}function latin1Slice(e,r,t){var f=\"\";t=Math.min(e.length,t);for(var n=r;n<t;++n){f+=String.fromCharCode(e[n])}return f}function hexSlice(e,r,t){var f=e.length;if(!r||r<0)r=0;if(!t||t<0||t>f)t=f;var n=\"\";for(var i=r;i<t;++i){n+=s[e[i]]}return n}function utf16leSlice(e,r,t){var f=e.slice(r,t);var n=\"\";for(var i=0;i<f.length;i+=2){n+=String.fromCharCode(f[i]+f[i+1]*256)}return n}Buffer.prototype.slice=function slice(e,r){var t=this.length;e=~~e;r=r===undefined?t:~~r;if(e<0){e+=t;if(e<0)e=0}else if(e>t){e=t}if(r<0){r+=t;if(r<0)r=0}else if(r>t){r=t}if(r<e)r=e;var f=this.subarray(e,r);Object.setPrototypeOf(f,Buffer.prototype);return f};function checkOffset(e,r,t){if(e%1!==0||e<0)throw new RangeError(\"offset is not uint\");if(e+r>t)throw new RangeError(\"Trying to access beyond buffer length\")}Buffer.prototype.readUIntLE=function readUIntLE(e,r,t){e=e>>>0;r=r>>>0;if(!t)checkOffset(e,r,this.length);var f=this[e];var n=1;var i=0;while(++i<r&&(n*=256)){f+=this[e+i]*n}return f};Buffer.prototype.readUIntBE=function readUIntBE(e,r,t){e=e>>>0;r=r>>>0;if(!t){checkOffset(e,r,this.length)}var f=this[e+--r];var n=1;while(r>0&&(n*=256)){f+=this[e+--r]*n}return f};Buffer.prototype.readUInt8=function readUInt8(e,r){e=e>>>0;if(!r)checkOffset(e,1,this.length);return this[e]};Buffer.prototype.readUInt16LE=function readUInt16LE(e,r){e=e>>>0;if(!r)checkOffset(e,2,this.length);return this[e]|this[e+1]<<8};Buffer.prototype.readUInt16BE=function readUInt16BE(e,r){e=e>>>0;if(!r)checkOffset(e,2,this.length);return this[e]<<8|this[e+1]};Buffer.prototype.readUInt32LE=function readUInt32LE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return(this[e]|this[e+1]<<8|this[e+2]<<16)+this[e+3]*16777216};Buffer.prototype.readUInt32BE=function readUInt32BE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return this[e]*16777216+(this[e+1]<<16|this[e+2]<<8|this[e+3])};Buffer.prototype.readIntLE=function readIntLE(e,r,t){e=e>>>0;r=r>>>0;if(!t)checkOffset(e,r,this.length);var f=this[e];var n=1;var i=0;while(++i<r&&(n*=256)){f+=this[e+i]*n}n*=128;if(f>=n)f-=Math.pow(2,8*r);return f};Buffer.prototype.readIntBE=function readIntBE(e,r,t){e=e>>>0;r=r>>>0;if(!t)checkOffset(e,r,this.length);var f=r;var n=1;var i=this[e+--f];while(f>0&&(n*=256)){i+=this[e+--f]*n}n*=128;if(i>=n)i-=Math.pow(2,8*r);return i};Buffer.prototype.readInt8=function readInt8(e,r){e=e>>>0;if(!r)checkOffset(e,1,this.length);if(!(this[e]&128))return this[e];return(255-this[e]+1)*-1};Buffer.prototype.readInt16LE=function readInt16LE(e,r){e=e>>>0;if(!r)checkOffset(e,2,this.length);var t=this[e]|this[e+1]<<8;return t&32768?t|4294901760:t};Buffer.prototype.readInt16BE=function readInt16BE(e,r){e=e>>>0;if(!r)checkOffset(e,2,this.length);var t=this[e+1]|this[e]<<8;return t&32768?t|4294901760:t};Buffer.prototype.readInt32LE=function readInt32LE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24};Buffer.prototype.readInt32BE=function readInt32BE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]};Buffer.prototype.readFloatLE=function readFloatLE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return n.read(this,e,true,23,4)};Buffer.prototype.readFloatBE=function readFloatBE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return n.read(this,e,false,23,4)};Buffer.prototype.readDoubleLE=function readDoubleLE(e,r){e=e>>>0;if(!r)checkOffset(e,8,this.length);return n.read(this,e,true,52,8)};Buffer.prototype.readDoubleBE=function readDoubleBE(e,r){e=e>>>0;if(!r)checkOffset(e,8,this.length);return n.read(this,e,false,52,8)};function checkInt(e,r,t,f,n,i){if(!Buffer.isBuffer(e))throw new TypeError('\"buffer\" argument must be a Buffer instance');if(r>n||r<i)throw new RangeError('\"value\" argument is out of bounds');if(t+f>e.length)throw new RangeError(\"Index out of range\")}Buffer.prototype.writeUIntLE=function writeUIntLE(e,r,t,f){e=+e;r=r>>>0;t=t>>>0;if(!f){var n=Math.pow(2,8*t)-1;checkInt(this,e,r,t,n,0)}var i=1;var o=0;this[r]=e&255;while(++o<t&&(i*=256)){this[r+o]=e/i&255}return r+t};Buffer.prototype.writeUIntBE=function writeUIntBE(e,r,t,f){e=+e;r=r>>>0;t=t>>>0;if(!f){var n=Math.pow(2,8*t)-1;checkInt(this,e,r,t,n,0)}var i=t-1;var o=1;this[r+i]=e&255;while(--i>=0&&(o*=256)){this[r+i]=e/o&255}return r+t};Buffer.prototype.writeUInt8=function writeUInt8(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,1,255,0);this[r]=e&255;return r+1};Buffer.prototype.writeUInt16LE=function writeUInt16LE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,2,65535,0);this[r]=e&255;this[r+1]=e>>>8;return r+2};Buffer.prototype.writeUInt16BE=function writeUInt16BE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,2,65535,0);this[r]=e>>>8;this[r+1]=e&255;return r+2};Buffer.prototype.writeUInt32LE=function writeUInt32LE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,4,4294967295,0);this[r+3]=e>>>24;this[r+2]=e>>>16;this[r+1]=e>>>8;this[r]=e&255;return r+4};Buffer.prototype.writeUInt32BE=function writeUInt32BE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,4,4294967295,0);this[r]=e>>>24;this[r+1]=e>>>16;this[r+2]=e>>>8;this[r+3]=e&255;return r+4};Buffer.prototype.writeIntLE=function writeIntLE(e,r,t,f){e=+e;r=r>>>0;if(!f){var n=Math.pow(2,8*t-1);checkInt(this,e,r,t,n-1,-n)}var i=0;var o=1;var u=0;this[r]=e&255;while(++i<t&&(o*=256)){if(e<0&&u===0&&this[r+i-1]!==0){u=1}this[r+i]=(e/o>>0)-u&255}return r+t};Buffer.prototype.writeIntBE=function writeIntBE(e,r,t,f){e=+e;r=r>>>0;if(!f){var n=Math.pow(2,8*t-1);checkInt(this,e,r,t,n-1,-n)}var i=t-1;var o=1;var u=0;this[r+i]=e&255;while(--i>=0&&(o*=256)){if(e<0&&u===0&&this[r+i+1]!==0){u=1}this[r+i]=(e/o>>0)-u&255}return r+t};Buffer.prototype.writeInt8=function writeInt8(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,1,127,-128);if(e<0)e=255+e+1;this[r]=e&255;return r+1};Buffer.prototype.writeInt16LE=function writeInt16LE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,2,32767,-32768);this[r]=e&255;this[r+1]=e>>>8;return r+2};Buffer.prototype.writeInt16BE=function writeInt16BE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,2,32767,-32768);this[r]=e>>>8;this[r+1]=e&255;return r+2};Buffer.prototype.writeInt32LE=function writeInt32LE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,4,2147483647,-2147483648);this[r]=e&255;this[r+1]=e>>>8;this[r+2]=e>>>16;this[r+3]=e>>>24;return r+4};Buffer.prototype.writeInt32BE=function writeInt32BE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,4,2147483647,-2147483648);if(e<0)e=4294967295+e+1;this[r]=e>>>24;this[r+1]=e>>>16;this[r+2]=e>>>8;this[r+3]=e&255;return r+4};function checkIEEE754(e,r,t,f,n,i){if(t+f>e.length)throw new RangeError(\"Index out of range\");if(t<0)throw new RangeError(\"Index out of range\")}function writeFloat(e,r,t,f,i){r=+r;t=t>>>0;if(!i){checkIEEE754(e,r,t,4,34028234663852886e22,-34028234663852886e22)}n.write(e,r,t,f,23,4);return t+4}Buffer.prototype.writeFloatLE=function writeFloatLE(e,r,t){return writeFloat(this,e,r,true,t)};Buffer.prototype.writeFloatBE=function writeFloatBE(e,r,t){return writeFloat(this,e,r,false,t)};function writeDouble(e,r,t,f,i){r=+r;t=t>>>0;if(!i){checkIEEE754(e,r,t,8,17976931348623157e292,-17976931348623157e292)}n.write(e,r,t,f,52,8);return t+8}Buffer.prototype.writeDoubleLE=function writeDoubleLE(e,r,t){return writeDouble(this,e,r,true,t)};Buffer.prototype.writeDoubleBE=function writeDoubleBE(e,r,t){return writeDouble(this,e,r,false,t)};Buffer.prototype.copy=function copy(e,r,t,f){if(!Buffer.isBuffer(e))throw new TypeError(\"argument should be a Buffer\");if(!t)t=0;if(!f&&f!==0)f=this.length;if(r>=e.length)r=e.length;if(!r)r=0;if(f>0&&f<t)f=t;if(f===t)return 0;if(e.length===0||this.length===0)return 0;if(r<0){throw new RangeError(\"targetStart out of bounds\")}if(t<0||t>=this.length)throw new RangeError(\"Index out of range\");if(f<0)throw new RangeError(\"sourceEnd out of bounds\");if(f>this.length)f=this.length;if(e.length-r<f-t){f=e.length-r+t}var n=f-t;if(this===e&&typeof Uint8Array.prototype.copyWithin===\"function\"){this.copyWithin(r,t,f)}else if(this===e&&t<r&&r<f){for(var i=n-1;i>=0;--i){e[i+r]=this[i+t]}}else{Uint8Array.prototype.set.call(e,this.subarray(t,f),r)}return n};Buffer.prototype.fill=function fill(e,r,t,f){if(typeof e===\"string\"){if(typeof r===\"string\"){f=r;r=0;t=this.length}else if(typeof t===\"string\"){f=t;t=this.length}if(f!==undefined&&typeof f!==\"string\"){throw new TypeError(\"encoding must be a string\")}if(typeof f===\"string\"&&!Buffer.isEncoding(f)){throw new TypeError(\"Unknown encoding: \"+f)}if(e.length===1){var n=e.charCodeAt(0);if(f===\"utf8\"&&n<128||f===\"latin1\"){e=n}}}else if(typeof e===\"number\"){e=e&255}else if(typeof e===\"boolean\"){e=Number(e)}if(r<0||this.length<r||this.length<t){throw new RangeError(\"Out of range index\")}if(t<=r){return this}r=r>>>0;t=t===undefined?this.length:t>>>0;if(!e)e=0;var i;if(typeof e===\"number\"){for(i=r;i<t;++i){this[i]=e}}else{var o=Buffer.isBuffer(e)?e:Buffer.from(e,f);var u=o.length;if(u===0){throw new TypeError('The value \"'+e+'\" is invalid for argument \"value\"')}for(i=0;i<t-r;++i){this[i+r]=o[i%u]}}return this};var a=/[^+/0-9A-Za-z-_]/g;function base64clean(e){e=e.split(\"=\")[0];e=e.trim().replace(a,\"\");if(e.length<2)return\"\";while(e.length%4!==0){e=e+\"=\"}return e}function utf8ToBytes(e,r){r=r||Infinity;var t;var f=e.length;var n=null;var i=[];for(var o=0;o<f;++o){t=e.charCodeAt(o);if(t>55295&&t<57344){if(!n){if(t>56319){if((r-=3)>-1)i.push(239,191,189);continue}else if(o+1===f){if((r-=3)>-1)i.push(239,191,189);continue}n=t;continue}if(t<56320){if((r-=3)>-1)i.push(239,191,189);n=t;continue}t=(n-55296<<10|t-56320)+65536}else if(n){if((r-=3)>-1)i.push(239,191,189)}n=null;if(t<128){if((r-=1)<0)break;i.push(t)}else if(t<2048){if((r-=2)<0)break;i.push(t>>6|192,t&63|128)}else if(t<65536){if((r-=3)<0)break;i.push(t>>12|224,t>>6&63|128,t&63|128)}else if(t<1114112){if((r-=4)<0)break;i.push(t>>18|240,t>>12&63|128,t>>6&63|128,t&63|128)}else{throw new Error(\"Invalid code point\")}}return i}function asciiToBytes(e){var r=[];for(var t=0;t<e.length;++t){r.push(e.charCodeAt(t)&255)}return r}function utf16leToBytes(e,r){var t,f,n;var i=[];for(var o=0;o<e.length;++o){if((r-=2)<0)break;t=e.charCodeAt(o);f=t>>8;n=t%256;i.push(n);i.push(f)}return i}function base64ToBytes(e){return f.toByteArray(base64clean(e))}function blitBuffer(e,r,t,f){for(var n=0;n<f;++n){if(n+t>=r.length||n>=e.length)break;r[n+t]=e[n]}return n}function isInstance(e,r){return e instanceof r||e!=null&&e.constructor!=null&&e.constructor.name!=null&&e.constructor.name===r.name}function numberIsNaN(e){return e!==e}var s=function(){var e=\"0123456789abcdef\";var r=new Array(256);for(var t=0;t<16;++t){var f=t*16;for(var n=0;n<16;++n){r[f+n]=e[t]+e[n]}}return r}()},783:function(e,r){\n/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nr.read=function(e,r,t,f,n){var i,o;var u=n*8-f-1;var a=(1<<u)-1;var s=a>>1;var h=-7;var c=t?n-1:0;var l=t?-1:1;var p=e[r+c];c+=l;i=p&(1<<-h)-1;p>>=-h;h+=u;for(;h>0;i=i*256+e[r+c],c+=l,h-=8){}o=i&(1<<-h)-1;i>>=-h;h+=f;for(;h>0;o=o*256+e[r+c],c+=l,h-=8){}if(i===0){i=1-s}else if(i===a){return o?NaN:(p?-1:1)*Infinity}else{o=o+Math.pow(2,f);i=i-s}return(p?-1:1)*o*Math.pow(2,i-f)};r.write=function(e,r,t,f,n,i){var o,u,a;var s=i*8-n-1;var h=(1<<s)-1;var c=h>>1;var l=n===23?Math.pow(2,-24)-Math.pow(2,-77):0;var p=f?0:i-1;var y=f?1:-1;var g=r<0||r===0&&1/r<0?1:0;r=Math.abs(r);if(isNaN(r)||r===Infinity){u=isNaN(r)?1:0;o=h}else{o=Math.floor(Math.log(r)/Math.LN2);if(r*(a=Math.pow(2,-o))<1){o--;a*=2}if(o+c>=1){r+=l/a}else{r+=l*Math.pow(2,1-c)}if(r*a>=2){o++;a/=2}if(o+c>=h){u=0;o=h}else if(o+c>=1){u=(r*a-1)*Math.pow(2,n);o=o+c}else{u=r*Math.pow(2,c-1)*Math.pow(2,n);o=0}}for(;n>=8;e[t+p]=u&255,p+=y,u/=256,n-=8){}o=o<<n|u;s+=n;for(;s>0;e[t+p]=o&255,p+=y,o/=256,s-=8){}e[t+p-y]|=g*128}}};var r={};function __nccwpck_require__(t){var f=r[t];if(f!==undefined){return f.exports}var n=r[t]={exports:{}};var i=true;try{e[t](n,n.exports,__nccwpck_require__);i=false}finally{if(i)delete r[t]}return n.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var t=__nccwpck_require__(72);module.exports=t})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/buffer/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/modals/EditWriteupModal.tsx":
/*!****************************************************!*\
  !*** ./src/components/modals/EditWriteupModal.tsx ***!
  \****************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ EditWriteupModal; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/navigation */ \"(app-pages-browser)/./node_modules/next/dist/api/navigation.js\");\n/* harmony import */ var _components_ui_dialog__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/components/ui/dialog */ \"(app-pages-browser)/./src/components/ui/dialog.tsx\");\n/* harmony import */ var _components_ui_input__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/components/ui/input */ \"(app-pages-browser)/./src/components/ui/input.tsx\");\n/* harmony import */ var _components_ui_button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/components/ui/button */ \"(app-pages-browser)/./src/components/ui/button.tsx\");\n/* harmony import */ var _hooks_use_toast__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/hooks/use-toast */ \"(app-pages-browser)/./src/hooks/use-toast.ts\");\n/* harmony import */ var _components_ui_select__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/components/ui/select */ \"(app-pages-browser)/./src/components/ui/select.tsx\");\n/* harmony import */ var _barrel_optimize_names_Loader2_lucide_react__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! __barrel_optimize__?names=Loader2!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/loader-circle.js\");\n/* harmony import */ var _editor_TipTapEditor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../editor/TipTapEditor */ \"(app-pages-browser)/./src/components/editor/TipTapEditor.tsx\");\n/* harmony import */ var _components_VersionHistory__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @/components/VersionHistory */ \"(app-pages-browser)/./src/components/VersionHistory.tsx\");\n/* harmony import */ var jspdf__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! jspdf */ \"(app-pages-browser)/./node_modules/jspdf/dist/jspdf.es.min.js\");\n/* harmony import */ var docx__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! docx */ \"(app-pages-browser)/./node_modules/docx/build/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\n\nfunction EditWriteupModal(param) {\n    let { isOpen, onClose, writing, collections, onUnsavedChanges } = param;\n    var _writing_collections_;\n    _s();\n    const [title, setTitle] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(writing.title);\n    const [content, setContent] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(writing.content);\n    const [selectedCollection, setSelectedCollection] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(((_writing_collections_ = writing.collections[0]) === null || _writing_collections_ === void 0 ? void 0 : _writing_collections_.id) || \"uncategorized\");\n    const [isSaving, setIsSaving] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [hasUnsavedChanges, setHasUnsavedChanges] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isViewingVersions, setIsViewingVersions] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isExporting, setIsExporting] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_2__.useRouter)();\n    const { toast } = (0,_hooks_use_toast__WEBPACK_IMPORTED_MODULE_6__.useToast)();\n    // Reset state when modal opens\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (isOpen) {\n            var _writing_collections_;\n            setTitle(writing.title);\n            setContent(writing.content);\n            setSelectedCollection(((_writing_collections_ = writing.collections[0]) === null || _writing_collections_ === void 0 ? void 0 : _writing_collections_.id) || \"uncategorized\");\n            setHasUnsavedChanges(false);\n            setIsViewingVersions(false);\n        }\n    }, [\n        isOpen,\n        writing\n    ]);\n    // Track unsaved changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        var _writing_collections_;\n        if (isViewingVersions) return;\n        const hasChanges = title !== writing.title || content !== writing.content || selectedCollection !== (((_writing_collections_ = writing.collections[0]) === null || _writing_collections_ === void 0 ? void 0 : _writing_collections_.id) || \"uncategorized\");\n        if (!isViewingVersions) {\n            setHasUnsavedChanges(hasChanges);\n            onUnsavedChanges === null || onUnsavedChanges === void 0 ? void 0 : onUnsavedChanges(hasChanges);\n        }\n    }, [\n        title,\n        content,\n        selectedCollection,\n        writing,\n        onUnsavedChanges,\n        isViewingVersions\n    ]);\n    const handleClose = ()=>{\n        if (hasUnsavedChanges && !isViewingVersions) {\n            const confirmed = window.confirm(\"You have unsaved changes. Are you sure you want to close?\");\n            if (!confirmed) return;\n        }\n        setIsViewingVersions(false);\n        onClose();\n    };\n    const handleSubmit = async (e)=>{\n        e.preventDefault();\n        if (isViewingVersions) return;\n        if (!title.trim()) {\n            toast({\n                title: \"Error\",\n                description: \"Title is required\",\n                variant: \"destructive\"\n            });\n            return;\n        }\n        try {\n            setIsSaving(true);\n            const response = await fetch(\"/api/writings/\".concat(writing.id), {\n                method: \"PATCH\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    title: title.trim(),\n                    content: content.trim(),\n                    collectionId: selectedCollection === \"uncategorized\" ? undefined : selectedCollection\n                })\n            });\n            if (!response.ok) {\n                const error = await response.text();\n                throw new Error(error || \"Failed to update write-up\");\n            }\n            const data = await response.json();\n            toast({\n                title: \"Success\",\n                description: \"Write-up updated successfully\"\n            });\n            onClose();\n            router.refresh();\n        } catch (error) {\n            console.error(\"Error updating write-up:\", error);\n            toast({\n                title: \"Error\",\n                description: error instanceof Error ? error.message : \"Failed to update write-up\",\n                variant: \"destructive\"\n            });\n        } finally{\n            setIsSaving(false);\n        }\n    };\n    const handleRestoreVersion = (restoredContent, restoredTitle)=>{\n        setTitle(restoredTitle);\n        setContent(restoredContent);\n        setIsViewingVersions(false);\n        // Set hasUnsavedChanges to true since we've restored a version\n        setHasUnsavedChanges(true);\n        onUnsavedChanges === null || onUnsavedChanges === void 0 ? void 0 : onUnsavedChanges(true);\n        toast({\n            title: \"Version Restored\",\n            description: \"The selected version has been restored. Don't forget to save your changes.\"\n        });\n    };\n    const handleContentChange = (newContent)=>{\n        if (!isViewingVersions) {\n            setContent(newContent);\n        }\n    };\n    const handleExportPDF = async ()=>{\n        try {\n            setIsExporting(true);\n            const doc = new jspdf__WEBPACK_IMPORTED_MODULE_10__.jsPDF();\n            // Add title\n            doc.setFontSize(16);\n            doc.text(title, 20, 20);\n            // Add content (basic text only)\n            doc.setFontSize(12);\n            const textContent = content.replace(/<[^>]*>/g, \"\"); // Remove HTML tags\n            const splitText = doc.splitTextToSize(textContent, 170);\n            doc.text(splitText, 20, 30);\n            // Save the PDF\n            doc.save(\"\".concat(title.toLowerCase().replace(/\\s+/g, \"-\"), \".pdf\"));\n            toast({\n                title: \"Success\",\n                description: \"PDF exported successfully\"\n            });\n        } catch (error) {\n            console.error(\"Error exporting PDF:\", error);\n            toast({\n                title: \"Error\",\n                description: \"Failed to export PDF\",\n                variant: \"destructive\"\n            });\n        } finally{\n            setIsExporting(false);\n        }\n    };\n    const handleExportDOCX = async ()=>{\n        try {\n            setIsExporting(true);\n            // Create document\n            const doc = new docx__WEBPACK_IMPORTED_MODULE_11__.Document({\n                sections: [\n                    {\n                        properties: {},\n                        children: [\n                            new docx__WEBPACK_IMPORTED_MODULE_11__.Paragraph({\n                                text: title,\n                                heading: 1\n                            }),\n                            new docx__WEBPACK_IMPORTED_MODULE_11__.Paragraph({\n                                text: content.replace(/<[^>]*>/g, \"\") // Remove HTML tags\n                            })\n                        ]\n                    }\n                ]\n            });\n            // Generate and save document\n            const buffer = await docx__WEBPACK_IMPORTED_MODULE_11__.Packer.toBuffer(doc);\n            const blob = new Blob([\n                buffer\n            ], {\n                type: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n            });\n            const url = window.URL.createObjectURL(blob);\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.download = \"\".concat(title.toLowerCase().replace(/\\s+/g, \"-\"), \".docx\");\n            link.click();\n            window.URL.revokeObjectURL(url);\n            toast({\n                title: \"Success\",\n                description: \"DOCX exported successfully\"\n            });\n        } catch (error) {\n            console.error(\"Error exporting DOCX:\", error);\n            toast({\n                title: \"Error\",\n                description: \"Failed to export DOCX\",\n                variant: \"destructive\"\n            });\n        } finally{\n            setIsExporting(false);\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_dialog__WEBPACK_IMPORTED_MODULE_3__.Dialog, {\n        open: isOpen,\n        onOpenChange: handleClose,\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_dialog__WEBPACK_IMPORTED_MODULE_3__.DialogContent, {\n            className: \"sm:max-w-[800px] p-0 bg-white overflow-hidden max-h-[90vh] flex flex-col\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_dialog__WEBPACK_IMPORTED_MODULE_3__.DialogHeader, {\n                    className: \"px-6 pt-6\",\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_dialog__WEBPACK_IMPORTED_MODULE_3__.DialogTitle, {\n                        className: \"text-xl font-fraunces flex items-center justify-between\",\n                        children: [\n                            \"Edit Write-up\",\n                            hasUnsavedChanges && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                className: \"text-sm text-yellow-600 bg-yellow-50 px-2 py-1 rounded-md\",\n                                children: \"Unsaved Changes\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                                lineNumber: 245,\n                                columnNumber: 15\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                        lineNumber: 242,\n                        columnNumber: 11\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                    lineNumber: 241,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"form\", {\n                    onSubmit: handleSubmit,\n                    className: \"px-6 pb-6 space-y-4 flex-1 overflow-y-auto\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex justify-between items-center gap-4\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"flex-1 space-y-2\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                            htmlFor: \"title\",\n                                            className: \"text-sm font-medium text-gray-700\",\n                                            children: \"Title\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                                            lineNumber: 254,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_input__WEBPACK_IMPORTED_MODULE_4__.Input, {\n                                            id: \"title\",\n                                            value: title,\n                                            onChange: (e)=>setTitle(e.target.value),\n                                            disabled: isSaving || isViewingVersions,\n                                            className: \"h-12 w-full\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                                            lineNumber: 257,\n                                            columnNumber: 15\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                                    lineNumber: 253,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"flex-shrink-0 self-end h-12 mt-1\",\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_VersionHistory__WEBPACK_IMPORTED_MODULE_9__.VersionHistory, {\n                                        writingId: writing.id,\n                                        onRestoreVersion: handleRestoreVersion,\n                                        onOpenChange: setIsViewingVersions\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                                        lineNumber: 266,\n                                        columnNumber: 15\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                                    lineNumber: 265,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                            lineNumber: 252,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"space-y-2\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                    htmlFor: \"collection\",\n                                    className: \"text-sm font-medium text-gray-700\",\n                                    children: \"Collection (Optional)\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                                    lineNumber: 275,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_select__WEBPACK_IMPORTED_MODULE_7__.Select, {\n                                    value: selectedCollection,\n                                    onValueChange: setSelectedCollection,\n                                    disabled: isSaving || isViewingVersions,\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_select__WEBPACK_IMPORTED_MODULE_7__.SelectTrigger, {\n                                            className: \"h-12\",\n                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_select__WEBPACK_IMPORTED_MODULE_7__.SelectValue, {\n                                                placeholder: \"Select a collection\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                                                lineNumber: 284,\n                                                columnNumber: 17\n                                            }, this)\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                                            lineNumber: 283,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_select__WEBPACK_IMPORTED_MODULE_7__.SelectContent, {\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_select__WEBPACK_IMPORTED_MODULE_7__.SelectItem, {\n                                                    value: \"uncategorized\",\n                                                    children: \"None\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                                                    lineNumber: 287,\n                                                    columnNumber: 17\n                                                }, this),\n                                                collections.map((collection)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_select__WEBPACK_IMPORTED_MODULE_7__.SelectItem, {\n                                                        value: collection.id,\n                                                        children: collection.name\n                                                    }, collection.id, false, {\n                                                        fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                                                        lineNumber: 289,\n                                                        columnNumber: 19\n                                                    }, this))\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                                            lineNumber: 286,\n                                            columnNumber: 15\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                                    lineNumber: 278,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                            lineNumber: 274,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"space-y-2 flex-1\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                    htmlFor: \"content\",\n                                    className: \"text-sm font-medium text-gray-700\",\n                                    children: \"Content\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                                    lineNumber: 298,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"w-full overflow-hidden border rounded-md\",\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_editor_TipTapEditor__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                                        content: content,\n                                        onChange: handleContentChange,\n                                        readOnly: isViewingVersions\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                                        lineNumber: 302,\n                                        columnNumber: 15\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                                    lineNumber: 301,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                            lineNumber: 297,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex justify-end gap-2 pt-4\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_button__WEBPACK_IMPORTED_MODULE_5__.Button, {\n                                    type: \"button\",\n                                    variant: \"outline\",\n                                    onClick: handleExportPDF,\n                                    disabled: isExporting,\n                                    className: \"bg-blue-50 hover:bg-blue-100 text-blue-600\",\n                                    children: [\n                                        isExporting ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Loader2_lucide_react__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                                            className: \"w-4 h-4 mr-2 animate-spin\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                                            lineNumber: 318,\n                                            columnNumber: 30\n                                        }, this) : null,\n                                        \"Export PDF\"\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                                    lineNumber: 311,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_button__WEBPACK_IMPORTED_MODULE_5__.Button, {\n                                    type: \"button\",\n                                    variant: \"outline\",\n                                    onClick: handleExportDOCX,\n                                    disabled: isExporting,\n                                    className: \"bg-green-50 hover:bg-green-100 text-green-600\",\n                                    children: [\n                                        isExporting ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Loader2_lucide_react__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                                            className: \"w-4 h-4 mr-2 animate-spin\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                                            lineNumber: 328,\n                                            columnNumber: 30\n                                        }, this) : null,\n                                        \"Export DOCX\"\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                                    lineNumber: 321,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_button__WEBPACK_IMPORTED_MODULE_5__.Button, {\n                                    type: \"button\",\n                                    variant: \"outline\",\n                                    onClick: handleClose,\n                                    disabled: isSaving,\n                                    children: \"Cancel\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                                    lineNumber: 331,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_button__WEBPACK_IMPORTED_MODULE_5__.Button, {\n                                    type: \"submit\",\n                                    className: \"bg-gray-900 hover:bg-gray-800 text-white transition-colors\",\n                                    disabled: isSaving,\n                                    children: [\n                                        isSaving && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Loader2_lucide_react__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                                            className: \"w-4 h-4 mr-2 animate-spin\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                                            lineNumber: 340,\n                                            columnNumber: 28\n                                        }, this),\n                                        \"Save Changes\"\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                                    lineNumber: 339,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                            lineNumber: 310,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n                    lineNumber: 251,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n            lineNumber: 240,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\Himanshu Chauhan\\\\OneDrive\\\\Desktop\\\\creative-app\\\\src\\\\components\\\\modals\\\\EditWriteupModal.tsx\",\n        lineNumber: 239,\n        columnNumber: 5\n    }, this);\n}\n_s(EditWriteupModal, \"3uTBrzRx4WpDs/IvcZ222ARv8Fc=\", false, function() {\n    return [\n        next_navigation__WEBPACK_IMPORTED_MODULE_2__.useRouter,\n        _hooks_use_toast__WEBPACK_IMPORTED_MODULE_6__.useToast\n    ];\n});\n_c = EditWriteupModal;\nvar _c;\n$RefreshReg$(_c, \"EditWriteupModal\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/modals/EditWriteupModal.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/docx/build/index.mjs":
/*!*******************************************!*\
  !*** ./node_modules/docx/build/index.mjs ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractNumbering: function() { return /* binding */ AbstractNumbering; },\n/* harmony export */   Alignment: function() { return /* binding */ Alignment; },\n/* harmony export */   AlignmentAttributes: function() { return /* binding */ AlignmentAttributes; },\n/* harmony export */   AlignmentType: function() { return /* binding */ AlignmentType; },\n/* harmony export */   AnnotationReference: function() { return /* binding */ AnnotationReference; },\n/* harmony export */   Attributes: function() { return /* binding */ Attributes; },\n/* harmony export */   BaseEmphasisMark: function() { return /* binding */ BaseEmphasisMark; },\n/* harmony export */   BaseXmlComponent: function() { return /* binding */ BaseXmlComponent; },\n/* harmony export */   Body: function() { return /* binding */ Body; },\n/* harmony export */   Bookmark: function() { return /* binding */ Bookmark; },\n/* harmony export */   BookmarkEnd: function() { return /* binding */ BookmarkEnd; },\n/* harmony export */   BookmarkStart: function() { return /* binding */ BookmarkStart; },\n/* harmony export */   Border: function() { return /* binding */ Border; },\n/* harmony export */   BorderElement: function() { return /* binding */ BorderElement; },\n/* harmony export */   BorderStyle: function() { return /* binding */ BorderStyle; },\n/* harmony export */   BuilderElement: function() { return /* binding */ BuilderElement; },\n/* harmony export */   CarriageReturn: function() { return /* binding */ CarriageReturn; },\n/* harmony export */   CharacterSet: function() { return /* binding */ CharacterSet; },\n/* harmony export */   CheckBox: function() { return /* binding */ CheckBox; },\n/* harmony export */   CheckBoxSymbolElement: function() { return /* binding */ CheckBoxSymbolElement; },\n/* harmony export */   CheckBoxUtil: function() { return /* binding */ CheckBoxUtil; },\n/* harmony export */   Column: function() { return /* binding */ Column; },\n/* harmony export */   ColumnBreak: function() { return /* binding */ ColumnBreak; },\n/* harmony export */   Columns: function() { return /* binding */ Columns; },\n/* harmony export */   Comment: function() { return /* binding */ Comment; },\n/* harmony export */   CommentRangeEnd: function() { return /* binding */ CommentRangeEnd; },\n/* harmony export */   CommentRangeStart: function() { return /* binding */ CommentRangeStart; },\n/* harmony export */   CommentReference: function() { return /* binding */ CommentReference; },\n/* harmony export */   Comments: function() { return /* binding */ Comments; },\n/* harmony export */   ConcreteHyperlink: function() { return /* binding */ ConcreteHyperlink; },\n/* harmony export */   ConcreteNumbering: function() { return /* binding */ ConcreteNumbering; },\n/* harmony export */   ContinuationSeparator: function() { return /* binding */ ContinuationSeparator; },\n/* harmony export */   DayLong: function() { return /* binding */ DayLong; },\n/* harmony export */   DayShort: function() { return /* binding */ DayShort; },\n/* harmony export */   DeletedTextRun: function() { return /* binding */ DeletedTextRun; },\n/* harmony export */   DocGridAttributes: function() { return /* binding */ DocGridAttributes; },\n/* harmony export */   Document: function() { return /* binding */ File; },\n/* harmony export */   DocumentAttributes: function() { return /* binding */ DocumentAttributes; },\n/* harmony export */   DocumentBackground: function() { return /* binding */ DocumentBackground; },\n/* harmony export */   DocumentBackgroundAttributes: function() { return /* binding */ DocumentBackgroundAttributes; },\n/* harmony export */   DocumentDefaults: function() { return /* binding */ DocumentDefaults; },\n/* harmony export */   DocumentGrid: function() { return /* binding */ DocumentGrid; },\n/* harmony export */   DocumentGridType: function() { return /* binding */ DocumentGridType; },\n/* harmony export */   DotEmphasisMark: function() { return /* binding */ DotEmphasisMark; },\n/* harmony export */   Drawing: function() { return /* binding */ Drawing; },\n/* harmony export */   DropCapType: function() { return /* binding */ DropCapType; },\n/* harmony export */   EMPTY_OBJECT: function() { return /* binding */ EMPTY_OBJECT; },\n/* harmony export */   EmphasisMark: function() { return /* binding */ EmphasisMark; },\n/* harmony export */   EmphasisMarkType: function() { return /* binding */ EmphasisMarkType; },\n/* harmony export */   EmptyElement: function() { return /* binding */ EmptyElement; },\n/* harmony export */   EndnoteReference: function() { return /* binding */ EndnoteReference; },\n/* harmony export */   ExternalHyperlink: function() { return /* binding */ ExternalHyperlink; },\n/* harmony export */   File: function() { return /* binding */ File; },\n/* harmony export */   FileChild: function() { return /* binding */ FileChild; },\n/* harmony export */   FootNoteReferenceRunAttributes: function() { return /* binding */ FootNoteReferenceRunAttributes; },\n/* harmony export */   FootNotes: function() { return /* binding */ FootNotes; },\n/* harmony export */   Footer: function() { return /* binding */ Footer2; },\n/* harmony export */   FooterWrapper: function() { return /* binding */ FooterWrapper; },\n/* harmony export */   FootnoteReference: function() { return /* binding */ FootnoteReference; },\n/* harmony export */   FootnoteReferenceElement: function() { return /* binding */ FootnoteReferenceElement; },\n/* harmony export */   FootnoteReferenceRun: function() { return /* binding */ FootnoteReferenceRun; },\n/* harmony export */   FrameAnchorType: function() { return /* binding */ FrameAnchorType; },\n/* harmony export */   FrameWrap: function() { return /* binding */ FrameWrap; },\n/* harmony export */   GridSpan: function() { return /* binding */ GridSpan; },\n/* harmony export */   Header: function() { return /* binding */ Header2; },\n/* harmony export */   HeaderFooterReference: function() { return /* binding */ HeaderFooterReference; },\n/* harmony export */   HeaderFooterReferenceType: function() { return /* binding */ HeaderFooterReferenceType; },\n/* harmony export */   HeaderFooterType: function() { return /* binding */ HeaderFooterType; },\n/* harmony export */   HeaderWrapper: function() { return /* binding */ HeaderWrapper; },\n/* harmony export */   HeadingLevel: function() { return /* binding */ HeadingLevel; },\n/* harmony export */   HeightRule: function() { return /* binding */ HeightRule; },\n/* harmony export */   HighlightColor: function() { return /* binding */ HighlightColor; },\n/* harmony export */   HorizontalPosition: function() { return /* binding */ HorizontalPosition; },\n/* harmony export */   HorizontalPositionAlign: function() { return /* binding */ HorizontalPositionAlign; },\n/* harmony export */   HorizontalPositionRelativeFrom: function() { return /* binding */ HorizontalPositionRelativeFrom; },\n/* harmony export */   HpsMeasureElement: function() { return /* binding */ HpsMeasureElement; },\n/* harmony export */   HyperlinkType: function() { return /* binding */ HyperlinkType; },\n/* harmony export */   IgnoreIfEmptyXmlComponent: function() { return /* binding */ IgnoreIfEmptyXmlComponent; },\n/* harmony export */   ImageRun: function() { return /* binding */ ImageRun; },\n/* harmony export */   ImportedRootElementAttributes: function() { return /* binding */ ImportedRootElementAttributes; },\n/* harmony export */   ImportedXmlComponent: function() { return /* binding */ ImportedXmlComponent; },\n/* harmony export */   Indent: function() { return /* binding */ Indent; },\n/* harmony export */   InitializableXmlComponent: function() { return /* binding */ InitializableXmlComponent; },\n/* harmony export */   InsertedTextRun: function() { return /* binding */ InsertedTextRun; },\n/* harmony export */   InternalHyperlink: function() { return /* binding */ InternalHyperlink; },\n/* harmony export */   LastRenderedPageBreak: function() { return /* binding */ LastRenderedPageBreak; },\n/* harmony export */   LeaderType: function() { return /* binding */ LeaderType; },\n/* harmony export */   Level: function() { return /* binding */ Level; },\n/* harmony export */   LevelBase: function() { return /* binding */ LevelBase; },\n/* harmony export */   LevelForOverride: function() { return /* binding */ LevelForOverride; },\n/* harmony export */   LevelFormat: function() { return /* binding */ LevelFormat; },\n/* harmony export */   LevelOverride: function() { return /* binding */ LevelOverride; },\n/* harmony export */   LevelSuffix: function() { return /* binding */ LevelSuffix; },\n/* harmony export */   LineNumberRestartFormat: function() { return /* binding */ LineNumberRestartFormat; },\n/* harmony export */   LineRuleType: function() { return /* binding */ LineRuleType; },\n/* harmony export */   Math: function() { return /* binding */ Math$1; },\n/* harmony export */   MathAccentCharacter: function() { return /* binding */ MathAccentCharacter; },\n/* harmony export */   MathAngledBrackets: function() { return /* binding */ MathAngledBrackets; },\n/* harmony export */   MathBase: function() { return /* binding */ MathBase; },\n/* harmony export */   MathCurlyBrackets: function() { return /* binding */ MathCurlyBrackets; },\n/* harmony export */   MathDegree: function() { return /* binding */ MathDegree; },\n/* harmony export */   MathDenominator: function() { return /* binding */ MathDenominator; },\n/* harmony export */   MathFraction: function() { return /* binding */ MathFraction; },\n/* harmony export */   MathFunction: function() { return /* binding */ MathFunction; },\n/* harmony export */   MathFunctionName: function() { return /* binding */ MathFunctionName; },\n/* harmony export */   MathFunctionProperties: function() { return /* binding */ MathFunctionProperties; },\n/* harmony export */   MathIntegral: function() { return /* binding */ MathIntegral; },\n/* harmony export */   MathLimit: function() { return /* binding */ MathLimit; },\n/* harmony export */   MathLimitLocation: function() { return /* binding */ MathLimitLocation; },\n/* harmony export */   MathLimitLower: function() { return /* binding */ MathLimitLower; },\n/* harmony export */   MathLimitUpper: function() { return /* binding */ MathLimitUpper; },\n/* harmony export */   MathNAryProperties: function() { return /* binding */ MathNAryProperties; },\n/* harmony export */   MathNumerator: function() { return /* binding */ MathNumerator; },\n/* harmony export */   MathPreSubSuperScript: function() { return /* binding */ MathPreSubSuperScript; },\n/* harmony export */   MathPreSubSuperScriptProperties: function() { return /* binding */ MathPreSubSuperScriptProperties; },\n/* harmony export */   MathRadical: function() { return /* binding */ MathRadical; },\n/* harmony export */   MathRadicalProperties: function() { return /* binding */ MathRadicalProperties; },\n/* harmony export */   MathRoundBrackets: function() { return /* binding */ MathRoundBrackets; },\n/* harmony export */   MathRun: function() { return /* binding */ MathRun; },\n/* harmony export */   MathSquareBrackets: function() { return /* binding */ MathSquareBrackets; },\n/* harmony export */   MathSubScript: function() { return /* binding */ MathSubScript; },\n/* harmony export */   MathSubScriptElement: function() { return /* binding */ MathSubScriptElement; },\n/* harmony export */   MathSubScriptProperties: function() { return /* binding */ MathSubScriptProperties; },\n/* harmony export */   MathSubSuperScript: function() { return /* binding */ MathSubSuperScript; },\n/* harmony export */   MathSubSuperScriptProperties: function() { return /* binding */ MathSubSuperScriptProperties; },\n/* harmony export */   MathSum: function() { return /* binding */ MathSum; },\n/* harmony export */   MathSuperScript: function() { return /* binding */ MathSuperScript; },\n/* harmony export */   MathSuperScriptElement: function() { return /* binding */ MathSuperScriptElement; },\n/* harmony export */   MathSuperScriptProperties: function() { return /* binding */ MathSuperScriptProperties; },\n/* harmony export */   Media: function() { return /* binding */ Media; },\n/* harmony export */   MonthLong: function() { return /* binding */ MonthLong; },\n/* harmony export */   MonthShort: function() { return /* binding */ MonthShort; },\n/* harmony export */   NextAttributeComponent: function() { return /* binding */ NextAttributeComponent; },\n/* harmony export */   NoBreakHyphen: function() { return /* binding */ NoBreakHyphen; },\n/* harmony export */   NumberFormat: function() { return /* binding */ NumberFormat$1; },\n/* harmony export */   NumberProperties: function() { return /* binding */ NumberProperties; },\n/* harmony export */   NumberValueElement: function() { return /* binding */ NumberValueElement; },\n/* harmony export */   Numbering: function() { return /* binding */ Numbering; },\n/* harmony export */   OnOffElement: function() { return /* binding */ OnOffElement; },\n/* harmony export */   OutlineLevel: function() { return /* binding */ OutlineLevel; },\n/* harmony export */   OverlapType: function() { return /* binding */ OverlapType; },\n/* harmony export */   Packer: function() { return /* binding */ Packer; },\n/* harmony export */   PageBorderDisplay: function() { return /* binding */ PageBorderDisplay; },\n/* harmony export */   PageBorderOffsetFrom: function() { return /* binding */ PageBorderOffsetFrom; },\n/* harmony export */   PageBorderZOrder: function() { return /* binding */ PageBorderZOrder; },\n/* harmony export */   PageBorders: function() { return /* binding */ PageBorders; },\n/* harmony export */   PageBreak: function() { return /* binding */ PageBreak; },\n/* harmony export */   PageBreakBefore: function() { return /* binding */ PageBreakBefore; },\n/* harmony export */   PageMargin: function() { return /* binding */ PageMargin; },\n/* harmony export */   PageNumber: function() { return /* binding */ PageNumber; },\n/* harmony export */   PageNumberElement: function() { return /* binding */ PageNumberElement; },\n/* harmony export */   PageNumberSeparator: function() { return /* binding */ PageNumberSeparator; },\n/* harmony export */   PageNumberType: function() { return /* binding */ PageNumberType; },\n/* harmony export */   PageNumberTypeAttributes: function() { return /* binding */ PageNumberTypeAttributes; },\n/* harmony export */   PageOrientation: function() { return /* binding */ PageOrientation; },\n/* harmony export */   PageReference: function() { return /* binding */ PageReference; },\n/* harmony export */   PageSize: function() { return /* binding */ PageSize; },\n/* harmony export */   PageTextDirection: function() { return /* binding */ PageTextDirection; },\n/* harmony export */   PageTextDirectionType: function() { return /* binding */ PageTextDirectionType; },\n/* harmony export */   Paragraph: function() { return /* binding */ Paragraph; },\n/* harmony export */   ParagraphProperties: function() { return /* binding */ ParagraphProperties; },\n/* harmony export */   ParagraphPropertiesDefaults: function() { return /* binding */ ParagraphPropertiesDefaults; },\n/* harmony export */   PatchType: function() { return /* binding */ PatchType; },\n/* harmony export */   PositionalTab: function() { return /* binding */ PositionalTab; },\n/* harmony export */   PositionalTabAlignment: function() { return /* binding */ PositionalTabAlignment; },\n/* harmony export */   PositionalTabLeader: function() { return /* binding */ PositionalTabLeader; },\n/* harmony export */   PositionalTabRelativeTo: function() { return /* binding */ PositionalTabRelativeTo; },\n/* harmony export */   PrettifyType: function() { return /* binding */ PrettifyType; },\n/* harmony export */   RelativeHorizontalPosition: function() { return /* binding */ RelativeHorizontalPosition; },\n/* harmony export */   RelativeVerticalPosition: function() { return /* binding */ RelativeVerticalPosition; },\n/* harmony export */   Run: function() { return /* binding */ Run; },\n/* harmony export */   RunFonts: function() { return /* binding */ RunFonts; },\n/* harmony export */   RunProperties: function() { return /* binding */ RunProperties; },\n/* harmony export */   RunPropertiesChange: function() { return /* binding */ RunPropertiesChange; },\n/* harmony export */   RunPropertiesDefaults: function() { return /* binding */ RunPropertiesDefaults; },\n/* harmony export */   SectionProperties: function() { return /* binding */ SectionProperties; },\n/* harmony export */   SectionType: function() { return /* binding */ SectionType; },\n/* harmony export */   SectionTypeAttributes: function() { return /* binding */ SectionTypeAttributes; },\n/* harmony export */   Separator: function() { return /* binding */ Separator; },\n/* harmony export */   SequentialIdentifier: function() { return /* binding */ SequentialIdentifier; },\n/* harmony export */   Shading: function() { return /* binding */ Shading; },\n/* harmony export */   ShadingType: function() { return /* binding */ ShadingType; },\n/* harmony export */   SimpleField: function() { return /* binding */ SimpleField; },\n/* harmony export */   SimpleMailMergeField: function() { return /* binding */ SimpleMailMergeField; },\n/* harmony export */   SimplePos: function() { return /* binding */ SimplePos; },\n/* harmony export */   SoftHyphen: function() { return /* binding */ SoftHyphen; },\n/* harmony export */   SpaceType: function() { return /* binding */ SpaceType; },\n/* harmony export */   Spacing: function() { return /* binding */ Spacing; },\n/* harmony export */   StringContainer: function() { return /* binding */ StringContainer; },\n/* harmony export */   StringEnumValueElement: function() { return /* binding */ StringEnumValueElement; },\n/* harmony export */   StringValueElement: function() { return /* binding */ StringValueElement; },\n/* harmony export */   Style: function() { return /* binding */ Style$1; },\n/* harmony export */   StyleForCharacter: function() { return /* binding */ StyleForCharacter; },\n/* harmony export */   StyleForParagraph: function() { return /* binding */ StyleForParagraph; },\n/* harmony export */   StyleLevel: function() { return /* binding */ StyleLevel; },\n/* harmony export */   Styles: function() { return /* binding */ Styles; },\n/* harmony export */   SymbolRun: function() { return /* binding */ SymbolRun; },\n/* harmony export */   TDirection: function() { return /* binding */ TDirection; },\n/* harmony export */   Tab: function() { return /* binding */ Tab; },\n/* harmony export */   TabAttributes: function() { return /* binding */ TabAttributes; },\n/* harmony export */   TabStop: function() { return /* binding */ TabStop; },\n/* harmony export */   TabStopItem: function() { return /* binding */ TabStopItem; },\n/* harmony export */   TabStopPosition: function() { return /* binding */ TabStopPosition; },\n/* harmony export */   TabStopType: function() { return /* binding */ TabStopType; },\n/* harmony export */   Table: function() { return /* binding */ Table; },\n/* harmony export */   TableAnchorType: function() { return /* binding */ TableAnchorType; },\n/* harmony export */   TableBorders: function() { return /* binding */ TableBorders; },\n/* harmony export */   TableCell: function() { return /* binding */ TableCell; },\n/* harmony export */   TableCellBorders: function() { return /* binding */ TableCellBorders; },\n/* harmony export */   TableFloatProperties: function() { return /* binding */ TableFloatProperties; },\n/* harmony export */   TableLayout: function() { return /* binding */ TableLayout; },\n/* harmony export */   TableLayoutType: function() { return /* binding */ TableLayoutType; },\n/* harmony export */   TableOfContents: function() { return /* binding */ TableOfContents; },\n/* harmony export */   TableProperties: function() { return /* binding */ TableProperties; },\n/* harmony export */   TableRow: function() { return /* binding */ TableRow; },\n/* harmony export */   TableRowHeight: function() { return /* binding */ TableRowHeight; },\n/* harmony export */   TableRowHeightAttributes: function() { return /* binding */ TableRowHeightAttributes; },\n/* harmony export */   TableRowProperties: function() { return /* binding */ TableRowProperties; },\n/* harmony export */   TableWidthElement: function() { return /* binding */ TableWidthElement; },\n/* harmony export */   TextDirection: function() { return /* binding */ TextDirection; },\n/* harmony export */   TextEffect: function() { return /* binding */ TextEffect; },\n/* harmony export */   TextRun: function() { return /* binding */ TextRun; },\n/* harmony export */   TextWrappingSide: function() { return /* binding */ TextWrappingSide; },\n/* harmony export */   TextWrappingType: function() { return /* binding */ TextWrappingType; },\n/* harmony export */   Textbox: function() { return /* binding */ Textbox; },\n/* harmony export */   ThematicBreak: function() { return /* binding */ ThematicBreak; },\n/* harmony export */   Type: function() { return /* binding */ Type; },\n/* harmony export */   Underline: function() { return /* binding */ Underline; },\n/* harmony export */   UnderlineType: function() { return /* binding */ UnderlineType; },\n/* harmony export */   VerticalAlign: function() { return /* binding */ VerticalAlign2; },\n/* harmony export */   VerticalAlignAttributes: function() { return /* binding */ VerticalAlignAttributes; },\n/* harmony export */   VerticalAlignElement: function() { return /* binding */ VerticalAlignElement; },\n/* harmony export */   VerticalMerge: function() { return /* binding */ VerticalMerge; },\n/* harmony export */   VerticalMergeType: function() { return /* binding */ VerticalMergeType; },\n/* harmony export */   VerticalPosition: function() { return /* binding */ VerticalPosition; },\n/* harmony export */   VerticalPositionAlign: function() { return /* binding */ VerticalPositionAlign; },\n/* harmony export */   VerticalPositionRelativeFrom: function() { return /* binding */ VerticalPositionRelativeFrom; },\n/* harmony export */   WORKAROUND2: function() { return /* binding */ WORKAROUND2; },\n/* harmony export */   WORKAROUND3: function() { return /* binding */ WORKAROUND3; },\n/* harmony export */   WORKAROUND4: function() { return /* binding */ WORKAROUND4; },\n/* harmony export */   WidthType: function() { return /* binding */ WidthType; },\n/* harmony export */   WrapNone: function() { return /* binding */ WrapNone; },\n/* harmony export */   WrapSquare: function() { return /* binding */ WrapSquare; },\n/* harmony export */   WrapTight: function() { return /* binding */ WrapTight; },\n/* harmony export */   WrapTopAndBottom: function() { return /* binding */ WrapTopAndBottom; },\n/* harmony export */   XmlAttributeComponent: function() { return /* binding */ XmlAttributeComponent; },\n/* harmony export */   XmlComponent: function() { return /* binding */ XmlComponent; },\n/* harmony export */   YearLong: function() { return /* binding */ YearLong; },\n/* harmony export */   YearShort: function() { return /* binding */ YearShort; },\n/* harmony export */   abstractNumUniqueNumericIdGen: function() { return /* binding */ abstractNumUniqueNumericIdGen; },\n/* harmony export */   bookmarkUniqueNumericIdGen: function() { return /* binding */ bookmarkUniqueNumericIdGen; },\n/* harmony export */   concreteNumUniqueNumericIdGen: function() { return /* binding */ concreteNumUniqueNumericIdGen; },\n/* harmony export */   convertInchesToTwip: function() { return /* binding */ convertInchesToTwip; },\n/* harmony export */   convertMillimetersToTwip: function() { return /* binding */ convertMillimetersToTwip; },\n/* harmony export */   convertToXmlComponent: function() { return /* binding */ convertToXmlComponent; },\n/* harmony export */   createFrameProperties: function() { return /* binding */ createFrameProperties; },\n/* harmony export */   createLineNumberType: function() { return /* binding */ createLineNumberType; },\n/* harmony export */   createStringElement: function() { return /* binding */ createStringElement; },\n/* harmony export */   dateTimeValue: function() { return /* binding */ dateTimeValue; },\n/* harmony export */   decimalNumber: function() { return /* binding */ decimalNumber; },\n/* harmony export */   docPropertiesUniqueNumericIdGen: function() { return /* binding */ docPropertiesUniqueNumericIdGen; },\n/* harmony export */   eighthPointMeasureValue: function() { return /* binding */ eighthPointMeasureValue; },\n/* harmony export */   hashedId: function() { return /* binding */ hashedId; },\n/* harmony export */   hexColorValue: function() { return /* binding */ hexColorValue; },\n/* harmony export */   hpsMeasureValue: function() { return /* binding */ hpsMeasureValue; },\n/* harmony export */   longHexNumber: function() { return /* binding */ longHexNumber; },\n/* harmony export */   measurementOrPercentValue: function() { return /* binding */ measurementOrPercentValue; },\n/* harmony export */   patchDetector: function() { return /* binding */ patchDetector; },\n/* harmony export */   patchDocument: function() { return /* binding */ patchDocument; },\n/* harmony export */   percentageValue: function() { return /* binding */ percentageValue; },\n/* harmony export */   pointMeasureValue: function() { return /* binding */ pointMeasureValue; },\n/* harmony export */   positiveUniversalMeasureValue: function() { return /* binding */ positiveUniversalMeasureValue; },\n/* harmony export */   sectionMarginDefaults: function() { return /* binding */ sectionMarginDefaults; },\n/* harmony export */   sectionPageSizeDefaults: function() { return /* binding */ sectionPageSizeDefaults; },\n/* harmony export */   shortHexNumber: function() { return /* binding */ shortHexNumber; },\n/* harmony export */   signedHpsMeasureValue: function() { return /* binding */ signedHpsMeasureValue; },\n/* harmony export */   signedTwipsMeasureValue: function() { return /* binding */ signedTwipsMeasureValue; },\n/* harmony export */   twipsMeasureValue: function() { return /* binding */ twipsMeasureValue; },\n/* harmony export */   uCharHexNumber: function() { return /* binding */ uCharHexNumber; },\n/* harmony export */   uniqueId: function() { return /* binding */ uniqueId; },\n/* harmony export */   uniqueNumericIdCreator: function() { return /* binding */ uniqueNumericIdCreator; },\n/* harmony export */   uniqueUuid: function() { return /* binding */ uniqueUuid; },\n/* harmony export */   universalMeasureValue: function() { return /* binding */ universalMeasureValue; },\n/* harmony export */   unsignedDecimalNumber: function() { return /* binding */ unsignedDecimalNumber; }\n/* harmony export */ });\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve2, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve2(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nclass BaseXmlComponent {\n  constructor(rootKey) {\n    __publicField(this, \"rootKey\");\n    this.rootKey = rootKey;\n  }\n}\nconst EMPTY_OBJECT = Object.seal({});\nclass XmlComponent extends BaseXmlComponent {\n  constructor(rootKey) {\n    super(rootKey);\n    // eslint-disable-next-line functional/prefer-readonly-type, @typescript-eslint/no-explicit-any\n    __publicField(this, \"root\");\n    this.root = new Array();\n  }\n  // This method is called by the formatter to get the XML representation of this component.\n  // It is called recursively for all child components.\n  // It is a serializer to be used in the xml library.\n  // https://www.npmjs.com/package/xml\n  // Child components can override this method to customize the XML representation, or execute side effects.\n  prepForXml(context) {\n    var _a;\n    context.stack.push(this);\n    const children = this.root.map((comp) => {\n      if (comp instanceof BaseXmlComponent) {\n        return comp.prepForXml(context);\n      }\n      return comp;\n    }).filter((comp) => comp !== void 0);\n    context.stack.pop();\n    return {\n      [this.rootKey]: children.length ? children.length === 1 && ((_a = children[0]) == null ? void 0 : _a._attr) ? children[0] : children : EMPTY_OBJECT\n    };\n  }\n  /**\n   * @deprecated Do not use this method. It is only used internally by the library. It will be removed in a future version.\n   */\n  addChildElement(child) {\n    this.root.push(child);\n    return this;\n  }\n}\nclass IgnoreIfEmptyXmlComponent extends XmlComponent {\n  prepForXml(context) {\n    const result = super.prepForXml(context);\n    if (result && (typeof result[this.rootKey] !== \"object\" || Object.keys(result[this.rootKey]).length)) {\n      return result;\n    }\n    return void 0;\n  }\n}\nclass XmlAttributeComponent extends BaseXmlComponent {\n  constructor(root) {\n    super(\"_attr\");\n    __publicField(this, \"xmlKeys\");\n    this.root = root;\n  }\n  prepForXml(_) {\n    const attrs = {};\n    Object.entries(this.root).forEach(([key, value]) => {\n      if (value !== void 0) {\n        const newKey = this.xmlKeys && this.xmlKeys[key] || key;\n        attrs[newKey] = value;\n      }\n    });\n    return { _attr: attrs };\n  }\n}\nclass NextAttributeComponent extends BaseXmlComponent {\n  constructor(root) {\n    super(\"_attr\");\n    this.root = root;\n  }\n  prepForXml(_) {\n    const attrs = Object.values(this.root).filter(({ value }) => value !== void 0).reduce((acc, { key, value }) => __spreadProps(__spreadValues({}, acc), { [key]: value }), {});\n    return { _attr: attrs };\n  }\n}\nclass Attributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      val: \"w:val\",\n      color: \"w:color\",\n      fill: \"w:fill\",\n      space: \"w:space\",\n      sz: \"w:sz\",\n      type: \"w:type\",\n      rsidR: \"w:rsidR\",\n      rsidRPr: \"w:rsidRPr\",\n      rsidSect: \"w:rsidSect\",\n      w: \"w:w\",\n      h: \"w:h\",\n      top: \"w:top\",\n      right: \"w:right\",\n      bottom: \"w:bottom\",\n      left: \"w:left\",\n      header: \"w:header\",\n      footer: \"w:footer\",\n      gutter: \"w:gutter\",\n      linePitch: \"w:linePitch\",\n      pos: \"w:pos\"\n    });\n  }\n}\nvar commonjsGlobal = typeof globalThis !== \"undefined\" ? globalThis : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : {};\nfunction getDefaultExportFromCjs$1(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, \"default\") ? x[\"default\"] : x;\n}\nvar sax$1 = {};\nvar events = { exports: {} };\nvar R = typeof Reflect === \"object\" ? Reflect : null;\nvar ReflectApply = R && typeof R.apply === \"function\" ? R.apply : function ReflectApply2(target, receiver, args) {\n  return Function.prototype.apply.call(target, receiver, args);\n};\nvar ReflectOwnKeys;\nif (R && typeof R.ownKeys === \"function\") {\n  ReflectOwnKeys = R.ownKeys;\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys2(target) {\n    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys2(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {\n  return value !== value;\n};\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nevents.exports = EventEmitter;\nevents.exports.once = once2;\nEventEmitter.EventEmitter = EventEmitter;\nEventEmitter.prototype._events = void 0;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = void 0;\nvar defaultMaxListeners = 10;\nfunction checkListener(listener) {\n  if (typeof listener !== \"function\") {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\nObject.defineProperty(EventEmitter, \"defaultMaxListeners\", {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== \"number\" || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + \".\");\n    }\n    defaultMaxListeners = arg;\n  }\n});\nEventEmitter.init = function() {\n  if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {\n    this._events = /* @__PURE__ */ Object.create(null);\n    this._eventsCount = 0;\n  }\n  this._maxListeners = this._maxListeners || void 0;\n};\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== \"number\" || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + \".\");\n  }\n  this._maxListeners = n;\n  return this;\n};\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === void 0)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\nEventEmitter.prototype.emit = function emit(type2) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = type2 === \"error\";\n  var events2 = this._events;\n  if (events2 !== void 0)\n    doError = doError && events2.error === void 0;\n  else if (!doError)\n    return false;\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      throw er;\n    }\n    var err = new Error(\"Unhandled error.\" + (er ? \" (\" + er.message + \")\" : \"\"));\n    err.context = er;\n    throw err;\n  }\n  var handler = events2[type2];\n  if (handler === void 0)\n    return false;\n  if (typeof handler === \"function\") {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners2 = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners2[i], this, args);\n  }\n  return true;\n};\nfunction _addListener(target, type2, listener, prepend) {\n  var m;\n  var events2;\n  var existing;\n  checkListener(listener);\n  events2 = target._events;\n  if (events2 === void 0) {\n    events2 = target._events = /* @__PURE__ */ Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    if (events2.newListener !== void 0) {\n      target.emit(\n        \"newListener\",\n        type2,\n        listener.listener ? listener.listener : listener\n      );\n      events2 = target._events;\n    }\n    existing = events2[type2];\n  }\n  if (existing === void 0) {\n    existing = events2[type2] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === \"function\") {\n      existing = events2[type2] = prepend ? [listener, existing] : [existing, listener];\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      var w = new Error(\"Possible EventEmitter memory leak detected. \" + existing.length + \" \" + String(type2) + \" listeners added. Use emitter.setMaxListeners() to increase limit\");\n      w.name = \"MaxListenersExceededWarning\";\n      w.emitter = target;\n      w.type = type2;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n  return target;\n}\nEventEmitter.prototype.addListener = function addListener(type2, listener) {\n  return _addListener(this, type2, listener, false);\n};\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\nEventEmitter.prototype.prependListener = function prependListener(type2, listener) {\n  return _addListener(this, type2, listener, true);\n};\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\nfunction _onceWrap(target, type2, listener) {\n  var state2 = { fired: false, wrapFn: void 0, target, type: type2, listener };\n  var wrapped = onceWrapper.bind(state2);\n  wrapped.listener = listener;\n  state2.wrapFn = wrapped;\n  return wrapped;\n}\nEventEmitter.prototype.once = function once(type2, listener) {\n  checkListener(listener);\n  this.on(type2, _onceWrap(this, type2, listener));\n  return this;\n};\nEventEmitter.prototype.prependOnceListener = function prependOnceListener(type2, listener) {\n  checkListener(listener);\n  this.prependListener(type2, _onceWrap(this, type2, listener));\n  return this;\n};\nEventEmitter.prototype.removeListener = function removeListener(type2, listener) {\n  var list, events2, position, i, originalListener;\n  checkListener(listener);\n  events2 = this._events;\n  if (events2 === void 0)\n    return this;\n  list = events2[type2];\n  if (list === void 0)\n    return this;\n  if (list === listener || list.listener === listener) {\n    if (--this._eventsCount === 0)\n      this._events = /* @__PURE__ */ Object.create(null);\n    else {\n      delete events2[type2];\n      if (events2.removeListener)\n        this.emit(\"removeListener\", type2, list.listener || listener);\n    }\n  } else if (typeof list !== \"function\") {\n    position = -1;\n    for (i = list.length - 1; i >= 0; i--) {\n      if (list[i] === listener || list[i].listener === listener) {\n        originalListener = list[i].listener;\n        position = i;\n        break;\n      }\n    }\n    if (position < 0)\n      return this;\n    if (position === 0)\n      list.shift();\n    else {\n      spliceOne(list, position);\n    }\n    if (list.length === 1)\n      events2[type2] = list[0];\n    if (events2.removeListener !== void 0)\n      this.emit(\"removeListener\", type2, originalListener || listener);\n  }\n  return this;\n};\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(type2) {\n  var listeners2, events2, i;\n  events2 = this._events;\n  if (events2 === void 0)\n    return this;\n  if (events2.removeListener === void 0) {\n    if (arguments.length === 0) {\n      this._events = /* @__PURE__ */ Object.create(null);\n      this._eventsCount = 0;\n    } else if (events2[type2] !== void 0) {\n      if (--this._eventsCount === 0)\n        this._events = /* @__PURE__ */ Object.create(null);\n      else\n        delete events2[type2];\n    }\n    return this;\n  }\n  if (arguments.length === 0) {\n    var keys = Object.keys(events2);\n    var key;\n    for (i = 0; i < keys.length; ++i) {\n      key = keys[i];\n      if (key === \"removeListener\") continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners(\"removeListener\");\n    this._events = /* @__PURE__ */ Object.create(null);\n    this._eventsCount = 0;\n    return this;\n  }\n  listeners2 = events2[type2];\n  if (typeof listeners2 === \"function\") {\n    this.removeListener(type2, listeners2);\n  } else if (listeners2 !== void 0) {\n    for (i = listeners2.length - 1; i >= 0; i--) {\n      this.removeListener(type2, listeners2[i]);\n    }\n  }\n  return this;\n};\nfunction _listeners(target, type2, unwrap) {\n  var events2 = target._events;\n  if (events2 === void 0)\n    return [];\n  var evlistener = events2[type2];\n  if (evlistener === void 0)\n    return [];\n  if (typeof evlistener === \"function\")\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\nEventEmitter.prototype.listeners = function listeners(type2) {\n  return _listeners(this, type2, true);\n};\nEventEmitter.prototype.rawListeners = function rawListeners(type2) {\n  return _listeners(this, type2, false);\n};\nEventEmitter.listenerCount = function(emitter, type2) {\n  if (typeof emitter.listenerCount === \"function\") {\n    return emitter.listenerCount(type2);\n  } else {\n    return listenerCount.call(emitter, type2);\n  }\n};\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type2) {\n  var events2 = this._events;\n  if (events2 !== void 0) {\n    var evlistener = events2[type2];\n    if (typeof evlistener === \"function\") {\n      return 1;\n    } else if (evlistener !== void 0) {\n      return evlistener.length;\n    }\n  }\n  return 0;\n}\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\nfunction once2(emitter, name) {\n  return new Promise(function(resolve2, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n    function resolver() {\n      if (typeof emitter.removeListener === \"function\") {\n        emitter.removeListener(\"error\", errorListener);\n      }\n      resolve2([].slice.call(arguments));\n    }\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== \"error\") {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === \"function\") {\n    eventTargetAgnosticAddListener(emitter, \"error\", handler, flags);\n  }\n}\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === \"function\") {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === \"function\") {\n    emitter.addEventListener(name, function wrapListener(arg) {\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\nvar eventsExports = events.exports;\nvar inherits_browser = { exports: {} };\nif (typeof Object.create === \"function\") {\n  inherits_browser.exports = function inherits2(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor;\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n    }\n  };\n} else {\n  inherits_browser.exports = function inherits2(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor;\n      var TempCtor = function() {\n      };\n      TempCtor.prototype = superCtor.prototype;\n      ctor.prototype = new TempCtor();\n      ctor.prototype.constructor = ctor;\n    }\n  };\n}\nvar inherits_browserExports = inherits_browser.exports;\nfunction getDefaultExportFromCjs(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, \"default\") ? x[\"default\"] : x;\n}\nvar browser$1 = { exports: {} };\nvar process = browser$1.exports = {};\nvar cachedSetTimeout;\nvar cachedClearTimeout;\nfunction defaultSetTimout() {\n  throw new Error(\"setTimeout has not been defined\");\n}\nfunction defaultClearTimeout() {\n  throw new Error(\"clearTimeout has not been defined\");\n}\n(function() {\n  try {\n    if (typeof setTimeout === \"function\") {\n      cachedSetTimeout = setTimeout;\n    } else {\n      cachedSetTimeout = defaultSetTimout;\n    }\n  } catch (e) {\n    cachedSetTimeout = defaultSetTimout;\n  }\n  try {\n    if (typeof clearTimeout === \"function\") {\n      cachedClearTimeout = clearTimeout;\n    } else {\n      cachedClearTimeout = defaultClearTimeout;\n    }\n  } catch (e) {\n    cachedClearTimeout = defaultClearTimeout;\n  }\n})();\nfunction runTimeout(fun) {\n  if (cachedSetTimeout === setTimeout) {\n    return setTimeout(fun, 0);\n  }\n  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n    cachedSetTimeout = setTimeout;\n    return setTimeout(fun, 0);\n  }\n  try {\n    return cachedSetTimeout(fun, 0);\n  } catch (e) {\n    try {\n      return cachedSetTimeout.call(null, fun, 0);\n    } catch (e2) {\n      return cachedSetTimeout.call(this, fun, 0);\n    }\n  }\n}\nfunction runClearTimeout(marker) {\n  if (cachedClearTimeout === clearTimeout) {\n    return clearTimeout(marker);\n  }\n  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n    cachedClearTimeout = clearTimeout;\n    return clearTimeout(marker);\n  }\n  try {\n    return cachedClearTimeout(marker);\n  } catch (e) {\n    try {\n      return cachedClearTimeout.call(null, marker);\n    } catch (e2) {\n      return cachedClearTimeout.call(this, marker);\n    }\n  }\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\nfunction cleanUpNextTick() {\n  if (!draining || !currentQueue) {\n    return;\n  }\n  draining = false;\n  if (currentQueue.length) {\n    queue = currentQueue.concat(queue);\n  } else {\n    queueIndex = -1;\n  }\n  if (queue.length) {\n    drainQueue();\n  }\n}\nfunction drainQueue() {\n  if (draining) {\n    return;\n  }\n  var timeout = runTimeout(cleanUpNextTick);\n  draining = true;\n  var len = queue.length;\n  while (len) {\n    currentQueue = queue;\n    queue = [];\n    while (++queueIndex < len) {\n      if (currentQueue) {\n        currentQueue[queueIndex].run();\n      }\n    }\n    queueIndex = -1;\n    len = queue.length;\n  }\n  currentQueue = null;\n  draining = false;\n  runClearTimeout(timeout);\n}\nprocess.nextTick = function(fun) {\n  var args = new Array(arguments.length - 1);\n  if (arguments.length > 1) {\n    for (var i = 1; i < arguments.length; i++) {\n      args[i - 1] = arguments[i];\n    }\n  }\n  queue.push(new Item(fun, args));\n  if (queue.length === 1 && !draining) {\n    runTimeout(drainQueue);\n  }\n};\nfunction Item(fun, array) {\n  this.fun = fun;\n  this.array = array;\n}\nItem.prototype.run = function() {\n  this.fun.apply(null, this.array);\n};\nprocess.title = \"browser\";\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = \"\";\nprocess.versions = {};\nfunction noop() {\n}\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\nprocess.listeners = function(name) {\n  return [];\n};\nprocess.binding = function(name) {\n  throw new Error(\"process.binding is not supported\");\n};\nprocess.cwd = function() {\n  return \"/\";\n};\nprocess.chdir = function(dir) {\n  throw new Error(\"process.chdir is not supported\");\n};\nprocess.umask = function() {\n  return 0;\n};\nvar browserExports = browser$1.exports;\nconst process$1 = /* @__PURE__ */ getDefaultExportFromCjs(browserExports);\nvar streamBrowser;\nvar hasRequiredStreamBrowser;\nfunction requireStreamBrowser() {\n  if (hasRequiredStreamBrowser) return streamBrowser;\n  hasRequiredStreamBrowser = 1;\n  streamBrowser = eventsExports.EventEmitter;\n  return streamBrowser;\n}\nvar buffer = {};\nvar base64Js = {};\nvar hasRequiredBase64Js;\nfunction requireBase64Js() {\n  if (hasRequiredBase64Js) return base64Js;\n  hasRequiredBase64Js = 1;\n  base64Js.byteLength = byteLength;\n  base64Js.toByteArray = toByteArray;\n  base64Js.fromByteArray = fromByteArray;\n  var lookup = [];\n  var revLookup = [];\n  var Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\n  var code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  for (var i = 0, len = code.length; i < len; ++i) {\n    lookup[i] = code[i];\n    revLookup[code.charCodeAt(i)] = i;\n  }\n  revLookup[\"-\".charCodeAt(0)] = 62;\n  revLookup[\"_\".charCodeAt(0)] = 63;\n  function getLens(b64) {\n    var len2 = b64.length;\n    if (len2 % 4 > 0) {\n      throw new Error(\"Invalid string. Length must be a multiple of 4\");\n    }\n    var validLen = b64.indexOf(\"=\");\n    if (validLen === -1) validLen = len2;\n    var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;\n    return [validLen, placeHoldersLen];\n  }\n  function byteLength(b64) {\n    var lens = getLens(b64);\n    var validLen = lens[0];\n    var placeHoldersLen = lens[1];\n    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n  }\n  function _byteLength(b64, validLen, placeHoldersLen) {\n    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n  }\n  function toByteArray(b64) {\n    var tmp;\n    var lens = getLens(b64);\n    var validLen = lens[0];\n    var placeHoldersLen = lens[1];\n    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n    var curByte = 0;\n    var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;\n    var i2;\n    for (i2 = 0; i2 < len2; i2 += 4) {\n      tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];\n      arr[curByte++] = tmp >> 16 & 255;\n      arr[curByte++] = tmp >> 8 & 255;\n      arr[curByte++] = tmp & 255;\n    }\n    if (placeHoldersLen === 2) {\n      tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;\n      arr[curByte++] = tmp & 255;\n    }\n    if (placeHoldersLen === 1) {\n      tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;\n      arr[curByte++] = tmp >> 8 & 255;\n      arr[curByte++] = tmp & 255;\n    }\n    return arr;\n  }\n  function tripletToBase64(num) {\n    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];\n  }\n  function encodeChunk(uint8, start, end) {\n    var tmp;\n    var output = [];\n    for (var i2 = start; i2 < end; i2 += 3) {\n      tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);\n      output.push(tripletToBase64(tmp));\n    }\n    return output.join(\"\");\n  }\n  function fromByteArray(uint8) {\n    var tmp;\n    var len2 = uint8.length;\n    var extraBytes = len2 % 3;\n    var parts = [];\n    var maxChunkLength = 16383;\n    for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {\n      parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));\n    }\n    if (extraBytes === 1) {\n      tmp = uint8[len2 - 1];\n      parts.push(\n        lookup[tmp >> 2] + lookup[tmp << 4 & 63] + \"==\"\n      );\n    } else if (extraBytes === 2) {\n      tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];\n      parts.push(\n        lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + \"=\"\n      );\n    }\n    return parts.join(\"\");\n  }\n  return base64Js;\n}\nvar ieee754 = {};\n/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nvar hasRequiredIeee754;\nfunction requireIeee754() {\n  if (hasRequiredIeee754) return ieee754;\n  hasRequiredIeee754 = 1;\n  ieee754.read = function(buffer2, offset, isLE, mLen, nBytes) {\n    var e, m;\n    var eLen = nBytes * 8 - mLen - 1;\n    var eMax = (1 << eLen) - 1;\n    var eBias = eMax >> 1;\n    var nBits = -7;\n    var i = isLE ? nBytes - 1 : 0;\n    var d = isLE ? -1 : 1;\n    var s2 = buffer2[offset + i];\n    i += d;\n    e = s2 & (1 << -nBits) - 1;\n    s2 >>= -nBits;\n    nBits += eLen;\n    for (; nBits > 0; e = e * 256 + buffer2[offset + i], i += d, nBits -= 8) {\n    }\n    m = e & (1 << -nBits) - 1;\n    e >>= -nBits;\n    nBits += mLen;\n    for (; nBits > 0; m = m * 256 + buffer2[offset + i], i += d, nBits -= 8) {\n    }\n    if (e === 0) {\n      e = 1 - eBias;\n    } else if (e === eMax) {\n      return m ? NaN : (s2 ? -1 : 1) * Infinity;\n    } else {\n      m = m + Math.pow(2, mLen);\n      e = e - eBias;\n    }\n    return (s2 ? -1 : 1) * m * Math.pow(2, e - mLen);\n  };\n  ieee754.write = function(buffer2, value, offset, isLE, mLen, nBytes) {\n    var e, m, c;\n    var eLen = nBytes * 8 - mLen - 1;\n    var eMax = (1 << eLen) - 1;\n    var eBias = eMax >> 1;\n    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n    var i = isLE ? 0 : nBytes - 1;\n    var d = isLE ? 1 : -1;\n    var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n    value = Math.abs(value);\n    if (isNaN(value) || value === Infinity) {\n      m = isNaN(value) ? 1 : 0;\n      e = eMax;\n    } else {\n      e = Math.floor(Math.log(value) / Math.LN2);\n      if (value * (c = Math.pow(2, -e)) < 1) {\n        e--;\n        c *= 2;\n      }\n      if (e + eBias >= 1) {\n        value += rt / c;\n      } else {\n        value += rt * Math.pow(2, 1 - eBias);\n      }\n      if (value * c >= 2) {\n        e++;\n        c /= 2;\n      }\n      if (e + eBias >= eMax) {\n        m = 0;\n        e = eMax;\n      } else if (e + eBias >= 1) {\n        m = (value * c - 1) * Math.pow(2, mLen);\n        e = e + eBias;\n      } else {\n        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n        e = 0;\n      }\n    }\n    for (; mLen >= 8; buffer2[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {\n    }\n    e = e << mLen | m;\n    eLen += mLen;\n    for (; eLen > 0; buffer2[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {\n    }\n    buffer2[offset + i - d] |= s2 * 128;\n  };\n  return ieee754;\n}\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\nvar hasRequiredBuffer;\nfunction requireBuffer() {\n  if (hasRequiredBuffer) return buffer;\n  hasRequiredBuffer = 1;\n  (function(exports) {\n    var base64 = requireBase64Js();\n    var ieee7542 = requireIeee754();\n    var customInspectSymbol = typeof Symbol === \"function\" && typeof Symbol[\"for\"] === \"function\" ? Symbol[\"for\"](\"nodejs.util.inspect.custom\") : null;\n    exports.Buffer = Buffer2;\n    exports.SlowBuffer = SlowBuffer;\n    exports.INSPECT_MAX_BYTES = 50;\n    var K_MAX_LENGTH = 2147483647;\n    exports.kMaxLength = K_MAX_LENGTH;\n    Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();\n    if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== \"undefined\" && typeof console.error === \"function\") {\n      console.error(\n        \"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\"\n      );\n    }\n    function typedArraySupport() {\n      try {\n        var arr = new Uint8Array(1);\n        var proto = { foo: function() {\n          return 42;\n        } };\n        Object.setPrototypeOf(proto, Uint8Array.prototype);\n        Object.setPrototypeOf(arr, proto);\n        return arr.foo() === 42;\n      } catch (e) {\n        return false;\n      }\n    }\n    Object.defineProperty(Buffer2.prototype, \"parent\", {\n      enumerable: true,\n      get: function() {\n        if (!Buffer2.isBuffer(this)) return void 0;\n        return this.buffer;\n      }\n    });\n    Object.defineProperty(Buffer2.prototype, \"offset\", {\n      enumerable: true,\n      get: function() {\n        if (!Buffer2.isBuffer(this)) return void 0;\n        return this.byteOffset;\n      }\n    });\n    function createBuffer(length) {\n      if (length > K_MAX_LENGTH) {\n        throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n      }\n      var buf = new Uint8Array(length);\n      Object.setPrototypeOf(buf, Buffer2.prototype);\n      return buf;\n    }\n    function Buffer2(arg, encodingOrOffset, length) {\n      if (typeof arg === \"number\") {\n        if (typeof encodingOrOffset === \"string\") {\n          throw new TypeError(\n            'The \"string\" argument must be of type string. Received type number'\n          );\n        }\n        return allocUnsafe(arg);\n      }\n      return from(arg, encodingOrOffset, length);\n    }\n    Buffer2.poolSize = 8192;\n    function from(value, encodingOrOffset, length) {\n      if (typeof value === \"string\") {\n        return fromString(value, encodingOrOffset);\n      }\n      if (ArrayBuffer.isView(value)) {\n        return fromArrayView(value);\n      }\n      if (value == null) {\n        throw new TypeError(\n          \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value\n        );\n      }\n      if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {\n        return fromArrayBuffer(value, encodingOrOffset, length);\n      }\n      if (typeof SharedArrayBuffer !== \"undefined\" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {\n        return fromArrayBuffer(value, encodingOrOffset, length);\n      }\n      if (typeof value === \"number\") {\n        throw new TypeError(\n          'The \"value\" argument must not be of type number. Received type number'\n        );\n      }\n      var valueOf = value.valueOf && value.valueOf();\n      if (valueOf != null && valueOf !== value) {\n        return Buffer2.from(valueOf, encodingOrOffset, length);\n      }\n      var b = fromObject(value);\n      if (b) return b;\n      if (typeof Symbol !== \"undefined\" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === \"function\") {\n        return Buffer2.from(\n          value[Symbol.toPrimitive](\"string\"),\n          encodingOrOffset,\n          length\n        );\n      }\n      throw new TypeError(\n        \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value\n      );\n    }\n    Buffer2.from = function(value, encodingOrOffset, length) {\n      return from(value, encodingOrOffset, length);\n    };\n    Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);\n    Object.setPrototypeOf(Buffer2, Uint8Array);\n    function assertSize(size) {\n      if (typeof size !== \"number\") {\n        throw new TypeError('\"size\" argument must be of type number');\n      } else if (size < 0) {\n        throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n      }\n    }\n    function alloc(size, fill, encoding) {\n      assertSize(size);\n      if (size <= 0) {\n        return createBuffer(size);\n      }\n      if (fill !== void 0) {\n        return typeof encoding === \"string\" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\n      }\n      return createBuffer(size);\n    }\n    Buffer2.alloc = function(size, fill, encoding) {\n      return alloc(size, fill, encoding);\n    };\n    function allocUnsafe(size) {\n      assertSize(size);\n      return createBuffer(size < 0 ? 0 : checked(size) | 0);\n    }\n    Buffer2.allocUnsafe = function(size) {\n      return allocUnsafe(size);\n    };\n    Buffer2.allocUnsafeSlow = function(size) {\n      return allocUnsafe(size);\n    };\n    function fromString(string, encoding) {\n      if (typeof encoding !== \"string\" || encoding === \"\") {\n        encoding = \"utf8\";\n      }\n      if (!Buffer2.isEncoding(encoding)) {\n        throw new TypeError(\"Unknown encoding: \" + encoding);\n      }\n      var length = byteLength(string, encoding) | 0;\n      var buf = createBuffer(length);\n      var actual = buf.write(string, encoding);\n      if (actual !== length) {\n        buf = buf.slice(0, actual);\n      }\n      return buf;\n    }\n    function fromArrayLike(array) {\n      var length = array.length < 0 ? 0 : checked(array.length) | 0;\n      var buf = createBuffer(length);\n      for (var i = 0; i < length; i += 1) {\n        buf[i] = array[i] & 255;\n      }\n      return buf;\n    }\n    function fromArrayView(arrayView) {\n      if (isInstance(arrayView, Uint8Array)) {\n        var copy = new Uint8Array(arrayView);\n        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);\n      }\n      return fromArrayLike(arrayView);\n    }\n    function fromArrayBuffer(array, byteOffset, length) {\n      if (byteOffset < 0 || array.byteLength < byteOffset) {\n        throw new RangeError('\"offset\" is outside of buffer bounds');\n      }\n      if (array.byteLength < byteOffset + (length || 0)) {\n        throw new RangeError('\"length\" is outside of buffer bounds');\n      }\n      var buf;\n      if (byteOffset === void 0 && length === void 0) {\n        buf = new Uint8Array(array);\n      } else if (length === void 0) {\n        buf = new Uint8Array(array, byteOffset);\n      } else {\n        buf = new Uint8Array(array, byteOffset, length);\n      }\n      Object.setPrototypeOf(buf, Buffer2.prototype);\n      return buf;\n    }\n    function fromObject(obj) {\n      if (Buffer2.isBuffer(obj)) {\n        var len = checked(obj.length) | 0;\n        var buf = createBuffer(len);\n        if (buf.length === 0) {\n          return buf;\n        }\n        obj.copy(buf, 0, 0, len);\n        return buf;\n      }\n      if (obj.length !== void 0) {\n        if (typeof obj.length !== \"number\" || numberIsNaN(obj.length)) {\n          return createBuffer(0);\n        }\n        return fromArrayLike(obj);\n      }\n      if (obj.type === \"Buffer\" && Array.isArray(obj.data)) {\n        return fromArrayLike(obj.data);\n      }\n    }\n    function checked(length) {\n      if (length >= K_MAX_LENGTH) {\n        throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + K_MAX_LENGTH.toString(16) + \" bytes\");\n      }\n      return length | 0;\n    }\n    function SlowBuffer(length) {\n      if (+length != length) {\n        length = 0;\n      }\n      return Buffer2.alloc(+length);\n    }\n    Buffer2.isBuffer = function isBuffer(b) {\n      return b != null && b._isBuffer === true && b !== Buffer2.prototype;\n    };\n    Buffer2.compare = function compare(a, b) {\n      if (isInstance(a, Uint8Array)) a = Buffer2.from(a, a.offset, a.byteLength);\n      if (isInstance(b, Uint8Array)) b = Buffer2.from(b, b.offset, b.byteLength);\n      if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {\n        throw new TypeError(\n          'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n        );\n      }\n      if (a === b) return 0;\n      var x = a.length;\n      var y = b.length;\n      for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n        if (a[i] !== b[i]) {\n          x = a[i];\n          y = b[i];\n          break;\n        }\n      }\n      if (x < y) return -1;\n      if (y < x) return 1;\n      return 0;\n    };\n    Buffer2.isEncoding = function isEncoding(encoding) {\n      switch (String(encoding).toLowerCase()) {\n        case \"hex\":\n        case \"utf8\":\n        case \"utf-8\":\n        case \"ascii\":\n        case \"latin1\":\n        case \"binary\":\n        case \"base64\":\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n          return true;\n        default:\n          return false;\n      }\n    };\n    Buffer2.concat = function concat(list, length) {\n      if (!Array.isArray(list)) {\n        throw new TypeError('\"list\" argument must be an Array of Buffers');\n      }\n      if (list.length === 0) {\n        return Buffer2.alloc(0);\n      }\n      var i;\n      if (length === void 0) {\n        length = 0;\n        for (i = 0; i < list.length; ++i) {\n          length += list[i].length;\n        }\n      }\n      var buffer2 = Buffer2.allocUnsafe(length);\n      var pos = 0;\n      for (i = 0; i < list.length; ++i) {\n        var buf = list[i];\n        if (isInstance(buf, Uint8Array)) {\n          if (pos + buf.length > buffer2.length) {\n            Buffer2.from(buf).copy(buffer2, pos);\n          } else {\n            Uint8Array.prototype.set.call(\n              buffer2,\n              buf,\n              pos\n            );\n          }\n        } else if (!Buffer2.isBuffer(buf)) {\n          throw new TypeError('\"list\" argument must be an Array of Buffers');\n        } else {\n          buf.copy(buffer2, pos);\n        }\n        pos += buf.length;\n      }\n      return buffer2;\n    };\n    function byteLength(string, encoding) {\n      if (Buffer2.isBuffer(string)) {\n        return string.length;\n      }\n      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n        return string.byteLength;\n      }\n      if (typeof string !== \"string\") {\n        throw new TypeError(\n          'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string\n        );\n      }\n      var len = string.length;\n      var mustMatch = arguments.length > 2 && arguments[2] === true;\n      if (!mustMatch && len === 0) return 0;\n      var loweredCase = false;\n      for (; ; ) {\n        switch (encoding) {\n          case \"ascii\":\n          case \"latin1\":\n          case \"binary\":\n            return len;\n          case \"utf8\":\n          case \"utf-8\":\n            return utf8ToBytes(string).length;\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return len * 2;\n          case \"hex\":\n            return len >>> 1;\n          case \"base64\":\n            return base64ToBytes(string).length;\n          default:\n            if (loweredCase) {\n              return mustMatch ? -1 : utf8ToBytes(string).length;\n            }\n            encoding = (\"\" + encoding).toLowerCase();\n            loweredCase = true;\n        }\n      }\n    }\n    Buffer2.byteLength = byteLength;\n    function slowToString(encoding, start, end) {\n      var loweredCase = false;\n      if (start === void 0 || start < 0) {\n        start = 0;\n      }\n      if (start > this.length) {\n        return \"\";\n      }\n      if (end === void 0 || end > this.length) {\n        end = this.length;\n      }\n      if (end <= 0) {\n        return \"\";\n      }\n      end >>>= 0;\n      start >>>= 0;\n      if (end <= start) {\n        return \"\";\n      }\n      if (!encoding) encoding = \"utf8\";\n      while (true) {\n        switch (encoding) {\n          case \"hex\":\n            return hexSlice(this, start, end);\n          case \"utf8\":\n          case \"utf-8\":\n            return utf8Slice(this, start, end);\n          case \"ascii\":\n            return asciiSlice(this, start, end);\n          case \"latin1\":\n          case \"binary\":\n            return latin1Slice(this, start, end);\n          case \"base64\":\n            return base64Slice(this, start, end);\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return utf16leSlice(this, start, end);\n          default:\n            if (loweredCase) throw new TypeError(\"Unknown encoding: \" + encoding);\n            encoding = (encoding + \"\").toLowerCase();\n            loweredCase = true;\n        }\n      }\n    }\n    Buffer2.prototype._isBuffer = true;\n    function swap(b, n, m) {\n      var i = b[n];\n      b[n] = b[m];\n      b[m] = i;\n    }\n    Buffer2.prototype.swap16 = function swap16() {\n      var len = this.length;\n      if (len % 2 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n      }\n      for (var i = 0; i < len; i += 2) {\n        swap(this, i, i + 1);\n      }\n      return this;\n    };\n    Buffer2.prototype.swap32 = function swap32() {\n      var len = this.length;\n      if (len % 4 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n      }\n      for (var i = 0; i < len; i += 4) {\n        swap(this, i, i + 3);\n        swap(this, i + 1, i + 2);\n      }\n      return this;\n    };\n    Buffer2.prototype.swap64 = function swap64() {\n      var len = this.length;\n      if (len % 8 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n      }\n      for (var i = 0; i < len; i += 8) {\n        swap(this, i, i + 7);\n        swap(this, i + 1, i + 6);\n        swap(this, i + 2, i + 5);\n        swap(this, i + 3, i + 4);\n      }\n      return this;\n    };\n    Buffer2.prototype.toString = function toString() {\n      var length = this.length;\n      if (length === 0) return \"\";\n      if (arguments.length === 0) return utf8Slice(this, 0, length);\n      return slowToString.apply(this, arguments);\n    };\n    Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;\n    Buffer2.prototype.equals = function equals(b) {\n      if (!Buffer2.isBuffer(b)) throw new TypeError(\"Argument must be a Buffer\");\n      if (this === b) return true;\n      return Buffer2.compare(this, b) === 0;\n    };\n    Buffer2.prototype.inspect = function inspect() {\n      var str = \"\";\n      var max = exports.INSPECT_MAX_BYTES;\n      str = this.toString(\"hex\", 0, max).replace(/(.{2})/g, \"$1 \").trim();\n      if (this.length > max) str += \" ... \";\n      return \"<Buffer \" + str + \">\";\n    };\n    if (customInspectSymbol) {\n      Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;\n    }\n    Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n      if (isInstance(target, Uint8Array)) {\n        target = Buffer2.from(target, target.offset, target.byteLength);\n      }\n      if (!Buffer2.isBuffer(target)) {\n        throw new TypeError(\n          'The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target\n        );\n      }\n      if (start === void 0) {\n        start = 0;\n      }\n      if (end === void 0) {\n        end = target ? target.length : 0;\n      }\n      if (thisStart === void 0) {\n        thisStart = 0;\n      }\n      if (thisEnd === void 0) {\n        thisEnd = this.length;\n      }\n      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n        throw new RangeError(\"out of range index\");\n      }\n      if (thisStart >= thisEnd && start >= end) {\n        return 0;\n      }\n      if (thisStart >= thisEnd) {\n        return -1;\n      }\n      if (start >= end) {\n        return 1;\n      }\n      start >>>= 0;\n      end >>>= 0;\n      thisStart >>>= 0;\n      thisEnd >>>= 0;\n      if (this === target) return 0;\n      var x = thisEnd - thisStart;\n      var y = end - start;\n      var len = Math.min(x, y);\n      var thisCopy = this.slice(thisStart, thisEnd);\n      var targetCopy = target.slice(start, end);\n      for (var i = 0; i < len; ++i) {\n        if (thisCopy[i] !== targetCopy[i]) {\n          x = thisCopy[i];\n          y = targetCopy[i];\n          break;\n        }\n      }\n      if (x < y) return -1;\n      if (y < x) return 1;\n      return 0;\n    };\n    function bidirectionalIndexOf(buffer2, val, byteOffset, encoding, dir) {\n      if (buffer2.length === 0) return -1;\n      if (typeof byteOffset === \"string\") {\n        encoding = byteOffset;\n        byteOffset = 0;\n      } else if (byteOffset > 2147483647) {\n        byteOffset = 2147483647;\n      } else if (byteOffset < -2147483648) {\n        byteOffset = -2147483648;\n      }\n      byteOffset = +byteOffset;\n      if (numberIsNaN(byteOffset)) {\n        byteOffset = dir ? 0 : buffer2.length - 1;\n      }\n      if (byteOffset < 0) byteOffset = buffer2.length + byteOffset;\n      if (byteOffset >= buffer2.length) {\n        if (dir) return -1;\n        else byteOffset = buffer2.length - 1;\n      } else if (byteOffset < 0) {\n        if (dir) byteOffset = 0;\n        else return -1;\n      }\n      if (typeof val === \"string\") {\n        val = Buffer2.from(val, encoding);\n      }\n      if (Buffer2.isBuffer(val)) {\n        if (val.length === 0) {\n          return -1;\n        }\n        return arrayIndexOf(buffer2, val, byteOffset, encoding, dir);\n      } else if (typeof val === \"number\") {\n        val = val & 255;\n        if (typeof Uint8Array.prototype.indexOf === \"function\") {\n          if (dir) {\n            return Uint8Array.prototype.indexOf.call(buffer2, val, byteOffset);\n          } else {\n            return Uint8Array.prototype.lastIndexOf.call(buffer2, val, byteOffset);\n          }\n        }\n        return arrayIndexOf(buffer2, [val], byteOffset, encoding, dir);\n      }\n      throw new TypeError(\"val must be string, number or Buffer\");\n    }\n    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n      var indexSize = 1;\n      var arrLength = arr.length;\n      var valLength = val.length;\n      if (encoding !== void 0) {\n        encoding = String(encoding).toLowerCase();\n        if (encoding === \"ucs2\" || encoding === \"ucs-2\" || encoding === \"utf16le\" || encoding === \"utf-16le\") {\n          if (arr.length < 2 || val.length < 2) {\n            return -1;\n          }\n          indexSize = 2;\n          arrLength /= 2;\n          valLength /= 2;\n          byteOffset /= 2;\n        }\n      }\n      function read(buf, i2) {\n        if (indexSize === 1) {\n          return buf[i2];\n        } else {\n          return buf.readUInt16BE(i2 * indexSize);\n        }\n      }\n      var i;\n      if (dir) {\n        var foundIndex = -1;\n        for (i = byteOffset; i < arrLength; i++) {\n          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n            if (foundIndex === -1) foundIndex = i;\n            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n          } else {\n            if (foundIndex !== -1) i -= i - foundIndex;\n            foundIndex = -1;\n          }\n        }\n      } else {\n        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n        for (i = byteOffset; i >= 0; i--) {\n          var found = true;\n          for (var j = 0; j < valLength; j++) {\n            if (read(arr, i + j) !== read(val, j)) {\n              found = false;\n              break;\n            }\n          }\n          if (found) return i;\n        }\n      }\n      return -1;\n    }\n    Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {\n      return this.indexOf(val, byteOffset, encoding) !== -1;\n    };\n    Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n    };\n    Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n    };\n    function hexWrite(buf, string, offset, length) {\n      offset = Number(offset) || 0;\n      var remaining = buf.length - offset;\n      if (!length) {\n        length = remaining;\n      } else {\n        length = Number(length);\n        if (length > remaining) {\n          length = remaining;\n        }\n      }\n      var strLen = string.length;\n      if (length > strLen / 2) {\n        length = strLen / 2;\n      }\n      for (var i = 0; i < length; ++i) {\n        var parsed = parseInt(string.substr(i * 2, 2), 16);\n        if (numberIsNaN(parsed)) return i;\n        buf[offset + i] = parsed;\n      }\n      return i;\n    }\n    function utf8Write(buf, string, offset, length) {\n      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n    }\n    function asciiWrite(buf, string, offset, length) {\n      return blitBuffer(asciiToBytes(string), buf, offset, length);\n    }\n    function base64Write(buf, string, offset, length) {\n      return blitBuffer(base64ToBytes(string), buf, offset, length);\n    }\n    function ucs2Write(buf, string, offset, length) {\n      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n    }\n    Buffer2.prototype.write = function write(string, offset, length, encoding) {\n      if (offset === void 0) {\n        encoding = \"utf8\";\n        length = this.length;\n        offset = 0;\n      } else if (length === void 0 && typeof offset === \"string\") {\n        encoding = offset;\n        length = this.length;\n        offset = 0;\n      } else if (isFinite(offset)) {\n        offset = offset >>> 0;\n        if (isFinite(length)) {\n          length = length >>> 0;\n          if (encoding === void 0) encoding = \"utf8\";\n        } else {\n          encoding = length;\n          length = void 0;\n        }\n      } else {\n        throw new Error(\n          \"Buffer.write(string, encoding, offset[, length]) is no longer supported\"\n        );\n      }\n      var remaining = this.length - offset;\n      if (length === void 0 || length > remaining) length = remaining;\n      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n        throw new RangeError(\"Attempt to write outside buffer bounds\");\n      }\n      if (!encoding) encoding = \"utf8\";\n      var loweredCase = false;\n      for (; ; ) {\n        switch (encoding) {\n          case \"hex\":\n            return hexWrite(this, string, offset, length);\n          case \"utf8\":\n          case \"utf-8\":\n            return utf8Write(this, string, offset, length);\n          case \"ascii\":\n          case \"latin1\":\n          case \"binary\":\n            return asciiWrite(this, string, offset, length);\n          case \"base64\":\n            return base64Write(this, string, offset, length);\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return ucs2Write(this, string, offset, length);\n          default:\n            if (loweredCase) throw new TypeError(\"Unknown encoding: \" + encoding);\n            encoding = (\"\" + encoding).toLowerCase();\n            loweredCase = true;\n        }\n      }\n    };\n    Buffer2.prototype.toJSON = function toJSON() {\n      return {\n        type: \"Buffer\",\n        data: Array.prototype.slice.call(this._arr || this, 0)\n      };\n    };\n    function base64Slice(buf, start, end) {\n      if (start === 0 && end === buf.length) {\n        return base64.fromByteArray(buf);\n      } else {\n        return base64.fromByteArray(buf.slice(start, end));\n      }\n    }\n    function utf8Slice(buf, start, end) {\n      end = Math.min(buf.length, end);\n      var res = [];\n      var i = start;\n      while (i < end) {\n        var firstByte = buf[i];\n        var codePoint = null;\n        var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\n        if (i + bytesPerSequence <= end) {\n          var secondByte, thirdByte, fourthByte, tempCodePoint;\n          switch (bytesPerSequence) {\n            case 1:\n              if (firstByte < 128) {\n                codePoint = firstByte;\n              }\n              break;\n            case 2:\n              secondByte = buf[i + 1];\n              if ((secondByte & 192) === 128) {\n                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\n                if (tempCodePoint > 127) {\n                  codePoint = tempCodePoint;\n                }\n              }\n              break;\n            case 3:\n              secondByte = buf[i + 1];\n              thirdByte = buf[i + 2];\n              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\n                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\n                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\n                  codePoint = tempCodePoint;\n                }\n              }\n              break;\n            case 4:\n              secondByte = buf[i + 1];\n              thirdByte = buf[i + 2];\n              fourthByte = buf[i + 3];\n              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\n                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\n                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\n                  codePoint = tempCodePoint;\n                }\n              }\n          }\n        }\n        if (codePoint === null) {\n          codePoint = 65533;\n          bytesPerSequence = 1;\n        } else if (codePoint > 65535) {\n          codePoint -= 65536;\n          res.push(codePoint >>> 10 & 1023 | 55296);\n          codePoint = 56320 | codePoint & 1023;\n        }\n        res.push(codePoint);\n        i += bytesPerSequence;\n      }\n      return decodeCodePointsArray(res);\n    }\n    var MAX_ARGUMENTS_LENGTH = 4096;\n    function decodeCodePointsArray(codePoints) {\n      var len = codePoints.length;\n      if (len <= MAX_ARGUMENTS_LENGTH) {\n        return String.fromCharCode.apply(String, codePoints);\n      }\n      var res = \"\";\n      var i = 0;\n      while (i < len) {\n        res += String.fromCharCode.apply(\n          String,\n          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n        );\n      }\n      return res;\n    }\n    function asciiSlice(buf, start, end) {\n      var ret = \"\";\n      end = Math.min(buf.length, end);\n      for (var i = start; i < end; ++i) {\n        ret += String.fromCharCode(buf[i] & 127);\n      }\n      return ret;\n    }\n    function latin1Slice(buf, start, end) {\n      var ret = \"\";\n      end = Math.min(buf.length, end);\n      for (var i = start; i < end; ++i) {\n        ret += String.fromCharCode(buf[i]);\n      }\n      return ret;\n    }\n    function hexSlice(buf, start, end) {\n      var len = buf.length;\n      if (!start || start < 0) start = 0;\n      if (!end || end < 0 || end > len) end = len;\n      var out = \"\";\n      for (var i = start; i < end; ++i) {\n        out += hexSliceLookupTable[buf[i]];\n      }\n      return out;\n    }\n    function utf16leSlice(buf, start, end) {\n      var bytes = buf.slice(start, end);\n      var res = \"\";\n      for (var i = 0; i < bytes.length - 1; i += 2) {\n        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n      }\n      return res;\n    }\n    Buffer2.prototype.slice = function slice(start, end) {\n      var len = this.length;\n      start = ~~start;\n      end = end === void 0 ? len : ~~end;\n      if (start < 0) {\n        start += len;\n        if (start < 0) start = 0;\n      } else if (start > len) {\n        start = len;\n      }\n      if (end < 0) {\n        end += len;\n        if (end < 0) end = 0;\n      } else if (end > len) {\n        end = len;\n      }\n      if (end < start) end = start;\n      var newBuf = this.subarray(start, end);\n      Object.setPrototypeOf(newBuf, Buffer2.prototype);\n      return newBuf;\n    };\n    function checkOffset(offset, ext, length) {\n      if (offset % 1 !== 0 || offset < 0) throw new RangeError(\"offset is not uint\");\n      if (offset + ext > length) throw new RangeError(\"Trying to access beyond buffer length\");\n    }\n    Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) checkOffset(offset, byteLength2, this.length);\n      var val = this[offset];\n      var mul = 1;\n      var i = 0;\n      while (++i < byteLength2 && (mul *= 256)) {\n        val += this[offset + i] * mul;\n      }\n      return val;\n    };\n    Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) {\n        checkOffset(offset, byteLength2, this.length);\n      }\n      var val = this[offset + --byteLength2];\n      var mul = 1;\n      while (byteLength2 > 0 && (mul *= 256)) {\n        val += this[offset + --byteLength2] * mul;\n      }\n      return val;\n    };\n    Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 1, this.length);\n      return this[offset];\n    };\n    Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 2, this.length);\n      return this[offset] | this[offset + 1] << 8;\n    };\n    Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 2, this.length);\n      return this[offset] << 8 | this[offset + 1];\n    };\n    Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 4, this.length);\n      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;\n    };\n    Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 4, this.length);\n      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n    };\n    Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) checkOffset(offset, byteLength2, this.length);\n      var val = this[offset];\n      var mul = 1;\n      var i = 0;\n      while (++i < byteLength2 && (mul *= 256)) {\n        val += this[offset + i] * mul;\n      }\n      mul *= 128;\n      if (val >= mul) val -= Math.pow(2, 8 * byteLength2);\n      return val;\n    };\n    Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) checkOffset(offset, byteLength2, this.length);\n      var i = byteLength2;\n      var mul = 1;\n      var val = this[offset + --i];\n      while (i > 0 && (mul *= 256)) {\n        val += this[offset + --i] * mul;\n      }\n      mul *= 128;\n      if (val >= mul) val -= Math.pow(2, 8 * byteLength2);\n      return val;\n    };\n    Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 1, this.length);\n      if (!(this[offset] & 128)) return this[offset];\n      return (255 - this[offset] + 1) * -1;\n    };\n    Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 2, this.length);\n      var val = this[offset] | this[offset + 1] << 8;\n      return val & 32768 ? val | 4294901760 : val;\n    };\n    Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 2, this.length);\n      var val = this[offset + 1] | this[offset] << 8;\n      return val & 32768 ? val | 4294901760 : val;\n    };\n    Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 4, this.length);\n      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n    };\n    Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 4, this.length);\n      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n    };\n    Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 4, this.length);\n      return ieee7542.read(this, offset, true, 23, 4);\n    };\n    Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 4, this.length);\n      return ieee7542.read(this, offset, false, 23, 4);\n    };\n    Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 8, this.length);\n      return ieee7542.read(this, offset, true, 52, 8);\n    };\n    Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 8, this.length);\n      return ieee7542.read(this, offset, false, 52, 8);\n    };\n    function checkInt(buf, value, offset, ext, max, min) {\n      if (!Buffer2.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n      if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n      if (offset + ext > buf.length) throw new RangeError(\"Index out of range\");\n    }\n    Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) {\n        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n        checkInt(this, value, offset, byteLength2, maxBytes, 0);\n      }\n      var mul = 1;\n      var i = 0;\n      this[offset] = value & 255;\n      while (++i < byteLength2 && (mul *= 256)) {\n        this[offset + i] = value / mul & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) {\n        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n        checkInt(this, value, offset, byteLength2, maxBytes, 0);\n      }\n      var i = byteLength2 - 1;\n      var mul = 1;\n      this[offset + i] = value & 255;\n      while (--i >= 0 && (mul *= 256)) {\n        this[offset + i] = value / mul & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) checkInt(this, value, offset, 1, 255, 0);\n      this[offset] = value & 255;\n      return offset + 1;\n    };\n    Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);\n      this[offset] = value & 255;\n      this[offset + 1] = value >>> 8;\n      return offset + 2;\n    };\n    Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);\n      this[offset] = value >>> 8;\n      this[offset + 1] = value & 255;\n      return offset + 2;\n    };\n    Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);\n      this[offset + 3] = value >>> 24;\n      this[offset + 2] = value >>> 16;\n      this[offset + 1] = value >>> 8;\n      this[offset] = value & 255;\n      return offset + 4;\n    };\n    Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);\n      this[offset] = value >>> 24;\n      this[offset + 1] = value >>> 16;\n      this[offset + 2] = value >>> 8;\n      this[offset + 3] = value & 255;\n      return offset + 4;\n    };\n    Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        var limit = Math.pow(2, 8 * byteLength2 - 1);\n        checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n      }\n      var i = 0;\n      var mul = 1;\n      var sub = 0;\n      this[offset] = value & 255;\n      while (++i < byteLength2 && (mul *= 256)) {\n        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n          sub = 1;\n        }\n        this[offset + i] = (value / mul >> 0) - sub & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        var limit = Math.pow(2, 8 * byteLength2 - 1);\n        checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n      }\n      var i = byteLength2 - 1;\n      var mul = 1;\n      var sub = 0;\n      this[offset + i] = value & 255;\n      while (--i >= 0 && (mul *= 256)) {\n        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n          sub = 1;\n        }\n        this[offset + i] = (value / mul >> 0) - sub & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) checkInt(this, value, offset, 1, 127, -128);\n      if (value < 0) value = 255 + value + 1;\n      this[offset] = value & 255;\n      return offset + 1;\n    };\n    Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);\n      this[offset] = value & 255;\n      this[offset + 1] = value >>> 8;\n      return offset + 2;\n    };\n    Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);\n      this[offset] = value >>> 8;\n      this[offset + 1] = value & 255;\n      return offset + 2;\n    };\n    Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);\n      this[offset] = value & 255;\n      this[offset + 1] = value >>> 8;\n      this[offset + 2] = value >>> 16;\n      this[offset + 3] = value >>> 24;\n      return offset + 4;\n    };\n    Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);\n      if (value < 0) value = 4294967295 + value + 1;\n      this[offset] = value >>> 24;\n      this[offset + 1] = value >>> 16;\n      this[offset + 2] = value >>> 8;\n      this[offset + 3] = value & 255;\n      return offset + 4;\n    };\n    function checkIEEE754(buf, value, offset, ext, max, min) {\n      if (offset + ext > buf.length) throw new RangeError(\"Index out of range\");\n      if (offset < 0) throw new RangeError(\"Index out of range\");\n    }\n    function writeFloat(buf, value, offset, littleEndian, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        checkIEEE754(buf, value, offset, 4);\n      }\n      ieee7542.write(buf, value, offset, littleEndian, 23, 4);\n      return offset + 4;\n    }\n    Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n      return writeFloat(this, value, offset, true, noAssert);\n    };\n    Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n      return writeFloat(this, value, offset, false, noAssert);\n    };\n    function writeDouble(buf, value, offset, littleEndian, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        checkIEEE754(buf, value, offset, 8);\n      }\n      ieee7542.write(buf, value, offset, littleEndian, 52, 8);\n      return offset + 8;\n    }\n    Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n      return writeDouble(this, value, offset, true, noAssert);\n    };\n    Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n      return writeDouble(this, value, offset, false, noAssert);\n    };\n    Buffer2.prototype.copy = function copy(target, targetStart, start, end) {\n      if (!Buffer2.isBuffer(target)) throw new TypeError(\"argument should be a Buffer\");\n      if (!start) start = 0;\n      if (!end && end !== 0) end = this.length;\n      if (targetStart >= target.length) targetStart = target.length;\n      if (!targetStart) targetStart = 0;\n      if (end > 0 && end < start) end = start;\n      if (end === start) return 0;\n      if (target.length === 0 || this.length === 0) return 0;\n      if (targetStart < 0) {\n        throw new RangeError(\"targetStart out of bounds\");\n      }\n      if (start < 0 || start >= this.length) throw new RangeError(\"Index out of range\");\n      if (end < 0) throw new RangeError(\"sourceEnd out of bounds\");\n      if (end > this.length) end = this.length;\n      if (target.length - targetStart < end - start) {\n        end = target.length - targetStart + start;\n      }\n      var len = end - start;\n      if (this === target && typeof Uint8Array.prototype.copyWithin === \"function\") {\n        this.copyWithin(targetStart, start, end);\n      } else {\n        Uint8Array.prototype.set.call(\n          target,\n          this.subarray(start, end),\n          targetStart\n        );\n      }\n      return len;\n    };\n    Buffer2.prototype.fill = function fill(val, start, end, encoding) {\n      if (typeof val === \"string\") {\n        if (typeof start === \"string\") {\n          encoding = start;\n          start = 0;\n          end = this.length;\n        } else if (typeof end === \"string\") {\n          encoding = end;\n          end = this.length;\n        }\n        if (encoding !== void 0 && typeof encoding !== \"string\") {\n          throw new TypeError(\"encoding must be a string\");\n        }\n        if (typeof encoding === \"string\" && !Buffer2.isEncoding(encoding)) {\n          throw new TypeError(\"Unknown encoding: \" + encoding);\n        }\n        if (val.length === 1) {\n          var code = val.charCodeAt(0);\n          if (encoding === \"utf8\" && code < 128 || encoding === \"latin1\") {\n            val = code;\n          }\n        }\n      } else if (typeof val === \"number\") {\n        val = val & 255;\n      } else if (typeof val === \"boolean\") {\n        val = Number(val);\n      }\n      if (start < 0 || this.length < start || this.length < end) {\n        throw new RangeError(\"Out of range index\");\n      }\n      if (end <= start) {\n        return this;\n      }\n      start = start >>> 0;\n      end = end === void 0 ? this.length : end >>> 0;\n      if (!val) val = 0;\n      var i;\n      if (typeof val === \"number\") {\n        for (i = start; i < end; ++i) {\n          this[i] = val;\n        }\n      } else {\n        var bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);\n        var len = bytes.length;\n        if (len === 0) {\n          throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n        }\n        for (i = 0; i < end - start; ++i) {\n          this[i + start] = bytes[i % len];\n        }\n      }\n      return this;\n    };\n    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\n    function base64clean(str) {\n      str = str.split(\"=\")[0];\n      str = str.trim().replace(INVALID_BASE64_RE, \"\");\n      if (str.length < 2) return \"\";\n      while (str.length % 4 !== 0) {\n        str = str + \"=\";\n      }\n      return str;\n    }\n    function utf8ToBytes(string, units) {\n      units = units || Infinity;\n      var codePoint;\n      var length = string.length;\n      var leadSurrogate = null;\n      var bytes = [];\n      for (var i = 0; i < length; ++i) {\n        codePoint = string.charCodeAt(i);\n        if (codePoint > 55295 && codePoint < 57344) {\n          if (!leadSurrogate) {\n            if (codePoint > 56319) {\n              if ((units -= 3) > -1) bytes.push(239, 191, 189);\n              continue;\n            } else if (i + 1 === length) {\n              if ((units -= 3) > -1) bytes.push(239, 191, 189);\n              continue;\n            }\n            leadSurrogate = codePoint;\n            continue;\n          }\n          if (codePoint < 56320) {\n            if ((units -= 3) > -1) bytes.push(239, 191, 189);\n            leadSurrogate = codePoint;\n            continue;\n          }\n          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;\n        } else if (leadSurrogate) {\n          if ((units -= 3) > -1) bytes.push(239, 191, 189);\n        }\n        leadSurrogate = null;\n        if (codePoint < 128) {\n          if ((units -= 1) < 0) break;\n          bytes.push(codePoint);\n        } else if (codePoint < 2048) {\n          if ((units -= 2) < 0) break;\n          bytes.push(\n            codePoint >> 6 | 192,\n            codePoint & 63 | 128\n          );\n        } else if (codePoint < 65536) {\n          if ((units -= 3) < 0) break;\n          bytes.push(\n            codePoint >> 12 | 224,\n            codePoint >> 6 & 63 | 128,\n            codePoint & 63 | 128\n          );\n        } else if (codePoint < 1114112) {\n          if ((units -= 4) < 0) break;\n          bytes.push(\n            codePoint >> 18 | 240,\n            codePoint >> 12 & 63 | 128,\n            codePoint >> 6 & 63 | 128,\n            codePoint & 63 | 128\n          );\n        } else {\n          throw new Error(\"Invalid code point\");\n        }\n      }\n      return bytes;\n    }\n    function asciiToBytes(str) {\n      var byteArray = [];\n      for (var i = 0; i < str.length; ++i) {\n        byteArray.push(str.charCodeAt(i) & 255);\n      }\n      return byteArray;\n    }\n    function utf16leToBytes(str, units) {\n      var c, hi, lo;\n      var byteArray = [];\n      for (var i = 0; i < str.length; ++i) {\n        if ((units -= 2) < 0) break;\n        c = str.charCodeAt(i);\n        hi = c >> 8;\n        lo = c % 256;\n        byteArray.push(lo);\n        byteArray.push(hi);\n      }\n      return byteArray;\n    }\n    function base64ToBytes(str) {\n      return base64.toByteArray(base64clean(str));\n    }\n    function blitBuffer(src, dst, offset, length) {\n      for (var i = 0; i < length; ++i) {\n        if (i + offset >= dst.length || i >= src.length) break;\n        dst[i + offset] = src[i];\n      }\n      return i;\n    }\n    function isInstance(obj, type2) {\n      return obj instanceof type2 || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type2.name;\n    }\n    function numberIsNaN(obj) {\n      return obj !== obj;\n    }\n    var hexSliceLookupTable = function() {\n      var alphabet = \"0123456789abcdef\";\n      var table = new Array(256);\n      for (var i = 0; i < 16; ++i) {\n        var i16 = i * 16;\n        for (var j = 0; j < 16; ++j) {\n          table[i16 + j] = alphabet[i] + alphabet[j];\n        }\n      }\n      return table;\n    }();\n  })(buffer);\n  return buffer;\n}\nvar util = {};\nvar types = {};\nvar shams$1;\nvar hasRequiredShams$1;\nfunction requireShams$1() {\n  if (hasRequiredShams$1) return shams$1;\n  hasRequiredShams$1 = 1;\n  shams$1 = function hasSymbols2() {\n    if (typeof Symbol !== \"function\" || typeof Object.getOwnPropertySymbols !== \"function\") {\n      return false;\n    }\n    if (typeof Symbol.iterator === \"symbol\") {\n      return true;\n    }\n    var obj = {};\n    var sym = Symbol(\"test\");\n    var symObj = Object(sym);\n    if (typeof sym === \"string\") {\n      return false;\n    }\n    if (Object.prototype.toString.call(sym) !== \"[object Symbol]\") {\n      return false;\n    }\n    if (Object.prototype.toString.call(symObj) !== \"[object Symbol]\") {\n      return false;\n    }\n    var symVal = 42;\n    obj[sym] = symVal;\n    for (sym in obj) {\n      return false;\n    }\n    if (typeof Object.keys === \"function\" && Object.keys(obj).length !== 0) {\n      return false;\n    }\n    if (typeof Object.getOwnPropertyNames === \"function\" && Object.getOwnPropertyNames(obj).length !== 0) {\n      return false;\n    }\n    var syms = Object.getOwnPropertySymbols(obj);\n    if (syms.length !== 1 || syms[0] !== sym) {\n      return false;\n    }\n    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {\n      return false;\n    }\n    if (typeof Object.getOwnPropertyDescriptor === \"function\") {\n      var descriptor = Object.getOwnPropertyDescriptor(obj, sym);\n      if (descriptor.value !== symVal || descriptor.enumerable !== true) {\n        return false;\n      }\n    }\n    return true;\n  };\n  return shams$1;\n}\nvar shams;\nvar hasRequiredShams;\nfunction requireShams() {\n  if (hasRequiredShams) return shams;\n  hasRequiredShams = 1;\n  var hasSymbols2 = requireShams$1();\n  shams = function hasToStringTagShams() {\n    return hasSymbols2() && !!Symbol.toStringTag;\n  };\n  return shams;\n}\nvar esErrors;\nvar hasRequiredEsErrors;\nfunction requireEsErrors() {\n  if (hasRequiredEsErrors) return esErrors;\n  hasRequiredEsErrors = 1;\n  esErrors = Error;\n  return esErrors;\n}\nvar _eval;\nvar hasRequired_eval;\nfunction require_eval() {\n  if (hasRequired_eval) return _eval;\n  hasRequired_eval = 1;\n  _eval = EvalError;\n  return _eval;\n}\nvar range;\nvar hasRequiredRange;\nfunction requireRange() {\n  if (hasRequiredRange) return range;\n  hasRequiredRange = 1;\n  range = RangeError;\n  return range;\n}\nvar ref;\nvar hasRequiredRef;\nfunction requireRef() {\n  if (hasRequiredRef) return ref;\n  hasRequiredRef = 1;\n  ref = ReferenceError;\n  return ref;\n}\nvar syntax;\nvar hasRequiredSyntax;\nfunction requireSyntax() {\n  if (hasRequiredSyntax) return syntax;\n  hasRequiredSyntax = 1;\n  syntax = SyntaxError;\n  return syntax;\n}\nvar type;\nvar hasRequiredType;\nfunction requireType() {\n  if (hasRequiredType) return type;\n  hasRequiredType = 1;\n  type = TypeError;\n  return type;\n}\nvar uri;\nvar hasRequiredUri;\nfunction requireUri() {\n  if (hasRequiredUri) return uri;\n  hasRequiredUri = 1;\n  uri = URIError;\n  return uri;\n}\nvar hasSymbols;\nvar hasRequiredHasSymbols;\nfunction requireHasSymbols() {\n  if (hasRequiredHasSymbols) return hasSymbols;\n  hasRequiredHasSymbols = 1;\n  var origSymbol = typeof Symbol !== \"undefined\" && Symbol;\n  var hasSymbolSham = requireShams$1();\n  hasSymbols = function hasNativeSymbols() {\n    if (typeof origSymbol !== \"function\") {\n      return false;\n    }\n    if (typeof Symbol !== \"function\") {\n      return false;\n    }\n    if (typeof origSymbol(\"foo\") !== \"symbol\") {\n      return false;\n    }\n    if (typeof Symbol(\"bar\") !== \"symbol\") {\n      return false;\n    }\n    return hasSymbolSham();\n  };\n  return hasSymbols;\n}\nvar hasProto;\nvar hasRequiredHasProto;\nfunction requireHasProto() {\n  if (hasRequiredHasProto) return hasProto;\n  hasRequiredHasProto = 1;\n  var test = {\n    __proto__: null,\n    foo: {}\n  };\n  var $Object = Object;\n  hasProto = function hasProto2() {\n    return { __proto__: test }.foo === test.foo && !(test instanceof $Object);\n  };\n  return hasProto;\n}\nvar implementation;\nvar hasRequiredImplementation;\nfunction requireImplementation() {\n  if (hasRequiredImplementation) return implementation;\n  hasRequiredImplementation = 1;\n  var ERROR_MESSAGE = \"Function.prototype.bind called on incompatible \";\n  var toStr = Object.prototype.toString;\n  var max = Math.max;\n  var funcType = \"[object Function]\";\n  var concatty = function concatty2(a, b) {\n    var arr = [];\n    for (var i = 0; i < a.length; i += 1) {\n      arr[i] = a[i];\n    }\n    for (var j = 0; j < b.length; j += 1) {\n      arr[j + a.length] = b[j];\n    }\n    return arr;\n  };\n  var slicy = function slicy2(arrLike, offset) {\n    var arr = [];\n    for (var i = offset, j = 0; i < arrLike.length; i += 1, j += 1) {\n      arr[j] = arrLike[i];\n    }\n    return arr;\n  };\n  var joiny = function(arr, joiner) {\n    var str = \"\";\n    for (var i = 0; i < arr.length; i += 1) {\n      str += arr[i];\n      if (i + 1 < arr.length) {\n        str += joiner;\n      }\n    }\n    return str;\n  };\n  implementation = function bind(that) {\n    var target = this;\n    if (typeof target !== \"function\" || toStr.apply(target) !== funcType) {\n      throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slicy(arguments, 1);\n    var bound;\n    var binder = function() {\n      if (this instanceof bound) {\n        var result = target.apply(\n          this,\n          concatty(args, arguments)\n        );\n        if (Object(result) === result) {\n          return result;\n        }\n        return this;\n      }\n      return target.apply(\n        that,\n        concatty(args, arguments)\n      );\n    };\n    var boundLength = max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n      boundArgs[i] = \"$\" + i;\n    }\n    bound = Function(\"binder\", \"return function (\" + joiny(boundArgs, \",\") + \"){ return binder.apply(this,arguments); }\")(binder);\n    if (target.prototype) {\n      var Empty = function Empty2() {\n      };\n      Empty.prototype = target.prototype;\n      bound.prototype = new Empty();\n      Empty.prototype = null;\n    }\n    return bound;\n  };\n  return implementation;\n}\nvar functionBind;\nvar hasRequiredFunctionBind;\nfunction requireFunctionBind() {\n  if (hasRequiredFunctionBind) return functionBind;\n  hasRequiredFunctionBind = 1;\n  var implementation2 = requireImplementation();\n  functionBind = Function.prototype.bind || implementation2;\n  return functionBind;\n}\nvar hasown;\nvar hasRequiredHasown;\nfunction requireHasown() {\n  if (hasRequiredHasown) return hasown;\n  hasRequiredHasown = 1;\n  var call = Function.prototype.call;\n  var $hasOwn = Object.prototype.hasOwnProperty;\n  var bind = requireFunctionBind();\n  hasown = bind.call(call, $hasOwn);\n  return hasown;\n}\nvar getIntrinsic;\nvar hasRequiredGetIntrinsic;\nfunction requireGetIntrinsic() {\n  if (hasRequiredGetIntrinsic) return getIntrinsic;\n  hasRequiredGetIntrinsic = 1;\n  var undefined$1;\n  var $Error = requireEsErrors();\n  var $EvalError = require_eval();\n  var $RangeError = requireRange();\n  var $ReferenceError = requireRef();\n  var $SyntaxError = requireSyntax();\n  var $TypeError = requireType();\n  var $URIError = requireUri();\n  var $Function = Function;\n  var getEvalledConstructor = function(expressionSyntax) {\n    try {\n      return $Function('\"use strict\"; return (' + expressionSyntax + \").constructor;\")();\n    } catch (e) {\n    }\n  };\n  var $gOPD = Object.getOwnPropertyDescriptor;\n  if ($gOPD) {\n    try {\n      $gOPD({}, \"\");\n    } catch (e) {\n      $gOPD = null;\n    }\n  }\n  var throwTypeError = function() {\n    throw new $TypeError();\n  };\n  var ThrowTypeError = $gOPD ? function() {\n    try {\n      arguments.callee;\n      return throwTypeError;\n    } catch (calleeThrows) {\n      try {\n        return $gOPD(arguments, \"callee\").get;\n      } catch (gOPDthrows) {\n        return throwTypeError;\n      }\n    }\n  }() : throwTypeError;\n  var hasSymbols2 = requireHasSymbols()();\n  var hasProto2 = requireHasProto()();\n  var getProto = Object.getPrototypeOf || (hasProto2 ? function(x) {\n    return x.__proto__;\n  } : null);\n  var needsEval = {};\n  var TypedArray = typeof Uint8Array === \"undefined\" || !getProto ? undefined$1 : getProto(Uint8Array);\n  var INTRINSICS = {\n    __proto__: null,\n    \"%AggregateError%\": typeof AggregateError === \"undefined\" ? undefined$1 : AggregateError,\n    \"%Array%\": Array,\n    \"%ArrayBuffer%\": typeof ArrayBuffer === \"undefined\" ? undefined$1 : ArrayBuffer,\n    \"%ArrayIteratorPrototype%\": hasSymbols2 && getProto ? getProto([][Symbol.iterator]()) : undefined$1,\n    \"%AsyncFromSyncIteratorPrototype%\": undefined$1,\n    \"%AsyncFunction%\": needsEval,\n    \"%AsyncGenerator%\": needsEval,\n    \"%AsyncGeneratorFunction%\": needsEval,\n    \"%AsyncIteratorPrototype%\": needsEval,\n    \"%Atomics%\": typeof Atomics === \"undefined\" ? undefined$1 : Atomics,\n    \"%BigInt%\": typeof BigInt === \"undefined\" ? undefined$1 : BigInt,\n    \"%BigInt64Array%\": typeof BigInt64Array === \"undefined\" ? undefined$1 : BigInt64Array,\n    \"%BigUint64Array%\": typeof BigUint64Array === \"undefined\" ? undefined$1 : BigUint64Array,\n    \"%Boolean%\": Boolean,\n    \"%DataView%\": typeof DataView === \"undefined\" ? undefined$1 : DataView,\n    \"%Date%\": Date,\n    \"%decodeURI%\": decodeURI,\n    \"%decodeURIComponent%\": decodeURIComponent,\n    \"%encodeURI%\": encodeURI,\n    \"%encodeURIComponent%\": encodeURIComponent,\n    \"%Error%\": $Error,\n    \"%eval%\": eval,\n    // eslint-disable-line no-eval\n    \"%EvalError%\": $EvalError,\n    \"%Float32Array%\": typeof Float32Array === \"undefined\" ? undefined$1 : Float32Array,\n    \"%Float64Array%\": typeof Float64Array === \"undefined\" ? undefined$1 : Float64Array,\n    \"%FinalizationRegistry%\": typeof FinalizationRegistry === \"undefined\" ? undefined$1 : FinalizationRegistry,\n    \"%Function%\": $Function,\n    \"%GeneratorFunction%\": needsEval,\n    \"%Int8Array%\": typeof Int8Array === \"undefined\" ? undefined$1 : Int8Array,\n    \"%Int16Array%\": typeof Int16Array === \"undefined\" ? undefined$1 : Int16Array,\n    \"%Int32Array%\": typeof Int32Array === \"undefined\" ? undefined$1 : Int32Array,\n    \"%isFinite%\": isFinite,\n    \"%isNaN%\": isNaN,\n    \"%IteratorPrototype%\": hasSymbols2 && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined$1,\n    \"%JSON%\": typeof JSON === \"object\" ? JSON : undefined$1,\n    \"%Map%\": typeof Map === \"undefined\" ? undefined$1 : Map,\n    \"%MapIteratorPrototype%\": typeof Map === \"undefined\" || !hasSymbols2 || !getProto ? undefined$1 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),\n    \"%Math%\": Math,\n    \"%Number%\": Number,\n    \"%Object%\": Object,\n    \"%parseFloat%\": parseFloat,\n    \"%parseInt%\": parseInt,\n    \"%Promise%\": typeof Promise === \"undefined\" ? undefined$1 : Promise,\n    \"%Proxy%\": typeof Proxy === \"undefined\" ? undefined$1 : Proxy,\n    \"%RangeError%\": $RangeError,\n    \"%ReferenceError%\": $ReferenceError,\n    \"%Reflect%\": typeof Reflect === \"undefined\" ? undefined$1 : Reflect,\n    \"%RegExp%\": RegExp,\n    \"%Set%\": typeof Set === \"undefined\" ? undefined$1 : Set,\n    \"%SetIteratorPrototype%\": typeof Set === \"undefined\" || !hasSymbols2 || !getProto ? undefined$1 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),\n    \"%SharedArrayBuffer%\": typeof SharedArrayBuffer === \"undefined\" ? undefined$1 : SharedArrayBuffer,\n    \"%String%\": String,\n    \"%StringIteratorPrototype%\": hasSymbols2 && getProto ? getProto(\"\"[Symbol.iterator]()) : undefined$1,\n    \"%Symbol%\": hasSymbols2 ? Symbol : undefined$1,\n    \"%SyntaxError%\": $SyntaxError,\n    \"%ThrowTypeError%\": ThrowTypeError,\n    \"%TypedArray%\": TypedArray,\n    \"%TypeError%\": $TypeError,\n    \"%Uint8Array%\": typeof Uint8Array === \"undefined\" ? undefined$1 : Uint8Array,\n    \"%Uint8ClampedArray%\": typeof Uint8ClampedArray === \"undefined\" ? undefined$1 : Uint8ClampedArray,\n    \"%Uint16Array%\": typeof Uint16Array === \"undefined\" ? undefined$1 : Uint16Array,\n    \"%Uint32Array%\": typeof Uint32Array === \"undefined\" ? undefined$1 : Uint32Array,\n    \"%URIError%\": $URIError,\n    \"%WeakMap%\": typeof WeakMap === \"undefined\" ? undefined$1 : WeakMap,\n    \"%WeakRef%\": typeof WeakRef === \"undefined\" ? undefined$1 : WeakRef,\n    \"%WeakSet%\": typeof WeakSet === \"undefined\" ? undefined$1 : WeakSet\n  };\n  if (getProto) {\n    try {\n      null.error;\n    } catch (e) {\n      var errorProto = getProto(getProto(e));\n      INTRINSICS[\"%Error.prototype%\"] = errorProto;\n    }\n  }\n  var doEval = function doEval2(name) {\n    var value;\n    if (name === \"%AsyncFunction%\") {\n      value = getEvalledConstructor(\"async function () {}\");\n    } else if (name === \"%GeneratorFunction%\") {\n      value = getEvalledConstructor(\"function* () {}\");\n    } else if (name === \"%AsyncGeneratorFunction%\") {\n      value = getEvalledConstructor(\"async function* () {}\");\n    } else if (name === \"%AsyncGenerator%\") {\n      var fn = doEval2(\"%AsyncGeneratorFunction%\");\n      if (fn) {\n        value = fn.prototype;\n      }\n    } else if (name === \"%AsyncIteratorPrototype%\") {\n      var gen = doEval2(\"%AsyncGenerator%\");\n      if (gen && getProto) {\n        value = getProto(gen.prototype);\n      }\n    }\n    INTRINSICS[name] = value;\n    return value;\n  };\n  var LEGACY_ALIASES = {\n    __proto__: null,\n    \"%ArrayBufferPrototype%\": [\"ArrayBuffer\", \"prototype\"],\n    \"%ArrayPrototype%\": [\"Array\", \"prototype\"],\n    \"%ArrayProto_entries%\": [\"Array\", \"prototype\", \"entries\"],\n    \"%ArrayProto_forEach%\": [\"Array\", \"prototype\", \"forEach\"],\n    \"%ArrayProto_keys%\": [\"Array\", \"prototype\", \"keys\"],\n    \"%ArrayProto_values%\": [\"Array\", \"prototype\", \"values\"],\n    \"%AsyncFunctionPrototype%\": [\"AsyncFunction\", \"prototype\"],\n    \"%AsyncGenerator%\": [\"AsyncGeneratorFunction\", \"prototype\"],\n    \"%AsyncGeneratorPrototype%\": [\"AsyncGeneratorFunction\", \"prototype\", \"prototype\"],\n    \"%BooleanPrototype%\": [\"Boolean\", \"prototype\"],\n    \"%DataViewPrototype%\": [\"DataView\", \"prototype\"],\n    \"%DatePrototype%\": [\"Date\", \"prototype\"],\n    \"%ErrorPrototype%\": [\"Error\", \"prototype\"],\n    \"%EvalErrorPrototype%\": [\"EvalError\", \"prototype\"],\n    \"%Float32ArrayPrototype%\": [\"Float32Array\", \"prototype\"],\n    \"%Float64ArrayPrototype%\": [\"Float64Array\", \"prototype\"],\n    \"%FunctionPrototype%\": [\"Function\", \"prototype\"],\n    \"%Generator%\": [\"GeneratorFunction\", \"prototype\"],\n    \"%GeneratorPrototype%\": [\"GeneratorFunction\", \"prototype\", \"prototype\"],\n    \"%Int8ArrayPrototype%\": [\"Int8Array\", \"prototype\"],\n    \"%Int16ArrayPrototype%\": [\"Int16Array\", \"prototype\"],\n    \"%Int32ArrayPrototype%\": [\"Int32Array\", \"prototype\"],\n    \"%JSONParse%\": [\"JSON\", \"parse\"],\n    \"%JSONStringify%\": [\"JSON\", \"stringify\"],\n    \"%MapPrototype%\": [\"Map\", \"prototype\"],\n    \"%NumberPrototype%\": [\"Number\", \"prototype\"],\n    \"%ObjectPrototype%\": [\"Object\", \"prototype\"],\n    \"%ObjProto_toString%\": [\"Object\", \"prototype\", \"toString\"],\n    \"%ObjProto_valueOf%\": [\"Object\", \"prototype\", \"valueOf\"],\n    \"%PromisePrototype%\": [\"Promise\", \"prototype\"],\n    \"%PromiseProto_then%\": [\"Promise\", \"prototype\", \"then\"],\n    \"%Promise_all%\": [\"Promise\", \"all\"],\n    \"%Promise_reject%\": [\"Promise\", \"reject\"],\n    \"%Promise_resolve%\": [\"Promise\", \"resolve\"],\n    \"%RangeErrorPrototype%\": [\"RangeError\", \"prototype\"],\n    \"%ReferenceErrorPrototype%\": [\"ReferenceError\", \"prototype\"],\n    \"%RegExpPrototype%\": [\"RegExp\", \"prototype\"],\n    \"%SetPrototype%\": [\"Set\", \"prototype\"],\n    \"%SharedArrayBufferPrototype%\": [\"SharedArrayBuffer\", \"prototype\"],\n    \"%StringPrototype%\": [\"String\", \"prototype\"],\n    \"%SymbolPrototype%\": [\"Symbol\", \"prototype\"],\n    \"%SyntaxErrorPrototype%\": [\"SyntaxError\", \"prototype\"],\n    \"%TypedArrayPrototype%\": [\"TypedArray\", \"prototype\"],\n    \"%TypeErrorPrototype%\": [\"TypeError\", \"prototype\"],\n    \"%Uint8ArrayPrototype%\": [\"Uint8Array\", \"prototype\"],\n    \"%Uint8ClampedArrayPrototype%\": [\"Uint8ClampedArray\", \"prototype\"],\n    \"%Uint16ArrayPrototype%\": [\"Uint16Array\", \"prototype\"],\n    \"%Uint32ArrayPrototype%\": [\"Uint32Array\", \"prototype\"],\n    \"%URIErrorPrototype%\": [\"URIError\", \"prototype\"],\n    \"%WeakMapPrototype%\": [\"WeakMap\", \"prototype\"],\n    \"%WeakSetPrototype%\": [\"WeakSet\", \"prototype\"]\n  };\n  var bind = requireFunctionBind();\n  var hasOwn = requireHasown();\n  var $concat = bind.call(Function.call, Array.prototype.concat);\n  var $spliceApply = bind.call(Function.apply, Array.prototype.splice);\n  var $replace = bind.call(Function.call, String.prototype.replace);\n  var $strSlice = bind.call(Function.call, String.prototype.slice);\n  var $exec = bind.call(Function.call, RegExp.prototype.exec);\n  var rePropName = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\n  var reEscapeChar = /\\\\(\\\\)?/g;\n  var stringToPath = function stringToPath2(string) {\n    var first = $strSlice(string, 0, 1);\n    var last = $strSlice(string, -1);\n    if (first === \"%\" && last !== \"%\") {\n      throw new $SyntaxError(\"invalid intrinsic syntax, expected closing `%`\");\n    } else if (last === \"%\" && first !== \"%\") {\n      throw new $SyntaxError(\"invalid intrinsic syntax, expected opening `%`\");\n    }\n    var result = [];\n    $replace(string, rePropName, function(match, number, quote, subString) {\n      result[result.length] = quote ? $replace(subString, reEscapeChar, \"$1\") : number || match;\n    });\n    return result;\n  };\n  var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {\n    var intrinsicName = name;\n    var alias;\n    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {\n      alias = LEGACY_ALIASES[intrinsicName];\n      intrinsicName = \"%\" + alias[0] + \"%\";\n    }\n    if (hasOwn(INTRINSICS, intrinsicName)) {\n      var value = INTRINSICS[intrinsicName];\n      if (value === needsEval) {\n        value = doEval(intrinsicName);\n      }\n      if (typeof value === \"undefined\" && !allowMissing) {\n        throw new $TypeError(\"intrinsic \" + name + \" exists, but is not available. Please file an issue!\");\n      }\n      return {\n        alias,\n        name: intrinsicName,\n        value\n      };\n    }\n    throw new $SyntaxError(\"intrinsic \" + name + \" does not exist!\");\n  };\n  getIntrinsic = function GetIntrinsic(name, allowMissing) {\n    if (typeof name !== \"string\" || name.length === 0) {\n      throw new $TypeError(\"intrinsic name must be a non-empty string\");\n    }\n    if (arguments.length > 1 && typeof allowMissing !== \"boolean\") {\n      throw new $TypeError('\"allowMissing\" argument must be a boolean');\n    }\n    if ($exec(/^%?[^%]*%?$/, name) === null) {\n      throw new $SyntaxError(\"`%` may not be present anywhere but at the beginning and end of the intrinsic name\");\n    }\n    var parts = stringToPath(name);\n    var intrinsicBaseName = parts.length > 0 ? parts[0] : \"\";\n    var intrinsic = getBaseIntrinsic(\"%\" + intrinsicBaseName + \"%\", allowMissing);\n    var intrinsicRealName = intrinsic.name;\n    var value = intrinsic.value;\n    var skipFurtherCaching = false;\n    var alias = intrinsic.alias;\n    if (alias) {\n      intrinsicBaseName = alias[0];\n      $spliceApply(parts, $concat([0, 1], alias));\n    }\n    for (var i = 1, isOwn = true; i < parts.length; i += 1) {\n      var part = parts[i];\n      var first = $strSlice(part, 0, 1);\n      var last = $strSlice(part, -1);\n      if ((first === '\"' || first === \"'\" || first === \"`\" || (last === '\"' || last === \"'\" || last === \"`\")) && first !== last) {\n        throw new $SyntaxError(\"property names with quotes must have matching quotes\");\n      }\n      if (part === \"constructor\" || !isOwn) {\n        skipFurtherCaching = true;\n      }\n      intrinsicBaseName += \".\" + part;\n      intrinsicRealName = \"%\" + intrinsicBaseName + \"%\";\n      if (hasOwn(INTRINSICS, intrinsicRealName)) {\n        value = INTRINSICS[intrinsicRealName];\n      } else if (value != null) {\n        if (!(part in value)) {\n          if (!allowMissing) {\n            throw new $TypeError(\"base intrinsic for \" + name + \" exists, but the property is not available.\");\n          }\n          return void 0;\n        }\n        if ($gOPD && i + 1 >= parts.length) {\n          var desc = $gOPD(value, part);\n          isOwn = !!desc;\n          if (isOwn && \"get\" in desc && !(\"originalValue\" in desc.get)) {\n            value = desc.get;\n          } else {\n            value = value[part];\n          }\n        } else {\n          isOwn = hasOwn(value, part);\n          value = value[part];\n        }\n        if (isOwn && !skipFurtherCaching) {\n          INTRINSICS[intrinsicRealName] = value;\n        }\n      }\n    }\n    return value;\n  };\n  return getIntrinsic;\n}\nvar callBind = { exports: {} };\nvar esDefineProperty;\nvar hasRequiredEsDefineProperty;\nfunction requireEsDefineProperty() {\n  if (hasRequiredEsDefineProperty) return esDefineProperty;\n  hasRequiredEsDefineProperty = 1;\n  var GetIntrinsic = requireGetIntrinsic();\n  var $defineProperty = GetIntrinsic(\"%Object.defineProperty%\", true) || false;\n  if ($defineProperty) {\n    try {\n      $defineProperty({}, \"a\", { value: 1 });\n    } catch (e) {\n      $defineProperty = false;\n    }\n  }\n  esDefineProperty = $defineProperty;\n  return esDefineProperty;\n}\nvar gopd;\nvar hasRequiredGopd;\nfunction requireGopd() {\n  if (hasRequiredGopd) return gopd;\n  hasRequiredGopd = 1;\n  var GetIntrinsic = requireGetIntrinsic();\n  var $gOPD = GetIntrinsic(\"%Object.getOwnPropertyDescriptor%\", true);\n  if ($gOPD) {\n    try {\n      $gOPD([], \"length\");\n    } catch (e) {\n      $gOPD = null;\n    }\n  }\n  gopd = $gOPD;\n  return gopd;\n}\nvar defineDataProperty;\nvar hasRequiredDefineDataProperty;\nfunction requireDefineDataProperty() {\n  if (hasRequiredDefineDataProperty) return defineDataProperty;\n  hasRequiredDefineDataProperty = 1;\n  var $defineProperty = requireEsDefineProperty();\n  var $SyntaxError = requireSyntax();\n  var $TypeError = requireType();\n  var gopd2 = requireGopd();\n  defineDataProperty = function defineDataProperty2(obj, property, value) {\n    if (!obj || typeof obj !== \"object\" && typeof obj !== \"function\") {\n      throw new $TypeError(\"`obj` must be an object or a function`\");\n    }\n    if (typeof property !== \"string\" && typeof property !== \"symbol\") {\n      throw new $TypeError(\"`property` must be a string or a symbol`\");\n    }\n    if (arguments.length > 3 && typeof arguments[3] !== \"boolean\" && arguments[3] !== null) {\n      throw new $TypeError(\"`nonEnumerable`, if provided, must be a boolean or null\");\n    }\n    if (arguments.length > 4 && typeof arguments[4] !== \"boolean\" && arguments[4] !== null) {\n      throw new $TypeError(\"`nonWritable`, if provided, must be a boolean or null\");\n    }\n    if (arguments.length > 5 && typeof arguments[5] !== \"boolean\" && arguments[5] !== null) {\n      throw new $TypeError(\"`nonConfigurable`, if provided, must be a boolean or null\");\n    }\n    if (arguments.length > 6 && typeof arguments[6] !== \"boolean\") {\n      throw new $TypeError(\"`loose`, if provided, must be a boolean\");\n    }\n    var nonEnumerable = arguments.length > 3 ? arguments[3] : null;\n    var nonWritable = arguments.length > 4 ? arguments[4] : null;\n    var nonConfigurable = arguments.length > 5 ? arguments[5] : null;\n    var loose = arguments.length > 6 ? arguments[6] : false;\n    var desc = !!gopd2 && gopd2(obj, property);\n    if ($defineProperty) {\n      $defineProperty(obj, property, {\n        configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,\n        enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,\n        value,\n        writable: nonWritable === null && desc ? desc.writable : !nonWritable\n      });\n    } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {\n      obj[property] = value;\n    } else {\n      throw new $SyntaxError(\"This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.\");\n    }\n  };\n  return defineDataProperty;\n}\nvar hasPropertyDescriptors_1;\nvar hasRequiredHasPropertyDescriptors;\nfunction requireHasPropertyDescriptors() {\n  if (hasRequiredHasPropertyDescriptors) return hasPropertyDescriptors_1;\n  hasRequiredHasPropertyDescriptors = 1;\n  var $defineProperty = requireEsDefineProperty();\n  var hasPropertyDescriptors = function hasPropertyDescriptors2() {\n    return !!$defineProperty;\n  };\n  hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {\n    if (!$defineProperty) {\n      return null;\n    }\n    try {\n      return $defineProperty([], \"length\", { value: 1 }).length !== 1;\n    } catch (e) {\n      return true;\n    }\n  };\n  hasPropertyDescriptors_1 = hasPropertyDescriptors;\n  return hasPropertyDescriptors_1;\n}\nvar setFunctionLength;\nvar hasRequiredSetFunctionLength;\nfunction requireSetFunctionLength() {\n  if (hasRequiredSetFunctionLength) return setFunctionLength;\n  hasRequiredSetFunctionLength = 1;\n  var GetIntrinsic = requireGetIntrinsic();\n  var define = requireDefineDataProperty();\n  var hasDescriptors = requireHasPropertyDescriptors()();\n  var gOPD = requireGopd();\n  var $TypeError = requireType();\n  var $floor = GetIntrinsic(\"%Math.floor%\");\n  setFunctionLength = function setFunctionLength2(fn, length) {\n    if (typeof fn !== \"function\") {\n      throw new $TypeError(\"`fn` is not a function\");\n    }\n    if (typeof length !== \"number\" || length < 0 || length > 4294967295 || $floor(length) !== length) {\n      throw new $TypeError(\"`length` must be a positive 32-bit integer\");\n    }\n    var loose = arguments.length > 2 && !!arguments[2];\n    var functionLengthIsConfigurable = true;\n    var functionLengthIsWritable = true;\n    if (\"length\" in fn && gOPD) {\n      var desc = gOPD(fn, \"length\");\n      if (desc && !desc.configurable) {\n        functionLengthIsConfigurable = false;\n      }\n      if (desc && !desc.writable) {\n        functionLengthIsWritable = false;\n      }\n    }\n    if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {\n      if (hasDescriptors) {\n        define(\n          /** @type {Parameters<define>[0]} */\n          fn,\n          \"length\",\n          length,\n          true,\n          true\n        );\n      } else {\n        define(\n          /** @type {Parameters<define>[0]} */\n          fn,\n          \"length\",\n          length\n        );\n      }\n    }\n    return fn;\n  };\n  return setFunctionLength;\n}\nvar hasRequiredCallBind;\nfunction requireCallBind() {\n  if (hasRequiredCallBind) return callBind.exports;\n  hasRequiredCallBind = 1;\n  (function(module) {\n    var bind = requireFunctionBind();\n    var GetIntrinsic = requireGetIntrinsic();\n    var setFunctionLength2 = requireSetFunctionLength();\n    var $TypeError = requireType();\n    var $apply = GetIntrinsic(\"%Function.prototype.apply%\");\n    var $call = GetIntrinsic(\"%Function.prototype.call%\");\n    var $reflectApply = GetIntrinsic(\"%Reflect.apply%\", true) || bind.call($call, $apply);\n    var $defineProperty = requireEsDefineProperty();\n    var $max = GetIntrinsic(\"%Math.max%\");\n    module.exports = function callBind2(originalFunction) {\n      if (typeof originalFunction !== \"function\") {\n        throw new $TypeError(\"a function is required\");\n      }\n      var func = $reflectApply(bind, $call, arguments);\n      return setFunctionLength2(\n        func,\n        1 + $max(0, originalFunction.length - (arguments.length - 1)),\n        true\n      );\n    };\n    var applyBind = function applyBind2() {\n      return $reflectApply(bind, $apply, arguments);\n    };\n    if ($defineProperty) {\n      $defineProperty(module.exports, \"apply\", { value: applyBind });\n    } else {\n      module.exports.apply = applyBind;\n    }\n  })(callBind);\n  return callBind.exports;\n}\nvar callBound;\nvar hasRequiredCallBound;\nfunction requireCallBound() {\n  if (hasRequiredCallBound) return callBound;\n  hasRequiredCallBound = 1;\n  var GetIntrinsic = requireGetIntrinsic();\n  var callBind2 = requireCallBind();\n  var $indexOf = callBind2(GetIntrinsic(\"String.prototype.indexOf\"));\n  callBound = function callBoundIntrinsic(name, allowMissing) {\n    var intrinsic = GetIntrinsic(name, !!allowMissing);\n    if (typeof intrinsic === \"function\" && $indexOf(name, \".prototype.\") > -1) {\n      return callBind2(intrinsic);\n    }\n    return intrinsic;\n  };\n  return callBound;\n}\nvar isArguments;\nvar hasRequiredIsArguments;\nfunction requireIsArguments() {\n  if (hasRequiredIsArguments) return isArguments;\n  hasRequiredIsArguments = 1;\n  var hasToStringTag = requireShams()();\n  var callBound2 = requireCallBound();\n  var $toString = callBound2(\"Object.prototype.toString\");\n  var isStandardArguments = function isArguments2(value) {\n    if (hasToStringTag && value && typeof value === \"object\" && Symbol.toStringTag in value) {\n      return false;\n    }\n    return $toString(value) === \"[object Arguments]\";\n  };\n  var isLegacyArguments = function isArguments2(value) {\n    if (isStandardArguments(value)) {\n      return true;\n    }\n    return value !== null && typeof value === \"object\" && typeof value.length === \"number\" && value.length >= 0 && $toString(value) !== \"[object Array]\" && $toString(value.callee) === \"[object Function]\";\n  };\n  var supportsStandardArguments = function() {\n    return isStandardArguments(arguments);\n  }();\n  isStandardArguments.isLegacyArguments = isLegacyArguments;\n  isArguments = supportsStandardArguments ? isStandardArguments : isLegacyArguments;\n  return isArguments;\n}\nvar isGeneratorFunction;\nvar hasRequiredIsGeneratorFunction;\nfunction requireIsGeneratorFunction() {\n  if (hasRequiredIsGeneratorFunction) return isGeneratorFunction;\n  hasRequiredIsGeneratorFunction = 1;\n  var toStr = Object.prototype.toString;\n  var fnToStr = Function.prototype.toString;\n  var isFnRegex = /^\\s*(?:function)?\\*/;\n  var hasToStringTag = requireShams()();\n  var getProto = Object.getPrototypeOf;\n  var getGeneratorFunc = function() {\n    if (!hasToStringTag) {\n      return false;\n    }\n    try {\n      return Function(\"return function*() {}\")();\n    } catch (e) {\n    }\n  };\n  var GeneratorFunction;\n  isGeneratorFunction = function isGeneratorFunction2(fn) {\n    if (typeof fn !== \"function\") {\n      return false;\n    }\n    if (isFnRegex.test(fnToStr.call(fn))) {\n      return true;\n    }\n    if (!hasToStringTag) {\n      var str = toStr.call(fn);\n      return str === \"[object GeneratorFunction]\";\n    }\n    if (!getProto) {\n      return false;\n    }\n    if (typeof GeneratorFunction === \"undefined\") {\n      var generatorFunc = getGeneratorFunc();\n      GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;\n    }\n    return getProto(fn) === GeneratorFunction;\n  };\n  return isGeneratorFunction;\n}\nvar isCallable;\nvar hasRequiredIsCallable;\nfunction requireIsCallable() {\n  if (hasRequiredIsCallable) return isCallable;\n  hasRequiredIsCallable = 1;\n  var fnToStr = Function.prototype.toString;\n  var reflectApply = typeof Reflect === \"object\" && Reflect !== null && Reflect.apply;\n  var badArrayLike;\n  var isCallableMarker;\n  if (typeof reflectApply === \"function\" && typeof Object.defineProperty === \"function\") {\n    try {\n      badArrayLike = Object.defineProperty({}, \"length\", {\n        get: function() {\n          throw isCallableMarker;\n        }\n      });\n      isCallableMarker = {};\n      reflectApply(function() {\n        throw 42;\n      }, null, badArrayLike);\n    } catch (_) {\n      if (_ !== isCallableMarker) {\n        reflectApply = null;\n      }\n    }\n  } else {\n    reflectApply = null;\n  }\n  var constructorRegex = /^\\s*class\\b/;\n  var isES6ClassFn = function isES6ClassFunction(value) {\n    try {\n      var fnStr = fnToStr.call(value);\n      return constructorRegex.test(fnStr);\n    } catch (e) {\n      return false;\n    }\n  };\n  var tryFunctionObject = function tryFunctionToStr(value) {\n    try {\n      if (isES6ClassFn(value)) {\n        return false;\n      }\n      fnToStr.call(value);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  };\n  var toStr = Object.prototype.toString;\n  var objectClass = \"[object Object]\";\n  var fnClass = \"[object Function]\";\n  var genClass = \"[object GeneratorFunction]\";\n  var ddaClass = \"[object HTMLAllCollection]\";\n  var ddaClass2 = \"[object HTML document.all class]\";\n  var ddaClass3 = \"[object HTMLCollection]\";\n  var hasToStringTag = typeof Symbol === \"function\" && !!Symbol.toStringTag;\n  var isIE68 = !(0 in [,]);\n  var isDDA = function isDocumentDotAll() {\n    return false;\n  };\n  if (typeof document === \"object\") {\n    var all = document.all;\n    if (toStr.call(all) === toStr.call(document.all)) {\n      isDDA = function isDocumentDotAll(value) {\n        if ((isIE68 || !value) && (typeof value === \"undefined\" || typeof value === \"object\")) {\n          try {\n            var str = toStr.call(value);\n            return (str === ddaClass || str === ddaClass2 || str === ddaClass3 || str === objectClass) && value(\"\") == null;\n          } catch (e) {\n          }\n        }\n        return false;\n      };\n    }\n  }\n  isCallable = reflectApply ? function isCallable2(value) {\n    if (isDDA(value)) {\n      return true;\n    }\n    if (!value) {\n      return false;\n    }\n    if (typeof value !== \"function\" && typeof value !== \"object\") {\n      return false;\n    }\n    try {\n      reflectApply(value, null, badArrayLike);\n    } catch (e) {\n      if (e !== isCallableMarker) {\n        return false;\n      }\n    }\n    return !isES6ClassFn(value) && tryFunctionObject(value);\n  } : function isCallable2(value) {\n    if (isDDA(value)) {\n      return true;\n    }\n    if (!value) {\n      return false;\n    }\n    if (typeof value !== \"function\" && typeof value !== \"object\") {\n      return false;\n    }\n    if (hasToStringTag) {\n      return tryFunctionObject(value);\n    }\n    if (isES6ClassFn(value)) {\n      return false;\n    }\n    var strClass = toStr.call(value);\n    if (strClass !== fnClass && strClass !== genClass && !/^\\[object HTML/.test(strClass)) {\n      return false;\n    }\n    return tryFunctionObject(value);\n  };\n  return isCallable;\n}\nvar forEach_1;\nvar hasRequiredForEach;\nfunction requireForEach() {\n  if (hasRequiredForEach) return forEach_1;\n  hasRequiredForEach = 1;\n  var isCallable2 = requireIsCallable();\n  var toStr = Object.prototype.toString;\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  var forEachArray = function forEachArray2(array, iterator, receiver) {\n    for (var i = 0, len = array.length; i < len; i++) {\n      if (hasOwnProperty.call(array, i)) {\n        if (receiver == null) {\n          iterator(array[i], i, array);\n        } else {\n          iterator.call(receiver, array[i], i, array);\n        }\n      }\n    }\n  };\n  var forEachString = function forEachString2(string, iterator, receiver) {\n    for (var i = 0, len = string.length; i < len; i++) {\n      if (receiver == null) {\n        iterator(string.charAt(i), i, string);\n      } else {\n        iterator.call(receiver, string.charAt(i), i, string);\n      }\n    }\n  };\n  var forEachObject = function forEachObject2(object, iterator, receiver) {\n    for (var k in object) {\n      if (hasOwnProperty.call(object, k)) {\n        if (receiver == null) {\n          iterator(object[k], k, object);\n        } else {\n          iterator.call(receiver, object[k], k, object);\n        }\n      }\n    }\n  };\n  var forEach = function forEach2(list, iterator, thisArg) {\n    if (!isCallable2(iterator)) {\n      throw new TypeError(\"iterator must be a function\");\n    }\n    var receiver;\n    if (arguments.length >= 3) {\n      receiver = thisArg;\n    }\n    if (toStr.call(list) === \"[object Array]\") {\n      forEachArray(list, iterator, receiver);\n    } else if (typeof list === \"string\") {\n      forEachString(list, iterator, receiver);\n    } else {\n      forEachObject(list, iterator, receiver);\n    }\n  };\n  forEach_1 = forEach;\n  return forEach_1;\n}\nvar possibleTypedArrayNames;\nvar hasRequiredPossibleTypedArrayNames;\nfunction requirePossibleTypedArrayNames() {\n  if (hasRequiredPossibleTypedArrayNames) return possibleTypedArrayNames;\n  hasRequiredPossibleTypedArrayNames = 1;\n  possibleTypedArrayNames = [\n    \"Float32Array\",\n    \"Float64Array\",\n    \"Int8Array\",\n    \"Int16Array\",\n    \"Int32Array\",\n    \"Uint8Array\",\n    \"Uint8ClampedArray\",\n    \"Uint16Array\",\n    \"Uint32Array\",\n    \"BigInt64Array\",\n    \"BigUint64Array\"\n  ];\n  return possibleTypedArrayNames;\n}\nvar availableTypedArrays;\nvar hasRequiredAvailableTypedArrays;\nfunction requireAvailableTypedArrays() {\n  if (hasRequiredAvailableTypedArrays) return availableTypedArrays;\n  hasRequiredAvailableTypedArrays = 1;\n  var possibleNames = requirePossibleTypedArrayNames();\n  var g = typeof globalThis === \"undefined\" ? commonjsGlobal : globalThis;\n  availableTypedArrays = function availableTypedArrays2() {\n    var out = [];\n    for (var i = 0; i < possibleNames.length; i++) {\n      if (typeof g[possibleNames[i]] === \"function\") {\n        out[out.length] = possibleNames[i];\n      }\n    }\n    return out;\n  };\n  return availableTypedArrays;\n}\nvar whichTypedArray;\nvar hasRequiredWhichTypedArray;\nfunction requireWhichTypedArray() {\n  if (hasRequiredWhichTypedArray) return whichTypedArray;\n  hasRequiredWhichTypedArray = 1;\n  var forEach = requireForEach();\n  var availableTypedArrays2 = requireAvailableTypedArrays();\n  var callBind2 = requireCallBind();\n  var callBound2 = requireCallBound();\n  var gOPD = requireGopd();\n  var $toString = callBound2(\"Object.prototype.toString\");\n  var hasToStringTag = requireShams()();\n  var g = typeof globalThis === \"undefined\" ? commonjsGlobal : globalThis;\n  var typedArrays = availableTypedArrays2();\n  var $slice = callBound2(\"String.prototype.slice\");\n  var getPrototypeOf = Object.getPrototypeOf;\n  var $indexOf = callBound2(\"Array.prototype.indexOf\", true) || function indexOf(array, value) {\n    for (var i = 0; i < array.length; i += 1) {\n      if (array[i] === value) {\n        return i;\n      }\n    }\n    return -1;\n  };\n  var cache = { __proto__: null };\n  if (hasToStringTag && gOPD && getPrototypeOf) {\n    forEach(typedArrays, function(typedArray) {\n      var arr = new g[typedArray]();\n      if (Symbol.toStringTag in arr) {\n        var proto = getPrototypeOf(arr);\n        var descriptor = gOPD(proto, Symbol.toStringTag);\n        if (!descriptor) {\n          var superProto = getPrototypeOf(proto);\n          descriptor = gOPD(superProto, Symbol.toStringTag);\n        }\n        cache[\"$\" + typedArray] = callBind2(descriptor.get);\n      }\n    });\n  } else {\n    forEach(typedArrays, function(typedArray) {\n      var arr = new g[typedArray]();\n      var fn = arr.slice || arr.set;\n      if (fn) {\n        cache[\"$\" + typedArray] = callBind2(fn);\n      }\n    });\n  }\n  var tryTypedArrays = function tryAllTypedArrays(value) {\n    var found = false;\n    forEach(\n      // eslint-disable-next-line no-extra-parens\n      /** @type {Record<`\\$${TypedArrayName}`, Getter>} */\n      /** @type {any} */\n      cache,\n      /** @type {(getter: Getter, name: `\\$${import('.').TypedArrayName}`) => void} */\n      function(getter, typedArray) {\n        if (!found) {\n          try {\n            if (\"$\" + getter(value) === typedArray) {\n              found = $slice(typedArray, 1);\n            }\n          } catch (e) {\n          }\n        }\n      }\n    );\n    return found;\n  };\n  var trySlices = function tryAllSlices(value) {\n    var found = false;\n    forEach(\n      // eslint-disable-next-line no-extra-parens\n      /** @type {Record<`\\$${TypedArrayName}`, Getter>} */\n      /** @type {any} */\n      cache,\n      /** @type {(getter: typeof cache, name: `\\$${import('.').TypedArrayName}`) => void} */\n      function(getter, name) {\n        if (!found) {\n          try {\n            getter(value);\n            found = $slice(name, 1);\n          } catch (e) {\n          }\n        }\n      }\n    );\n    return found;\n  };\n  whichTypedArray = function whichTypedArray2(value) {\n    if (!value || typeof value !== \"object\") {\n      return false;\n    }\n    if (!hasToStringTag) {\n      var tag = $slice($toString(value), 8, -1);\n      if ($indexOf(typedArrays, tag) > -1) {\n        return tag;\n      }\n      if (tag !== \"Object\") {\n        return false;\n      }\n      return trySlices(value);\n    }\n    if (!gOPD) {\n      return null;\n    }\n    return tryTypedArrays(value);\n  };\n  return whichTypedArray;\n}\nvar isTypedArray;\nvar hasRequiredIsTypedArray;\nfunction requireIsTypedArray() {\n  if (hasRequiredIsTypedArray) return isTypedArray;\n  hasRequiredIsTypedArray = 1;\n  var whichTypedArray2 = requireWhichTypedArray();\n  isTypedArray = function isTypedArray2(value) {\n    return !!whichTypedArray2(value);\n  };\n  return isTypedArray;\n}\nvar hasRequiredTypes;\nfunction requireTypes() {\n  if (hasRequiredTypes) return types;\n  hasRequiredTypes = 1;\n  (function(exports) {\n    var isArgumentsObject = requireIsArguments();\n    var isGeneratorFunction2 = requireIsGeneratorFunction();\n    var whichTypedArray2 = requireWhichTypedArray();\n    var isTypedArray2 = requireIsTypedArray();\n    function uncurryThis(f2) {\n      return f2.call.bind(f2);\n    }\n    var BigIntSupported = typeof BigInt !== \"undefined\";\n    var SymbolSupported = typeof Symbol !== \"undefined\";\n    var ObjectToString = uncurryThis(Object.prototype.toString);\n    var numberValue = uncurryThis(Number.prototype.valueOf);\n    var stringValue = uncurryThis(String.prototype.valueOf);\n    var booleanValue = uncurryThis(Boolean.prototype.valueOf);\n    if (BigIntSupported) {\n      var bigIntValue = uncurryThis(BigInt.prototype.valueOf);\n    }\n    if (SymbolSupported) {\n      var symbolValue = uncurryThis(Symbol.prototype.valueOf);\n    }\n    function checkBoxedPrimitive(value, prototypeValueOf) {\n      if (typeof value !== \"object\") {\n        return false;\n      }\n      try {\n        prototypeValueOf(value);\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }\n    exports.isArgumentsObject = isArgumentsObject;\n    exports.isGeneratorFunction = isGeneratorFunction2;\n    exports.isTypedArray = isTypedArray2;\n    function isPromise(input) {\n      return typeof Promise !== \"undefined\" && input instanceof Promise || input !== null && typeof input === \"object\" && typeof input.then === \"function\" && typeof input.catch === \"function\";\n    }\n    exports.isPromise = isPromise;\n    function isArrayBufferView(value) {\n      if (typeof ArrayBuffer !== \"undefined\" && ArrayBuffer.isView) {\n        return ArrayBuffer.isView(value);\n      }\n      return isTypedArray2(value) || isDataView(value);\n    }\n    exports.isArrayBufferView = isArrayBufferView;\n    function isUint8Array(value) {\n      return whichTypedArray2(value) === \"Uint8Array\";\n    }\n    exports.isUint8Array = isUint8Array;\n    function isUint8ClampedArray(value) {\n      return whichTypedArray2(value) === \"Uint8ClampedArray\";\n    }\n    exports.isUint8ClampedArray = isUint8ClampedArray;\n    function isUint16Array(value) {\n      return whichTypedArray2(value) === \"Uint16Array\";\n    }\n    exports.isUint16Array = isUint16Array;\n    function isUint32Array(value) {\n      return whichTypedArray2(value) === \"Uint32Array\";\n    }\n    exports.isUint32Array = isUint32Array;\n    function isInt8Array(value) {\n      return whichTypedArray2(value) === \"Int8Array\";\n    }\n    exports.isInt8Array = isInt8Array;\n    function isInt16Array(value) {\n      return whichTypedArray2(value) === \"Int16Array\";\n    }\n    exports.isInt16Array = isInt16Array;\n    function isInt32Array(value) {\n      return whichTypedArray2(value) === \"Int32Array\";\n    }\n    exports.isInt32Array = isInt32Array;\n    function isFloat32Array(value) {\n      return whichTypedArray2(value) === \"Float32Array\";\n    }\n    exports.isFloat32Array = isFloat32Array;\n    function isFloat64Array(value) {\n      return whichTypedArray2(value) === \"Float64Array\";\n    }\n    exports.isFloat64Array = isFloat64Array;\n    function isBigInt64Array(value) {\n      return whichTypedArray2(value) === \"BigInt64Array\";\n    }\n    exports.isBigInt64Array = isBigInt64Array;\n    function isBigUint64Array(value) {\n      return whichTypedArray2(value) === \"BigUint64Array\";\n    }\n    exports.isBigUint64Array = isBigUint64Array;\n    function isMapToString(value) {\n      return ObjectToString(value) === \"[object Map]\";\n    }\n    isMapToString.working = typeof Map !== \"undefined\" && isMapToString(/* @__PURE__ */ new Map());\n    function isMap(value) {\n      if (typeof Map === \"undefined\") {\n        return false;\n      }\n      return isMapToString.working ? isMapToString(value) : value instanceof Map;\n    }\n    exports.isMap = isMap;\n    function isSetToString(value) {\n      return ObjectToString(value) === \"[object Set]\";\n    }\n    isSetToString.working = typeof Set !== \"undefined\" && isSetToString(/* @__PURE__ */ new Set());\n    function isSet(value) {\n      if (typeof Set === \"undefined\") {\n        return false;\n      }\n      return isSetToString.working ? isSetToString(value) : value instanceof Set;\n    }\n    exports.isSet = isSet;\n    function isWeakMapToString(value) {\n      return ObjectToString(value) === \"[object WeakMap]\";\n    }\n    isWeakMapToString.working = typeof WeakMap !== \"undefined\" && isWeakMapToString(/* @__PURE__ */ new WeakMap());\n    function isWeakMap(value) {\n      if (typeof WeakMap === \"undefined\") {\n        return false;\n      }\n      return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;\n    }\n    exports.isWeakMap = isWeakMap;\n    function isWeakSetToString(value) {\n      return ObjectToString(value) === \"[object WeakSet]\";\n    }\n    isWeakSetToString.working = typeof WeakSet !== \"undefined\" && isWeakSetToString(/* @__PURE__ */ new WeakSet());\n    function isWeakSet(value) {\n      return isWeakSetToString(value);\n    }\n    exports.isWeakSet = isWeakSet;\n    function isArrayBufferToString(value) {\n      return ObjectToString(value) === \"[object ArrayBuffer]\";\n    }\n    isArrayBufferToString.working = typeof ArrayBuffer !== \"undefined\" && isArrayBufferToString(new ArrayBuffer());\n    function isArrayBuffer(value) {\n      if (typeof ArrayBuffer === \"undefined\") {\n        return false;\n      }\n      return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;\n    }\n    exports.isArrayBuffer = isArrayBuffer;\n    function isDataViewToString(value) {\n      return ObjectToString(value) === \"[object DataView]\";\n    }\n    isDataViewToString.working = typeof ArrayBuffer !== \"undefined\" && typeof DataView !== \"undefined\" && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));\n    function isDataView(value) {\n      if (typeof DataView === \"undefined\") {\n        return false;\n      }\n      return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;\n    }\n    exports.isDataView = isDataView;\n    var SharedArrayBufferCopy = typeof SharedArrayBuffer !== \"undefined\" ? SharedArrayBuffer : void 0;\n    function isSharedArrayBufferToString(value) {\n      return ObjectToString(value) === \"[object SharedArrayBuffer]\";\n    }\n    function isSharedArrayBuffer(value) {\n      if (typeof SharedArrayBufferCopy === \"undefined\") {\n        return false;\n      }\n      if (typeof isSharedArrayBufferToString.working === \"undefined\") {\n        isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());\n      }\n      return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;\n    }\n    exports.isSharedArrayBuffer = isSharedArrayBuffer;\n    function isAsyncFunction(value) {\n      return ObjectToString(value) === \"[object AsyncFunction]\";\n    }\n    exports.isAsyncFunction = isAsyncFunction;\n    function isMapIterator(value) {\n      return ObjectToString(value) === \"[object Map Iterator]\";\n    }\n    exports.isMapIterator = isMapIterator;\n    function isSetIterator(value) {\n      return ObjectToString(value) === \"[object Set Iterator]\";\n    }\n    exports.isSetIterator = isSetIterator;\n    function isGeneratorObject(value) {\n      return ObjectToString(value) === \"[object Generator]\";\n    }\n    exports.isGeneratorObject = isGeneratorObject;\n    function isWebAssemblyCompiledModule(value) {\n      return ObjectToString(value) === \"[object WebAssembly.Module]\";\n    }\n    exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;\n    function isNumberObject(value) {\n      return checkBoxedPrimitive(value, numberValue);\n    }\n    exports.isNumberObject = isNumberObject;\n    function isStringObject(value) {\n      return checkBoxedPrimitive(value, stringValue);\n    }\n    exports.isStringObject = isStringObject;\n    function isBooleanObject(value) {\n      return checkBoxedPrimitive(value, booleanValue);\n    }\n    exports.isBooleanObject = isBooleanObject;\n    function isBigIntObject(value) {\n      return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);\n    }\n    exports.isBigIntObject = isBigIntObject;\n    function isSymbolObject(value) {\n      return SymbolSupported && checkBoxedPrimitive(value, symbolValue);\n    }\n    exports.isSymbolObject = isSymbolObject;\n    function isBoxedPrimitive(value) {\n      return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);\n    }\n    exports.isBoxedPrimitive = isBoxedPrimitive;\n    function isAnyArrayBuffer(value) {\n      return typeof Uint8Array !== \"undefined\" && (isArrayBuffer(value) || isSharedArrayBuffer(value));\n    }\n    exports.isAnyArrayBuffer = isAnyArrayBuffer;\n    [\"isProxy\", \"isExternal\", \"isModuleNamespaceObject\"].forEach(function(method) {\n      Object.defineProperty(exports, method, {\n        enumerable: false,\n        value: function() {\n          throw new Error(method + \" is not supported in userland\");\n        }\n      });\n    });\n  })(types);\n  return types;\n}\nvar isBufferBrowser;\nvar hasRequiredIsBufferBrowser;\nfunction requireIsBufferBrowser() {\n  if (hasRequiredIsBufferBrowser) return isBufferBrowser;\n  hasRequiredIsBufferBrowser = 1;\n  isBufferBrowser = function isBuffer(arg) {\n    return arg && typeof arg === \"object\" && typeof arg.copy === \"function\" && typeof arg.fill === \"function\" && typeof arg.readUInt8 === \"function\";\n  };\n  return isBufferBrowser;\n}\nvar hasRequiredUtil;\nfunction requireUtil() {\n  if (hasRequiredUtil) return util;\n  hasRequiredUtil = 1;\n  (function(exports) {\n    var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(obj) {\n      var keys = Object.keys(obj);\n      var descriptors = {};\n      for (var i = 0; i < keys.length; i++) {\n        descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n      }\n      return descriptors;\n    };\n    var formatRegExp = /%[sdj%]/g;\n    exports.format = function(f2) {\n      if (!isString(f2)) {\n        var objects = [];\n        for (var i = 0; i < arguments.length; i++) {\n          objects.push(inspect(arguments[i]));\n        }\n        return objects.join(\" \");\n      }\n      var i = 1;\n      var args = arguments;\n      var len = args.length;\n      var str = String(f2).replace(formatRegExp, function(x2) {\n        if (x2 === \"%%\") return \"%\";\n        if (i >= len) return x2;\n        switch (x2) {\n          case \"%s\":\n            return String(args[i++]);\n          case \"%d\":\n            return Number(args[i++]);\n          case \"%j\":\n            try {\n              return JSON.stringify(args[i++]);\n            } catch (_) {\n              return \"[Circular]\";\n            }\n          default:\n            return x2;\n        }\n      });\n      for (var x = args[i]; i < len; x = args[++i]) {\n        if (isNull(x) || !isObject(x)) {\n          str += \" \" + x;\n        } else {\n          str += \" \" + inspect(x);\n        }\n      }\n      return str;\n    };\n    exports.deprecate = function(fn, msg) {\n      if (typeof process$1 !== \"undefined\" && process$1.noDeprecation === true) {\n        return fn;\n      }\n      if (typeof process$1 === \"undefined\") {\n        return function() {\n          return exports.deprecate(fn, msg).apply(this, arguments);\n        };\n      }\n      var warned = false;\n      function deprecated() {\n        if (!warned) {\n          if (process$1.throwDeprecation) {\n            throw new Error(msg);\n          } else if (process$1.traceDeprecation) {\n            console.trace(msg);\n          } else {\n            console.error(msg);\n          }\n          warned = true;\n        }\n        return fn.apply(this, arguments);\n      }\n      return deprecated;\n    };\n    var debugs = {};\n    var debugEnvRegex = /^$/;\n    if (process$1.env.NODE_DEBUG) {\n      var debugEnv = process$1.env.NODE_DEBUG;\n      debugEnv = debugEnv.replace(/[|\\\\{}()[\\]^$+?.]/g, \"\\\\$&\").replace(/\\*/g, \".*\").replace(/,/g, \"$|^\").toUpperCase();\n      debugEnvRegex = new RegExp(\"^\" + debugEnv + \"$\", \"i\");\n    }\n    exports.debuglog = function(set) {\n      set = set.toUpperCase();\n      if (!debugs[set]) {\n        if (debugEnvRegex.test(set)) {\n          var pid = process$1.pid;\n          debugs[set] = function() {\n            var msg = exports.format.apply(exports, arguments);\n            console.error(\"%s %d: %s\", set, pid, msg);\n          };\n        } else {\n          debugs[set] = function() {\n          };\n        }\n      }\n      return debugs[set];\n    };\n    function inspect(obj, opts) {\n      var ctx = {\n        seen: [],\n        stylize: stylizeNoColor\n      };\n      if (arguments.length >= 3) ctx.depth = arguments[2];\n      if (arguments.length >= 4) ctx.colors = arguments[3];\n      if (isBoolean(opts)) {\n        ctx.showHidden = opts;\n      } else if (opts) {\n        exports._extend(ctx, opts);\n      }\n      if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n      if (isUndefined(ctx.depth)) ctx.depth = 2;\n      if (isUndefined(ctx.colors)) ctx.colors = false;\n      if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n      if (ctx.colors) ctx.stylize = stylizeWithColor;\n      return formatValue(ctx, obj, ctx.depth);\n    }\n    exports.inspect = inspect;\n    inspect.colors = {\n      \"bold\": [1, 22],\n      \"italic\": [3, 23],\n      \"underline\": [4, 24],\n      \"inverse\": [7, 27],\n      \"white\": [37, 39],\n      \"grey\": [90, 39],\n      \"black\": [30, 39],\n      \"blue\": [34, 39],\n      \"cyan\": [36, 39],\n      \"green\": [32, 39],\n      \"magenta\": [35, 39],\n      \"red\": [31, 39],\n      \"yellow\": [33, 39]\n    };\n    inspect.styles = {\n      \"special\": \"cyan\",\n      \"number\": \"yellow\",\n      \"boolean\": \"yellow\",\n      \"undefined\": \"grey\",\n      \"null\": \"bold\",\n      \"string\": \"green\",\n      \"date\": \"magenta\",\n      // \"name\": intentionally not styling\n      \"regexp\": \"red\"\n    };\n    function stylizeWithColor(str, styleType) {\n      var style = inspect.styles[styleType];\n      if (style) {\n        return \"\\x1B[\" + inspect.colors[style][0] + \"m\" + str + \"\\x1B[\" + inspect.colors[style][1] + \"m\";\n      } else {\n        return str;\n      }\n    }\n    function stylizeNoColor(str, styleType) {\n      return str;\n    }\n    function arrayToHash(array) {\n      var hash2 = {};\n      array.forEach(function(val, idx) {\n        hash2[val] = true;\n      });\n      return hash2;\n    }\n    function formatValue(ctx, value, recurseTimes) {\n      if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n        var ret = value.inspect(recurseTimes, ctx);\n        if (!isString(ret)) {\n          ret = formatValue(ctx, ret, recurseTimes);\n        }\n        return ret;\n      }\n      var primitive = formatPrimitive(ctx, value);\n      if (primitive) {\n        return primitive;\n      }\n      var keys = Object.keys(value);\n      var visibleKeys = arrayToHash(keys);\n      if (ctx.showHidden) {\n        keys = Object.getOwnPropertyNames(value);\n      }\n      if (isError(value) && (keys.indexOf(\"message\") >= 0 || keys.indexOf(\"description\") >= 0)) {\n        return formatError(value);\n      }\n      if (keys.length === 0) {\n        if (isFunction(value)) {\n          var name = value.name ? \": \" + value.name : \"\";\n          return ctx.stylize(\"[Function\" + name + \"]\", \"special\");\n        }\n        if (isRegExp(value)) {\n          return ctx.stylize(RegExp.prototype.toString.call(value), \"regexp\");\n        }\n        if (isDate(value)) {\n          return ctx.stylize(Date.prototype.toString.call(value), \"date\");\n        }\n        if (isError(value)) {\n          return formatError(value);\n        }\n      }\n      var base = \"\", array = false, braces = [\"{\", \"}\"];\n      if (isArray2(value)) {\n        array = true;\n        braces = [\"[\", \"]\"];\n      }\n      if (isFunction(value)) {\n        var n = value.name ? \": \" + value.name : \"\";\n        base = \" [Function\" + n + \"]\";\n      }\n      if (isRegExp(value)) {\n        base = \" \" + RegExp.prototype.toString.call(value);\n      }\n      if (isDate(value)) {\n        base = \" \" + Date.prototype.toUTCString.call(value);\n      }\n      if (isError(value)) {\n        base = \" \" + formatError(value);\n      }\n      if (keys.length === 0 && (!array || value.length == 0)) {\n        return braces[0] + base + braces[1];\n      }\n      if (recurseTimes < 0) {\n        if (isRegExp(value)) {\n          return ctx.stylize(RegExp.prototype.toString.call(value), \"regexp\");\n        } else {\n          return ctx.stylize(\"[Object]\", \"special\");\n        }\n      }\n      ctx.seen.push(value);\n      var output;\n      if (array) {\n        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n      } else {\n        output = keys.map(function(key) {\n          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n        });\n      }\n      ctx.seen.pop();\n      return reduceToSingleString(output, base, braces);\n    }\n    function formatPrimitive(ctx, value) {\n      if (isUndefined(value))\n        return ctx.stylize(\"undefined\", \"undefined\");\n      if (isString(value)) {\n        var simple = \"'\" + JSON.stringify(value).replace(/^\"|\"$/g, \"\").replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"') + \"'\";\n        return ctx.stylize(simple, \"string\");\n      }\n      if (isNumber(value))\n        return ctx.stylize(\"\" + value, \"number\");\n      if (isBoolean(value))\n        return ctx.stylize(\"\" + value, \"boolean\");\n      if (isNull(value))\n        return ctx.stylize(\"null\", \"null\");\n    }\n    function formatError(value) {\n      return \"[\" + Error.prototype.toString.call(value) + \"]\";\n    }\n    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n      var output = [];\n      for (var i = 0, l = value.length; i < l; ++i) {\n        if (hasOwnProperty(value, String(i))) {\n          output.push(formatProperty(\n            ctx,\n            value,\n            recurseTimes,\n            visibleKeys,\n            String(i),\n            true\n          ));\n        } else {\n          output.push(\"\");\n        }\n      }\n      keys.forEach(function(key) {\n        if (!key.match(/^\\d+$/)) {\n          output.push(formatProperty(\n            ctx,\n            value,\n            recurseTimes,\n            visibleKeys,\n            key,\n            true\n          ));\n        }\n      });\n      return output;\n    }\n    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n      var name, str, desc;\n      desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n      if (desc.get) {\n        if (desc.set) {\n          str = ctx.stylize(\"[Getter/Setter]\", \"special\");\n        } else {\n          str = ctx.stylize(\"[Getter]\", \"special\");\n        }\n      } else {\n        if (desc.set) {\n          str = ctx.stylize(\"[Setter]\", \"special\");\n        }\n      }\n      if (!hasOwnProperty(visibleKeys, key)) {\n        name = \"[\" + key + \"]\";\n      }\n      if (!str) {\n        if (ctx.seen.indexOf(desc.value) < 0) {\n          if (isNull(recurseTimes)) {\n            str = formatValue(ctx, desc.value, null);\n          } else {\n            str = formatValue(ctx, desc.value, recurseTimes - 1);\n          }\n          if (str.indexOf(\"\\n\") > -1) {\n            if (array) {\n              str = str.split(\"\\n\").map(function(line) {\n                return \"  \" + line;\n              }).join(\"\\n\").slice(2);\n            } else {\n              str = \"\\n\" + str.split(\"\\n\").map(function(line) {\n                return \"   \" + line;\n              }).join(\"\\n\");\n            }\n          }\n        } else {\n          str = ctx.stylize(\"[Circular]\", \"special\");\n        }\n      }\n      if (isUndefined(name)) {\n        if (array && key.match(/^\\d+$/)) {\n          return str;\n        }\n        name = JSON.stringify(\"\" + key);\n        if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n          name = name.slice(1, -1);\n          name = ctx.stylize(name, \"name\");\n        } else {\n          name = name.replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"').replace(/(^\"|\"$)/g, \"'\");\n          name = ctx.stylize(name, \"string\");\n        }\n      }\n      return name + \": \" + str;\n    }\n    function reduceToSingleString(output, base, braces) {\n      var length = output.reduce(function(prev, cur) {\n        if (cur.indexOf(\"\\n\") >= 0) ;\n        return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, \"\").length + 1;\n      }, 0);\n      if (length > 60) {\n        return braces[0] + (base === \"\" ? \"\" : base + \"\\n \") + \" \" + output.join(\",\\n  \") + \" \" + braces[1];\n      }\n      return braces[0] + base + \" \" + output.join(\", \") + \" \" + braces[1];\n    }\n    exports.types = requireTypes();\n    function isArray2(ar) {\n      return Array.isArray(ar);\n    }\n    exports.isArray = isArray2;\n    function isBoolean(arg) {\n      return typeof arg === \"boolean\";\n    }\n    exports.isBoolean = isBoolean;\n    function isNull(arg) {\n      return arg === null;\n    }\n    exports.isNull = isNull;\n    function isNullOrUndefined(arg) {\n      return arg == null;\n    }\n    exports.isNullOrUndefined = isNullOrUndefined;\n    function isNumber(arg) {\n      return typeof arg === \"number\";\n    }\n    exports.isNumber = isNumber;\n    function isString(arg) {\n      return typeof arg === \"string\";\n    }\n    exports.isString = isString;\n    function isSymbol(arg) {\n      return typeof arg === \"symbol\";\n    }\n    exports.isSymbol = isSymbol;\n    function isUndefined(arg) {\n      return arg === void 0;\n    }\n    exports.isUndefined = isUndefined;\n    function isRegExp(re) {\n      return isObject(re) && objectToString(re) === \"[object RegExp]\";\n    }\n    exports.isRegExp = isRegExp;\n    exports.types.isRegExp = isRegExp;\n    function isObject(arg) {\n      return typeof arg === \"object\" && arg !== null;\n    }\n    exports.isObject = isObject;\n    function isDate(d) {\n      return isObject(d) && objectToString(d) === \"[object Date]\";\n    }\n    exports.isDate = isDate;\n    exports.types.isDate = isDate;\n    function isError(e) {\n      return isObject(e) && (objectToString(e) === \"[object Error]\" || e instanceof Error);\n    }\n    exports.isError = isError;\n    exports.types.isNativeError = isError;\n    function isFunction(arg) {\n      return typeof arg === \"function\";\n    }\n    exports.isFunction = isFunction;\n    function isPrimitive(arg) {\n      return arg === null || typeof arg === \"boolean\" || typeof arg === \"number\" || typeof arg === \"string\" || typeof arg === \"symbol\" || // ES6 symbol\n      typeof arg === \"undefined\";\n    }\n    exports.isPrimitive = isPrimitive;\n    exports.isBuffer = requireIsBufferBrowser();\n    function objectToString(o) {\n      return Object.prototype.toString.call(o);\n    }\n    function pad2(n) {\n      return n < 10 ? \"0\" + n.toString(10) : n.toString(10);\n    }\n    var months = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\"\n    ];\n    function timestamp() {\n      var d = /* @__PURE__ */ new Date();\n      var time = [\n        pad2(d.getHours()),\n        pad2(d.getMinutes()),\n        pad2(d.getSeconds())\n      ].join(\":\");\n      return [d.getDate(), months[d.getMonth()], time].join(\" \");\n    }\n    exports.log = function() {\n      console.log(\"%s - %s\", timestamp(), exports.format.apply(exports, arguments));\n    };\n    exports.inherits = inherits_browserExports;\n    exports._extend = function(origin, add) {\n      if (!add || !isObject(add)) return origin;\n      var keys = Object.keys(add);\n      var i = keys.length;\n      while (i--) {\n        origin[keys[i]] = add[keys[i]];\n      }\n      return origin;\n    };\n    function hasOwnProperty(obj, prop) {\n      return Object.prototype.hasOwnProperty.call(obj, prop);\n    }\n    var kCustomPromisifiedSymbol = typeof Symbol !== \"undefined\" ? Symbol(\"util.promisify.custom\") : void 0;\n    exports.promisify = function promisify(original) {\n      if (typeof original !== \"function\")\n        throw new TypeError('The \"original\" argument must be of type Function');\n      if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n        var fn = original[kCustomPromisifiedSymbol];\n        if (typeof fn !== \"function\") {\n          throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n        }\n        Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n          value: fn,\n          enumerable: false,\n          writable: false,\n          configurable: true\n        });\n        return fn;\n      }\n      function fn() {\n        var promiseResolve, promiseReject;\n        var promise = new Promise(function(resolve2, reject) {\n          promiseResolve = resolve2;\n          promiseReject = reject;\n        });\n        var args = [];\n        for (var i = 0; i < arguments.length; i++) {\n          args.push(arguments[i]);\n        }\n        args.push(function(err, value) {\n          if (err) {\n            promiseReject(err);\n          } else {\n            promiseResolve(value);\n          }\n        });\n        try {\n          original.apply(this, args);\n        } catch (err) {\n          promiseReject(err);\n        }\n        return promise;\n      }\n      Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n      if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n        value: fn,\n        enumerable: false,\n        writable: false,\n        configurable: true\n      });\n      return Object.defineProperties(\n        fn,\n        getOwnPropertyDescriptors(original)\n      );\n    };\n    exports.promisify.custom = kCustomPromisifiedSymbol;\n    function callbackifyOnRejected(reason, cb) {\n      if (!reason) {\n        var newReason = new Error(\"Promise was rejected with a falsy value\");\n        newReason.reason = reason;\n        reason = newReason;\n      }\n      return cb(reason);\n    }\n    function callbackify(original) {\n      if (typeof original !== \"function\") {\n        throw new TypeError('The \"original\" argument must be of type Function');\n      }\n      function callbackified() {\n        var args = [];\n        for (var i = 0; i < arguments.length; i++) {\n          args.push(arguments[i]);\n        }\n        var maybeCb = args.pop();\n        if (typeof maybeCb !== \"function\") {\n          throw new TypeError(\"The last argument must be of type Function\");\n        }\n        var self2 = this;\n        var cb = function() {\n          return maybeCb.apply(self2, arguments);\n        };\n        original.apply(this, args).then(\n          function(ret) {\n            process$1.nextTick(cb.bind(null, null, ret));\n          },\n          function(rej) {\n            process$1.nextTick(callbackifyOnRejected.bind(null, rej, cb));\n          }\n        );\n      }\n      Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n      Object.defineProperties(\n        callbackified,\n        getOwnPropertyDescriptors(original)\n      );\n      return callbackified;\n    }\n    exports.callbackify = callbackify;\n  })(util);\n  return util;\n}\nvar buffer_list;\nvar hasRequiredBuffer_list;\nfunction requireBuffer_list() {\n  if (hasRequiredBuffer_list) return buffer_list;\n  hasRequiredBuffer_list = 1;\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      if (enumerableOnly) symbols = symbols.filter(function(sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n      keys.push.apply(keys, symbols);\n    }\n    return keys;\n  }\n  function _objectSpread(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n      if (i % 2) {\n        ownKeys(Object(source), true).forEach(function(key) {\n          _defineProperty(target, key, source[key]);\n        });\n      } else if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n      } else {\n        ownKeys(Object(source)).forEach(function(key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n    }\n    return target;\n  }\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    return Constructor;\n  }\n  var _require = requireBuffer(), Buffer2 = _require.Buffer;\n  var _require2 = requireUtil(), inspect = _require2.inspect;\n  var custom = inspect && inspect.custom || \"inspect\";\n  function copyBuffer(src, target, offset) {\n    Buffer2.prototype.copy.call(src, target, offset);\n  }\n  buffer_list = /* @__PURE__ */ function() {\n    function BufferList() {\n      _classCallCheck(this, BufferList);\n      this.head = null;\n      this.tail = null;\n      this.length = 0;\n    }\n    _createClass(BufferList, [{\n      key: \"push\",\n      value: function push(v) {\n        var entry = {\n          data: v,\n          next: null\n        };\n        if (this.length > 0) this.tail.next = entry;\n        else this.head = entry;\n        this.tail = entry;\n        ++this.length;\n      }\n    }, {\n      key: \"unshift\",\n      value: function unshift(v) {\n        var entry = {\n          data: v,\n          next: this.head\n        };\n        if (this.length === 0) this.tail = entry;\n        this.head = entry;\n        ++this.length;\n      }\n    }, {\n      key: \"shift\",\n      value: function shift() {\n        if (this.length === 0) return;\n        var ret = this.head.data;\n        if (this.length === 1) this.head = this.tail = null;\n        else this.head = this.head.next;\n        --this.length;\n        return ret;\n      }\n    }, {\n      key: \"clear\",\n      value: function clear() {\n        this.head = this.tail = null;\n        this.length = 0;\n      }\n    }, {\n      key: \"join\",\n      value: function join(s2) {\n        if (this.length === 0) return \"\";\n        var p = this.head;\n        var ret = \"\" + p.data;\n        while (p = p.next) {\n          ret += s2 + p.data;\n        }\n        return ret;\n      }\n    }, {\n      key: \"concat\",\n      value: function concat(n) {\n        if (this.length === 0) return Buffer2.alloc(0);\n        var ret = Buffer2.allocUnsafe(n >>> 0);\n        var p = this.head;\n        var i = 0;\n        while (p) {\n          copyBuffer(p.data, ret, i);\n          i += p.data.length;\n          p = p.next;\n        }\n        return ret;\n      }\n      // Consumes a specified amount of bytes or characters from the buffered data.\n    }, {\n      key: \"consume\",\n      value: function consume(n, hasStrings) {\n        var ret;\n        if (n < this.head.data.length) {\n          ret = this.head.data.slice(0, n);\n          this.head.data = this.head.data.slice(n);\n        } else if (n === this.head.data.length) {\n          ret = this.shift();\n        } else {\n          ret = hasStrings ? this._getString(n) : this._getBuffer(n);\n        }\n        return ret;\n      }\n    }, {\n      key: \"first\",\n      value: function first() {\n        return this.head.data;\n      }\n      // Consumes a specified amount of characters from the buffered data.\n    }, {\n      key: \"_getString\",\n      value: function _getString(n) {\n        var p = this.head;\n        var c = 1;\n        var ret = p.data;\n        n -= ret.length;\n        while (p = p.next) {\n          var str = p.data;\n          var nb = n > str.length ? str.length : n;\n          if (nb === str.length) ret += str;\n          else ret += str.slice(0, n);\n          n -= nb;\n          if (n === 0) {\n            if (nb === str.length) {\n              ++c;\n              if (p.next) this.head = p.next;\n              else this.head = this.tail = null;\n            } else {\n              this.head = p;\n              p.data = str.slice(nb);\n            }\n            break;\n          }\n          ++c;\n        }\n        this.length -= c;\n        return ret;\n      }\n      // Consumes a specified amount of bytes from the buffered data.\n    }, {\n      key: \"_getBuffer\",\n      value: function _getBuffer(n) {\n        var ret = Buffer2.allocUnsafe(n);\n        var p = this.head;\n        var c = 1;\n        p.data.copy(ret);\n        n -= p.data.length;\n        while (p = p.next) {\n          var buf = p.data;\n          var nb = n > buf.length ? buf.length : n;\n          buf.copy(ret, ret.length - n, 0, nb);\n          n -= nb;\n          if (n === 0) {\n            if (nb === buf.length) {\n              ++c;\n              if (p.next) this.head = p.next;\n              else this.head = this.tail = null;\n            } else {\n              this.head = p;\n              p.data = buf.slice(nb);\n            }\n            break;\n          }\n          ++c;\n        }\n        this.length -= c;\n        return ret;\n      }\n      // Make sure the linked list only shows the minimal necessary information.\n    }, {\n      key: custom,\n      value: function value(_, options2) {\n        return inspect(this, _objectSpread({}, options2, {\n          // Only inspect one level.\n          depth: 0,\n          // It should not recurse.\n          customInspect: false\n        }));\n      }\n    }]);\n    return BufferList;\n  }();\n  return buffer_list;\n}\nvar destroy_1;\nvar hasRequiredDestroy;\nfunction requireDestroy() {\n  if (hasRequiredDestroy) return destroy_1;\n  hasRequiredDestroy = 1;\n  function destroy(err, cb) {\n    var _this = this;\n    var readableDestroyed = this._readableState && this._readableState.destroyed;\n    var writableDestroyed = this._writableState && this._writableState.destroyed;\n    if (readableDestroyed || writableDestroyed) {\n      if (cb) {\n        cb(err);\n      } else if (err) {\n        if (!this._writableState) {\n          process$1.nextTick(emitErrorNT, this, err);\n        } else if (!this._writableState.errorEmitted) {\n          this._writableState.errorEmitted = true;\n          process$1.nextTick(emitErrorNT, this, err);\n        }\n      }\n      return this;\n    }\n    if (this._readableState) {\n      this._readableState.destroyed = true;\n    }\n    if (this._writableState) {\n      this._writableState.destroyed = true;\n    }\n    this._destroy(err || null, function(err2) {\n      if (!cb && err2) {\n        if (!_this._writableState) {\n          process$1.nextTick(emitErrorAndCloseNT, _this, err2);\n        } else if (!_this._writableState.errorEmitted) {\n          _this._writableState.errorEmitted = true;\n          process$1.nextTick(emitErrorAndCloseNT, _this, err2);\n        } else {\n          process$1.nextTick(emitCloseNT, _this);\n        }\n      } else if (cb) {\n        process$1.nextTick(emitCloseNT, _this);\n        cb(err2);\n      } else {\n        process$1.nextTick(emitCloseNT, _this);\n      }\n    });\n    return this;\n  }\n  function emitErrorAndCloseNT(self2, err) {\n    emitErrorNT(self2, err);\n    emitCloseNT(self2);\n  }\n  function emitCloseNT(self2) {\n    if (self2._writableState && !self2._writableState.emitClose) return;\n    if (self2._readableState && !self2._readableState.emitClose) return;\n    self2.emit(\"close\");\n  }\n  function undestroy() {\n    if (this._readableState) {\n      this._readableState.destroyed = false;\n      this._readableState.reading = false;\n      this._readableState.ended = false;\n      this._readableState.endEmitted = false;\n    }\n    if (this._writableState) {\n      this._writableState.destroyed = false;\n      this._writableState.ended = false;\n      this._writableState.ending = false;\n      this._writableState.finalCalled = false;\n      this._writableState.prefinished = false;\n      this._writableState.finished = false;\n      this._writableState.errorEmitted = false;\n    }\n  }\n  function emitErrorNT(self2, err) {\n    self2.emit(\"error\", err);\n  }\n  function errorOrDestroy(stream, err) {\n    var rState = stream._readableState;\n    var wState = stream._writableState;\n    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);\n    else stream.emit(\"error\", err);\n  }\n  destroy_1 = {\n    destroy,\n    undestroy,\n    errorOrDestroy\n  };\n  return destroy_1;\n}\nvar errorsBrowser = {};\nvar hasRequiredErrorsBrowser;\nfunction requireErrorsBrowser() {\n  if (hasRequiredErrorsBrowser) return errorsBrowser;\n  hasRequiredErrorsBrowser = 1;\n  function _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n  }\n  var codes = {};\n  function createErrorType(code, message, Base) {\n    if (!Base) {\n      Base = Error;\n    }\n    function getMessage(arg1, arg2, arg3) {\n      if (typeof message === \"string\") {\n        return message;\n      } else {\n        return message(arg1, arg2, arg3);\n      }\n    }\n    var NodeError = /* @__PURE__ */ function(_Base) {\n      _inheritsLoose(NodeError2, _Base);\n      function NodeError2(arg1, arg2, arg3) {\n        return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;\n      }\n      return NodeError2;\n    }(Base);\n    NodeError.prototype.name = Base.name;\n    NodeError.prototype.code = code;\n    codes[code] = NodeError;\n  }\n  function oneOf(expected, thing) {\n    if (Array.isArray(expected)) {\n      var len = expected.length;\n      expected = expected.map(function(i) {\n        return String(i);\n      });\n      if (len > 2) {\n        return \"one of \".concat(thing, \" \").concat(expected.slice(0, len - 1).join(\", \"), \", or \") + expected[len - 1];\n      } else if (len === 2) {\n        return \"one of \".concat(thing, \" \").concat(expected[0], \" or \").concat(expected[1]);\n      } else {\n        return \"of \".concat(thing, \" \").concat(expected[0]);\n      }\n    } else {\n      return \"of \".concat(thing, \" \").concat(String(expected));\n    }\n  }\n  function startsWith(str, search, pos) {\n    return str.substr(0, search.length) === search;\n  }\n  function endsWith(str, search, this_len) {\n    if (this_len === void 0 || this_len > str.length) {\n      this_len = str.length;\n    }\n    return str.substring(this_len - search.length, this_len) === search;\n  }\n  function includes(str, search, start) {\n    if (typeof start !== \"number\") {\n      start = 0;\n    }\n    if (start + search.length > str.length) {\n      return false;\n    } else {\n      return str.indexOf(search, start) !== -1;\n    }\n  }\n  createErrorType(\"ERR_INVALID_OPT_VALUE\", function(name, value) {\n    return 'The value \"' + value + '\" is invalid for option \"' + name + '\"';\n  }, TypeError);\n  createErrorType(\"ERR_INVALID_ARG_TYPE\", function(name, expected, actual) {\n    var determiner;\n    if (typeof expected === \"string\" && startsWith(expected, \"not \")) {\n      determiner = \"must not be\";\n      expected = expected.replace(/^not /, \"\");\n    } else {\n      determiner = \"must be\";\n    }\n    var msg;\n    if (endsWith(name, \" argument\")) {\n      msg = \"The \".concat(name, \" \").concat(determiner, \" \").concat(oneOf(expected, \"type\"));\n    } else {\n      var type2 = includes(name, \".\") ? \"property\" : \"argument\";\n      msg = 'The \"'.concat(name, '\" ').concat(type2, \" \").concat(determiner, \" \").concat(oneOf(expected, \"type\"));\n    }\n    msg += \". Received type \".concat(typeof actual);\n    return msg;\n  }, TypeError);\n  createErrorType(\"ERR_STREAM_PUSH_AFTER_EOF\", \"stream.push() after EOF\");\n  createErrorType(\"ERR_METHOD_NOT_IMPLEMENTED\", function(name) {\n    return \"The \" + name + \" method is not implemented\";\n  });\n  createErrorType(\"ERR_STREAM_PREMATURE_CLOSE\", \"Premature close\");\n  createErrorType(\"ERR_STREAM_DESTROYED\", function(name) {\n    return \"Cannot call \" + name + \" after a stream was destroyed\";\n  });\n  createErrorType(\"ERR_MULTIPLE_CALLBACK\", \"Callback called multiple times\");\n  createErrorType(\"ERR_STREAM_CANNOT_PIPE\", \"Cannot pipe, not readable\");\n  createErrorType(\"ERR_STREAM_WRITE_AFTER_END\", \"write after end\");\n  createErrorType(\"ERR_STREAM_NULL_VALUES\", \"May not write null values to stream\", TypeError);\n  createErrorType(\"ERR_UNKNOWN_ENCODING\", function(arg) {\n    return \"Unknown encoding: \" + arg;\n  }, TypeError);\n  createErrorType(\"ERR_STREAM_UNSHIFT_AFTER_END_EVENT\", \"stream.unshift() after end event\");\n  errorsBrowser.codes = codes;\n  return errorsBrowser;\n}\nvar state;\nvar hasRequiredState;\nfunction requireState() {\n  if (hasRequiredState) return state;\n  hasRequiredState = 1;\n  var ERR_INVALID_OPT_VALUE = requireErrorsBrowser().codes.ERR_INVALID_OPT_VALUE;\n  function highWaterMarkFrom(options2, isDuplex, duplexKey) {\n    return options2.highWaterMark != null ? options2.highWaterMark : isDuplex ? options2[duplexKey] : null;\n  }\n  function getHighWaterMark(state2, options2, duplexKey, isDuplex) {\n    var hwm = highWaterMarkFrom(options2, isDuplex, duplexKey);\n    if (hwm != null) {\n      if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {\n        var name = isDuplex ? duplexKey : \"highWaterMark\";\n        throw new ERR_INVALID_OPT_VALUE(name, hwm);\n      }\n      return Math.floor(hwm);\n    }\n    return state2.objectMode ? 16 : 16 * 1024;\n  }\n  state = {\n    getHighWaterMark\n  };\n  return state;\n}\nvar browser;\nvar hasRequiredBrowser;\nfunction requireBrowser() {\n  if (hasRequiredBrowser) return browser;\n  hasRequiredBrowser = 1;\n  browser = deprecate;\n  function deprecate(fn, msg) {\n    if (config(\"noDeprecation\")) {\n      return fn;\n    }\n    var warned = false;\n    function deprecated() {\n      if (!warned) {\n        if (config(\"throwDeprecation\")) {\n          throw new Error(msg);\n        } else if (config(\"traceDeprecation\")) {\n          console.trace(msg);\n        } else {\n          console.warn(msg);\n        }\n        warned = true;\n      }\n      return fn.apply(this, arguments);\n    }\n    return deprecated;\n  }\n  function config(name) {\n    try {\n      if (!commonjsGlobal.localStorage) return false;\n    } catch (_) {\n      return false;\n    }\n    var val = commonjsGlobal.localStorage[name];\n    if (null == val) return false;\n    return String(val).toLowerCase() === \"true\";\n  }\n  return browser;\n}\nvar _stream_writable;\nvar hasRequired_stream_writable;\nfunction require_stream_writable() {\n  if (hasRequired_stream_writable) return _stream_writable;\n  hasRequired_stream_writable = 1;\n  _stream_writable = Writable;\n  function CorkedRequest(state2) {\n    var _this = this;\n    this.next = null;\n    this.entry = null;\n    this.finish = function() {\n      onCorkedFinish(_this, state2);\n    };\n  }\n  var Duplex;\n  Writable.WritableState = WritableState;\n  var internalUtil = {\n    deprecate: requireBrowser()\n  };\n  var Stream2 = requireStreamBrowser();\n  var Buffer2 = requireBuffer().Buffer;\n  var OurUint8Array = commonjsGlobal.Uint8Array || function() {\n  };\n  function _uint8ArrayToBuffer(chunk) {\n    return Buffer2.from(chunk);\n  }\n  function _isUint8Array(obj) {\n    return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;\n  }\n  var destroyImpl = requireDestroy();\n  var _require = requireState(), getHighWaterMark = _require.getHighWaterMark;\n  var _require$codes = requireErrorsBrowser().codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;\n  var errorOrDestroy = destroyImpl.errorOrDestroy;\n  inherits_browserExports(Writable, Stream2);\n  function nop() {\n  }\n  function WritableState(options2, stream, isDuplex) {\n    Duplex = Duplex || require_stream_duplex();\n    options2 = options2 || {};\n    if (typeof isDuplex !== \"boolean\") isDuplex = stream instanceof Duplex;\n    this.objectMode = !!options2.objectMode;\n    if (isDuplex) this.objectMode = this.objectMode || !!options2.writableObjectMode;\n    this.highWaterMark = getHighWaterMark(this, options2, \"writableHighWaterMark\", isDuplex);\n    this.finalCalled = false;\n    this.needDrain = false;\n    this.ending = false;\n    this.ended = false;\n    this.finished = false;\n    this.destroyed = false;\n    var noDecode = options2.decodeStrings === false;\n    this.decodeStrings = !noDecode;\n    this.defaultEncoding = options2.defaultEncoding || \"utf8\";\n    this.length = 0;\n    this.writing = false;\n    this.corked = 0;\n    this.sync = true;\n    this.bufferProcessing = false;\n    this.onwrite = function(er) {\n      onwrite(stream, er);\n    };\n    this.writecb = null;\n    this.writelen = 0;\n    this.bufferedRequest = null;\n    this.lastBufferedRequest = null;\n    this.pendingcb = 0;\n    this.prefinished = false;\n    this.errorEmitted = false;\n    this.emitClose = options2.emitClose !== false;\n    this.autoDestroy = !!options2.autoDestroy;\n    this.bufferedRequestCount = 0;\n    this.corkedRequestsFree = new CorkedRequest(this);\n  }\n  WritableState.prototype.getBuffer = function getBuffer() {\n    var current = this.bufferedRequest;\n    var out = [];\n    while (current) {\n      out.push(current);\n      current = current.next;\n    }\n    return out;\n  };\n  (function() {\n    try {\n      Object.defineProperty(WritableState.prototype, \"buffer\", {\n        get: internalUtil.deprecate(function writableStateBufferGetter() {\n          return this.getBuffer();\n        }, \"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.\", \"DEP0003\")\n      });\n    } catch (_) {\n    }\n  })();\n  var realHasInstance;\n  if (typeof Symbol === \"function\" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === \"function\") {\n    realHasInstance = Function.prototype[Symbol.hasInstance];\n    Object.defineProperty(Writable, Symbol.hasInstance, {\n      value: function value(object) {\n        if (realHasInstance.call(this, object)) return true;\n        if (this !== Writable) return false;\n        return object && object._writableState instanceof WritableState;\n      }\n    });\n  } else {\n    realHasInstance = function realHasInstance2(object) {\n      return object instanceof this;\n    };\n  }\n  function Writable(options2) {\n    Duplex = Duplex || require_stream_duplex();\n    var isDuplex = this instanceof Duplex;\n    if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options2);\n    this._writableState = new WritableState(options2, this, isDuplex);\n    this.writable = true;\n    if (options2) {\n      if (typeof options2.write === \"function\") this._write = options2.write;\n      if (typeof options2.writev === \"function\") this._writev = options2.writev;\n      if (typeof options2.destroy === \"function\") this._destroy = options2.destroy;\n      if (typeof options2.final === \"function\") this._final = options2.final;\n    }\n    Stream2.call(this);\n  }\n  Writable.prototype.pipe = function() {\n    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n  };\n  function writeAfterEnd(stream, cb) {\n    var er = new ERR_STREAM_WRITE_AFTER_END();\n    errorOrDestroy(stream, er);\n    process$1.nextTick(cb, er);\n  }\n  function validChunk(stream, state2, chunk, cb) {\n    var er;\n    if (chunk === null) {\n      er = new ERR_STREAM_NULL_VALUES();\n    } else if (typeof chunk !== \"string\" && !state2.objectMode) {\n      er = new ERR_INVALID_ARG_TYPE(\"chunk\", [\"string\", \"Buffer\"], chunk);\n    }\n    if (er) {\n      errorOrDestroy(stream, er);\n      process$1.nextTick(cb, er);\n      return false;\n    }\n    return true;\n  }\n  Writable.prototype.write = function(chunk, encoding, cb) {\n    var state2 = this._writableState;\n    var ret = false;\n    var isBuf = !state2.objectMode && _isUint8Array(chunk);\n    if (isBuf && !Buffer2.isBuffer(chunk)) {\n      chunk = _uint8ArrayToBuffer(chunk);\n    }\n    if (typeof encoding === \"function\") {\n      cb = encoding;\n      encoding = null;\n    }\n    if (isBuf) encoding = \"buffer\";\n    else if (!encoding) encoding = state2.defaultEncoding;\n    if (typeof cb !== \"function\") cb = nop;\n    if (state2.ending) writeAfterEnd(this, cb);\n    else if (isBuf || validChunk(this, state2, chunk, cb)) {\n      state2.pendingcb++;\n      ret = writeOrBuffer(this, state2, isBuf, chunk, encoding, cb);\n    }\n    return ret;\n  };\n  Writable.prototype.cork = function() {\n    this._writableState.corked++;\n  };\n  Writable.prototype.uncork = function() {\n    var state2 = this._writableState;\n    if (state2.corked) {\n      state2.corked--;\n      if (!state2.writing && !state2.corked && !state2.bufferProcessing && state2.bufferedRequest) clearBuffer(this, state2);\n    }\n  };\n  Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n    if (typeof encoding === \"string\") encoding = encoding.toLowerCase();\n    if (!([\"hex\", \"utf8\", \"utf-8\", \"ascii\", \"binary\", \"base64\", \"ucs2\", \"ucs-2\", \"utf16le\", \"utf-16le\", \"raw\"].indexOf((encoding + \"\").toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);\n    this._writableState.defaultEncoding = encoding;\n    return this;\n  };\n  Object.defineProperty(Writable.prototype, \"writableBuffer\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n      return this._writableState && this._writableState.getBuffer();\n    }\n  });\n  function decodeChunk(state2, chunk, encoding) {\n    if (!state2.objectMode && state2.decodeStrings !== false && typeof chunk === \"string\") {\n      chunk = Buffer2.from(chunk, encoding);\n    }\n    return chunk;\n  }\n  Object.defineProperty(Writable.prototype, \"writableHighWaterMark\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n      return this._writableState.highWaterMark;\n    }\n  });\n  function writeOrBuffer(stream, state2, isBuf, chunk, encoding, cb) {\n    if (!isBuf) {\n      var newChunk = decodeChunk(state2, chunk, encoding);\n      if (chunk !== newChunk) {\n        isBuf = true;\n        encoding = \"buffer\";\n        chunk = newChunk;\n      }\n    }\n    var len = state2.objectMode ? 1 : chunk.length;\n    state2.length += len;\n    var ret = state2.length < state2.highWaterMark;\n    if (!ret) state2.needDrain = true;\n    if (state2.writing || state2.corked) {\n      var last = state2.lastBufferedRequest;\n      state2.lastBufferedRequest = {\n        chunk,\n        encoding,\n        isBuf,\n        callback: cb,\n        next: null\n      };\n      if (last) {\n        last.next = state2.lastBufferedRequest;\n      } else {\n        state2.bufferedRequest = state2.lastBufferedRequest;\n      }\n      state2.bufferedRequestCount += 1;\n    } else {\n      doWrite(stream, state2, false, len, chunk, encoding, cb);\n    }\n    return ret;\n  }\n  function doWrite(stream, state2, writev, len, chunk, encoding, cb) {\n    state2.writelen = len;\n    state2.writecb = cb;\n    state2.writing = true;\n    state2.sync = true;\n    if (state2.destroyed) state2.onwrite(new ERR_STREAM_DESTROYED(\"write\"));\n    else if (writev) stream._writev(chunk, state2.onwrite);\n    else stream._write(chunk, encoding, state2.onwrite);\n    state2.sync = false;\n  }\n  function onwriteError(stream, state2, sync, er, cb) {\n    --state2.pendingcb;\n    if (sync) {\n      process$1.nextTick(cb, er);\n      process$1.nextTick(finishMaybe, stream, state2);\n      stream._writableState.errorEmitted = true;\n      errorOrDestroy(stream, er);\n    } else {\n      cb(er);\n      stream._writableState.errorEmitted = true;\n      errorOrDestroy(stream, er);\n      finishMaybe(stream, state2);\n    }\n  }\n  function onwriteStateUpdate(state2) {\n    state2.writing = false;\n    state2.writecb = null;\n    state2.length -= state2.writelen;\n    state2.writelen = 0;\n  }\n  function onwrite(stream, er) {\n    var state2 = stream._writableState;\n    var sync = state2.sync;\n    var cb = state2.writecb;\n    if (typeof cb !== \"function\") throw new ERR_MULTIPLE_CALLBACK();\n    onwriteStateUpdate(state2);\n    if (er) onwriteError(stream, state2, sync, er, cb);\n    else {\n      var finished = needFinish(state2) || stream.destroyed;\n      if (!finished && !state2.corked && !state2.bufferProcessing && state2.bufferedRequest) {\n        clearBuffer(stream, state2);\n      }\n      if (sync) {\n        process$1.nextTick(afterWrite, stream, state2, finished, cb);\n      } else {\n        afterWrite(stream, state2, finished, cb);\n      }\n    }\n  }\n  function afterWrite(stream, state2, finished, cb) {\n    if (!finished) onwriteDrain(stream, state2);\n    state2.pendingcb--;\n    cb();\n    finishMaybe(stream, state2);\n  }\n  function onwriteDrain(stream, state2) {\n    if (state2.length === 0 && state2.needDrain) {\n      state2.needDrain = false;\n      stream.emit(\"drain\");\n    }\n  }\n  function clearBuffer(stream, state2) {\n    state2.bufferProcessing = true;\n    var entry = state2.bufferedRequest;\n    if (stream._writev && entry && entry.next) {\n      var l = state2.bufferedRequestCount;\n      var buffer2 = new Array(l);\n      var holder = state2.corkedRequestsFree;\n      holder.entry = entry;\n      var count = 0;\n      var allBuffers = true;\n      while (entry) {\n        buffer2[count] = entry;\n        if (!entry.isBuf) allBuffers = false;\n        entry = entry.next;\n        count += 1;\n      }\n      buffer2.allBuffers = allBuffers;\n      doWrite(stream, state2, true, state2.length, buffer2, \"\", holder.finish);\n      state2.pendingcb++;\n      state2.lastBufferedRequest = null;\n      if (holder.next) {\n        state2.corkedRequestsFree = holder.next;\n        holder.next = null;\n      } else {\n        state2.corkedRequestsFree = new CorkedRequest(state2);\n      }\n      state2.bufferedRequestCount = 0;\n    } else {\n      while (entry) {\n        var chunk = entry.chunk;\n        var encoding = entry.encoding;\n        var cb = entry.callback;\n        var len = state2.objectMode ? 1 : chunk.length;\n        doWrite(stream, state2, false, len, chunk, encoding, cb);\n        entry = entry.next;\n        state2.bufferedRequestCount--;\n        if (state2.writing) {\n          break;\n        }\n      }\n      if (entry === null) state2.lastBufferedRequest = null;\n    }\n    state2.bufferedRequest = entry;\n    state2.bufferProcessing = false;\n  }\n  Writable.prototype._write = function(chunk, encoding, cb) {\n    cb(new ERR_METHOD_NOT_IMPLEMENTED(\"_write()\"));\n  };\n  Writable.prototype._writev = null;\n  Writable.prototype.end = function(chunk, encoding, cb) {\n    var state2 = this._writableState;\n    if (typeof chunk === \"function\") {\n      cb = chunk;\n      chunk = null;\n      encoding = null;\n    } else if (typeof encoding === \"function\") {\n      cb = encoding;\n      encoding = null;\n    }\n    if (chunk !== null && chunk !== void 0) this.write(chunk, encoding);\n    if (state2.corked) {\n      state2.corked = 1;\n      this.uncork();\n    }\n    if (!state2.ending) endWritable(this, state2, cb);\n    return this;\n  };\n  Object.defineProperty(Writable.prototype, \"writableLength\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n      return this._writableState.length;\n    }\n  });\n  function needFinish(state2) {\n    return state2.ending && state2.length === 0 && state2.bufferedRequest === null && !state2.finished && !state2.writing;\n  }\n  function callFinal(stream, state2) {\n    stream._final(function(err) {\n      state2.pendingcb--;\n      if (err) {\n        errorOrDestroy(stream, err);\n      }\n      state2.prefinished = true;\n      stream.emit(\"prefinish\");\n      finishMaybe(stream, state2);\n    });\n  }\n  function prefinish(stream, state2) {\n    if (!state2.prefinished && !state2.finalCalled) {\n      if (typeof stream._final === \"function\" && !state2.destroyed) {\n        state2.pendingcb++;\n        state2.finalCalled = true;\n        process$1.nextTick(callFinal, stream, state2);\n      } else {\n        state2.prefinished = true;\n        stream.emit(\"prefinish\");\n      }\n    }\n  }\n  function finishMaybe(stream, state2) {\n    var need = needFinish(state2);\n    if (need) {\n      prefinish(stream, state2);\n      if (state2.pendingcb === 0) {\n        state2.finished = true;\n        stream.emit(\"finish\");\n        if (state2.autoDestroy) {\n          var rState = stream._readableState;\n          if (!rState || rState.autoDestroy && rState.endEmitted) {\n            stream.destroy();\n          }\n        }\n      }\n    }\n    return need;\n  }\n  function endWritable(stream, state2, cb) {\n    state2.ending = true;\n    finishMaybe(stream, state2);\n    if (cb) {\n      if (state2.finished) process$1.nextTick(cb);\n      else stream.once(\"finish\", cb);\n    }\n    state2.ended = true;\n    stream.writable = false;\n  }\n  function onCorkedFinish(corkReq, state2, err) {\n    var entry = corkReq.entry;\n    corkReq.entry = null;\n    while (entry) {\n      var cb = entry.callback;\n      state2.pendingcb--;\n      cb(err);\n      entry = entry.next;\n    }\n    state2.corkedRequestsFree.next = corkReq;\n  }\n  Object.defineProperty(Writable.prototype, \"destroyed\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n      if (this._writableState === void 0) {\n        return false;\n      }\n      return this._writableState.destroyed;\n    },\n    set: function set(value) {\n      if (!this._writableState) {\n        return;\n      }\n      this._writableState.destroyed = value;\n    }\n  });\n  Writable.prototype.destroy = destroyImpl.destroy;\n  Writable.prototype._undestroy = destroyImpl.undestroy;\n  Writable.prototype._destroy = function(err, cb) {\n    cb(err);\n  };\n  return _stream_writable;\n}\nvar _stream_duplex;\nvar hasRequired_stream_duplex;\nfunction require_stream_duplex() {\n  if (hasRequired_stream_duplex) return _stream_duplex;\n  hasRequired_stream_duplex = 1;\n  var objectKeys = Object.keys || function(obj) {\n    var keys2 = [];\n    for (var key in obj) {\n      keys2.push(key);\n    }\n    return keys2;\n  };\n  _stream_duplex = Duplex;\n  var Readable = require_stream_readable();\n  var Writable = require_stream_writable();\n  inherits_browserExports(Duplex, Readable);\n  {\n    var keys = objectKeys(Writable.prototype);\n    for (var v = 0; v < keys.length; v++) {\n      var method = keys[v];\n      if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n    }\n  }\n  function Duplex(options2) {\n    if (!(this instanceof Duplex)) return new Duplex(options2);\n    Readable.call(this, options2);\n    Writable.call(this, options2);\n    this.allowHalfOpen = true;\n    if (options2) {\n      if (options2.readable === false) this.readable = false;\n      if (options2.writable === false) this.writable = false;\n      if (options2.allowHalfOpen === false) {\n        this.allowHalfOpen = false;\n        this.once(\"end\", onend);\n      }\n    }\n  }\n  Object.defineProperty(Duplex.prototype, \"writableHighWaterMark\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n      return this._writableState.highWaterMark;\n    }\n  });\n  Object.defineProperty(Duplex.prototype, \"writableBuffer\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n      return this._writableState && this._writableState.getBuffer();\n    }\n  });\n  Object.defineProperty(Duplex.prototype, \"writableLength\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n      return this._writableState.length;\n    }\n  });\n  function onend() {\n    if (this._writableState.ended) return;\n    process$1.nextTick(onEndNT, this);\n  }\n  function onEndNT(self2) {\n    self2.end();\n  }\n  Object.defineProperty(Duplex.prototype, \"destroyed\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n      if (this._readableState === void 0 || this._writableState === void 0) {\n        return false;\n      }\n      return this._readableState.destroyed && this._writableState.destroyed;\n    },\n    set: function set(value) {\n      if (this._readableState === void 0 || this._writableState === void 0) {\n        return;\n      }\n      this._readableState.destroyed = value;\n      this._writableState.destroyed = value;\n    }\n  });\n  return _stream_duplex;\n}\nvar string_decoder = {};\nvar safeBuffer = { exports: {} };\nvar hasRequiredSafeBuffer;\nfunction requireSafeBuffer() {\n  if (hasRequiredSafeBuffer) return safeBuffer.exports;\n  hasRequiredSafeBuffer = 1;\n  (function(module, exports) {\n    var buffer2 = requireBuffer();\n    var Buffer2 = buffer2.Buffer;\n    function copyProps(src, dst) {\n      for (var key in src) {\n        dst[key] = src[key];\n      }\n    }\n    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {\n      module.exports = buffer2;\n    } else {\n      copyProps(buffer2, exports);\n      exports.Buffer = SafeBuffer;\n    }\n    function SafeBuffer(arg, encodingOrOffset, length) {\n      return Buffer2(arg, encodingOrOffset, length);\n    }\n    copyProps(Buffer2, SafeBuffer);\n    SafeBuffer.from = function(arg, encodingOrOffset, length) {\n      if (typeof arg === \"number\") {\n        throw new TypeError(\"Argument must not be a number\");\n      }\n      return Buffer2(arg, encodingOrOffset, length);\n    };\n    SafeBuffer.alloc = function(size, fill, encoding) {\n      if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n      }\n      var buf = Buffer2(size);\n      if (fill !== void 0) {\n        if (typeof encoding === \"string\") {\n          buf.fill(fill, encoding);\n        } else {\n          buf.fill(fill);\n        }\n      } else {\n        buf.fill(0);\n      }\n      return buf;\n    };\n    SafeBuffer.allocUnsafe = function(size) {\n      if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n      }\n      return Buffer2(size);\n    };\n    SafeBuffer.allocUnsafeSlow = function(size) {\n      if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n      }\n      return buffer2.SlowBuffer(size);\n    };\n  })(safeBuffer, safeBuffer.exports);\n  return safeBuffer.exports;\n}\nvar hasRequiredString_decoder;\nfunction requireString_decoder() {\n  if (hasRequiredString_decoder) return string_decoder;\n  hasRequiredString_decoder = 1;\n  var Buffer2 = requireSafeBuffer().Buffer;\n  var isEncoding = Buffer2.isEncoding || function(encoding) {\n    encoding = \"\" + encoding;\n    switch (encoding && encoding.toLowerCase()) {\n      case \"hex\":\n      case \"utf8\":\n      case \"utf-8\":\n      case \"ascii\":\n      case \"binary\":\n      case \"base64\":\n      case \"ucs2\":\n      case \"ucs-2\":\n      case \"utf16le\":\n      case \"utf-16le\":\n      case \"raw\":\n        return true;\n      default:\n        return false;\n    }\n  };\n  function _normalizeEncoding(enc) {\n    if (!enc) return \"utf8\";\n    var retried;\n    while (true) {\n      switch (enc) {\n        case \"utf8\":\n        case \"utf-8\":\n          return \"utf8\";\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n          return \"utf16le\";\n        case \"latin1\":\n        case \"binary\":\n          return \"latin1\";\n        case \"base64\":\n        case \"ascii\":\n        case \"hex\":\n          return enc;\n        default:\n          if (retried) return;\n          enc = (\"\" + enc).toLowerCase();\n          retried = true;\n      }\n    }\n  }\n  function normalizeEncoding(enc) {\n    var nenc = _normalizeEncoding(enc);\n    if (typeof nenc !== \"string\" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc))) throw new Error(\"Unknown encoding: \" + enc);\n    return nenc || enc;\n  }\n  string_decoder.StringDecoder = StringDecoder;\n  function StringDecoder(encoding) {\n    this.encoding = normalizeEncoding(encoding);\n    var nb;\n    switch (this.encoding) {\n      case \"utf16le\":\n        this.text = utf16Text;\n        this.end = utf16End;\n        nb = 4;\n        break;\n      case \"utf8\":\n        this.fillLast = utf8FillLast;\n        nb = 4;\n        break;\n      case \"base64\":\n        this.text = base64Text;\n        this.end = base64End;\n        nb = 3;\n        break;\n      default:\n        this.write = simpleWrite;\n        this.end = simpleEnd;\n        return;\n    }\n    this.lastNeed = 0;\n    this.lastTotal = 0;\n    this.lastChar = Buffer2.allocUnsafe(nb);\n  }\n  StringDecoder.prototype.write = function(buf) {\n    if (buf.length === 0) return \"\";\n    var r2;\n    var i;\n    if (this.lastNeed) {\n      r2 = this.fillLast(buf);\n      if (r2 === void 0) return \"\";\n      i = this.lastNeed;\n      this.lastNeed = 0;\n    } else {\n      i = 0;\n    }\n    if (i < buf.length) return r2 ? r2 + this.text(buf, i) : this.text(buf, i);\n    return r2 || \"\";\n  };\n  StringDecoder.prototype.end = utf8End;\n  StringDecoder.prototype.text = utf8Text;\n  StringDecoder.prototype.fillLast = function(buf) {\n    if (this.lastNeed <= buf.length) {\n      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n      return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n    }\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n    this.lastNeed -= buf.length;\n  };\n  function utf8CheckByte(byte) {\n    if (byte <= 127) return 0;\n    else if (byte >> 5 === 6) return 2;\n    else if (byte >> 4 === 14) return 3;\n    else if (byte >> 3 === 30) return 4;\n    return byte >> 6 === 2 ? -1 : -2;\n  }\n  function utf8CheckIncomplete(self2, buf, i) {\n    var j = buf.length - 1;\n    if (j < i) return 0;\n    var nb = utf8CheckByte(buf[j]);\n    if (nb >= 0) {\n      if (nb > 0) self2.lastNeed = nb - 1;\n      return nb;\n    }\n    if (--j < i || nb === -2) return 0;\n    nb = utf8CheckByte(buf[j]);\n    if (nb >= 0) {\n      if (nb > 0) self2.lastNeed = nb - 2;\n      return nb;\n    }\n    if (--j < i || nb === -2) return 0;\n    nb = utf8CheckByte(buf[j]);\n    if (nb >= 0) {\n      if (nb > 0) {\n        if (nb === 2) nb = 0;\n        else self2.lastNeed = nb - 3;\n      }\n      return nb;\n    }\n    return 0;\n  }\n  function utf8CheckExtraBytes(self2, buf, p) {\n    if ((buf[0] & 192) !== 128) {\n      self2.lastNeed = 0;\n      return \"�\";\n    }\n    if (self2.lastNeed > 1 && buf.length > 1) {\n      if ((buf[1] & 192) !== 128) {\n        self2.lastNeed = 1;\n        return \"�\";\n      }\n      if (self2.lastNeed > 2 && buf.length > 2) {\n        if ((buf[2] & 192) !== 128) {\n          self2.lastNeed = 2;\n          return \"�\";\n        }\n      }\n    }\n  }\n  function utf8FillLast(buf) {\n    var p = this.lastTotal - this.lastNeed;\n    var r2 = utf8CheckExtraBytes(this, buf);\n    if (r2 !== void 0) return r2;\n    if (this.lastNeed <= buf.length) {\n      buf.copy(this.lastChar, p, 0, this.lastNeed);\n      return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n    }\n    buf.copy(this.lastChar, p, 0, buf.length);\n    this.lastNeed -= buf.length;\n  }\n  function utf8Text(buf, i) {\n    var total = utf8CheckIncomplete(this, buf, i);\n    if (!this.lastNeed) return buf.toString(\"utf8\", i);\n    this.lastTotal = total;\n    var end = buf.length - (total - this.lastNeed);\n    buf.copy(this.lastChar, 0, end);\n    return buf.toString(\"utf8\", i, end);\n  }\n  function utf8End(buf) {\n    var r2 = buf && buf.length ? this.write(buf) : \"\";\n    if (this.lastNeed) return r2 + \"�\";\n    return r2;\n  }\n  function utf16Text(buf, i) {\n    if ((buf.length - i) % 2 === 0) {\n      var r2 = buf.toString(\"utf16le\", i);\n      if (r2) {\n        var c = r2.charCodeAt(r2.length - 1);\n        if (c >= 55296 && c <= 56319) {\n          this.lastNeed = 2;\n          this.lastTotal = 4;\n          this.lastChar[0] = buf[buf.length - 2];\n          this.lastChar[1] = buf[buf.length - 1];\n          return r2.slice(0, -1);\n        }\n      }\n      return r2;\n    }\n    this.lastNeed = 1;\n    this.lastTotal = 2;\n    this.lastChar[0] = buf[buf.length - 1];\n    return buf.toString(\"utf16le\", i, buf.length - 1);\n  }\n  function utf16End(buf) {\n    var r2 = buf && buf.length ? this.write(buf) : \"\";\n    if (this.lastNeed) {\n      var end = this.lastTotal - this.lastNeed;\n      return r2 + this.lastChar.toString(\"utf16le\", 0, end);\n    }\n    return r2;\n  }\n  function base64Text(buf, i) {\n    var n = (buf.length - i) % 3;\n    if (n === 0) return buf.toString(\"base64\", i);\n    this.lastNeed = 3 - n;\n    this.lastTotal = 3;\n    if (n === 1) {\n      this.lastChar[0] = buf[buf.length - 1];\n    } else {\n      this.lastChar[0] = buf[buf.length - 2];\n      this.lastChar[1] = buf[buf.length - 1];\n    }\n    return buf.toString(\"base64\", i, buf.length - n);\n  }\n  function base64End(buf) {\n    var r2 = buf && buf.length ? this.write(buf) : \"\";\n    if (this.lastNeed) return r2 + this.lastChar.toString(\"base64\", 0, 3 - this.lastNeed);\n    return r2;\n  }\n  function simpleWrite(buf) {\n    return buf.toString(this.encoding);\n  }\n  function simpleEnd(buf) {\n    return buf && buf.length ? this.write(buf) : \"\";\n  }\n  return string_decoder;\n}\nvar endOfStream;\nvar hasRequiredEndOfStream;\nfunction requireEndOfStream() {\n  if (hasRequiredEndOfStream) return endOfStream;\n  hasRequiredEndOfStream = 1;\n  var ERR_STREAM_PREMATURE_CLOSE = requireErrorsBrowser().codes.ERR_STREAM_PREMATURE_CLOSE;\n  function once3(callback) {\n    var called = false;\n    return function() {\n      if (called) return;\n      called = true;\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      callback.apply(this, args);\n    };\n  }\n  function noop2() {\n  }\n  function isRequest(stream) {\n    return stream.setHeader && typeof stream.abort === \"function\";\n  }\n  function eos(stream, opts, callback) {\n    if (typeof opts === \"function\") return eos(stream, null, opts);\n    if (!opts) opts = {};\n    callback = once3(callback || noop2);\n    var readable = opts.readable || opts.readable !== false && stream.readable;\n    var writable = opts.writable || opts.writable !== false && stream.writable;\n    var onlegacyfinish = function onlegacyfinish2() {\n      if (!stream.writable) onfinish();\n    };\n    var writableEnded = stream._writableState && stream._writableState.finished;\n    var onfinish = function onfinish2() {\n      writable = false;\n      writableEnded = true;\n      if (!readable) callback.call(stream);\n    };\n    var readableEnded = stream._readableState && stream._readableState.endEmitted;\n    var onend = function onend2() {\n      readable = false;\n      readableEnded = true;\n      if (!writable) callback.call(stream);\n    };\n    var onerror = function onerror2(err) {\n      callback.call(stream, err);\n    };\n    var onclose = function onclose2() {\n      var err;\n      if (readable && !readableEnded) {\n        if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n        return callback.call(stream, err);\n      }\n      if (writable && !writableEnded) {\n        if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n        return callback.call(stream, err);\n      }\n    };\n    var onrequest = function onrequest2() {\n      stream.req.on(\"finish\", onfinish);\n    };\n    if (isRequest(stream)) {\n      stream.on(\"complete\", onfinish);\n      stream.on(\"abort\", onclose);\n      if (stream.req) onrequest();\n      else stream.on(\"request\", onrequest);\n    } else if (writable && !stream._writableState) {\n      stream.on(\"end\", onlegacyfinish);\n      stream.on(\"close\", onlegacyfinish);\n    }\n    stream.on(\"end\", onend);\n    stream.on(\"finish\", onfinish);\n    if (opts.error !== false) stream.on(\"error\", onerror);\n    stream.on(\"close\", onclose);\n    return function() {\n      stream.removeListener(\"complete\", onfinish);\n      stream.removeListener(\"abort\", onclose);\n      stream.removeListener(\"request\", onrequest);\n      if (stream.req) stream.req.removeListener(\"finish\", onfinish);\n      stream.removeListener(\"end\", onlegacyfinish);\n      stream.removeListener(\"close\", onlegacyfinish);\n      stream.removeListener(\"finish\", onfinish);\n      stream.removeListener(\"end\", onend);\n      stream.removeListener(\"error\", onerror);\n      stream.removeListener(\"close\", onclose);\n    };\n  }\n  endOfStream = eos;\n  return endOfStream;\n}\nvar async_iterator;\nvar hasRequiredAsync_iterator;\nfunction requireAsync_iterator() {\n  if (hasRequiredAsync_iterator) return async_iterator;\n  hasRequiredAsync_iterator = 1;\n  var _Object$setPrototypeO;\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n  var finished = requireEndOfStream();\n  var kLastResolve = Symbol(\"lastResolve\");\n  var kLastReject = Symbol(\"lastReject\");\n  var kError = Symbol(\"error\");\n  var kEnded = Symbol(\"ended\");\n  var kLastPromise = Symbol(\"lastPromise\");\n  var kHandlePromise = Symbol(\"handlePromise\");\n  var kStream = Symbol(\"stream\");\n  function createIterResult(value, done) {\n    return {\n      value,\n      done\n    };\n  }\n  function readAndResolve(iter) {\n    var resolve2 = iter[kLastResolve];\n    if (resolve2 !== null) {\n      var data = iter[kStream].read();\n      if (data !== null) {\n        iter[kLastPromise] = null;\n        iter[kLastResolve] = null;\n        iter[kLastReject] = null;\n        resolve2(createIterResult(data, false));\n      }\n    }\n  }\n  function onReadable(iter) {\n    process$1.nextTick(readAndResolve, iter);\n  }\n  function wrapForNext(lastPromise, iter) {\n    return function(resolve2, reject) {\n      lastPromise.then(function() {\n        if (iter[kEnded]) {\n          resolve2(createIterResult(void 0, true));\n          return;\n        }\n        iter[kHandlePromise](resolve2, reject);\n      }, reject);\n    };\n  }\n  var AsyncIteratorPrototype = Object.getPrototypeOf(function() {\n  });\n  var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {\n    get stream() {\n      return this[kStream];\n    },\n    next: function next() {\n      var _this = this;\n      var error = this[kError];\n      if (error !== null) {\n        return Promise.reject(error);\n      }\n      if (this[kEnded]) {\n        return Promise.resolve(createIterResult(void 0, true));\n      }\n      if (this[kStream].destroyed) {\n        return new Promise(function(resolve2, reject) {\n          process$1.nextTick(function() {\n            if (_this[kError]) {\n              reject(_this[kError]);\n            } else {\n              resolve2(createIterResult(void 0, true));\n            }\n          });\n        });\n      }\n      var lastPromise = this[kLastPromise];\n      var promise;\n      if (lastPromise) {\n        promise = new Promise(wrapForNext(lastPromise, this));\n      } else {\n        var data = this[kStream].read();\n        if (data !== null) {\n          return Promise.resolve(createIterResult(data, false));\n        }\n        promise = new Promise(this[kHandlePromise]);\n      }\n      this[kLastPromise] = promise;\n      return promise;\n    }\n  }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {\n    return this;\n  }), _defineProperty(_Object$setPrototypeO, \"return\", function _return() {\n    var _this2 = this;\n    return new Promise(function(resolve2, reject) {\n      _this2[kStream].destroy(null, function(err) {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve2(createIterResult(void 0, true));\n      });\n    });\n  }), _Object$setPrototypeO), AsyncIteratorPrototype);\n  var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {\n    var _Object$create;\n    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {\n      value: stream,\n      writable: true\n    }), _defineProperty(_Object$create, kLastResolve, {\n      value: null,\n      writable: true\n    }), _defineProperty(_Object$create, kLastReject, {\n      value: null,\n      writable: true\n    }), _defineProperty(_Object$create, kError, {\n      value: null,\n      writable: true\n    }), _defineProperty(_Object$create, kEnded, {\n      value: stream._readableState.endEmitted,\n      writable: true\n    }), _defineProperty(_Object$create, kHandlePromise, {\n      value: function value(resolve2, reject) {\n        var data = iterator[kStream].read();\n        if (data) {\n          iterator[kLastPromise] = null;\n          iterator[kLastResolve] = null;\n          iterator[kLastReject] = null;\n          resolve2(createIterResult(data, false));\n        } else {\n          iterator[kLastResolve] = resolve2;\n          iterator[kLastReject] = reject;\n        }\n      },\n      writable: true\n    }), _Object$create));\n    iterator[kLastPromise] = null;\n    finished(stream, function(err) {\n      if (err && err.code !== \"ERR_STREAM_PREMATURE_CLOSE\") {\n        var reject = iterator[kLastReject];\n        if (reject !== null) {\n          iterator[kLastPromise] = null;\n          iterator[kLastResolve] = null;\n          iterator[kLastReject] = null;\n          reject(err);\n        }\n        iterator[kError] = err;\n        return;\n      }\n      var resolve2 = iterator[kLastResolve];\n      if (resolve2 !== null) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        resolve2(createIterResult(void 0, true));\n      }\n      iterator[kEnded] = true;\n    });\n    stream.on(\"readable\", onReadable.bind(null, iterator));\n    return iterator;\n  };\n  async_iterator = createReadableStreamAsyncIterator;\n  return async_iterator;\n}\nvar fromBrowser;\nvar hasRequiredFromBrowser;\nfunction requireFromBrowser() {\n  if (hasRequiredFromBrowser) return fromBrowser;\n  hasRequiredFromBrowser = 1;\n  fromBrowser = function() {\n    throw new Error(\"Readable.from is not available in the browser\");\n  };\n  return fromBrowser;\n}\nvar _stream_readable;\nvar hasRequired_stream_readable;\nfunction require_stream_readable() {\n  if (hasRequired_stream_readable) return _stream_readable;\n  hasRequired_stream_readable = 1;\n  _stream_readable = Readable;\n  var Duplex;\n  Readable.ReadableState = ReadableState;\n  eventsExports.EventEmitter;\n  var EElistenerCount = function EElistenerCount2(emitter, type2) {\n    return emitter.listeners(type2).length;\n  };\n  var Stream2 = requireStreamBrowser();\n  var Buffer2 = requireBuffer().Buffer;\n  var OurUint8Array = commonjsGlobal.Uint8Array || function() {\n  };\n  function _uint8ArrayToBuffer(chunk) {\n    return Buffer2.from(chunk);\n  }\n  function _isUint8Array(obj) {\n    return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;\n  }\n  var debugUtil = requireUtil();\n  var debug;\n  if (debugUtil && debugUtil.debuglog) {\n    debug = debugUtil.debuglog(\"stream\");\n  } else {\n    debug = function debug2() {\n    };\n  }\n  var BufferList = requireBuffer_list();\n  var destroyImpl = requireDestroy();\n  var _require = requireState(), getHighWaterMark = _require.getHighWaterMark;\n  var _require$codes = requireErrorsBrowser().codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;\n  var StringDecoder;\n  var createReadableStreamAsyncIterator;\n  var from;\n  inherits_browserExports(Readable, Stream2);\n  var errorOrDestroy = destroyImpl.errorOrDestroy;\n  var kProxyEvents = [\"error\", \"close\", \"destroy\", \"pause\", \"resume\"];\n  function prependListener2(emitter, event, fn) {\n    if (typeof emitter.prependListener === \"function\") return emitter.prependListener(event, fn);\n    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);\n    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);\n    else emitter._events[event] = [fn, emitter._events[event]];\n  }\n  function ReadableState(options2, stream, isDuplex) {\n    Duplex = Duplex || require_stream_duplex();\n    options2 = options2 || {};\n    if (typeof isDuplex !== \"boolean\") isDuplex = stream instanceof Duplex;\n    this.objectMode = !!options2.objectMode;\n    if (isDuplex) this.objectMode = this.objectMode || !!options2.readableObjectMode;\n    this.highWaterMark = getHighWaterMark(this, options2, \"readableHighWaterMark\", isDuplex);\n    this.buffer = new BufferList();\n    this.length = 0;\n    this.pipes = null;\n    this.pipesCount = 0;\n    this.flowing = null;\n    this.ended = false;\n    this.endEmitted = false;\n    this.reading = false;\n    this.sync = true;\n    this.needReadable = false;\n    this.emittedReadable = false;\n    this.readableListening = false;\n    this.resumeScheduled = false;\n    this.paused = true;\n    this.emitClose = options2.emitClose !== false;\n    this.autoDestroy = !!options2.autoDestroy;\n    this.destroyed = false;\n    this.defaultEncoding = options2.defaultEncoding || \"utf8\";\n    this.awaitDrain = 0;\n    this.readingMore = false;\n    this.decoder = null;\n    this.encoding = null;\n    if (options2.encoding) {\n      if (!StringDecoder) StringDecoder = requireString_decoder().StringDecoder;\n      this.decoder = new StringDecoder(options2.encoding);\n      this.encoding = options2.encoding;\n    }\n  }\n  function Readable(options2) {\n    Duplex = Duplex || require_stream_duplex();\n    if (!(this instanceof Readable)) return new Readable(options2);\n    var isDuplex = this instanceof Duplex;\n    this._readableState = new ReadableState(options2, this, isDuplex);\n    this.readable = true;\n    if (options2) {\n      if (typeof options2.read === \"function\") this._read = options2.read;\n      if (typeof options2.destroy === \"function\") this._destroy = options2.destroy;\n    }\n    Stream2.call(this);\n  }\n  Object.defineProperty(Readable.prototype, \"destroyed\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n      if (this._readableState === void 0) {\n        return false;\n      }\n      return this._readableState.destroyed;\n    },\n    set: function set(value) {\n      if (!this._readableState) {\n        return;\n      }\n      this._readableState.destroyed = value;\n    }\n  });\n  Readable.prototype.destroy = destroyImpl.destroy;\n  Readable.prototype._undestroy = destroyImpl.undestroy;\n  Readable.prototype._destroy = function(err, cb) {\n    cb(err);\n  };\n  Readable.prototype.push = function(chunk, encoding) {\n    var state2 = this._readableState;\n    var skipChunkCheck;\n    if (!state2.objectMode) {\n      if (typeof chunk === \"string\") {\n        encoding = encoding || state2.defaultEncoding;\n        if (encoding !== state2.encoding) {\n          chunk = Buffer2.from(chunk, encoding);\n          encoding = \"\";\n        }\n        skipChunkCheck = true;\n      }\n    } else {\n      skipChunkCheck = true;\n    }\n    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n  };\n  Readable.prototype.unshift = function(chunk) {\n    return readableAddChunk(this, chunk, null, true, false);\n  };\n  function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n    debug(\"readableAddChunk\", chunk);\n    var state2 = stream._readableState;\n    if (chunk === null) {\n      state2.reading = false;\n      onEofChunk(stream, state2);\n    } else {\n      var er;\n      if (!skipChunkCheck) er = chunkInvalid(state2, chunk);\n      if (er) {\n        errorOrDestroy(stream, er);\n      } else if (state2.objectMode || chunk && chunk.length > 0) {\n        if (typeof chunk !== \"string\" && !state2.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {\n          chunk = _uint8ArrayToBuffer(chunk);\n        }\n        if (addToFront) {\n          if (state2.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());\n          else addChunk(stream, state2, chunk, true);\n        } else if (state2.ended) {\n          errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\n        } else if (state2.destroyed) {\n          return false;\n        } else {\n          state2.reading = false;\n          if (state2.decoder && !encoding) {\n            chunk = state2.decoder.write(chunk);\n            if (state2.objectMode || chunk.length !== 0) addChunk(stream, state2, chunk, false);\n            else maybeReadMore(stream, state2);\n          } else {\n            addChunk(stream, state2, chunk, false);\n          }\n        }\n      } else if (!addToFront) {\n        state2.reading = false;\n        maybeReadMore(stream, state2);\n      }\n    }\n    return !state2.ended && (state2.length < state2.highWaterMark || state2.length === 0);\n  }\n  function addChunk(stream, state2, chunk, addToFront) {\n    if (state2.flowing && state2.length === 0 && !state2.sync) {\n      state2.awaitDrain = 0;\n      stream.emit(\"data\", chunk);\n    } else {\n      state2.length += state2.objectMode ? 1 : chunk.length;\n      if (addToFront) state2.buffer.unshift(chunk);\n      else state2.buffer.push(chunk);\n      if (state2.needReadable) emitReadable(stream);\n    }\n    maybeReadMore(stream, state2);\n  }\n  function chunkInvalid(state2, chunk) {\n    var er;\n    if (!_isUint8Array(chunk) && typeof chunk !== \"string\" && chunk !== void 0 && !state2.objectMode) {\n      er = new ERR_INVALID_ARG_TYPE(\"chunk\", [\"string\", \"Buffer\", \"Uint8Array\"], chunk);\n    }\n    return er;\n  }\n  Readable.prototype.isPaused = function() {\n    return this._readableState.flowing === false;\n  };\n  Readable.prototype.setEncoding = function(enc) {\n    if (!StringDecoder) StringDecoder = requireString_decoder().StringDecoder;\n    var decoder = new StringDecoder(enc);\n    this._readableState.decoder = decoder;\n    this._readableState.encoding = this._readableState.decoder.encoding;\n    var p = this._readableState.buffer.head;\n    var content = \"\";\n    while (p !== null) {\n      content += decoder.write(p.data);\n      p = p.next;\n    }\n    this._readableState.buffer.clear();\n    if (content !== \"\") this._readableState.buffer.push(content);\n    this._readableState.length = content.length;\n    return this;\n  };\n  var MAX_HWM = 1073741824;\n  function computeNewHighWaterMark(n) {\n    if (n >= MAX_HWM) {\n      n = MAX_HWM;\n    } else {\n      n--;\n      n |= n >>> 1;\n      n |= n >>> 2;\n      n |= n >>> 4;\n      n |= n >>> 8;\n      n |= n >>> 16;\n      n++;\n    }\n    return n;\n  }\n  function howMuchToRead(n, state2) {\n    if (n <= 0 || state2.length === 0 && state2.ended) return 0;\n    if (state2.objectMode) return 1;\n    if (n !== n) {\n      if (state2.flowing && state2.length) return state2.buffer.head.data.length;\n      else return state2.length;\n    }\n    if (n > state2.highWaterMark) state2.highWaterMark = computeNewHighWaterMark(n);\n    if (n <= state2.length) return n;\n    if (!state2.ended) {\n      state2.needReadable = true;\n      return 0;\n    }\n    return state2.length;\n  }\n  Readable.prototype.read = function(n) {\n    debug(\"read\", n);\n    n = parseInt(n, 10);\n    var state2 = this._readableState;\n    var nOrig = n;\n    if (n !== 0) state2.emittedReadable = false;\n    if (n === 0 && state2.needReadable && ((state2.highWaterMark !== 0 ? state2.length >= state2.highWaterMark : state2.length > 0) || state2.ended)) {\n      debug(\"read: emitReadable\", state2.length, state2.ended);\n      if (state2.length === 0 && state2.ended) endReadable(this);\n      else emitReadable(this);\n      return null;\n    }\n    n = howMuchToRead(n, state2);\n    if (n === 0 && state2.ended) {\n      if (state2.length === 0) endReadable(this);\n      return null;\n    }\n    var doRead = state2.needReadable;\n    debug(\"need readable\", doRead);\n    if (state2.length === 0 || state2.length - n < state2.highWaterMark) {\n      doRead = true;\n      debug(\"length less than watermark\", doRead);\n    }\n    if (state2.ended || state2.reading) {\n      doRead = false;\n      debug(\"reading or ended\", doRead);\n    } else if (doRead) {\n      debug(\"do read\");\n      state2.reading = true;\n      state2.sync = true;\n      if (state2.length === 0) state2.needReadable = true;\n      this._read(state2.highWaterMark);\n      state2.sync = false;\n      if (!state2.reading) n = howMuchToRead(nOrig, state2);\n    }\n    var ret;\n    if (n > 0) ret = fromList(n, state2);\n    else ret = null;\n    if (ret === null) {\n      state2.needReadable = state2.length <= state2.highWaterMark;\n      n = 0;\n    } else {\n      state2.length -= n;\n      state2.awaitDrain = 0;\n    }\n    if (state2.length === 0) {\n      if (!state2.ended) state2.needReadable = true;\n      if (nOrig !== n && state2.ended) endReadable(this);\n    }\n    if (ret !== null) this.emit(\"data\", ret);\n    return ret;\n  };\n  function onEofChunk(stream, state2) {\n    debug(\"onEofChunk\");\n    if (state2.ended) return;\n    if (state2.decoder) {\n      var chunk = state2.decoder.end();\n      if (chunk && chunk.length) {\n        state2.buffer.push(chunk);\n        state2.length += state2.objectMode ? 1 : chunk.length;\n      }\n    }\n    state2.ended = true;\n    if (state2.sync) {\n      emitReadable(stream);\n    } else {\n      state2.needReadable = false;\n      if (!state2.emittedReadable) {\n        state2.emittedReadable = true;\n        emitReadable_(stream);\n      }\n    }\n  }\n  function emitReadable(stream) {\n    var state2 = stream._readableState;\n    debug(\"emitReadable\", state2.needReadable, state2.emittedReadable);\n    state2.needReadable = false;\n    if (!state2.emittedReadable) {\n      debug(\"emitReadable\", state2.flowing);\n      state2.emittedReadable = true;\n      process$1.nextTick(emitReadable_, stream);\n    }\n  }\n  function emitReadable_(stream) {\n    var state2 = stream._readableState;\n    debug(\"emitReadable_\", state2.destroyed, state2.length, state2.ended);\n    if (!state2.destroyed && (state2.length || state2.ended)) {\n      stream.emit(\"readable\");\n      state2.emittedReadable = false;\n    }\n    state2.needReadable = !state2.flowing && !state2.ended && state2.length <= state2.highWaterMark;\n    flow(stream);\n  }\n  function maybeReadMore(stream, state2) {\n    if (!state2.readingMore) {\n      state2.readingMore = true;\n      process$1.nextTick(maybeReadMore_, stream, state2);\n    }\n  }\n  function maybeReadMore_(stream, state2) {\n    while (!state2.reading && !state2.ended && (state2.length < state2.highWaterMark || state2.flowing && state2.length === 0)) {\n      var len = state2.length;\n      debug(\"maybeReadMore read 0\");\n      stream.read(0);\n      if (len === state2.length)\n        break;\n    }\n    state2.readingMore = false;\n  }\n  Readable.prototype._read = function(n) {\n    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED(\"_read()\"));\n  };\n  Readable.prototype.pipe = function(dest, pipeOpts) {\n    var src = this;\n    var state2 = this._readableState;\n    switch (state2.pipesCount) {\n      case 0:\n        state2.pipes = dest;\n        break;\n      case 1:\n        state2.pipes = [state2.pipes, dest];\n        break;\n      default:\n        state2.pipes.push(dest);\n        break;\n    }\n    state2.pipesCount += 1;\n    debug(\"pipe count=%d opts=%j\", state2.pipesCount, pipeOpts);\n    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process$1.stdout && dest !== process$1.stderr;\n    var endFn = doEnd ? onend : unpipe;\n    if (state2.endEmitted) process$1.nextTick(endFn);\n    else src.once(\"end\", endFn);\n    dest.on(\"unpipe\", onunpipe);\n    function onunpipe(readable, unpipeInfo) {\n      debug(\"onunpipe\");\n      if (readable === src) {\n        if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n          unpipeInfo.hasUnpiped = true;\n          cleanup();\n        }\n      }\n    }\n    function onend() {\n      debug(\"onend\");\n      dest.end();\n    }\n    var ondrain = pipeOnDrain(src);\n    dest.on(\"drain\", ondrain);\n    var cleanedUp = false;\n    function cleanup() {\n      debug(\"cleanup\");\n      dest.removeListener(\"close\", onclose);\n      dest.removeListener(\"finish\", onfinish);\n      dest.removeListener(\"drain\", ondrain);\n      dest.removeListener(\"error\", onerror);\n      dest.removeListener(\"unpipe\", onunpipe);\n      src.removeListener(\"end\", onend);\n      src.removeListener(\"end\", unpipe);\n      src.removeListener(\"data\", ondata);\n      cleanedUp = true;\n      if (state2.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n    }\n    src.on(\"data\", ondata);\n    function ondata(chunk) {\n      debug(\"ondata\");\n      var ret = dest.write(chunk);\n      debug(\"dest.write\", ret);\n      if (ret === false) {\n        if ((state2.pipesCount === 1 && state2.pipes === dest || state2.pipesCount > 1 && indexOf(state2.pipes, dest) !== -1) && !cleanedUp) {\n          debug(\"false write response, pause\", state2.awaitDrain);\n          state2.awaitDrain++;\n        }\n        src.pause();\n      }\n    }\n    function onerror(er) {\n      debug(\"onerror\", er);\n      unpipe();\n      dest.removeListener(\"error\", onerror);\n      if (EElistenerCount(dest, \"error\") === 0) errorOrDestroy(dest, er);\n    }\n    prependListener2(dest, \"error\", onerror);\n    function onclose() {\n      dest.removeListener(\"finish\", onfinish);\n      unpipe();\n    }\n    dest.once(\"close\", onclose);\n    function onfinish() {\n      debug(\"onfinish\");\n      dest.removeListener(\"close\", onclose);\n      unpipe();\n    }\n    dest.once(\"finish\", onfinish);\n    function unpipe() {\n      debug(\"unpipe\");\n      src.unpipe(dest);\n    }\n    dest.emit(\"pipe\", src);\n    if (!state2.flowing) {\n      debug(\"pipe resume\");\n      src.resume();\n    }\n    return dest;\n  };\n  function pipeOnDrain(src) {\n    return function pipeOnDrainFunctionResult() {\n      var state2 = src._readableState;\n      debug(\"pipeOnDrain\", state2.awaitDrain);\n      if (state2.awaitDrain) state2.awaitDrain--;\n      if (state2.awaitDrain === 0 && EElistenerCount(src, \"data\")) {\n        state2.flowing = true;\n        flow(src);\n      }\n    };\n  }\n  Readable.prototype.unpipe = function(dest) {\n    var state2 = this._readableState;\n    var unpipeInfo = {\n      hasUnpiped: false\n    };\n    if (state2.pipesCount === 0) return this;\n    if (state2.pipesCount === 1) {\n      if (dest && dest !== state2.pipes) return this;\n      if (!dest) dest = state2.pipes;\n      state2.pipes = null;\n      state2.pipesCount = 0;\n      state2.flowing = false;\n      if (dest) dest.emit(\"unpipe\", this, unpipeInfo);\n      return this;\n    }\n    if (!dest) {\n      var dests = state2.pipes;\n      var len = state2.pipesCount;\n      state2.pipes = null;\n      state2.pipesCount = 0;\n      state2.flowing = false;\n      for (var i = 0; i < len; i++) {\n        dests[i].emit(\"unpipe\", this, {\n          hasUnpiped: false\n        });\n      }\n      return this;\n    }\n    var index = indexOf(state2.pipes, dest);\n    if (index === -1) return this;\n    state2.pipes.splice(index, 1);\n    state2.pipesCount -= 1;\n    if (state2.pipesCount === 1) state2.pipes = state2.pipes[0];\n    dest.emit(\"unpipe\", this, unpipeInfo);\n    return this;\n  };\n  Readable.prototype.on = function(ev, fn) {\n    var res = Stream2.prototype.on.call(this, ev, fn);\n    var state2 = this._readableState;\n    if (ev === \"data\") {\n      state2.readableListening = this.listenerCount(\"readable\") > 0;\n      if (state2.flowing !== false) this.resume();\n    } else if (ev === \"readable\") {\n      if (!state2.endEmitted && !state2.readableListening) {\n        state2.readableListening = state2.needReadable = true;\n        state2.flowing = false;\n        state2.emittedReadable = false;\n        debug(\"on readable\", state2.length, state2.reading);\n        if (state2.length) {\n          emitReadable(this);\n        } else if (!state2.reading) {\n          process$1.nextTick(nReadingNextTick, this);\n        }\n      }\n    }\n    return res;\n  };\n  Readable.prototype.addListener = Readable.prototype.on;\n  Readable.prototype.removeListener = function(ev, fn) {\n    var res = Stream2.prototype.removeListener.call(this, ev, fn);\n    if (ev === \"readable\") {\n      process$1.nextTick(updateReadableListening, this);\n    }\n    return res;\n  };\n  Readable.prototype.removeAllListeners = function(ev) {\n    var res = Stream2.prototype.removeAllListeners.apply(this, arguments);\n    if (ev === \"readable\" || ev === void 0) {\n      process$1.nextTick(updateReadableListening, this);\n    }\n    return res;\n  };\n  function updateReadableListening(self2) {\n    var state2 = self2._readableState;\n    state2.readableListening = self2.listenerCount(\"readable\") > 0;\n    if (state2.resumeScheduled && !state2.paused) {\n      state2.flowing = true;\n    } else if (self2.listenerCount(\"data\") > 0) {\n      self2.resume();\n    }\n  }\n  function nReadingNextTick(self2) {\n    debug(\"readable nexttick read 0\");\n    self2.read(0);\n  }\n  Readable.prototype.resume = function() {\n    var state2 = this._readableState;\n    if (!state2.flowing) {\n      debug(\"resume\");\n      state2.flowing = !state2.readableListening;\n      resume(this, state2);\n    }\n    state2.paused = false;\n    return this;\n  };\n  function resume(stream, state2) {\n    if (!state2.resumeScheduled) {\n      state2.resumeScheduled = true;\n      process$1.nextTick(resume_, stream, state2);\n    }\n  }\n  function resume_(stream, state2) {\n    debug(\"resume\", state2.reading);\n    if (!state2.reading) {\n      stream.read(0);\n    }\n    state2.resumeScheduled = false;\n    stream.emit(\"resume\");\n    flow(stream);\n    if (state2.flowing && !state2.reading) stream.read(0);\n  }\n  Readable.prototype.pause = function() {\n    debug(\"call pause flowing=%j\", this._readableState.flowing);\n    if (this._readableState.flowing !== false) {\n      debug(\"pause\");\n      this._readableState.flowing = false;\n      this.emit(\"pause\");\n    }\n    this._readableState.paused = true;\n    return this;\n  };\n  function flow(stream) {\n    var state2 = stream._readableState;\n    debug(\"flow\", state2.flowing);\n    while (state2.flowing && stream.read() !== null) {\n    }\n  }\n  Readable.prototype.wrap = function(stream) {\n    var _this = this;\n    var state2 = this._readableState;\n    var paused = false;\n    stream.on(\"end\", function() {\n      debug(\"wrapped end\");\n      if (state2.decoder && !state2.ended) {\n        var chunk = state2.decoder.end();\n        if (chunk && chunk.length) _this.push(chunk);\n      }\n      _this.push(null);\n    });\n    stream.on(\"data\", function(chunk) {\n      debug(\"wrapped data\");\n      if (state2.decoder) chunk = state2.decoder.write(chunk);\n      if (state2.objectMode && (chunk === null || chunk === void 0)) return;\n      else if (!state2.objectMode && (!chunk || !chunk.length)) return;\n      var ret = _this.push(chunk);\n      if (!ret) {\n        paused = true;\n        stream.pause();\n      }\n    });\n    for (var i in stream) {\n      if (this[i] === void 0 && typeof stream[i] === \"function\") {\n        this[i] = /* @__PURE__ */ function methodWrap(method) {\n          return function methodWrapReturnFunction() {\n            return stream[method].apply(stream, arguments);\n          };\n        }(i);\n      }\n    }\n    for (var n = 0; n < kProxyEvents.length; n++) {\n      stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n    }\n    this._read = function(n2) {\n      debug(\"wrapped _read\", n2);\n      if (paused) {\n        paused = false;\n        stream.resume();\n      }\n    };\n    return this;\n  };\n  if (typeof Symbol === \"function\") {\n    Readable.prototype[Symbol.asyncIterator] = function() {\n      if (createReadableStreamAsyncIterator === void 0) {\n        createReadableStreamAsyncIterator = requireAsync_iterator();\n      }\n      return createReadableStreamAsyncIterator(this);\n    };\n  }\n  Object.defineProperty(Readable.prototype, \"readableHighWaterMark\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n      return this._readableState.highWaterMark;\n    }\n  });\n  Object.defineProperty(Readable.prototype, \"readableBuffer\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n      return this._readableState && this._readableState.buffer;\n    }\n  });\n  Object.defineProperty(Readable.prototype, \"readableFlowing\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n      return this._readableState.flowing;\n    },\n    set: function set(state2) {\n      if (this._readableState) {\n        this._readableState.flowing = state2;\n      }\n    }\n  });\n  Readable._fromList = fromList;\n  Object.defineProperty(Readable.prototype, \"readableLength\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n      return this._readableState.length;\n    }\n  });\n  function fromList(n, state2) {\n    if (state2.length === 0) return null;\n    var ret;\n    if (state2.objectMode) ret = state2.buffer.shift();\n    else if (!n || n >= state2.length) {\n      if (state2.decoder) ret = state2.buffer.join(\"\");\n      else if (state2.buffer.length === 1) ret = state2.buffer.first();\n      else ret = state2.buffer.concat(state2.length);\n      state2.buffer.clear();\n    } else {\n      ret = state2.buffer.consume(n, state2.decoder);\n    }\n    return ret;\n  }\n  function endReadable(stream) {\n    var state2 = stream._readableState;\n    debug(\"endReadable\", state2.endEmitted);\n    if (!state2.endEmitted) {\n      state2.ended = true;\n      process$1.nextTick(endReadableNT, state2, stream);\n    }\n  }\n  function endReadableNT(state2, stream) {\n    debug(\"endReadableNT\", state2.endEmitted, state2.length);\n    if (!state2.endEmitted && state2.length === 0) {\n      state2.endEmitted = true;\n      stream.readable = false;\n      stream.emit(\"end\");\n      if (state2.autoDestroy) {\n        var wState = stream._writableState;\n        if (!wState || wState.autoDestroy && wState.finished) {\n          stream.destroy();\n        }\n      }\n    }\n  }\n  if (typeof Symbol === \"function\") {\n    Readable.from = function(iterable, opts) {\n      if (from === void 0) {\n        from = requireFromBrowser();\n      }\n      return from(Readable, iterable, opts);\n    };\n  }\n  function indexOf(xs, x) {\n    for (var i = 0, l = xs.length; i < l; i++) {\n      if (xs[i] === x) return i;\n    }\n    return -1;\n  }\n  return _stream_readable;\n}\nvar _stream_transform;\nvar hasRequired_stream_transform;\nfunction require_stream_transform() {\n  if (hasRequired_stream_transform) return _stream_transform;\n  hasRequired_stream_transform = 1;\n  _stream_transform = Transform;\n  var _require$codes = requireErrorsBrowser().codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;\n  var Duplex = require_stream_duplex();\n  inherits_browserExports(Transform, Duplex);\n  function afterTransform(er, data) {\n    var ts = this._transformState;\n    ts.transforming = false;\n    var cb = ts.writecb;\n    if (cb === null) {\n      return this.emit(\"error\", new ERR_MULTIPLE_CALLBACK());\n    }\n    ts.writechunk = null;\n    ts.writecb = null;\n    if (data != null)\n      this.push(data);\n    cb(er);\n    var rs = this._readableState;\n    rs.reading = false;\n    if (rs.needReadable || rs.length < rs.highWaterMark) {\n      this._read(rs.highWaterMark);\n    }\n  }\n  function Transform(options2) {\n    if (!(this instanceof Transform)) return new Transform(options2);\n    Duplex.call(this, options2);\n    this._transformState = {\n      afterTransform: afterTransform.bind(this),\n      needTransform: false,\n      transforming: false,\n      writecb: null,\n      writechunk: null,\n      writeencoding: null\n    };\n    this._readableState.needReadable = true;\n    this._readableState.sync = false;\n    if (options2) {\n      if (typeof options2.transform === \"function\") this._transform = options2.transform;\n      if (typeof options2.flush === \"function\") this._flush = options2.flush;\n    }\n    this.on(\"prefinish\", prefinish);\n  }\n  function prefinish() {\n    var _this = this;\n    if (typeof this._flush === \"function\" && !this._readableState.destroyed) {\n      this._flush(function(er, data) {\n        done(_this, er, data);\n      });\n    } else {\n      done(this, null, null);\n    }\n  }\n  Transform.prototype.push = function(chunk, encoding) {\n    this._transformState.needTransform = false;\n    return Duplex.prototype.push.call(this, chunk, encoding);\n  };\n  Transform.prototype._transform = function(chunk, encoding, cb) {\n    cb(new ERR_METHOD_NOT_IMPLEMENTED(\"_transform()\"));\n  };\n  Transform.prototype._write = function(chunk, encoding, cb) {\n    var ts = this._transformState;\n    ts.writecb = cb;\n    ts.writechunk = chunk;\n    ts.writeencoding = encoding;\n    if (!ts.transforming) {\n      var rs = this._readableState;\n      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n    }\n  };\n  Transform.prototype._read = function(n) {\n    var ts = this._transformState;\n    if (ts.writechunk !== null && !ts.transforming) {\n      ts.transforming = true;\n      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n    } else {\n      ts.needTransform = true;\n    }\n  };\n  Transform.prototype._destroy = function(err, cb) {\n    Duplex.prototype._destroy.call(this, err, function(err2) {\n      cb(err2);\n    });\n  };\n  function done(stream, er, data) {\n    if (er) return stream.emit(\"error\", er);\n    if (data != null)\n      stream.push(data);\n    if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();\n    if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\n    return stream.push(null);\n  }\n  return _stream_transform;\n}\nvar _stream_passthrough;\nvar hasRequired_stream_passthrough;\nfunction require_stream_passthrough() {\n  if (hasRequired_stream_passthrough) return _stream_passthrough;\n  hasRequired_stream_passthrough = 1;\n  _stream_passthrough = PassThrough;\n  var Transform = require_stream_transform();\n  inherits_browserExports(PassThrough, Transform);\n  function PassThrough(options2) {\n    if (!(this instanceof PassThrough)) return new PassThrough(options2);\n    Transform.call(this, options2);\n  }\n  PassThrough.prototype._transform = function(chunk, encoding, cb) {\n    cb(null, chunk);\n  };\n  return _stream_passthrough;\n}\nvar pipeline_1;\nvar hasRequiredPipeline;\nfunction requirePipeline() {\n  if (hasRequiredPipeline) return pipeline_1;\n  hasRequiredPipeline = 1;\n  var eos;\n  function once3(callback) {\n    var called = false;\n    return function() {\n      if (called) return;\n      called = true;\n      callback.apply(void 0, arguments);\n    };\n  }\n  var _require$codes = requireErrorsBrowser().codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\n  function noop2(err) {\n    if (err) throw err;\n  }\n  function isRequest(stream) {\n    return stream.setHeader && typeof stream.abort === \"function\";\n  }\n  function destroyer(stream, reading, writing, callback) {\n    callback = once3(callback);\n    var closed = false;\n    stream.on(\"close\", function() {\n      closed = true;\n    });\n    if (eos === void 0) eos = requireEndOfStream();\n    eos(stream, {\n      readable: reading,\n      writable: writing\n    }, function(err) {\n      if (err) return callback(err);\n      closed = true;\n      callback();\n    });\n    var destroyed = false;\n    return function(err) {\n      if (closed) return;\n      if (destroyed) return;\n      destroyed = true;\n      if (isRequest(stream)) return stream.abort();\n      if (typeof stream.destroy === \"function\") return stream.destroy();\n      callback(err || new ERR_STREAM_DESTROYED(\"pipe\"));\n    };\n  }\n  function call(fn) {\n    fn();\n  }\n  function pipe(from, to) {\n    return from.pipe(to);\n  }\n  function popCallback(streams) {\n    if (!streams.length) return noop2;\n    if (typeof streams[streams.length - 1] !== \"function\") return noop2;\n    return streams.pop();\n  }\n  function pipeline() {\n    for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {\n      streams[_key] = arguments[_key];\n    }\n    var callback = popCallback(streams);\n    if (Array.isArray(streams[0])) streams = streams[0];\n    if (streams.length < 2) {\n      throw new ERR_MISSING_ARGS(\"streams\");\n    }\n    var error;\n    var destroys = streams.map(function(stream, i) {\n      var reading = i < streams.length - 1;\n      var writing = i > 0;\n      return destroyer(stream, reading, writing, function(err) {\n        if (!error) error = err;\n        if (err) destroys.forEach(call);\n        if (reading) return;\n        destroys.forEach(call);\n        callback(error);\n      });\n    });\n    return streams.reduce(pipe);\n  }\n  pipeline_1 = pipeline;\n  return pipeline_1;\n}\nvar streamBrowserify = Stream$1;\nvar EE = eventsExports.EventEmitter;\nvar inherits$1 = inherits_browserExports;\ninherits$1(Stream$1, EE);\nStream$1.Readable = require_stream_readable();\nStream$1.Writable = require_stream_writable();\nStream$1.Duplex = require_stream_duplex();\nStream$1.Transform = require_stream_transform();\nStream$1.PassThrough = require_stream_passthrough();\nStream$1.finished = requireEndOfStream();\nStream$1.pipeline = requirePipeline();\nStream$1.Stream = Stream$1;\nfunction Stream$1() {\n  EE.call(this);\n}\nStream$1.prototype.pipe = function(dest, options2) {\n  var source = this;\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n  source.on(\"data\", ondata);\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n  dest.on(\"drain\", ondrain);\n  if (!dest._isStdio && (!options2 || options2.end !== false)) {\n    source.on(\"end\", onend);\n    source.on(\"close\", onclose);\n  }\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n    dest.end();\n  }\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n    if (typeof dest.destroy === \"function\") dest.destroy();\n  }\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, \"error\") === 0) {\n      throw er;\n    }\n  }\n  source.on(\"error\", onerror);\n  dest.on(\"error\", onerror);\n  function cleanup() {\n    source.removeListener(\"data\", ondata);\n    dest.removeListener(\"drain\", ondrain);\n    source.removeListener(\"end\", onend);\n    source.removeListener(\"close\", onclose);\n    source.removeListener(\"error\", onerror);\n    dest.removeListener(\"error\", onerror);\n    source.removeListener(\"end\", cleanup);\n    source.removeListener(\"close\", cleanup);\n    dest.removeListener(\"close\", cleanup);\n  }\n  source.on(\"end\", cleanup);\n  source.on(\"close\", cleanup);\n  dest.on(\"close\", cleanup);\n  dest.emit(\"pipe\", source);\n  return dest;\n};\n(function(exports) {\n  (function(sax2) {\n    sax2.parser = function(strict, opt) {\n      return new SAXParser(strict, opt);\n    };\n    sax2.SAXParser = SAXParser;\n    sax2.SAXStream = SAXStream;\n    sax2.createStream = createStream;\n    sax2.MAX_BUFFER_LENGTH = 64 * 1024;\n    var buffers = [\n      \"comment\",\n      \"sgmlDecl\",\n      \"textNode\",\n      \"tagName\",\n      \"doctype\",\n      \"procInstName\",\n      \"procInstBody\",\n      \"entity\",\n      \"attribName\",\n      \"attribValue\",\n      \"cdata\",\n      \"script\"\n    ];\n    sax2.EVENTS = [\n      \"text\",\n      \"processinginstruction\",\n      \"sgmldeclaration\",\n      \"doctype\",\n      \"comment\",\n      \"opentagstart\",\n      \"attribute\",\n      \"opentag\",\n      \"closetag\",\n      \"opencdata\",\n      \"cdata\",\n      \"closecdata\",\n      \"error\",\n      \"end\",\n      \"ready\",\n      \"script\",\n      \"opennamespace\",\n      \"closenamespace\"\n    ];\n    function SAXParser(strict, opt) {\n      if (!(this instanceof SAXParser)) {\n        return new SAXParser(strict, opt);\n      }\n      var parser = this;\n      clearBuffers(parser);\n      parser.q = parser.c = \"\";\n      parser.bufferCheckPosition = sax2.MAX_BUFFER_LENGTH;\n      parser.opt = opt || {};\n      parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;\n      parser.looseCase = parser.opt.lowercase ? \"toLowerCase\" : \"toUpperCase\";\n      parser.tags = [];\n      parser.closed = parser.closedRoot = parser.sawRoot = false;\n      parser.tag = parser.error = null;\n      parser.strict = !!strict;\n      parser.noscript = !!(strict || parser.opt.noscript);\n      parser.state = S.BEGIN;\n      parser.strictEntities = parser.opt.strictEntities;\n      parser.ENTITIES = parser.strictEntities ? Object.create(sax2.XML_ENTITIES) : Object.create(sax2.ENTITIES);\n      parser.attribList = [];\n      if (parser.opt.xmlns) {\n        parser.ns = Object.create(rootNS);\n      }\n      parser.trackPosition = parser.opt.position !== false;\n      if (parser.trackPosition) {\n        parser.position = parser.line = parser.column = 0;\n      }\n      emit2(parser, \"onready\");\n    }\n    if (!Object.create) {\n      Object.create = function(o) {\n        function F() {\n        }\n        F.prototype = o;\n        var newf = new F();\n        return newf;\n      };\n    }\n    if (!Object.keys) {\n      Object.keys = function(o) {\n        var a = [];\n        for (var i in o) if (o.hasOwnProperty(i)) a.push(i);\n        return a;\n      };\n    }\n    function checkBufferLength(parser) {\n      var maxAllowed = Math.max(sax2.MAX_BUFFER_LENGTH, 10);\n      var maxActual = 0;\n      for (var i = 0, l = buffers.length; i < l; i++) {\n        var len = parser[buffers[i]].length;\n        if (len > maxAllowed) {\n          switch (buffers[i]) {\n            case \"textNode\":\n              closeText(parser);\n              break;\n            case \"cdata\":\n              emitNode(parser, \"oncdata\", parser.cdata);\n              parser.cdata = \"\";\n              break;\n            case \"script\":\n              emitNode(parser, \"onscript\", parser.script);\n              parser.script = \"\";\n              break;\n            default:\n              error(parser, \"Max buffer length exceeded: \" + buffers[i]);\n          }\n        }\n        maxActual = Math.max(maxActual, len);\n      }\n      var m = sax2.MAX_BUFFER_LENGTH - maxActual;\n      parser.bufferCheckPosition = m + parser.position;\n    }\n    function clearBuffers(parser) {\n      for (var i = 0, l = buffers.length; i < l; i++) {\n        parser[buffers[i]] = \"\";\n      }\n    }\n    function flushBuffers(parser) {\n      closeText(parser);\n      if (parser.cdata !== \"\") {\n        emitNode(parser, \"oncdata\", parser.cdata);\n        parser.cdata = \"\";\n      }\n      if (parser.script !== \"\") {\n        emitNode(parser, \"onscript\", parser.script);\n        parser.script = \"\";\n      }\n    }\n    SAXParser.prototype = {\n      end: function() {\n        end(this);\n      },\n      write,\n      resume: function() {\n        this.error = null;\n        return this;\n      },\n      close: function() {\n        return this.write(null);\n      },\n      flush: function() {\n        flushBuffers(this);\n      }\n    };\n    var Stream2;\n    try {\n      Stream2 = streamBrowserify.Stream;\n    } catch (ex) {\n      Stream2 = function() {\n      };\n    }\n    var streamWraps = sax2.EVENTS.filter(function(ev) {\n      return ev !== \"error\" && ev !== \"end\";\n    });\n    function createStream(strict, opt) {\n      return new SAXStream(strict, opt);\n    }\n    function SAXStream(strict, opt) {\n      if (!(this instanceof SAXStream)) {\n        return new SAXStream(strict, opt);\n      }\n      Stream2.apply(this);\n      this._parser = new SAXParser(strict, opt);\n      this.writable = true;\n      this.readable = true;\n      var me = this;\n      this._parser.onend = function() {\n        me.emit(\"end\");\n      };\n      this._parser.onerror = function(er) {\n        me.emit(\"error\", er);\n        me._parser.error = null;\n      };\n      this._decoder = null;\n      streamWraps.forEach(function(ev) {\n        Object.defineProperty(me, \"on\" + ev, {\n          get: function() {\n            return me._parser[\"on\" + ev];\n          },\n          set: function(h) {\n            if (!h) {\n              me.removeAllListeners(ev);\n              me._parser[\"on\" + ev] = h;\n              return h;\n            }\n            me.on(ev, h);\n          },\n          enumerable: true,\n          configurable: false\n        });\n      });\n    }\n    SAXStream.prototype = Object.create(Stream2.prototype, {\n      constructor: {\n        value: SAXStream\n      }\n    });\n    SAXStream.prototype.write = function(data) {\n      if (typeof Buffer === \"function\" && typeof Buffer.isBuffer === \"function\" && Buffer.isBuffer(data)) {\n        if (!this._decoder) {\n          var SD = requireString_decoder().StringDecoder;\n          this._decoder = new SD(\"utf8\");\n        }\n        data = this._decoder.write(data);\n      }\n      this._parser.write(data.toString());\n      this.emit(\"data\", data);\n      return true;\n    };\n    SAXStream.prototype.end = function(chunk) {\n      if (chunk && chunk.length) {\n        this.write(chunk);\n      }\n      this._parser.end();\n      return true;\n    };\n    SAXStream.prototype.on = function(ev, handler) {\n      var me = this;\n      if (!me._parser[\"on\" + ev] && streamWraps.indexOf(ev) !== -1) {\n        me._parser[\"on\" + ev] = function() {\n          var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);\n          args.splice(0, 0, ev);\n          me.emit.apply(me, args);\n        };\n      }\n      return Stream2.prototype.on.call(me, ev, handler);\n    };\n    var CDATA = \"[CDATA[\";\n    var DOCTYPE = \"DOCTYPE\";\n    var XML_NAMESPACE = \"http://www.w3.org/XML/1998/namespace\";\n    var XMLNS_NAMESPACE = \"http://www.w3.org/2000/xmlns/\";\n    var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE };\n    var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n    var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\n    var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n    var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\n    function isWhitespace(c) {\n      return c === \" \" || c === \"\\n\" || c === \"\\r\" || c === \"\t\";\n    }\n    function isQuote(c) {\n      return c === '\"' || c === \"'\";\n    }\n    function isAttribEnd(c) {\n      return c === \">\" || isWhitespace(c);\n    }\n    function isMatch(regex, c) {\n      return regex.test(c);\n    }\n    function notMatch(regex, c) {\n      return !isMatch(regex, c);\n    }\n    var S = 0;\n    sax2.STATE = {\n      BEGIN: S++,\n      // leading byte order mark or whitespace\n      BEGIN_WHITESPACE: S++,\n      // leading whitespace\n      TEXT: S++,\n      // general stuff\n      TEXT_ENTITY: S++,\n      // &amp and such.\n      OPEN_WAKA: S++,\n      // <\n      SGML_DECL: S++,\n      // <!BLARG\n      SGML_DECL_QUOTED: S++,\n      // <!BLARG foo \"bar\n      DOCTYPE: S++,\n      // <!DOCTYPE\n      DOCTYPE_QUOTED: S++,\n      // <!DOCTYPE \"//blah\n      DOCTYPE_DTD: S++,\n      // <!DOCTYPE \"//blah\" [ ...\n      DOCTYPE_DTD_QUOTED: S++,\n      // <!DOCTYPE \"//blah\" [ \"foo\n      COMMENT_STARTING: S++,\n      // <!-\n      COMMENT: S++,\n      // <!--\n      COMMENT_ENDING: S++,\n      // <!-- blah -\n      COMMENT_ENDED: S++,\n      // <!-- blah --\n      CDATA: S++,\n      // <![CDATA[ something\n      CDATA_ENDING: S++,\n      // ]\n      CDATA_ENDING_2: S++,\n      // ]]\n      PROC_INST: S++,\n      // <?hi\n      PROC_INST_BODY: S++,\n      // <?hi there\n      PROC_INST_ENDING: S++,\n      // <?hi \"there\" ?\n      OPEN_TAG: S++,\n      // <strong\n      OPEN_TAG_SLASH: S++,\n      // <strong /\n      ATTRIB: S++,\n      // <a\n      ATTRIB_NAME: S++,\n      // <a foo\n      ATTRIB_NAME_SAW_WHITE: S++,\n      // <a foo _\n      ATTRIB_VALUE: S++,\n      // <a foo=\n      ATTRIB_VALUE_QUOTED: S++,\n      // <a foo=\"bar\n      ATTRIB_VALUE_CLOSED: S++,\n      // <a foo=\"bar\"\n      ATTRIB_VALUE_UNQUOTED: S++,\n      // <a foo=bar\n      ATTRIB_VALUE_ENTITY_Q: S++,\n      // <foo bar=\"&quot;\"\n      ATTRIB_VALUE_ENTITY_U: S++,\n      // <foo bar=&quot\n      CLOSE_TAG: S++,\n      // </a\n      CLOSE_TAG_SAW_WHITE: S++,\n      // </a   >\n      SCRIPT: S++,\n      // <script> ...\n      SCRIPT_ENDING: S++\n      // <script> ... <\n    };\n    sax2.XML_ENTITIES = {\n      \"amp\": \"&\",\n      \"gt\": \">\",\n      \"lt\": \"<\",\n      \"quot\": '\"',\n      \"apos\": \"'\"\n    };\n    sax2.ENTITIES = {\n      \"amp\": \"&\",\n      \"gt\": \">\",\n      \"lt\": \"<\",\n      \"quot\": '\"',\n      \"apos\": \"'\",\n      \"AElig\": 198,\n      \"Aacute\": 193,\n      \"Acirc\": 194,\n      \"Agrave\": 192,\n      \"Aring\": 197,\n      \"Atilde\": 195,\n      \"Auml\": 196,\n      \"Ccedil\": 199,\n      \"ETH\": 208,\n      \"Eacute\": 201,\n      \"Ecirc\": 202,\n      \"Egrave\": 200,\n      \"Euml\": 203,\n      \"Iacute\": 205,\n      \"Icirc\": 206,\n      \"Igrave\": 204,\n      \"Iuml\": 207,\n      \"Ntilde\": 209,\n      \"Oacute\": 211,\n      \"Ocirc\": 212,\n      \"Ograve\": 210,\n      \"Oslash\": 216,\n      \"Otilde\": 213,\n      \"Ouml\": 214,\n      \"THORN\": 222,\n      \"Uacute\": 218,\n      \"Ucirc\": 219,\n      \"Ugrave\": 217,\n      \"Uuml\": 220,\n      \"Yacute\": 221,\n      \"aacute\": 225,\n      \"acirc\": 226,\n      \"aelig\": 230,\n      \"agrave\": 224,\n      \"aring\": 229,\n      \"atilde\": 227,\n      \"auml\": 228,\n      \"ccedil\": 231,\n      \"eacute\": 233,\n      \"ecirc\": 234,\n      \"egrave\": 232,\n      \"eth\": 240,\n      \"euml\": 235,\n      \"iacute\": 237,\n      \"icirc\": 238,\n      \"igrave\": 236,\n      \"iuml\": 239,\n      \"ntilde\": 241,\n      \"oacute\": 243,\n      \"ocirc\": 244,\n      \"ograve\": 242,\n      \"oslash\": 248,\n      \"otilde\": 245,\n      \"ouml\": 246,\n      \"szlig\": 223,\n      \"thorn\": 254,\n      \"uacute\": 250,\n      \"ucirc\": 251,\n      \"ugrave\": 249,\n      \"uuml\": 252,\n      \"yacute\": 253,\n      \"yuml\": 255,\n      \"copy\": 169,\n      \"reg\": 174,\n      \"nbsp\": 160,\n      \"iexcl\": 161,\n      \"cent\": 162,\n      \"pound\": 163,\n      \"curren\": 164,\n      \"yen\": 165,\n      \"brvbar\": 166,\n      \"sect\": 167,\n      \"uml\": 168,\n      \"ordf\": 170,\n      \"laquo\": 171,\n      \"not\": 172,\n      \"shy\": 173,\n      \"macr\": 175,\n      \"deg\": 176,\n      \"plusmn\": 177,\n      \"sup1\": 185,\n      \"sup2\": 178,\n      \"sup3\": 179,\n      \"acute\": 180,\n      \"micro\": 181,\n      \"para\": 182,\n      \"middot\": 183,\n      \"cedil\": 184,\n      \"ordm\": 186,\n      \"raquo\": 187,\n      \"frac14\": 188,\n      \"frac12\": 189,\n      \"frac34\": 190,\n      \"iquest\": 191,\n      \"times\": 215,\n      \"divide\": 247,\n      \"OElig\": 338,\n      \"oelig\": 339,\n      \"Scaron\": 352,\n      \"scaron\": 353,\n      \"Yuml\": 376,\n      \"fnof\": 402,\n      \"circ\": 710,\n      \"tilde\": 732,\n      \"Alpha\": 913,\n      \"Beta\": 914,\n      \"Gamma\": 915,\n      \"Delta\": 916,\n      \"Epsilon\": 917,\n      \"Zeta\": 918,\n      \"Eta\": 919,\n      \"Theta\": 920,\n      \"Iota\": 921,\n      \"Kappa\": 922,\n      \"Lambda\": 923,\n      \"Mu\": 924,\n      \"Nu\": 925,\n      \"Xi\": 926,\n      \"Omicron\": 927,\n      \"Pi\": 928,\n      \"Rho\": 929,\n      \"Sigma\": 931,\n      \"Tau\": 932,\n      \"Upsilon\": 933,\n      \"Phi\": 934,\n      \"Chi\": 935,\n      \"Psi\": 936,\n      \"Omega\": 937,\n      \"alpha\": 945,\n      \"beta\": 946,\n      \"gamma\": 947,\n      \"delta\": 948,\n      \"epsilon\": 949,\n      \"zeta\": 950,\n      \"eta\": 951,\n      \"theta\": 952,\n      \"iota\": 953,\n      \"kappa\": 954,\n      \"lambda\": 955,\n      \"mu\": 956,\n      \"nu\": 957,\n      \"xi\": 958,\n      \"omicron\": 959,\n      \"pi\": 960,\n      \"rho\": 961,\n      \"sigmaf\": 962,\n      \"sigma\": 963,\n      \"tau\": 964,\n      \"upsilon\": 965,\n      \"phi\": 966,\n      \"chi\": 967,\n      \"psi\": 968,\n      \"omega\": 969,\n      \"thetasym\": 977,\n      \"upsih\": 978,\n      \"piv\": 982,\n      \"ensp\": 8194,\n      \"emsp\": 8195,\n      \"thinsp\": 8201,\n      \"zwnj\": 8204,\n      \"zwj\": 8205,\n      \"lrm\": 8206,\n      \"rlm\": 8207,\n      \"ndash\": 8211,\n      \"mdash\": 8212,\n      \"lsquo\": 8216,\n      \"rsquo\": 8217,\n      \"sbquo\": 8218,\n      \"ldquo\": 8220,\n      \"rdquo\": 8221,\n      \"bdquo\": 8222,\n      \"dagger\": 8224,\n      \"Dagger\": 8225,\n      \"bull\": 8226,\n      \"hellip\": 8230,\n      \"permil\": 8240,\n      \"prime\": 8242,\n      \"Prime\": 8243,\n      \"lsaquo\": 8249,\n      \"rsaquo\": 8250,\n      \"oline\": 8254,\n      \"frasl\": 8260,\n      \"euro\": 8364,\n      \"image\": 8465,\n      \"weierp\": 8472,\n      \"real\": 8476,\n      \"trade\": 8482,\n      \"alefsym\": 8501,\n      \"larr\": 8592,\n      \"uarr\": 8593,\n      \"rarr\": 8594,\n      \"darr\": 8595,\n      \"harr\": 8596,\n      \"crarr\": 8629,\n      \"lArr\": 8656,\n      \"uArr\": 8657,\n      \"rArr\": 8658,\n      \"dArr\": 8659,\n      \"hArr\": 8660,\n      \"forall\": 8704,\n      \"part\": 8706,\n      \"exist\": 8707,\n      \"empty\": 8709,\n      \"nabla\": 8711,\n      \"isin\": 8712,\n      \"notin\": 8713,\n      \"ni\": 8715,\n      \"prod\": 8719,\n      \"sum\": 8721,\n      \"minus\": 8722,\n      \"lowast\": 8727,\n      \"radic\": 8730,\n      \"prop\": 8733,\n      \"infin\": 8734,\n      \"ang\": 8736,\n      \"and\": 8743,\n      \"or\": 8744,\n      \"cap\": 8745,\n      \"cup\": 8746,\n      \"int\": 8747,\n      \"there4\": 8756,\n      \"sim\": 8764,\n      \"cong\": 8773,\n      \"asymp\": 8776,\n      \"ne\": 8800,\n      \"equiv\": 8801,\n      \"le\": 8804,\n      \"ge\": 8805,\n      \"sub\": 8834,\n      \"sup\": 8835,\n      \"nsub\": 8836,\n      \"sube\": 8838,\n      \"supe\": 8839,\n      \"oplus\": 8853,\n      \"otimes\": 8855,\n      \"perp\": 8869,\n      \"sdot\": 8901,\n      \"lceil\": 8968,\n      \"rceil\": 8969,\n      \"lfloor\": 8970,\n      \"rfloor\": 8971,\n      \"lang\": 9001,\n      \"rang\": 9002,\n      \"loz\": 9674,\n      \"spades\": 9824,\n      \"clubs\": 9827,\n      \"hearts\": 9829,\n      \"diams\": 9830\n    };\n    Object.keys(sax2.ENTITIES).forEach(function(key) {\n      var e = sax2.ENTITIES[key];\n      var s3 = typeof e === \"number\" ? String.fromCharCode(e) : e;\n      sax2.ENTITIES[key] = s3;\n    });\n    for (var s2 in sax2.STATE) {\n      sax2.STATE[sax2.STATE[s2]] = s2;\n    }\n    S = sax2.STATE;\n    function emit2(parser, event, data) {\n      parser[event] && parser[event](data);\n    }\n    function emitNode(parser, nodeType, data) {\n      if (parser.textNode) closeText(parser);\n      emit2(parser, nodeType, data);\n    }\n    function closeText(parser) {\n      parser.textNode = textopts(parser.opt, parser.textNode);\n      if (parser.textNode) emit2(parser, \"ontext\", parser.textNode);\n      parser.textNode = \"\";\n    }\n    function textopts(opt, text) {\n      if (opt.trim) text = text.trim();\n      if (opt.normalize) text = text.replace(/\\s+/g, \" \");\n      return text;\n    }\n    function error(parser, er) {\n      closeText(parser);\n      if (parser.trackPosition) {\n        er += \"\\nLine: \" + parser.line + \"\\nColumn: \" + parser.column + \"\\nChar: \" + parser.c;\n      }\n      er = new Error(er);\n      parser.error = er;\n      emit2(parser, \"onerror\", er);\n      return parser;\n    }\n    function end(parser) {\n      if (parser.sawRoot && !parser.closedRoot) strictFail(parser, \"Unclosed root tag\");\n      if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) {\n        error(parser, \"Unexpected end\");\n      }\n      closeText(parser);\n      parser.c = \"\";\n      parser.closed = true;\n      emit2(parser, \"onend\");\n      SAXParser.call(parser, parser.strict, parser.opt);\n      return parser;\n    }\n    function strictFail(parser, message) {\n      if (typeof parser !== \"object\" || !(parser instanceof SAXParser)) {\n        throw new Error(\"bad call to strictFail\");\n      }\n      if (parser.strict) {\n        error(parser, message);\n      }\n    }\n    function newTag(parser) {\n      if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]();\n      var parent = parser.tags[parser.tags.length - 1] || parser;\n      var tag = parser.tag = { name: parser.tagName, attributes: {} };\n      if (parser.opt.xmlns) {\n        tag.ns = parent.ns;\n      }\n      parser.attribList.length = 0;\n      emitNode(parser, \"onopentagstart\", tag);\n    }\n    function qname(name, attribute2) {\n      var i = name.indexOf(\":\");\n      var qualName = i < 0 ? [\"\", name] : name.split(\":\");\n      var prefix = qualName[0];\n      var local = qualName[1];\n      if (attribute2 && name === \"xmlns\") {\n        prefix = \"xmlns\";\n        local = \"\";\n      }\n      return { prefix, local };\n    }\n    function attrib(parser) {\n      if (!parser.strict) {\n        parser.attribName = parser.attribName[parser.looseCase]();\n      }\n      if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n        parser.attribName = parser.attribValue = \"\";\n        return;\n      }\n      if (parser.opt.xmlns) {\n        var qn = qname(parser.attribName, true);\n        var prefix = qn.prefix;\n        var local = qn.local;\n        if (prefix === \"xmlns\") {\n          if (local === \"xml\" && parser.attribValue !== XML_NAMESPACE) {\n            strictFail(\n              parser,\n              \"xml: prefix must be bound to \" + XML_NAMESPACE + \"\\nActual: \" + parser.attribValue\n            );\n          } else if (local === \"xmlns\" && parser.attribValue !== XMLNS_NAMESPACE) {\n            strictFail(\n              parser,\n              \"xmlns: prefix must be bound to \" + XMLNS_NAMESPACE + \"\\nActual: \" + parser.attribValue\n            );\n          } else {\n            var tag = parser.tag;\n            var parent = parser.tags[parser.tags.length - 1] || parser;\n            if (tag.ns === parent.ns) {\n              tag.ns = Object.create(parent.ns);\n            }\n            tag.ns[local] = parser.attribValue;\n          }\n        }\n        parser.attribList.push([parser.attribName, parser.attribValue]);\n      } else {\n        parser.tag.attributes[parser.attribName] = parser.attribValue;\n        emitNode(parser, \"onattribute\", {\n          name: parser.attribName,\n          value: parser.attribValue\n        });\n      }\n      parser.attribName = parser.attribValue = \"\";\n    }\n    function openTag(parser, selfClosing) {\n      if (parser.opt.xmlns) {\n        var tag = parser.tag;\n        var qn = qname(parser.tagName);\n        tag.prefix = qn.prefix;\n        tag.local = qn.local;\n        tag.uri = tag.ns[qn.prefix] || \"\";\n        if (tag.prefix && !tag.uri) {\n          strictFail(parser, \"Unbound namespace prefix: \" + JSON.stringify(parser.tagName));\n          tag.uri = qn.prefix;\n        }\n        var parent = parser.tags[parser.tags.length - 1] || parser;\n        if (tag.ns && parent.ns !== tag.ns) {\n          Object.keys(tag.ns).forEach(function(p) {\n            emitNode(parser, \"onopennamespace\", {\n              prefix: p,\n              uri: tag.ns[p]\n            });\n          });\n        }\n        for (var i = 0, l = parser.attribList.length; i < l; i++) {\n          var nv = parser.attribList[i];\n          var name = nv[0];\n          var value = nv[1];\n          var qualName = qname(name, true);\n          var prefix = qualName.prefix;\n          var local = qualName.local;\n          var uri2 = prefix === \"\" ? \"\" : tag.ns[prefix] || \"\";\n          var a = {\n            name,\n            value,\n            prefix,\n            local,\n            uri: uri2\n          };\n          if (prefix && prefix !== \"xmlns\" && !uri2) {\n            strictFail(parser, \"Unbound namespace prefix: \" + JSON.stringify(prefix));\n            a.uri = prefix;\n          }\n          parser.tag.attributes[name] = a;\n          emitNode(parser, \"onattribute\", a);\n        }\n        parser.attribList.length = 0;\n      }\n      parser.tag.isSelfClosing = !!selfClosing;\n      parser.sawRoot = true;\n      parser.tags.push(parser.tag);\n      emitNode(parser, \"onopentag\", parser.tag);\n      if (!selfClosing) {\n        if (!parser.noscript && parser.tagName.toLowerCase() === \"script\") {\n          parser.state = S.SCRIPT;\n        } else {\n          parser.state = S.TEXT;\n        }\n        parser.tag = null;\n        parser.tagName = \"\";\n      }\n      parser.attribName = parser.attribValue = \"\";\n      parser.attribList.length = 0;\n    }\n    function closeTag(parser) {\n      if (!parser.tagName) {\n        strictFail(parser, \"Weird empty close tag.\");\n        parser.textNode += \"</>\";\n        parser.state = S.TEXT;\n        return;\n      }\n      if (parser.script) {\n        if (parser.tagName !== \"script\") {\n          parser.script += \"</\" + parser.tagName + \">\";\n          parser.tagName = \"\";\n          parser.state = S.SCRIPT;\n          return;\n        }\n        emitNode(parser, \"onscript\", parser.script);\n        parser.script = \"\";\n      }\n      var t = parser.tags.length;\n      var tagName = parser.tagName;\n      if (!parser.strict) {\n        tagName = tagName[parser.looseCase]();\n      }\n      var closeTo = tagName;\n      while (t--) {\n        var close = parser.tags[t];\n        if (close.name !== closeTo) {\n          strictFail(parser, \"Unexpected close tag\");\n        } else {\n          break;\n        }\n      }\n      if (t < 0) {\n        strictFail(parser, \"Unmatched closing tag: \" + parser.tagName);\n        parser.textNode += \"</\" + parser.tagName + \">\";\n        parser.state = S.TEXT;\n        return;\n      }\n      parser.tagName = tagName;\n      var s3 = parser.tags.length;\n      while (s3-- > t) {\n        var tag = parser.tag = parser.tags.pop();\n        parser.tagName = parser.tag.name;\n        emitNode(parser, \"onclosetag\", parser.tagName);\n        var x = {};\n        for (var i in tag.ns) {\n          x[i] = tag.ns[i];\n        }\n        var parent = parser.tags[parser.tags.length - 1] || parser;\n        if (parser.opt.xmlns && tag.ns !== parent.ns) {\n          Object.keys(tag.ns).forEach(function(p) {\n            var n = tag.ns[p];\n            emitNode(parser, \"onclosenamespace\", { prefix: p, uri: n });\n          });\n        }\n      }\n      if (t === 0) parser.closedRoot = true;\n      parser.tagName = parser.attribValue = parser.attribName = \"\";\n      parser.attribList.length = 0;\n      parser.state = S.TEXT;\n    }\n    function parseEntity(parser) {\n      var entity = parser.entity;\n      var entityLC = entity.toLowerCase();\n      var num;\n      var numStr = \"\";\n      if (parser.ENTITIES[entity]) {\n        return parser.ENTITIES[entity];\n      }\n      if (parser.ENTITIES[entityLC]) {\n        return parser.ENTITIES[entityLC];\n      }\n      entity = entityLC;\n      if (entity.charAt(0) === \"#\") {\n        if (entity.charAt(1) === \"x\") {\n          entity = entity.slice(2);\n          num = parseInt(entity, 16);\n          numStr = num.toString(16);\n        } else {\n          entity = entity.slice(1);\n          num = parseInt(entity, 10);\n          numStr = num.toString(10);\n        }\n      }\n      entity = entity.replace(/^0+/, \"\");\n      if (isNaN(num) || numStr.toLowerCase() !== entity) {\n        strictFail(parser, \"Invalid character entity\");\n        return \"&\" + parser.entity + \";\";\n      }\n      return String.fromCodePoint(num);\n    }\n    function beginWhiteSpace(parser, c) {\n      if (c === \"<\") {\n        parser.state = S.OPEN_WAKA;\n        parser.startTagPosition = parser.position;\n      } else if (!isWhitespace(c)) {\n        strictFail(parser, \"Non-whitespace before first tag.\");\n        parser.textNode = c;\n        parser.state = S.TEXT;\n      }\n    }\n    function charAt(chunk, i) {\n      var result = \"\";\n      if (i < chunk.length) {\n        result = chunk.charAt(i);\n      }\n      return result;\n    }\n    function write(chunk) {\n      var parser = this;\n      if (this.error) {\n        throw this.error;\n      }\n      if (parser.closed) {\n        return error(\n          parser,\n          \"Cannot write after close. Assign an onready handler.\"\n        );\n      }\n      if (chunk === null) {\n        return end(parser);\n      }\n      if (typeof chunk === \"object\") {\n        chunk = chunk.toString();\n      }\n      var i = 0;\n      var c = \"\";\n      while (true) {\n        c = charAt(chunk, i++);\n        parser.c = c;\n        if (!c) {\n          break;\n        }\n        if (parser.trackPosition) {\n          parser.position++;\n          if (c === \"\\n\") {\n            parser.line++;\n            parser.column = 0;\n          } else {\n            parser.column++;\n          }\n        }\n        switch (parser.state) {\n          case S.BEGIN:\n            parser.state = S.BEGIN_WHITESPACE;\n            if (c === \"\\uFEFF\") {\n              continue;\n            }\n            beginWhiteSpace(parser, c);\n            continue;\n          case S.BEGIN_WHITESPACE:\n            beginWhiteSpace(parser, c);\n            continue;\n          case S.TEXT:\n            if (parser.sawRoot && !parser.closedRoot) {\n              var starti = i - 1;\n              while (c && c !== \"<\" && c !== \"&\") {\n                c = charAt(chunk, i++);\n                if (c && parser.trackPosition) {\n                  parser.position++;\n                  if (c === \"\\n\") {\n                    parser.line++;\n                    parser.column = 0;\n                  } else {\n                    parser.column++;\n                  }\n                }\n              }\n              parser.textNode += chunk.substring(starti, i - 1);\n            }\n            if (c === \"<\" && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n              parser.state = S.OPEN_WAKA;\n              parser.startTagPosition = parser.position;\n            } else {\n              if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n                strictFail(parser, \"Text data outside of root node.\");\n              }\n              if (c === \"&\") {\n                parser.state = S.TEXT_ENTITY;\n              } else {\n                parser.textNode += c;\n              }\n            }\n            continue;\n          case S.SCRIPT:\n            if (c === \"<\") {\n              parser.state = S.SCRIPT_ENDING;\n            } else {\n              parser.script += c;\n            }\n            continue;\n          case S.SCRIPT_ENDING:\n            if (c === \"/\") {\n              parser.state = S.CLOSE_TAG;\n            } else {\n              parser.script += \"<\" + c;\n              parser.state = S.SCRIPT;\n            }\n            continue;\n          case S.OPEN_WAKA:\n            if (c === \"!\") {\n              parser.state = S.SGML_DECL;\n              parser.sgmlDecl = \"\";\n            } else if (isWhitespace(c)) ;\n            else if (isMatch(nameStart, c)) {\n              parser.state = S.OPEN_TAG;\n              parser.tagName = c;\n            } else if (c === \"/\") {\n              parser.state = S.CLOSE_TAG;\n              parser.tagName = \"\";\n            } else if (c === \"?\") {\n              parser.state = S.PROC_INST;\n              parser.procInstName = parser.procInstBody = \"\";\n            } else {\n              strictFail(parser, \"Unencoded <\");\n              if (parser.startTagPosition + 1 < parser.position) {\n                var pad2 = parser.position - parser.startTagPosition;\n                c = new Array(pad2).join(\" \") + c;\n              }\n              parser.textNode += \"<\" + c;\n              parser.state = S.TEXT;\n            }\n            continue;\n          case S.SGML_DECL:\n            if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n              emitNode(parser, \"onopencdata\");\n              parser.state = S.CDATA;\n              parser.sgmlDecl = \"\";\n              parser.cdata = \"\";\n            } else if (parser.sgmlDecl + c === \"--\") {\n              parser.state = S.COMMENT;\n              parser.comment = \"\";\n              parser.sgmlDecl = \"\";\n            } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n              parser.state = S.DOCTYPE;\n              if (parser.doctype || parser.sawRoot) {\n                strictFail(\n                  parser,\n                  \"Inappropriately located doctype declaration\"\n                );\n              }\n              parser.doctype = \"\";\n              parser.sgmlDecl = \"\";\n            } else if (c === \">\") {\n              emitNode(parser, \"onsgmldeclaration\", parser.sgmlDecl);\n              parser.sgmlDecl = \"\";\n              parser.state = S.TEXT;\n            } else if (isQuote(c)) {\n              parser.state = S.SGML_DECL_QUOTED;\n              parser.sgmlDecl += c;\n            } else {\n              parser.sgmlDecl += c;\n            }\n            continue;\n          case S.SGML_DECL_QUOTED:\n            if (c === parser.q) {\n              parser.state = S.SGML_DECL;\n              parser.q = \"\";\n            }\n            parser.sgmlDecl += c;\n            continue;\n          case S.DOCTYPE:\n            if (c === \">\") {\n              parser.state = S.TEXT;\n              emitNode(parser, \"ondoctype\", parser.doctype);\n              parser.doctype = true;\n            } else {\n              parser.doctype += c;\n              if (c === \"[\") {\n                parser.state = S.DOCTYPE_DTD;\n              } else if (isQuote(c)) {\n                parser.state = S.DOCTYPE_QUOTED;\n                parser.q = c;\n              }\n            }\n            continue;\n          case S.DOCTYPE_QUOTED:\n            parser.doctype += c;\n            if (c === parser.q) {\n              parser.q = \"\";\n              parser.state = S.DOCTYPE;\n            }\n            continue;\n          case S.DOCTYPE_DTD:\n            parser.doctype += c;\n            if (c === \"]\") {\n              parser.state = S.DOCTYPE;\n            } else if (isQuote(c)) {\n              parser.state = S.DOCTYPE_DTD_QUOTED;\n              parser.q = c;\n            }\n            continue;\n          case S.DOCTYPE_DTD_QUOTED:\n            parser.doctype += c;\n            if (c === parser.q) {\n              parser.state = S.DOCTYPE_DTD;\n              parser.q = \"\";\n            }\n            continue;\n          case S.COMMENT:\n            if (c === \"-\") {\n              parser.state = S.COMMENT_ENDING;\n            } else {\n              parser.comment += c;\n            }\n            continue;\n          case S.COMMENT_ENDING:\n            if (c === \"-\") {\n              parser.state = S.COMMENT_ENDED;\n              parser.comment = textopts(parser.opt, parser.comment);\n              if (parser.comment) {\n                emitNode(parser, \"oncomment\", parser.comment);\n              }\n              parser.comment = \"\";\n            } else {\n              parser.comment += \"-\" + c;\n              parser.state = S.COMMENT;\n            }\n            continue;\n          case S.COMMENT_ENDED:\n            if (c !== \">\") {\n              strictFail(parser, \"Malformed comment\");\n              parser.comment += \"--\" + c;\n              parser.state = S.COMMENT;\n            } else {\n              parser.state = S.TEXT;\n            }\n            continue;\n          case S.CDATA:\n            if (c === \"]\") {\n              parser.state = S.CDATA_ENDING;\n            } else {\n              parser.cdata += c;\n            }\n            continue;\n          case S.CDATA_ENDING:\n            if (c === \"]\") {\n              parser.state = S.CDATA_ENDING_2;\n            } else {\n              parser.cdata += \"]\" + c;\n              parser.state = S.CDATA;\n            }\n            continue;\n          case S.CDATA_ENDING_2:\n            if (c === \">\") {\n              if (parser.cdata) {\n                emitNode(parser, \"oncdata\", parser.cdata);\n              }\n              emitNode(parser, \"onclosecdata\");\n              parser.cdata = \"\";\n              parser.state = S.TEXT;\n            } else if (c === \"]\") {\n              parser.cdata += \"]\";\n            } else {\n              parser.cdata += \"]]\" + c;\n              parser.state = S.CDATA;\n            }\n            continue;\n          case S.PROC_INST:\n            if (c === \"?\") {\n              parser.state = S.PROC_INST_ENDING;\n            } else if (isWhitespace(c)) {\n              parser.state = S.PROC_INST_BODY;\n            } else {\n              parser.procInstName += c;\n            }\n            continue;\n          case S.PROC_INST_BODY:\n            if (!parser.procInstBody && isWhitespace(c)) {\n              continue;\n            } else if (c === \"?\") {\n              parser.state = S.PROC_INST_ENDING;\n            } else {\n              parser.procInstBody += c;\n            }\n            continue;\n          case S.PROC_INST_ENDING:\n            if (c === \">\") {\n              emitNode(parser, \"onprocessinginstruction\", {\n                name: parser.procInstName,\n                body: parser.procInstBody\n              });\n              parser.procInstName = parser.procInstBody = \"\";\n              parser.state = S.TEXT;\n            } else {\n              parser.procInstBody += \"?\" + c;\n              parser.state = S.PROC_INST_BODY;\n            }\n            continue;\n          case S.OPEN_TAG:\n            if (isMatch(nameBody, c)) {\n              parser.tagName += c;\n            } else {\n              newTag(parser);\n              if (c === \">\") {\n                openTag(parser);\n              } else if (c === \"/\") {\n                parser.state = S.OPEN_TAG_SLASH;\n              } else {\n                if (!isWhitespace(c)) {\n                  strictFail(parser, \"Invalid character in tag name\");\n                }\n                parser.state = S.ATTRIB;\n              }\n            }\n            continue;\n          case S.OPEN_TAG_SLASH:\n            if (c === \">\") {\n              openTag(parser, true);\n              closeTag(parser);\n            } else {\n              strictFail(parser, \"Forward-slash in opening tag not followed by >\");\n              parser.state = S.ATTRIB;\n            }\n            continue;\n          case S.ATTRIB:\n            if (isWhitespace(c)) {\n              continue;\n            } else if (c === \">\") {\n              openTag(parser);\n            } else if (c === \"/\") {\n              parser.state = S.OPEN_TAG_SLASH;\n            } else if (isMatch(nameStart, c)) {\n              parser.attribName = c;\n              parser.attribValue = \"\";\n              parser.state = S.ATTRIB_NAME;\n            } else {\n              strictFail(parser, \"Invalid attribute name\");\n            }\n            continue;\n          case S.ATTRIB_NAME:\n            if (c === \"=\") {\n              parser.state = S.ATTRIB_VALUE;\n            } else if (c === \">\") {\n              strictFail(parser, \"Attribute without value\");\n              parser.attribValue = parser.attribName;\n              attrib(parser);\n              openTag(parser);\n            } else if (isWhitespace(c)) {\n              parser.state = S.ATTRIB_NAME_SAW_WHITE;\n            } else if (isMatch(nameBody, c)) {\n              parser.attribName += c;\n            } else {\n              strictFail(parser, \"Invalid attribute name\");\n            }\n            continue;\n          case S.ATTRIB_NAME_SAW_WHITE:\n            if (c === \"=\") {\n              parser.state = S.ATTRIB_VALUE;\n            } else if (isWhitespace(c)) {\n              continue;\n            } else {\n              strictFail(parser, \"Attribute without value\");\n              parser.tag.attributes[parser.attribName] = \"\";\n              parser.attribValue = \"\";\n              emitNode(parser, \"onattribute\", {\n                name: parser.attribName,\n                value: \"\"\n              });\n              parser.attribName = \"\";\n              if (c === \">\") {\n                openTag(parser);\n              } else if (isMatch(nameStart, c)) {\n                parser.attribName = c;\n                parser.state = S.ATTRIB_NAME;\n              } else {\n                strictFail(parser, \"Invalid attribute name\");\n                parser.state = S.ATTRIB;\n              }\n            }\n            continue;\n          case S.ATTRIB_VALUE:\n            if (isWhitespace(c)) {\n              continue;\n            } else if (isQuote(c)) {\n              parser.q = c;\n              parser.state = S.ATTRIB_VALUE_QUOTED;\n            } else {\n              strictFail(parser, \"Unquoted attribute value\");\n              parser.state = S.ATTRIB_VALUE_UNQUOTED;\n              parser.attribValue = c;\n            }\n            continue;\n          case S.ATTRIB_VALUE_QUOTED:\n            if (c !== parser.q) {\n              if (c === \"&\") {\n                parser.state = S.ATTRIB_VALUE_ENTITY_Q;\n              } else {\n                parser.attribValue += c;\n              }\n              continue;\n            }\n            attrib(parser);\n            parser.q = \"\";\n            parser.state = S.ATTRIB_VALUE_CLOSED;\n            continue;\n          case S.ATTRIB_VALUE_CLOSED:\n            if (isWhitespace(c)) {\n              parser.state = S.ATTRIB;\n            } else if (c === \">\") {\n              openTag(parser);\n            } else if (c === \"/\") {\n              parser.state = S.OPEN_TAG_SLASH;\n            } else if (isMatch(nameStart, c)) {\n              strictFail(parser, \"No whitespace between attributes\");\n              parser.attribName = c;\n              parser.attribValue = \"\";\n              parser.state = S.ATTRIB_NAME;\n            } else {\n              strictFail(parser, \"Invalid attribute name\");\n            }\n            continue;\n          case S.ATTRIB_VALUE_UNQUOTED:\n            if (!isAttribEnd(c)) {\n              if (c === \"&\") {\n                parser.state = S.ATTRIB_VALUE_ENTITY_U;\n              } else {\n                parser.attribValue += c;\n              }\n              continue;\n            }\n            attrib(parser);\n            if (c === \">\") {\n              openTag(parser);\n            } else {\n              parser.state = S.ATTRIB;\n            }\n            continue;\n          case S.CLOSE_TAG:\n            if (!parser.tagName) {\n              if (isWhitespace(c)) {\n                continue;\n              } else if (notMatch(nameStart, c)) {\n                if (parser.script) {\n                  parser.script += \"</\" + c;\n                  parser.state = S.SCRIPT;\n                } else {\n                  strictFail(parser, \"Invalid tagname in closing tag.\");\n                }\n              } else {\n                parser.tagName = c;\n              }\n            } else if (c === \">\") {\n              closeTag(parser);\n            } else if (isMatch(nameBody, c)) {\n              parser.tagName += c;\n            } else if (parser.script) {\n              parser.script += \"</\" + parser.tagName;\n              parser.tagName = \"\";\n              parser.state = S.SCRIPT;\n            } else {\n              if (!isWhitespace(c)) {\n                strictFail(parser, \"Invalid tagname in closing tag\");\n              }\n              parser.state = S.CLOSE_TAG_SAW_WHITE;\n            }\n            continue;\n          case S.CLOSE_TAG_SAW_WHITE:\n            if (isWhitespace(c)) {\n              continue;\n            }\n            if (c === \">\") {\n              closeTag(parser);\n            } else {\n              strictFail(parser, \"Invalid characters in closing tag\");\n            }\n            continue;\n          case S.TEXT_ENTITY:\n          case S.ATTRIB_VALUE_ENTITY_Q:\n          case S.ATTRIB_VALUE_ENTITY_U:\n            var returnState;\n            var buffer2;\n            switch (parser.state) {\n              case S.TEXT_ENTITY:\n                returnState = S.TEXT;\n                buffer2 = \"textNode\";\n                break;\n              case S.ATTRIB_VALUE_ENTITY_Q:\n                returnState = S.ATTRIB_VALUE_QUOTED;\n                buffer2 = \"attribValue\";\n                break;\n              case S.ATTRIB_VALUE_ENTITY_U:\n                returnState = S.ATTRIB_VALUE_UNQUOTED;\n                buffer2 = \"attribValue\";\n                break;\n            }\n            if (c === \";\") {\n              parser[buffer2] += parseEntity(parser);\n              parser.entity = \"\";\n              parser.state = returnState;\n            } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n              parser.entity += c;\n            } else {\n              strictFail(parser, \"Invalid character in entity name\");\n              parser[buffer2] += \"&\" + parser.entity + c;\n              parser.entity = \"\";\n              parser.state = returnState;\n            }\n            continue;\n          default:\n            throw new Error(parser, \"Unknown state: \" + parser.state);\n        }\n      }\n      if (parser.position >= parser.bufferCheckPosition) {\n        checkBufferLength(parser);\n      }\n      return parser;\n    }\n    /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */\n    if (!String.fromCodePoint) {\n      (function() {\n        var stringFromCharCode = String.fromCharCode;\n        var floor = Math.floor;\n        var fromCodePoint = function() {\n          var MAX_SIZE = 16384;\n          var codeUnits = [];\n          var highSurrogate;\n          var lowSurrogate;\n          var index = -1;\n          var length = arguments.length;\n          if (!length) {\n            return \"\";\n          }\n          var result = \"\";\n          while (++index < length) {\n            var codePoint = Number(arguments[index]);\n            if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n            codePoint < 0 || // not a valid Unicode code point\n            codePoint > 1114111 || // not a valid Unicode code point\n            floor(codePoint) !== codePoint) {\n              throw RangeError(\"Invalid code point: \" + codePoint);\n            }\n            if (codePoint <= 65535) {\n              codeUnits.push(codePoint);\n            } else {\n              codePoint -= 65536;\n              highSurrogate = (codePoint >> 10) + 55296;\n              lowSurrogate = codePoint % 1024 + 56320;\n              codeUnits.push(highSurrogate, lowSurrogate);\n            }\n            if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n              result += stringFromCharCode.apply(null, codeUnits);\n              codeUnits.length = 0;\n            }\n          }\n          return result;\n        };\n        if (Object.defineProperty) {\n          Object.defineProperty(String, \"fromCodePoint\", {\n            value: fromCodePoint,\n            configurable: true,\n            writable: true\n          });\n        } else {\n          String.fromCodePoint = fromCodePoint;\n        }\n      })();\n    }\n  })(exports);\n})(sax$1);\nvar arrayHelper = {\n  isArray: function(value) {\n    if (Array.isArray) {\n      return Array.isArray(value);\n    }\n    return Object.prototype.toString.call(value) === \"[object Array]\";\n  }\n};\nvar isArray$2 = arrayHelper.isArray;\nvar optionsHelper = {\n  copyOptions: function(options2) {\n    var key, copy = {};\n    for (key in options2) {\n      if (options2.hasOwnProperty(key)) {\n        copy[key] = options2[key];\n      }\n    }\n    return copy;\n  },\n  ensureFlagExists: function(item, options2) {\n    if (!(item in options2) || typeof options2[item] !== \"boolean\") {\n      options2[item] = false;\n    }\n  },\n  ensureSpacesExists: function(options2) {\n    if (!(\"spaces\" in options2) || typeof options2.spaces !== \"number\" && typeof options2.spaces !== \"string\") {\n      options2.spaces = 0;\n    }\n  },\n  ensureAlwaysArrayExists: function(options2) {\n    if (!(\"alwaysArray\" in options2) || typeof options2.alwaysArray !== \"boolean\" && !isArray$2(options2.alwaysArray)) {\n      options2.alwaysArray = false;\n    }\n  },\n  ensureKeyExists: function(key, options2) {\n    if (!(key + \"Key\" in options2) || typeof options2[key + \"Key\"] !== \"string\") {\n      options2[key + \"Key\"] = options2.compact ? \"_\" + key : key;\n    }\n  },\n  checkFnExists: function(key, options2) {\n    return key + \"Fn\" in options2;\n  }\n};\nvar sax = sax$1;\nvar helper$2 = optionsHelper;\nvar isArray$1 = arrayHelper.isArray;\nvar options;\nvar currentElement$1;\nfunction validateOptions$2(userOptions) {\n  options = helper$2.copyOptions(userOptions);\n  helper$2.ensureFlagExists(\"ignoreDeclaration\", options);\n  helper$2.ensureFlagExists(\"ignoreInstruction\", options);\n  helper$2.ensureFlagExists(\"ignoreAttributes\", options);\n  helper$2.ensureFlagExists(\"ignoreText\", options);\n  helper$2.ensureFlagExists(\"ignoreComment\", options);\n  helper$2.ensureFlagExists(\"ignoreCdata\", options);\n  helper$2.ensureFlagExists(\"ignoreDoctype\", options);\n  helper$2.ensureFlagExists(\"compact\", options);\n  helper$2.ensureFlagExists(\"alwaysChildren\", options);\n  helper$2.ensureFlagExists(\"addParent\", options);\n  helper$2.ensureFlagExists(\"trim\", options);\n  helper$2.ensureFlagExists(\"nativeType\", options);\n  helper$2.ensureFlagExists(\"nativeTypeAttributes\", options);\n  helper$2.ensureFlagExists(\"sanitize\", options);\n  helper$2.ensureFlagExists(\"instructionHasAttributes\", options);\n  helper$2.ensureFlagExists(\"captureSpacesBetweenElements\", options);\n  helper$2.ensureAlwaysArrayExists(options);\n  helper$2.ensureKeyExists(\"declaration\", options);\n  helper$2.ensureKeyExists(\"instruction\", options);\n  helper$2.ensureKeyExists(\"attributes\", options);\n  helper$2.ensureKeyExists(\"text\", options);\n  helper$2.ensureKeyExists(\"comment\", options);\n  helper$2.ensureKeyExists(\"cdata\", options);\n  helper$2.ensureKeyExists(\"doctype\", options);\n  helper$2.ensureKeyExists(\"type\", options);\n  helper$2.ensureKeyExists(\"name\", options);\n  helper$2.ensureKeyExists(\"elements\", options);\n  helper$2.ensureKeyExists(\"parent\", options);\n  helper$2.checkFnExists(\"doctype\", options);\n  helper$2.checkFnExists(\"instruction\", options);\n  helper$2.checkFnExists(\"cdata\", options);\n  helper$2.checkFnExists(\"comment\", options);\n  helper$2.checkFnExists(\"text\", options);\n  helper$2.checkFnExists(\"instructionName\", options);\n  helper$2.checkFnExists(\"elementName\", options);\n  helper$2.checkFnExists(\"attributeName\", options);\n  helper$2.checkFnExists(\"attributeValue\", options);\n  helper$2.checkFnExists(\"attributes\", options);\n  return options;\n}\nfunction nativeType(value) {\n  var nValue = Number(value);\n  if (!isNaN(nValue)) {\n    return nValue;\n  }\n  var bValue = value.toLowerCase();\n  if (bValue === \"true\") {\n    return true;\n  } else if (bValue === \"false\") {\n    return false;\n  }\n  return value;\n}\nfunction addField(type2, value) {\n  var key;\n  if (options.compact) {\n    if (!currentElement$1[options[type2 + \"Key\"]] && (isArray$1(options.alwaysArray) ? options.alwaysArray.indexOf(options[type2 + \"Key\"]) !== -1 : options.alwaysArray)) {\n      currentElement$1[options[type2 + \"Key\"]] = [];\n    }\n    if (currentElement$1[options[type2 + \"Key\"]] && !isArray$1(currentElement$1[options[type2 + \"Key\"]])) {\n      currentElement$1[options[type2 + \"Key\"]] = [currentElement$1[options[type2 + \"Key\"]]];\n    }\n    if (type2 + \"Fn\" in options && typeof value === \"string\") {\n      value = options[type2 + \"Fn\"](value, currentElement$1);\n    }\n    if (type2 === \"instruction\" && (\"instructionFn\" in options || \"instructionNameFn\" in options)) {\n      for (key in value) {\n        if (value.hasOwnProperty(key)) {\n          if (\"instructionFn\" in options) {\n            value[key] = options.instructionFn(value[key], key, currentElement$1);\n          } else {\n            var temp = value[key];\n            delete value[key];\n            value[options.instructionNameFn(key, temp, currentElement$1)] = temp;\n          }\n        }\n      }\n    }\n    if (isArray$1(currentElement$1[options[type2 + \"Key\"]])) {\n      currentElement$1[options[type2 + \"Key\"]].push(value);\n    } else {\n      currentElement$1[options[type2 + \"Key\"]] = value;\n    }\n  } else {\n    if (!currentElement$1[options.elementsKey]) {\n      currentElement$1[options.elementsKey] = [];\n    }\n    var element2 = {};\n    element2[options.typeKey] = type2;\n    if (type2 === \"instruction\") {\n      for (key in value) {\n        if (value.hasOwnProperty(key)) {\n          break;\n        }\n      }\n      element2[options.nameKey] = \"instructionNameFn\" in options ? options.instructionNameFn(key, value, currentElement$1) : key;\n      if (options.instructionHasAttributes) {\n        element2[options.attributesKey] = value[key][options.attributesKey];\n        if (\"instructionFn\" in options) {\n          element2[options.attributesKey] = options.instructionFn(element2[options.attributesKey], key, currentElement$1);\n        }\n      } else {\n        if (\"instructionFn\" in options) {\n          value[key] = options.instructionFn(value[key], key, currentElement$1);\n        }\n        element2[options.instructionKey] = value[key];\n      }\n    } else {\n      if (type2 + \"Fn\" in options) {\n        value = options[type2 + \"Fn\"](value, currentElement$1);\n      }\n      element2[options[type2 + \"Key\"]] = value;\n    }\n    if (options.addParent) {\n      element2[options.parentKey] = currentElement$1;\n    }\n    currentElement$1[options.elementsKey].push(element2);\n  }\n}\nfunction manipulateAttributes(attributes) {\n  if (\"attributesFn\" in options && attributes) {\n    attributes = options.attributesFn(attributes, currentElement$1);\n  }\n  if ((options.trim || \"attributeValueFn\" in options || \"attributeNameFn\" in options || options.nativeTypeAttributes) && attributes) {\n    var key;\n    for (key in attributes) {\n      if (attributes.hasOwnProperty(key)) {\n        if (options.trim) attributes[key] = attributes[key].trim();\n        if (options.nativeTypeAttributes) {\n          attributes[key] = nativeType(attributes[key]);\n        }\n        if (\"attributeValueFn\" in options) attributes[key] = options.attributeValueFn(attributes[key], key, currentElement$1);\n        if (\"attributeNameFn\" in options) {\n          var temp = attributes[key];\n          delete attributes[key];\n          attributes[options.attributeNameFn(key, attributes[key], currentElement$1)] = temp;\n        }\n      }\n    }\n  }\n  return attributes;\n}\nfunction onInstruction(instruction) {\n  var attributes = {};\n  if (instruction.body && (instruction.name.toLowerCase() === \"xml\" || options.instructionHasAttributes)) {\n    var attrsRegExp = /([\\w:-]+)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|(\\w+))\\s*/g;\n    var match;\n    while ((match = attrsRegExp.exec(instruction.body)) !== null) {\n      attributes[match[1]] = match[2] || match[3] || match[4];\n    }\n    attributes = manipulateAttributes(attributes);\n  }\n  if (instruction.name.toLowerCase() === \"xml\") {\n    if (options.ignoreDeclaration) {\n      return;\n    }\n    currentElement$1[options.declarationKey] = {};\n    if (Object.keys(attributes).length) {\n      currentElement$1[options.declarationKey][options.attributesKey] = attributes;\n    }\n    if (options.addParent) {\n      currentElement$1[options.declarationKey][options.parentKey] = currentElement$1;\n    }\n  } else {\n    if (options.ignoreInstruction) {\n      return;\n    }\n    if (options.trim) {\n      instruction.body = instruction.body.trim();\n    }\n    var value = {};\n    if (options.instructionHasAttributes && Object.keys(attributes).length) {\n      value[instruction.name] = {};\n      value[instruction.name][options.attributesKey] = attributes;\n    } else {\n      value[instruction.name] = instruction.body;\n    }\n    addField(\"instruction\", value);\n  }\n}\nfunction onStartElement(name, attributes) {\n  var element2;\n  if (typeof name === \"object\") {\n    attributes = name.attributes;\n    name = name.name;\n  }\n  attributes = manipulateAttributes(attributes);\n  if (\"elementNameFn\" in options) {\n    name = options.elementNameFn(name, currentElement$1);\n  }\n  if (options.compact) {\n    element2 = {};\n    if (!options.ignoreAttributes && attributes && Object.keys(attributes).length) {\n      element2[options.attributesKey] = {};\n      var key;\n      for (key in attributes) {\n        if (attributes.hasOwnProperty(key)) {\n          element2[options.attributesKey][key] = attributes[key];\n        }\n      }\n    }\n    if (!(name in currentElement$1) && (isArray$1(options.alwaysArray) ? options.alwaysArray.indexOf(name) !== -1 : options.alwaysArray)) {\n      currentElement$1[name] = [];\n    }\n    if (currentElement$1[name] && !isArray$1(currentElement$1[name])) {\n      currentElement$1[name] = [currentElement$1[name]];\n    }\n    if (isArray$1(currentElement$1[name])) {\n      currentElement$1[name].push(element2);\n    } else {\n      currentElement$1[name] = element2;\n    }\n  } else {\n    if (!currentElement$1[options.elementsKey]) {\n      currentElement$1[options.elementsKey] = [];\n    }\n    element2 = {};\n    element2[options.typeKey] = \"element\";\n    element2[options.nameKey] = name;\n    if (!options.ignoreAttributes && attributes && Object.keys(attributes).length) {\n      element2[options.attributesKey] = attributes;\n    }\n    if (options.alwaysChildren) {\n      element2[options.elementsKey] = [];\n    }\n    currentElement$1[options.elementsKey].push(element2);\n  }\n  element2[options.parentKey] = currentElement$1;\n  currentElement$1 = element2;\n}\nfunction onText(text) {\n  if (options.ignoreText) {\n    return;\n  }\n  if (!text.trim() && !options.captureSpacesBetweenElements) {\n    return;\n  }\n  if (options.trim) {\n    text = text.trim();\n  }\n  if (options.nativeType) {\n    text = nativeType(text);\n  }\n  if (options.sanitize) {\n    text = text.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n  }\n  addField(\"text\", text);\n}\nfunction onComment(comment) {\n  if (options.ignoreComment) {\n    return;\n  }\n  if (options.trim) {\n    comment = comment.trim();\n  }\n  addField(\"comment\", comment);\n}\nfunction onEndElement(name) {\n  var parentElement = currentElement$1[options.parentKey];\n  if (!options.addParent) {\n    delete currentElement$1[options.parentKey];\n  }\n  currentElement$1 = parentElement;\n}\nfunction onCdata(cdata) {\n  if (options.ignoreCdata) {\n    return;\n  }\n  if (options.trim) {\n    cdata = cdata.trim();\n  }\n  addField(\"cdata\", cdata);\n}\nfunction onDoctype(doctype) {\n  if (options.ignoreDoctype) {\n    return;\n  }\n  doctype = doctype.replace(/^ /, \"\");\n  if (options.trim) {\n    doctype = doctype.trim();\n  }\n  addField(\"doctype\", doctype);\n}\nfunction onError(error) {\n  error.note = error;\n}\nvar xml2js$2 = function(xml2, userOptions) {\n  var parser = sax.parser(true, {});\n  var result = {};\n  currentElement$1 = result;\n  options = validateOptions$2(userOptions);\n  {\n    parser.opt = { strictEntities: true };\n    parser.onopentag = onStartElement;\n    parser.ontext = onText;\n    parser.oncomment = onComment;\n    parser.onclosetag = onEndElement;\n    parser.onerror = onError;\n    parser.oncdata = onCdata;\n    parser.ondoctype = onDoctype;\n    parser.onprocessinginstruction = onInstruction;\n  }\n  {\n    parser.write(xml2).close();\n  }\n  if (result[options.elementsKey]) {\n    var temp = result[options.elementsKey];\n    delete result[options.elementsKey];\n    result[options.elementsKey] = temp;\n    delete result.text;\n  }\n  return result;\n};\nvar helper$1 = optionsHelper;\nvar xml2js$1 = xml2js$2;\nfunction validateOptions$1(userOptions) {\n  var options2 = helper$1.copyOptions(userOptions);\n  helper$1.ensureSpacesExists(options2);\n  return options2;\n}\nvar xml2json$1 = function(xml2, userOptions) {\n  var options2, js, json, parentKey;\n  options2 = validateOptions$1(userOptions);\n  js = xml2js$1(xml2, options2);\n  parentKey = \"compact\" in options2 && options2.compact ? \"_parent\" : \"parent\";\n  if (\"addParent\" in options2 && options2.addParent) {\n    json = JSON.stringify(js, function(k, v) {\n      return k === parentKey ? \"_\" : v;\n    }, options2.spaces);\n  } else {\n    json = JSON.stringify(js, null, options2.spaces);\n  }\n  return json.replace(/\\u2028/g, \"\\\\u2028\").replace(/\\u2029/g, \"\\\\u2029\");\n};\nvar helper = optionsHelper;\nvar isArray = arrayHelper.isArray;\nvar currentElement, currentElementName;\nfunction validateOptions(userOptions) {\n  var options2 = helper.copyOptions(userOptions);\n  helper.ensureFlagExists(\"ignoreDeclaration\", options2);\n  helper.ensureFlagExists(\"ignoreInstruction\", options2);\n  helper.ensureFlagExists(\"ignoreAttributes\", options2);\n  helper.ensureFlagExists(\"ignoreText\", options2);\n  helper.ensureFlagExists(\"ignoreComment\", options2);\n  helper.ensureFlagExists(\"ignoreCdata\", options2);\n  helper.ensureFlagExists(\"ignoreDoctype\", options2);\n  helper.ensureFlagExists(\"compact\", options2);\n  helper.ensureFlagExists(\"indentText\", options2);\n  helper.ensureFlagExists(\"indentCdata\", options2);\n  helper.ensureFlagExists(\"indentAttributes\", options2);\n  helper.ensureFlagExists(\"indentInstruction\", options2);\n  helper.ensureFlagExists(\"fullTagEmptyElement\", options2);\n  helper.ensureFlagExists(\"noQuotesForNativeAttributes\", options2);\n  helper.ensureSpacesExists(options2);\n  if (typeof options2.spaces === \"number\") {\n    options2.spaces = Array(options2.spaces + 1).join(\" \");\n  }\n  helper.ensureKeyExists(\"declaration\", options2);\n  helper.ensureKeyExists(\"instruction\", options2);\n  helper.ensureKeyExists(\"attributes\", options2);\n  helper.ensureKeyExists(\"text\", options2);\n  helper.ensureKeyExists(\"comment\", options2);\n  helper.ensureKeyExists(\"cdata\", options2);\n  helper.ensureKeyExists(\"doctype\", options2);\n  helper.ensureKeyExists(\"type\", options2);\n  helper.ensureKeyExists(\"name\", options2);\n  helper.ensureKeyExists(\"elements\", options2);\n  helper.checkFnExists(\"doctype\", options2);\n  helper.checkFnExists(\"instruction\", options2);\n  helper.checkFnExists(\"cdata\", options2);\n  helper.checkFnExists(\"comment\", options2);\n  helper.checkFnExists(\"text\", options2);\n  helper.checkFnExists(\"instructionName\", options2);\n  helper.checkFnExists(\"elementName\", options2);\n  helper.checkFnExists(\"attributeName\", options2);\n  helper.checkFnExists(\"attributeValue\", options2);\n  helper.checkFnExists(\"attributes\", options2);\n  helper.checkFnExists(\"fullTagEmptyElement\", options2);\n  return options2;\n}\nfunction writeIndentation(options2, depth, firstLine) {\n  return (!firstLine && options2.spaces ? \"\\n\" : \"\") + Array(depth + 1).join(options2.spaces);\n}\nfunction writeAttributes(attributes, options2, depth) {\n  if (options2.ignoreAttributes) {\n    return \"\";\n  }\n  if (\"attributesFn\" in options2) {\n    attributes = options2.attributesFn(attributes, currentElementName, currentElement);\n  }\n  var key, attr, attrName, quote, result = [];\n  for (key in attributes) {\n    if (attributes.hasOwnProperty(key) && attributes[key] !== null && attributes[key] !== void 0) {\n      quote = options2.noQuotesForNativeAttributes && typeof attributes[key] !== \"string\" ? \"\" : '\"';\n      attr = \"\" + attributes[key];\n      attr = attr.replace(/\"/g, \"&quot;\");\n      attrName = \"attributeNameFn\" in options2 ? options2.attributeNameFn(key, attr, currentElementName, currentElement) : key;\n      result.push(options2.spaces && options2.indentAttributes ? writeIndentation(options2, depth + 1, false) : \" \");\n      result.push(attrName + \"=\" + quote + (\"attributeValueFn\" in options2 ? options2.attributeValueFn(attr, key, currentElementName, currentElement) : attr) + quote);\n    }\n  }\n  if (attributes && Object.keys(attributes).length && options2.spaces && options2.indentAttributes) {\n    result.push(writeIndentation(options2, depth, false));\n  }\n  return result.join(\"\");\n}\nfunction writeDeclaration(declaration, options2, depth) {\n  currentElement = declaration;\n  currentElementName = \"xml\";\n  return options2.ignoreDeclaration ? \"\" : \"<?xml\" + writeAttributes(declaration[options2.attributesKey], options2, depth) + \"?>\";\n}\nfunction writeInstruction(instruction, options2, depth) {\n  if (options2.ignoreInstruction) {\n    return \"\";\n  }\n  var key;\n  for (key in instruction) {\n    if (instruction.hasOwnProperty(key)) {\n      break;\n    }\n  }\n  var instructionName = \"instructionNameFn\" in options2 ? options2.instructionNameFn(key, instruction[key], currentElementName, currentElement) : key;\n  if (typeof instruction[key] === \"object\") {\n    currentElement = instruction;\n    currentElementName = instructionName;\n    return \"<?\" + instructionName + writeAttributes(instruction[key][options2.attributesKey], options2, depth) + \"?>\";\n  } else {\n    var instructionValue = instruction[key] ? instruction[key] : \"\";\n    if (\"instructionFn\" in options2) instructionValue = options2.instructionFn(instructionValue, key, currentElementName, currentElement);\n    return \"<?\" + instructionName + (instructionValue ? \" \" + instructionValue : \"\") + \"?>\";\n  }\n}\nfunction writeComment(comment, options2) {\n  return options2.ignoreComment ? \"\" : \"<!--\" + (\"commentFn\" in options2 ? options2.commentFn(comment, currentElementName, currentElement) : comment) + \"-->\";\n}\nfunction writeCdata(cdata, options2) {\n  return options2.ignoreCdata ? \"\" : \"<![CDATA[\" + (\"cdataFn\" in options2 ? options2.cdataFn(cdata, currentElementName, currentElement) : cdata.replace(\"]]>\", \"]]]]><![CDATA[>\")) + \"]]>\";\n}\nfunction writeDoctype(doctype, options2) {\n  return options2.ignoreDoctype ? \"\" : \"<!DOCTYPE \" + (\"doctypeFn\" in options2 ? options2.doctypeFn(doctype, currentElementName, currentElement) : doctype) + \">\";\n}\nfunction writeText(text, options2) {\n  if (options2.ignoreText) return \"\";\n  text = \"\" + text;\n  text = text.replace(/&amp;/g, \"&\");\n  text = text.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n  return \"textFn\" in options2 ? options2.textFn(text, currentElementName, currentElement) : text;\n}\nfunction hasContent(element2, options2) {\n  var i;\n  if (element2.elements && element2.elements.length) {\n    for (i = 0; i < element2.elements.length; ++i) {\n      switch (element2.elements[i][options2.typeKey]) {\n        case \"text\":\n          if (options2.indentText) {\n            return true;\n          }\n          break;\n        case \"cdata\":\n          if (options2.indentCdata) {\n            return true;\n          }\n          break;\n        case \"instruction\":\n          if (options2.indentInstruction) {\n            return true;\n          }\n          break;\n        case \"doctype\":\n        case \"comment\":\n        case \"element\":\n          return true;\n        default:\n          return true;\n      }\n    }\n  }\n  return false;\n}\nfunction writeElement(element2, options2, depth) {\n  currentElement = element2;\n  currentElementName = element2.name;\n  var xml2 = [], elementName = \"elementNameFn\" in options2 ? options2.elementNameFn(element2.name, element2) : element2.name;\n  xml2.push(\"<\" + elementName);\n  if (element2[options2.attributesKey]) {\n    xml2.push(writeAttributes(element2[options2.attributesKey], options2, depth));\n  }\n  var withClosingTag = element2[options2.elementsKey] && element2[options2.elementsKey].length || element2[options2.attributesKey] && element2[options2.attributesKey][\"xml:space\"] === \"preserve\";\n  if (!withClosingTag) {\n    if (\"fullTagEmptyElementFn\" in options2) {\n      withClosingTag = options2.fullTagEmptyElementFn(element2.name, element2);\n    } else {\n      withClosingTag = options2.fullTagEmptyElement;\n    }\n  }\n  if (withClosingTag) {\n    xml2.push(\">\");\n    if (element2[options2.elementsKey] && element2[options2.elementsKey].length) {\n      xml2.push(writeElements(element2[options2.elementsKey], options2, depth + 1));\n      currentElement = element2;\n      currentElementName = element2.name;\n    }\n    xml2.push(options2.spaces && hasContent(element2, options2) ? \"\\n\" + Array(depth + 1).join(options2.spaces) : \"\");\n    xml2.push(\"</\" + elementName + \">\");\n  } else {\n    xml2.push(\"/>\");\n  }\n  return xml2.join(\"\");\n}\nfunction writeElements(elements, options2, depth, firstLine) {\n  return elements.reduce(function(xml2, element2) {\n    var indent = writeIndentation(options2, depth, firstLine && !xml2);\n    switch (element2.type) {\n      case \"element\":\n        return xml2 + indent + writeElement(element2, options2, depth);\n      case \"comment\":\n        return xml2 + indent + writeComment(element2[options2.commentKey], options2);\n      case \"doctype\":\n        return xml2 + indent + writeDoctype(element2[options2.doctypeKey], options2);\n      case \"cdata\":\n        return xml2 + (options2.indentCdata ? indent : \"\") + writeCdata(element2[options2.cdataKey], options2);\n      case \"text\":\n        return xml2 + (options2.indentText ? indent : \"\") + writeText(element2[options2.textKey], options2);\n      case \"instruction\":\n        var instruction = {};\n        instruction[element2[options2.nameKey]] = element2[options2.attributesKey] ? element2 : element2[options2.instructionKey];\n        return xml2 + (options2.indentInstruction ? indent : \"\") + writeInstruction(instruction, options2, depth);\n    }\n  }, \"\");\n}\nfunction hasContentCompact(element2, options2, anyContent) {\n  var key;\n  for (key in element2) {\n    if (element2.hasOwnProperty(key)) {\n      switch (key) {\n        case options2.parentKey:\n        case options2.attributesKey:\n          break;\n        case options2.textKey:\n          if (options2.indentText || anyContent) {\n            return true;\n          }\n          break;\n        case options2.cdataKey:\n          if (options2.indentCdata || anyContent) {\n            return true;\n          }\n          break;\n        case options2.instructionKey:\n          if (options2.indentInstruction || anyContent) {\n            return true;\n          }\n          break;\n        case options2.doctypeKey:\n        case options2.commentKey:\n          return true;\n        default:\n          return true;\n      }\n    }\n  }\n  return false;\n}\nfunction writeElementCompact(element2, name, options2, depth, indent) {\n  currentElement = element2;\n  currentElementName = name;\n  var elementName = \"elementNameFn\" in options2 ? options2.elementNameFn(name, element2) : name;\n  if (typeof element2 === \"undefined\" || element2 === null || element2 === \"\") {\n    return \"fullTagEmptyElementFn\" in options2 && options2.fullTagEmptyElementFn(name, element2) || options2.fullTagEmptyElement ? \"<\" + elementName + \"></\" + elementName + \">\" : \"<\" + elementName + \"/>\";\n  }\n  var xml2 = [];\n  if (name) {\n    xml2.push(\"<\" + elementName);\n    if (typeof element2 !== \"object\") {\n      xml2.push(\">\" + writeText(element2, options2) + \"</\" + elementName + \">\");\n      return xml2.join(\"\");\n    }\n    if (element2[options2.attributesKey]) {\n      xml2.push(writeAttributes(element2[options2.attributesKey], options2, depth));\n    }\n    var withClosingTag = hasContentCompact(element2, options2, true) || element2[options2.attributesKey] && element2[options2.attributesKey][\"xml:space\"] === \"preserve\";\n    if (!withClosingTag) {\n      if (\"fullTagEmptyElementFn\" in options2) {\n        withClosingTag = options2.fullTagEmptyElementFn(name, element2);\n      } else {\n        withClosingTag = options2.fullTagEmptyElement;\n      }\n    }\n    if (withClosingTag) {\n      xml2.push(\">\");\n    } else {\n      xml2.push(\"/>\");\n      return xml2.join(\"\");\n    }\n  }\n  xml2.push(writeElementsCompact(element2, options2, depth + 1, false));\n  currentElement = element2;\n  currentElementName = name;\n  if (name) {\n    xml2.push((indent ? writeIndentation(options2, depth, false) : \"\") + \"</\" + elementName + \">\");\n  }\n  return xml2.join(\"\");\n}\nfunction writeElementsCompact(element2, options2, depth, firstLine) {\n  var i, key, nodes, xml2 = [];\n  for (key in element2) {\n    if (element2.hasOwnProperty(key)) {\n      nodes = isArray(element2[key]) ? element2[key] : [element2[key]];\n      for (i = 0; i < nodes.length; ++i) {\n        switch (key) {\n          case options2.declarationKey:\n            xml2.push(writeDeclaration(nodes[i], options2, depth));\n            break;\n          case options2.instructionKey:\n            xml2.push((options2.indentInstruction ? writeIndentation(options2, depth, firstLine) : \"\") + writeInstruction(nodes[i], options2, depth));\n            break;\n          case options2.attributesKey:\n          case options2.parentKey:\n            break;\n          case options2.textKey:\n            xml2.push((options2.indentText ? writeIndentation(options2, depth, firstLine) : \"\") + writeText(nodes[i], options2));\n            break;\n          case options2.cdataKey:\n            xml2.push((options2.indentCdata ? writeIndentation(options2, depth, firstLine) : \"\") + writeCdata(nodes[i], options2));\n            break;\n          case options2.doctypeKey:\n            xml2.push(writeIndentation(options2, depth, firstLine) + writeDoctype(nodes[i], options2));\n            break;\n          case options2.commentKey:\n            xml2.push(writeIndentation(options2, depth, firstLine) + writeComment(nodes[i], options2));\n            break;\n          default:\n            xml2.push(writeIndentation(options2, depth, firstLine) + writeElementCompact(nodes[i], key, options2, depth, hasContentCompact(nodes[i], options2)));\n        }\n        firstLine = firstLine && !xml2.length;\n      }\n    }\n  }\n  return xml2.join(\"\");\n}\nvar js2xml$2 = function(js, options2) {\n  options2 = validateOptions(options2);\n  var xml2 = [];\n  currentElement = js;\n  currentElementName = \"_root_\";\n  if (options2.compact) {\n    xml2.push(writeElementsCompact(js, options2, 0, true));\n  } else {\n    if (js[options2.declarationKey]) {\n      xml2.push(writeDeclaration(js[options2.declarationKey], options2, 0));\n    }\n    if (js[options2.elementsKey] && js[options2.elementsKey].length) {\n      xml2.push(writeElements(js[options2.elementsKey], options2, 0, !xml2.length));\n    }\n  }\n  return xml2.join(\"\");\n};\nvar js2xml$1 = js2xml$2;\nvar json2xml$1 = function(json, options2) {\n  if (json instanceof Buffer) {\n    json = json.toString();\n  }\n  var js = null;\n  if (typeof json === \"string\") {\n    try {\n      js = JSON.parse(json);\n    } catch (e) {\n      throw new Error(\"The JSON structure is invalid\");\n    }\n  } else {\n    js = json;\n  }\n  return js2xml$1(js, options2);\n};\nvar xml2js = xml2js$2;\nvar xml2json = xml2json$1;\nvar js2xml = js2xml$2;\nvar json2xml = json2xml$1;\nvar lib = {\n  xml2js,\n  xml2json,\n  js2xml,\n  json2xml\n};\nconst convertToXmlComponent = (element2) => {\n  switch (element2.type) {\n    case void 0:\n    case \"element\":\n      const xmlComponent = new ImportedXmlComponent(element2.name, element2.attributes);\n      const childElements = element2.elements || [];\n      for (const childElm of childElements) {\n        const child = convertToXmlComponent(childElm);\n        if (child !== void 0) {\n          xmlComponent.push(child);\n        }\n      }\n      return xmlComponent;\n    case \"text\":\n      return element2.text;\n    default:\n      return void 0;\n  }\n};\nclass ImportedXmlComponentAttributes extends XmlAttributeComponent {\n  // noop\n}\nclass ImportedXmlComponent extends XmlComponent {\n  /**\n   * Converts the xml string to a XmlComponent tree.\n   *\n   * @param importedContent xml content of the imported component\n   */\n  static fromXmlString(importedContent) {\n    const xmlObj = lib.xml2js(importedContent, { compact: false });\n    return convertToXmlComponent(xmlObj);\n  }\n  /**\n   * Converts the xml string to a XmlComponent tree.\n   *\n   * @param importedContent xml content of the imported component\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(rootKey, _attr) {\n    super(rootKey);\n    if (_attr) {\n      this.root.push(new ImportedXmlComponentAttributes(_attr));\n    }\n  }\n  push(xmlComponent) {\n    this.root.push(xmlComponent);\n  }\n}\nclass ImportedRootElementAttributes extends XmlComponent {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(_attr) {\n    super(\"\");\n    this._attr = _attr;\n  }\n  prepForXml(_) {\n    return {\n      _attr: this._attr\n    };\n  }\n}\nconst WORKAROUND3 = \"\";\nclass InitializableXmlComponent extends XmlComponent {\n  constructor(rootKey, initComponent) {\n    super(rootKey);\n    if (initComponent) {\n      this.root = initComponent.root;\n    }\n  }\n}\nconst decimalNumber = (val) => {\n  if (isNaN(val)) {\n    throw new Error(`Invalid value '${val}' specified. Must be an integer.`);\n  }\n  return Math.floor(val);\n};\nconst unsignedDecimalNumber = (val) => {\n  const value = decimalNumber(val);\n  if (value < 0) {\n    throw new Error(`Invalid value '${val}' specified. Must be a positive integer.`);\n  }\n  return value;\n};\nconst hexBinary = (val, length) => {\n  const expectedLength = length * 2;\n  if (val.length !== expectedLength || isNaN(Number(`0x${val}`))) {\n    throw new Error(`Invalid hex value '${val}'. Expected ${expectedLength} digit hex value`);\n  }\n  return val;\n};\nconst longHexNumber = (val) => hexBinary(val, 4);\nconst shortHexNumber = (val) => hexBinary(val, 2);\nconst uCharHexNumber = (val) => hexBinary(val, 1);\nconst universalMeasureValue = (val) => {\n  const unit = val.slice(-2);\n  const amount = val.substring(0, val.length - 2);\n  return `${Number(amount)}${unit}`;\n};\nconst positiveUniversalMeasureValue = (val) => {\n  const value = universalMeasureValue(val);\n  if (parseFloat(value) < 0) {\n    throw new Error(`Invalid value '${value}' specified. Expected a positive number.`);\n  }\n  return value;\n};\nconst hexColorValue = (val) => {\n  if (val === \"auto\") {\n    return val;\n  }\n  const color = val.charAt(0) === \"#\" ? val.substring(1) : val;\n  return hexBinary(color, 3);\n};\nconst signedTwipsMeasureValue = (val) => typeof val === \"string\" ? universalMeasureValue(val) : decimalNumber(val);\nconst hpsMeasureValue = (val) => typeof val === \"string\" ? positiveUniversalMeasureValue(val) : unsignedDecimalNumber(val);\nconst signedHpsMeasureValue = (val) => typeof val === \"string\" ? universalMeasureValue(val) : decimalNumber(val);\nconst twipsMeasureValue = (val) => typeof val === \"string\" ? positiveUniversalMeasureValue(val) : unsignedDecimalNumber(val);\nconst percentageValue = (val) => {\n  const percent = val.substring(0, val.length - 1);\n  return `${Number(percent)}%`;\n};\nconst measurementOrPercentValue = (val) => {\n  if (typeof val === \"number\") {\n    return decimalNumber(val);\n  }\n  if (val.slice(-1) === \"%\") {\n    return percentageValue(val);\n  }\n  return universalMeasureValue(val);\n};\nconst eighthPointMeasureValue = unsignedDecimalNumber;\nconst pointMeasureValue = unsignedDecimalNumber;\nconst dateTimeValue = (val) => val.toISOString();\nclass OnOffElement extends XmlComponent {\n  constructor(name, val = true) {\n    super(name);\n    if (val !== true) {\n      this.root.push(new Attributes({ val }));\n    }\n  }\n}\nclass HpsMeasureElement extends XmlComponent {\n  constructor(name, val) {\n    super(name);\n    this.root.push(new Attributes({ val: hpsMeasureValue(val) }));\n  }\n}\nclass EmptyElement extends XmlComponent {\n}\nclass StringValueElement extends XmlComponent {\n  constructor(name, val) {\n    super(name);\n    this.root.push(new Attributes({ val }));\n  }\n}\nconst createStringElement = (name, value) => new BuilderElement({\n  name,\n  attributes: {\n    value: { key: \"w:val\", value }\n  }\n});\nclass NumberValueElement extends XmlComponent {\n  constructor(name, val) {\n    super(name);\n    this.root.push(new Attributes({ val }));\n  }\n}\nclass StringEnumValueElement extends XmlComponent {\n  constructor(name, val) {\n    super(name);\n    this.root.push(new Attributes({ val }));\n  }\n}\nclass StringContainer extends XmlComponent {\n  constructor(name, val) {\n    super(name);\n    this.root.push(val);\n  }\n}\nclass BuilderElement extends XmlComponent {\n  constructor({\n    name,\n    attributes,\n    children\n  }) {\n    super(name);\n    if (attributes) {\n      this.root.push(new NextAttributeComponent(attributes));\n    }\n    if (children) {\n      this.root.push(...children);\n    }\n  }\n}\nconst AlignmentType = {\n  /** Align Start */\n  START: \"start\",\n  /** Align Center */\n  CENTER: \"center\",\n  /** End */\n  END: \"end\",\n  /** Justified */\n  BOTH: \"both\",\n  /** Medium Kashida Length */\n  MEDIUM_KASHIDA: \"mediumKashida\",\n  /** Distribute All Characters Equally */\n  DISTRIBUTE: \"distribute\",\n  /** Align to List Tab */\n  NUM_TAB: \"numTab\",\n  /** Widest Kashida Length */\n  HIGH_KASHIDA: \"highKashida\",\n  /** Low Kashida Length */\n  LOW_KASHIDA: \"lowKashida\",\n  /** Thai Language Justification */\n  THAI_DISTRIBUTE: \"thaiDistribute\",\n  /** Align Left */\n  LEFT: \"left\",\n  /** Align Right */\n  RIGHT: \"right\",\n  /** Justified */\n  JUSTIFIED: \"both\"\n};\nclass AlignmentAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { val: \"w:val\" });\n  }\n}\nclass Alignment extends XmlComponent {\n  constructor(type2) {\n    super(\"w:jc\");\n    this.root.push(new AlignmentAttributes({ val: type2 }));\n  }\n}\nclass BorderElement extends XmlComponent {\n  constructor(elementName, { color, size, space, style }) {\n    super(elementName);\n    this.root.push(\n      new BordersAttributes({\n        style,\n        color: color === void 0 ? void 0 : hexColorValue(color),\n        size: size === void 0 ? void 0 : eighthPointMeasureValue(size),\n        space: space === void 0 ? void 0 : pointMeasureValue(space)\n      })\n    );\n  }\n}\nclass BordersAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      style: \"w:val\",\n      color: \"w:color\",\n      size: \"w:sz\",\n      space: \"w:space\"\n    });\n  }\n}\nconst BorderStyle = {\n  SINGLE: \"single\",\n  DASH_DOT_STROKED: \"dashDotStroked\",\n  DASHED: \"dashed\",\n  DASH_SMALL_GAP: \"dashSmallGap\",\n  DOT_DASH: \"dotDash\",\n  DOT_DOT_DASH: \"dotDotDash\",\n  DOTTED: \"dotted\",\n  DOUBLE: \"double\",\n  DOUBLE_WAVE: \"doubleWave\",\n  INSET: \"inset\",\n  NIL: \"nil\",\n  NONE: \"none\",\n  OUTSET: \"outset\",\n  THICK: \"thick\",\n  THICK_THIN_LARGE_GAP: \"thickThinLargeGap\",\n  THICK_THIN_MEDIUM_GAP: \"thickThinMediumGap\",\n  THICK_THIN_SMALL_GAP: \"thickThinSmallGap\",\n  THIN_THICK_LARGE_GAP: \"thinThickLargeGap\",\n  THIN_THICK_MEDIUM_GAP: \"thinThickMediumGap\",\n  THIN_THICK_SMALL_GAP: \"thinThickSmallGap\",\n  THIN_THICK_THIN_LARGE_GAP: \"thinThickThinLargeGap\",\n  THIN_THICK_THIN_MEDIUM_GAP: \"thinThickThinMediumGap\",\n  THIN_THICK_THIN_SMALL_GAP: \"thinThickThinSmallGap\",\n  THREE_D_EMBOSS: \"threeDEmboss\",\n  THREE_D_ENGRAVE: \"threeDEngrave\",\n  TRIPLE: \"triple\",\n  WAVE: \"wave\"\n};\nclass Border extends IgnoreIfEmptyXmlComponent {\n  constructor(options2) {\n    super(\"w:pBdr\");\n    if (options2.top) {\n      this.root.push(new BorderElement(\"w:top\", options2.top));\n    }\n    if (options2.bottom) {\n      this.root.push(new BorderElement(\"w:bottom\", options2.bottom));\n    }\n    if (options2.left) {\n      this.root.push(new BorderElement(\"w:left\", options2.left));\n    }\n    if (options2.right) {\n      this.root.push(new BorderElement(\"w:right\", options2.right));\n    }\n  }\n}\nclass ThematicBreak extends XmlComponent {\n  constructor() {\n    super(\"w:pBdr\");\n    const bottom = new BorderElement(\"w:bottom\", {\n      color: \"auto\",\n      space: 1,\n      style: BorderStyle.SINGLE,\n      size: 6\n    });\n    this.root.push(bottom);\n  }\n}\nclass Indent extends XmlComponent {\n  constructor({ start, end, left, right, hanging, firstLine }) {\n    super(\"w:ind\");\n    this.root.push(\n      new NextAttributeComponent({\n        start: {\n          key: \"w:start\",\n          value: start === void 0 ? void 0 : signedTwipsMeasureValue(start)\n        },\n        end: {\n          key: \"w:end\",\n          value: end === void 0 ? void 0 : signedTwipsMeasureValue(end)\n        },\n        left: {\n          key: \"w:left\",\n          value: left === void 0 ? void 0 : signedTwipsMeasureValue(left)\n        },\n        right: {\n          key: \"w:right\",\n          value: right === void 0 ? void 0 : signedTwipsMeasureValue(right)\n        },\n        hanging: {\n          key: \"w:hanging\",\n          value: hanging === void 0 ? void 0 : twipsMeasureValue(hanging)\n        },\n        firstLine: {\n          key: \"w:firstLine\",\n          value: firstLine === void 0 ? void 0 : twipsMeasureValue(firstLine)\n        }\n      })\n    );\n  }\n}\nlet Break$1 = class Break extends XmlComponent {\n  constructor() {\n    super(\"w:br\");\n  }\n};\nconst FieldCharacterType = {\n  BEGIN: \"begin\",\n  END: \"end\",\n  SEPARATE: \"separate\"\n};\nclass FidCharAttrs extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { type: \"w:fldCharType\", dirty: \"w:dirty\" });\n  }\n}\nclass Begin extends XmlComponent {\n  constructor(dirty) {\n    super(\"w:fldChar\");\n    this.root.push(new FidCharAttrs({ type: FieldCharacterType.BEGIN, dirty }));\n  }\n}\nclass Separate extends XmlComponent {\n  constructor(dirty) {\n    super(\"w:fldChar\");\n    this.root.push(new FidCharAttrs({ type: FieldCharacterType.SEPARATE, dirty }));\n  }\n}\nclass End extends XmlComponent {\n  constructor(dirty) {\n    super(\"w:fldChar\");\n    this.root.push(new FidCharAttrs({ type: FieldCharacterType.END, dirty }));\n  }\n}\nconst HorizontalPositionAlign = {\n  CENTER: \"center\",\n  INSIDE: \"inside\",\n  LEFT: \"left\",\n  OUTSIDE: \"outside\",\n  RIGHT: \"right\"\n};\nconst VerticalPositionAlign = {\n  BOTTOM: \"bottom\",\n  CENTER: \"center\",\n  INSIDE: \"inside\",\n  OUTSIDE: \"outside\",\n  TOP: \"top\"\n};\nconst NumberFormat$1 = {\n  DECIMAL: \"decimal\",\n  UPPER_ROMAN: \"upperRoman\",\n  LOWER_ROMAN: \"lowerRoman\",\n  UPPER_LETTER: \"upperLetter\",\n  LOWER_LETTER: \"lowerLetter\",\n  ORDINAL: \"ordinal\",\n  CARDINAL_TEXT: \"cardinalText\",\n  ORDINAL_TEXT: \"ordinalText\",\n  HEX: \"hex\",\n  CHICAGO: \"chicago\",\n  IDEOGRAPH_DIGITAL: \"ideographDigital\",\n  JAPANESE_COUNTING: \"japaneseCounting\",\n  AIUEO: \"aiueo\",\n  IROHA: \"iroha\",\n  DECIMAL_FULL_WIDTH: \"decimalFullWidth\",\n  DECIMAL_HALF_WIDTH: \"decimalHalfWidth\",\n  JAPANESE_LEGAL: \"japaneseLegal\",\n  JAPANESE_DIGITAL_TEN_THOUSAND: \"japaneseDigitalTenThousand\",\n  DECIMAL_ENCLOSED_CIRCLE: \"decimalEnclosedCircle\",\n  DECIMAL_FULL_WIDTH_2: \"decimalFullWidth2\",\n  AIUEO_FULL_WIDTH: \"aiueoFullWidth\",\n  IROHA_FULL_WIDTH: \"irohaFullWidth\",\n  DECIMAL_ZERO: \"decimalZero\",\n  BULLET: \"bullet\",\n  GANADA: \"ganada\",\n  CHOSUNG: \"chosung\",\n  DECIMAL_ENCLOSED_FULL_STOP: \"decimalEnclosedFullstop\",\n  DECIMAL_ENCLOSED_PAREN: \"decimalEnclosedParen\",\n  DECIMAL_ENCLOSED_CIRCLE_CHINESE: \"decimalEnclosedCircleChinese\",\n  IDEOGRAPH_ENCLOSED_CIRCLE: \"ideographEnclosedCircle\",\n  IDEOGRAPH_TRADITIONAL: \"ideographTraditional\",\n  IDEOGRAPH_ZODIAC: \"ideographZodiac\",\n  IDEOGRAPH_ZODIAC_TRADITIONAL: \"ideographZodiacTraditional\",\n  TAIWANESE_COUNTING: \"taiwaneseCounting\",\n  IDEOGRAPH_LEGAL_TRADITIONAL: \"ideographLegalTraditional\",\n  TAIWANESE_COUNTING_THOUSAND: \"taiwaneseCountingThousand\",\n  TAIWANESE_DIGITAL: \"taiwaneseDigital\",\n  CHINESE_COUNTING: \"chineseCounting\",\n  CHINESE_LEGAL_SIMPLIFIED: \"chineseLegalSimplified\",\n  CHINESE_COUNTING_TEN_THOUSAND: \"chineseCountingThousand\",\n  KOREAN_DIGITAL: \"koreanDigital\",\n  KOREAN_COUNTING: \"koreanCounting\",\n  KOREAN_LEGAL: \"koreanLegal\",\n  KOREAN_DIGITAL_2: \"koreanDigital2\",\n  VIETNAMESE_COUNTING: \"vietnameseCounting\",\n  RUSSIAN_LOWER: \"russianLower\",\n  RUSSIAN_UPPER: \"russianUpper\",\n  NONE: \"none\",\n  NUMBER_IN_DASH: \"numberInDash\",\n  HEBREW_1: \"hebrew1\",\n  HEBREW_2: \"hebrew2\",\n  ARABIC_ALPHA: \"arabicAlpha\",\n  ARABIC_ABJAD: \"arabicAbjad\",\n  HINDI_VOWELS: \"hindiVowels\",\n  HINDI_CONSONANTS: \"hindiConsonants\",\n  HINDI_NUMBERS: \"hindiNumbers\",\n  HINDI_COUNTING: \"hindiCounting\",\n  THAI_LETTERS: \"thaiLetters\",\n  THAI_NUMBERS: \"thaiNumbers\",\n  THAI_COUNTING: \"thaiCounting\",\n  BAHT_TEXT: \"bahtText\",\n  DOLLAR_TEXT: \"dollarText\"\n  //   <xsd:enumeration value=\"custom\"/>\n};\nconst SpaceType = {\n  DEFAULT: \"default\",\n  PRESERVE: \"preserve\"\n};\nclass TextAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { space: \"xml:space\" });\n  }\n}\nclass Page extends XmlComponent {\n  constructor() {\n    super(\"w:instrText\");\n    this.root.push(new TextAttributes({ space: SpaceType.PRESERVE }));\n    this.root.push(\"PAGE\");\n  }\n}\nclass NumberOfPages extends XmlComponent {\n  constructor() {\n    super(\"w:instrText\");\n    this.root.push(new TextAttributes({ space: SpaceType.PRESERVE }));\n    this.root.push(\"NUMPAGES\");\n  }\n}\nclass NumberOfPagesSection extends XmlComponent {\n  constructor() {\n    super(\"w:instrText\");\n    this.root.push(new TextAttributes({ space: SpaceType.PRESERVE }));\n    this.root.push(\"SECTIONPAGES\");\n  }\n}\nclass CurrentSection extends XmlComponent {\n  constructor() {\n    super(\"w:instrText\");\n    this.root.push(new TextAttributes({ space: SpaceType.PRESERVE }));\n    this.root.push(\"SECTION\");\n  }\n}\nclass ShadingAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      fill: \"w:fill\",\n      color: \"w:color\",\n      type: \"w:val\"\n    });\n  }\n}\nclass Shading extends XmlComponent {\n  constructor({ fill, color, type: type2 }) {\n    super(\"w:shd\");\n    this.root.push(\n      new ShadingAttributes({\n        fill: fill === void 0 ? void 0 : hexColorValue(fill),\n        color: color === void 0 ? void 0 : hexColorValue(color),\n        type: type2\n      })\n    );\n  }\n}\nconst ShadingType = {\n  CLEAR: \"clear\",\n  DIAGONAL_CROSS: \"diagCross\",\n  DIAGONAL_STRIPE: \"diagStripe\",\n  HORIZONTAL_CROSS: \"horzCross\",\n  HORIZONTAL_STRIPE: \"horzStripe\",\n  NIL: \"nil\",\n  PERCENT_5: \"pct5\",\n  PERCENT_10: \"pct10\",\n  PERCENT_12: \"pct12\",\n  PERCENT_15: \"pct15\",\n  PERCENT_20: \"pct20\",\n  PERCENT_25: \"pct25\",\n  PERCENT_30: \"pct30\",\n  PERCENT_35: \"pct35\",\n  PERCENT_37: \"pct37\",\n  PERCENT_40: \"pct40\",\n  PERCENT_45: \"pct45\",\n  PERCENT_50: \"pct50\",\n  PERCENT_55: \"pct55\",\n  PERCENT_60: \"pct60\",\n  PERCENT_62: \"pct62\",\n  PERCENT_65: \"pct65\",\n  PERCENT_70: \"pct70\",\n  PERCENT_75: \"pct75\",\n  PERCENT_80: \"pct80\",\n  PERCENT_85: \"pct85\",\n  PERCENT_87: \"pct87\",\n  PERCENT_90: \"pct90\",\n  PERCENT_95: \"pct95\",\n  REVERSE_DIAGONAL_STRIPE: \"reverseDiagStripe\",\n  SOLID: \"solid\",\n  THIN_DIAGONAL_CROSS: \"thinDiagCross\",\n  THIN_DIAGONAL_STRIPE: \"thinDiagStripe\",\n  THIN_HORIZONTAL_CROSS: \"thinHorzCross\",\n  THIN_REVERSE_DIAGONAL_STRIPE: \"thinReverseDiagStripe\",\n  THIN_VERTICAL_STRIPE: \"thinVertStripe\",\n  VERTICAL_STRIPE: \"vertStripe\"\n};\nclass ChangeAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      id: \"w:id\",\n      author: \"w:author\",\n      date: \"w:date\"\n    });\n  }\n}\nconst EmphasisMarkType = {\n  DOT: \"dot\"\n};\nclass BaseEmphasisMark extends XmlComponent {\n  constructor(emphasisMarkType) {\n    super(\"w:em\");\n    this.root.push(\n      new Attributes({\n        val: emphasisMarkType\n      })\n    );\n  }\n}\nclass EmphasisMark extends BaseEmphasisMark {\n  constructor(emphasisMarkType = EmphasisMarkType.DOT) {\n    super(emphasisMarkType);\n  }\n}\nclass DotEmphasisMark extends BaseEmphasisMark {\n  constructor() {\n    super(EmphasisMarkType.DOT);\n  }\n}\nclass CharacterSpacing extends XmlComponent {\n  constructor(value) {\n    super(\"w:spacing\");\n    this.root.push(\n      new Attributes({\n        val: signedTwipsMeasureValue(value)\n      })\n    );\n  }\n}\nclass Color extends XmlComponent {\n  constructor(color) {\n    super(\"w:color\");\n    this.root.push(\n      new Attributes({\n        val: hexColorValue(color)\n      })\n    );\n  }\n}\nclass Highlight extends XmlComponent {\n  constructor(color) {\n    super(\"w:highlight\");\n    this.root.push(\n      new Attributes({\n        val: color\n      })\n    );\n  }\n}\nclass HighlightComplexScript extends XmlComponent {\n  constructor(color) {\n    super(\"w:highlightCs\");\n    this.root.push(\n      new Attributes({\n        val: color\n      })\n    );\n  }\n}\nconst createLanguageComponent = (options2) => new BuilderElement({\n  name: \"w:lang\",\n  attributes: {\n    value: {\n      key: \"w:val\",\n      value: options2.value\n    },\n    eastAsia: {\n      key: \"w:eastAsia\",\n      value: options2.eastAsia\n    },\n    bidirectional: {\n      key: \"w:bidi\",\n      value: options2.bidirectional\n    }\n  }\n});\nclass RunFontAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      ascii: \"w:ascii\",\n      cs: \"w:cs\",\n      eastAsia: \"w:eastAsia\",\n      hAnsi: \"w:hAnsi\",\n      hint: \"w:hint\"\n    });\n  }\n}\nclass RunFonts extends XmlComponent {\n  constructor(nameOrAttrs, hint) {\n    super(\"w:rFonts\");\n    if (typeof nameOrAttrs === \"string\") {\n      const name = nameOrAttrs;\n      this.root.push(\n        new RunFontAttributes({\n          ascii: name,\n          cs: name,\n          eastAsia: name,\n          hAnsi: name,\n          hint\n        })\n      );\n    } else {\n      const attrs = nameOrAttrs;\n      this.root.push(new RunFontAttributes(attrs));\n    }\n  }\n}\nlet VerticalAlign$1 = class VerticalAlign extends XmlComponent {\n  constructor(type2) {\n    super(\"w:vertAlign\");\n    this.root.push(\n      new Attributes({\n        val: type2\n      })\n    );\n  }\n};\nclass SuperScript extends VerticalAlign$1 {\n  constructor() {\n    super(\"superscript\");\n  }\n}\nclass SubScript extends VerticalAlign$1 {\n  constructor() {\n    super(\"subscript\");\n  }\n}\nconst UnderlineType = {\n  SINGLE: \"single\",\n  WORDS: \"words\",\n  DOUBLE: \"double\",\n  THICK: \"thick\",\n  DOTTED: \"dotted\",\n  DOTTEDHEAVY: \"dottedHeavy\",\n  DASH: \"dash\",\n  DASHEDHEAVY: \"dashedHeavy\",\n  DASHLONG: \"dashLong\",\n  DASHLONGHEAVY: \"dashLongHeavy\",\n  DOTDASH: \"dotDash\",\n  DASHDOTHEAVY: \"dashDotHeavy\",\n  DOTDOTDASH: \"dotDotDash\",\n  DASHDOTDOTHEAVY: \"dashDotDotHeavy\",\n  WAVE: \"wave\",\n  WAVYHEAVY: \"wavyHeavy\",\n  WAVYDOUBLE: \"wavyDouble\",\n  NONE: \"none\"\n};\nclass Underline extends XmlComponent {\n  constructor(underlineType = UnderlineType.SINGLE, color) {\n    super(\"w:u\");\n    this.root.push(\n      new Attributes({\n        val: underlineType,\n        color: color === void 0 ? void 0 : hexColorValue(color)\n      })\n    );\n  }\n}\nconst TextEffect = {\n  BLINK_BACKGROUND: \"blinkBackground\",\n  LIGHTS: \"lights\",\n  ANTS_BLACK: \"antsBlack\",\n  ANTS_RED: \"antsRed\",\n  SHIMMER: \"shimmer\",\n  SPARKLE: \"sparkle\",\n  NONE: \"none\"\n};\nconst HighlightColor = {\n  BLACK: \"black\",\n  BLUE: \"blue\",\n  CYAN: \"cyan\",\n  DARK_BLUE: \"darkBlue\",\n  DARK_CYAN: \"darkCyan\",\n  DARK_GRAY: \"darkGray\",\n  DARK_GREEN: \"darkGreen\",\n  DARK_MAGENTA: \"darkMagenta\",\n  DARK_RED: \"darkRed\",\n  DARK_YELLOW: \"darkYellow\",\n  GREEN: \"green\",\n  LIGHT_GRAY: \"lightGray\",\n  MAGENTA: \"magenta\",\n  NONE: \"none\",\n  RED: \"red\",\n  WHITE: \"white\",\n  YELLOW: \"yellow\"\n};\nclass RunProperties extends IgnoreIfEmptyXmlComponent {\n  constructor(options2) {\n    var _a, _b;\n    super(\"w:rPr\");\n    if (!options2) {\n      return;\n    }\n    if (options2.noProof !== void 0) {\n      this.push(new OnOffElement(\"w:noProof\", options2.noProof));\n    }\n    if (options2.bold !== void 0) {\n      this.push(new OnOffElement(\"w:b\", options2.bold));\n    }\n    if (options2.boldComplexScript === void 0 && options2.bold !== void 0 || options2.boldComplexScript) {\n      this.push(new OnOffElement(\"w:bCs\", (_a = options2.boldComplexScript) != null ? _a : options2.bold));\n    }\n    if (options2.italics !== void 0) {\n      this.push(new OnOffElement(\"w:i\", options2.italics));\n    }\n    if (options2.italicsComplexScript === void 0 && options2.italics !== void 0 || options2.italicsComplexScript) {\n      this.push(new OnOffElement(\"w:iCs\", (_b = options2.italicsComplexScript) != null ? _b : options2.italics));\n    }\n    if (options2.underline) {\n      this.push(new Underline(options2.underline.type, options2.underline.color));\n    }\n    if (options2.effect) {\n      this.push(new StringValueElement(\"w:effect\", options2.effect));\n    }\n    if (options2.emphasisMark) {\n      this.push(new EmphasisMark(options2.emphasisMark.type));\n    }\n    if (options2.color) {\n      this.push(new Color(options2.color));\n    }\n    if (options2.kern) {\n      this.push(new HpsMeasureElement(\"w:kern\", options2.kern));\n    }\n    if (options2.position) {\n      this.push(new StringValueElement(\"w:position\", options2.position));\n    }\n    if (options2.size !== void 0) {\n      this.push(new HpsMeasureElement(\"w:sz\", options2.size));\n    }\n    const szCs = options2.sizeComplexScript === void 0 || options2.sizeComplexScript === true ? options2.size : options2.sizeComplexScript;\n    if (szCs) {\n      this.push(new HpsMeasureElement(\"w:szCs\", szCs));\n    }\n    if (options2.rightToLeft !== void 0) {\n      this.push(new OnOffElement(\"w:rtl\", options2.rightToLeft));\n    }\n    if (options2.smallCaps !== void 0) {\n      this.push(new OnOffElement(\"w:smallCaps\", options2.smallCaps));\n    } else if (options2.allCaps !== void 0) {\n      this.push(new OnOffElement(\"w:caps\", options2.allCaps));\n    }\n    if (options2.strike !== void 0) {\n      this.push(new OnOffElement(\"w:strike\", options2.strike));\n    }\n    if (options2.doubleStrike !== void 0) {\n      this.push(new OnOffElement(\"w:dstrike\", options2.doubleStrike));\n    }\n    if (options2.subScript) {\n      this.push(new SubScript());\n    }\n    if (options2.superScript) {\n      this.push(new SuperScript());\n    }\n    if (options2.style) {\n      this.push(new StringValueElement(\"w:rStyle\", options2.style));\n    }\n    if (options2.font) {\n      if (typeof options2.font === \"string\") {\n        this.push(new RunFonts(options2.font));\n      } else if (\"name\" in options2.font) {\n        this.push(new RunFonts(options2.font.name, options2.font.hint));\n      } else {\n        this.push(new RunFonts(options2.font));\n      }\n    }\n    if (options2.highlight) {\n      this.push(new Highlight(options2.highlight));\n    }\n    const highlightCs = options2.highlightComplexScript === void 0 || options2.highlightComplexScript === true ? options2.highlight : options2.highlightComplexScript;\n    if (highlightCs) {\n      this.push(new HighlightComplexScript(highlightCs));\n    }\n    if (options2.characterSpacing) {\n      this.push(new CharacterSpacing(options2.characterSpacing));\n    }\n    if (options2.emboss !== void 0) {\n      this.push(new OnOffElement(\"w:emboss\", options2.emboss));\n    }\n    if (options2.imprint !== void 0) {\n      this.push(new OnOffElement(\"w:imprint\", options2.imprint));\n    }\n    if (options2.shading) {\n      this.push(new Shading(options2.shading));\n    }\n    if (options2.revision) {\n      this.push(new RunPropertiesChange(options2.revision));\n    }\n    if (options2.border) {\n      this.push(new BorderElement(\"w:bdr\", options2.border));\n    }\n    if (options2.snapToGrid !== void 0) {\n      this.push(new OnOffElement(\"w:snapToGrid\", options2.snapToGrid));\n    }\n    if (options2.vanish) {\n      this.push(new OnOffElement(\"w:vanish\", options2.vanish));\n    }\n    if (options2.specVanish) {\n      this.push(new OnOffElement(\"w:specVanish\", options2.vanish));\n    }\n    if (options2.scale !== void 0) {\n      this.push(new NumberValueElement(\"w:w\", options2.scale));\n    }\n    if (options2.language) {\n      this.push(createLanguageComponent(options2.language));\n    }\n    if (options2.math) {\n      this.push(new OnOffElement(\"w:oMath\", options2.math));\n    }\n  }\n  push(item) {\n    this.root.push(item);\n  }\n}\nclass RunPropertiesChange extends XmlComponent {\n  constructor(options2) {\n    super(\"w:rPrChange\");\n    this.root.push(\n      new ChangeAttributes({\n        id: options2.id,\n        author: options2.author,\n        date: options2.date\n      })\n    );\n    this.addChildElement(new RunProperties(options2));\n  }\n}\nclass Text extends XmlComponent {\n  constructor(options2) {\n    var _a;\n    super(\"w:t\");\n    if (typeof options2 === \"string\") {\n      this.root.push(new TextAttributes({ space: SpaceType.PRESERVE }));\n      this.root.push(options2);\n    } else {\n      this.root.push(new TextAttributes({ space: (_a = options2.space) != null ? _a : SpaceType.DEFAULT }));\n      this.root.push(options2.text);\n    }\n  }\n}\nconst PageNumber = {\n  CURRENT: \"CURRENT\",\n  TOTAL_PAGES: \"TOTAL_PAGES\",\n  TOTAL_PAGES_IN_SECTION: \"TOTAL_PAGES_IN_SECTION\",\n  CURRENT_SECTION: \"SECTION\"\n};\nclass Run extends XmlComponent {\n  constructor(options2) {\n    super(\"w:r\");\n    __publicField(this, \"properties\");\n    this.properties = new RunProperties(options2);\n    this.root.push(this.properties);\n    if (options2.break) {\n      for (let i = 0; i < options2.break; i++) {\n        this.root.push(new Break$1());\n      }\n    }\n    if (options2.children) {\n      for (const child of options2.children) {\n        if (typeof child === \"string\") {\n          switch (child) {\n            case PageNumber.CURRENT:\n              this.root.push(new Begin());\n              this.root.push(new Page());\n              this.root.push(new Separate());\n              this.root.push(new End());\n              break;\n            case PageNumber.TOTAL_PAGES:\n              this.root.push(new Begin());\n              this.root.push(new NumberOfPages());\n              this.root.push(new Separate());\n              this.root.push(new End());\n              break;\n            case PageNumber.TOTAL_PAGES_IN_SECTION:\n              this.root.push(new Begin());\n              this.root.push(new NumberOfPagesSection());\n              this.root.push(new Separate());\n              this.root.push(new End());\n              break;\n            case PageNumber.CURRENT_SECTION:\n              this.root.push(new Begin());\n              this.root.push(new CurrentSection());\n              this.root.push(new Separate());\n              this.root.push(new End());\n              break;\n            default:\n              this.root.push(new Text(child));\n              break;\n          }\n          continue;\n        }\n        this.root.push(child);\n      }\n    } else if (options2.text) {\n      this.root.push(new Text(options2.text));\n    }\n  }\n}\nclass TextRun extends Run {\n  constructor(options2) {\n    if (typeof options2 === \"string\") {\n      super({});\n      this.root.push(new Text(options2));\n      return this;\n    }\n    super(options2);\n  }\n}\nclass SymbolAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      char: \"w:char\",\n      symbolfont: \"w:font\"\n    });\n  }\n}\nlet Symbol$1 = class Symbol2 extends XmlComponent {\n  constructor(char = \"\", symbolfont = \"Wingdings\") {\n    super(\"w:sym\");\n    this.root.push(new SymbolAttributes({ char, symbolfont }));\n  }\n};\nclass SymbolRun extends Run {\n  constructor(options2) {\n    if (typeof options2 === \"string\") {\n      super({});\n      this.root.push(new Symbol$1(options2));\n      return this;\n    }\n    super(options2);\n    this.root.push(new Symbol$1(options2.char, options2.symbolfont));\n  }\n}\nvar hash$1 = {};\nvar utils$9 = {};\nvar minimalisticAssert = assert$5;\nfunction assert$5(val, msg) {\n  if (!val)\n    throw new Error(msg || \"Assertion failed\");\n}\nassert$5.equal = function assertEqual(l, r2, msg) {\n  if (l != r2)\n    throw new Error(msg || \"Assertion failed: \" + l + \" != \" + r2);\n};\nvar assert$4 = minimalisticAssert;\nvar inherits = inherits_browserExports;\nutils$9.inherits = inherits;\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 64512) !== 55296) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 64512) === 56320;\n}\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === \"string\") {\n    if (!enc) {\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = c >> 6 | 192;\n          res[p++] = c & 63 | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i) & 1023);\n          res[p++] = c >> 18 | 240;\n          res[p++] = c >> 12 & 63 | 128;\n          res[p++] = c >> 6 & 63 | 128;\n          res[p++] = c & 63 | 128;\n        } else {\n          res[p++] = c >> 12 | 224;\n          res[p++] = c >> 6 & 63 | 128;\n          res[p++] = c & 63 | 128;\n        }\n      }\n    } else if (enc === \"hex\") {\n      msg = msg.replace(/[^a-z0-9]+/ig, \"\");\n      if (msg.length % 2 !== 0)\n        msg = \"0\" + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nutils$9.toArray = toArray;\nfunction toHex(msg) {\n  var res = \"\";\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nutils$9.toHex = toHex;\nfunction htonl(w) {\n  var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;\n  return res >>> 0;\n}\nutils$9.htonl = htonl;\nfunction toHex32(msg, endian) {\n  var res = \"\";\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === \"little\")\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nutils$9.toHex32 = toHex32;\nfunction zero2(word) {\n  if (word.length === 1)\n    return \"0\" + word;\n  else\n    return word;\n}\nutils$9.zero2 = zero2;\nfunction zero8(word) {\n  if (word.length === 7)\n    return \"0\" + word;\n  else if (word.length === 6)\n    return \"00\" + word;\n  else if (word.length === 5)\n    return \"000\" + word;\n  else if (word.length === 4)\n    return \"0000\" + word;\n  else if (word.length === 3)\n    return \"00000\" + word;\n  else if (word.length === 2)\n    return \"000000\" + word;\n  else if (word.length === 1)\n    return \"0000000\" + word;\n  else\n    return word;\n}\nutils$9.zero8 = zero8;\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert$4(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === \"big\")\n      w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];\n    else\n      w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nutils$9.join32 = join32;\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === \"big\") {\n      res[k] = m >>> 24;\n      res[k + 1] = m >>> 16 & 255;\n      res[k + 2] = m >>> 8 & 255;\n      res[k + 3] = m & 255;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = m >>> 16 & 255;\n      res[k + 1] = m >>> 8 & 255;\n      res[k] = m & 255;\n    }\n  }\n  return res;\n}\nutils$9.split32 = split32;\nfunction rotr32$1(w, b) {\n  return w >>> b | w << 32 - b;\n}\nutils$9.rotr32 = rotr32$1;\nfunction rotl32$2(w, b) {\n  return w << b | w >>> 32 - b;\n}\nutils$9.rotl32 = rotl32$2;\nfunction sum32$3(a, b) {\n  return a + b >>> 0;\n}\nutils$9.sum32 = sum32$3;\nfunction sum32_3$1(a, b, c) {\n  return a + b + c >>> 0;\n}\nutils$9.sum32_3 = sum32_3$1;\nfunction sum32_4$2(a, b, c, d) {\n  return a + b + c + d >>> 0;\n}\nutils$9.sum32_4 = sum32_4$2;\nfunction sum32_5$2(a, b, c, d, e) {\n  return a + b + c + d + e >>> 0;\n}\nutils$9.sum32_5 = sum32_5$2;\nfunction sum64$1(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nutils$9.sum64 = sum64$1;\nfunction sum64_hi$1(ah, al, bh, bl) {\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nutils$9.sum64_hi = sum64_hi$1;\nfunction sum64_lo$1(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nutils$9.sum64_lo = sum64_lo$1;\nfunction sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nutils$9.sum64_4_hi = sum64_4_hi$1;\nfunction sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nutils$9.sum64_4_lo = sum64_4_lo$1;\nfunction sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = lo + el >>> 0;\n  carry += lo < el ? 1 : 0;\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nutils$9.sum64_5_hi = sum64_5_hi$1;\nfunction sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n  return lo >>> 0;\n}\nutils$9.sum64_5_lo = sum64_5_lo$1;\nfunction rotr64_hi$1(ah, al, num) {\n  var r2 = al << 32 - num | ah >>> num;\n  return r2 >>> 0;\n}\nutils$9.rotr64_hi = rotr64_hi$1;\nfunction rotr64_lo$1(ah, al, num) {\n  var r2 = ah << 32 - num | al >>> num;\n  return r2 >>> 0;\n}\nutils$9.rotr64_lo = rotr64_lo$1;\nfunction shr64_hi$1(ah, al, num) {\n  return ah >>> num;\n}\nutils$9.shr64_hi = shr64_hi$1;\nfunction shr64_lo$1(ah, al, num) {\n  var r2 = ah << 32 - num | al >>> num;\n  return r2 >>> 0;\n}\nutils$9.shr64_lo = shr64_lo$1;\nvar common$5 = {};\nvar utils$8 = utils$9;\nvar assert$3 = minimalisticAssert;\nfunction BlockHash$4() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = \"big\";\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\ncommon$5.BlockHash = BlockHash$4;\nBlockHash$4.prototype.update = function update(msg, enc) {\n  msg = utils$8.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n    var r2 = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r2, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n    msg = utils$8.join32(msg, 0, msg.length - r2, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n  return this;\n};\nBlockHash$4.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert$3(this.pending === null);\n  return this._digest(enc);\n};\nBlockHash$4.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - (len + this.padLength) % bytes;\n  var res = new Array(k + this.padLength);\n  res[0] = 128;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n  len <<= 3;\n  if (this.endian === \"big\") {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = len >>> 24 & 255;\n    res[i++] = len >>> 16 & 255;\n    res[i++] = len >>> 8 & 255;\n    res[i++] = len & 255;\n  } else {\n    res[i++] = len & 255;\n    res[i++] = len >>> 8 & 255;\n    res[i++] = len >>> 16 & 255;\n    res[i++] = len >>> 24 & 255;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n  return res;\n};\nvar sha = {};\nvar common$4 = {};\nvar utils$7 = utils$9;\nvar rotr32 = utils$7.rotr32;\nfunction ft_1$1(s2, x, y, z) {\n  if (s2 === 0)\n    return ch32$1(x, y, z);\n  if (s2 === 1 || s2 === 3)\n    return p32(x, y, z);\n  if (s2 === 2)\n    return maj32$1(x, y, z);\n}\ncommon$4.ft_1 = ft_1$1;\nfunction ch32$1(x, y, z) {\n  return x & y ^ ~x & z;\n}\ncommon$4.ch32 = ch32$1;\nfunction maj32$1(x, y, z) {\n  return x & y ^ x & z ^ y & z;\n}\ncommon$4.maj32 = maj32$1;\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\ncommon$4.p32 = p32;\nfunction s0_256$1(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\ncommon$4.s0_256 = s0_256$1;\nfunction s1_256$1(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\ncommon$4.s1_256 = s1_256$1;\nfunction g0_256$1(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;\n}\ncommon$4.g0_256 = g0_256$1;\nfunction g1_256$1(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;\n}\ncommon$4.g1_256 = g1_256$1;\nvar utils$6 = utils$9;\nvar common$3 = common$5;\nvar shaCommon$1 = common$4;\nvar rotl32$1 = utils$6.rotl32;\nvar sum32$2 = utils$6.sum32;\nvar sum32_5$1 = utils$6.sum32_5;\nvar ft_1 = shaCommon$1.ft_1;\nvar BlockHash$3 = common$3.BlockHash;\nvar sha1_K = [\n  1518500249,\n  1859775393,\n  2400959708,\n  3395469782\n];\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n  BlockHash$3.call(this);\n  this.h = [\n    1732584193,\n    4023233417,\n    2562383102,\n    271733878,\n    3285377520\n  ];\n  this.W = new Array(80);\n}\nutils$6.inherits(SHA1, BlockHash$3);\nvar _1 = SHA1;\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  for (i = 0; i < W.length; i++) {\n    var s2 = ~~(i / 20);\n    var t = sum32_5$1(rotl32$1(a, 5), ft_1(s2, b, c, d), e, W[i], sha1_K[s2]);\n    e = d;\n    d = c;\n    c = rotl32$1(b, 30);\n    b = a;\n    a = t;\n  }\n  this.h[0] = sum32$2(this.h[0], a);\n  this.h[1] = sum32$2(this.h[1], b);\n  this.h[2] = sum32$2(this.h[2], c);\n  this.h[3] = sum32$2(this.h[3], d);\n  this.h[4] = sum32$2(this.h[4], e);\n};\nSHA1.prototype._digest = function digest2(enc) {\n  if (enc === \"hex\")\n    return utils$6.toHex32(this.h, \"big\");\n  else\n    return utils$6.split32(this.h, \"big\");\n};\nvar utils$5 = utils$9;\nvar common$2 = common$5;\nvar shaCommon = common$4;\nvar assert$2 = minimalisticAssert;\nvar sum32$1 = utils$5.sum32;\nvar sum32_4$1 = utils$5.sum32_4;\nvar sum32_5 = utils$5.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\nvar BlockHash$2 = common$2.BlockHash;\nvar sha256_K = [\n  1116352408,\n  1899447441,\n  3049323471,\n  3921009573,\n  961987163,\n  1508970993,\n  2453635748,\n  2870763221,\n  3624381080,\n  310598401,\n  607225278,\n  1426881987,\n  1925078388,\n  2162078206,\n  2614888103,\n  3248222580,\n  3835390401,\n  4022224774,\n  264347078,\n  604807628,\n  770255983,\n  1249150122,\n  1555081692,\n  1996064986,\n  2554220882,\n  2821834349,\n  2952996808,\n  3210313671,\n  3336571891,\n  3584528711,\n  113926993,\n  338241895,\n  666307205,\n  773529912,\n  1294757372,\n  1396182291,\n  1695183700,\n  1986661051,\n  2177026350,\n  2456956037,\n  2730485921,\n  2820302411,\n  3259730800,\n  3345764771,\n  3516065817,\n  3600352804,\n  4094571909,\n  275423344,\n  430227734,\n  506948616,\n  659060556,\n  883997877,\n  958139571,\n  1322822218,\n  1537002063,\n  1747873779,\n  1955562222,\n  2024104815,\n  2227730452,\n  2361852424,\n  2428436474,\n  2756734187,\n  3204031479,\n  3329325298\n];\nfunction SHA256$1() {\n  if (!(this instanceof SHA256$1))\n    return new SHA256$1();\n  BlockHash$2.call(this);\n  this.h = [\n    1779033703,\n    3144134277,\n    1013904242,\n    2773480762,\n    1359893119,\n    2600822924,\n    528734635,\n    1541459225\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils$5.inherits(SHA256$1, BlockHash$2);\nvar _256 = SHA256$1;\nSHA256$1.blockSize = 512;\nSHA256$1.outSize = 256;\nSHA256$1.hmacStrength = 192;\nSHA256$1.padLength = 64;\nSHA256$1.prototype._update = function _update2(msg, start) {\n  var W = this.W;\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f2 = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n  assert$2(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f2, g), this.k[i], W[i]);\n    var T2 = sum32$1(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f2;\n    f2 = e;\n    e = sum32$1(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32$1(T1, T2);\n  }\n  this.h[0] = sum32$1(this.h[0], a);\n  this.h[1] = sum32$1(this.h[1], b);\n  this.h[2] = sum32$1(this.h[2], c);\n  this.h[3] = sum32$1(this.h[3], d);\n  this.h[4] = sum32$1(this.h[4], e);\n  this.h[5] = sum32$1(this.h[5], f2);\n  this.h[6] = sum32$1(this.h[6], g);\n  this.h[7] = sum32$1(this.h[7], h);\n};\nSHA256$1.prototype._digest = function digest3(enc) {\n  if (enc === \"hex\")\n    return utils$5.toHex32(this.h, \"big\");\n  else\n    return utils$5.split32(this.h, \"big\");\n};\nvar utils$4 = utils$9;\nvar SHA256 = _256;\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n  SHA256.call(this);\n  this.h = [\n    3238371032,\n    914150663,\n    812702999,\n    4144912697,\n    4290775857,\n    1750603025,\n    1694076839,\n    3204075428\n  ];\n}\nutils$4.inherits(SHA224, SHA256);\nvar _224 = SHA224;\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\nSHA224.prototype._digest = function digest4(enc) {\n  if (enc === \"hex\")\n    return utils$4.toHex32(this.h.slice(0, 7), \"big\");\n  else\n    return utils$4.split32(this.h.slice(0, 7), \"big\");\n};\nvar utils$3 = utils$9;\nvar common$1 = common$5;\nvar assert$1 = minimalisticAssert;\nvar rotr64_hi = utils$3.rotr64_hi;\nvar rotr64_lo = utils$3.rotr64_lo;\nvar shr64_hi = utils$3.shr64_hi;\nvar shr64_lo = utils$3.shr64_lo;\nvar sum64 = utils$3.sum64;\nvar sum64_hi = utils$3.sum64_hi;\nvar sum64_lo = utils$3.sum64_lo;\nvar sum64_4_hi = utils$3.sum64_4_hi;\nvar sum64_4_lo = utils$3.sum64_4_lo;\nvar sum64_5_hi = utils$3.sum64_5_hi;\nvar sum64_5_lo = utils$3.sum64_5_lo;\nvar BlockHash$1 = common$1.BlockHash;\nvar sha512_K = [\n  1116352408,\n  3609767458,\n  1899447441,\n  602891725,\n  3049323471,\n  3964484399,\n  3921009573,\n  2173295548,\n  961987163,\n  4081628472,\n  1508970993,\n  3053834265,\n  2453635748,\n  2937671579,\n  2870763221,\n  3664609560,\n  3624381080,\n  2734883394,\n  310598401,\n  1164996542,\n  607225278,\n  1323610764,\n  1426881987,\n  3590304994,\n  1925078388,\n  4068182383,\n  2162078206,\n  991336113,\n  2614888103,\n  633803317,\n  3248222580,\n  3479774868,\n  3835390401,\n  2666613458,\n  4022224774,\n  944711139,\n  264347078,\n  2341262773,\n  604807628,\n  2007800933,\n  770255983,\n  1495990901,\n  1249150122,\n  1856431235,\n  1555081692,\n  3175218132,\n  1996064986,\n  2198950837,\n  2554220882,\n  3999719339,\n  2821834349,\n  766784016,\n  2952996808,\n  2566594879,\n  3210313671,\n  3203337956,\n  3336571891,\n  1034457026,\n  3584528711,\n  2466948901,\n  113926993,\n  3758326383,\n  338241895,\n  168717936,\n  666307205,\n  1188179964,\n  773529912,\n  1546045734,\n  1294757372,\n  1522805485,\n  1396182291,\n  2643833823,\n  1695183700,\n  2343527390,\n  1986661051,\n  1014477480,\n  2177026350,\n  1206759142,\n  2456956037,\n  344077627,\n  2730485921,\n  1290863460,\n  2820302411,\n  3158454273,\n  3259730800,\n  3505952657,\n  3345764771,\n  106217008,\n  3516065817,\n  3606008344,\n  3600352804,\n  1432725776,\n  4094571909,\n  1467031594,\n  275423344,\n  851169720,\n  430227734,\n  3100823752,\n  506948616,\n  1363258195,\n  659060556,\n  3750685593,\n  883997877,\n  3785050280,\n  958139571,\n  3318307427,\n  1322822218,\n  3812723403,\n  1537002063,\n  2003034995,\n  1747873779,\n  3602036899,\n  1955562222,\n  1575990012,\n  2024104815,\n  1125592928,\n  2227730452,\n  2716904306,\n  2361852424,\n  442776044,\n  2428436474,\n  593698344,\n  2756734187,\n  3733110249,\n  3204031479,\n  2999351573,\n  3329325298,\n  3815920427,\n  3391569614,\n  3928383900,\n  3515267271,\n  566280711,\n  3940187606,\n  3454069534,\n  4118630271,\n  4000239992,\n  116418474,\n  1914138554,\n  174292421,\n  2731055270,\n  289380356,\n  3203993006,\n  460393269,\n  320620315,\n  685471733,\n  587496836,\n  852142971,\n  1086792851,\n  1017036298,\n  365543100,\n  1126000580,\n  2618297676,\n  1288033470,\n  3409855158,\n  1501505948,\n  4234509866,\n  1607167915,\n  987167468,\n  1816402316,\n  1246189591\n];\nfunction SHA512$1() {\n  if (!(this instanceof SHA512$1))\n    return new SHA512$1();\n  BlockHash$1.call(this);\n  this.h = [\n    1779033703,\n    4089235720,\n    3144134277,\n    2227873595,\n    1013904242,\n    4271175723,\n    2773480762,\n    1595750129,\n    1359893119,\n    2917565137,\n    2600822924,\n    725511199,\n    528734635,\n    4215389547,\n    1541459225,\n    327033209\n  ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils$3.inherits(SHA512$1, BlockHash$1);\nvar _512 = SHA512$1;\nSHA512$1.blockSize = 1024;\nSHA512$1.outSize = 512;\nSHA512$1.hmacStrength = 192;\nSHA512$1.padLength = 128;\nSHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];\n    var c3_lo = W[i - 31];\n    W[i] = sum64_4_hi(\n      c0_hi,\n      c0_lo,\n      c1_hi,\n      c1_lo,\n      c2_hi,\n      c2_lo,\n      c3_hi,\n      c3_lo\n    );\n    W[i + 1] = sum64_4_lo(\n      c0_hi,\n      c0_lo,\n      c1_hi,\n      c1_lo,\n      c2_hi,\n      c2_lo,\n      c3_hi,\n      c3_lo\n    );\n  }\n};\nSHA512$1.prototype._update = function _update3(msg, start) {\n  this._prepareBlock(msg, start);\n  var W = this.W;\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n  assert$1(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n    var T1_hi = sum64_5_hi(\n      c0_hi,\n      c0_lo,\n      c1_hi,\n      c1_lo,\n      c2_hi,\n      c2_lo,\n      c3_hi,\n      c3_lo,\n      c4_hi,\n      c4_lo\n    );\n    var T1_lo = sum64_5_lo(\n      c0_hi,\n      c0_lo,\n      c1_hi,\n      c1_lo,\n      c2_hi,\n      c2_lo,\n      c3_hi,\n      c3_lo,\n      c4_hi,\n      c4_lo\n    );\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n    hh = gh;\n    hl = gl;\n    gh = fh;\n    gl = fl;\n    fh = eh;\n    fl = el;\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n    dh = ch;\n    dl = cl;\n    ch = bh;\n    cl = bl;\n    bh = ah;\n    bl = al;\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\nSHA512$1.prototype._digest = function digest5(enc) {\n  if (enc === \"hex\")\n    return utils$3.toHex32(this.h, \"big\");\n  else\n    return utils$3.split32(this.h, \"big\");\n};\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r2 = xh & yh ^ ~xh & zh;\n  if (r2 < 0)\n    r2 += 4294967296;\n  return r2;\n}\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r2 = xl & yl ^ ~xl & zl;\n  if (r2 < 0)\n    r2 += 4294967296;\n  return r2;\n}\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r2 = xh & yh ^ xh & zh ^ yh & zh;\n  if (r2 < 0)\n    r2 += 4294967296;\n  return r2;\n}\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r2 = xl & yl ^ xl & zl ^ yl & zl;\n  if (r2 < 0)\n    r2 += 4294967296;\n  return r2;\n}\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);\n  var c2_hi = rotr64_hi(xl, xh, 7);\n  var r2 = c0_hi ^ c1_hi ^ c2_hi;\n  if (r2 < 0)\n    r2 += 4294967296;\n  return r2;\n}\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);\n  var c2_lo = rotr64_lo(xl, xh, 7);\n  var r2 = c0_lo ^ c1_lo ^ c2_lo;\n  if (r2 < 0)\n    r2 += 4294967296;\n  return r2;\n}\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);\n  var r2 = c0_hi ^ c1_hi ^ c2_hi;\n  if (r2 < 0)\n    r2 += 4294967296;\n  return r2;\n}\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);\n  var r2 = c0_lo ^ c1_lo ^ c2_lo;\n  if (r2 < 0)\n    r2 += 4294967296;\n  return r2;\n}\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n  var r2 = c0_hi ^ c1_hi ^ c2_hi;\n  if (r2 < 0)\n    r2 += 4294967296;\n  return r2;\n}\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n  var r2 = c0_lo ^ c1_lo ^ c2_lo;\n  if (r2 < 0)\n    r2 += 4294967296;\n  return r2;\n}\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);\n  var c2_hi = shr64_hi(xh, xl, 6);\n  var r2 = c0_hi ^ c1_hi ^ c2_hi;\n  if (r2 < 0)\n    r2 += 4294967296;\n  return r2;\n}\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);\n  var c2_lo = shr64_lo(xh, xl, 6);\n  var r2 = c0_lo ^ c1_lo ^ c2_lo;\n  if (r2 < 0)\n    r2 += 4294967296;\n  return r2;\n}\nvar utils$2 = utils$9;\nvar SHA512 = _512;\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n  SHA512.call(this);\n  this.h = [\n    3418070365,\n    3238371032,\n    1654270250,\n    914150663,\n    2438529370,\n    812702999,\n    355462360,\n    4144912697,\n    1731405415,\n    4290775857,\n    2394180231,\n    1750603025,\n    3675008525,\n    1694076839,\n    1203062813,\n    3204075428\n  ];\n}\nutils$2.inherits(SHA384, SHA512);\nvar _384 = SHA384;\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\nSHA384.prototype._digest = function digest6(enc) {\n  if (enc === \"hex\")\n    return utils$2.toHex32(this.h.slice(0, 12), \"big\");\n  else\n    return utils$2.split32(this.h.slice(0, 12), \"big\");\n};\nsha.sha1 = _1;\nsha.sha224 = _224;\nsha.sha256 = _256;\nsha.sha384 = _384;\nsha.sha512 = _512;\nvar ripemd = {};\nvar utils$1 = utils$9;\nvar common = common$5;\nvar rotl32 = utils$1.rotl32;\nvar sum32 = utils$1.sum32;\nvar sum32_3 = utils$1.sum32_3;\nvar sum32_4 = utils$1.sum32_4;\nvar BlockHash = common.BlockHash;\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n  BlockHash.call(this);\n  this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];\n  this.endian = \"little\";\n}\nutils$1.inherits(RIPEMD160, BlockHash);\nripemd.ripemd160 = RIPEMD160;\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\nRIPEMD160.prototype._update = function update2(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]\n      ),\n      E\n    );\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]\n      ),\n      Eh\n    );\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\nRIPEMD160.prototype._digest = function digest7(enc) {\n  if (enc === \"hex\")\n    return utils$1.toHex32(this.h, \"little\");\n  else\n    return utils$1.split32(this.h, \"little\");\n};\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return x & y | ~x & z;\n  else if (j <= 47)\n    return (x | ~y) ^ z;\n  else if (j <= 63)\n    return x & z | y & ~z;\n  else\n    return x ^ (y | ~z);\n}\nfunction K(j) {\n  if (j <= 15)\n    return 0;\n  else if (j <= 31)\n    return 1518500249;\n  else if (j <= 47)\n    return 1859775393;\n  else if (j <= 63)\n    return 2400959708;\n  else\n    return 2840853838;\n}\nfunction Kh(j) {\n  if (j <= 15)\n    return 1352829926;\n  else if (j <= 31)\n    return 1548603684;\n  else if (j <= 47)\n    return 1836072691;\n  else if (j <= 63)\n    return 2053994217;\n  else\n    return 0;\n}\nvar r = [\n  0,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  13,\n  14,\n  15,\n  7,\n  4,\n  13,\n  1,\n  10,\n  6,\n  15,\n  3,\n  12,\n  0,\n  9,\n  5,\n  2,\n  14,\n  11,\n  8,\n  3,\n  10,\n  14,\n  4,\n  9,\n  15,\n  8,\n  1,\n  2,\n  7,\n  0,\n  6,\n  13,\n  11,\n  5,\n  12,\n  1,\n  9,\n  11,\n  10,\n  0,\n  8,\n  12,\n  4,\n  13,\n  3,\n  7,\n  15,\n  14,\n  5,\n  6,\n  2,\n  4,\n  0,\n  5,\n  9,\n  7,\n  12,\n  2,\n  10,\n  14,\n  1,\n  3,\n  8,\n  11,\n  6,\n  15,\n  13\n];\nvar rh = [\n  5,\n  14,\n  7,\n  0,\n  9,\n  2,\n  11,\n  4,\n  13,\n  6,\n  15,\n  8,\n  1,\n  10,\n  3,\n  12,\n  6,\n  11,\n  3,\n  7,\n  0,\n  13,\n  5,\n  10,\n  14,\n  15,\n  8,\n  12,\n  4,\n  9,\n  1,\n  2,\n  15,\n  5,\n  1,\n  3,\n  7,\n  14,\n  6,\n  9,\n  11,\n  8,\n  12,\n  2,\n  10,\n  0,\n  4,\n  13,\n  8,\n  6,\n  4,\n  1,\n  3,\n  11,\n  15,\n  0,\n  5,\n  12,\n  2,\n  13,\n  9,\n  7,\n  10,\n  14,\n  12,\n  15,\n  10,\n  4,\n  1,\n  5,\n  8,\n  7,\n  6,\n  2,\n  13,\n  14,\n  0,\n  3,\n  9,\n  11\n];\nvar s = [\n  11,\n  14,\n  15,\n  12,\n  5,\n  8,\n  7,\n  9,\n  11,\n  13,\n  14,\n  15,\n  6,\n  7,\n  9,\n  8,\n  7,\n  6,\n  8,\n  13,\n  11,\n  9,\n  7,\n  15,\n  7,\n  12,\n  15,\n  9,\n  11,\n  7,\n  13,\n  12,\n  11,\n  13,\n  6,\n  7,\n  14,\n  9,\n  13,\n  15,\n  14,\n  8,\n  13,\n  6,\n  5,\n  12,\n  7,\n  5,\n  11,\n  12,\n  14,\n  15,\n  14,\n  15,\n  9,\n  8,\n  9,\n  14,\n  5,\n  6,\n  8,\n  6,\n  5,\n  12,\n  9,\n  15,\n  5,\n  11,\n  6,\n  8,\n  13,\n  12,\n  5,\n  12,\n  13,\n  14,\n  11,\n  8,\n  5,\n  6\n];\nvar sh = [\n  8,\n  9,\n  9,\n  11,\n  13,\n  15,\n  15,\n  5,\n  7,\n  7,\n  8,\n  11,\n  14,\n  14,\n  12,\n  6,\n  9,\n  13,\n  15,\n  7,\n  12,\n  8,\n  9,\n  11,\n  7,\n  7,\n  12,\n  7,\n  6,\n  15,\n  13,\n  11,\n  9,\n  7,\n  15,\n  11,\n  8,\n  6,\n  6,\n  14,\n  12,\n  13,\n  5,\n  14,\n  13,\n  13,\n  7,\n  5,\n  15,\n  5,\n  8,\n  11,\n  14,\n  14,\n  6,\n  14,\n  6,\n  9,\n  12,\n  9,\n  12,\n  5,\n  15,\n  8,\n  8,\n  5,\n  12,\n  9,\n  12,\n  5,\n  14,\n  6,\n  8,\n  13,\n  6,\n  5,\n  15,\n  13,\n  11,\n  11\n];\nvar utils = utils$9;\nvar assert = minimalisticAssert;\nfunction Hmac(hash2, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash2, key, enc);\n  this.Hash = hash2;\n  this.blockSize = hash2.blockSize / 8;\n  this.outSize = hash2.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n  this._init(utils.toArray(key, enc));\n}\nvar hmac = Hmac;\nHmac.prototype._init = function init(key) {\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 54;\n  this.inner = new this.Hash().update(key);\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 106;\n  this.outer = new this.Hash().update(key);\n};\nHmac.prototype.update = function update3(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\nHmac.prototype.digest = function digest8(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n(function(exports) {\n  var hash2 = exports;\n  hash2.utils = utils$9;\n  hash2.common = common$5;\n  hash2.sha = sha;\n  hash2.ripemd = ripemd;\n  hash2.hmac = hmac;\n  hash2.sha1 = hash2.sha.sha1;\n  hash2.sha256 = hash2.sha.sha256;\n  hash2.sha224 = hash2.sha.sha224;\n  hash2.sha384 = hash2.sha.sha384;\n  hash2.sha512 = hash2.sha.sha512;\n  hash2.ripemd160 = hash2.ripemd.ripemd160;\n})(hash$1);\nconst hash = /* @__PURE__ */ getDefaultExportFromCjs$1(hash$1);\nlet urlAlphabet = \"useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict\";\nlet customAlphabet = (alphabet, defaultSize = 21) => {\n  return (size = defaultSize) => {\n    let id = \"\";\n    let i = size;\n    while (i--) {\n      id += alphabet[Math.random() * alphabet.length | 0];\n    }\n    return id;\n  };\n};\nlet nanoid = (size = 21) => {\n  let id = \"\";\n  let i = size;\n  while (i--) {\n    id += urlAlphabet[Math.random() * 64 | 0];\n  }\n  return id;\n};\nconst convertMillimetersToTwip = (millimeters) => Math.floor(millimeters / 25.4 * 72 * 20);\nconst convertInchesToTwip = (inches) => Math.floor(inches * 72 * 20);\nconst uniqueNumericIdCreator = (initial = 0) => {\n  let currentCount = initial;\n  return () => ++currentCount;\n};\nconst abstractNumUniqueNumericIdGen = () => uniqueNumericIdCreator();\nconst concreteNumUniqueNumericIdGen = () => uniqueNumericIdCreator(1);\nconst docPropertiesUniqueNumericIdGen = () => uniqueNumericIdCreator();\nconst bookmarkUniqueNumericIdGen = () => uniqueNumericIdCreator();\nconst uniqueId = () => nanoid().toLowerCase();\nconst hashedId = (data) => hash.sha1().update(data instanceof ArrayBuffer ? new Uint8Array(data) : data).digest(\"hex\");\nconst generateUuidPart = (count) => customAlphabet(\"1234567890abcdef\", count)();\nconst uniqueUuid = () => `${generateUuidPart(8)}-${generateUuidPart(4)}-${generateUuidPart(4)}-${generateUuidPart(4)}-${generateUuidPart(12)}`;\nconst HorizontalPositionRelativeFrom = {\n  CHARACTER: \"character\",\n  COLUMN: \"column\",\n  INSIDE_MARGIN: \"insideMargin\",\n  LEFT_MARGIN: \"leftMargin\",\n  MARGIN: \"margin\",\n  OUTSIDE_MARGIN: \"outsideMargin\",\n  PAGE: \"page\",\n  RIGHT_MARGIN: \"rightMargin\"\n};\nconst VerticalPositionRelativeFrom = {\n  BOTTOM_MARGIN: \"bottomMargin\",\n  INSIDE_MARGIN: \"insideMargin\",\n  LINE: \"line\",\n  MARGIN: \"margin\",\n  OUTSIDE_MARGIN: \"outsideMargin\",\n  PAGE: \"page\",\n  PARAGRAPH: \"paragraph\",\n  TOP_MARGIN: \"topMargin\"\n};\nclass SimplePosAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      x: \"x\",\n      y: \"y\"\n    });\n  }\n}\nclass SimplePos extends XmlComponent {\n  constructor() {\n    super(\"wp:simplePos\");\n    this.root.push(\n      new SimplePosAttributes({\n        x: 0,\n        y: 0\n      })\n    );\n  }\n}\nclass Align extends XmlComponent {\n  constructor(value) {\n    super(\"wp:align\");\n    this.root.push(value);\n  }\n}\nclass PositionOffset extends XmlComponent {\n  constructor(offsetValue) {\n    super(\"wp:posOffset\");\n    this.root.push(offsetValue.toString());\n  }\n}\nclass HorizontalPositionAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      relativeFrom: \"relativeFrom\"\n    });\n  }\n}\nclass HorizontalPosition extends XmlComponent {\n  constructor(horizontalPosition) {\n    super(\"wp:positionH\");\n    this.root.push(\n      new HorizontalPositionAttributes({\n        relativeFrom: horizontalPosition.relative || HorizontalPositionRelativeFrom.PAGE\n      })\n    );\n    if (horizontalPosition.align) {\n      this.root.push(new Align(horizontalPosition.align));\n    } else if (horizontalPosition.offset !== void 0) {\n      this.root.push(new PositionOffset(horizontalPosition.offset));\n    } else {\n      throw new Error(\"There is no configuration provided for floating position (Align or offset)\");\n    }\n  }\n}\nclass VerticalPositionAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      relativeFrom: \"relativeFrom\"\n    });\n  }\n}\nclass VerticalPosition extends XmlComponent {\n  constructor(verticalPosition) {\n    super(\"wp:positionV\");\n    this.root.push(\n      new VerticalPositionAttributes({\n        relativeFrom: verticalPosition.relative || VerticalPositionRelativeFrom.PAGE\n      })\n    );\n    if (verticalPosition.align) {\n      this.root.push(new Align(verticalPosition.align));\n    } else if (verticalPosition.offset !== void 0) {\n      this.root.push(new PositionOffset(verticalPosition.offset));\n    } else {\n      throw new Error(\"There is no configuration provided for floating position (Align or offset)\");\n    }\n  }\n}\nclass GraphicDataAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      uri: \"uri\"\n    });\n  }\n}\nconst createSvgBlip = (mediaData) => new BuilderElement({\n  name: \"asvg:svgBlip\",\n  attributes: {\n    asvg: {\n      key: \"xmlns:asvg\",\n      value: \"http://schemas.microsoft.com/office/drawing/2016/SVG/main\"\n    },\n    embed: {\n      key: \"r:embed\",\n      value: `rId{${mediaData.fileName}}`\n    }\n  }\n});\nconst createExtention = (mediaData) => new BuilderElement({\n  name: \"a:ext\",\n  attributes: {\n    uri: {\n      key: \"uri\",\n      value: \"{96DAC541-7B7A-43D3-8B79-37D633B846F1}\"\n    }\n  },\n  children: [createSvgBlip(mediaData)]\n});\nconst createExtentionList = (mediaData) => new BuilderElement({\n  name: \"a:extLst\",\n  children: [createExtention(mediaData)]\n});\nconst createBlip = (mediaData) => new BuilderElement({\n  name: \"a:blip\",\n  attributes: {\n    embed: {\n      key: \"r:embed\",\n      value: `rId{${mediaData.type === \"svg\" ? mediaData.fallback.fileName : mediaData.fileName}}`\n    },\n    cstate: {\n      key: \"cstate\",\n      value: \"none\"\n    }\n  },\n  children: mediaData.type === \"svg\" ? [createExtentionList(mediaData)] : []\n});\nclass SourceRectangle extends XmlComponent {\n  constructor() {\n    super(\"a:srcRect\");\n  }\n}\nclass FillRectangle extends XmlComponent {\n  constructor() {\n    super(\"a:fillRect\");\n  }\n}\nclass Stretch extends XmlComponent {\n  constructor() {\n    super(\"a:stretch\");\n    this.root.push(new FillRectangle());\n  }\n}\nclass BlipFill extends XmlComponent {\n  constructor(mediaData) {\n    super(\"pic:blipFill\");\n    this.root.push(createBlip(mediaData));\n    this.root.push(new SourceRectangle());\n    this.root.push(new Stretch());\n  }\n}\nclass PicLocksAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      noChangeAspect: \"noChangeAspect\",\n      noChangeArrowheads: \"noChangeArrowheads\"\n    });\n  }\n}\nclass PicLocks extends XmlComponent {\n  constructor() {\n    super(\"a:picLocks\");\n    this.root.push(\n      new PicLocksAttributes({\n        noChangeAspect: 1,\n        noChangeArrowheads: 1\n      })\n    );\n  }\n}\nclass ChildNonVisualProperties extends XmlComponent {\n  constructor() {\n    super(\"pic:cNvPicPr\");\n    this.root.push(new PicLocks());\n  }\n}\nconst createHyperlinkClick = (linkId, hasXmlNs) => new BuilderElement({\n  name: \"a:hlinkClick\",\n  attributes: __spreadProps(__spreadValues({}, hasXmlNs ? {\n    xmlns: {\n      key: \"xmlns:a\",\n      value: \"http://schemas.openxmlformats.org/drawingml/2006/main\"\n    }\n  } : {}), {\n    id: {\n      key: \"r:id\",\n      value: `rId${linkId}`\n    }\n  })\n});\nclass NonVisualPropertiesAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      id: \"id\",\n      name: \"name\",\n      descr: \"descr\"\n    });\n  }\n}\nclass NonVisualProperties extends XmlComponent {\n  constructor() {\n    super(\"pic:cNvPr\");\n    this.root.push(\n      new NonVisualPropertiesAttributes({\n        id: 0,\n        name: \"\",\n        descr: \"\"\n      })\n    );\n  }\n  prepForXml(context) {\n    for (let i = context.stack.length - 1; i >= 0; i--) {\n      const element2 = context.stack[i];\n      if (!(element2 instanceof ConcreteHyperlink)) {\n        continue;\n      }\n      this.root.push(createHyperlinkClick(element2.linkId, false));\n      break;\n    }\n    return super.prepForXml(context);\n  }\n}\nclass NonVisualPicProperties extends XmlComponent {\n  constructor() {\n    super(\"pic:nvPicPr\");\n    this.root.push(new NonVisualProperties());\n    this.root.push(new ChildNonVisualProperties());\n  }\n}\nclass PicAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      xmlns: \"xmlns:pic\"\n    });\n  }\n}\nclass ExtentsAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      cx: \"cx\",\n      cy: \"cy\"\n    });\n  }\n}\nclass Extents extends XmlComponent {\n  constructor(x, y) {\n    super(\"a:ext\");\n    __publicField(this, \"attributes\");\n    this.attributes = new ExtentsAttributes({\n      cx: x,\n      cy: y\n    });\n    this.root.push(this.attributes);\n  }\n}\nclass OffsetAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      x: \"x\",\n      y: \"y\"\n    });\n  }\n}\nclass Offset extends XmlComponent {\n  constructor() {\n    super(\"a:off\");\n    this.root.push(\n      new OffsetAttributes({\n        x: 0,\n        y: 0\n      })\n    );\n  }\n}\nclass FormAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      flipVertical: \"flipV\",\n      flipHorizontal: \"flipH\",\n      rotation: \"rot\"\n    });\n  }\n}\nclass Form extends XmlComponent {\n  constructor(options2) {\n    var _a, _b;\n    super(\"a:xfrm\");\n    __publicField(this, \"extents\");\n    this.root.push(\n      new FormAttributes({\n        flipVertical: (_a = options2.flip) == null ? void 0 : _a.vertical,\n        flipHorizontal: (_b = options2.flip) == null ? void 0 : _b.horizontal,\n        rotation: options2.rotation\n      })\n    );\n    this.extents = new Extents(options2.emus.x, options2.emus.y);\n    this.root.push(new Offset());\n    this.root.push(this.extents);\n  }\n}\nconst createNoFill = () => new BuilderElement({ name: \"a:noFill\" });\nconst createSolidRgbColor = (options2) => new BuilderElement({\n  name: \"a:srgbClr\",\n  attributes: {\n    value: {\n      key: \"val\",\n      value: options2.value\n    }\n  }\n});\nconst createSchemeColor = (options2) => new BuilderElement({\n  name: \"a:schemeClr\",\n  attributes: {\n    value: {\n      key: \"val\",\n      value: options2.value\n    }\n  }\n});\nconst createSolidFill = (options2) => new BuilderElement({\n  name: \"a:solidFill\",\n  children: [options2.type === \"rgb\" ? createSolidRgbColor(options2) : createSchemeColor(options2)]\n});\nconst createOutline = (options2) => new BuilderElement({\n  name: \"a:ln\",\n  attributes: {\n    width: {\n      key: \"w\",\n      value: options2.width\n    },\n    cap: {\n      key: \"cap\",\n      value: options2.cap\n    },\n    compoundLine: {\n      key: \"cmpd\",\n      value: options2.compoundLine\n    },\n    align: {\n      key: \"algn\",\n      value: options2.align\n    }\n  },\n  children: [\n    options2.type === \"noFill\" ? createNoFill() : options2.solidFillType === \"rgb\" ? createSolidFill({\n      type: \"rgb\",\n      value: options2.value\n    }) : createSolidFill({\n      type: \"scheme\",\n      value: options2.value\n    })\n  ]\n});\nclass AdjustmentValues extends XmlComponent {\n  constructor() {\n    super(\"a:avLst\");\n  }\n}\nclass PresetGeometryAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      prst: \"prst\"\n    });\n  }\n}\nclass PresetGeometry extends XmlComponent {\n  constructor() {\n    super(\"a:prstGeom\");\n    this.root.push(\n      new PresetGeometryAttributes({\n        prst: \"rect\"\n      })\n    );\n    this.root.push(new AdjustmentValues());\n  }\n}\nclass ShapePropertiesAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      bwMode: \"bwMode\"\n    });\n  }\n}\nclass ShapeProperties extends XmlComponent {\n  constructor({ outline, transform }) {\n    super(\"pic:spPr\");\n    __publicField(this, \"form\");\n    this.root.push(\n      new ShapePropertiesAttributes({\n        bwMode: \"auto\"\n      })\n    );\n    this.form = new Form(transform);\n    this.root.push(this.form);\n    this.root.push(new PresetGeometry());\n    if (outline) {\n      this.root.push(createNoFill());\n      this.root.push(createOutline(outline));\n    }\n  }\n}\nclass Pic extends XmlComponent {\n  constructor({\n    mediaData,\n    transform,\n    outline\n  }) {\n    super(\"pic:pic\");\n    this.root.push(\n      new PicAttributes({\n        xmlns: \"http://schemas.openxmlformats.org/drawingml/2006/picture\"\n      })\n    );\n    this.root.push(new NonVisualPicProperties());\n    this.root.push(new BlipFill(mediaData));\n    this.root.push(new ShapeProperties({ transform, outline }));\n  }\n}\nclass GraphicData extends XmlComponent {\n  constructor({\n    mediaData,\n    transform,\n    outline\n  }) {\n    super(\"a:graphicData\");\n    __publicField(this, \"pic\");\n    this.root.push(\n      new GraphicDataAttributes({\n        uri: \"http://schemas.openxmlformats.org/drawingml/2006/picture\"\n      })\n    );\n    this.pic = new Pic({ mediaData, transform, outline });\n    this.root.push(this.pic);\n  }\n}\nclass GraphicAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      a: \"xmlns:a\"\n    });\n  }\n}\nclass Graphic extends XmlComponent {\n  constructor({\n    mediaData,\n    transform,\n    outline\n  }) {\n    super(\"a:graphic\");\n    __publicField(this, \"data\");\n    this.root.push(\n      new GraphicAttributes({\n        a: \"http://schemas.openxmlformats.org/drawingml/2006/main\"\n      })\n    );\n    this.data = new GraphicData({ mediaData, transform, outline });\n    this.root.push(this.data);\n  }\n}\nconst TextWrappingType = {\n  NONE: 0,\n  SQUARE: 1,\n  TIGHT: 2,\n  TOP_AND_BOTTOM: 3\n};\nconst TextWrappingSide = {\n  BOTH_SIDES: \"bothSides\",\n  LEFT: \"left\",\n  RIGHT: \"right\",\n  LARGEST: \"largest\"\n};\nclass WrapNone extends XmlComponent {\n  constructor() {\n    super(\"wp:wrapNone\");\n  }\n}\nclass WrapSquareAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      distT: \"distT\",\n      distB: \"distB\",\n      distL: \"distL\",\n      distR: \"distR\",\n      wrapText: \"wrapText\"\n    });\n  }\n}\nclass WrapSquare extends XmlComponent {\n  constructor(textWrapping, margins = {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0\n  }) {\n    super(\"wp:wrapSquare\");\n    this.root.push(\n      new WrapSquareAttributes({\n        wrapText: textWrapping.side || TextWrappingSide.BOTH_SIDES,\n        distT: margins.top,\n        distB: margins.bottom,\n        distL: margins.left,\n        distR: margins.right\n      })\n    );\n  }\n}\nclass WrapTightAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      distT: \"distT\",\n      distB: \"distB\"\n    });\n  }\n}\nclass WrapTight extends XmlComponent {\n  constructor(margins = {\n    top: 0,\n    bottom: 0\n  }) {\n    super(\"wp:wrapTight\");\n    this.root.push(\n      new WrapTightAttributes({\n        distT: margins.top,\n        distB: margins.bottom\n      })\n    );\n  }\n}\nclass WrapTopAndBottomAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      distT: \"distT\",\n      distB: \"distB\"\n    });\n  }\n}\nclass WrapTopAndBottom extends XmlComponent {\n  constructor(margins = {\n    top: 0,\n    bottom: 0\n  }) {\n    super(\"wp:wrapTopAndBottom\");\n    this.root.push(\n      new WrapTopAndBottomAttributes({\n        distT: margins.top,\n        distB: margins.bottom\n      })\n    );\n  }\n}\nclass DocProperties extends XmlComponent {\n  constructor({ name, description, title } = { name: \"\", description: \"\", title: \"\" }) {\n    super(\"wp:docPr\");\n    __publicField(this, \"docPropertiesUniqueNumericId\", docPropertiesUniqueNumericIdGen());\n    this.root.push(\n      new NextAttributeComponent({\n        id: {\n          key: \"id\",\n          value: this.docPropertiesUniqueNumericId()\n        },\n        name: {\n          key: \"name\",\n          value: name\n        },\n        description: {\n          key: \"descr\",\n          value: description\n        },\n        title: {\n          key: \"title\",\n          value: title\n        }\n      })\n    );\n  }\n  prepForXml(context) {\n    for (let i = context.stack.length - 1; i >= 0; i--) {\n      const element2 = context.stack[i];\n      if (!(element2 instanceof ConcreteHyperlink)) {\n        continue;\n      }\n      this.root.push(createHyperlinkClick(element2.linkId, true));\n      break;\n    }\n    return super.prepForXml(context);\n  }\n}\nconst createEffectExtent = ({ top, right, bottom, left }) => new BuilderElement({\n  name: \"wp:effectExtent\",\n  attributes: {\n    top: {\n      key: \"t\",\n      value: top\n    },\n    right: {\n      key: \"r\",\n      value: right\n    },\n    bottom: {\n      key: \"b\",\n      value: bottom\n    },\n    left: {\n      key: \"l\",\n      value: left\n    }\n  }\n});\nclass ExtentAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      cx: \"cx\",\n      cy: \"cy\"\n    });\n  }\n}\nclass Extent extends XmlComponent {\n  constructor(x, y) {\n    super(\"wp:extent\");\n    __publicField(this, \"attributes\");\n    this.attributes = new ExtentAttributes({\n      cx: x,\n      cy: y\n    });\n    this.root.push(this.attributes);\n  }\n}\nclass GraphicFrameLockAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      xmlns: \"xmlns:a\",\n      noChangeAspect: \"noChangeAspect\"\n    });\n  }\n}\nclass GraphicFrameLocks extends XmlComponent {\n  constructor() {\n    super(\"a:graphicFrameLocks\");\n    this.root.push(\n      new GraphicFrameLockAttributes({\n        xmlns: \"http://schemas.openxmlformats.org/drawingml/2006/main\",\n        noChangeAspect: 1\n      })\n    );\n  }\n}\nclass GraphicFrameProperties extends XmlComponent {\n  constructor() {\n    super(\"wp:cNvGraphicFramePr\");\n    this.root.push(new GraphicFrameLocks());\n  }\n}\nclass AnchorAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      distT: \"distT\",\n      distB: \"distB\",\n      distL: \"distL\",\n      distR: \"distR\",\n      allowOverlap: \"allowOverlap\",\n      behindDoc: \"behindDoc\",\n      layoutInCell: \"layoutInCell\",\n      locked: \"locked\",\n      relativeHeight: \"relativeHeight\",\n      simplePos: \"simplePos\"\n    });\n  }\n}\nclass Anchor extends XmlComponent {\n  constructor({\n    mediaData,\n    transform,\n    drawingOptions\n  }) {\n    super(\"wp:anchor\");\n    const floating = __spreadValues({\n      allowOverlap: true,\n      behindDocument: false,\n      lockAnchor: false,\n      layoutInCell: true,\n      verticalPosition: {},\n      horizontalPosition: {}\n    }, drawingOptions.floating);\n    this.root.push(\n      new AnchorAttributes({\n        distT: floating.margins ? floating.margins.top || 0 : 0,\n        distB: floating.margins ? floating.margins.bottom || 0 : 0,\n        distL: floating.margins ? floating.margins.left || 0 : 0,\n        distR: floating.margins ? floating.margins.right || 0 : 0,\n        simplePos: \"0\",\n        // note: word doesn't fully support - so we use 0\n        allowOverlap: floating.allowOverlap === true ? \"1\" : \"0\",\n        behindDoc: floating.behindDocument === true ? \"1\" : \"0\",\n        locked: floating.lockAnchor === true ? \"1\" : \"0\",\n        layoutInCell: floating.layoutInCell === true ? \"1\" : \"0\",\n        relativeHeight: floating.zIndex ? floating.zIndex : transform.emus.y\n      })\n    );\n    this.root.push(new SimplePos());\n    this.root.push(new HorizontalPosition(floating.horizontalPosition));\n    this.root.push(new VerticalPosition(floating.verticalPosition));\n    this.root.push(new Extent(transform.emus.x, transform.emus.y));\n    this.root.push(createEffectExtent({ top: 0, right: 0, bottom: 0, left: 0 }));\n    if (drawingOptions.floating !== void 0 && drawingOptions.floating.wrap !== void 0) {\n      switch (drawingOptions.floating.wrap.type) {\n        case TextWrappingType.SQUARE:\n          this.root.push(new WrapSquare(drawingOptions.floating.wrap, drawingOptions.floating.margins));\n          break;\n        case TextWrappingType.TIGHT:\n          this.root.push(new WrapTight(drawingOptions.floating.margins));\n          break;\n        case TextWrappingType.TOP_AND_BOTTOM:\n          this.root.push(new WrapTopAndBottom(drawingOptions.floating.margins));\n          break;\n        case TextWrappingType.NONE:\n        default:\n          this.root.push(new WrapNone());\n      }\n    } else {\n      this.root.push(new WrapNone());\n    }\n    this.root.push(new DocProperties(drawingOptions.docProperties));\n    this.root.push(new GraphicFrameProperties());\n    this.root.push(new Graphic({ mediaData, transform, outline: drawingOptions.outline }));\n  }\n}\nconst createInline = ({ mediaData, transform, docProperties, outline }) => {\n  var _a, _b, _c, _d;\n  return new BuilderElement({\n    name: \"wp:inline\",\n    attributes: {\n      distanceTop: {\n        key: \"distT\",\n        value: 0\n      },\n      distanceBottom: {\n        key: \"distB\",\n        value: 0\n      },\n      distanceLeft: {\n        key: \"distL\",\n        value: 0\n      },\n      distanceRight: {\n        key: \"distR\",\n        value: 0\n      }\n    },\n    children: [\n      new Extent(transform.emus.x, transform.emus.y),\n      createEffectExtent(\n        outline ? {\n          top: ((_a = outline.width) != null ? _a : 9525) * 2,\n          right: ((_b = outline.width) != null ? _b : 9525) * 2,\n          bottom: ((_c = outline.width) != null ? _c : 9525) * 2,\n          left: ((_d = outline.width) != null ? _d : 9525) * 2\n        } : { top: 0, right: 0, bottom: 0, left: 0 }\n      ),\n      new DocProperties(docProperties),\n      new GraphicFrameProperties(),\n      new Graphic({ mediaData, transform, outline })\n    ]\n  });\n};\nclass Drawing extends XmlComponent {\n  constructor(imageData, drawingOptions = {}) {\n    super(\"w:drawing\");\n    if (!drawingOptions.floating) {\n      this.root.push(\n        createInline({\n          mediaData: imageData,\n          transform: imageData.transformation,\n          docProperties: drawingOptions.docProperties,\n          outline: drawingOptions.outline\n        })\n      );\n    } else {\n      this.root.push(new Anchor({ mediaData: imageData, transform: imageData.transformation, drawingOptions }));\n    }\n  }\n}\nconst convertDataURIToBinary = (dataURI) => {\n  if (typeof atob === \"function\") {\n    const BASE64_MARKER = \";base64,\";\n    const base64Index = dataURI.indexOf(BASE64_MARKER);\n    const base64IndexWithOffset = base64Index === -1 ? 0 : base64Index + BASE64_MARKER.length;\n    return new Uint8Array(\n      atob(dataURI.substring(base64IndexWithOffset)).split(\"\").map((c) => c.charCodeAt(0))\n    );\n  } else {\n    const b = require(\"buffer\");\n    return new b.Buffer(dataURI, \"base64\");\n  }\n};\nconst standardizeData = (data) => typeof data === \"string\" ? convertDataURIToBinary(data) : data;\nconst createImageData = (options2, key) => ({\n  data: standardizeData(options2.data),\n  fileName: key,\n  transformation: {\n    pixels: {\n      x: Math.round(options2.transformation.width),\n      y: Math.round(options2.transformation.height)\n    },\n    emus: {\n      x: Math.round(options2.transformation.width * 9525),\n      y: Math.round(options2.transformation.height * 9525)\n    },\n    flip: options2.transformation.flip,\n    rotation: options2.transformation.rotation ? options2.transformation.rotation * 6e4 : void 0\n  }\n});\nclass ImageRun extends Run {\n  constructor(options2) {\n    super({});\n    __publicField(this, \"imageData\");\n    const hash2 = hashedId(options2.data);\n    const key = `${hash2}.${options2.type}`;\n    this.imageData = options2.type === \"svg\" ? __spreadProps(__spreadValues({\n      type: options2.type\n    }, createImageData(options2, key)), {\n      fallback: __spreadValues({\n        type: options2.fallback.type\n      }, createImageData(\n        __spreadProps(__spreadValues({}, options2.fallback), {\n          transformation: options2.transformation\n        }),\n        `${hashedId(options2.fallback.data)}.${options2.fallback.type}`\n      ))\n    }) : __spreadValues({\n      type: options2.type\n    }, createImageData(options2, key));\n    const drawing = new Drawing(this.imageData, {\n      floating: options2.floating,\n      docProperties: options2.altText,\n      outline: options2.outline\n    });\n    this.root.push(drawing);\n  }\n  prepForXml(context) {\n    context.file.Media.addImage(this.imageData.fileName, this.imageData);\n    if (this.imageData.type === \"svg\") {\n      context.file.Media.addImage(this.imageData.fallback.fileName, this.imageData.fallback);\n    }\n    return super.prepForXml(context);\n  }\n}\nclass SequentialIdentifierInstruction extends XmlComponent {\n  constructor(identifier) {\n    super(\"w:instrText\");\n    this.root.push(new TextAttributes({ space: SpaceType.PRESERVE }));\n    this.root.push(`SEQ ${identifier}`);\n  }\n}\nclass SequentialIdentifier extends Run {\n  constructor(identifier) {\n    super({});\n    this.root.push(new Begin(true));\n    this.root.push(new SequentialIdentifierInstruction(identifier));\n    this.root.push(new Separate());\n    this.root.push(new End());\n  }\n}\nclass FldSimpleAttrs extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { instr: \"w:instr\" });\n  }\n}\nclass SimpleField extends XmlComponent {\n  constructor(instruction, cachedValue) {\n    super(\"w:fldSimple\");\n    this.root.push(new FldSimpleAttrs({ instr: instruction }));\n    if (cachedValue !== void 0) {\n      this.root.push(new TextRun(cachedValue));\n    }\n  }\n}\nclass SimpleMailMergeField extends SimpleField {\n  constructor(fieldName) {\n    super(` MERGEFIELD ${fieldName} `, `«${fieldName}»`);\n  }\n}\nclass CommentAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { id: \"w:id\", initials: \"w:initials\", author: \"w:author\", date: \"w:date\" });\n  }\n}\nclass CommentRangeAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { id: \"w:id\" });\n  }\n}\nclass RootCommentsAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      \"xmlns:cx\": \"xmlns:cx\",\n      \"xmlns:cx1\": \"xmlns:cx1\",\n      \"xmlns:cx2\": \"xmlns:cx2\",\n      \"xmlns:cx3\": \"xmlns:cx3\",\n      \"xmlns:cx4\": \"xmlns:cx4\",\n      \"xmlns:cx5\": \"xmlns:cx5\",\n      \"xmlns:cx6\": \"xmlns:cx6\",\n      \"xmlns:cx7\": \"xmlns:cx7\",\n      \"xmlns:cx8\": \"xmlns:cx8\",\n      \"xmlns:mc\": \"xmlns:mc\",\n      \"xmlns:aink\": \"xmlns:aink\",\n      \"xmlns:am3d\": \"xmlns:am3d\",\n      \"xmlns:o\": \"xmlns:o\",\n      \"xmlns:r\": \"xmlns:r\",\n      \"xmlns:m\": \"xmlns:m\",\n      \"xmlns:v\": \"xmlns:v\",\n      \"xmlns:wp14\": \"xmlns:wp14\",\n      \"xmlns:wp\": \"xmlns:wp\",\n      \"xmlns:w10\": \"xmlns:w10\",\n      \"xmlns:w\": \"xmlns:w\",\n      \"xmlns:w14\": \"xmlns:w14\",\n      \"xmlns:w15\": \"xmlns:w15\",\n      \"xmlns:w16cex\": \"xmlns:w16cex\",\n      \"xmlns:w16cid\": \"xmlns:w16cid\",\n      \"xmlns:w16\": \"xmlns:w16\",\n      \"xmlns:w16sdtdh\": \"xmlns:w16sdtdh\",\n      \"xmlns:w16se\": \"xmlns:w16se\",\n      \"xmlns:wpg\": \"xmlns:wpg\",\n      \"xmlns:wpi\": \"xmlns:wpi\",\n      \"xmlns:wne\": \"xmlns:wne\",\n      \"xmlns:wps\": \"xmlns:wps\"\n    });\n  }\n}\nclass CommentRangeStart extends XmlComponent {\n  constructor(id) {\n    super(\"w:commentRangeStart\");\n    this.root.push(new CommentRangeAttributes({ id }));\n  }\n}\nclass CommentRangeEnd extends XmlComponent {\n  constructor(id) {\n    super(\"w:commentRangeEnd\");\n    this.root.push(new CommentRangeAttributes({ id }));\n  }\n}\nclass CommentReference extends XmlComponent {\n  constructor(id) {\n    super(\"w:commentReference\");\n    this.root.push(new CommentRangeAttributes({ id }));\n  }\n}\nclass Comment extends XmlComponent {\n  constructor({ id, initials, author, date = /* @__PURE__ */ new Date(), children }) {\n    super(\"w:comment\");\n    this.root.push(\n      new CommentAttributes({\n        id,\n        initials,\n        author,\n        date: date.toISOString()\n      })\n    );\n    for (const child of children) {\n      this.root.push(child);\n    }\n  }\n}\nclass Comments extends XmlComponent {\n  constructor({ children }) {\n    super(\"w:comments\");\n    this.root.push(\n      new RootCommentsAttributes({\n        \"xmlns:cx\": \"http://schemas.microsoft.com/office/drawing/2014/chartex\",\n        \"xmlns:cx1\": \"http://schemas.microsoft.com/office/drawing/2015/9/8/chartex\",\n        \"xmlns:cx2\": \"http://schemas.microsoft.com/office/drawing/2015/10/21/chartex\",\n        \"xmlns:cx3\": \"http://schemas.microsoft.com/office/drawing/2016/5/9/chartex\",\n        \"xmlns:cx4\": \"http://schemas.microsoft.com/office/drawing/2016/5/10/chartex\",\n        \"xmlns:cx5\": \"http://schemas.microsoft.com/office/drawing/2016/5/11/chartex\",\n        \"xmlns:cx6\": \"http://schemas.microsoft.com/office/drawing/2016/5/12/chartex\",\n        \"xmlns:cx7\": \"http://schemas.microsoft.com/office/drawing/2016/5/13/chartex\",\n        \"xmlns:cx8\": \"http://schemas.microsoft.com/office/drawing/2016/5/14/chartex\",\n        \"xmlns:mc\": \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\n        \"xmlns:aink\": \"http://schemas.microsoft.com/office/drawing/2016/ink\",\n        \"xmlns:am3d\": \"http://schemas.microsoft.com/office/drawing/2017/model3d\",\n        \"xmlns:o\": \"urn:schemas-microsoft-com:office:office\",\n        \"xmlns:r\": \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\",\n        \"xmlns:m\": \"http://schemas.openxmlformats.org/officeDocument/2006/math\",\n        \"xmlns:v\": \"urn:schemas-microsoft-com:vml\",\n        \"xmlns:wp14\": \"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\",\n        \"xmlns:wp\": \"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\",\n        \"xmlns:w10\": \"urn:schemas-microsoft-com:office:word\",\n        \"xmlns:w\": \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\n        \"xmlns:w14\": \"http://schemas.microsoft.com/office/word/2010/wordml\",\n        \"xmlns:w15\": \"http://schemas.microsoft.com/office/word/2012/wordml\",\n        \"xmlns:w16cex\": \"http://schemas.microsoft.com/office/word/2018/wordml/cex\",\n        \"xmlns:w16cid\": \"http://schemas.microsoft.com/office/word/2016/wordml/cid\",\n        \"xmlns:w16\": \"http://schemas.microsoft.com/office/word/2018/wordml\",\n        \"xmlns:w16sdtdh\": \"http://schemas.microsoft.com/office/word/2020/wordml/sdtdatahash\",\n        \"xmlns:w16se\": \"http://schemas.microsoft.com/office/word/2015/wordml/symex\",\n        \"xmlns:wpg\": \"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\",\n        \"xmlns:wpi\": \"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\",\n        \"xmlns:wne\": \"http://schemas.microsoft.com/office/word/2006/wordml\",\n        \"xmlns:wps\": \"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\"\n      })\n    );\n    for (const child of children) {\n      this.root.push(new Comment(child));\n    }\n  }\n}\nclass NoBreakHyphen extends EmptyElement {\n  constructor() {\n    super(\"w:noBreakHyphen\");\n  }\n}\nclass SoftHyphen extends EmptyElement {\n  constructor() {\n    super(\"w:softHyphen\");\n  }\n}\nclass DayShort extends EmptyElement {\n  constructor() {\n    super(\"w:dayShort\");\n  }\n}\nclass MonthShort extends EmptyElement {\n  constructor() {\n    super(\"w:monthShort\");\n  }\n}\nclass YearShort extends EmptyElement {\n  constructor() {\n    super(\"w:yearShort\");\n  }\n}\nclass DayLong extends EmptyElement {\n  constructor() {\n    super(\"w:dayLong\");\n  }\n}\nclass MonthLong extends EmptyElement {\n  constructor() {\n    super(\"w:monthLong\");\n  }\n}\nclass YearLong extends EmptyElement {\n  constructor() {\n    super(\"w:yearLong\");\n  }\n}\nclass AnnotationReference extends EmptyElement {\n  constructor() {\n    super(\"w:annotationRef\");\n  }\n}\nclass FootnoteReferenceElement extends EmptyElement {\n  constructor() {\n    super(\"w:footnoteRef\");\n  }\n}\nclass EndnoteReference extends EmptyElement {\n  constructor() {\n    super(\"w:endnoteRef\");\n  }\n}\nclass Separator extends EmptyElement {\n  constructor() {\n    super(\"w:separator\");\n  }\n}\nclass ContinuationSeparator extends EmptyElement {\n  constructor() {\n    super(\"w:continuationSeparator\");\n  }\n}\nclass PageNumberElement extends EmptyElement {\n  constructor() {\n    super(\"w:pgNum\");\n  }\n}\nclass CarriageReturn extends EmptyElement {\n  constructor() {\n    super(\"w:cr\");\n  }\n}\nclass Tab extends EmptyElement {\n  constructor() {\n    super(\"w:tab\");\n  }\n}\nclass LastRenderedPageBreak extends EmptyElement {\n  constructor() {\n    super(\"w:lastRenderedPageBreak\");\n  }\n}\nconst PositionalTabAlignment = {\n  LEFT: \"left\",\n  CENTER: \"center\",\n  RIGHT: \"right\"\n};\nconst PositionalTabRelativeTo = {\n  MARGIN: \"margin\",\n  INDENT: \"indent\"\n};\nconst PositionalTabLeader = {\n  NONE: \"none\",\n  DOT: \"dot\",\n  HYPHEN: \"hyphen\",\n  UNDERSCORE: \"underscore\",\n  MIDDLE_DOT: \"middleDot\"\n};\nclass PositionalTab extends XmlComponent {\n  constructor(options2) {\n    super(\"w:ptab\");\n    this.root.push(\n      new NextAttributeComponent({\n        alignment: {\n          key: \"w:alignment\",\n          value: options2.alignment\n        },\n        relativeTo: {\n          key: \"w:relativeTo\",\n          value: options2.relativeTo\n        },\n        leader: {\n          key: \"w:leader\",\n          value: options2.leader\n        }\n      })\n    );\n  }\n}\nconst BreakType = {\n  COLUMN: \"column\",\n  PAGE: \"page\"\n  // textWrapping breaks are the default and already exposed via the \"Run\" class\n};\nclass Break2 extends XmlComponent {\n  constructor(type2) {\n    super(\"w:br\");\n    this.root.push(\n      new Attributes({\n        type: type2\n      })\n    );\n  }\n}\nclass PageBreak extends Run {\n  constructor() {\n    super({});\n    this.root.push(new Break2(BreakType.PAGE));\n  }\n}\nclass ColumnBreak extends Run {\n  constructor() {\n    super({});\n    this.root.push(new Break2(BreakType.COLUMN));\n  }\n}\nclass PageBreakBefore extends XmlComponent {\n  constructor() {\n    super(\"w:pageBreakBefore\");\n  }\n}\nconst LineRuleType = {\n  AT_LEAST: \"atLeast\",\n  EXACTLY: \"exactly\",\n  EXACT: \"exact\",\n  AUTO: \"auto\"\n};\nclass SpacingAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      after: \"w:after\",\n      before: \"w:before\",\n      line: \"w:line\",\n      lineRule: \"w:lineRule\",\n      beforeAutoSpacing: \"w:beforeAutospacing\",\n      afterAutoSpacing: \"w:afterAutoSpacing\"\n    });\n  }\n}\nclass Spacing extends XmlComponent {\n  constructor(options2) {\n    super(\"w:spacing\");\n    this.root.push(new SpacingAttributes(options2));\n  }\n}\nconst HeadingLevel = {\n  HEADING_1: \"Heading1\",\n  HEADING_2: \"Heading2\",\n  HEADING_3: \"Heading3\",\n  HEADING_4: \"Heading4\",\n  HEADING_5: \"Heading5\",\n  HEADING_6: \"Heading6\",\n  TITLE: \"Title\"\n};\nlet Style$1 = class Style extends XmlComponent {\n  constructor(styleId) {\n    super(\"w:pStyle\");\n    this.root.push(\n      new Attributes({\n        val: styleId\n      })\n    );\n  }\n};\nclass TabStop extends XmlComponent {\n  constructor(tabDefinitions) {\n    super(\"w:tabs\");\n    for (const tabDefinition of tabDefinitions) {\n      this.root.push(new TabStopItem(tabDefinition));\n    }\n  }\n}\nconst TabStopType = {\n  LEFT: \"left\",\n  RIGHT: \"right\",\n  CENTER: \"center\",\n  BAR: \"bar\",\n  CLEAR: \"clear\",\n  DECIMAL: \"decimal\",\n  END: \"end\",\n  NUM: \"num\",\n  START: \"start\"\n};\nconst LeaderType = {\n  DOT: \"dot\",\n  HYPHEN: \"hyphen\",\n  MIDDLE_DOT: \"middleDot\",\n  NONE: \"none\",\n  UNDERSCORE: \"underscore\"\n};\nconst TabStopPosition = {\n  MAX: 9026\n};\nclass TabAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { val: \"w:val\", pos: \"w:pos\", leader: \"w:leader\" });\n  }\n}\nclass TabStopItem extends XmlComponent {\n  constructor({ type: type2, position, leader }) {\n    super(\"w:tab\");\n    this.root.push(\n      new TabAttributes({\n        val: type2,\n        pos: position,\n        leader\n      })\n    );\n  }\n}\nclass NumberProperties extends XmlComponent {\n  constructor(numberId, indentLevel) {\n    super(\"w:numPr\");\n    this.root.push(new IndentLevel(indentLevel));\n    this.root.push(new NumberId(numberId));\n  }\n}\nclass IndentLevel extends XmlComponent {\n  constructor(level) {\n    super(\"w:ilvl\");\n    if (level > 9) {\n      throw new Error(\n        \"Level cannot be greater than 9. Read more here: https://answers.microsoft.com/en-us/msoffice/forum/all/does-word-support-more-than-9-list-levels/d130fdcd-1781-446d-8c84-c6c79124e4d7\"\n      );\n    }\n    this.root.push(\n      new Attributes({\n        val: level\n      })\n    );\n  }\n}\nclass NumberId extends XmlComponent {\n  constructor(id) {\n    super(\"w:numId\");\n    this.root.push(\n      new Attributes({\n        val: typeof id === \"string\" ? `{${id}}` : id\n      })\n    );\n  }\n}\nclass FileChild extends XmlComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"fileChild\", Symbol());\n  }\n}\nclass RelationshipAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      id: \"Id\",\n      type: \"Type\",\n      target: \"Target\",\n      targetMode: \"TargetMode\"\n    });\n  }\n}\nconst TargetModeType = {\n  EXTERNAL: \"External\"\n};\nclass Relationship extends XmlComponent {\n  constructor(id, type2, target, targetMode) {\n    super(\"Relationship\");\n    this.root.push(\n      new RelationshipAttributes({\n        id,\n        type: type2,\n        target,\n        targetMode\n      })\n    );\n  }\n}\nclass HyperlinkAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      id: \"r:id\",\n      history: \"w:history\",\n      anchor: \"w:anchor\"\n    });\n  }\n}\nconst HyperlinkType = {\n  INTERNAL: \"INTERNAL\",\n  EXTERNAL: \"EXTERNAL\"\n};\nclass ConcreteHyperlink extends XmlComponent {\n  constructor(children, relationshipId, anchor) {\n    super(\"w:hyperlink\");\n    __publicField(this, \"linkId\");\n    this.linkId = relationshipId;\n    const props = {\n      history: 1,\n      anchor: anchor ? anchor : void 0,\n      id: !anchor ? `rId${this.linkId}` : void 0\n    };\n    const attributes = new HyperlinkAttributes(props);\n    this.root.push(attributes);\n    children.forEach((child) => {\n      this.root.push(child);\n    });\n  }\n}\nclass InternalHyperlink extends ConcreteHyperlink {\n  constructor(options2) {\n    super(options2.children, uniqueId(), options2.anchor);\n  }\n}\nclass ExternalHyperlink extends XmlComponent {\n  constructor(options2) {\n    super(\"w:externalHyperlink\");\n    this.options = options2;\n  }\n}\nclass BookmarkStartAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      id: \"w:id\",\n      name: \"w:name\"\n    });\n  }\n}\nclass BookmarkEndAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      id: \"w:id\"\n    });\n  }\n}\nclass Bookmark {\n  constructor(options2) {\n    __publicField(this, \"bookmarkUniqueNumericId\", bookmarkUniqueNumericIdGen());\n    __publicField(this, \"start\");\n    __publicField(this, \"children\");\n    __publicField(this, \"end\");\n    const linkId = this.bookmarkUniqueNumericId();\n    this.start = new BookmarkStart(options2.id, linkId);\n    this.children = options2.children;\n    this.end = new BookmarkEnd(linkId);\n  }\n}\nclass BookmarkStart extends XmlComponent {\n  constructor(id, linkId) {\n    super(\"w:bookmarkStart\");\n    const attributes = new BookmarkStartAttributes({\n      name: id,\n      id: linkId\n    });\n    this.root.push(attributes);\n  }\n}\nclass BookmarkEnd extends XmlComponent {\n  constructor(linkId) {\n    super(\"w:bookmarkEnd\");\n    const attributes = new BookmarkEndAttributes({\n      id: linkId\n    });\n    this.root.push(attributes);\n  }\n}\nclass OutlineLevel extends XmlComponent {\n  constructor(level) {\n    super(\"w:outlineLvl\");\n    this.level = level;\n    this.root.push(\n      new Attributes({\n        val: level\n      })\n    );\n  }\n}\nclass PageReferenceFieldInstruction extends XmlComponent {\n  constructor(bookmarkId, options2 = {}) {\n    super(\"w:instrText\");\n    this.root.push(new TextAttributes({ space: SpaceType.PRESERVE }));\n    let instruction = `PAGEREF ${bookmarkId}`;\n    if (options2.hyperlink) {\n      instruction = `${instruction} \\\\h`;\n    }\n    if (options2.useRelativePosition) {\n      instruction = `${instruction} \\\\p`;\n    }\n    this.root.push(instruction);\n  }\n}\nclass PageReference extends Run {\n  constructor(bookmarkId, options2 = {}) {\n    super({\n      children: [new Begin(true), new PageReferenceFieldInstruction(bookmarkId, options2), new End()]\n    });\n  }\n}\nconst VerticalAlign2 = {\n  BOTTOM: \"bottom\",\n  CENTER: \"center\",\n  TOP: \"top\"\n};\nclass VerticalAlignAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      verticalAlign: \"w:val\"\n    });\n  }\n}\nclass VerticalAlignElement extends XmlComponent {\n  constructor(value) {\n    super(\"w:vAlign\");\n    this.root.push(new VerticalAlignAttributes({ verticalAlign: value }));\n  }\n}\nclass Columns extends XmlComponent {\n  constructor({ space, count, separate, equalWidth, children }) {\n    super(\"w:cols\");\n    this.root.push(\n      new NextAttributeComponent({\n        space: { key: \"w:space\", value: space === void 0 ? void 0 : twipsMeasureValue(space) },\n        count: { key: \"w:num\", value: count === void 0 ? void 0 : decimalNumber(count) },\n        separate: { key: \"w:sep\", value: separate },\n        equalWidth: { key: \"w:equalWidth\", value: equalWidth }\n      })\n    );\n    if (!equalWidth && children) {\n      children.forEach((column) => this.addChildElement(column));\n    }\n  }\n}\nconst DocumentGridType = {\n  DEFAULT: \"default\",\n  LINES: \"lines\",\n  LINES_AND_CHARS: \"linesAndChars\",\n  SNAP_TO_CHARS: \"snapToChars\"\n};\nclass DocGridAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      type: \"w:type\",\n      linePitch: \"w:linePitch\",\n      charSpace: \"w:charSpace\"\n    });\n  }\n}\nclass DocumentGrid extends XmlComponent {\n  constructor(linePitch, charSpace, type2) {\n    super(\"w:docGrid\");\n    this.root.push(\n      new DocGridAttributes({\n        type: type2,\n        linePitch: decimalNumber(linePitch),\n        charSpace: charSpace ? decimalNumber(charSpace) : void 0\n      })\n    );\n  }\n}\nconst HeaderFooterReferenceType = {\n  DEFAULT: \"default\",\n  FIRST: \"first\",\n  EVEN: \"even\"\n};\nclass FooterReferenceAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      type: \"w:type\",\n      id: \"r:id\"\n    });\n  }\n}\nconst HeaderFooterType = {\n  HEADER: \"w:headerReference\",\n  FOOTER: \"w:footerReference\"\n};\nclass HeaderFooterReference extends XmlComponent {\n  constructor(type2, options2) {\n    super(type2);\n    this.root.push(\n      new FooterReferenceAttributes({\n        type: options2.type || HeaderFooterReferenceType.DEFAULT,\n        id: `rId${options2.id}`\n      })\n    );\n  }\n}\nconst LineNumberRestartFormat = {\n  NEW_PAGE: \"newPage\",\n  NEW_SECTION: \"newSection\",\n  CONTINUOUS: \"continuous\"\n};\nconst createLineNumberType = ({ countBy, start, restart, distance }) => new BuilderElement({\n  name: \"w:lnNumType\",\n  attributes: {\n    countBy: { key: \"w:countBy\", value: countBy === void 0 ? void 0 : decimalNumber(countBy) },\n    start: { key: \"w:start\", value: start === void 0 ? void 0 : decimalNumber(start) },\n    restart: { key: \"w:restart\", value: restart },\n    distance: {\n      key: \"w:distance\",\n      value: distance === void 0 ? void 0 : twipsMeasureValue(distance)\n    }\n  }\n});\nconst PageBorderDisplay = {\n  ALL_PAGES: \"allPages\",\n  FIRST_PAGE: \"firstPage\",\n  NOT_FIRST_PAGE: \"notFirstPage\"\n};\nconst PageBorderOffsetFrom = {\n  PAGE: \"page\",\n  TEXT: \"text\"\n};\nconst PageBorderZOrder = {\n  BACK: \"back\",\n  FRONT: \"front\"\n};\nclass PageBordersAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      display: \"w:display\",\n      offsetFrom: \"w:offsetFrom\",\n      zOrder: \"w:zOrder\"\n    });\n  }\n}\nclass PageBorders extends IgnoreIfEmptyXmlComponent {\n  constructor(options2) {\n    super(\"w:pgBorders\");\n    if (!options2) {\n      return this;\n    }\n    if (options2.pageBorders) {\n      this.root.push(\n        new PageBordersAttributes({\n          display: options2.pageBorders.display,\n          offsetFrom: options2.pageBorders.offsetFrom,\n          zOrder: options2.pageBorders.zOrder\n        })\n      );\n    } else {\n      this.root.push(new PageBordersAttributes({}));\n    }\n    if (options2.pageBorderTop) {\n      this.root.push(new BorderElement(\"w:top\", options2.pageBorderTop));\n    }\n    if (options2.pageBorderLeft) {\n      this.root.push(new BorderElement(\"w:left\", options2.pageBorderLeft));\n    }\n    if (options2.pageBorderBottom) {\n      this.root.push(new BorderElement(\"w:bottom\", options2.pageBorderBottom));\n    }\n    if (options2.pageBorderRight) {\n      this.root.push(new BorderElement(\"w:right\", options2.pageBorderRight));\n    }\n  }\n}\nclass PageMargin extends XmlComponent {\n  constructor(top, right, bottom, left, header, footer, gutter) {\n    super(\"w:pgMar\");\n    this.root.push(\n      new NextAttributeComponent({\n        top: { key: \"w:top\", value: signedTwipsMeasureValue(top) },\n        right: { key: \"w:right\", value: twipsMeasureValue(right) },\n        bottom: { key: \"w:bottom\", value: signedTwipsMeasureValue(bottom) },\n        left: { key: \"w:left\", value: twipsMeasureValue(left) },\n        header: { key: \"w:header\", value: twipsMeasureValue(header) },\n        footer: { key: \"w:footer\", value: twipsMeasureValue(footer) },\n        gutter: { key: \"w:gutter\", value: twipsMeasureValue(gutter) }\n      })\n    );\n  }\n}\nconst PageNumberSeparator = {\n  HYPHEN: \"hyphen\",\n  PERIOD: \"period\",\n  COLON: \"colon\",\n  EM_DASH: \"emDash\",\n  EN_DASH: \"endash\"\n};\nclass PageNumberTypeAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      start: \"w:start\",\n      formatType: \"w:fmt\",\n      separator: \"w:chapSep\"\n    });\n  }\n}\nclass PageNumberType extends XmlComponent {\n  constructor({ start, formatType, separator }) {\n    super(\"w:pgNumType\");\n    this.root.push(\n      new PageNumberTypeAttributes({\n        start: start === void 0 ? void 0 : decimalNumber(start),\n        formatType,\n        separator\n      })\n    );\n  }\n}\nconst PageOrientation = {\n  PORTRAIT: \"portrait\",\n  LANDSCAPE: \"landscape\"\n};\nclass PageSize extends XmlComponent {\n  constructor(width, height, orientation) {\n    super(\"w:pgSz\");\n    const flip = orientation === PageOrientation.LANDSCAPE;\n    const widthTwips = twipsMeasureValue(width);\n    const heightTwips = twipsMeasureValue(height);\n    this.root.push(\n      new NextAttributeComponent({\n        width: { key: \"w:w\", value: flip ? heightTwips : widthTwips },\n        height: { key: \"w:h\", value: flip ? widthTwips : heightTwips },\n        orientation: { key: \"w:orient\", value: orientation }\n      })\n    );\n  }\n}\nconst PageTextDirectionType = {\n  LEFT_TO_RIGHT_TOP_TO_BOTTOM: \"lrTb\",\n  TOP_TO_BOTTOM_RIGHT_TO_LEFT: \"tbRl\"\n};\nclass PageTextDirectionAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { val: \"w:val\" });\n  }\n}\nclass PageTextDirection extends XmlComponent {\n  constructor(value) {\n    super(\"w:textDirection\");\n    this.root.push(\n      new PageTextDirectionAttributes({\n        val: value\n      })\n    );\n  }\n}\nconst SectionType = {\n  NEXT_PAGE: \"nextPage\",\n  NEXT_COLUMN: \"nextColumn\",\n  CONTINUOUS: \"continuous\",\n  EVEN_PAGE: \"evenPage\",\n  ODD_PAGE: \"oddPage\"\n};\nclass SectionTypeAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      val: \"w:val\"\n    });\n  }\n}\nclass Type extends XmlComponent {\n  constructor(value) {\n    super(\"w:type\");\n    this.root.push(new SectionTypeAttributes({ val: value }));\n  }\n}\nconst sectionMarginDefaults = {\n  TOP: 1440,\n  RIGHT: 1440,\n  BOTTOM: 1440,\n  LEFT: 1440,\n  HEADER: 708,\n  FOOTER: 708,\n  GUTTER: 0\n};\nconst sectionPageSizeDefaults = {\n  WIDTH: 11906,\n  HEIGHT: 16838,\n  ORIENTATION: PageOrientation.PORTRAIT\n};\nclass SectionProperties extends XmlComponent {\n  constructor({\n    page: {\n      size: {\n        width = sectionPageSizeDefaults.WIDTH,\n        height = sectionPageSizeDefaults.HEIGHT,\n        orientation = sectionPageSizeDefaults.ORIENTATION\n      } = {},\n      margin: {\n        top = sectionMarginDefaults.TOP,\n        right = sectionMarginDefaults.RIGHT,\n        bottom = sectionMarginDefaults.BOTTOM,\n        left = sectionMarginDefaults.LEFT,\n        header = sectionMarginDefaults.HEADER,\n        footer = sectionMarginDefaults.FOOTER,\n        gutter = sectionMarginDefaults.GUTTER\n      } = {},\n      pageNumbers = {},\n      borders,\n      textDirection\n    } = {},\n    grid: { linePitch = 360, charSpace, type: gridType } = {},\n    headerWrapperGroup = {},\n    footerWrapperGroup = {},\n    lineNumbers,\n    titlePage,\n    verticalAlign,\n    column,\n    type: type2\n  } = {}) {\n    super(\"w:sectPr\");\n    this.addHeaderFooterGroup(HeaderFooterType.HEADER, headerWrapperGroup);\n    this.addHeaderFooterGroup(HeaderFooterType.FOOTER, footerWrapperGroup);\n    if (type2) {\n      this.root.push(new Type(type2));\n    }\n    this.root.push(new PageSize(width, height, orientation));\n    this.root.push(new PageMargin(top, right, bottom, left, header, footer, gutter));\n    if (borders) {\n      this.root.push(new PageBorders(borders));\n    }\n    if (lineNumbers) {\n      this.root.push(createLineNumberType(lineNumbers));\n    }\n    this.root.push(new PageNumberType(pageNumbers));\n    if (column) {\n      this.root.push(new Columns(column));\n    }\n    if (verticalAlign) {\n      this.root.push(new VerticalAlignElement(verticalAlign));\n    }\n    if (titlePage !== void 0) {\n      this.root.push(new OnOffElement(\"w:titlePg\", titlePage));\n    }\n    if (textDirection) {\n      this.root.push(new PageTextDirection(textDirection));\n    }\n    this.root.push(new DocumentGrid(linePitch, charSpace, gridType));\n  }\n  addHeaderFooterGroup(type2, group) {\n    if (group.default) {\n      this.root.push(\n        new HeaderFooterReference(type2, {\n          type: HeaderFooterReferenceType.DEFAULT,\n          id: group.default.View.ReferenceId\n        })\n      );\n    }\n    if (group.first) {\n      this.root.push(\n        new HeaderFooterReference(type2, {\n          type: HeaderFooterReferenceType.FIRST,\n          id: group.first.View.ReferenceId\n        })\n      );\n    }\n    if (group.even) {\n      this.root.push(\n        new HeaderFooterReference(type2, {\n          type: HeaderFooterReferenceType.EVEN,\n          id: group.even.View.ReferenceId\n        })\n      );\n    }\n  }\n}\nclass Body extends XmlComponent {\n  constructor() {\n    super(\"w:body\");\n    // eslint-disable-next-line functional/prefer-readonly-type\n    __publicField(this, \"sections\", []);\n  }\n  /**\n   * Adds new section properties.\n   * Note: Previous section is created in paragraph after the current element, and then new section will be added.\n   * The spec says:\n   *  - section element should be in the last paragraph of the section\n   *  - last section should be direct child of body\n   *\n   * @param options new section options\n   */\n  addSection(options2) {\n    const currentSection = this.sections.pop();\n    this.root.push(this.createSectionParagraph(currentSection));\n    this.sections.push(new SectionProperties(options2));\n  }\n  prepForXml(context) {\n    if (this.sections.length === 1) {\n      this.root.splice(0, 1);\n      this.root.push(this.sections.pop());\n    }\n    return super.prepForXml(context);\n  }\n  push(component) {\n    this.root.push(component);\n  }\n  createSectionParagraph(section) {\n    const paragraph = new Paragraph({});\n    const properties = new ParagraphProperties({});\n    properties.push(section);\n    paragraph.addChildElement(properties);\n    return paragraph;\n  }\n}\nclass Column extends XmlComponent {\n  constructor({ width, space }) {\n    super(\"w:col\");\n    this.root.push(\n      new NextAttributeComponent({\n        width: { key: \"w:w\", value: twipsMeasureValue(width) },\n        space: { key: \"w:space\", value: space === void 0 ? void 0 : twipsMeasureValue(space) }\n      })\n    );\n  }\n}\nclass DocumentAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      wpc: \"xmlns:wpc\",\n      mc: \"xmlns:mc\",\n      o: \"xmlns:o\",\n      r: \"xmlns:r\",\n      m: \"xmlns:m\",\n      v: \"xmlns:v\",\n      wp14: \"xmlns:wp14\",\n      wp: \"xmlns:wp\",\n      w10: \"xmlns:w10\",\n      w: \"xmlns:w\",\n      w14: \"xmlns:w14\",\n      w15: \"xmlns:w15\",\n      wpg: \"xmlns:wpg\",\n      wpi: \"xmlns:wpi\",\n      wne: \"xmlns:wne\",\n      wps: \"xmlns:wps\",\n      Ignorable: \"mc:Ignorable\",\n      cp: \"xmlns:cp\",\n      dc: \"xmlns:dc\",\n      dcterms: \"xmlns:dcterms\",\n      dcmitype: \"xmlns:dcmitype\",\n      xsi: \"xmlns:xsi\",\n      type: \"xsi:type\",\n      cx: \"xmlns:cx\",\n      cx1: \"xmlns:cx1\",\n      cx2: \"xmlns:cx2\",\n      cx3: \"xmlns:cx3\",\n      cx4: \"xmlns:cx4\",\n      cx5: \"xmlns:cx5\",\n      cx6: \"xmlns:cx6\",\n      cx7: \"xmlns:cx7\",\n      cx8: \"xmlns:cx8\",\n      aink: \"xmlns:aink\",\n      am3d: \"xmlns:am3d\",\n      w16cex: \"xmlns:w16cex\",\n      w16cid: \"xmlns:w16cid\",\n      w16: \"xmlns:w16\",\n      w16sdtdh: \"xmlns:w16sdtdh\",\n      w16se: \"xmlns:w16se\"\n    });\n  }\n}\nclass DocumentBackgroundAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      color: \"w:color\",\n      themeColor: \"w:themeColor\",\n      themeShade: \"w:themeShade\",\n      themeTint: \"w:themeTint\"\n    });\n  }\n}\nclass DocumentBackground extends XmlComponent {\n  constructor(options2) {\n    super(\"w:background\");\n    this.root.push(\n      new DocumentBackgroundAttributes({\n        color: options2.color === void 0 ? void 0 : hexColorValue(options2.color),\n        themeColor: options2.themeColor,\n        themeShade: options2.themeShade === void 0 ? void 0 : uCharHexNumber(options2.themeShade),\n        themeTint: options2.themeTint === void 0 ? void 0 : uCharHexNumber(options2.themeTint)\n      })\n    );\n  }\n}\nclass Document extends XmlComponent {\n  constructor(options2) {\n    super(\"w:document\");\n    __publicField(this, \"body\");\n    this.root.push(\n      new DocumentAttributes({\n        wpc: \"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\",\n        mc: \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\n        o: \"urn:schemas-microsoft-com:office:office\",\n        r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\",\n        m: \"http://schemas.openxmlformats.org/officeDocument/2006/math\",\n        v: \"urn:schemas-microsoft-com:vml\",\n        wp14: \"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\",\n        wp: \"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\",\n        w10: \"urn:schemas-microsoft-com:office:word\",\n        w: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\n        w14: \"http://schemas.microsoft.com/office/word/2010/wordml\",\n        w15: \"http://schemas.microsoft.com/office/word/2012/wordml\",\n        wpg: \"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\",\n        wpi: \"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\",\n        wne: \"http://schemas.microsoft.com/office/word/2006/wordml\",\n        wps: \"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\",\n        cx: \"http://schemas.microsoft.com/office/drawing/2014/chartex\",\n        cx1: \"http://schemas.microsoft.com/office/drawing/2015/9/8/chartex\",\n        cx2: \"http://schemas.microsoft.com/office/drawing/2015/10/21/chartex\",\n        cx3: \"http://schemas.microsoft.com/office/drawing/2016/5/9/chartex\",\n        cx4: \"http://schemas.microsoft.com/office/drawing/2016/5/10/chartex\",\n        cx5: \"http://schemas.microsoft.com/office/drawing/2016/5/11/chartex\",\n        cx6: \"http://schemas.microsoft.com/office/drawing/2016/5/12/chartex\",\n        cx7: \"http://schemas.microsoft.com/office/drawing/2016/5/13/chartex\",\n        cx8: \"http://schemas.microsoft.com/office/drawing/2016/5/14/chartex\",\n        aink: \"http://schemas.microsoft.com/office/drawing/2016/ink\",\n        am3d: \"http://schemas.microsoft.com/office/drawing/2017/model3d\",\n        w16cex: \"http://schemas.microsoft.com/office/word/2018/wordml/cex\",\n        w16cid: \"http://schemas.microsoft.com/office/word/2016/wordml/cid\",\n        w16: \"http://schemas.microsoft.com/office/word/2018/wordml\",\n        w16sdtdh: \"http://schemas.microsoft.com/office/word/2020/wordml/sdtdatahash\",\n        w16se: \"http://schemas.microsoft.com/office/word/2015/wordml/symex\",\n        Ignorable: \"w14 w15 wp14\"\n      })\n    );\n    this.body = new Body();\n    if (options2.background) {\n      this.root.push(new DocumentBackground(options2.background));\n    }\n    this.root.push(this.body);\n  }\n  add(item) {\n    this.body.push(item);\n    return this;\n  }\n  get Body() {\n    return this.body;\n  }\n}\nclass RelationshipsAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      xmlns: \"xmlns\"\n    });\n  }\n}\nclass Relationships extends XmlComponent {\n  constructor() {\n    super(\"Relationships\");\n    this.root.push(\n      new RelationshipsAttributes({\n        xmlns: \"http://schemas.openxmlformats.org/package/2006/relationships\"\n      })\n    );\n  }\n  createRelationship(id, type2, target, targetMode) {\n    const relationship = new Relationship(`rId${id}`, type2, target, targetMode);\n    this.root.push(relationship);\n    return relationship;\n  }\n  get RelationshipCount() {\n    return this.root.length - 1;\n  }\n}\nclass DocumentWrapper {\n  constructor(options2) {\n    __publicField(this, \"document\");\n    __publicField(this, \"relationships\");\n    this.document = new Document(options2);\n    this.relationships = new Relationships();\n  }\n  get View() {\n    return this.document;\n  }\n  get Relationships() {\n    return this.relationships;\n  }\n}\nclass WordWrapAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { val: \"w:val\" });\n  }\n}\nclass WordWrap extends XmlComponent {\n  constructor() {\n    super(\"w:wordWrap\");\n    this.root.push(new WordWrapAttributes({ val: 0 }));\n  }\n}\nconst DropCapType = {\n  NONE: \"none\",\n  DROP: \"drop\",\n  MARGIN: \"margin\"\n};\nconst FrameAnchorType = {\n  MARGIN: \"margin\",\n  PAGE: \"page\",\n  TEXT: \"text\"\n};\nconst FrameWrap = {\n  AROUND: \"around\",\n  AUTO: \"auto\",\n  NONE: \"none\",\n  NOT_BESIDE: \"notBeside\",\n  THROUGH: \"through\",\n  TIGHT: \"tight\"\n};\nconst createFrameProperties = (options2) => {\n  var _a, _b;\n  return new BuilderElement({\n    name: \"w:framePr\",\n    attributes: {\n      anchorLock: {\n        key: \"w:anchorLock\",\n        value: options2.anchorLock\n      },\n      dropCap: {\n        key: \"w:dropCap\",\n        value: options2.dropCap\n      },\n      width: {\n        key: \"w:w\",\n        value: options2.width\n      },\n      height: {\n        key: \"w:h\",\n        value: options2.height\n      },\n      x: {\n        key: \"w:x\",\n        value: options2.position ? options2.position.x : void 0\n      },\n      y: {\n        key: \"w:y\",\n        value: options2.position ? options2.position.y : void 0\n      },\n      anchorHorizontal: {\n        key: \"w:hAnchor\",\n        value: options2.anchor.horizontal\n      },\n      anchorVertical: {\n        key: \"w:vAnchor\",\n        value: options2.anchor.vertical\n      },\n      spaceHorizontal: {\n        key: \"w:hSpace\",\n        value: (_a = options2.space) == null ? void 0 : _a.horizontal\n      },\n      spaceVertical: {\n        key: \"w:vSpace\",\n        value: (_b = options2.space) == null ? void 0 : _b.vertical\n      },\n      rule: {\n        key: \"w:hRule\",\n        value: options2.rule\n      },\n      alignmentX: {\n        key: \"w:xAlign\",\n        value: options2.alignment ? options2.alignment.x : void 0\n      },\n      alignmentY: {\n        key: \"w:yAlign\",\n        value: options2.alignment ? options2.alignment.y : void 0\n      },\n      lines: {\n        key: \"w:lines\",\n        value: options2.lines\n      },\n      wrap: {\n        key: \"w:wrap\",\n        value: options2.wrap\n      }\n    }\n  });\n};\nclass ParagraphProperties extends IgnoreIfEmptyXmlComponent {\n  constructor(options2) {\n    var _a, _b;\n    super(\"w:pPr\");\n    // eslint-disable-next-line functional/prefer-readonly-type\n    __publicField(this, \"numberingReferences\", []);\n    if (!options2) {\n      return this;\n    }\n    if (options2.heading) {\n      this.push(new Style$1(options2.heading));\n    }\n    if (options2.bullet) {\n      this.push(new Style$1(\"ListParagraph\"));\n    }\n    if (options2.numbering) {\n      if (!options2.style && !options2.heading) {\n        if (!options2.numbering.custom) {\n          this.push(new Style$1(\"ListParagraph\"));\n        }\n      }\n    }\n    if (options2.style) {\n      this.push(new Style$1(options2.style));\n    }\n    if (options2.keepNext !== void 0) {\n      this.push(new OnOffElement(\"w:keepNext\", options2.keepNext));\n    }\n    if (options2.keepLines !== void 0) {\n      this.push(new OnOffElement(\"w:keepLines\", options2.keepLines));\n    }\n    if (options2.pageBreakBefore) {\n      this.push(new PageBreakBefore());\n    }\n    if (options2.frame) {\n      this.push(createFrameProperties(options2.frame));\n    }\n    if (options2.widowControl !== void 0) {\n      this.push(new OnOffElement(\"w:widowControl\", options2.widowControl));\n    }\n    if (options2.bullet) {\n      this.push(new NumberProperties(1, options2.bullet.level));\n    }\n    if (options2.numbering) {\n      this.numberingReferences.push({\n        reference: options2.numbering.reference,\n        instance: (_a = options2.numbering.instance) != null ? _a : 0\n      });\n      this.push(new NumberProperties(`${options2.numbering.reference}-${(_b = options2.numbering.instance) != null ? _b : 0}`, options2.numbering.level));\n    } else if (options2.numbering === false) {\n      this.push(new NumberProperties(0, 0));\n    }\n    if (options2.border) {\n      this.push(new Border(options2.border));\n    }\n    if (options2.thematicBreak) {\n      this.push(new ThematicBreak());\n    }\n    if (options2.shading) {\n      this.push(new Shading(options2.shading));\n    }\n    if (options2.wordWrap) {\n      this.push(new WordWrap());\n    }\n    if (options2.overflowPunctuation) {\n      this.push(new OnOffElement(\"w:overflowPunct\", options2.overflowPunctuation));\n    }\n    const tabDefinitions = [\n      ...options2.rightTabStop !== void 0 ? [{ type: TabStopType.RIGHT, position: options2.rightTabStop }] : [],\n      ...options2.tabStops ? options2.tabStops : [],\n      ...options2.leftTabStop !== void 0 ? [{ type: TabStopType.LEFT, position: options2.leftTabStop }] : []\n    ];\n    if (tabDefinitions.length > 0) {\n      this.push(new TabStop(tabDefinitions));\n    }\n    if (options2.bidirectional !== void 0) {\n      this.push(new OnOffElement(\"w:bidi\", options2.bidirectional));\n    }\n    if (options2.spacing) {\n      this.push(new Spacing(options2.spacing));\n    }\n    if (options2.indent) {\n      this.push(new Indent(options2.indent));\n    }\n    if (options2.contextualSpacing !== void 0) {\n      this.push(new OnOffElement(\"w:contextualSpacing\", options2.contextualSpacing));\n    }\n    if (options2.alignment) {\n      this.push(new Alignment(options2.alignment));\n    }\n    if (options2.outlineLevel !== void 0) {\n      this.push(new OutlineLevel(options2.outlineLevel));\n    }\n    if (options2.suppressLineNumbers !== void 0) {\n      this.push(new OnOffElement(\"w:suppressLineNumbers\", options2.suppressLineNumbers));\n    }\n    if (options2.autoSpaceEastAsianText !== void 0) {\n      this.push(new OnOffElement(\"w:autoSpaceDN\", options2.autoSpaceEastAsianText));\n    }\n    if (options2.run) {\n      this.push(new RunProperties(options2.run));\n    }\n  }\n  push(item) {\n    this.root.push(item);\n  }\n  prepForXml(context) {\n    if (context.viewWrapper instanceof DocumentWrapper) {\n      for (const reference of this.numberingReferences) {\n        context.file.Numbering.createConcreteNumberingInstance(reference.reference, reference.instance);\n      }\n    }\n    return super.prepForXml(context);\n  }\n}\nclass Paragraph extends FileChild {\n  constructor(options2) {\n    super(\"w:p\");\n    __publicField(this, \"properties\");\n    if (typeof options2 === \"string\") {\n      this.properties = new ParagraphProperties({});\n      this.root.push(this.properties);\n      this.root.push(new TextRun(options2));\n      return this;\n    }\n    this.properties = new ParagraphProperties(options2);\n    this.root.push(this.properties);\n    if (options2.text) {\n      this.root.push(new TextRun(options2.text));\n    }\n    if (options2.children) {\n      for (const child of options2.children) {\n        if (child instanceof Bookmark) {\n          this.root.push(child.start);\n          for (const textRun of child.children) {\n            this.root.push(textRun);\n          }\n          this.root.push(child.end);\n          continue;\n        }\n        this.root.push(child);\n      }\n    }\n  }\n  prepForXml(context) {\n    for (const element2 of this.root) {\n      if (element2 instanceof ExternalHyperlink) {\n        const index = this.root.indexOf(element2);\n        const concreteHyperlink = new ConcreteHyperlink(element2.options.children, uniqueId());\n        context.viewWrapper.Relationships.createRelationship(\n          concreteHyperlink.linkId,\n          \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\",\n          element2.options.link,\n          TargetModeType.EXTERNAL\n        );\n        this.root[index] = concreteHyperlink;\n      }\n    }\n    return super.prepForXml(context);\n  }\n  addRunToFront(run) {\n    this.root.splice(1, 0, run);\n    return this;\n  }\n}\nlet Math$1 = class Math2 extends XmlComponent {\n  constructor(options2) {\n    super(\"m:oMath\");\n    for (const child of options2.children) {\n      this.root.push(child);\n    }\n  }\n};\nclass MathText extends XmlComponent {\n  constructor(text) {\n    super(\"m:t\");\n    this.root.push(text);\n  }\n}\nclass MathRun extends XmlComponent {\n  constructor(text) {\n    super(\"m:r\");\n    this.root.push(new MathText(text));\n  }\n}\nclass MathDenominator extends XmlComponent {\n  constructor(children) {\n    super(\"m:den\");\n    for (const child of children) {\n      this.root.push(child);\n    }\n  }\n}\nclass MathNumerator extends XmlComponent {\n  constructor(children) {\n    super(\"m:num\");\n    for (const child of children) {\n      this.root.push(child);\n    }\n  }\n}\nclass MathFraction extends XmlComponent {\n  constructor(options2) {\n    super(\"m:f\");\n    this.root.push(new MathNumerator(options2.numerator));\n    this.root.push(new MathDenominator(options2.denominator));\n  }\n}\nclass MathAccentCharacterAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { accent: \"m:val\" });\n  }\n}\nclass MathAccentCharacter extends XmlComponent {\n  constructor(accent) {\n    super(\"m:chr\");\n    this.root.push(new MathAccentCharacterAttributes({ accent }));\n  }\n}\nclass MathBase extends XmlComponent {\n  constructor(children) {\n    super(\"m:e\");\n    for (const child of children) {\n      this.root.push(child);\n    }\n  }\n}\nclass MathLimitLocationAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { value: \"m:val\" });\n  }\n}\nclass MathLimitLocation extends XmlComponent {\n  constructor(value) {\n    super(\"m:limLoc\");\n    this.root.push(new MathLimitLocationAttributes({ value: value || \"undOvr\" }));\n  }\n}\nclass MathSubScriptHideAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { hide: \"m:val\" });\n  }\n}\nclass MathSubScriptHide extends XmlComponent {\n  constructor() {\n    super(\"m:subHide\");\n    this.root.push(new MathSubScriptHideAttributes({ hide: 1 }));\n  }\n}\nclass MathSuperScriptHideAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { hide: \"m:val\" });\n  }\n}\nclass MathSuperScriptHide extends XmlComponent {\n  constructor() {\n    super(\"m:supHide\");\n    this.root.push(new MathSuperScriptHideAttributes({ hide: 1 }));\n  }\n}\nclass MathNAryProperties extends XmlComponent {\n  constructor(accent, hasSuperScript, hasSubScript, limitLocationVal) {\n    super(\"m:naryPr\");\n    if (!!accent) {\n      this.root.push(new MathAccentCharacter(accent));\n    }\n    this.root.push(new MathLimitLocation(limitLocationVal));\n    if (!hasSuperScript) {\n      this.root.push(new MathSuperScriptHide());\n    }\n    if (!hasSubScript) {\n      this.root.push(new MathSubScriptHide());\n    }\n  }\n}\nclass MathSubScriptElement extends XmlComponent {\n  constructor(children) {\n    super(\"m:sub\");\n    for (const child of children) {\n      this.root.push(child);\n    }\n  }\n}\nclass MathSuperScriptElement extends XmlComponent {\n  constructor(children) {\n    super(\"m:sup\");\n    for (const child of children) {\n      this.root.push(child);\n    }\n  }\n}\nclass MathSum extends XmlComponent {\n  constructor(options2) {\n    super(\"m:nary\");\n    this.root.push(new MathNAryProperties(\"∑\", !!options2.superScript, !!options2.subScript));\n    if (!!options2.subScript) {\n      this.root.push(new MathSubScriptElement(options2.subScript));\n    }\n    if (!!options2.superScript) {\n      this.root.push(new MathSuperScriptElement(options2.superScript));\n    }\n    this.root.push(new MathBase(options2.children));\n  }\n}\nclass MathIntegral extends XmlComponent {\n  constructor(options2) {\n    super(\"m:nary\");\n    this.root.push(new MathNAryProperties(\"\", !!options2.superScript, !!options2.subScript, \"subSup\"));\n    if (!!options2.subScript) {\n      this.root.push(new MathSubScriptElement(options2.subScript));\n    }\n    if (!!options2.superScript) {\n      this.root.push(new MathSuperScriptElement(options2.superScript));\n    }\n    this.root.push(new MathBase(options2.children));\n  }\n}\nclass MathLimit extends XmlComponent {\n  constructor(children) {\n    super(\"m:lim\");\n    for (const child of children) {\n      this.root.push(child);\n    }\n  }\n}\nclass MathLimitUpper extends XmlComponent {\n  constructor(options2) {\n    super(\"m:limUpp\");\n    this.root.push(new MathBase(options2.children));\n    this.root.push(new MathLimit(options2.limit));\n  }\n}\nclass MathLimitLower extends XmlComponent {\n  constructor(options2) {\n    super(\"m:limLow\");\n    this.root.push(new MathBase(options2.children));\n    this.root.push(new MathLimit(options2.limit));\n  }\n}\nclass MathSuperScriptProperties extends XmlComponent {\n  constructor() {\n    super(\"m:sSupPr\");\n  }\n}\nclass MathSuperScript extends XmlComponent {\n  constructor(options2) {\n    super(\"m:sSup\");\n    this.root.push(new MathSuperScriptProperties());\n    this.root.push(new MathBase(options2.children));\n    this.root.push(new MathSuperScriptElement(options2.superScript));\n  }\n}\nclass MathSubScriptProperties extends XmlComponent {\n  constructor() {\n    super(\"m:sSubPr\");\n  }\n}\nclass MathSubScript extends XmlComponent {\n  constructor(options2) {\n    super(\"m:sSub\");\n    this.root.push(new MathSubScriptProperties());\n    this.root.push(new MathBase(options2.children));\n    this.root.push(new MathSubScriptElement(options2.subScript));\n  }\n}\nclass MathSubSuperScriptProperties extends XmlComponent {\n  constructor() {\n    super(\"m:sSubSupPr\");\n  }\n}\nclass MathSubSuperScript extends XmlComponent {\n  constructor(options2) {\n    super(\"m:sSubSup\");\n    this.root.push(new MathSubSuperScriptProperties());\n    this.root.push(new MathBase(options2.children));\n    this.root.push(new MathSubScriptElement(options2.subScript));\n    this.root.push(new MathSuperScriptElement(options2.superScript));\n  }\n}\nclass MathPreSubSuperScriptProperties extends XmlComponent {\n  constructor() {\n    super(\"m:sPrePr\");\n  }\n}\nclass MathPreSubSuperScript extends XmlComponent {\n  constructor(options2) {\n    super(\"m:sPre\");\n    this.root.push(new MathPreSubSuperScriptProperties());\n    this.root.push(new MathBase(options2.children));\n    this.root.push(new MathSubScriptElement(options2.subScript));\n    this.root.push(new MathSuperScriptElement(options2.superScript));\n  }\n}\nconst WORKAROUND4 = \"\";\nclass MathDegree extends XmlComponent {\n  constructor(children) {\n    super(\"m:deg\");\n    if (!!children) {\n      for (const child of children) {\n        this.root.push(child);\n      }\n    }\n  }\n}\nclass MathDegreeHideAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { hide: \"m:val\" });\n  }\n}\nclass MathDegreeHide extends XmlComponent {\n  constructor() {\n    super(\"m:degHide\");\n    this.root.push(new MathDegreeHideAttributes({ hide: 1 }));\n  }\n}\nclass MathRadicalProperties extends XmlComponent {\n  constructor(hasDegree) {\n    super(\"m:radPr\");\n    if (!hasDegree) {\n      this.root.push(new MathDegreeHide());\n    }\n  }\n}\nclass MathRadical extends XmlComponent {\n  constructor(options2) {\n    super(\"m:rad\");\n    this.root.push(new MathRadicalProperties(!!options2.degree));\n    this.root.push(new MathDegree(options2.degree));\n    this.root.push(new MathBase(options2.children));\n  }\n}\nclass MathFunctionName extends XmlComponent {\n  constructor(children) {\n    super(\"m:fName\");\n    for (const child of children) {\n      this.root.push(child);\n    }\n  }\n}\nclass MathFunctionProperties extends XmlComponent {\n  constructor() {\n    super(\"m:funcPr\");\n  }\n}\nclass MathFunction extends XmlComponent {\n  constructor(options2) {\n    super(\"m:func\");\n    this.root.push(new MathFunctionProperties());\n    this.root.push(new MathFunctionName(options2.name));\n    this.root.push(new MathBase(options2.children));\n  }\n}\nclass MathBeginningCharacterAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { character: \"m:val\" });\n  }\n}\nclass MathBeginningCharacter extends XmlComponent {\n  constructor(character) {\n    super(\"m:begChr\");\n    this.root.push(new MathBeginningCharacterAttributes({ character }));\n  }\n}\nclass MathEndingCharacterAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { character: \"m:val\" });\n  }\n}\nclass MathEndingCharacter extends XmlComponent {\n  constructor(character) {\n    super(\"m:endChr\");\n    this.root.push(new MathEndingCharacterAttributes({ character }));\n  }\n}\nclass MathBracketProperties extends XmlComponent {\n  constructor(options2) {\n    super(\"m:dPr\");\n    if (!!options2) {\n      this.root.push(new MathBeginningCharacter(options2.beginningCharacter));\n      this.root.push(new MathEndingCharacter(options2.endingCharacter));\n    }\n  }\n}\nclass MathRoundBrackets extends XmlComponent {\n  constructor(options2) {\n    super(\"m:d\");\n    this.root.push(new MathBracketProperties());\n    this.root.push(new MathBase(options2.children));\n  }\n}\nclass MathSquareBrackets extends XmlComponent {\n  constructor(options2) {\n    super(\"m:d\");\n    this.root.push(\n      new MathBracketProperties({\n        beginningCharacter: \"[\",\n        endingCharacter: \"]\"\n      })\n    );\n    this.root.push(new MathBase(options2.children));\n  }\n}\nclass MathCurlyBrackets extends XmlComponent {\n  constructor(options2) {\n    super(\"m:d\");\n    this.root.push(\n      new MathBracketProperties({\n        beginningCharacter: \"{\",\n        endingCharacter: \"}\"\n      })\n    );\n    this.root.push(new MathBase(options2.children));\n  }\n}\nclass MathAngledBrackets extends XmlComponent {\n  constructor(options2) {\n    super(\"m:d\");\n    this.root.push(\n      new MathBracketProperties({\n        beginningCharacter: \"〈\",\n        endingCharacter: \"〉\"\n      })\n    );\n    this.root.push(new MathBase(options2.children));\n  }\n}\nclass TableGrid extends XmlComponent {\n  constructor(widths) {\n    super(\"w:tblGrid\");\n    for (const width of widths) {\n      this.root.push(new GridCol(width));\n    }\n  }\n}\nclass GridCol extends XmlComponent {\n  constructor(width) {\n    super(\"w:gridCol\");\n    if (width !== void 0) {\n      this.root.push(\n        new NextAttributeComponent({\n          width: { key: \"w:w\", value: twipsMeasureValue(width) }\n        })\n      );\n    }\n  }\n}\nconst TableCellMarginElementType = {\n  TABLE: \"w:tblCellMar\",\n  TABLE_CELL: \"w:tcMar\"\n};\nclass TableCellMargin extends IgnoreIfEmptyXmlComponent {\n  constructor(type2, { marginUnitType = WidthType.DXA, top, left, bottom, right }) {\n    super(type2);\n    if (top !== void 0) {\n      this.root.push(new TableWidthElement(\"w:top\", { type: marginUnitType, size: top }));\n    }\n    if (left !== void 0) {\n      this.root.push(new TableWidthElement(\"w:left\", { type: marginUnitType, size: left }));\n    }\n    if (bottom !== void 0) {\n      this.root.push(new TableWidthElement(\"w:bottom\", { type: marginUnitType, size: bottom }));\n    }\n    if (right !== void 0) {\n      this.root.push(new TableWidthElement(\"w:right\", { type: marginUnitType, size: right }));\n    }\n  }\n}\nconst WidthType = {\n  /** Auto. */\n  AUTO: \"auto\",\n  /** Value is in twentieths of a point */\n  DXA: \"dxa\",\n  /** No (empty) value. */\n  NIL: \"nil\",\n  /** Value is in percentage. */\n  PERCENTAGE: \"pct\"\n};\nclass TableWidthElement extends XmlComponent {\n  constructor(name, { type: type2 = WidthType.AUTO, size }) {\n    super(name);\n    let tableWidthValue = size;\n    if (type2 === WidthType.PERCENTAGE && typeof size === \"number\") {\n      tableWidthValue = `${size}%`;\n    }\n    this.root.push(\n      new NextAttributeComponent({\n        type: { key: \"w:type\", value: type2 },\n        size: { key: \"w:w\", value: measurementOrPercentValue(tableWidthValue) }\n      })\n    );\n  }\n}\nclass TableCellBorders extends IgnoreIfEmptyXmlComponent {\n  constructor(options2) {\n    super(\"w:tcBorders\");\n    if (options2.top) {\n      this.root.push(new BorderElement(\"w:top\", options2.top));\n    }\n    if (options2.start) {\n      this.root.push(new BorderElement(\"w:start\", options2.start));\n    }\n    if (options2.left) {\n      this.root.push(new BorderElement(\"w:left\", options2.left));\n    }\n    if (options2.bottom) {\n      this.root.push(new BorderElement(\"w:bottom\", options2.bottom));\n    }\n    if (options2.end) {\n      this.root.push(new BorderElement(\"w:end\", options2.end));\n    }\n    if (options2.right) {\n      this.root.push(new BorderElement(\"w:right\", options2.right));\n    }\n  }\n}\nclass GridSpanAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { val: \"w:val\" });\n  }\n}\nclass GridSpan extends XmlComponent {\n  constructor(value) {\n    super(\"w:gridSpan\");\n    this.root.push(\n      new GridSpanAttributes({\n        val: decimalNumber(value)\n      })\n    );\n  }\n}\nconst VerticalMergeType = {\n  /**\n   * Cell that is merged with upper one.\n   */\n  CONTINUE: \"continue\",\n  /**\n   * Cell that is starting the vertical merge.\n   */\n  RESTART: \"restart\"\n};\nclass VerticalMergeAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { val: \"w:val\" });\n  }\n}\nclass VerticalMerge extends XmlComponent {\n  constructor(value) {\n    super(\"w:vMerge\");\n    this.root.push(\n      new VerticalMergeAttributes({\n        val: value\n      })\n    );\n  }\n}\nconst TextDirection = {\n  BOTTOM_TO_TOP_LEFT_TO_RIGHT: \"btLr\",\n  LEFT_TO_RIGHT_TOP_TO_BOTTOM: \"lrTb\",\n  TOP_TO_BOTTOM_RIGHT_TO_LEFT: \"tbRl\"\n};\nclass TDirectionAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { val: \"w:val\" });\n  }\n}\nclass TDirection extends XmlComponent {\n  constructor(value) {\n    super(\"w:textDirection\");\n    this.root.push(\n      new TDirectionAttributes({\n        val: value\n      })\n    );\n  }\n}\nclass TableCellProperties extends IgnoreIfEmptyXmlComponent {\n  constructor(options2) {\n    super(\"w:tcPr\");\n    if (options2.width) {\n      this.root.push(new TableWidthElement(\"w:tcW\", options2.width));\n    }\n    if (options2.columnSpan) {\n      this.root.push(new GridSpan(options2.columnSpan));\n    }\n    if (options2.verticalMerge) {\n      this.root.push(new VerticalMerge(options2.verticalMerge));\n    } else if (options2.rowSpan && options2.rowSpan > 1) {\n      this.root.push(new VerticalMerge(VerticalMergeType.RESTART));\n    }\n    if (options2.borders) {\n      this.root.push(new TableCellBorders(options2.borders));\n    }\n    if (options2.shading) {\n      this.root.push(new Shading(options2.shading));\n    }\n    if (options2.margins) {\n      this.root.push(new TableCellMargin(TableCellMarginElementType.TABLE_CELL, options2.margins));\n    }\n    if (options2.textDirection) {\n      this.root.push(new TDirection(options2.textDirection));\n    }\n    if (options2.verticalAlign) {\n      this.root.push(new VerticalAlignElement(options2.verticalAlign));\n    }\n  }\n}\nclass TableCell extends XmlComponent {\n  constructor(options2) {\n    super(\"w:tc\");\n    this.options = options2;\n    this.root.push(new TableCellProperties(options2));\n    for (const child of options2.children) {\n      this.root.push(child);\n    }\n  }\n  prepForXml(context) {\n    if (!(this.root[this.root.length - 1] instanceof Paragraph)) {\n      this.root.push(new Paragraph({}));\n    }\n    return super.prepForXml(context);\n  }\n}\nconst NONE_BORDER = {\n  style: BorderStyle.NONE,\n  size: 0,\n  color: \"auto\"\n};\nconst DEFAULT_BORDER = {\n  style: BorderStyle.SINGLE,\n  size: 4,\n  color: \"auto\"\n};\nclass TableBorders extends XmlComponent {\n  constructor(options2) {\n    super(\"w:tblBorders\");\n    if (options2.top) {\n      this.root.push(new BorderElement(\"w:top\", options2.top));\n    } else {\n      this.root.push(new BorderElement(\"w:top\", DEFAULT_BORDER));\n    }\n    if (options2.left) {\n      this.root.push(new BorderElement(\"w:left\", options2.left));\n    } else {\n      this.root.push(new BorderElement(\"w:left\", DEFAULT_BORDER));\n    }\n    if (options2.bottom) {\n      this.root.push(new BorderElement(\"w:bottom\", options2.bottom));\n    } else {\n      this.root.push(new BorderElement(\"w:bottom\", DEFAULT_BORDER));\n    }\n    if (options2.right) {\n      this.root.push(new BorderElement(\"w:right\", options2.right));\n    } else {\n      this.root.push(new BorderElement(\"w:right\", DEFAULT_BORDER));\n    }\n    if (options2.insideHorizontal) {\n      this.root.push(new BorderElement(\"w:insideH\", options2.insideHorizontal));\n    } else {\n      this.root.push(new BorderElement(\"w:insideH\", DEFAULT_BORDER));\n    }\n    if (options2.insideVertical) {\n      this.root.push(new BorderElement(\"w:insideV\", options2.insideVertical));\n    } else {\n      this.root.push(new BorderElement(\"w:insideV\", DEFAULT_BORDER));\n    }\n  }\n}\n__publicField(TableBorders, \"NONE\", {\n  top: NONE_BORDER,\n  bottom: NONE_BORDER,\n  left: NONE_BORDER,\n  right: NONE_BORDER,\n  insideHorizontal: NONE_BORDER,\n  insideVertical: NONE_BORDER\n});\nconst TableAnchorType = {\n  MARGIN: \"margin\",\n  PAGE: \"page\",\n  TEXT: \"text\"\n};\nconst RelativeHorizontalPosition = {\n  CENTER: \"center\",\n  INSIDE: \"inside\",\n  LEFT: \"left\",\n  OUTSIDE: \"outside\",\n  RIGHT: \"right\"\n};\nconst RelativeVerticalPosition = {\n  CENTER: \"center\",\n  INSIDE: \"inside\",\n  BOTTOM: \"bottom\",\n  OUTSIDE: \"outside\",\n  INLINE: \"inline\",\n  TOP: \"top\"\n};\nconst OverlapType = {\n  NEVER: \"never\",\n  OVERLAP: \"overlap\"\n};\nclass TableFloatProperties extends XmlComponent {\n  constructor({\n    horizontalAnchor,\n    verticalAnchor,\n    absoluteHorizontalPosition,\n    relativeHorizontalPosition,\n    absoluteVerticalPosition,\n    relativeVerticalPosition,\n    bottomFromText,\n    topFromText,\n    leftFromText,\n    rightFromText,\n    overlap\n  }) {\n    super(\"w:tblpPr\");\n    this.root.push(\n      new NextAttributeComponent({\n        leftFromText: {\n          key: \"w:leftFromText\",\n          value: leftFromText === void 0 ? void 0 : twipsMeasureValue(leftFromText)\n        },\n        rightFromText: {\n          key: \"w:rightFromText\",\n          value: rightFromText === void 0 ? void 0 : twipsMeasureValue(rightFromText)\n        },\n        topFromText: {\n          key: \"w:topFromText\",\n          value: topFromText === void 0 ? void 0 : twipsMeasureValue(topFromText)\n        },\n        bottomFromText: {\n          key: \"w:bottomFromText\",\n          value: bottomFromText === void 0 ? void 0 : twipsMeasureValue(bottomFromText)\n        },\n        absoluteHorizontalPosition: {\n          key: \"w:tblpX\",\n          value: absoluteHorizontalPosition === void 0 ? void 0 : signedTwipsMeasureValue(absoluteHorizontalPosition)\n        },\n        absoluteVerticalPosition: {\n          key: \"w:tblpY\",\n          value: absoluteVerticalPosition === void 0 ? void 0 : signedTwipsMeasureValue(absoluteVerticalPosition)\n        },\n        horizontalAnchor: {\n          key: \"w:horzAnchor\",\n          value: horizontalAnchor === void 0 ? void 0 : horizontalAnchor\n        },\n        relativeHorizontalPosition: {\n          key: \"w:tblpXSpec\",\n          value: relativeHorizontalPosition\n        },\n        relativeVerticalPosition: {\n          key: \"w:tblpYSpec\",\n          value: relativeVerticalPosition\n        },\n        verticalAnchor: {\n          key: \"w:vertAnchor\",\n          value: verticalAnchor\n        }\n      })\n    );\n    if (overlap) {\n      this.root.push(new StringEnumValueElement(\"w:tblOverlap\", overlap));\n    }\n  }\n}\nconst TableLayoutType = {\n  AUTOFIT: \"autofit\",\n  FIXED: \"fixed\"\n};\nclass TableLayoutAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { type: \"w:type\" });\n  }\n}\nclass TableLayout extends XmlComponent {\n  constructor(type2) {\n    super(\"w:tblLayout\");\n    this.root.push(new TableLayoutAttributes({ type: type2 }));\n  }\n}\nclass TableProperties extends IgnoreIfEmptyXmlComponent {\n  constructor(options2) {\n    super(\"w:tblPr\");\n    if (options2.style) {\n      this.root.push(new StringValueElement(\"w:tblStyle\", options2.style));\n    }\n    if (options2.float) {\n      this.root.push(new TableFloatProperties(options2.float));\n    }\n    if (options2.visuallyRightToLeft !== void 0) {\n      this.root.push(new OnOffElement(\"w:bidiVisual\", options2.visuallyRightToLeft));\n    }\n    if (options2.width) {\n      this.root.push(new TableWidthElement(\"w:tblW\", options2.width));\n    }\n    if (options2.alignment) {\n      this.root.push(new Alignment(options2.alignment));\n    }\n    if (options2.indent) {\n      this.root.push(new TableWidthElement(\"w:tblInd\", options2.indent));\n    }\n    if (options2.borders) {\n      this.root.push(new TableBorders(options2.borders));\n    }\n    if (options2.shading) {\n      this.root.push(new Shading(options2.shading));\n    }\n    if (options2.layout) {\n      this.root.push(new TableLayout(options2.layout));\n    }\n    if (options2.cellMargin) {\n      this.root.push(new TableCellMargin(TableCellMarginElementType.TABLE, options2.cellMargin));\n    }\n  }\n}\nclass Table extends FileChild {\n  constructor({\n    rows,\n    width,\n    // eslint-disable-next-line functional/immutable-data\n    columnWidths = Array(Math.max(...rows.map((row) => row.CellCount))).fill(100),\n    margins,\n    indent,\n    float,\n    layout,\n    style,\n    borders,\n    alignment,\n    visuallyRightToLeft\n  }) {\n    super(\"w:tbl\");\n    this.root.push(\n      new TableProperties({\n        borders: borders != null ? borders : {},\n        width: width != null ? width : { size: 100 },\n        indent,\n        float,\n        layout,\n        style,\n        alignment,\n        cellMargin: margins,\n        visuallyRightToLeft\n      })\n    );\n    this.root.push(new TableGrid(columnWidths));\n    for (const row of rows) {\n      this.root.push(row);\n    }\n    rows.forEach((row, rowIndex) => {\n      if (rowIndex === rows.length - 1) {\n        return;\n      }\n      let columnIndex = 0;\n      row.cells.forEach((cell) => {\n        if (cell.options.rowSpan && cell.options.rowSpan > 1) {\n          const continueCell = new TableCell({\n            // the inserted CONTINUE cell has rowSpan, and will be handled when process the next row\n            rowSpan: cell.options.rowSpan - 1,\n            columnSpan: cell.options.columnSpan,\n            borders: cell.options.borders,\n            children: [],\n            verticalMerge: VerticalMergeType.CONTINUE\n          });\n          rows[rowIndex + 1].addCellToColumnIndex(continueCell, columnIndex);\n        }\n        columnIndex += cell.options.columnSpan || 1;\n      });\n    });\n  }\n}\nconst HeightRule = {\n  /** Height is determined based on the content, so value is ignored. */\n  AUTO: \"auto\",\n  /** At least the value specified */\n  ATLEAST: \"atLeast\",\n  /** Exactly the value specified */\n  EXACT: \"exact\"\n};\nclass TableRowHeightAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { value: \"w:val\", rule: \"w:hRule\" });\n  }\n}\nclass TableRowHeight extends XmlComponent {\n  constructor(value, rule) {\n    super(\"w:trHeight\");\n    this.root.push(\n      new TableRowHeightAttributes({\n        value: twipsMeasureValue(value),\n        rule\n      })\n    );\n  }\n}\nclass TableRowProperties extends IgnoreIfEmptyXmlComponent {\n  constructor(options2) {\n    super(\"w:trPr\");\n    if (options2.cantSplit !== void 0) {\n      this.root.push(new OnOffElement(\"w:cantSplit\", options2.cantSplit));\n    }\n    if (options2.tableHeader !== void 0) {\n      this.root.push(new OnOffElement(\"w:tblHeader\", options2.tableHeader));\n    }\n    if (options2.height) {\n      this.root.push(new TableRowHeight(options2.height.value, options2.height.rule));\n    }\n  }\n}\nclass TableRow extends XmlComponent {\n  constructor(options2) {\n    super(\"w:tr\");\n    this.options = options2;\n    this.root.push(new TableRowProperties(options2));\n    for (const child of options2.children) {\n      this.root.push(child);\n    }\n  }\n  get CellCount() {\n    return this.options.children.length;\n  }\n  get cells() {\n    return this.root.filter((xmlComponent) => xmlComponent instanceof TableCell);\n  }\n  addCellToIndex(cell, index) {\n    this.root.splice(index + 1, 0, cell);\n  }\n  addCellToColumnIndex(cell, columnIndex) {\n    const rootIndex = this.columnIndexToRootIndex(columnIndex, true);\n    this.addCellToIndex(cell, rootIndex - 1);\n  }\n  rootIndexToColumnIndex(rootIndex) {\n    if (rootIndex < 1 || rootIndex >= this.root.length) {\n      throw new Error(`cell 'rootIndex' should between 1 to ${this.root.length - 1}`);\n    }\n    let colIdx = 0;\n    for (let rootIdx = 1; rootIdx < rootIndex; rootIdx++) {\n      const cell = this.root[rootIdx];\n      colIdx += cell.options.columnSpan || 1;\n    }\n    return colIdx;\n  }\n  columnIndexToRootIndex(columnIndex, allowEndNewCell = false) {\n    if (columnIndex < 0) {\n      throw new Error(`cell 'columnIndex' should not less than zero`);\n    }\n    let colIdx = 0;\n    let rootIdx = 1;\n    while (colIdx <= columnIndex) {\n      if (rootIdx >= this.root.length) {\n        if (allowEndNewCell) {\n          return this.root.length;\n        } else {\n          throw new Error(`cell 'columnIndex' should not great than ${colIdx - 1}`);\n        }\n      }\n      const cell = this.root[rootIdx];\n      rootIdx += 1;\n      colIdx += cell && cell.options.columnSpan || 1;\n    }\n    return rootIdx - 1;\n  }\n}\nclass AppPropertiesAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      xmlns: \"xmlns\",\n      vt: \"xmlns:vt\"\n    });\n  }\n}\nclass AppProperties extends XmlComponent {\n  constructor() {\n    super(\"Properties\");\n    this.root.push(\n      new AppPropertiesAttributes({\n        xmlns: \"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\",\n        vt: \"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\"\n      })\n    );\n  }\n}\nclass ContentTypeAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      xmlns: \"xmlns\"\n    });\n  }\n}\nclass DefaultAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      contentType: \"ContentType\",\n      extension: \"Extension\"\n    });\n  }\n}\nclass Default extends XmlComponent {\n  constructor(contentType, extension) {\n    super(\"Default\");\n    this.root.push(\n      new DefaultAttributes({\n        contentType,\n        extension\n      })\n    );\n  }\n}\nclass OverrideAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      contentType: \"ContentType\",\n      partName: \"PartName\"\n    });\n  }\n}\nclass Override extends XmlComponent {\n  constructor(contentType, partName) {\n    super(\"Override\");\n    this.root.push(\n      new OverrideAttributes({\n        contentType,\n        partName\n      })\n    );\n  }\n}\nclass ContentTypes extends XmlComponent {\n  constructor() {\n    super(\"Types\");\n    this.root.push(\n      new ContentTypeAttributes({\n        xmlns: \"http://schemas.openxmlformats.org/package/2006/content-types\"\n      })\n    );\n    this.root.push(new Default(\"image/png\", \"png\"));\n    this.root.push(new Default(\"image/jpeg\", \"jpeg\"));\n    this.root.push(new Default(\"image/jpeg\", \"jpg\"));\n    this.root.push(new Default(\"image/bmp\", \"bmp\"));\n    this.root.push(new Default(\"image/gif\", \"gif\"));\n    this.root.push(new Default(\"image/svg+xml\", \"svg\"));\n    this.root.push(new Default(\"application/vnd.openxmlformats-package.relationships+xml\", \"rels\"));\n    this.root.push(new Default(\"application/xml\", \"xml\"));\n    this.root.push(new Default(\"application/vnd.openxmlformats-officedocument.obfuscatedFont\", \"odttf\"));\n    this.root.push(\n      new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml\", \"/word/document.xml\")\n    );\n    this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml\", \"/word/styles.xml\"));\n    this.root.push(new Override(\"application/vnd.openxmlformats-package.core-properties+xml\", \"/docProps/core.xml\"));\n    this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.custom-properties+xml\", \"/docProps/custom.xml\"));\n    this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.extended-properties+xml\", \"/docProps/app.xml\"));\n    this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml\", \"/word/numbering.xml\"));\n    this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml\", \"/word/footnotes.xml\"));\n    this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml\", \"/word/settings.xml\"));\n    this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml\", \"/word/comments.xml\"));\n    this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.fontTable+xml\", \"/word/fontTable.xml\"));\n  }\n  addFooter(index) {\n    this.root.push(\n      new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml\", `/word/footer${index}.xml`)\n    );\n  }\n  addHeader(index) {\n    this.root.push(\n      new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.header+xml\", `/word/header${index}.xml`)\n    );\n  }\n}\nclass CoreProperties extends XmlComponent {\n  constructor(options2) {\n    super(\"cp:coreProperties\");\n    this.root.push(\n      new DocumentAttributes({\n        cp: \"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\",\n        dc: \"http://purl.org/dc/elements/1.1/\",\n        dcterms: \"http://purl.org/dc/terms/\",\n        dcmitype: \"http://purl.org/dc/dcmitype/\",\n        xsi: \"http://www.w3.org/2001/XMLSchema-instance\"\n      })\n    );\n    if (options2.title) {\n      this.root.push(new StringContainer(\"dc:title\", options2.title));\n    }\n    if (options2.subject) {\n      this.root.push(new StringContainer(\"dc:subject\", options2.subject));\n    }\n    if (options2.creator) {\n      this.root.push(new StringContainer(\"dc:creator\", options2.creator));\n    }\n    if (options2.keywords) {\n      this.root.push(new StringContainer(\"cp:keywords\", options2.keywords));\n    }\n    if (options2.description) {\n      this.root.push(new StringContainer(\"dc:description\", options2.description));\n    }\n    if (options2.lastModifiedBy) {\n      this.root.push(new StringContainer(\"cp:lastModifiedBy\", options2.lastModifiedBy));\n    }\n    if (options2.revision) {\n      this.root.push(new StringContainer(\"cp:revision\", String(options2.revision)));\n    }\n    this.root.push(new TimestampElement(\"dcterms:created\"));\n    this.root.push(new TimestampElement(\"dcterms:modified\"));\n  }\n}\nclass TimestampElement extends XmlComponent {\n  constructor(name) {\n    super(name);\n    this.root.push(\n      new DocumentAttributes({\n        type: \"dcterms:W3CDTF\"\n      })\n    );\n    this.root.push(dateTimeValue(/* @__PURE__ */ new Date()));\n  }\n}\nclass CustomPropertiesAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      xmlns: \"xmlns\",\n      vt: \"xmlns:vt\"\n    });\n  }\n}\nclass CustomPropertyAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      fmtid: \"fmtid\",\n      pid: \"pid\",\n      name: \"name\"\n    });\n  }\n}\nclass CustomProperty extends XmlComponent {\n  constructor(id, properties) {\n    super(\"property\");\n    this.root.push(\n      new CustomPropertyAttributes({\n        fmtid: \"{D5CDD505-2E9C-101B-9397-08002B2CF9AE}\",\n        pid: id.toString(),\n        name: properties.name\n      })\n    );\n    this.root.push(new CustomPropertyValue(properties.value));\n  }\n}\nclass CustomPropertyValue extends XmlComponent {\n  constructor(value) {\n    super(\"vt:lpwstr\");\n    this.root.push(value);\n  }\n}\nclass CustomProperties extends XmlComponent {\n  constructor(properties) {\n    super(\"Properties\");\n    // eslint-disable-next-line functional/prefer-readonly-type\n    __publicField(this, \"nextId\");\n    // eslint-disable-next-line functional/prefer-readonly-type\n    __publicField(this, \"properties\", []);\n    this.root.push(\n      new CustomPropertiesAttributes({\n        xmlns: \"http://schemas.openxmlformats.org/officeDocument/2006/custom-properties\",\n        vt: \"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\"\n      })\n    );\n    this.nextId = 2;\n    for (const property of properties) {\n      this.addCustomProperty(property);\n    }\n  }\n  prepForXml(context) {\n    this.properties.forEach((x) => this.root.push(x));\n    return super.prepForXml(context);\n  }\n  addCustomProperty(property) {\n    this.properties.push(new CustomProperty(this.nextId++, property));\n  }\n}\nconst CharacterSet = {\n  ANSI: \"00\",\n  DEFAULT: \"01\",\n  SYMBOL: \"02\",\n  MAC: \"4D\",\n  JIS: \"80\",\n  HANGUL: \"81\",\n  JOHAB: \"82\",\n  GB_2312: \"86\",\n  CHINESEBIG5: \"88\",\n  GREEK: \"A1\",\n  TURKISH: \"A2\",\n  VIETNAMESE: \"A3\",\n  HEBREW: \"B1\",\n  ARABIC: \"B2\",\n  BALTIC: \"BA\",\n  RUSSIAN: \"CC\",\n  THAI: \"DE\",\n  EASTEUROPE: \"EE\",\n  OEM: \"FF\"\n};\nconst createFontRelationship = ({ id, fontKey, subsetted }, name) => new BuilderElement({\n  name,\n  attributes: __spreadValues({\n    id: { key: \"r:id\", value: id }\n  }, fontKey ? { fontKey: { key: \"w:fontKey\", value: `{${fontKey}}` } } : {}),\n  children: [...subsetted ? [new OnOffElement(\"w:subsetted\", subsetted)] : []]\n});\nconst createFont = ({\n  name,\n  altName,\n  panose1,\n  charset,\n  family,\n  notTrueType,\n  pitch,\n  sig,\n  embedRegular,\n  embedBold,\n  embedItalic,\n  embedBoldItalic\n}) => (\n  // http://www.datypic.com/sc/ooxml/e-w_font-1.html\n  new BuilderElement({\n    name: \"w:font\",\n    attributes: {\n      name: { key: \"w:name\", value: name }\n    },\n    children: [\n      // http://www.datypic.com/sc/ooxml/e-w_altName-1.html\n      ...altName ? [createStringElement(\"w:altName\", altName)] : [],\n      // http://www.datypic.com/sc/ooxml/e-w_panose1-1.html\n      ...panose1 ? [createStringElement(\"w:panose1\", panose1)] : [],\n      // http://www.datypic.com/sc/ooxml/e-w_charset-1.html\n      ...charset ? [createStringElement(\"w:charset\", charset)] : [],\n      // http://www.datypic.com/sc/ooxml/e-w_family-1.html\n      ...family ? [createStringElement(\"w:family\", family)] : [],\n      // http://www.datypic.com/sc/ooxml/e-w_notTrueType-1.html\n      ...notTrueType ? [new OnOffElement(\"w:notTrueType\", notTrueType)] : [],\n      ...pitch ? [createStringElement(\"w:pitch\", pitch)] : [],\n      // http://www.datypic.com/sc/ooxml/e-w_sig-1.html\n      ...sig ? [\n        new BuilderElement({\n          name: \"w:sig\",\n          attributes: {\n            usb0: { key: \"w:usb0\", value: sig.usb0 },\n            usb1: { key: \"w:usb1\", value: sig.usb1 },\n            usb2: { key: \"w:usb2\", value: sig.usb2 },\n            usb3: { key: \"w:usb3\", value: sig.usb3 },\n            csb0: { key: \"w:csb0\", value: sig.csb0 },\n            csb1: { key: \"w:csb1\", value: sig.csb1 }\n          }\n        })\n      ] : [],\n      // http://www.datypic.com/sc/ooxml/e-w_embedRegular-1.html\n      ...embedRegular ? [createFontRelationship(embedRegular, \"w:embedRegular\")] : [],\n      // http://www.datypic.com/sc/ooxml/e-w_embedBold-1.html\n      ...embedBold ? [createFontRelationship(embedBold, \"w:embedBold\")] : [],\n      // http://www.datypic.com/sc/ooxml/e-w_embedItalic-1.html\n      ...embedItalic ? [createFontRelationship(embedItalic, \"w:embedItalic\")] : [],\n      // http://www.datypic.com/sc/ooxml/e-w_embedBoldItalic-1.html\n      ...embedBoldItalic ? [createFontRelationship(embedBoldItalic, \"w:embedBoldItalic\")] : []\n    ]\n  })\n);\nconst createRegularFont = ({\n  name,\n  index,\n  fontKey,\n  characterSet\n}) => createFont({\n  name,\n  sig: {\n    usb0: \"E0002AFF\",\n    usb1: \"C000247B\",\n    usb2: \"00000009\",\n    usb3: \"00000000\",\n    csb0: \"000001FF\",\n    csb1: \"00000000\"\n  },\n  charset: characterSet,\n  family: \"auto\",\n  pitch: \"variable\",\n  embedRegular: {\n    fontKey,\n    id: `rId${index}`\n  }\n});\nconst createFontTable = (fonts) => (\n  // https://c-rex.net/projects/samples/ooxml/e1/Part4/OOXML_P4_DOCX_Font_topic_ID0ERNCU.html\n  // http://www.datypic.com/sc/ooxml/e-w_fonts.html\n  new BuilderElement({\n    name: \"w:fonts\",\n    attributes: {\n      mc: { key: \"xmlns:mc\", value: \"http://schemas.openxmlformats.org/markup-compatibility/2006\" },\n      r: { key: \"xmlns:r\", value: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" },\n      w: { key: \"xmlns:w\", value: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\" },\n      w14: { key: \"xmlns:w14\", value: \"http://schemas.microsoft.com/office/word/2010/wordml\" },\n      w15: { key: \"xmlns:w15\", value: \"http://schemas.microsoft.com/office/word/2012/wordml\" },\n      w16cex: { key: \"xmlns:w16cex\", value: \"http://schemas.microsoft.com/office/word/2018/wordml/cex\" },\n      w16cid: { key: \"xmlns:w16cid\", value: \"http://schemas.microsoft.com/office/word/2016/wordml/cid\" },\n      w16: { key: \"xmlns:w16\", value: \"http://schemas.microsoft.com/office/word/2018/wordml\" },\n      w16sdtdh: { key: \"xmlns:w16sdtdh\", value: \"http://schemas.microsoft.com/office/word/2020/wordml/sdtdatahash\" },\n      w16se: { key: \"xmlns:w16se\", value: \"http://schemas.microsoft.com/office/word/2015/wordml/symex\" },\n      Ignorable: { key: \"mc:Ignorable\", value: \"w14 w15 w16se w16cid w16 w16cex w16sdtdh\" }\n    },\n    children: fonts.map(\n      (font, i) => createRegularFont({\n        name: font.name,\n        index: i + 1,\n        fontKey: font.fontKey\n      })\n    )\n  })\n);\nclass FontWrapper {\n  constructor(options2) {\n    __publicField(this, \"fontTable\");\n    __publicField(this, \"relationships\");\n    __publicField(this, \"fontOptionsWithKey\", []);\n    this.options = options2;\n    this.fontOptionsWithKey = options2.map((o) => __spreadProps(__spreadValues({}, o), { fontKey: uniqueUuid() }));\n    this.fontTable = createFontTable(this.fontOptionsWithKey);\n    this.relationships = new Relationships();\n    for (let i = 0; i < options2.length; i++) {\n      this.relationships.createRelationship(\n        i + 1,\n        \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/font\",\n        `fonts/${options2[i].name}.odttf`\n      );\n    }\n  }\n  get View() {\n    return this.fontTable;\n  }\n  get Relationships() {\n    return this.relationships;\n  }\n}\nclass FooterAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      wpc: \"xmlns:wpc\",\n      mc: \"xmlns:mc\",\n      o: \"xmlns:o\",\n      r: \"xmlns:r\",\n      m: \"xmlns:m\",\n      v: \"xmlns:v\",\n      wp14: \"xmlns:wp14\",\n      wp: \"xmlns:wp\",\n      w10: \"xmlns:w10\",\n      w: \"xmlns:w\",\n      w14: \"xmlns:w14\",\n      w15: \"xmlns:w15\",\n      wpg: \"xmlns:wpg\",\n      wpi: \"xmlns:wpi\",\n      wne: \"xmlns:wne\",\n      wps: \"xmlns:wps\",\n      cp: \"xmlns:cp\",\n      dc: \"xmlns:dc\",\n      dcterms: \"xmlns:dcterms\",\n      dcmitype: \"xmlns:dcmitype\",\n      xsi: \"xmlns:xsi\",\n      type: \"xsi:type\"\n    });\n  }\n}\nlet Footer$1 = class Footer extends InitializableXmlComponent {\n  constructor(referenceNumber, initContent) {\n    super(\"w:ftr\", initContent);\n    __publicField(this, \"refId\");\n    this.refId = referenceNumber;\n    if (!initContent) {\n      this.root.push(\n        new FooterAttributes({\n          wpc: \"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\",\n          mc: \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\n          o: \"urn:schemas-microsoft-com:office:office\",\n          r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\",\n          m: \"http://schemas.openxmlformats.org/officeDocument/2006/math\",\n          v: \"urn:schemas-microsoft-com:vml\",\n          wp14: \"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\",\n          wp: \"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\",\n          w10: \"urn:schemas-microsoft-com:office:word\",\n          w: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\n          w14: \"http://schemas.microsoft.com/office/word/2010/wordml\",\n          w15: \"http://schemas.microsoft.com/office/word/2012/wordml\",\n          wpg: \"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\",\n          wpi: \"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\",\n          wne: \"http://schemas.microsoft.com/office/word/2006/wordml\",\n          wps: \"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\"\n        })\n      );\n    }\n  }\n  get ReferenceId() {\n    return this.refId;\n  }\n  add(item) {\n    this.root.push(item);\n  }\n};\nclass FooterWrapper {\n  constructor(media, referenceId, initContent) {\n    __publicField(this, \"footer\");\n    __publicField(this, \"relationships\");\n    this.media = media;\n    this.footer = new Footer$1(referenceId, initContent);\n    this.relationships = new Relationships();\n  }\n  add(item) {\n    this.footer.add(item);\n  }\n  addChildElement(childElement) {\n    this.footer.addChildElement(childElement);\n  }\n  get View() {\n    return this.footer;\n  }\n  get Relationships() {\n    return this.relationships;\n  }\n  get Media() {\n    return this.media;\n  }\n}\nclass FootnoteAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      type: \"w:type\",\n      id: \"w:id\"\n    });\n  }\n}\nclass FootnoteRef extends XmlComponent {\n  constructor() {\n    super(\"w:footnoteRef\");\n  }\n}\nclass FootnoteRefRun extends Run {\n  constructor() {\n    super({\n      style: \"FootnoteReference\"\n    });\n    this.root.push(new FootnoteRef());\n  }\n}\nconst FootnoteType = {\n  SEPERATOR: \"separator\",\n  CONTINUATION_SEPERATOR: \"continuationSeparator\"\n};\nclass Footnote extends XmlComponent {\n  constructor(options2) {\n    super(\"w:footnote\");\n    this.root.push(\n      new FootnoteAttributes({\n        type: options2.type,\n        id: options2.id\n      })\n    );\n    for (let i = 0; i < options2.children.length; i++) {\n      const child = options2.children[i];\n      if (i === 0) {\n        child.addRunToFront(new FootnoteRefRun());\n      }\n      this.root.push(child);\n    }\n  }\n}\nclass ContinuationSeperator extends XmlComponent {\n  constructor() {\n    super(\"w:continuationSeparator\");\n  }\n}\nclass ContinuationSeperatorRun extends Run {\n  constructor() {\n    super({});\n    this.root.push(new ContinuationSeperator());\n  }\n}\nclass Seperator extends XmlComponent {\n  constructor() {\n    super(\"w:separator\");\n  }\n}\nclass SeperatorRun extends Run {\n  constructor() {\n    super({});\n    this.root.push(new Seperator());\n  }\n}\nclass FootnotesAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      wpc: \"xmlns:wpc\",\n      mc: \"xmlns:mc\",\n      o: \"xmlns:o\",\n      r: \"xmlns:r\",\n      m: \"xmlns:m\",\n      v: \"xmlns:v\",\n      wp14: \"xmlns:wp14\",\n      wp: \"xmlns:wp\",\n      w10: \"xmlns:w10\",\n      w: \"xmlns:w\",\n      w14: \"xmlns:w14\",\n      w15: \"xmlns:w15\",\n      wpg: \"xmlns:wpg\",\n      wpi: \"xmlns:wpi\",\n      wne: \"xmlns:wne\",\n      wps: \"xmlns:wps\",\n      Ignorable: \"mc:Ignorable\"\n    });\n  }\n}\nclass FootNotes extends XmlComponent {\n  constructor() {\n    super(\"w:footnotes\");\n    this.root.push(\n      new FootnotesAttributes({\n        wpc: \"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\",\n        mc: \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\n        o: \"urn:schemas-microsoft-com:office:office\",\n        r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\",\n        m: \"http://schemas.openxmlformats.org/officeDocument/2006/math\",\n        v: \"urn:schemas-microsoft-com:vml\",\n        wp14: \"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\",\n        wp: \"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\",\n        w10: \"urn:schemas-microsoft-com:office:word\",\n        w: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\n        w14: \"http://schemas.microsoft.com/office/word/2010/wordml\",\n        w15: \"http://schemas.microsoft.com/office/word/2012/wordml\",\n        wpg: \"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\",\n        wpi: \"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\",\n        wne: \"http://schemas.microsoft.com/office/word/2006/wordml\",\n        wps: \"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\",\n        Ignorable: \"w14 w15 wp14\"\n      })\n    );\n    const begin = new Footnote({\n      id: -1,\n      type: FootnoteType.SEPERATOR,\n      children: [\n        new Paragraph({\n          spacing: {\n            after: 0,\n            line: 240,\n            lineRule: LineRuleType.AUTO\n          },\n          children: [new SeperatorRun()]\n        })\n      ]\n    });\n    this.root.push(begin);\n    const spacing = new Footnote({\n      id: 0,\n      type: FootnoteType.CONTINUATION_SEPERATOR,\n      children: [\n        new Paragraph({\n          spacing: {\n            after: 0,\n            line: 240,\n            lineRule: LineRuleType.AUTO\n          },\n          children: [new ContinuationSeperatorRun()]\n        })\n      ]\n    });\n    this.root.push(spacing);\n  }\n  createFootNote(id, paragraph) {\n    const footnote = new Footnote({\n      id,\n      children: paragraph\n    });\n    this.root.push(footnote);\n  }\n}\nclass FootnotesWrapper {\n  constructor() {\n    __publicField(this, \"footnotess\");\n    __publicField(this, \"relationships\");\n    this.footnotess = new FootNotes();\n    this.relationships = new Relationships();\n  }\n  get View() {\n    return this.footnotess;\n  }\n  get Relationships() {\n    return this.relationships;\n  }\n}\nclass HeaderAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      wpc: \"xmlns:wpc\",\n      mc: \"xmlns:mc\",\n      o: \"xmlns:o\",\n      r: \"xmlns:r\",\n      m: \"xmlns:m\",\n      v: \"xmlns:v\",\n      wp14: \"xmlns:wp14\",\n      wp: \"xmlns:wp\",\n      w10: \"xmlns:w10\",\n      w: \"xmlns:w\",\n      w14: \"xmlns:w14\",\n      w15: \"xmlns:w15\",\n      wpg: \"xmlns:wpg\",\n      wpi: \"xmlns:wpi\",\n      wne: \"xmlns:wne\",\n      wps: \"xmlns:wps\",\n      cp: \"xmlns:cp\",\n      dc: \"xmlns:dc\",\n      dcterms: \"xmlns:dcterms\",\n      dcmitype: \"xmlns:dcmitype\",\n      xsi: \"xmlns:xsi\",\n      type: \"xsi:type\",\n      cx: \"xmlns:cx\",\n      cx1: \"xmlns:cx1\",\n      cx2: \"xmlns:cx2\",\n      cx3: \"xmlns:cx3\",\n      cx4: \"xmlns:cx4\",\n      cx5: \"xmlns:cx5\",\n      cx6: \"xmlns:cx6\",\n      cx7: \"xmlns:cx7\",\n      cx8: \"xmlns:cx8\",\n      w16cid: \"xmlns:w16cid\",\n      w16se: \"xmlns:w16se\"\n    });\n  }\n}\nlet Header$1 = class Header extends InitializableXmlComponent {\n  constructor(referenceNumber, initContent) {\n    super(\"w:hdr\", initContent);\n    __publicField(this, \"refId\");\n    this.refId = referenceNumber;\n    if (!initContent) {\n      this.root.push(\n        new HeaderAttributes({\n          wpc: \"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\",\n          mc: \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\n          o: \"urn:schemas-microsoft-com:office:office\",\n          r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\",\n          m: \"http://schemas.openxmlformats.org/officeDocument/2006/math\",\n          v: \"urn:schemas-microsoft-com:vml\",\n          wp14: \"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\",\n          wp: \"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\",\n          w10: \"urn:schemas-microsoft-com:office:word\",\n          w: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\n          w14: \"http://schemas.microsoft.com/office/word/2010/wordml\",\n          w15: \"http://schemas.microsoft.com/office/word/2012/wordml\",\n          wpg: \"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\",\n          wpi: \"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\",\n          wne: \"http://schemas.microsoft.com/office/word/2006/wordml\",\n          wps: \"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\",\n          cx: \"http://schemas.microsoft.com/office/drawing/2014/chartex\",\n          cx1: \"http://schemas.microsoft.com/office/drawing/2015/9/8/chartex\",\n          cx2: \"http://schemas.microsoft.com/office/drawing/2015/10/21/chartex\",\n          cx3: \"http://schemas.microsoft.com/office/drawing/2016/5/9/chartex\",\n          cx4: \"http://schemas.microsoft.com/office/drawing/2016/5/10/chartex\",\n          cx5: \"http://schemas.microsoft.com/office/drawing/2016/5/11/chartex\",\n          cx6: \"http://schemas.microsoft.com/office/drawing/2016/5/12/chartex\",\n          cx7: \"http://schemas.microsoft.com/office/drawing/2016/5/13/chartex\",\n          cx8: \"http://schemas.microsoft.com/office/drawing/2016/5/14/chartex\",\n          w16cid: \"http://schemas.microsoft.com/office/word/2016/wordml/cid\",\n          w16se: \"http://schemas.microsoft.com/office/word/2015/wordml/symex\"\n        })\n      );\n    }\n  }\n  get ReferenceId() {\n    return this.refId;\n  }\n  add(item) {\n    this.root.push(item);\n  }\n};\nclass HeaderWrapper {\n  constructor(media, referenceId, initContent) {\n    __publicField(this, \"header\");\n    __publicField(this, \"relationships\");\n    this.media = media;\n    this.header = new Header$1(referenceId, initContent);\n    this.relationships = new Relationships();\n  }\n  add(item) {\n    this.header.add(item);\n    return this;\n  }\n  addChildElement(childElement) {\n    this.header.addChildElement(childElement);\n  }\n  get View() {\n    return this.header;\n  }\n  get Relationships() {\n    return this.relationships;\n  }\n  get Media() {\n    return this.media;\n  }\n}\nclass Media {\n  constructor() {\n    // eslint-disable-next-line functional/prefer-readonly-type\n    __publicField(this, \"map\");\n    this.map = /* @__PURE__ */ new Map();\n  }\n  addImage(key, mediaData) {\n    this.map.set(key, mediaData);\n  }\n  get Array() {\n    return Array.from(this.map.values());\n  }\n}\nconst WORKAROUND2 = \"\";\nconst LevelFormat = {\n  DECIMAL: \"decimal\",\n  UPPER_ROMAN: \"upperRoman\",\n  LOWER_ROMAN: \"lowerRoman\",\n  UPPER_LETTER: \"upperLetter\",\n  LOWER_LETTER: \"lowerLetter\",\n  ORDINAL: \"ordinal\",\n  CARDINAL_TEXT: \"cardinalText\",\n  ORDINAL_TEXT: \"ordinalText\",\n  HEX: \"hex\",\n  CHICAGO: \"chicago\",\n  IDEOGRAPH__DIGITAL: \"ideographDigital\",\n  JAPANESE_COUNTING: \"japaneseCounting\",\n  AIUEO: \"aiueo\",\n  IROHA: \"iroha\",\n  DECIMAL_FULL_WIDTH: \"decimalFullWidth\",\n  DECIMAL_HALF_WIDTH: \"decimalHalfWidth\",\n  JAPANESE_LEGAL: \"japaneseLegal\",\n  JAPANESE_DIGITAL_TEN_THOUSAND: \"japaneseDigitalTenThousand\",\n  DECIMAL_ENCLOSED_CIRCLE: \"decimalEnclosedCircle\",\n  DECIMAL_FULL_WIDTH2: \"decimalFullWidth2\",\n  AIUEO_FULL_WIDTH: \"aiueoFullWidth\",\n  IROHA_FULL_WIDTH: \"irohaFullWidth\",\n  DECIMAL_ZERO: \"decimalZero\",\n  BULLET: \"bullet\",\n  GANADA: \"ganada\",\n  CHOSUNG: \"chosung\",\n  DECIMAL_ENCLOSED_FULLSTOP: \"decimalEnclosedFullstop\",\n  DECIMAL_ENCLOSED_PARENTHESES: \"decimalEnclosedParen\",\n  DECIMAL_ENCLOSED_CIRCLE_CHINESE: \"decimalEnclosedCircleChinese\",\n  IDEOGRAPH_ENCLOSED_CIRCLE: \"ideographEnclosedCircle\",\n  IDEOGRAPH_TRADITIONAL: \"ideographTraditional\",\n  IDEOGRAPH_ZODIAC: \"ideographZodiac\",\n  IDEOGRAPH_ZODIAC_TRADITIONAL: \"ideographZodiacTraditional\",\n  TAIWANESE_COUNTING: \"taiwaneseCounting\",\n  IDEOGRAPH_LEGAL_TRADITIONAL: \"ideographLegalTraditional\",\n  TAIWANESE_COUNTING_THOUSAND: \"taiwaneseCountingThousand\",\n  TAIWANESE_DIGITAL: \"taiwaneseDigital\",\n  CHINESE_COUNTING: \"chineseCounting\",\n  CHINESE_LEGAL_SIMPLIFIED: \"chineseLegalSimplified\",\n  CHINESE_COUNTING_THOUSAND: \"chineseCountingThousand\",\n  KOREAN_DIGITAL: \"koreanDigital\",\n  KOREAN_COUNTING: \"koreanCounting\",\n  KOREAN_LEGAL: \"koreanLegal\",\n  KOREAN_DIGITAL2: \"koreanDigital2\",\n  VIETNAMESE_COUNTING: \"vietnameseCounting\",\n  RUSSIAN_LOWER: \"russianLower\",\n  RUSSIAN_UPPER: \"russianUpper\",\n  NONE: \"none\",\n  NUMBER_IN_DASH: \"numberInDash\",\n  HEBREW1: \"hebrew1\",\n  HEBREW2: \"hebrew2\",\n  ARABIC_ALPHA: \"arabicAlpha\",\n  ARABIC_ABJAD: \"arabicAbjad\",\n  HINDI_VOWELS: \"hindiVowels\",\n  HINDI_CONSONANTS: \"hindiConsonants\",\n  HINDI_NUMBERS: \"hindiNumbers\",\n  HINDI_COUNTING: \"hindiCounting\",\n  THAI_LETTERS: \"thaiLetters\",\n  THAI_NUMBERS: \"thaiNumbers\",\n  THAI_COUNTING: \"thaiCounting\",\n  BAHT_TEXT: \"bahtText\",\n  DOLLAR_TEXT: \"dollarText\",\n  CUSTOM: \"custom\"\n};\nclass LevelAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      ilvl: \"w:ilvl\",\n      tentative: \"w15:tentative\"\n    });\n  }\n}\nclass NumberFormat extends XmlComponent {\n  constructor(value) {\n    super(\"w:numFmt\");\n    this.root.push(\n      new Attributes({\n        val: value\n      })\n    );\n  }\n}\nclass LevelText extends XmlComponent {\n  constructor(value) {\n    super(\"w:lvlText\");\n    this.root.push(\n      new Attributes({\n        val: value\n      })\n    );\n  }\n}\nclass LevelJc extends XmlComponent {\n  constructor(value) {\n    super(\"w:lvlJc\");\n    this.root.push(\n      new Attributes({\n        val: value\n      })\n    );\n  }\n}\nconst LevelSuffix = {\n  NOTHING: \"nothing\",\n  SPACE: \"space\",\n  TAB: \"tab\"\n};\nclass Suffix extends XmlComponent {\n  constructor(value) {\n    super(\"w:suff\");\n    this.root.push(\n      new Attributes({\n        val: value\n      })\n    );\n  }\n}\nclass IsLegalNumberingStyle extends XmlComponent {\n  constructor() {\n    super(\"w:isLgl\");\n  }\n}\nclass LevelBase extends XmlComponent {\n  constructor({\n    level,\n    format: format2,\n    text,\n    alignment = AlignmentType.START,\n    start = 1,\n    style,\n    suffix,\n    isLegalNumberingStyle\n  }) {\n    super(\"w:lvl\");\n    __publicField(this, \"paragraphProperties\");\n    __publicField(this, \"runProperties\");\n    this.root.push(new NumberValueElement(\"w:start\", decimalNumber(start)));\n    if (format2) {\n      this.root.push(new NumberFormat(format2));\n    }\n    if (suffix) {\n      this.root.push(new Suffix(suffix));\n    }\n    if (isLegalNumberingStyle) {\n      this.root.push(new IsLegalNumberingStyle());\n    }\n    if (text) {\n      this.root.push(new LevelText(text));\n    }\n    this.root.push(new LevelJc(alignment));\n    this.paragraphProperties = new ParagraphProperties(style && style.paragraph);\n    this.runProperties = new RunProperties(style && style.run);\n    this.root.push(this.paragraphProperties);\n    this.root.push(this.runProperties);\n    if (level > 9) {\n      throw new Error(\n        \"Level cannot be greater than 9. Read more here: https://answers.microsoft.com/en-us/msoffice/forum/all/does-word-support-more-than-9-list-levels/d130fdcd-1781-446d-8c84-c6c79124e4d7\"\n      );\n    }\n    this.root.push(\n      new LevelAttributes({\n        ilvl: decimalNumber(level),\n        tentative: 1\n      })\n    );\n  }\n}\nclass Level extends LevelBase {\n  // This is the level that sits under abstractNum. We make a\n  // handful of properties required\n}\nclass LevelForOverride extends LevelBase {\n}\nclass MultiLevelType extends XmlComponent {\n  constructor(value) {\n    super(\"w:multiLevelType\");\n    this.root.push(\n      new Attributes({\n        val: value\n      })\n    );\n  }\n}\nclass AbstractNumberingAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      abstractNumId: \"w:abstractNumId\",\n      restartNumberingAfterBreak: \"w15:restartNumberingAfterBreak\"\n    });\n  }\n}\nclass AbstractNumbering extends XmlComponent {\n  constructor(id, levelOptions) {\n    super(\"w:abstractNum\");\n    __publicField(this, \"id\");\n    this.root.push(\n      new AbstractNumberingAttributes({\n        abstractNumId: decimalNumber(id),\n        restartNumberingAfterBreak: 0\n      })\n    );\n    this.root.push(new MultiLevelType(\"hybridMultilevel\"));\n    this.id = id;\n    for (const option of levelOptions) {\n      this.root.push(new Level(option));\n    }\n  }\n}\nclass AbstractNumId extends XmlComponent {\n  constructor(value) {\n    super(\"w:abstractNumId\");\n    this.root.push(\n      new Attributes({\n        val: value\n      })\n    );\n  }\n}\nclass NumAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { numId: \"w:numId\" });\n  }\n}\nclass ConcreteNumbering extends XmlComponent {\n  constructor(options2) {\n    super(\"w:num\");\n    __publicField(this, \"numId\");\n    __publicField(this, \"reference\");\n    __publicField(this, \"instance\");\n    this.numId = options2.numId;\n    this.reference = options2.reference;\n    this.instance = options2.instance;\n    this.root.push(\n      new NumAttributes({\n        numId: decimalNumber(options2.numId)\n      })\n    );\n    this.root.push(new AbstractNumId(decimalNumber(options2.abstractNumId)));\n    if (options2.overrideLevels && options2.overrideLevels.length) {\n      for (const level of options2.overrideLevels) {\n        this.root.push(new LevelOverride(level.num, level.start));\n      }\n    }\n  }\n}\nclass LevelOverrideAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { ilvl: \"w:ilvl\" });\n  }\n}\nclass LevelOverride extends XmlComponent {\n  constructor(levelNum, start) {\n    super(\"w:lvlOverride\");\n    this.root.push(new LevelOverrideAttributes({ ilvl: levelNum }));\n    if (start !== void 0) {\n      this.root.push(new StartOverride(start));\n    }\n  }\n}\nclass StartOverrideAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { val: \"w:val\" });\n  }\n}\nclass StartOverride extends XmlComponent {\n  constructor(start) {\n    super(\"w:startOverride\");\n    this.root.push(new StartOverrideAttributes({ val: start }));\n  }\n}\nclass Numbering extends XmlComponent {\n  constructor(options2) {\n    super(\"w:numbering\");\n    __publicField(this, \"abstractNumberingMap\", /* @__PURE__ */ new Map());\n    __publicField(this, \"concreteNumberingMap\", /* @__PURE__ */ new Map());\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    __publicField(this, \"referenceConfigMap\", /* @__PURE__ */ new Map());\n    __publicField(this, \"abstractNumUniqueNumericId\", abstractNumUniqueNumericIdGen());\n    __publicField(this, \"concreteNumUniqueNumericId\", concreteNumUniqueNumericIdGen());\n    this.root.push(\n      new DocumentAttributes({\n        wpc: \"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\",\n        mc: \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\n        o: \"urn:schemas-microsoft-com:office:office\",\n        r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\",\n        m: \"http://schemas.openxmlformats.org/officeDocument/2006/math\",\n        v: \"urn:schemas-microsoft-com:vml\",\n        wp14: \"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\",\n        wp: \"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\",\n        w10: \"urn:schemas-microsoft-com:office:word\",\n        w: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\n        w14: \"http://schemas.microsoft.com/office/word/2010/wordml\",\n        w15: \"http://schemas.microsoft.com/office/word/2012/wordml\",\n        wpg: \"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\",\n        wpi: \"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\",\n        wne: \"http://schemas.microsoft.com/office/word/2006/wordml\",\n        wps: \"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\",\n        Ignorable: \"w14 w15 wp14\"\n      })\n    );\n    const abstractNumbering = new AbstractNumbering(this.abstractNumUniqueNumericId(), [\n      {\n        level: 0,\n        format: LevelFormat.BULLET,\n        text: \"●\",\n        alignment: AlignmentType.LEFT,\n        style: {\n          paragraph: {\n            indent: { left: convertInchesToTwip(0.5), hanging: convertInchesToTwip(0.25) }\n          }\n        }\n      },\n      {\n        level: 1,\n        format: LevelFormat.BULLET,\n        text: \"○\",\n        alignment: AlignmentType.LEFT,\n        style: {\n          paragraph: {\n            indent: { left: convertInchesToTwip(1), hanging: convertInchesToTwip(0.25) }\n          }\n        }\n      },\n      {\n        level: 2,\n        format: LevelFormat.BULLET,\n        text: \"■\",\n        alignment: AlignmentType.LEFT,\n        style: {\n          paragraph: {\n            indent: { left: 2160, hanging: convertInchesToTwip(0.25) }\n          }\n        }\n      },\n      {\n        level: 3,\n        format: LevelFormat.BULLET,\n        text: \"●\",\n        alignment: AlignmentType.LEFT,\n        style: {\n          paragraph: {\n            indent: { left: 2880, hanging: convertInchesToTwip(0.25) }\n          }\n        }\n      },\n      {\n        level: 4,\n        format: LevelFormat.BULLET,\n        text: \"○\",\n        alignment: AlignmentType.LEFT,\n        style: {\n          paragraph: {\n            indent: { left: 3600, hanging: convertInchesToTwip(0.25) }\n          }\n        }\n      },\n      {\n        level: 5,\n        format: LevelFormat.BULLET,\n        text: \"■\",\n        alignment: AlignmentType.LEFT,\n        style: {\n          paragraph: {\n            indent: { left: 4320, hanging: convertInchesToTwip(0.25) }\n          }\n        }\n      },\n      {\n        level: 6,\n        format: LevelFormat.BULLET,\n        text: \"●\",\n        alignment: AlignmentType.LEFT,\n        style: {\n          paragraph: {\n            indent: { left: 5040, hanging: convertInchesToTwip(0.25) }\n          }\n        }\n      },\n      {\n        level: 7,\n        format: LevelFormat.BULLET,\n        text: \"●\",\n        alignment: AlignmentType.LEFT,\n        style: {\n          paragraph: {\n            indent: { left: 5760, hanging: convertInchesToTwip(0.25) }\n          }\n        }\n      },\n      {\n        level: 8,\n        format: LevelFormat.BULLET,\n        text: \"●\",\n        alignment: AlignmentType.LEFT,\n        style: {\n          paragraph: {\n            indent: { left: 6480, hanging: convertInchesToTwip(0.25) }\n          }\n        }\n      }\n    ]);\n    this.concreteNumberingMap.set(\n      \"default-bullet-numbering\",\n      new ConcreteNumbering({\n        numId: 1,\n        abstractNumId: abstractNumbering.id,\n        reference: \"default-bullet-numbering\",\n        instance: 0,\n        overrideLevels: [\n          {\n            num: 0,\n            start: 1\n          }\n        ]\n      })\n    );\n    this.abstractNumberingMap.set(\"default-bullet-numbering\", abstractNumbering);\n    for (const con of options2.config) {\n      this.abstractNumberingMap.set(con.reference, new AbstractNumbering(this.abstractNumUniqueNumericId(), con.levels));\n      this.referenceConfigMap.set(con.reference, con.levels);\n    }\n  }\n  prepForXml(context) {\n    for (const numbering of this.abstractNumberingMap.values()) {\n      this.root.push(numbering);\n    }\n    for (const numbering of this.concreteNumberingMap.values()) {\n      this.root.push(numbering);\n    }\n    return super.prepForXml(context);\n  }\n  createConcreteNumberingInstance(reference, instance) {\n    const abstractNumbering = this.abstractNumberingMap.get(reference);\n    if (!abstractNumbering) {\n      return;\n    }\n    const fullReference = `${reference}-${instance}`;\n    if (this.concreteNumberingMap.has(fullReference)) {\n      return;\n    }\n    const referenceConfigLevels = this.referenceConfigMap.get(reference);\n    const firstLevelStartNumber = referenceConfigLevels && referenceConfigLevels[0].start;\n    const concreteNumberingSettings = {\n      numId: this.concreteNumUniqueNumericId(),\n      abstractNumId: abstractNumbering.id,\n      reference,\n      instance,\n      overrideLevels: [\n        firstLevelStartNumber && Number.isInteger(firstLevelStartNumber) ? {\n          num: 0,\n          start: firstLevelStartNumber\n        } : {\n          num: 0,\n          start: 1\n        }\n      ]\n    };\n    this.concreteNumberingMap.set(fullReference, new ConcreteNumbering(concreteNumberingSettings));\n  }\n  get ConcreteNumbering() {\n    return Array.from(this.concreteNumberingMap.values());\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get ReferenceConfig() {\n    return Array.from(this.referenceConfigMap.values());\n  }\n}\nclass CompatibilitySettingAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      version: \"w:val\",\n      name: \"w:name\",\n      uri: \"w:uri\"\n    });\n  }\n}\nclass CompatibilitySetting extends XmlComponent {\n  constructor(version) {\n    super(\"w:compatSetting\");\n    this.root.push(\n      new CompatibilitySettingAttributes({\n        version,\n        uri: \"http://schemas.microsoft.com/office/word\",\n        name: \"compatibilityMode\"\n      })\n    );\n  }\n}\nclass Compatibility extends XmlComponent {\n  constructor(options2) {\n    super(\"w:compat\");\n    if (options2.version) {\n      this.root.push(new CompatibilitySetting(options2.version));\n    }\n    if (options2.useSingleBorderforContiguousCells) {\n      this.root.push(new OnOffElement(\"w:useSingleBorderforContiguousCells\", options2.useSingleBorderforContiguousCells));\n    }\n    if (options2.wordPerfectJustification) {\n      this.root.push(new OnOffElement(\"w:wpJustification\", options2.wordPerfectJustification));\n    }\n    if (options2.noTabStopForHangingIndent) {\n      this.root.push(new OnOffElement(\"w:noTabHangInd\", options2.noTabStopForHangingIndent));\n    }\n    if (options2.noLeading) {\n      this.root.push(new OnOffElement(\"w:noLeading\", options2.noLeading));\n    }\n    if (options2.spaceForUnderline) {\n      this.root.push(new OnOffElement(\"w:spaceForUL\", options2.spaceForUnderline));\n    }\n    if (options2.noColumnBalance) {\n      this.root.push(new OnOffElement(\"w:noColumnBalance\", options2.noColumnBalance));\n    }\n    if (options2.balanceSingleByteDoubleByteWidth) {\n      this.root.push(new OnOffElement(\"w:balanceSingleByteDoubleByteWidth\", options2.balanceSingleByteDoubleByteWidth));\n    }\n    if (options2.noExtraLineSpacing) {\n      this.root.push(new OnOffElement(\"w:noExtraLineSpacing\", options2.noExtraLineSpacing));\n    }\n    if (options2.doNotLeaveBackslashAlone) {\n      this.root.push(new OnOffElement(\"w:doNotLeaveBackslashAlone\", options2.doNotLeaveBackslashAlone));\n    }\n    if (options2.underlineTrailingSpaces) {\n      this.root.push(new OnOffElement(\"w:ulTrailSpace\", options2.underlineTrailingSpaces));\n    }\n    if (options2.doNotExpandShiftReturn) {\n      this.root.push(new OnOffElement(\"w:doNotExpandShiftReturn\", options2.doNotExpandShiftReturn));\n    }\n    if (options2.spacingInWholePoints) {\n      this.root.push(new OnOffElement(\"w:spacingInWholePoints\", options2.spacingInWholePoints));\n    }\n    if (options2.lineWrapLikeWord6) {\n      this.root.push(new OnOffElement(\"w:lineWrapLikeWord6\", options2.lineWrapLikeWord6));\n    }\n    if (options2.printBodyTextBeforeHeader) {\n      this.root.push(new OnOffElement(\"w:printBodyTextBeforeHeader\", options2.printBodyTextBeforeHeader));\n    }\n    if (options2.printColorsBlack) {\n      this.root.push(new OnOffElement(\"w:printColBlack\", options2.printColorsBlack));\n    }\n    if (options2.spaceWidth) {\n      this.root.push(new OnOffElement(\"w:wpSpaceWidth\", options2.spaceWidth));\n    }\n    if (options2.showBreaksInFrames) {\n      this.root.push(new OnOffElement(\"w:showBreaksInFrames\", options2.showBreaksInFrames));\n    }\n    if (options2.subFontBySize) {\n      this.root.push(new OnOffElement(\"w:subFontBySize\", options2.subFontBySize));\n    }\n    if (options2.suppressBottomSpacing) {\n      this.root.push(new OnOffElement(\"w:suppressBottomSpacing\", options2.suppressBottomSpacing));\n    }\n    if (options2.suppressTopSpacing) {\n      this.root.push(new OnOffElement(\"w:suppressTopSpacing\", options2.suppressTopSpacing));\n    }\n    if (options2.suppressSpacingAtTopOfPage) {\n      this.root.push(new OnOffElement(\"w:suppressSpacingAtTopOfPage\", options2.suppressSpacingAtTopOfPage));\n    }\n    if (options2.suppressTopSpacingWP) {\n      this.root.push(new OnOffElement(\"w:suppressTopSpacingWP\", options2.suppressTopSpacingWP));\n    }\n    if (options2.suppressSpBfAfterPgBrk) {\n      this.root.push(new OnOffElement(\"w:suppressSpBfAfterPgBrk\", options2.suppressSpBfAfterPgBrk));\n    }\n    if (options2.swapBordersFacingPages) {\n      this.root.push(new OnOffElement(\"w:swapBordersFacingPages\", options2.swapBordersFacingPages));\n    }\n    if (options2.convertMailMergeEsc) {\n      this.root.push(new OnOffElement(\"w:convMailMergeEsc\", options2.convertMailMergeEsc));\n    }\n    if (options2.truncateFontHeightsLikeWP6) {\n      this.root.push(new OnOffElement(\"w:truncateFontHeightsLikeWP6\", options2.truncateFontHeightsLikeWP6));\n    }\n    if (options2.macWordSmallCaps) {\n      this.root.push(new OnOffElement(\"w:mwSmallCaps\", options2.macWordSmallCaps));\n    }\n    if (options2.usePrinterMetrics) {\n      this.root.push(new OnOffElement(\"w:usePrinterMetrics\", options2.usePrinterMetrics));\n    }\n    if (options2.doNotSuppressParagraphBorders) {\n      this.root.push(new OnOffElement(\"w:doNotSuppressParagraphBorders\", options2.doNotSuppressParagraphBorders));\n    }\n    if (options2.wrapTrailSpaces) {\n      this.root.push(new OnOffElement(\"w:wrapTrailSpaces\", options2.wrapTrailSpaces));\n    }\n    if (options2.footnoteLayoutLikeWW8) {\n      this.root.push(new OnOffElement(\"w:footnoteLayoutLikeWW8\", options2.footnoteLayoutLikeWW8));\n    }\n    if (options2.shapeLayoutLikeWW8) {\n      this.root.push(new OnOffElement(\"w:shapeLayoutLikeWW8\", options2.shapeLayoutLikeWW8));\n    }\n    if (options2.alignTablesRowByRow) {\n      this.root.push(new OnOffElement(\"w:alignTablesRowByRow\", options2.alignTablesRowByRow));\n    }\n    if (options2.forgetLastTabAlignment) {\n      this.root.push(new OnOffElement(\"w:forgetLastTabAlignment\", options2.forgetLastTabAlignment));\n    }\n    if (options2.adjustLineHeightInTable) {\n      this.root.push(new OnOffElement(\"w:adjustLineHeightInTable\", options2.adjustLineHeightInTable));\n    }\n    if (options2.autoSpaceLikeWord95) {\n      this.root.push(new OnOffElement(\"w:autoSpaceLikeWord95\", options2.autoSpaceLikeWord95));\n    }\n    if (options2.noSpaceRaiseLower) {\n      this.root.push(new OnOffElement(\"w:noSpaceRaiseLower\", options2.noSpaceRaiseLower));\n    }\n    if (options2.doNotUseHTMLParagraphAutoSpacing) {\n      this.root.push(new OnOffElement(\"w:doNotUseHTMLParagraphAutoSpacing\", options2.doNotUseHTMLParagraphAutoSpacing));\n    }\n    if (options2.layoutRawTableWidth) {\n      this.root.push(new OnOffElement(\"w:layoutRawTableWidth\", options2.layoutRawTableWidth));\n    }\n    if (options2.layoutTableRowsApart) {\n      this.root.push(new OnOffElement(\"w:layoutTableRowsApart\", options2.layoutTableRowsApart));\n    }\n    if (options2.useWord97LineBreakRules) {\n      this.root.push(new OnOffElement(\"w:useWord97LineBreakRules\", options2.useWord97LineBreakRules));\n    }\n    if (options2.doNotBreakWrappedTables) {\n      this.root.push(new OnOffElement(\"w:doNotBreakWrappedTables\", options2.doNotBreakWrappedTables));\n    }\n    if (options2.doNotSnapToGridInCell) {\n      this.root.push(new OnOffElement(\"w:doNotSnapToGridInCell\", options2.doNotSnapToGridInCell));\n    }\n    if (options2.selectFieldWithFirstOrLastCharacter) {\n      this.root.push(new OnOffElement(\"w:selectFldWithFirstOrLastChar\", options2.selectFieldWithFirstOrLastCharacter));\n    }\n    if (options2.applyBreakingRules) {\n      this.root.push(new OnOffElement(\"w:applyBreakingRules\", options2.applyBreakingRules));\n    }\n    if (options2.doNotWrapTextWithPunctuation) {\n      this.root.push(new OnOffElement(\"w:doNotWrapTextWithPunct\", options2.doNotWrapTextWithPunctuation));\n    }\n    if (options2.doNotUseEastAsianBreakRules) {\n      this.root.push(new OnOffElement(\"w:doNotUseEastAsianBreakRules\", options2.doNotUseEastAsianBreakRules));\n    }\n    if (options2.useWord2002TableStyleRules) {\n      this.root.push(new OnOffElement(\"w:useWord2002TableStyleRules\", options2.useWord2002TableStyleRules));\n    }\n    if (options2.growAutofit) {\n      this.root.push(new OnOffElement(\"w:growAutofit\", options2.growAutofit));\n    }\n    if (options2.useFELayout) {\n      this.root.push(new OnOffElement(\"w:useFELayout\", options2.useFELayout));\n    }\n    if (options2.useNormalStyleForList) {\n      this.root.push(new OnOffElement(\"w:useNormalStyleForList\", options2.useNormalStyleForList));\n    }\n    if (options2.doNotUseIndentAsNumberingTabStop) {\n      this.root.push(new OnOffElement(\"w:doNotUseIndentAsNumberingTabStop\", options2.doNotUseIndentAsNumberingTabStop));\n    }\n    if (options2.useAlternateEastAsianLineBreakRules) {\n      this.root.push(new OnOffElement(\"w:useAltKinsokuLineBreakRules\", options2.useAlternateEastAsianLineBreakRules));\n    }\n    if (options2.allowSpaceOfSameStyleInTable) {\n      this.root.push(new OnOffElement(\"w:allowSpaceOfSameStyleInTable\", options2.allowSpaceOfSameStyleInTable));\n    }\n    if (options2.doNotSuppressIndentation) {\n      this.root.push(new OnOffElement(\"w:doNotSuppressIndentation\", options2.doNotSuppressIndentation));\n    }\n    if (options2.doNotAutofitConstrainedTables) {\n      this.root.push(new OnOffElement(\"w:doNotAutofitConstrainedTables\", options2.doNotAutofitConstrainedTables));\n    }\n    if (options2.autofitToFirstFixedWidthCell) {\n      this.root.push(new OnOffElement(\"w:autofitToFirstFixedWidthCell\", options2.autofitToFirstFixedWidthCell));\n    }\n    if (options2.underlineTabInNumberingList) {\n      this.root.push(new OnOffElement(\"w:underlineTabInNumList\", options2.underlineTabInNumberingList));\n    }\n    if (options2.displayHangulFixedWidth) {\n      this.root.push(new OnOffElement(\"w:displayHangulFixedWidth\", options2.displayHangulFixedWidth));\n    }\n    if (options2.splitPgBreakAndParaMark) {\n      this.root.push(new OnOffElement(\"w:splitPgBreakAndParaMark\", options2.splitPgBreakAndParaMark));\n    }\n    if (options2.doNotVerticallyAlignCellWithSp) {\n      this.root.push(new OnOffElement(\"w:doNotVertAlignCellWithSp\", options2.doNotVerticallyAlignCellWithSp));\n    }\n    if (options2.doNotBreakConstrainedForcedTable) {\n      this.root.push(new OnOffElement(\"w:doNotBreakConstrainedForcedTable\", options2.doNotBreakConstrainedForcedTable));\n    }\n    if (options2.ignoreVerticalAlignmentInTextboxes) {\n      this.root.push(new OnOffElement(\"w:doNotVertAlignInTxbx\", options2.ignoreVerticalAlignmentInTextboxes));\n    }\n    if (options2.useAnsiKerningPairs) {\n      this.root.push(new OnOffElement(\"w:useAnsiKerningPairs\", options2.useAnsiKerningPairs));\n    }\n    if (options2.cachedColumnBalance) {\n      this.root.push(new OnOffElement(\"w:cachedColBalance\", options2.cachedColumnBalance));\n    }\n  }\n}\nclass SettingsAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      wpc: \"xmlns:wpc\",\n      mc: \"xmlns:mc\",\n      o: \"xmlns:o\",\n      r: \"xmlns:r\",\n      m: \"xmlns:m\",\n      v: \"xmlns:v\",\n      wp14: \"xmlns:wp14\",\n      wp: \"xmlns:wp\",\n      w10: \"xmlns:w10\",\n      w: \"xmlns:w\",\n      w14: \"xmlns:w14\",\n      w15: \"xmlns:w15\",\n      wpg: \"xmlns:wpg\",\n      wpi: \"xmlns:wpi\",\n      wne: \"xmlns:wne\",\n      wps: \"xmlns:wps\",\n      Ignorable: \"mc:Ignorable\"\n    });\n  }\n}\nclass Settings extends XmlComponent {\n  constructor(options2) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    super(\"w:settings\");\n    this.root.push(\n      new SettingsAttributes({\n        wpc: \"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\",\n        mc: \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\n        o: \"urn:schemas-microsoft-com:office:office\",\n        r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\",\n        m: \"http://schemas.openxmlformats.org/officeDocument/2006/math\",\n        v: \"urn:schemas-microsoft-com:vml\",\n        wp14: \"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\",\n        wp: \"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\",\n        w10: \"urn:schemas-microsoft-com:office:word\",\n        w: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\n        w14: \"http://schemas.microsoft.com/office/word/2010/wordml\",\n        w15: \"http://schemas.microsoft.com/office/word/2012/wordml\",\n        wpg: \"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\",\n        wpi: \"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\",\n        wne: \"http://schemas.microsoft.com/office/word/2006/wordml\",\n        wps: \"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\",\n        Ignorable: \"w14 w15 wp14\"\n      })\n    );\n    this.root.push(new OnOffElement(\"w:displayBackgroundShape\", true));\n    if (options2.trackRevisions !== void 0) {\n      this.root.push(new OnOffElement(\"w:trackRevisions\", options2.trackRevisions));\n    }\n    if (options2.evenAndOddHeaders !== void 0) {\n      this.root.push(new OnOffElement(\"w:evenAndOddHeaders\", options2.evenAndOddHeaders));\n    }\n    if (options2.updateFields !== void 0) {\n      this.root.push(new OnOffElement(\"w:updateFields\", options2.updateFields));\n    }\n    if (options2.defaultTabStop !== void 0) {\n      this.root.push(new NumberValueElement(\"w:defaultTabStop\", options2.defaultTabStop));\n    }\n    if (((_a = options2.hyphenation) == null ? void 0 : _a.autoHyphenation) !== void 0) {\n      this.root.push(new OnOffElement(\"w:autoHyphenation\", options2.hyphenation.autoHyphenation));\n    }\n    if (((_b = options2.hyphenation) == null ? void 0 : _b.hyphenationZone) !== void 0) {\n      this.root.push(new NumberValueElement(\"w:hyphenationZone\", options2.hyphenation.hyphenationZone));\n    }\n    if (((_c = options2.hyphenation) == null ? void 0 : _c.consecutiveHyphenLimit) !== void 0) {\n      this.root.push(new NumberValueElement(\"w:consecutiveHyphenLimit\", options2.hyphenation.consecutiveHyphenLimit));\n    }\n    if (((_d = options2.hyphenation) == null ? void 0 : _d.doNotHyphenateCaps) !== void 0) {\n      this.root.push(new OnOffElement(\"w:doNotHyphenateCaps\", options2.hyphenation.doNotHyphenateCaps));\n    }\n    this.root.push(\n      new Compatibility(__spreadProps(__spreadValues({}, (_e = options2.compatibility) != null ? _e : {}), {\n        version: (_h = (_g = (_f = options2.compatibility) == null ? void 0 : _f.version) != null ? _g : options2.compatibilityModeVersion) != null ? _h : 15\n      }))\n    );\n  }\n}\nclass ComponentAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { val: \"w:val\" });\n  }\n}\nclass Name extends XmlComponent {\n  constructor(value) {\n    super(\"w:name\");\n    this.root.push(new ComponentAttributes({ val: value }));\n  }\n}\nclass UiPriority extends XmlComponent {\n  constructor(value) {\n    super(\"w:uiPriority\");\n    this.root.push(new ComponentAttributes({ val: decimalNumber(value) }));\n  }\n}\nclass StyleAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      type: \"w:type\",\n      styleId: \"w:styleId\",\n      default: \"w:default\",\n      customStyle: \"w:customStyle\"\n    });\n  }\n}\nclass Style2 extends XmlComponent {\n  constructor(attributes, options2) {\n    super(\"w:style\");\n    this.root.push(new StyleAttributes(attributes));\n    if (options2.name) {\n      this.root.push(new Name(options2.name));\n    }\n    if (options2.basedOn) {\n      this.root.push(new StringValueElement(\"w:basedOn\", options2.basedOn));\n    }\n    if (options2.next) {\n      this.root.push(new StringValueElement(\"w:next\", options2.next));\n    }\n    if (options2.link) {\n      this.root.push(new StringValueElement(\"w:link\", options2.link));\n    }\n    if (options2.uiPriority !== void 0) {\n      this.root.push(new UiPriority(options2.uiPriority));\n    }\n    if (options2.semiHidden !== void 0) {\n      this.root.push(new OnOffElement(\"w:semiHidden\", options2.semiHidden));\n    }\n    if (options2.unhideWhenUsed !== void 0) {\n      this.root.push(new OnOffElement(\"w:unhideWhenUsed\", options2.unhideWhenUsed));\n    }\n    if (options2.quickFormat !== void 0) {\n      this.root.push(new OnOffElement(\"w:qFormat\", options2.quickFormat));\n    }\n  }\n}\nclass StyleForParagraph extends Style2 {\n  constructor(options2) {\n    super({ type: \"paragraph\", styleId: options2.id }, options2);\n    __publicField(this, \"paragraphProperties\");\n    __publicField(this, \"runProperties\");\n    this.paragraphProperties = new ParagraphProperties(options2.paragraph);\n    this.runProperties = new RunProperties(options2.run);\n    this.root.push(this.paragraphProperties);\n    this.root.push(this.runProperties);\n  }\n}\nclass StyleForCharacter extends Style2 {\n  constructor(options2) {\n    super(\n      { type: \"character\", styleId: options2.id },\n      __spreadValues({\n        uiPriority: 99,\n        unhideWhenUsed: true\n      }, options2)\n    );\n    __publicField(this, \"runProperties\");\n    this.runProperties = new RunProperties(options2.run);\n    this.root.push(this.runProperties);\n  }\n}\nclass HeadingStyle extends StyleForParagraph {\n  constructor(options2) {\n    super(__spreadValues({\n      basedOn: \"Normal\",\n      next: \"Normal\",\n      quickFormat: true\n    }, options2));\n  }\n}\nclass TitleStyle extends HeadingStyle {\n  constructor(options2) {\n    super(__spreadValues({\n      id: \"Title\",\n      name: \"Title\"\n    }, options2));\n  }\n}\nclass Heading1Style extends HeadingStyle {\n  constructor(options2) {\n    super(__spreadValues({\n      id: \"Heading1\",\n      name: \"Heading 1\"\n    }, options2));\n  }\n}\nclass Heading2Style extends HeadingStyle {\n  constructor(options2) {\n    super(__spreadValues({\n      id: \"Heading2\",\n      name: \"Heading 2\"\n    }, options2));\n  }\n}\nclass Heading3Style extends HeadingStyle {\n  constructor(options2) {\n    super(__spreadValues({\n      id: \"Heading3\",\n      name: \"Heading 3\"\n    }, options2));\n  }\n}\nclass Heading4Style extends HeadingStyle {\n  constructor(options2) {\n    super(__spreadValues({\n      id: \"Heading4\",\n      name: \"Heading 4\"\n    }, options2));\n  }\n}\nclass Heading5Style extends HeadingStyle {\n  constructor(options2) {\n    super(__spreadValues({\n      id: \"Heading5\",\n      name: \"Heading 5\"\n    }, options2));\n  }\n}\nclass Heading6Style extends HeadingStyle {\n  constructor(options2) {\n    super(__spreadValues({\n      id: \"Heading6\",\n      name: \"Heading 6\"\n    }, options2));\n  }\n}\nclass StrongStyle extends HeadingStyle {\n  constructor(options2) {\n    super(__spreadValues({\n      id: \"Strong\",\n      name: \"Strong\"\n    }, options2));\n  }\n}\nclass ListParagraph extends StyleForParagraph {\n  constructor(options2) {\n    super(__spreadValues({\n      id: \"ListParagraph\",\n      name: \"List Paragraph\",\n      basedOn: \"Normal\",\n      quickFormat: true\n    }, options2));\n  }\n}\nclass FootnoteText extends StyleForParagraph {\n  constructor(options2) {\n    super(__spreadValues({\n      id: \"FootnoteText\",\n      name: \"footnote text\",\n      link: \"FootnoteTextChar\",\n      basedOn: \"Normal\",\n      uiPriority: 99,\n      semiHidden: true,\n      unhideWhenUsed: true,\n      paragraph: {\n        spacing: {\n          after: 0,\n          line: 240,\n          lineRule: LineRuleType.AUTO\n        }\n      },\n      run: {\n        size: 20\n      }\n    }, options2));\n  }\n}\nclass FootnoteReferenceStyle extends StyleForCharacter {\n  constructor(options2) {\n    super(__spreadValues({\n      id: \"FootnoteReference\",\n      name: \"footnote reference\",\n      basedOn: \"DefaultParagraphFont\",\n      semiHidden: true,\n      run: {\n        superScript: true\n      }\n    }, options2));\n  }\n}\nclass FootnoteTextChar extends StyleForCharacter {\n  constructor(options2) {\n    super(__spreadValues({\n      id: \"FootnoteTextChar\",\n      name: \"Footnote Text Char\",\n      basedOn: \"DefaultParagraphFont\",\n      link: \"FootnoteText\",\n      semiHidden: true,\n      run: {\n        size: 20\n      }\n    }, options2));\n  }\n}\nclass HyperlinkStyle extends StyleForCharacter {\n  constructor(options2) {\n    super(__spreadValues({\n      id: \"Hyperlink\",\n      name: \"Hyperlink\",\n      basedOn: \"DefaultParagraphFont\",\n      run: {\n        color: \"0563C1\",\n        underline: {\n          type: UnderlineType.SINGLE\n        }\n      }\n    }, options2));\n  }\n}\nclass Styles extends XmlComponent {\n  constructor(options2) {\n    super(\"w:styles\");\n    if (options2.initialStyles) {\n      this.root.push(options2.initialStyles);\n    }\n    if (options2.importedStyles) {\n      for (const style of options2.importedStyles) {\n        this.root.push(style);\n      }\n    }\n    if (options2.paragraphStyles) {\n      for (const style of options2.paragraphStyles) {\n        this.root.push(new StyleForParagraph(style));\n      }\n    }\n    if (options2.characterStyles) {\n      for (const style of options2.characterStyles) {\n        this.root.push(new StyleForCharacter(style));\n      }\n    }\n  }\n}\nclass ParagraphPropertiesDefaults extends XmlComponent {\n  constructor(options2) {\n    super(\"w:pPrDefault\");\n    this.root.push(new ParagraphProperties(options2));\n  }\n}\nclass RunPropertiesDefaults extends XmlComponent {\n  constructor(options2) {\n    super(\"w:rPrDefault\");\n    this.root.push(new RunProperties(options2));\n  }\n}\nclass DocumentDefaults extends XmlComponent {\n  constructor(options2) {\n    super(\"w:docDefaults\");\n    __publicField(this, \"runPropertiesDefaults\");\n    __publicField(this, \"paragraphPropertiesDefaults\");\n    this.runPropertiesDefaults = new RunPropertiesDefaults(options2.run);\n    this.paragraphPropertiesDefaults = new ParagraphPropertiesDefaults(options2.paragraph);\n    this.root.push(this.runPropertiesDefaults);\n    this.root.push(this.paragraphPropertiesDefaults);\n  }\n}\nclass ExternalStylesFactory {\n  /**\n   * Creates new Style based on the given styles.\n   * Parses the styles and convert them to XmlComponent.\n   * Example content from styles.xml:\n   * <?xml version=\"1.0\">\n   * <w:styles xmlns:mc=\"some schema\" ...>\n   *\n   *   <w:style w:type=\"paragraph\" w:styleId=\"Heading1\">\n   *           <w:name w:val=\"heading 1\"/>\n   *           .....\n   *   </w:style>\n   *\n   *   <w:style w:type=\"paragraph\" w:styleId=\"Heading2\">\n   *           <w:name w:val=\"heading 2\"/>\n   *           .....\n   *   </w:style>\n   *\n   *   <w:docDefaults>Or any other element will be parsed to</w:docDefaults>\n   *\n   * </w:styles>\n   *\n   * @param externalStyles context from styles.xml\n   */\n  newInstance(xmlData) {\n    const xmlObj = lib.xml2js(xmlData, { compact: false });\n    let stylesXmlElement;\n    for (const xmlElm of xmlObj.elements || []) {\n      if (xmlElm.name === \"w:styles\") {\n        stylesXmlElement = xmlElm;\n      }\n    }\n    if (stylesXmlElement === void 0) {\n      throw new Error(\"can not find styles element\");\n    }\n    const stylesElements = stylesXmlElement.elements || [];\n    const importedStyle = new Styles({\n      initialStyles: new ImportedRootElementAttributes(stylesXmlElement.attributes),\n      importedStyles: stylesElements.map((childElm) => convertToXmlComponent(childElm))\n    });\n    return importedStyle;\n  }\n}\nclass DefaultStylesFactory {\n  newInstance(options2 = {}) {\n    var _a;\n    const documentAttributes = new DocumentAttributes({\n      mc: \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\n      r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\",\n      w: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\n      w14: \"http://schemas.microsoft.com/office/word/2010/wordml\",\n      w15: \"http://schemas.microsoft.com/office/word/2012/wordml\",\n      Ignorable: \"w14 w15\"\n    });\n    return {\n      initialStyles: documentAttributes,\n      importedStyles: [\n        new DocumentDefaults((_a = options2.document) != null ? _a : {}),\n        new TitleStyle(__spreadValues({\n          run: {\n            size: 56\n          }\n        }, options2.title)),\n        new Heading1Style(__spreadValues({\n          run: {\n            color: \"2E74B5\",\n            size: 32\n          }\n        }, options2.heading1)),\n        new Heading2Style(__spreadValues({\n          run: {\n            color: \"2E74B5\",\n            size: 26\n          }\n        }, options2.heading2)),\n        new Heading3Style(__spreadValues({\n          run: {\n            color: \"1F4D78\",\n            size: 24\n          }\n        }, options2.heading3)),\n        new Heading4Style(__spreadValues({\n          run: {\n            color: \"2E74B5\",\n            italics: true\n          }\n        }, options2.heading4)),\n        new Heading5Style(__spreadValues({\n          run: {\n            color: \"2E74B5\"\n          }\n        }, options2.heading5)),\n        new Heading6Style(__spreadValues({\n          run: {\n            color: \"1F4D78\"\n          }\n        }, options2.heading6)),\n        new StrongStyle(__spreadValues({\n          run: {\n            bold: true\n          }\n        }, options2.strong)),\n        new ListParagraph(options2.listParagraph || {}),\n        new HyperlinkStyle(options2.hyperlink || {}),\n        new FootnoteReferenceStyle(options2.footnoteReference || {}),\n        new FootnoteText(options2.footnoteText || {}),\n        new FootnoteTextChar(options2.footnoteTextChar || {})\n      ]\n    };\n  }\n}\nclass File {\n  constructor(options2) {\n    // eslint-disable-next-line functional/prefer-readonly-type\n    __publicField(this, \"currentRelationshipId\", 1);\n    __publicField(this, \"documentWrapper\");\n    // eslint-disable-next-line functional/prefer-readonly-type\n    __publicField(this, \"headers\", []);\n    // eslint-disable-next-line functional/prefer-readonly-type\n    __publicField(this, \"footers\", []);\n    __publicField(this, \"coreProperties\");\n    __publicField(this, \"numbering\");\n    __publicField(this, \"media\");\n    __publicField(this, \"fileRelationships\");\n    __publicField(this, \"footnotesWrapper\");\n    __publicField(this, \"settings\");\n    __publicField(this, \"contentTypes\");\n    __publicField(this, \"customProperties\");\n    __publicField(this, \"appProperties\");\n    __publicField(this, \"styles\");\n    __publicField(this, \"comments\");\n    __publicField(this, \"fontWrapper\");\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;\n    this.coreProperties = new CoreProperties(__spreadProps(__spreadValues({}, options2), {\n      creator: (_a = options2.creator) != null ? _a : \"Un-named\",\n      revision: (_b = options2.revision) != null ? _b : 1,\n      lastModifiedBy: (_c = options2.lastModifiedBy) != null ? _c : \"Un-named\"\n    }));\n    this.numbering = new Numbering(options2.numbering ? options2.numbering : { config: [] });\n    this.comments = new Comments((_d = options2.comments) != null ? _d : { children: [] });\n    this.fileRelationships = new Relationships();\n    this.customProperties = new CustomProperties((_e = options2.customProperties) != null ? _e : []);\n    this.appProperties = new AppProperties();\n    this.footnotesWrapper = new FootnotesWrapper();\n    this.contentTypes = new ContentTypes();\n    this.documentWrapper = new DocumentWrapper({ background: options2.background });\n    this.settings = new Settings({\n      compatibilityModeVersion: options2.compatabilityModeVersion,\n      compatibility: options2.compatibility,\n      evenAndOddHeaders: options2.evenAndOddHeaderAndFooters ? true : false,\n      trackRevisions: (_f = options2.features) == null ? void 0 : _f.trackRevisions,\n      updateFields: (_g = options2.features) == null ? void 0 : _g.updateFields,\n      defaultTabStop: options2.defaultTabStop,\n      hyphenation: {\n        autoHyphenation: (_h = options2.hyphenation) == null ? void 0 : _h.autoHyphenation,\n        hyphenationZone: (_i = options2.hyphenation) == null ? void 0 : _i.hyphenationZone,\n        consecutiveHyphenLimit: (_j = options2.hyphenation) == null ? void 0 : _j.consecutiveHyphenLimit,\n        doNotHyphenateCaps: (_k = options2.hyphenation) == null ? void 0 : _k.doNotHyphenateCaps\n      }\n    });\n    this.media = new Media();\n    if (options2.externalStyles !== void 0) {\n      const stylesFactory = new ExternalStylesFactory();\n      this.styles = stylesFactory.newInstance(options2.externalStyles);\n    } else if (options2.styles) {\n      const stylesFactory = new DefaultStylesFactory();\n      const defaultStyles = stylesFactory.newInstance(options2.styles.default);\n      this.styles = new Styles(__spreadValues(__spreadValues({}, defaultStyles), options2.styles));\n    } else {\n      const stylesFactory = new DefaultStylesFactory();\n      this.styles = new Styles(stylesFactory.newInstance());\n    }\n    this.addDefaultRelationships();\n    for (const section of options2.sections) {\n      this.addSection(section);\n    }\n    if (options2.footnotes) {\n      for (const key in options2.footnotes) {\n        this.footnotesWrapper.View.createFootNote(parseFloat(key), options2.footnotes[key].children);\n      }\n    }\n    this.fontWrapper = new FontWrapper((_l = options2.fonts) != null ? _l : []);\n  }\n  addSection({ headers = {}, footers = {}, children, properties }) {\n    this.documentWrapper.View.Body.addSection(__spreadProps(__spreadValues({}, properties), {\n      headerWrapperGroup: {\n        default: headers.default ? this.createHeader(headers.default) : void 0,\n        first: headers.first ? this.createHeader(headers.first) : void 0,\n        even: headers.even ? this.createHeader(headers.even) : void 0\n      },\n      footerWrapperGroup: {\n        default: footers.default ? this.createFooter(footers.default) : void 0,\n        first: footers.first ? this.createFooter(footers.first) : void 0,\n        even: footers.even ? this.createFooter(footers.even) : void 0\n      }\n    }));\n    for (const child of children) {\n      this.documentWrapper.View.add(child);\n    }\n  }\n  createHeader(header) {\n    const wrapper = new HeaderWrapper(this.media, this.currentRelationshipId++);\n    for (const child of header.options.children) {\n      wrapper.add(child);\n    }\n    this.addHeaderToDocument(wrapper);\n    return wrapper;\n  }\n  createFooter(footer) {\n    const wrapper = new FooterWrapper(this.media, this.currentRelationshipId++);\n    for (const child of footer.options.children) {\n      wrapper.add(child);\n    }\n    this.addFooterToDocument(wrapper);\n    return wrapper;\n  }\n  addHeaderToDocument(header, type2 = HeaderFooterReferenceType.DEFAULT) {\n    this.headers.push({ header, type: type2 });\n    this.documentWrapper.Relationships.createRelationship(\n      header.View.ReferenceId,\n      \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header\",\n      `header${this.headers.length}.xml`\n    );\n    this.contentTypes.addHeader(this.headers.length);\n  }\n  addFooterToDocument(footer, type2 = HeaderFooterReferenceType.DEFAULT) {\n    this.footers.push({ footer, type: type2 });\n    this.documentWrapper.Relationships.createRelationship(\n      footer.View.ReferenceId,\n      \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer\",\n      `footer${this.footers.length}.xml`\n    );\n    this.contentTypes.addFooter(this.footers.length);\n  }\n  addDefaultRelationships() {\n    this.fileRelationships.createRelationship(\n      1,\n      \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\n      \"word/document.xml\"\n    );\n    this.fileRelationships.createRelationship(\n      2,\n      \"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\",\n      \"docProps/core.xml\"\n    );\n    this.fileRelationships.createRelationship(\n      3,\n      \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\",\n      \"docProps/app.xml\"\n    );\n    this.fileRelationships.createRelationship(\n      4,\n      \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties\",\n      \"docProps/custom.xml\"\n    );\n    this.documentWrapper.Relationships.createRelationship(\n      // eslint-disable-next-line functional/immutable-data\n      this.currentRelationshipId++,\n      \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\n      \"styles.xml\"\n    );\n    this.documentWrapper.Relationships.createRelationship(\n      // eslint-disable-next-line functional/immutable-data\n      this.currentRelationshipId++,\n      \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\n      \"numbering.xml\"\n    );\n    this.documentWrapper.Relationships.createRelationship(\n      // eslint-disable-next-line functional/immutable-data\n      this.currentRelationshipId++,\n      \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footnotes\",\n      \"footnotes.xml\"\n    );\n    this.documentWrapper.Relationships.createRelationship(\n      // eslint-disable-next-line functional/immutable-data\n      this.currentRelationshipId++,\n      \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\n      \"settings.xml\"\n    );\n    this.documentWrapper.Relationships.createRelationship(\n      // eslint-disable-next-line functional/immutable-data\n      this.currentRelationshipId++,\n      \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments\",\n      \"comments.xml\"\n    );\n  }\n  get Document() {\n    return this.documentWrapper;\n  }\n  get Styles() {\n    return this.styles;\n  }\n  get CoreProperties() {\n    return this.coreProperties;\n  }\n  get Numbering() {\n    return this.numbering;\n  }\n  get Media() {\n    return this.media;\n  }\n  get FileRelationships() {\n    return this.fileRelationships;\n  }\n  get Headers() {\n    return this.headers.map((item) => item.header);\n  }\n  get Footers() {\n    return this.footers.map((item) => item.footer);\n  }\n  get ContentTypes() {\n    return this.contentTypes;\n  }\n  get CustomProperties() {\n    return this.customProperties;\n  }\n  get AppProperties() {\n    return this.appProperties;\n  }\n  get FootNotes() {\n    return this.footnotesWrapper;\n  }\n  get Settings() {\n    return this.settings;\n  }\n  get Comments() {\n    return this.comments;\n  }\n  get FontTable() {\n    return this.fontWrapper;\n  }\n}\nclass FieldInstruction extends XmlComponent {\n  constructor(properties = {}) {\n    super(\"w:instrText\");\n    __publicField(this, \"properties\");\n    this.properties = properties;\n    this.root.push(new TextAttributes({ space: SpaceType.PRESERVE }));\n    let instruction = \"TOC\";\n    if (this.properties.captionLabel) {\n      instruction = `${instruction} \\\\a \"${this.properties.captionLabel}\"`;\n    }\n    if (this.properties.entriesFromBookmark) {\n      instruction = `${instruction} \\\\b \"${this.properties.entriesFromBookmark}\"`;\n    }\n    if (this.properties.captionLabelIncludingNumbers) {\n      instruction = `${instruction} \\\\c \"${this.properties.captionLabelIncludingNumbers}\"`;\n    }\n    if (this.properties.sequenceAndPageNumbersSeparator) {\n      instruction = `${instruction} \\\\d \"${this.properties.sequenceAndPageNumbersSeparator}\"`;\n    }\n    if (this.properties.tcFieldIdentifier) {\n      instruction = `${instruction} \\\\f \"${this.properties.tcFieldIdentifier}\"`;\n    }\n    if (this.properties.hyperlink) {\n      instruction = `${instruction} \\\\h`;\n    }\n    if (this.properties.tcFieldLevelRange) {\n      instruction = `${instruction} \\\\l \"${this.properties.tcFieldLevelRange}\"`;\n    }\n    if (this.properties.pageNumbersEntryLevelsRange) {\n      instruction = `${instruction} \\\\n \"${this.properties.pageNumbersEntryLevelsRange}\"`;\n    }\n    if (this.properties.headingStyleRange) {\n      instruction = `${instruction} \\\\o \"${this.properties.headingStyleRange}\"`;\n    }\n    if (this.properties.entryAndPageNumberSeparator) {\n      instruction = `${instruction} \\\\p \"${this.properties.entryAndPageNumberSeparator}\"`;\n    }\n    if (this.properties.seqFieldIdentifierForPrefix) {\n      instruction = `${instruction} \\\\s \"${this.properties.seqFieldIdentifierForPrefix}\"`;\n    }\n    if (this.properties.stylesWithLevels && this.properties.stylesWithLevels.length) {\n      const styles = this.properties.stylesWithLevels.map((sl) => `${sl.styleName},${sl.level}`).join(\",\");\n      instruction = `${instruction} \\\\t \"${styles}\"`;\n    }\n    if (this.properties.useAppliedParagraphOutlineLevel) {\n      instruction = `${instruction} \\\\u`;\n    }\n    if (this.properties.preserveTabInEntries) {\n      instruction = `${instruction} \\\\w`;\n    }\n    if (this.properties.preserveNewLineInEntries) {\n      instruction = `${instruction} \\\\x`;\n    }\n    if (this.properties.hideTabAndPageNumbersInWebView) {\n      instruction = `${instruction} \\\\z`;\n    }\n    this.root.push(instruction);\n  }\n}\nclass StructuredDocumentTagContent extends XmlComponent {\n  constructor() {\n    super(\"w:sdtContent\");\n  }\n}\nclass StructuredDocumentTagProperties extends XmlComponent {\n  constructor(alias) {\n    super(\"w:sdtPr\");\n    if (alias) {\n      this.root.push(new StringValueElement(\"w:alias\", alias));\n    }\n  }\n}\nclass TableOfContents extends FileChild {\n  constructor(alias = \"Table of Contents\", properties) {\n    super(\"w:sdt\");\n    this.root.push(new StructuredDocumentTagProperties(alias));\n    const content = new StructuredDocumentTagContent();\n    const beginParagraph = new Paragraph({\n      children: [\n        new Run({\n          children: [new Begin(true), new FieldInstruction(properties), new Separate()]\n        })\n      ]\n    });\n    content.addChildElement(beginParagraph);\n    const endParagraph = new Paragraph({\n      children: [\n        new Run({\n          children: [new End()]\n        })\n      ]\n    });\n    content.addChildElement(endParagraph);\n    this.root.push(content);\n  }\n}\nclass StyleLevel {\n  constructor(styleName, level) {\n    __publicField(this, \"styleName\");\n    __publicField(this, \"level\");\n    this.styleName = styleName;\n    this.level = level;\n  }\n}\nclass Header2 {\n  constructor(options2 = { children: [] }) {\n    __publicField(this, \"options\");\n    this.options = options2;\n  }\n}\nclass Footer2 {\n  constructor(options2 = { children: [] }) {\n    __publicField(this, \"options\");\n    this.options = options2;\n  }\n}\nclass FootNoteReferenceRunAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      id: \"w:id\"\n    });\n  }\n}\nclass FootnoteReference extends XmlComponent {\n  constructor(id) {\n    super(\"w:footnoteReference\");\n    this.root.push(\n      new FootNoteReferenceRunAttributes({\n        id\n      })\n    );\n  }\n}\nclass FootnoteReferenceRun extends Run {\n  constructor(id) {\n    super({ style: \"FootnoteReference\" });\n    this.root.push(new FootnoteReference(id));\n  }\n}\nclass InsertedTextRun extends XmlComponent {\n  constructor(options2) {\n    super(\"w:ins\");\n    this.root.push(\n      new ChangeAttributes({\n        id: options2.id,\n        author: options2.author,\n        date: options2.date\n      })\n    );\n    this.addChildElement(new TextRun(options2));\n  }\n}\nclass DeletedPage extends XmlComponent {\n  constructor() {\n    super(\"w:delInstrText\");\n    this.root.push(new TextAttributes({ space: SpaceType.PRESERVE }));\n    this.root.push(\"PAGE\");\n  }\n}\nclass DeletedNumberOfPages extends XmlComponent {\n  constructor() {\n    super(\"w:delInstrText\");\n    this.root.push(new TextAttributes({ space: SpaceType.PRESERVE }));\n    this.root.push(\"NUMPAGES\");\n  }\n}\nclass DeletedNumberOfPagesSection extends XmlComponent {\n  constructor() {\n    super(\"w:delInstrText\");\n    this.root.push(new TextAttributes({ space: SpaceType.PRESERVE }));\n    this.root.push(\"SECTIONPAGES\");\n  }\n}\nclass DeletedText extends XmlComponent {\n  constructor(text) {\n    super(\"w:delText\");\n    this.root.push(new TextAttributes({ space: SpaceType.PRESERVE }));\n    this.root.push(text);\n  }\n}\nclass DeletedTextRun extends XmlComponent {\n  constructor(options2) {\n    super(\"w:del\");\n    __publicField(this, \"deletedTextRunWrapper\");\n    this.root.push(\n      new ChangeAttributes({\n        id: options2.id,\n        author: options2.author,\n        date: options2.date\n      })\n    );\n    this.deletedTextRunWrapper = new DeletedTextRunWrapper(options2);\n    this.addChildElement(this.deletedTextRunWrapper);\n  }\n}\nclass DeletedTextRunWrapper extends XmlComponent {\n  constructor(options2) {\n    super(\"w:r\");\n    this.root.push(new RunProperties(options2));\n    if (options2.children) {\n      for (const child of options2.children) {\n        if (typeof child === \"string\") {\n          switch (child) {\n            case PageNumber.CURRENT:\n              this.root.push(new Begin());\n              this.root.push(new DeletedPage());\n              this.root.push(new Separate());\n              this.root.push(new End());\n              break;\n            case PageNumber.TOTAL_PAGES:\n              this.root.push(new Begin());\n              this.root.push(new DeletedNumberOfPages());\n              this.root.push(new Separate());\n              this.root.push(new End());\n              break;\n            case PageNumber.TOTAL_PAGES_IN_SECTION:\n              this.root.push(new Begin());\n              this.root.push(new DeletedNumberOfPagesSection());\n              this.root.push(new Separate());\n              this.root.push(new End());\n              break;\n            default:\n              this.root.push(new DeletedText(child));\n              break;\n          }\n          continue;\n        }\n        this.root.push(child);\n      }\n    } else if (options2.text) {\n      this.root.push(new DeletedText(options2.text));\n    }\n    if (options2.break) {\n      for (let i = 0; i < options2.break; i++) {\n        this.root.splice(1, 0, new Break$1());\n      }\n    }\n  }\n}\nclass CheckboxSymbolAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      val: \"w14:val\",\n      symbolfont: \"w14:font\"\n    });\n  }\n}\nclass CheckBoxSymbolElement extends XmlComponent {\n  constructor(name, val, font) {\n    super(name);\n    if (font) {\n      this.root.push(new CheckboxSymbolAttributes({ val: shortHexNumber(val), symbolfont: font }));\n    } else {\n      this.root.push(new CheckboxSymbolAttributes({ val }));\n    }\n  }\n}\nclass CheckBoxUtil extends XmlComponent {\n  constructor(options2) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    super(\"w14:checkbox\");\n    __publicField(this, \"DEFAULT_UNCHECKED_SYMBOL\", \"2610\");\n    __publicField(this, \"DEFAULT_CHECKED_SYMBOL\", \"2612\");\n    __publicField(this, \"DEFAULT_FONT\", \"MS Gothic\");\n    const value = (options2 == null ? void 0 : options2.checked) ? \"1\" : \"0\";\n    let symbol;\n    let font;\n    this.root.push(new CheckBoxSymbolElement(\"w14:checked\", value));\n    symbol = ((_a = options2 == null ? void 0 : options2.checkedState) == null ? void 0 : _a.value) ? (_b = options2 == null ? void 0 : options2.checkedState) == null ? void 0 : _b.value : this.DEFAULT_CHECKED_SYMBOL;\n    font = ((_c = options2 == null ? void 0 : options2.checkedState) == null ? void 0 : _c.font) ? (_d = options2 == null ? void 0 : options2.checkedState) == null ? void 0 : _d.font : this.DEFAULT_FONT;\n    this.root.push(new CheckBoxSymbolElement(\"w14:checkedState\", symbol, font));\n    symbol = ((_e = options2 == null ? void 0 : options2.uncheckedState) == null ? void 0 : _e.value) ? (_f = options2 == null ? void 0 : options2.uncheckedState) == null ? void 0 : _f.value : this.DEFAULT_UNCHECKED_SYMBOL;\n    font = ((_g = options2 == null ? void 0 : options2.uncheckedState) == null ? void 0 : _g.font) ? (_h = options2 == null ? void 0 : options2.uncheckedState) == null ? void 0 : _h.font : this.DEFAULT_FONT;\n    this.root.push(new CheckBoxSymbolElement(\"w14:uncheckedState\", symbol, font));\n  }\n}\nclass CheckBox extends XmlComponent {\n  constructor(options2) {\n    var _a, _b, _c, _d;\n    super(\"w:sdt\");\n    // default values per Microsoft\n    __publicField(this, \"DEFAULT_UNCHECKED_SYMBOL\", \"2610\");\n    __publicField(this, \"DEFAULT_CHECKED_SYMBOL\", \"2612\");\n    __publicField(this, \"DEFAULT_FONT\", \"MS Gothic\");\n    const properties = new StructuredDocumentTagProperties(options2 == null ? void 0 : options2.alias);\n    properties.addChildElement(new CheckBoxUtil(options2));\n    this.root.push(properties);\n    const content = new StructuredDocumentTagContent();\n    const checkedFont = (_a = options2 == null ? void 0 : options2.checkedState) == null ? void 0 : _a.font;\n    const checkedText = (_b = options2 == null ? void 0 : options2.checkedState) == null ? void 0 : _b.value;\n    const uncheckedFont = (_c = options2 == null ? void 0 : options2.uncheckedState) == null ? void 0 : _c.font;\n    const uncheckedText = (_d = options2 == null ? void 0 : options2.uncheckedState) == null ? void 0 : _d.value;\n    let symbolFont;\n    let char;\n    if (options2 == null ? void 0 : options2.checked) {\n      symbolFont = checkedFont ? checkedFont : this.DEFAULT_FONT;\n      char = checkedText ? checkedText : this.DEFAULT_CHECKED_SYMBOL;\n    } else {\n      symbolFont = uncheckedFont ? uncheckedFont : this.DEFAULT_FONT;\n      char = uncheckedText ? uncheckedText : this.DEFAULT_UNCHECKED_SYMBOL;\n    }\n    const initialRenderedChar = new SymbolRun({\n      char,\n      symbolfont: symbolFont\n    });\n    content.addChildElement(initialRenderedChar);\n    this.root.push(content);\n  }\n}\nconst createPictElement = ({ shape }) => new BuilderElement({\n  name: \"w:pict\",\n  children: [shape]\n});\nconst createTextboxContent = ({ children = [] }) => new BuilderElement({\n  name: \"w:txbxContent\",\n  children\n});\nconst createVmlTextbox = ({ style, children, inset }) => new BuilderElement({\n  name: \"v:textbox\",\n  attributes: {\n    style: {\n      key: \"style\",\n      value: style\n    },\n    insetMode: {\n      key: \"insetmode\",\n      value: inset ? \"custom\" : \"auto\"\n    },\n    inset: {\n      key: \"inset\",\n      value: inset ? `${inset.left}, ${inset.top}, ${inset.right}, ${inset.bottom}` : void 0\n    }\n  },\n  children: [createTextboxContent({ children })]\n});\nconst SHAPE_TYPE = \"#_x0000_t202\";\nconst styleToKeyMap = {\n  flip: \"flip\",\n  height: \"height\",\n  left: \"left\",\n  marginBottom: \"margin-bottom\",\n  marginLeft: \"margin-left\",\n  marginRight: \"margin-right\",\n  marginTop: \"margin-top\",\n  positionHorizontal: \"mso-position-horizontal\",\n  positionHorizontalRelative: \"mso-position-horizontal-relative\",\n  positionVertical: \"mso-position-vertical\",\n  positionVerticalRelative: \"mso-position-vertical-relative\",\n  wrapDistanceBottom: \"mso-wrap-distance-bottom\",\n  wrapDistanceLeft: \"mso-wrap-distance-left\",\n  wrapDistanceRight: \"mso-wrap-distance-right\",\n  wrapDistanceTop: \"mso-wrap-distance-top\",\n  wrapEdited: \"mso-wrap-edited\",\n  wrapStyle: \"mso-wrap-style\",\n  position: \"position\",\n  rotation: \"rotation\",\n  top: \"top\",\n  visibility: \"visibility\",\n  width: \"width\",\n  zIndex: \"z-index\"\n};\nconst formatShapeStyle = (style) => style ? Object.entries(style).map(([key, value]) => `${styleToKeyMap[key]}:${value}`).join(\";\") : void 0;\nconst createShape = ({\n  id,\n  children,\n  type: type2 = SHAPE_TYPE,\n  style\n}) => new BuilderElement({\n  name: \"v:shape\",\n  attributes: {\n    id: {\n      key: \"id\",\n      value: id\n    },\n    type: {\n      key: \"type\",\n      value: type2\n    },\n    style: {\n      key: \"style\",\n      value: formatShapeStyle(style)\n    }\n  },\n  children: [createVmlTextbox({ style: \"mso-fit-shape-to-text:t;\", children })]\n});\nclass Textbox extends FileChild {\n  constructor(_a) {\n    var _b = _a, { style, children } = _b, rest = __objRest(_b, [\"style\", \"children\"]);\n    super(\"w:p\");\n    this.root.push(new ParagraphProperties(rest));\n    this.root.push(\n      createPictElement({\n        shape: createShape({\n          children,\n          id: uniqueId(),\n          style\n        })\n      })\n    );\n  }\n}\nfunction commonjsRequire(path) {\n  throw new Error('Could not dynamically require \"' + path + '\". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');\n}\nvar jszip_min = { exports: {} };\n(function(module, exports) {\n  !function(e) {\n    module.exports = e();\n  }(function() {\n    return function s2(a, o, h) {\n      function u(r2, e2) {\n        if (!o[r2]) {\n          if (!a[r2]) {\n            var t = \"function\" == typeof commonjsRequire && commonjsRequire;\n            if (!e2 && t) return t(r2, true);\n            if (l) return l(r2, true);\n            var n = new Error(\"Cannot find module '\" + r2 + \"'\");\n            throw n.code = \"MODULE_NOT_FOUND\", n;\n          }\n          var i = o[r2] = { exports: {} };\n          a[r2][0].call(i.exports, function(e3) {\n            var t2 = a[r2][1][e3];\n            return u(t2 || e3);\n          }, i, i.exports, s2, a, o, h);\n        }\n        return o[r2].exports;\n      }\n      for (var l = \"function\" == typeof commonjsRequire && commonjsRequire, e = 0; e < h.length; e++) u(h[e]);\n      return u;\n    }({ 1: [function(e, t, r2) {\n      var d = e(\"./utils\"), c = e(\"./support\"), p = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n      r2.encode = function(e2) {\n        for (var t2, r3, n, i, s2, a, o, h = [], u = 0, l = e2.length, f2 = l, c2 = \"string\" !== d.getTypeOf(e2); u < e2.length; ) f2 = l - u, n = c2 ? (t2 = e2[u++], r3 = u < l ? e2[u++] : 0, u < l ? e2[u++] : 0) : (t2 = e2.charCodeAt(u++), r3 = u < l ? e2.charCodeAt(u++) : 0, u < l ? e2.charCodeAt(u++) : 0), i = t2 >> 2, s2 = (3 & t2) << 4 | r3 >> 4, a = 1 < f2 ? (15 & r3) << 2 | n >> 6 : 64, o = 2 < f2 ? 63 & n : 64, h.push(p.charAt(i) + p.charAt(s2) + p.charAt(a) + p.charAt(o));\n        return h.join(\"\");\n      }, r2.decode = function(e2) {\n        var t2, r3, n, i, s2, a, o = 0, h = 0, u = \"data:\";\n        if (e2.substr(0, u.length) === u) throw new Error(\"Invalid base64 input, it looks like a data url.\");\n        var l, f2 = 3 * (e2 = e2.replace(/[^A-Za-z0-9+/=]/g, \"\")).length / 4;\n        if (e2.charAt(e2.length - 1) === p.charAt(64) && f2--, e2.charAt(e2.length - 2) === p.charAt(64) && f2--, f2 % 1 != 0) throw new Error(\"Invalid base64 input, bad content length.\");\n        for (l = c.uint8array ? new Uint8Array(0 | f2) : new Array(0 | f2); o < e2.length; ) t2 = p.indexOf(e2.charAt(o++)) << 2 | (i = p.indexOf(e2.charAt(o++))) >> 4, r3 = (15 & i) << 4 | (s2 = p.indexOf(e2.charAt(o++))) >> 2, n = (3 & s2) << 6 | (a = p.indexOf(e2.charAt(o++))), l[h++] = t2, 64 !== s2 && (l[h++] = r3), 64 !== a && (l[h++] = n);\n        return l;\n      };\n    }, { \"./support\": 30, \"./utils\": 32 }], 2: [function(e, t, r2) {\n      var n = e(\"./external\"), i = e(\"./stream/DataWorker\"), s2 = e(\"./stream/Crc32Probe\"), a = e(\"./stream/DataLengthProbe\");\n      function o(e2, t2, r3, n2, i2) {\n        this.compressedSize = e2, this.uncompressedSize = t2, this.crc32 = r3, this.compression = n2, this.compressedContent = i2;\n      }\n      o.prototype = { getContentWorker: function() {\n        var e2 = new i(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a(\"data_length\")), t2 = this;\n        return e2.on(\"end\", function() {\n          if (this.streamInfo.data_length !== t2.uncompressedSize) throw new Error(\"Bug : uncompressed data size mismatch\");\n        }), e2;\n      }, getCompressedWorker: function() {\n        return new i(n.Promise.resolve(this.compressedContent)).withStreamInfo(\"compressedSize\", this.compressedSize).withStreamInfo(\"uncompressedSize\", this.uncompressedSize).withStreamInfo(\"crc32\", this.crc32).withStreamInfo(\"compression\", this.compression);\n      } }, o.createWorkerFrom = function(e2, t2, r3) {\n        return e2.pipe(new s2()).pipe(new a(\"uncompressedSize\")).pipe(t2.compressWorker(r3)).pipe(new a(\"compressedSize\")).withStreamInfo(\"compression\", t2);\n      }, t.exports = o;\n    }, { \"./external\": 6, \"./stream/Crc32Probe\": 25, \"./stream/DataLengthProbe\": 26, \"./stream/DataWorker\": 27 }], 3: [function(e, t, r2) {\n      var n = e(\"./stream/GenericWorker\");\n      r2.STORE = { magic: \"\\0\\0\", compressWorker: function() {\n        return new n(\"STORE compression\");\n      }, uncompressWorker: function() {\n        return new n(\"STORE decompression\");\n      } }, r2.DEFLATE = e(\"./flate\");\n    }, { \"./flate\": 7, \"./stream/GenericWorker\": 28 }], 4: [function(e, t, r2) {\n      var n = e(\"./utils\");\n      var o = function() {\n        for (var e2, t2 = [], r3 = 0; r3 < 256; r3++) {\n          e2 = r3;\n          for (var n2 = 0; n2 < 8; n2++) e2 = 1 & e2 ? 3988292384 ^ e2 >>> 1 : e2 >>> 1;\n          t2[r3] = e2;\n        }\n        return t2;\n      }();\n      t.exports = function(e2, t2) {\n        return void 0 !== e2 && e2.length ? \"string\" !== n.getTypeOf(e2) ? function(e3, t3, r3, n2) {\n          var i = o, s2 = n2 + r3;\n          e3 ^= -1;\n          for (var a = n2; a < s2; a++) e3 = e3 >>> 8 ^ i[255 & (e3 ^ t3[a])];\n          return -1 ^ e3;\n        }(0 | t2, e2, e2.length, 0) : function(e3, t3, r3, n2) {\n          var i = o, s2 = n2 + r3;\n          e3 ^= -1;\n          for (var a = n2; a < s2; a++) e3 = e3 >>> 8 ^ i[255 & (e3 ^ t3.charCodeAt(a))];\n          return -1 ^ e3;\n        }(0 | t2, e2, e2.length, 0) : 0;\n      };\n    }, { \"./utils\": 32 }], 5: [function(e, t, r2) {\n      r2.base64 = false, r2.binary = false, r2.dir = false, r2.createFolders = true, r2.date = null, r2.compression = null, r2.compressionOptions = null, r2.comment = null, r2.unixPermissions = null, r2.dosPermissions = null;\n    }, {}], 6: [function(e, t, r2) {\n      var n = null;\n      n = \"undefined\" != typeof Promise ? Promise : e(\"lie\"), t.exports = { Promise: n };\n    }, { lie: 37 }], 7: [function(e, t, r2) {\n      var n = \"undefined\" != typeof Uint8Array && \"undefined\" != typeof Uint16Array && \"undefined\" != typeof Uint32Array, i = e(\"pako\"), s2 = e(\"./utils\"), a = e(\"./stream/GenericWorker\"), o = n ? \"uint8array\" : \"array\";\n      function h(e2, t2) {\n        a.call(this, \"FlateWorker/\" + e2), this._pako = null, this._pakoAction = e2, this._pakoOptions = t2, this.meta = {};\n      }\n      r2.magic = \"\\b\\0\", s2.inherits(h, a), h.prototype.processChunk = function(e2) {\n        this.meta = e2.meta, null === this._pako && this._createPako(), this._pako.push(s2.transformTo(o, e2.data), false);\n      }, h.prototype.flush = function() {\n        a.prototype.flush.call(this), null === this._pako && this._createPako(), this._pako.push([], true);\n      }, h.prototype.cleanUp = function() {\n        a.prototype.cleanUp.call(this), this._pako = null;\n      }, h.prototype._createPako = function() {\n        this._pako = new i[this._pakoAction]({ raw: true, level: this._pakoOptions.level || -1 });\n        var t2 = this;\n        this._pako.onData = function(e2) {\n          t2.push({ data: e2, meta: t2.meta });\n        };\n      }, r2.compressWorker = function(e2) {\n        return new h(\"Deflate\", e2);\n      }, r2.uncompressWorker = function() {\n        return new h(\"Inflate\", {});\n      };\n    }, { \"./stream/GenericWorker\": 28, \"./utils\": 32, pako: 38 }], 8: [function(e, t, r2) {\n      function A(e2, t2) {\n        var r3, n2 = \"\";\n        for (r3 = 0; r3 < t2; r3++) n2 += String.fromCharCode(255 & e2), e2 >>>= 8;\n        return n2;\n      }\n      function n(e2, t2, r3, n2, i2, s3) {\n        var a, o, h = e2.file, u = e2.compression, l = s3 !== O.utf8encode, f2 = I.transformTo(\"string\", s3(h.name)), c = I.transformTo(\"string\", O.utf8encode(h.name)), d = h.comment, p = I.transformTo(\"string\", s3(d)), m = I.transformTo(\"string\", O.utf8encode(d)), _ = c.length !== h.name.length, g = m.length !== d.length, b = \"\", v = \"\", y = \"\", w = h.dir, k = h.date, x = { crc32: 0, compressedSize: 0, uncompressedSize: 0 };\n        t2 && !r3 || (x.crc32 = e2.crc32, x.compressedSize = e2.compressedSize, x.uncompressedSize = e2.uncompressedSize);\n        var S = 0;\n        t2 && (S |= 8), l || !_ && !g || (S |= 2048);\n        var z = 0, C = 0;\n        w && (z |= 16), \"UNIX\" === i2 ? (C = 798, z |= function(e3, t3) {\n          var r4 = e3;\n          return e3 || (r4 = t3 ? 16893 : 33204), (65535 & r4) << 16;\n        }(h.unixPermissions, w)) : (C = 20, z |= function(e3) {\n          return 63 & (e3 || 0);\n        }(h.dosPermissions)), a = k.getUTCHours(), a <<= 6, a |= k.getUTCMinutes(), a <<= 5, a |= k.getUTCSeconds() / 2, o = k.getUTCFullYear() - 1980, o <<= 4, o |= k.getUTCMonth() + 1, o <<= 5, o |= k.getUTCDate(), _ && (v = A(1, 1) + A(B(f2), 4) + c, b += \"up\" + A(v.length, 2) + v), g && (y = A(1, 1) + A(B(p), 4) + m, b += \"uc\" + A(y.length, 2) + y);\n        var E = \"\";\n        return E += \"\\n\\0\", E += A(S, 2), E += u.magic, E += A(a, 2), E += A(o, 2), E += A(x.crc32, 4), E += A(x.compressedSize, 4), E += A(x.uncompressedSize, 4), E += A(f2.length, 2), E += A(b.length, 2), { fileRecord: R2.LOCAL_FILE_HEADER + E + f2 + b, dirRecord: R2.CENTRAL_FILE_HEADER + A(C, 2) + E + A(p.length, 2) + \"\\0\\0\\0\\0\" + A(z, 4) + A(n2, 4) + f2 + b + p };\n      }\n      var I = e(\"../utils\"), i = e(\"../stream/GenericWorker\"), O = e(\"../utf8\"), B = e(\"../crc32\"), R2 = e(\"../signature\");\n      function s2(e2, t2, r3, n2) {\n        i.call(this, \"ZipFileWorker\"), this.bytesWritten = 0, this.zipComment = t2, this.zipPlatform = r3, this.encodeFileName = n2, this.streamFiles = e2, this.accumulate = false, this.contentBuffer = [], this.dirRecords = [], this.currentSourceOffset = 0, this.entriesCount = 0, this.currentFile = null, this._sources = [];\n      }\n      I.inherits(s2, i), s2.prototype.push = function(e2) {\n        var t2 = e2.meta.percent || 0, r3 = this.entriesCount, n2 = this._sources.length;\n        this.accumulate ? this.contentBuffer.push(e2) : (this.bytesWritten += e2.data.length, i.prototype.push.call(this, { data: e2.data, meta: { currentFile: this.currentFile, percent: r3 ? (t2 + 100 * (r3 - n2 - 1)) / r3 : 100 } }));\n      }, s2.prototype.openedSource = function(e2) {\n        this.currentSourceOffset = this.bytesWritten, this.currentFile = e2.file.name;\n        var t2 = this.streamFiles && !e2.file.dir;\n        if (t2) {\n          var r3 = n(e2, t2, false, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);\n          this.push({ data: r3.fileRecord, meta: { percent: 0 } });\n        } else this.accumulate = true;\n      }, s2.prototype.closedSource = function(e2) {\n        this.accumulate = false;\n        var t2 = this.streamFiles && !e2.file.dir, r3 = n(e2, t2, true, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);\n        if (this.dirRecords.push(r3.dirRecord), t2) this.push({ data: function(e3) {\n          return R2.DATA_DESCRIPTOR + A(e3.crc32, 4) + A(e3.compressedSize, 4) + A(e3.uncompressedSize, 4);\n        }(e2), meta: { percent: 100 } });\n        else for (this.push({ data: r3.fileRecord, meta: { percent: 0 } }); this.contentBuffer.length; ) this.push(this.contentBuffer.shift());\n        this.currentFile = null;\n      }, s2.prototype.flush = function() {\n        for (var e2 = this.bytesWritten, t2 = 0; t2 < this.dirRecords.length; t2++) this.push({ data: this.dirRecords[t2], meta: { percent: 100 } });\n        var r3 = this.bytesWritten - e2, n2 = function(e3, t3, r4, n3, i2) {\n          var s3 = I.transformTo(\"string\", i2(n3));\n          return R2.CENTRAL_DIRECTORY_END + \"\\0\\0\\0\\0\" + A(e3, 2) + A(e3, 2) + A(t3, 4) + A(r4, 4) + A(s3.length, 2) + s3;\n        }(this.dirRecords.length, r3, e2, this.zipComment, this.encodeFileName);\n        this.push({ data: n2, meta: { percent: 100 } });\n      }, s2.prototype.prepareNextSource = function() {\n        this.previous = this._sources.shift(), this.openedSource(this.previous.streamInfo), this.isPaused ? this.previous.pause() : this.previous.resume();\n      }, s2.prototype.registerPrevious = function(e2) {\n        this._sources.push(e2);\n        var t2 = this;\n        return e2.on(\"data\", function(e3) {\n          t2.processChunk(e3);\n        }), e2.on(\"end\", function() {\n          t2.closedSource(t2.previous.streamInfo), t2._sources.length ? t2.prepareNextSource() : t2.end();\n        }), e2.on(\"error\", function(e3) {\n          t2.error(e3);\n        }), this;\n      }, s2.prototype.resume = function() {\n        return !!i.prototype.resume.call(this) && (!this.previous && this._sources.length ? (this.prepareNextSource(), true) : this.previous || this._sources.length || this.generatedError ? void 0 : (this.end(), true));\n      }, s2.prototype.error = function(e2) {\n        var t2 = this._sources;\n        if (!i.prototype.error.call(this, e2)) return false;\n        for (var r3 = 0; r3 < t2.length; r3++) try {\n          t2[r3].error(e2);\n        } catch (e3) {\n        }\n        return true;\n      }, s2.prototype.lock = function() {\n        i.prototype.lock.call(this);\n        for (var e2 = this._sources, t2 = 0; t2 < e2.length; t2++) e2[t2].lock();\n      }, t.exports = s2;\n    }, { \"../crc32\": 4, \"../signature\": 23, \"../stream/GenericWorker\": 28, \"../utf8\": 31, \"../utils\": 32 }], 9: [function(e, t, r2) {\n      var u = e(\"../compressions\"), n = e(\"./ZipFileWorker\");\n      r2.generateWorker = function(e2, a, t2) {\n        var o = new n(a.streamFiles, t2, a.platform, a.encodeFileName), h = 0;\n        try {\n          e2.forEach(function(e3, t3) {\n            h++;\n            var r3 = function(e4, t4) {\n              var r4 = e4 || t4, n3 = u[r4];\n              if (!n3) throw new Error(r4 + \" is not a valid compression method !\");\n              return n3;\n            }(t3.options.compression, a.compression), n2 = t3.options.compressionOptions || a.compressionOptions || {}, i = t3.dir, s2 = t3.date;\n            t3._compressWorker(r3, n2).withStreamInfo(\"file\", { name: e3, dir: i, date: s2, comment: t3.comment || \"\", unixPermissions: t3.unixPermissions, dosPermissions: t3.dosPermissions }).pipe(o);\n          }), o.entriesCount = h;\n        } catch (e3) {\n          o.error(e3);\n        }\n        return o;\n      };\n    }, { \"../compressions\": 3, \"./ZipFileWorker\": 8 }], 10: [function(e, t, r2) {\n      function n() {\n        if (!(this instanceof n)) return new n();\n        if (arguments.length) throw new Error(\"The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.\");\n        this.files = /* @__PURE__ */ Object.create(null), this.comment = null, this.root = \"\", this.clone = function() {\n          var e2 = new n();\n          for (var t2 in this) \"function\" != typeof this[t2] && (e2[t2] = this[t2]);\n          return e2;\n        };\n      }\n      (n.prototype = e(\"./object\")).loadAsync = e(\"./load\"), n.support = e(\"./support\"), n.defaults = e(\"./defaults\"), n.version = \"3.10.1\", n.loadAsync = function(e2, t2) {\n        return new n().loadAsync(e2, t2);\n      }, n.external = e(\"./external\"), t.exports = n;\n    }, { \"./defaults\": 5, \"./external\": 6, \"./load\": 11, \"./object\": 15, \"./support\": 30 }], 11: [function(e, t, r2) {\n      var u = e(\"./utils\"), i = e(\"./external\"), n = e(\"./utf8\"), s2 = e(\"./zipEntries\"), a = e(\"./stream/Crc32Probe\"), l = e(\"./nodejsUtils\");\n      function f2(n2) {\n        return new i.Promise(function(e2, t2) {\n          var r3 = n2.decompressed.getContentWorker().pipe(new a());\n          r3.on(\"error\", function(e3) {\n            t2(e3);\n          }).on(\"end\", function() {\n            r3.streamInfo.crc32 !== n2.decompressed.crc32 ? t2(new Error(\"Corrupted zip : CRC32 mismatch\")) : e2();\n          }).resume();\n        });\n      }\n      t.exports = function(e2, o) {\n        var h = this;\n        return o = u.extend(o || {}, { base64: false, checkCRC32: false, optimizedBinaryString: false, createFolders: false, decodeFileName: n.utf8decode }), l.isNode && l.isStream(e2) ? i.Promise.reject(new Error(\"JSZip can't accept a stream when loading a zip file.\")) : u.prepareContent(\"the loaded zip file\", e2, true, o.optimizedBinaryString, o.base64).then(function(e3) {\n          var t2 = new s2(o);\n          return t2.load(e3), t2;\n        }).then(function(e3) {\n          var t2 = [i.Promise.resolve(e3)], r3 = e3.files;\n          if (o.checkCRC32) for (var n2 = 0; n2 < r3.length; n2++) t2.push(f2(r3[n2]));\n          return i.Promise.all(t2);\n        }).then(function(e3) {\n          for (var t2 = e3.shift(), r3 = t2.files, n2 = 0; n2 < r3.length; n2++) {\n            var i2 = r3[n2], s3 = i2.fileNameStr, a2 = u.resolve(i2.fileNameStr);\n            h.file(a2, i2.decompressed, { binary: true, optimizedBinaryString: true, date: i2.date, dir: i2.dir, comment: i2.fileCommentStr.length ? i2.fileCommentStr : null, unixPermissions: i2.unixPermissions, dosPermissions: i2.dosPermissions, createFolders: o.createFolders }), i2.dir || (h.file(a2).unsafeOriginalName = s3);\n          }\n          return t2.zipComment.length && (h.comment = t2.zipComment), h;\n        });\n      };\n    }, { \"./external\": 6, \"./nodejsUtils\": 14, \"./stream/Crc32Probe\": 25, \"./utf8\": 31, \"./utils\": 32, \"./zipEntries\": 33 }], 12: [function(e, t, r2) {\n      var n = e(\"../utils\"), i = e(\"../stream/GenericWorker\");\n      function s2(e2, t2) {\n        i.call(this, \"Nodejs stream input adapter for \" + e2), this._upstreamEnded = false, this._bindStream(t2);\n      }\n      n.inherits(s2, i), s2.prototype._bindStream = function(e2) {\n        var t2 = this;\n        (this._stream = e2).pause(), e2.on(\"data\", function(e3) {\n          t2.push({ data: e3, meta: { percent: 0 } });\n        }).on(\"error\", function(e3) {\n          t2.isPaused ? this.generatedError = e3 : t2.error(e3);\n        }).on(\"end\", function() {\n          t2.isPaused ? t2._upstreamEnded = true : t2.end();\n        });\n      }, s2.prototype.pause = function() {\n        return !!i.prototype.pause.call(this) && (this._stream.pause(), true);\n      }, s2.prototype.resume = function() {\n        return !!i.prototype.resume.call(this) && (this._upstreamEnded ? this.end() : this._stream.resume(), true);\n      }, t.exports = s2;\n    }, { \"../stream/GenericWorker\": 28, \"../utils\": 32 }], 13: [function(e, t, r2) {\n      var i = e(\"readable-stream\").Readable;\n      function n(e2, t2, r3) {\n        i.call(this, t2), this._helper = e2;\n        var n2 = this;\n        e2.on(\"data\", function(e3, t3) {\n          n2.push(e3) || n2._helper.pause(), r3 && r3(t3);\n        }).on(\"error\", function(e3) {\n          n2.emit(\"error\", e3);\n        }).on(\"end\", function() {\n          n2.push(null);\n        });\n      }\n      e(\"../utils\").inherits(n, i), n.prototype._read = function() {\n        this._helper.resume();\n      }, t.exports = n;\n    }, { \"../utils\": 32, \"readable-stream\": 16 }], 14: [function(e, t, r2) {\n      t.exports = { isNode: \"undefined\" != typeof Buffer, newBufferFrom: function(e2, t2) {\n        if (Buffer.from && Buffer.from !== Uint8Array.from) return Buffer.from(e2, t2);\n        if (\"number\" == typeof e2) throw new Error('The \"data\" argument must not be a number');\n        return new Buffer(e2, t2);\n      }, allocBuffer: function(e2) {\n        if (Buffer.alloc) return Buffer.alloc(e2);\n        var t2 = new Buffer(e2);\n        return t2.fill(0), t2;\n      }, isBuffer: function(e2) {\n        return Buffer.isBuffer(e2);\n      }, isStream: function(e2) {\n        return e2 && \"function\" == typeof e2.on && \"function\" == typeof e2.pause && \"function\" == typeof e2.resume;\n      } };\n    }, {}], 15: [function(e, t, r2) {\n      function s2(e2, t2, r3) {\n        var n2, i2 = u.getTypeOf(t2), s3 = u.extend(r3 || {}, f2);\n        s3.date = s3.date || /* @__PURE__ */ new Date(), null !== s3.compression && (s3.compression = s3.compression.toUpperCase()), \"string\" == typeof s3.unixPermissions && (s3.unixPermissions = parseInt(s3.unixPermissions, 8)), s3.unixPermissions && 16384 & s3.unixPermissions && (s3.dir = true), s3.dosPermissions && 16 & s3.dosPermissions && (s3.dir = true), s3.dir && (e2 = g(e2)), s3.createFolders && (n2 = _(e2)) && b.call(this, n2, true);\n        var a2 = \"string\" === i2 && false === s3.binary && false === s3.base64;\n        r3 && void 0 !== r3.binary || (s3.binary = !a2), (t2 instanceof c && 0 === t2.uncompressedSize || s3.dir || !t2 || 0 === t2.length) && (s3.base64 = false, s3.binary = true, t2 = \"\", s3.compression = \"STORE\", i2 = \"string\");\n        var o2 = null;\n        o2 = t2 instanceof c || t2 instanceof l ? t2 : p.isNode && p.isStream(t2) ? new m(e2, t2) : u.prepareContent(e2, t2, s3.binary, s3.optimizedBinaryString, s3.base64);\n        var h2 = new d(e2, o2, s3);\n        this.files[e2] = h2;\n      }\n      var i = e(\"./utf8\"), u = e(\"./utils\"), l = e(\"./stream/GenericWorker\"), a = e(\"./stream/StreamHelper\"), f2 = e(\"./defaults\"), c = e(\"./compressedObject\"), d = e(\"./zipObject\"), o = e(\"./generate\"), p = e(\"./nodejsUtils\"), m = e(\"./nodejs/NodejsStreamInputAdapter\"), _ = function(e2) {\n        \"/\" === e2.slice(-1) && (e2 = e2.substring(0, e2.length - 1));\n        var t2 = e2.lastIndexOf(\"/\");\n        return 0 < t2 ? e2.substring(0, t2) : \"\";\n      }, g = function(e2) {\n        return \"/\" !== e2.slice(-1) && (e2 += \"/\"), e2;\n      }, b = function(e2, t2) {\n        return t2 = void 0 !== t2 ? t2 : f2.createFolders, e2 = g(e2), this.files[e2] || s2.call(this, e2, null, { dir: true, createFolders: t2 }), this.files[e2];\n      };\n      function h(e2) {\n        return \"[object RegExp]\" === Object.prototype.toString.call(e2);\n      }\n      var n = { load: function() {\n        throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\");\n      }, forEach: function(e2) {\n        var t2, r3, n2;\n        for (t2 in this.files) n2 = this.files[t2], (r3 = t2.slice(this.root.length, t2.length)) && t2.slice(0, this.root.length) === this.root && e2(r3, n2);\n      }, filter: function(r3) {\n        var n2 = [];\n        return this.forEach(function(e2, t2) {\n          r3(e2, t2) && n2.push(t2);\n        }), n2;\n      }, file: function(e2, t2, r3) {\n        if (1 !== arguments.length) return e2 = this.root + e2, s2.call(this, e2, t2, r3), this;\n        if (h(e2)) {\n          var n2 = e2;\n          return this.filter(function(e3, t3) {\n            return !t3.dir && n2.test(e3);\n          });\n        }\n        var i2 = this.files[this.root + e2];\n        return i2 && !i2.dir ? i2 : null;\n      }, folder: function(r3) {\n        if (!r3) return this;\n        if (h(r3)) return this.filter(function(e3, t3) {\n          return t3.dir && r3.test(e3);\n        });\n        var e2 = this.root + r3, t2 = b.call(this, e2), n2 = this.clone();\n        return n2.root = t2.name, n2;\n      }, remove: function(r3) {\n        r3 = this.root + r3;\n        var e2 = this.files[r3];\n        if (e2 || (\"/\" !== r3.slice(-1) && (r3 += \"/\"), e2 = this.files[r3]), e2 && !e2.dir) delete this.files[r3];\n        else for (var t2 = this.filter(function(e3, t3) {\n          return t3.name.slice(0, r3.length) === r3;\n        }), n2 = 0; n2 < t2.length; n2++) delete this.files[t2[n2].name];\n        return this;\n      }, generate: function() {\n        throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\");\n      }, generateInternalStream: function(e2) {\n        var t2, r3 = {};\n        try {\n          if ((r3 = u.extend(e2 || {}, { streamFiles: false, compression: \"STORE\", compressionOptions: null, type: \"\", platform: \"DOS\", comment: null, mimeType: \"application/zip\", encodeFileName: i.utf8encode })).type = r3.type.toLowerCase(), r3.compression = r3.compression.toUpperCase(), \"binarystring\" === r3.type && (r3.type = \"string\"), !r3.type) throw new Error(\"No output type specified.\");\n          u.checkSupport(r3.type), \"darwin\" !== r3.platform && \"freebsd\" !== r3.platform && \"linux\" !== r3.platform && \"sunos\" !== r3.platform || (r3.platform = \"UNIX\"), \"win32\" === r3.platform && (r3.platform = \"DOS\");\n          var n2 = r3.comment || this.comment || \"\";\n          t2 = o.generateWorker(this, r3, n2);\n        } catch (e3) {\n          (t2 = new l(\"error\")).error(e3);\n        }\n        return new a(t2, r3.type || \"string\", r3.mimeType);\n      }, generateAsync: function(e2, t2) {\n        return this.generateInternalStream(e2).accumulate(t2);\n      }, generateNodeStream: function(e2, t2) {\n        return (e2 = e2 || {}).type || (e2.type = \"nodebuffer\"), this.generateInternalStream(e2).toNodejsStream(t2);\n      } };\n      t.exports = n;\n    }, { \"./compressedObject\": 2, \"./defaults\": 5, \"./generate\": 9, \"./nodejs/NodejsStreamInputAdapter\": 12, \"./nodejsUtils\": 14, \"./stream/GenericWorker\": 28, \"./stream/StreamHelper\": 29, \"./utf8\": 31, \"./utils\": 32, \"./zipObject\": 35 }], 16: [function(e, t, r2) {\n      t.exports = e(\"stream\");\n    }, { stream: void 0 }], 17: [function(e, t, r2) {\n      var n = e(\"./DataReader\");\n      function i(e2) {\n        n.call(this, e2);\n        for (var t2 = 0; t2 < this.data.length; t2++) e2[t2] = 255 & e2[t2];\n      }\n      e(\"../utils\").inherits(i, n), i.prototype.byteAt = function(e2) {\n        return this.data[this.zero + e2];\n      }, i.prototype.lastIndexOfSignature = function(e2) {\n        for (var t2 = e2.charCodeAt(0), r3 = e2.charCodeAt(1), n2 = e2.charCodeAt(2), i2 = e2.charCodeAt(3), s2 = this.length - 4; 0 <= s2; --s2) if (this.data[s2] === t2 && this.data[s2 + 1] === r3 && this.data[s2 + 2] === n2 && this.data[s2 + 3] === i2) return s2 - this.zero;\n        return -1;\n      }, i.prototype.readAndCheckSignature = function(e2) {\n        var t2 = e2.charCodeAt(0), r3 = e2.charCodeAt(1), n2 = e2.charCodeAt(2), i2 = e2.charCodeAt(3), s2 = this.readData(4);\n        return t2 === s2[0] && r3 === s2[1] && n2 === s2[2] && i2 === s2[3];\n      }, i.prototype.readData = function(e2) {\n        if (this.checkOffset(e2), 0 === e2) return [];\n        var t2 = this.data.slice(this.zero + this.index, this.zero + this.index + e2);\n        return this.index += e2, t2;\n      }, t.exports = i;\n    }, { \"../utils\": 32, \"./DataReader\": 18 }], 18: [function(e, t, r2) {\n      var n = e(\"../utils\");\n      function i(e2) {\n        this.data = e2, this.length = e2.length, this.index = 0, this.zero = 0;\n      }\n      i.prototype = { checkOffset: function(e2) {\n        this.checkIndex(this.index + e2);\n      }, checkIndex: function(e2) {\n        if (this.length < this.zero + e2 || e2 < 0) throw new Error(\"End of data reached (data length = \" + this.length + \", asked index = \" + e2 + \"). Corrupted zip ?\");\n      }, setIndex: function(e2) {\n        this.checkIndex(e2), this.index = e2;\n      }, skip: function(e2) {\n        this.setIndex(this.index + e2);\n      }, byteAt: function() {\n      }, readInt: function(e2) {\n        var t2, r3 = 0;\n        for (this.checkOffset(e2), t2 = this.index + e2 - 1; t2 >= this.index; t2--) r3 = (r3 << 8) + this.byteAt(t2);\n        return this.index += e2, r3;\n      }, readString: function(e2) {\n        return n.transformTo(\"string\", this.readData(e2));\n      }, readData: function() {\n      }, lastIndexOfSignature: function() {\n      }, readAndCheckSignature: function() {\n      }, readDate: function() {\n        var e2 = this.readInt(4);\n        return new Date(Date.UTC(1980 + (e2 >> 25 & 127), (e2 >> 21 & 15) - 1, e2 >> 16 & 31, e2 >> 11 & 31, e2 >> 5 & 63, (31 & e2) << 1));\n      } }, t.exports = i;\n    }, { \"../utils\": 32 }], 19: [function(e, t, r2) {\n      var n = e(\"./Uint8ArrayReader\");\n      function i(e2) {\n        n.call(this, e2);\n      }\n      e(\"../utils\").inherits(i, n), i.prototype.readData = function(e2) {\n        this.checkOffset(e2);\n        var t2 = this.data.slice(this.zero + this.index, this.zero + this.index + e2);\n        return this.index += e2, t2;\n      }, t.exports = i;\n    }, { \"../utils\": 32, \"./Uint8ArrayReader\": 21 }], 20: [function(e, t, r2) {\n      var n = e(\"./DataReader\");\n      function i(e2) {\n        n.call(this, e2);\n      }\n      e(\"../utils\").inherits(i, n), i.prototype.byteAt = function(e2) {\n        return this.data.charCodeAt(this.zero + e2);\n      }, i.prototype.lastIndexOfSignature = function(e2) {\n        return this.data.lastIndexOf(e2) - this.zero;\n      }, i.prototype.readAndCheckSignature = function(e2) {\n        return e2 === this.readData(4);\n      }, i.prototype.readData = function(e2) {\n        this.checkOffset(e2);\n        var t2 = this.data.slice(this.zero + this.index, this.zero + this.index + e2);\n        return this.index += e2, t2;\n      }, t.exports = i;\n    }, { \"../utils\": 32, \"./DataReader\": 18 }], 21: [function(e, t, r2) {\n      var n = e(\"./ArrayReader\");\n      function i(e2) {\n        n.call(this, e2);\n      }\n      e(\"../utils\").inherits(i, n), i.prototype.readData = function(e2) {\n        if (this.checkOffset(e2), 0 === e2) return new Uint8Array(0);\n        var t2 = this.data.subarray(this.zero + this.index, this.zero + this.index + e2);\n        return this.index += e2, t2;\n      }, t.exports = i;\n    }, { \"../utils\": 32, \"./ArrayReader\": 17 }], 22: [function(e, t, r2) {\n      var n = e(\"../utils\"), i = e(\"../support\"), s2 = e(\"./ArrayReader\"), a = e(\"./StringReader\"), o = e(\"./NodeBufferReader\"), h = e(\"./Uint8ArrayReader\");\n      t.exports = function(e2) {\n        var t2 = n.getTypeOf(e2);\n        return n.checkSupport(t2), \"string\" !== t2 || i.uint8array ? \"nodebuffer\" === t2 ? new o(e2) : i.uint8array ? new h(n.transformTo(\"uint8array\", e2)) : new s2(n.transformTo(\"array\", e2)) : new a(e2);\n      };\n    }, { \"../support\": 30, \"../utils\": 32, \"./ArrayReader\": 17, \"./NodeBufferReader\": 19, \"./StringReader\": 20, \"./Uint8ArrayReader\": 21 }], 23: [function(e, t, r2) {\n      r2.LOCAL_FILE_HEADER = \"PK\u0003\u0004\", r2.CENTRAL_FILE_HEADER = \"PK\u0001\u0002\", r2.CENTRAL_DIRECTORY_END = \"PK\u0005\u0006\", r2.ZIP64_CENTRAL_DIRECTORY_LOCATOR = \"PK\u0006\\x07\", r2.ZIP64_CENTRAL_DIRECTORY_END = \"PK\u0006\u0006\", r2.DATA_DESCRIPTOR = \"PK\\x07\\b\";\n    }, {}], 24: [function(e, t, r2) {\n      var n = e(\"./GenericWorker\"), i = e(\"../utils\");\n      function s2(e2) {\n        n.call(this, \"ConvertWorker to \" + e2), this.destType = e2;\n      }\n      i.inherits(s2, n), s2.prototype.processChunk = function(e2) {\n        this.push({ data: i.transformTo(this.destType, e2.data), meta: e2.meta });\n      }, t.exports = s2;\n    }, { \"../utils\": 32, \"./GenericWorker\": 28 }], 25: [function(e, t, r2) {\n      var n = e(\"./GenericWorker\"), i = e(\"../crc32\");\n      function s2() {\n        n.call(this, \"Crc32Probe\"), this.withStreamInfo(\"crc32\", 0);\n      }\n      e(\"../utils\").inherits(s2, n), s2.prototype.processChunk = function(e2) {\n        this.streamInfo.crc32 = i(e2.data, this.streamInfo.crc32 || 0), this.push(e2);\n      }, t.exports = s2;\n    }, { \"../crc32\": 4, \"../utils\": 32, \"./GenericWorker\": 28 }], 26: [function(e, t, r2) {\n      var n = e(\"../utils\"), i = e(\"./GenericWorker\");\n      function s2(e2) {\n        i.call(this, \"DataLengthProbe for \" + e2), this.propName = e2, this.withStreamInfo(e2, 0);\n      }\n      n.inherits(s2, i), s2.prototype.processChunk = function(e2) {\n        if (e2) {\n          var t2 = this.streamInfo[this.propName] || 0;\n          this.streamInfo[this.propName] = t2 + e2.data.length;\n        }\n        i.prototype.processChunk.call(this, e2);\n      }, t.exports = s2;\n    }, { \"../utils\": 32, \"./GenericWorker\": 28 }], 27: [function(e, t, r2) {\n      var n = e(\"../utils\"), i = e(\"./GenericWorker\");\n      function s2(e2) {\n        i.call(this, \"DataWorker\");\n        var t2 = this;\n        this.dataIsReady = false, this.index = 0, this.max = 0, this.data = null, this.type = \"\", this._tickScheduled = false, e2.then(function(e3) {\n          t2.dataIsReady = true, t2.data = e3, t2.max = e3 && e3.length || 0, t2.type = n.getTypeOf(e3), t2.isPaused || t2._tickAndRepeat();\n        }, function(e3) {\n          t2.error(e3);\n        });\n      }\n      n.inherits(s2, i), s2.prototype.cleanUp = function() {\n        i.prototype.cleanUp.call(this), this.data = null;\n      }, s2.prototype.resume = function() {\n        return !!i.prototype.resume.call(this) && (!this._tickScheduled && this.dataIsReady && (this._tickScheduled = true, n.delay(this._tickAndRepeat, [], this)), true);\n      }, s2.prototype._tickAndRepeat = function() {\n        this._tickScheduled = false, this.isPaused || this.isFinished || (this._tick(), this.isFinished || (n.delay(this._tickAndRepeat, [], this), this._tickScheduled = true));\n      }, s2.prototype._tick = function() {\n        if (this.isPaused || this.isFinished) return false;\n        var e2 = null, t2 = Math.min(this.max, this.index + 16384);\n        if (this.index >= this.max) return this.end();\n        switch (this.type) {\n          case \"string\":\n            e2 = this.data.substring(this.index, t2);\n            break;\n          case \"uint8array\":\n            e2 = this.data.subarray(this.index, t2);\n            break;\n          case \"array\":\n          case \"nodebuffer\":\n            e2 = this.data.slice(this.index, t2);\n        }\n        return this.index = t2, this.push({ data: e2, meta: { percent: this.max ? this.index / this.max * 100 : 0 } });\n      }, t.exports = s2;\n    }, { \"../utils\": 32, \"./GenericWorker\": 28 }], 28: [function(e, t, r2) {\n      function n(e2) {\n        this.name = e2 || \"default\", this.streamInfo = {}, this.generatedError = null, this.extraStreamInfo = {}, this.isPaused = true, this.isFinished = false, this.isLocked = false, this._listeners = { data: [], end: [], error: [] }, this.previous = null;\n      }\n      n.prototype = { push: function(e2) {\n        this.emit(\"data\", e2);\n      }, end: function() {\n        if (this.isFinished) return false;\n        this.flush();\n        try {\n          this.emit(\"end\"), this.cleanUp(), this.isFinished = true;\n        } catch (e2) {\n          this.emit(\"error\", e2);\n        }\n        return true;\n      }, error: function(e2) {\n        return !this.isFinished && (this.isPaused ? this.generatedError = e2 : (this.isFinished = true, this.emit(\"error\", e2), this.previous && this.previous.error(e2), this.cleanUp()), true);\n      }, on: function(e2, t2) {\n        return this._listeners[e2].push(t2), this;\n      }, cleanUp: function() {\n        this.streamInfo = this.generatedError = this.extraStreamInfo = null, this._listeners = [];\n      }, emit: function(e2, t2) {\n        if (this._listeners[e2]) for (var r3 = 0; r3 < this._listeners[e2].length; r3++) this._listeners[e2][r3].call(this, t2);\n      }, pipe: function(e2) {\n        return e2.registerPrevious(this);\n      }, registerPrevious: function(e2) {\n        if (this.isLocked) throw new Error(\"The stream '\" + this + \"' has already been used.\");\n        this.streamInfo = e2.streamInfo, this.mergeStreamInfo(), this.previous = e2;\n        var t2 = this;\n        return e2.on(\"data\", function(e3) {\n          t2.processChunk(e3);\n        }), e2.on(\"end\", function() {\n          t2.end();\n        }), e2.on(\"error\", function(e3) {\n          t2.error(e3);\n        }), this;\n      }, pause: function() {\n        return !this.isPaused && !this.isFinished && (this.isPaused = true, this.previous && this.previous.pause(), true);\n      }, resume: function() {\n        if (!this.isPaused || this.isFinished) return false;\n        var e2 = this.isPaused = false;\n        return this.generatedError && (this.error(this.generatedError), e2 = true), this.previous && this.previous.resume(), !e2;\n      }, flush: function() {\n      }, processChunk: function(e2) {\n        this.push(e2);\n      }, withStreamInfo: function(e2, t2) {\n        return this.extraStreamInfo[e2] = t2, this.mergeStreamInfo(), this;\n      }, mergeStreamInfo: function() {\n        for (var e2 in this.extraStreamInfo) Object.prototype.hasOwnProperty.call(this.extraStreamInfo, e2) && (this.streamInfo[e2] = this.extraStreamInfo[e2]);\n      }, lock: function() {\n        if (this.isLocked) throw new Error(\"The stream '\" + this + \"' has already been used.\");\n        this.isLocked = true, this.previous && this.previous.lock();\n      }, toString: function() {\n        var e2 = \"Worker \" + this.name;\n        return this.previous ? this.previous + \" -> \" + e2 : e2;\n      } }, t.exports = n;\n    }, {}], 29: [function(e, t, r2) {\n      var h = e(\"../utils\"), i = e(\"./ConvertWorker\"), s2 = e(\"./GenericWorker\"), u = e(\"../base64\"), n = e(\"../support\"), a = e(\"../external\"), o = null;\n      if (n.nodestream) try {\n        o = e(\"../nodejs/NodejsStreamOutputAdapter\");\n      } catch (e2) {\n      }\n      function l(e2, o2) {\n        return new a.Promise(function(t2, r3) {\n          var n2 = [], i2 = e2._internalType, s3 = e2._outputType, a2 = e2._mimeType;\n          e2.on(\"data\", function(e3, t3) {\n            n2.push(e3), o2 && o2(t3);\n          }).on(\"error\", function(e3) {\n            n2 = [], r3(e3);\n          }).on(\"end\", function() {\n            try {\n              var e3 = function(e4, t3, r4) {\n                switch (e4) {\n                  case \"blob\":\n                    return h.newBlob(h.transformTo(\"arraybuffer\", t3), r4);\n                  case \"base64\":\n                    return u.encode(t3);\n                  default:\n                    return h.transformTo(e4, t3);\n                }\n              }(s3, function(e4, t3) {\n                var r4, n3 = 0, i3 = null, s4 = 0;\n                for (r4 = 0; r4 < t3.length; r4++) s4 += t3[r4].length;\n                switch (e4) {\n                  case \"string\":\n                    return t3.join(\"\");\n                  case \"array\":\n                    return Array.prototype.concat.apply([], t3);\n                  case \"uint8array\":\n                    for (i3 = new Uint8Array(s4), r4 = 0; r4 < t3.length; r4++) i3.set(t3[r4], n3), n3 += t3[r4].length;\n                    return i3;\n                  case \"nodebuffer\":\n                    return Buffer.concat(t3);\n                  default:\n                    throw new Error(\"concat : unsupported type '\" + e4 + \"'\");\n                }\n              }(i2, n2), a2);\n              t2(e3);\n            } catch (e4) {\n              r3(e4);\n            }\n            n2 = [];\n          }).resume();\n        });\n      }\n      function f2(e2, t2, r3) {\n        var n2 = t2;\n        switch (t2) {\n          case \"blob\":\n          case \"arraybuffer\":\n            n2 = \"uint8array\";\n            break;\n          case \"base64\":\n            n2 = \"string\";\n        }\n        try {\n          this._internalType = n2, this._outputType = t2, this._mimeType = r3, h.checkSupport(n2), this._worker = e2.pipe(new i(n2)), e2.lock();\n        } catch (e3) {\n          this._worker = new s2(\"error\"), this._worker.error(e3);\n        }\n      }\n      f2.prototype = { accumulate: function(e2) {\n        return l(this, e2);\n      }, on: function(e2, t2) {\n        var r3 = this;\n        return \"data\" === e2 ? this._worker.on(e2, function(e3) {\n          t2.call(r3, e3.data, e3.meta);\n        }) : this._worker.on(e2, function() {\n          h.delay(t2, arguments, r3);\n        }), this;\n      }, resume: function() {\n        return h.delay(this._worker.resume, [], this._worker), this;\n      }, pause: function() {\n        return this._worker.pause(), this;\n      }, toNodejsStream: function(e2) {\n        if (h.checkSupport(\"nodestream\"), \"nodebuffer\" !== this._outputType) throw new Error(this._outputType + \" is not supported by this method\");\n        return new o(this, { objectMode: \"nodebuffer\" !== this._outputType }, e2);\n      } }, t.exports = f2;\n    }, { \"../base64\": 1, \"../external\": 6, \"../nodejs/NodejsStreamOutputAdapter\": 13, \"../support\": 30, \"../utils\": 32, \"./ConvertWorker\": 24, \"./GenericWorker\": 28 }], 30: [function(e, t, r2) {\n      if (r2.base64 = true, r2.array = true, r2.string = true, r2.arraybuffer = \"undefined\" != typeof ArrayBuffer && \"undefined\" != typeof Uint8Array, r2.nodebuffer = \"undefined\" != typeof Buffer, r2.uint8array = \"undefined\" != typeof Uint8Array, \"undefined\" == typeof ArrayBuffer) r2.blob = false;\n      else {\n        var n = new ArrayBuffer(0);\n        try {\n          r2.blob = 0 === new Blob([n], { type: \"application/zip\" }).size;\n        } catch (e2) {\n          try {\n            var i = new (self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder)();\n            i.append(n), r2.blob = 0 === i.getBlob(\"application/zip\").size;\n          } catch (e3) {\n            r2.blob = false;\n          }\n        }\n      }\n      try {\n        r2.nodestream = !!e(\"readable-stream\").Readable;\n      } catch (e2) {\n        r2.nodestream = false;\n      }\n    }, { \"readable-stream\": 16 }], 31: [function(e, t, s2) {\n      for (var o = e(\"./utils\"), h = e(\"./support\"), r2 = e(\"./nodejsUtils\"), n = e(\"./stream/GenericWorker\"), u = new Array(256), i = 0; i < 256; i++) u[i] = 252 <= i ? 6 : 248 <= i ? 5 : 240 <= i ? 4 : 224 <= i ? 3 : 192 <= i ? 2 : 1;\n      u[254] = u[254] = 1;\n      function a() {\n        n.call(this, \"utf-8 decode\"), this.leftOver = null;\n      }\n      function l() {\n        n.call(this, \"utf-8 encode\");\n      }\n      s2.utf8encode = function(e2) {\n        return h.nodebuffer ? r2.newBufferFrom(e2, \"utf-8\") : function(e3) {\n          var t2, r3, n2, i2, s3, a2 = e3.length, o2 = 0;\n          for (i2 = 0; i2 < a2; i2++) 55296 == (64512 & (r3 = e3.charCodeAt(i2))) && i2 + 1 < a2 && 56320 == (64512 & (n2 = e3.charCodeAt(i2 + 1))) && (r3 = 65536 + (r3 - 55296 << 10) + (n2 - 56320), i2++), o2 += r3 < 128 ? 1 : r3 < 2048 ? 2 : r3 < 65536 ? 3 : 4;\n          for (t2 = h.uint8array ? new Uint8Array(o2) : new Array(o2), i2 = s3 = 0; s3 < o2; i2++) 55296 == (64512 & (r3 = e3.charCodeAt(i2))) && i2 + 1 < a2 && 56320 == (64512 & (n2 = e3.charCodeAt(i2 + 1))) && (r3 = 65536 + (r3 - 55296 << 10) + (n2 - 56320), i2++), r3 < 128 ? t2[s3++] = r3 : (r3 < 2048 ? t2[s3++] = 192 | r3 >>> 6 : (r3 < 65536 ? t2[s3++] = 224 | r3 >>> 12 : (t2[s3++] = 240 | r3 >>> 18, t2[s3++] = 128 | r3 >>> 12 & 63), t2[s3++] = 128 | r3 >>> 6 & 63), t2[s3++] = 128 | 63 & r3);\n          return t2;\n        }(e2);\n      }, s2.utf8decode = function(e2) {\n        return h.nodebuffer ? o.transformTo(\"nodebuffer\", e2).toString(\"utf-8\") : function(e3) {\n          var t2, r3, n2, i2, s3 = e3.length, a2 = new Array(2 * s3);\n          for (t2 = r3 = 0; t2 < s3; ) if ((n2 = e3[t2++]) < 128) a2[r3++] = n2;\n          else if (4 < (i2 = u[n2])) a2[r3++] = 65533, t2 += i2 - 1;\n          else {\n            for (n2 &= 2 === i2 ? 31 : 3 === i2 ? 15 : 7; 1 < i2 && t2 < s3; ) n2 = n2 << 6 | 63 & e3[t2++], i2--;\n            1 < i2 ? a2[r3++] = 65533 : n2 < 65536 ? a2[r3++] = n2 : (n2 -= 65536, a2[r3++] = 55296 | n2 >> 10 & 1023, a2[r3++] = 56320 | 1023 & n2);\n          }\n          return a2.length !== r3 && (a2.subarray ? a2 = a2.subarray(0, r3) : a2.length = r3), o.applyFromCharCode(a2);\n        }(e2 = o.transformTo(h.uint8array ? \"uint8array\" : \"array\", e2));\n      }, o.inherits(a, n), a.prototype.processChunk = function(e2) {\n        var t2 = o.transformTo(h.uint8array ? \"uint8array\" : \"array\", e2.data);\n        if (this.leftOver && this.leftOver.length) {\n          if (h.uint8array) {\n            var r3 = t2;\n            (t2 = new Uint8Array(r3.length + this.leftOver.length)).set(this.leftOver, 0), t2.set(r3, this.leftOver.length);\n          } else t2 = this.leftOver.concat(t2);\n          this.leftOver = null;\n        }\n        var n2 = function(e3, t3) {\n          var r4;\n          for ((t3 = t3 || e3.length) > e3.length && (t3 = e3.length), r4 = t3 - 1; 0 <= r4 && 128 == (192 & e3[r4]); ) r4--;\n          return r4 < 0 ? t3 : 0 === r4 ? t3 : r4 + u[e3[r4]] > t3 ? r4 : t3;\n        }(t2), i2 = t2;\n        n2 !== t2.length && (h.uint8array ? (i2 = t2.subarray(0, n2), this.leftOver = t2.subarray(n2, t2.length)) : (i2 = t2.slice(0, n2), this.leftOver = t2.slice(n2, t2.length))), this.push({ data: s2.utf8decode(i2), meta: e2.meta });\n      }, a.prototype.flush = function() {\n        this.leftOver && this.leftOver.length && (this.push({ data: s2.utf8decode(this.leftOver), meta: {} }), this.leftOver = null);\n      }, s2.Utf8DecodeWorker = a, o.inherits(l, n), l.prototype.processChunk = function(e2) {\n        this.push({ data: s2.utf8encode(e2.data), meta: e2.meta });\n      }, s2.Utf8EncodeWorker = l;\n    }, { \"./nodejsUtils\": 14, \"./stream/GenericWorker\": 28, \"./support\": 30, \"./utils\": 32 }], 32: [function(e, t, a) {\n      var o = e(\"./support\"), h = e(\"./base64\"), r2 = e(\"./nodejsUtils\"), u = e(\"./external\");\n      function n(e2) {\n        return e2;\n      }\n      function l(e2, t2) {\n        for (var r3 = 0; r3 < e2.length; ++r3) t2[r3] = 255 & e2.charCodeAt(r3);\n        return t2;\n      }\n      e(\"setimmediate\"), a.newBlob = function(t2, r3) {\n        a.checkSupport(\"blob\");\n        try {\n          return new Blob([t2], { type: r3 });\n        } catch (e2) {\n          try {\n            var n2 = new (self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder)();\n            return n2.append(t2), n2.getBlob(r3);\n          } catch (e3) {\n            throw new Error(\"Bug : can't construct the Blob.\");\n          }\n        }\n      };\n      var i = { stringifyByChunk: function(e2, t2, r3) {\n        var n2 = [], i2 = 0, s3 = e2.length;\n        if (s3 <= r3) return String.fromCharCode.apply(null, e2);\n        for (; i2 < s3; ) \"array\" === t2 || \"nodebuffer\" === t2 ? n2.push(String.fromCharCode.apply(null, e2.slice(i2, Math.min(i2 + r3, s3)))) : n2.push(String.fromCharCode.apply(null, e2.subarray(i2, Math.min(i2 + r3, s3)))), i2 += r3;\n        return n2.join(\"\");\n      }, stringifyByChar: function(e2) {\n        for (var t2 = \"\", r3 = 0; r3 < e2.length; r3++) t2 += String.fromCharCode(e2[r3]);\n        return t2;\n      }, applyCanBeUsed: { uint8array: function() {\n        try {\n          return o.uint8array && 1 === String.fromCharCode.apply(null, new Uint8Array(1)).length;\n        } catch (e2) {\n          return false;\n        }\n      }(), nodebuffer: function() {\n        try {\n          return o.nodebuffer && 1 === String.fromCharCode.apply(null, r2.allocBuffer(1)).length;\n        } catch (e2) {\n          return false;\n        }\n      }() } };\n      function s2(e2) {\n        var t2 = 65536, r3 = a.getTypeOf(e2), n2 = true;\n        if (\"uint8array\" === r3 ? n2 = i.applyCanBeUsed.uint8array : \"nodebuffer\" === r3 && (n2 = i.applyCanBeUsed.nodebuffer), n2) for (; 1 < t2; ) try {\n          return i.stringifyByChunk(e2, r3, t2);\n        } catch (e3) {\n          t2 = Math.floor(t2 / 2);\n        }\n        return i.stringifyByChar(e2);\n      }\n      function f2(e2, t2) {\n        for (var r3 = 0; r3 < e2.length; r3++) t2[r3] = e2[r3];\n        return t2;\n      }\n      a.applyFromCharCode = s2;\n      var c = {};\n      c.string = { string: n, array: function(e2) {\n        return l(e2, new Array(e2.length));\n      }, arraybuffer: function(e2) {\n        return c.string.uint8array(e2).buffer;\n      }, uint8array: function(e2) {\n        return l(e2, new Uint8Array(e2.length));\n      }, nodebuffer: function(e2) {\n        return l(e2, r2.allocBuffer(e2.length));\n      } }, c.array = { string: s2, array: n, arraybuffer: function(e2) {\n        return new Uint8Array(e2).buffer;\n      }, uint8array: function(e2) {\n        return new Uint8Array(e2);\n      }, nodebuffer: function(e2) {\n        return r2.newBufferFrom(e2);\n      } }, c.arraybuffer = { string: function(e2) {\n        return s2(new Uint8Array(e2));\n      }, array: function(e2) {\n        return f2(new Uint8Array(e2), new Array(e2.byteLength));\n      }, arraybuffer: n, uint8array: function(e2) {\n        return new Uint8Array(e2);\n      }, nodebuffer: function(e2) {\n        return r2.newBufferFrom(new Uint8Array(e2));\n      } }, c.uint8array = { string: s2, array: function(e2) {\n        return f2(e2, new Array(e2.length));\n      }, arraybuffer: function(e2) {\n        return e2.buffer;\n      }, uint8array: n, nodebuffer: function(e2) {\n        return r2.newBufferFrom(e2);\n      } }, c.nodebuffer = { string: s2, array: function(e2) {\n        return f2(e2, new Array(e2.length));\n      }, arraybuffer: function(e2) {\n        return c.nodebuffer.uint8array(e2).buffer;\n      }, uint8array: function(e2) {\n        return f2(e2, new Uint8Array(e2.length));\n      }, nodebuffer: n }, a.transformTo = function(e2, t2) {\n        if (t2 = t2 || \"\", !e2) return t2;\n        a.checkSupport(e2);\n        var r3 = a.getTypeOf(t2);\n        return c[r3][e2](t2);\n      }, a.resolve = function(e2) {\n        for (var t2 = e2.split(\"/\"), r3 = [], n2 = 0; n2 < t2.length; n2++) {\n          var i2 = t2[n2];\n          \".\" === i2 || \"\" === i2 && 0 !== n2 && n2 !== t2.length - 1 || (\"..\" === i2 ? r3.pop() : r3.push(i2));\n        }\n        return r3.join(\"/\");\n      }, a.getTypeOf = function(e2) {\n        return \"string\" == typeof e2 ? \"string\" : \"[object Array]\" === Object.prototype.toString.call(e2) ? \"array\" : o.nodebuffer && r2.isBuffer(e2) ? \"nodebuffer\" : o.uint8array && e2 instanceof Uint8Array ? \"uint8array\" : o.arraybuffer && e2 instanceof ArrayBuffer ? \"arraybuffer\" : void 0;\n      }, a.checkSupport = function(e2) {\n        if (!o[e2.toLowerCase()]) throw new Error(e2 + \" is not supported by this platform\");\n      }, a.MAX_VALUE_16BITS = 65535, a.MAX_VALUE_32BITS = -1, a.pretty = function(e2) {\n        var t2, r3, n2 = \"\";\n        for (r3 = 0; r3 < (e2 || \"\").length; r3++) n2 += \"\\\\x\" + ((t2 = e2.charCodeAt(r3)) < 16 ? \"0\" : \"\") + t2.toString(16).toUpperCase();\n        return n2;\n      }, a.delay = function(e2, t2, r3) {\n        setImmediate(function() {\n          e2.apply(r3 || null, t2 || []);\n        });\n      }, a.inherits = function(e2, t2) {\n        function r3() {\n        }\n        r3.prototype = t2.prototype, e2.prototype = new r3();\n      }, a.extend = function() {\n        var e2, t2, r3 = {};\n        for (e2 = 0; e2 < arguments.length; e2++) for (t2 in arguments[e2]) Object.prototype.hasOwnProperty.call(arguments[e2], t2) && void 0 === r3[t2] && (r3[t2] = arguments[e2][t2]);\n        return r3;\n      }, a.prepareContent = function(r3, e2, n2, i2, s3) {\n        return u.Promise.resolve(e2).then(function(n3) {\n          return o.blob && (n3 instanceof Blob || -1 !== [\"[object File]\", \"[object Blob]\"].indexOf(Object.prototype.toString.call(n3))) && \"undefined\" != typeof FileReader ? new u.Promise(function(t2, r4) {\n            var e3 = new FileReader();\n            e3.onload = function(e4) {\n              t2(e4.target.result);\n            }, e3.onerror = function(e4) {\n              r4(e4.target.error);\n            }, e3.readAsArrayBuffer(n3);\n          }) : n3;\n        }).then(function(e3) {\n          var t2 = a.getTypeOf(e3);\n          return t2 ? (\"arraybuffer\" === t2 ? e3 = a.transformTo(\"uint8array\", e3) : \"string\" === t2 && (s3 ? e3 = h.decode(e3) : n2 && true !== i2 && (e3 = function(e4) {\n            return l(e4, o.uint8array ? new Uint8Array(e4.length) : new Array(e4.length));\n          }(e3))), e3) : u.Promise.reject(new Error(\"Can't read the data of '\" + r3 + \"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?\"));\n        });\n      };\n    }, { \"./base64\": 1, \"./external\": 6, \"./nodejsUtils\": 14, \"./support\": 30, setimmediate: 54 }], 33: [function(e, t, r2) {\n      var n = e(\"./reader/readerFor\"), i = e(\"./utils\"), s2 = e(\"./signature\"), a = e(\"./zipEntry\"), o = e(\"./support\");\n      function h(e2) {\n        this.files = [], this.loadOptions = e2;\n      }\n      h.prototype = { checkSignature: function(e2) {\n        if (!this.reader.readAndCheckSignature(e2)) {\n          this.reader.index -= 4;\n          var t2 = this.reader.readString(4);\n          throw new Error(\"Corrupted zip or bug: unexpected signature (\" + i.pretty(t2) + \", expected \" + i.pretty(e2) + \")\");\n        }\n      }, isSignature: function(e2, t2) {\n        var r3 = this.reader.index;\n        this.reader.setIndex(e2);\n        var n2 = this.reader.readString(4) === t2;\n        return this.reader.setIndex(r3), n2;\n      }, readBlockEndOfCentral: function() {\n        this.diskNumber = this.reader.readInt(2), this.diskWithCentralDirStart = this.reader.readInt(2), this.centralDirRecordsOnThisDisk = this.reader.readInt(2), this.centralDirRecords = this.reader.readInt(2), this.centralDirSize = this.reader.readInt(4), this.centralDirOffset = this.reader.readInt(4), this.zipCommentLength = this.reader.readInt(2);\n        var e2 = this.reader.readData(this.zipCommentLength), t2 = o.uint8array ? \"uint8array\" : \"array\", r3 = i.transformTo(t2, e2);\n        this.zipComment = this.loadOptions.decodeFileName(r3);\n      }, readBlockZip64EndOfCentral: function() {\n        this.zip64EndOfCentralSize = this.reader.readInt(8), this.reader.skip(4), this.diskNumber = this.reader.readInt(4), this.diskWithCentralDirStart = this.reader.readInt(4), this.centralDirRecordsOnThisDisk = this.reader.readInt(8), this.centralDirRecords = this.reader.readInt(8), this.centralDirSize = this.reader.readInt(8), this.centralDirOffset = this.reader.readInt(8), this.zip64ExtensibleData = {};\n        for (var e2, t2, r3, n2 = this.zip64EndOfCentralSize - 44; 0 < n2; ) e2 = this.reader.readInt(2), t2 = this.reader.readInt(4), r3 = this.reader.readData(t2), this.zip64ExtensibleData[e2] = { id: e2, length: t2, value: r3 };\n      }, readBlockZip64EndOfCentralLocator: function() {\n        if (this.diskWithZip64CentralDirStart = this.reader.readInt(4), this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8), this.disksCount = this.reader.readInt(4), 1 < this.disksCount) throw new Error(\"Multi-volumes zip are not supported\");\n      }, readLocalFiles: function() {\n        var e2, t2;\n        for (e2 = 0; e2 < this.files.length; e2++) t2 = this.files[e2], this.reader.setIndex(t2.localHeaderOffset), this.checkSignature(s2.LOCAL_FILE_HEADER), t2.readLocalPart(this.reader), t2.handleUTF8(), t2.processAttributes();\n      }, readCentralDir: function() {\n        var e2;\n        for (this.reader.setIndex(this.centralDirOffset); this.reader.readAndCheckSignature(s2.CENTRAL_FILE_HEADER); ) (e2 = new a({ zip64: this.zip64 }, this.loadOptions)).readCentralPart(this.reader), this.files.push(e2);\n        if (this.centralDirRecords !== this.files.length && 0 !== this.centralDirRecords && 0 === this.files.length) throw new Error(\"Corrupted zip or bug: expected \" + this.centralDirRecords + \" records in central dir, got \" + this.files.length);\n      }, readEndOfCentral: function() {\n        var e2 = this.reader.lastIndexOfSignature(s2.CENTRAL_DIRECTORY_END);\n        if (e2 < 0) throw !this.isSignature(0, s2.LOCAL_FILE_HEADER) ? new Error(\"Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html\") : new Error(\"Corrupted zip: can't find end of central directory\");\n        this.reader.setIndex(e2);\n        var t2 = e2;\n        if (this.checkSignature(s2.CENTRAL_DIRECTORY_END), this.readBlockEndOfCentral(), this.diskNumber === i.MAX_VALUE_16BITS || this.diskWithCentralDirStart === i.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === i.MAX_VALUE_16BITS || this.centralDirRecords === i.MAX_VALUE_16BITS || this.centralDirSize === i.MAX_VALUE_32BITS || this.centralDirOffset === i.MAX_VALUE_32BITS) {\n          if (this.zip64 = true, (e2 = this.reader.lastIndexOfSignature(s2.ZIP64_CENTRAL_DIRECTORY_LOCATOR)) < 0) throw new Error(\"Corrupted zip: can't find the ZIP64 end of central directory locator\");\n          if (this.reader.setIndex(e2), this.checkSignature(s2.ZIP64_CENTRAL_DIRECTORY_LOCATOR), this.readBlockZip64EndOfCentralLocator(), !this.isSignature(this.relativeOffsetEndOfZip64CentralDir, s2.ZIP64_CENTRAL_DIRECTORY_END) && (this.relativeOffsetEndOfZip64CentralDir = this.reader.lastIndexOfSignature(s2.ZIP64_CENTRAL_DIRECTORY_END), this.relativeOffsetEndOfZip64CentralDir < 0)) throw new Error(\"Corrupted zip: can't find the ZIP64 end of central directory\");\n          this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir), this.checkSignature(s2.ZIP64_CENTRAL_DIRECTORY_END), this.readBlockZip64EndOfCentral();\n        }\n        var r3 = this.centralDirOffset + this.centralDirSize;\n        this.zip64 && (r3 += 20, r3 += 12 + this.zip64EndOfCentralSize);\n        var n2 = t2 - r3;\n        if (0 < n2) this.isSignature(t2, s2.CENTRAL_FILE_HEADER) || (this.reader.zero = n2);\n        else if (n2 < 0) throw new Error(\"Corrupted zip: missing \" + Math.abs(n2) + \" bytes.\");\n      }, prepareReader: function(e2) {\n        this.reader = n(e2);\n      }, load: function(e2) {\n        this.prepareReader(e2), this.readEndOfCentral(), this.readCentralDir(), this.readLocalFiles();\n      } }, t.exports = h;\n    }, { \"./reader/readerFor\": 22, \"./signature\": 23, \"./support\": 30, \"./utils\": 32, \"./zipEntry\": 34 }], 34: [function(e, t, r2) {\n      var n = e(\"./reader/readerFor\"), s2 = e(\"./utils\"), i = e(\"./compressedObject\"), a = e(\"./crc32\"), o = e(\"./utf8\"), h = e(\"./compressions\"), u = e(\"./support\");\n      function l(e2, t2) {\n        this.options = e2, this.loadOptions = t2;\n      }\n      l.prototype = { isEncrypted: function() {\n        return 1 == (1 & this.bitFlag);\n      }, useUTF8: function() {\n        return 2048 == (2048 & this.bitFlag);\n      }, readLocalPart: function(e2) {\n        var t2, r3;\n        if (e2.skip(22), this.fileNameLength = e2.readInt(2), r3 = e2.readInt(2), this.fileName = e2.readData(this.fileNameLength), e2.skip(r3), -1 === this.compressedSize || -1 === this.uncompressedSize) throw new Error(\"Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)\");\n        if (null === (t2 = function(e3) {\n          for (var t3 in h) if (Object.prototype.hasOwnProperty.call(h, t3) && h[t3].magic === e3) return h[t3];\n          return null;\n        }(this.compressionMethod))) throw new Error(\"Corrupted zip : compression \" + s2.pretty(this.compressionMethod) + \" unknown (inner file : \" + s2.transformTo(\"string\", this.fileName) + \")\");\n        this.decompressed = new i(this.compressedSize, this.uncompressedSize, this.crc32, t2, e2.readData(this.compressedSize));\n      }, readCentralPart: function(e2) {\n        this.versionMadeBy = e2.readInt(2), e2.skip(2), this.bitFlag = e2.readInt(2), this.compressionMethod = e2.readString(2), this.date = e2.readDate(), this.crc32 = e2.readInt(4), this.compressedSize = e2.readInt(4), this.uncompressedSize = e2.readInt(4);\n        var t2 = e2.readInt(2);\n        if (this.extraFieldsLength = e2.readInt(2), this.fileCommentLength = e2.readInt(2), this.diskNumberStart = e2.readInt(2), this.internalFileAttributes = e2.readInt(2), this.externalFileAttributes = e2.readInt(4), this.localHeaderOffset = e2.readInt(4), this.isEncrypted()) throw new Error(\"Encrypted zip are not supported\");\n        e2.skip(t2), this.readExtraFields(e2), this.parseZIP64ExtraField(e2), this.fileComment = e2.readData(this.fileCommentLength);\n      }, processAttributes: function() {\n        this.unixPermissions = null, this.dosPermissions = null;\n        var e2 = this.versionMadeBy >> 8;\n        this.dir = !!(16 & this.externalFileAttributes), 0 == e2 && (this.dosPermissions = 63 & this.externalFileAttributes), 3 == e2 && (this.unixPermissions = this.externalFileAttributes >> 16 & 65535), this.dir || \"/\" !== this.fileNameStr.slice(-1) || (this.dir = true);\n      }, parseZIP64ExtraField: function() {\n        if (this.extraFields[1]) {\n          var e2 = n(this.extraFields[1].value);\n          this.uncompressedSize === s2.MAX_VALUE_32BITS && (this.uncompressedSize = e2.readInt(8)), this.compressedSize === s2.MAX_VALUE_32BITS && (this.compressedSize = e2.readInt(8)), this.localHeaderOffset === s2.MAX_VALUE_32BITS && (this.localHeaderOffset = e2.readInt(8)), this.diskNumberStart === s2.MAX_VALUE_32BITS && (this.diskNumberStart = e2.readInt(4));\n        }\n      }, readExtraFields: function(e2) {\n        var t2, r3, n2, i2 = e2.index + this.extraFieldsLength;\n        for (this.extraFields || (this.extraFields = {}); e2.index + 4 < i2; ) t2 = e2.readInt(2), r3 = e2.readInt(2), n2 = e2.readData(r3), this.extraFields[t2] = { id: t2, length: r3, value: n2 };\n        e2.setIndex(i2);\n      }, handleUTF8: function() {\n        var e2 = u.uint8array ? \"uint8array\" : \"array\";\n        if (this.useUTF8()) this.fileNameStr = o.utf8decode(this.fileName), this.fileCommentStr = o.utf8decode(this.fileComment);\n        else {\n          var t2 = this.findExtraFieldUnicodePath();\n          if (null !== t2) this.fileNameStr = t2;\n          else {\n            var r3 = s2.transformTo(e2, this.fileName);\n            this.fileNameStr = this.loadOptions.decodeFileName(r3);\n          }\n          var n2 = this.findExtraFieldUnicodeComment();\n          if (null !== n2) this.fileCommentStr = n2;\n          else {\n            var i2 = s2.transformTo(e2, this.fileComment);\n            this.fileCommentStr = this.loadOptions.decodeFileName(i2);\n          }\n        }\n      }, findExtraFieldUnicodePath: function() {\n        var e2 = this.extraFields[28789];\n        if (e2) {\n          var t2 = n(e2.value);\n          return 1 !== t2.readInt(1) ? null : a(this.fileName) !== t2.readInt(4) ? null : o.utf8decode(t2.readData(e2.length - 5));\n        }\n        return null;\n      }, findExtraFieldUnicodeComment: function() {\n        var e2 = this.extraFields[25461];\n        if (e2) {\n          var t2 = n(e2.value);\n          return 1 !== t2.readInt(1) ? null : a(this.fileComment) !== t2.readInt(4) ? null : o.utf8decode(t2.readData(e2.length - 5));\n        }\n        return null;\n      } }, t.exports = l;\n    }, { \"./compressedObject\": 2, \"./compressions\": 3, \"./crc32\": 4, \"./reader/readerFor\": 22, \"./support\": 30, \"./utf8\": 31, \"./utils\": 32 }], 35: [function(e, t, r2) {\n      function n(e2, t2, r3) {\n        this.name = e2, this.dir = r3.dir, this.date = r3.date, this.comment = r3.comment, this.unixPermissions = r3.unixPermissions, this.dosPermissions = r3.dosPermissions, this._data = t2, this._dataBinary = r3.binary, this.options = { compression: r3.compression, compressionOptions: r3.compressionOptions };\n      }\n      var s2 = e(\"./stream/StreamHelper\"), i = e(\"./stream/DataWorker\"), a = e(\"./utf8\"), o = e(\"./compressedObject\"), h = e(\"./stream/GenericWorker\");\n      n.prototype = { internalStream: function(e2) {\n        var t2 = null, r3 = \"string\";\n        try {\n          if (!e2) throw new Error(\"No output type specified.\");\n          var n2 = \"string\" === (r3 = e2.toLowerCase()) || \"text\" === r3;\n          \"binarystring\" !== r3 && \"text\" !== r3 || (r3 = \"string\"), t2 = this._decompressWorker();\n          var i2 = !this._dataBinary;\n          i2 && !n2 && (t2 = t2.pipe(new a.Utf8EncodeWorker())), !i2 && n2 && (t2 = t2.pipe(new a.Utf8DecodeWorker()));\n        } catch (e3) {\n          (t2 = new h(\"error\")).error(e3);\n        }\n        return new s2(t2, r3, \"\");\n      }, async: function(e2, t2) {\n        return this.internalStream(e2).accumulate(t2);\n      }, nodeStream: function(e2, t2) {\n        return this.internalStream(e2 || \"nodebuffer\").toNodejsStream(t2);\n      }, _compressWorker: function(e2, t2) {\n        if (this._data instanceof o && this._data.compression.magic === e2.magic) return this._data.getCompressedWorker();\n        var r3 = this._decompressWorker();\n        return this._dataBinary || (r3 = r3.pipe(new a.Utf8EncodeWorker())), o.createWorkerFrom(r3, e2, t2);\n      }, _decompressWorker: function() {\n        return this._data instanceof o ? this._data.getContentWorker() : this._data instanceof h ? this._data : new i(this._data);\n      } };\n      for (var u = [\"asText\", \"asBinary\", \"asNodeBuffer\", \"asUint8Array\", \"asArrayBuffer\"], l = function() {\n        throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\");\n      }, f2 = 0; f2 < u.length; f2++) n.prototype[u[f2]] = l;\n      t.exports = n;\n    }, { \"./compressedObject\": 2, \"./stream/DataWorker\": 27, \"./stream/GenericWorker\": 28, \"./stream/StreamHelper\": 29, \"./utf8\": 31 }], 36: [function(e, l, t) {\n      (function(t2) {\n        var r2, n, e2 = t2.MutationObserver || t2.WebKitMutationObserver;\n        if (e2) {\n          var i = 0, s2 = new e2(u), a = t2.document.createTextNode(\"\");\n          s2.observe(a, { characterData: true }), r2 = function() {\n            a.data = i = ++i % 2;\n          };\n        } else if (t2.setImmediate || void 0 === t2.MessageChannel) r2 = \"document\" in t2 && \"onreadystatechange\" in t2.document.createElement(\"script\") ? function() {\n          var e3 = t2.document.createElement(\"script\");\n          e3.onreadystatechange = function() {\n            u(), e3.onreadystatechange = null, e3.parentNode.removeChild(e3), e3 = null;\n          }, t2.document.documentElement.appendChild(e3);\n        } : function() {\n          setTimeout(u, 0);\n        };\n        else {\n          var o = new t2.MessageChannel();\n          o.port1.onmessage = u, r2 = function() {\n            o.port2.postMessage(0);\n          };\n        }\n        var h = [];\n        function u() {\n          var e3, t3;\n          n = true;\n          for (var r3 = h.length; r3; ) {\n            for (t3 = h, h = [], e3 = -1; ++e3 < r3; ) t3[e3]();\n            r3 = h.length;\n          }\n          n = false;\n        }\n        l.exports = function(e3) {\n          1 !== h.push(e3) || n || r2();\n        };\n      }).call(this, \"undefined\" != typeof commonjsGlobal ? commonjsGlobal : \"undefined\" != typeof self ? self : \"undefined\" != typeof window ? window : {});\n    }, {}], 37: [function(e, t, r2) {\n      var i = e(\"immediate\");\n      function u() {\n      }\n      var l = {}, s2 = [\"REJECTED\"], a = [\"FULFILLED\"], n = [\"PENDING\"];\n      function o(e2) {\n        if (\"function\" != typeof e2) throw new TypeError(\"resolver must be a function\");\n        this.state = n, this.queue = [], this.outcome = void 0, e2 !== u && d(this, e2);\n      }\n      function h(e2, t2, r3) {\n        this.promise = e2, \"function\" == typeof t2 && (this.onFulfilled = t2, this.callFulfilled = this.otherCallFulfilled), \"function\" == typeof r3 && (this.onRejected = r3, this.callRejected = this.otherCallRejected);\n      }\n      function f2(t2, r3, n2) {\n        i(function() {\n          var e2;\n          try {\n            e2 = r3(n2);\n          } catch (e3) {\n            return l.reject(t2, e3);\n          }\n          e2 === t2 ? l.reject(t2, new TypeError(\"Cannot resolve promise with itself\")) : l.resolve(t2, e2);\n        });\n      }\n      function c(e2) {\n        var t2 = e2 && e2.then;\n        if (e2 && (\"object\" == typeof e2 || \"function\" == typeof e2) && \"function\" == typeof t2) return function() {\n          t2.apply(e2, arguments);\n        };\n      }\n      function d(t2, e2) {\n        var r3 = false;\n        function n2(e3) {\n          r3 || (r3 = true, l.reject(t2, e3));\n        }\n        function i2(e3) {\n          r3 || (r3 = true, l.resolve(t2, e3));\n        }\n        var s3 = p(function() {\n          e2(i2, n2);\n        });\n        \"error\" === s3.status && n2(s3.value);\n      }\n      function p(e2, t2) {\n        var r3 = {};\n        try {\n          r3.value = e2(t2), r3.status = \"success\";\n        } catch (e3) {\n          r3.status = \"error\", r3.value = e3;\n        }\n        return r3;\n      }\n      (t.exports = o).prototype.finally = function(t2) {\n        if (\"function\" != typeof t2) return this;\n        var r3 = this.constructor;\n        return this.then(function(e2) {\n          return r3.resolve(t2()).then(function() {\n            return e2;\n          });\n        }, function(e2) {\n          return r3.resolve(t2()).then(function() {\n            throw e2;\n          });\n        });\n      }, o.prototype.catch = function(e2) {\n        return this.then(null, e2);\n      }, o.prototype.then = function(e2, t2) {\n        if (\"function\" != typeof e2 && this.state === a || \"function\" != typeof t2 && this.state === s2) return this;\n        var r3 = new this.constructor(u);\n        this.state !== n ? f2(r3, this.state === a ? e2 : t2, this.outcome) : this.queue.push(new h(r3, e2, t2));\n        return r3;\n      }, h.prototype.callFulfilled = function(e2) {\n        l.resolve(this.promise, e2);\n      }, h.prototype.otherCallFulfilled = function(e2) {\n        f2(this.promise, this.onFulfilled, e2);\n      }, h.prototype.callRejected = function(e2) {\n        l.reject(this.promise, e2);\n      }, h.prototype.otherCallRejected = function(e2) {\n        f2(this.promise, this.onRejected, e2);\n      }, l.resolve = function(e2, t2) {\n        var r3 = p(c, t2);\n        if (\"error\" === r3.status) return l.reject(e2, r3.value);\n        var n2 = r3.value;\n        if (n2) d(e2, n2);\n        else {\n          e2.state = a, e2.outcome = t2;\n          for (var i2 = -1, s3 = e2.queue.length; ++i2 < s3; ) e2.queue[i2].callFulfilled(t2);\n        }\n        return e2;\n      }, l.reject = function(e2, t2) {\n        e2.state = s2, e2.outcome = t2;\n        for (var r3 = -1, n2 = e2.queue.length; ++r3 < n2; ) e2.queue[r3].callRejected(t2);\n        return e2;\n      }, o.resolve = function(e2) {\n        if (e2 instanceof this) return e2;\n        return l.resolve(new this(u), e2);\n      }, o.reject = function(e2) {\n        var t2 = new this(u);\n        return l.reject(t2, e2);\n      }, o.all = function(e2) {\n        var r3 = this;\n        if (\"[object Array]\" !== Object.prototype.toString.call(e2)) return this.reject(new TypeError(\"must be an array\"));\n        var n2 = e2.length, i2 = false;\n        if (!n2) return this.resolve([]);\n        var s3 = new Array(n2), a2 = 0, t2 = -1, o2 = new this(u);\n        for (; ++t2 < n2; ) h2(e2[t2], t2);\n        return o2;\n        function h2(e3, t3) {\n          r3.resolve(e3).then(function(e4) {\n            s3[t3] = e4, ++a2 !== n2 || i2 || (i2 = true, l.resolve(o2, s3));\n          }, function(e4) {\n            i2 || (i2 = true, l.reject(o2, e4));\n          });\n        }\n      }, o.race = function(e2) {\n        var t2 = this;\n        if (\"[object Array]\" !== Object.prototype.toString.call(e2)) return this.reject(new TypeError(\"must be an array\"));\n        var r3 = e2.length, n2 = false;\n        if (!r3) return this.resolve([]);\n        var i2 = -1, s3 = new this(u);\n        for (; ++i2 < r3; ) a2 = e2[i2], t2.resolve(a2).then(function(e3) {\n          n2 || (n2 = true, l.resolve(s3, e3));\n        }, function(e3) {\n          n2 || (n2 = true, l.reject(s3, e3));\n        });\n        var a2;\n        return s3;\n      };\n    }, { immediate: 36 }], 38: [function(e, t, r2) {\n      var n = {};\n      (0, e(\"./lib/utils/common\").assign)(n, e(\"./lib/deflate\"), e(\"./lib/inflate\"), e(\"./lib/zlib/constants\")), t.exports = n;\n    }, { \"./lib/deflate\": 39, \"./lib/inflate\": 40, \"./lib/utils/common\": 41, \"./lib/zlib/constants\": 44 }], 39: [function(e, t, r2) {\n      var a = e(\"./zlib/deflate\"), o = e(\"./utils/common\"), h = e(\"./utils/strings\"), i = e(\"./zlib/messages\"), s2 = e(\"./zlib/zstream\"), u = Object.prototype.toString, l = 0, f2 = -1, c = 0, d = 8;\n      function p(e2) {\n        if (!(this instanceof p)) return new p(e2);\n        this.options = o.assign({ level: f2, method: d, chunkSize: 16384, windowBits: 15, memLevel: 8, strategy: c, to: \"\" }, e2 || {});\n        var t2 = this.options;\n        t2.raw && 0 < t2.windowBits ? t2.windowBits = -t2.windowBits : t2.gzip && 0 < t2.windowBits && t2.windowBits < 16 && (t2.windowBits += 16), this.err = 0, this.msg = \"\", this.ended = false, this.chunks = [], this.strm = new s2(), this.strm.avail_out = 0;\n        var r3 = a.deflateInit2(this.strm, t2.level, t2.method, t2.windowBits, t2.memLevel, t2.strategy);\n        if (r3 !== l) throw new Error(i[r3]);\n        if (t2.header && a.deflateSetHeader(this.strm, t2.header), t2.dictionary) {\n          var n2;\n          if (n2 = \"string\" == typeof t2.dictionary ? h.string2buf(t2.dictionary) : \"[object ArrayBuffer]\" === u.call(t2.dictionary) ? new Uint8Array(t2.dictionary) : t2.dictionary, (r3 = a.deflateSetDictionary(this.strm, n2)) !== l) throw new Error(i[r3]);\n          this._dict_set = true;\n        }\n      }\n      function n(e2, t2) {\n        var r3 = new p(t2);\n        if (r3.push(e2, true), r3.err) throw r3.msg || i[r3.err];\n        return r3.result;\n      }\n      p.prototype.push = function(e2, t2) {\n        var r3, n2, i2 = this.strm, s3 = this.options.chunkSize;\n        if (this.ended) return false;\n        n2 = t2 === ~~t2 ? t2 : true === t2 ? 4 : 0, \"string\" == typeof e2 ? i2.input = h.string2buf(e2) : \"[object ArrayBuffer]\" === u.call(e2) ? i2.input = new Uint8Array(e2) : i2.input = e2, i2.next_in = 0, i2.avail_in = i2.input.length;\n        do {\n          if (0 === i2.avail_out && (i2.output = new o.Buf8(s3), i2.next_out = 0, i2.avail_out = s3), 1 !== (r3 = a.deflate(i2, n2)) && r3 !== l) return this.onEnd(r3), !(this.ended = true);\n          0 !== i2.avail_out && (0 !== i2.avail_in || 4 !== n2 && 2 !== n2) || (\"string\" === this.options.to ? this.onData(h.buf2binstring(o.shrinkBuf(i2.output, i2.next_out))) : this.onData(o.shrinkBuf(i2.output, i2.next_out)));\n        } while ((0 < i2.avail_in || 0 === i2.avail_out) && 1 !== r3);\n        return 4 === n2 ? (r3 = a.deflateEnd(this.strm), this.onEnd(r3), this.ended = true, r3 === l) : 2 !== n2 || (this.onEnd(l), !(i2.avail_out = 0));\n      }, p.prototype.onData = function(e2) {\n        this.chunks.push(e2);\n      }, p.prototype.onEnd = function(e2) {\n        e2 === l && (\"string\" === this.options.to ? this.result = this.chunks.join(\"\") : this.result = o.flattenChunks(this.chunks)), this.chunks = [], this.err = e2, this.msg = this.strm.msg;\n      }, r2.Deflate = p, r2.deflate = n, r2.deflateRaw = function(e2, t2) {\n        return (t2 = t2 || {}).raw = true, n(e2, t2);\n      }, r2.gzip = function(e2, t2) {\n        return (t2 = t2 || {}).gzip = true, n(e2, t2);\n      };\n    }, { \"./utils/common\": 41, \"./utils/strings\": 42, \"./zlib/deflate\": 46, \"./zlib/messages\": 51, \"./zlib/zstream\": 53 }], 40: [function(e, t, r2) {\n      var c = e(\"./zlib/inflate\"), d = e(\"./utils/common\"), p = e(\"./utils/strings\"), m = e(\"./zlib/constants\"), n = e(\"./zlib/messages\"), i = e(\"./zlib/zstream\"), s2 = e(\"./zlib/gzheader\"), _ = Object.prototype.toString;\n      function a(e2) {\n        if (!(this instanceof a)) return new a(e2);\n        this.options = d.assign({ chunkSize: 16384, windowBits: 0, to: \"\" }, e2 || {});\n        var t2 = this.options;\n        t2.raw && 0 <= t2.windowBits && t2.windowBits < 16 && (t2.windowBits = -t2.windowBits, 0 === t2.windowBits && (t2.windowBits = -15)), !(0 <= t2.windowBits && t2.windowBits < 16) || e2 && e2.windowBits || (t2.windowBits += 32), 15 < t2.windowBits && t2.windowBits < 48 && 0 == (15 & t2.windowBits) && (t2.windowBits |= 15), this.err = 0, this.msg = \"\", this.ended = false, this.chunks = [], this.strm = new i(), this.strm.avail_out = 0;\n        var r3 = c.inflateInit2(this.strm, t2.windowBits);\n        if (r3 !== m.Z_OK) throw new Error(n[r3]);\n        this.header = new s2(), c.inflateGetHeader(this.strm, this.header);\n      }\n      function o(e2, t2) {\n        var r3 = new a(t2);\n        if (r3.push(e2, true), r3.err) throw r3.msg || n[r3.err];\n        return r3.result;\n      }\n      a.prototype.push = function(e2, t2) {\n        var r3, n2, i2, s3, a2, o2, h = this.strm, u = this.options.chunkSize, l = this.options.dictionary, f2 = false;\n        if (this.ended) return false;\n        n2 = t2 === ~~t2 ? t2 : true === t2 ? m.Z_FINISH : m.Z_NO_FLUSH, \"string\" == typeof e2 ? h.input = p.binstring2buf(e2) : \"[object ArrayBuffer]\" === _.call(e2) ? h.input = new Uint8Array(e2) : h.input = e2, h.next_in = 0, h.avail_in = h.input.length;\n        do {\n          if (0 === h.avail_out && (h.output = new d.Buf8(u), h.next_out = 0, h.avail_out = u), (r3 = c.inflate(h, m.Z_NO_FLUSH)) === m.Z_NEED_DICT && l && (o2 = \"string\" == typeof l ? p.string2buf(l) : \"[object ArrayBuffer]\" === _.call(l) ? new Uint8Array(l) : l, r3 = c.inflateSetDictionary(this.strm, o2)), r3 === m.Z_BUF_ERROR && true === f2 && (r3 = m.Z_OK, f2 = false), r3 !== m.Z_STREAM_END && r3 !== m.Z_OK) return this.onEnd(r3), !(this.ended = true);\n          h.next_out && (0 !== h.avail_out && r3 !== m.Z_STREAM_END && (0 !== h.avail_in || n2 !== m.Z_FINISH && n2 !== m.Z_SYNC_FLUSH) || (\"string\" === this.options.to ? (i2 = p.utf8border(h.output, h.next_out), s3 = h.next_out - i2, a2 = p.buf2string(h.output, i2), h.next_out = s3, h.avail_out = u - s3, s3 && d.arraySet(h.output, h.output, i2, s3, 0), this.onData(a2)) : this.onData(d.shrinkBuf(h.output, h.next_out)))), 0 === h.avail_in && 0 === h.avail_out && (f2 = true);\n        } while ((0 < h.avail_in || 0 === h.avail_out) && r3 !== m.Z_STREAM_END);\n        return r3 === m.Z_STREAM_END && (n2 = m.Z_FINISH), n2 === m.Z_FINISH ? (r3 = c.inflateEnd(this.strm), this.onEnd(r3), this.ended = true, r3 === m.Z_OK) : n2 !== m.Z_SYNC_FLUSH || (this.onEnd(m.Z_OK), !(h.avail_out = 0));\n      }, a.prototype.onData = function(e2) {\n        this.chunks.push(e2);\n      }, a.prototype.onEnd = function(e2) {\n        e2 === m.Z_OK && (\"string\" === this.options.to ? this.result = this.chunks.join(\"\") : this.result = d.flattenChunks(this.chunks)), this.chunks = [], this.err = e2, this.msg = this.strm.msg;\n      }, r2.Inflate = a, r2.inflate = o, r2.inflateRaw = function(e2, t2) {\n        return (t2 = t2 || {}).raw = true, o(e2, t2);\n      }, r2.ungzip = o;\n    }, { \"./utils/common\": 41, \"./utils/strings\": 42, \"./zlib/constants\": 44, \"./zlib/gzheader\": 47, \"./zlib/inflate\": 49, \"./zlib/messages\": 51, \"./zlib/zstream\": 53 }], 41: [function(e, t, r2) {\n      var n = \"undefined\" != typeof Uint8Array && \"undefined\" != typeof Uint16Array && \"undefined\" != typeof Int32Array;\n      r2.assign = function(e2) {\n        for (var t2 = Array.prototype.slice.call(arguments, 1); t2.length; ) {\n          var r3 = t2.shift();\n          if (r3) {\n            if (\"object\" != typeof r3) throw new TypeError(r3 + \"must be non-object\");\n            for (var n2 in r3) r3.hasOwnProperty(n2) && (e2[n2] = r3[n2]);\n          }\n        }\n        return e2;\n      }, r2.shrinkBuf = function(e2, t2) {\n        return e2.length === t2 ? e2 : e2.subarray ? e2.subarray(0, t2) : (e2.length = t2, e2);\n      };\n      var i = { arraySet: function(e2, t2, r3, n2, i2) {\n        if (t2.subarray && e2.subarray) e2.set(t2.subarray(r3, r3 + n2), i2);\n        else for (var s3 = 0; s3 < n2; s3++) e2[i2 + s3] = t2[r3 + s3];\n      }, flattenChunks: function(e2) {\n        var t2, r3, n2, i2, s3, a;\n        for (t2 = n2 = 0, r3 = e2.length; t2 < r3; t2++) n2 += e2[t2].length;\n        for (a = new Uint8Array(n2), t2 = i2 = 0, r3 = e2.length; t2 < r3; t2++) s3 = e2[t2], a.set(s3, i2), i2 += s3.length;\n        return a;\n      } }, s2 = { arraySet: function(e2, t2, r3, n2, i2) {\n        for (var s3 = 0; s3 < n2; s3++) e2[i2 + s3] = t2[r3 + s3];\n      }, flattenChunks: function(e2) {\n        return [].concat.apply([], e2);\n      } };\n      r2.setTyped = function(e2) {\n        e2 ? (r2.Buf8 = Uint8Array, r2.Buf16 = Uint16Array, r2.Buf32 = Int32Array, r2.assign(r2, i)) : (r2.Buf8 = Array, r2.Buf16 = Array, r2.Buf32 = Array, r2.assign(r2, s2));\n      }, r2.setTyped(n);\n    }, {}], 42: [function(e, t, r2) {\n      var h = e(\"./common\"), i = true, s2 = true;\n      try {\n        String.fromCharCode.apply(null, [0]);\n      } catch (e2) {\n        i = false;\n      }\n      try {\n        String.fromCharCode.apply(null, new Uint8Array(1));\n      } catch (e2) {\n        s2 = false;\n      }\n      for (var u = new h.Buf8(256), n = 0; n < 256; n++) u[n] = 252 <= n ? 6 : 248 <= n ? 5 : 240 <= n ? 4 : 224 <= n ? 3 : 192 <= n ? 2 : 1;\n      function l(e2, t2) {\n        if (t2 < 65537 && (e2.subarray && s2 || !e2.subarray && i)) return String.fromCharCode.apply(null, h.shrinkBuf(e2, t2));\n        for (var r3 = \"\", n2 = 0; n2 < t2; n2++) r3 += String.fromCharCode(e2[n2]);\n        return r3;\n      }\n      u[254] = u[254] = 1, r2.string2buf = function(e2) {\n        var t2, r3, n2, i2, s3, a = e2.length, o = 0;\n        for (i2 = 0; i2 < a; i2++) 55296 == (64512 & (r3 = e2.charCodeAt(i2))) && i2 + 1 < a && 56320 == (64512 & (n2 = e2.charCodeAt(i2 + 1))) && (r3 = 65536 + (r3 - 55296 << 10) + (n2 - 56320), i2++), o += r3 < 128 ? 1 : r3 < 2048 ? 2 : r3 < 65536 ? 3 : 4;\n        for (t2 = new h.Buf8(o), i2 = s3 = 0; s3 < o; i2++) 55296 == (64512 & (r3 = e2.charCodeAt(i2))) && i2 + 1 < a && 56320 == (64512 & (n2 = e2.charCodeAt(i2 + 1))) && (r3 = 65536 + (r3 - 55296 << 10) + (n2 - 56320), i2++), r3 < 128 ? t2[s3++] = r3 : (r3 < 2048 ? t2[s3++] = 192 | r3 >>> 6 : (r3 < 65536 ? t2[s3++] = 224 | r3 >>> 12 : (t2[s3++] = 240 | r3 >>> 18, t2[s3++] = 128 | r3 >>> 12 & 63), t2[s3++] = 128 | r3 >>> 6 & 63), t2[s3++] = 128 | 63 & r3);\n        return t2;\n      }, r2.buf2binstring = function(e2) {\n        return l(e2, e2.length);\n      }, r2.binstring2buf = function(e2) {\n        for (var t2 = new h.Buf8(e2.length), r3 = 0, n2 = t2.length; r3 < n2; r3++) t2[r3] = e2.charCodeAt(r3);\n        return t2;\n      }, r2.buf2string = function(e2, t2) {\n        var r3, n2, i2, s3, a = t2 || e2.length, o = new Array(2 * a);\n        for (r3 = n2 = 0; r3 < a; ) if ((i2 = e2[r3++]) < 128) o[n2++] = i2;\n        else if (4 < (s3 = u[i2])) o[n2++] = 65533, r3 += s3 - 1;\n        else {\n          for (i2 &= 2 === s3 ? 31 : 3 === s3 ? 15 : 7; 1 < s3 && r3 < a; ) i2 = i2 << 6 | 63 & e2[r3++], s3--;\n          1 < s3 ? o[n2++] = 65533 : i2 < 65536 ? o[n2++] = i2 : (i2 -= 65536, o[n2++] = 55296 | i2 >> 10 & 1023, o[n2++] = 56320 | 1023 & i2);\n        }\n        return l(o, n2);\n      }, r2.utf8border = function(e2, t2) {\n        var r3;\n        for ((t2 = t2 || e2.length) > e2.length && (t2 = e2.length), r3 = t2 - 1; 0 <= r3 && 128 == (192 & e2[r3]); ) r3--;\n        return r3 < 0 ? t2 : 0 === r3 ? t2 : r3 + u[e2[r3]] > t2 ? r3 : t2;\n      };\n    }, { \"./common\": 41 }], 43: [function(e, t, r2) {\n      t.exports = function(e2, t2, r3, n) {\n        for (var i = 65535 & e2 | 0, s2 = e2 >>> 16 & 65535 | 0, a = 0; 0 !== r3; ) {\n          for (r3 -= a = 2e3 < r3 ? 2e3 : r3; s2 = s2 + (i = i + t2[n++] | 0) | 0, --a; ) ;\n          i %= 65521, s2 %= 65521;\n        }\n        return i | s2 << 16 | 0;\n      };\n    }, {}], 44: [function(e, t, r2) {\n      t.exports = { Z_NO_FLUSH: 0, Z_PARTIAL_FLUSH: 1, Z_SYNC_FLUSH: 2, Z_FULL_FLUSH: 3, Z_FINISH: 4, Z_BLOCK: 5, Z_TREES: 6, Z_OK: 0, Z_STREAM_END: 1, Z_NEED_DICT: 2, Z_ERRNO: -1, Z_STREAM_ERROR: -2, Z_DATA_ERROR: -3, Z_BUF_ERROR: -5, Z_NO_COMPRESSION: 0, Z_BEST_SPEED: 1, Z_BEST_COMPRESSION: 9, Z_DEFAULT_COMPRESSION: -1, Z_FILTERED: 1, Z_HUFFMAN_ONLY: 2, Z_RLE: 3, Z_FIXED: 4, Z_DEFAULT_STRATEGY: 0, Z_BINARY: 0, Z_TEXT: 1, Z_UNKNOWN: 2, Z_DEFLATED: 8 };\n    }, {}], 45: [function(e, t, r2) {\n      var o = function() {\n        for (var e2, t2 = [], r3 = 0; r3 < 256; r3++) {\n          e2 = r3;\n          for (var n = 0; n < 8; n++) e2 = 1 & e2 ? 3988292384 ^ e2 >>> 1 : e2 >>> 1;\n          t2[r3] = e2;\n        }\n        return t2;\n      }();\n      t.exports = function(e2, t2, r3, n) {\n        var i = o, s2 = n + r3;\n        e2 ^= -1;\n        for (var a = n; a < s2; a++) e2 = e2 >>> 8 ^ i[255 & (e2 ^ t2[a])];\n        return -1 ^ e2;\n      };\n    }, {}], 46: [function(e, t, r2) {\n      var h, c = e(\"../utils/common\"), u = e(\"./trees\"), d = e(\"./adler32\"), p = e(\"./crc32\"), n = e(\"./messages\"), l = 0, f2 = 4, m = 0, _ = -2, g = -1, b = 4, i = 2, v = 8, y = 9, s2 = 286, a = 30, o = 19, w = 2 * s2 + 1, k = 15, x = 3, S = 258, z = S + x + 1, C = 42, E = 113, A = 1, I = 2, O = 3, B = 4;\n      function R2(e2, t2) {\n        return e2.msg = n[t2], t2;\n      }\n      function T(e2) {\n        return (e2 << 1) - (4 < e2 ? 9 : 0);\n      }\n      function D(e2) {\n        for (var t2 = e2.length; 0 <= --t2; ) e2[t2] = 0;\n      }\n      function F(e2) {\n        var t2 = e2.state, r3 = t2.pending;\n        r3 > e2.avail_out && (r3 = e2.avail_out), 0 !== r3 && (c.arraySet(e2.output, t2.pending_buf, t2.pending_out, r3, e2.next_out), e2.next_out += r3, t2.pending_out += r3, e2.total_out += r3, e2.avail_out -= r3, t2.pending -= r3, 0 === t2.pending && (t2.pending_out = 0));\n      }\n      function N(e2, t2) {\n        u._tr_flush_block(e2, 0 <= e2.block_start ? e2.block_start : -1, e2.strstart - e2.block_start, t2), e2.block_start = e2.strstart, F(e2.strm);\n      }\n      function U(e2, t2) {\n        e2.pending_buf[e2.pending++] = t2;\n      }\n      function P(e2, t2) {\n        e2.pending_buf[e2.pending++] = t2 >>> 8 & 255, e2.pending_buf[e2.pending++] = 255 & t2;\n      }\n      function L(e2, t2) {\n        var r3, n2, i2 = e2.max_chain_length, s3 = e2.strstart, a2 = e2.prev_length, o2 = e2.nice_match, h2 = e2.strstart > e2.w_size - z ? e2.strstart - (e2.w_size - z) : 0, u2 = e2.window, l2 = e2.w_mask, f3 = e2.prev, c2 = e2.strstart + S, d2 = u2[s3 + a2 - 1], p2 = u2[s3 + a2];\n        e2.prev_length >= e2.good_match && (i2 >>= 2), o2 > e2.lookahead && (o2 = e2.lookahead);\n        do {\n          if (u2[(r3 = t2) + a2] === p2 && u2[r3 + a2 - 1] === d2 && u2[r3] === u2[s3] && u2[++r3] === u2[s3 + 1]) {\n            s3 += 2, r3++;\n            do {\n            } while (u2[++s3] === u2[++r3] && u2[++s3] === u2[++r3] && u2[++s3] === u2[++r3] && u2[++s3] === u2[++r3] && u2[++s3] === u2[++r3] && u2[++s3] === u2[++r3] && u2[++s3] === u2[++r3] && u2[++s3] === u2[++r3] && s3 < c2);\n            if (n2 = S - (c2 - s3), s3 = c2 - S, a2 < n2) {\n              if (e2.match_start = t2, o2 <= (a2 = n2)) break;\n              d2 = u2[s3 + a2 - 1], p2 = u2[s3 + a2];\n            }\n          }\n        } while ((t2 = f3[t2 & l2]) > h2 && 0 != --i2);\n        return a2 <= e2.lookahead ? a2 : e2.lookahead;\n      }\n      function j(e2) {\n        var t2, r3, n2, i2, s3, a2, o2, h2, u2, l2, f3 = e2.w_size;\n        do {\n          if (i2 = e2.window_size - e2.lookahead - e2.strstart, e2.strstart >= f3 + (f3 - z)) {\n            for (c.arraySet(e2.window, e2.window, f3, f3, 0), e2.match_start -= f3, e2.strstart -= f3, e2.block_start -= f3, t2 = r3 = e2.hash_size; n2 = e2.head[--t2], e2.head[t2] = f3 <= n2 ? n2 - f3 : 0, --r3; ) ;\n            for (t2 = r3 = f3; n2 = e2.prev[--t2], e2.prev[t2] = f3 <= n2 ? n2 - f3 : 0, --r3; ) ;\n            i2 += f3;\n          }\n          if (0 === e2.strm.avail_in) break;\n          if (a2 = e2.strm, o2 = e2.window, h2 = e2.strstart + e2.lookahead, u2 = i2, l2 = void 0, l2 = a2.avail_in, u2 < l2 && (l2 = u2), r3 = 0 === l2 ? 0 : (a2.avail_in -= l2, c.arraySet(o2, a2.input, a2.next_in, l2, h2), 1 === a2.state.wrap ? a2.adler = d(a2.adler, o2, l2, h2) : 2 === a2.state.wrap && (a2.adler = p(a2.adler, o2, l2, h2)), a2.next_in += l2, a2.total_in += l2, l2), e2.lookahead += r3, e2.lookahead + e2.insert >= x) for (s3 = e2.strstart - e2.insert, e2.ins_h = e2.window[s3], e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[s3 + 1]) & e2.hash_mask; e2.insert && (e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[s3 + x - 1]) & e2.hash_mask, e2.prev[s3 & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = s3, s3++, e2.insert--, !(e2.lookahead + e2.insert < x)); ) ;\n        } while (e2.lookahead < z && 0 !== e2.strm.avail_in);\n      }\n      function Z(e2, t2) {\n        for (var r3, n2; ; ) {\n          if (e2.lookahead < z) {\n            if (j(e2), e2.lookahead < z && t2 === l) return A;\n            if (0 === e2.lookahead) break;\n          }\n          if (r3 = 0, e2.lookahead >= x && (e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + x - 1]) & e2.hash_mask, r3 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart), 0 !== r3 && e2.strstart - r3 <= e2.w_size - z && (e2.match_length = L(e2, r3)), e2.match_length >= x) if (n2 = u._tr_tally(e2, e2.strstart - e2.match_start, e2.match_length - x), e2.lookahead -= e2.match_length, e2.match_length <= e2.max_lazy_match && e2.lookahead >= x) {\n            for (e2.match_length--; e2.strstart++, e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + x - 1]) & e2.hash_mask, r3 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart, 0 != --e2.match_length; ) ;\n            e2.strstart++;\n          } else e2.strstart += e2.match_length, e2.match_length = 0, e2.ins_h = e2.window[e2.strstart], e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + 1]) & e2.hash_mask;\n          else n2 = u._tr_tally(e2, 0, e2.window[e2.strstart]), e2.lookahead--, e2.strstart++;\n          if (n2 && (N(e2, false), 0 === e2.strm.avail_out)) return A;\n        }\n        return e2.insert = e2.strstart < x - 1 ? e2.strstart : x - 1, t2 === f2 ? (N(e2, true), 0 === e2.strm.avail_out ? O : B) : e2.last_lit && (N(e2, false), 0 === e2.strm.avail_out) ? A : I;\n      }\n      function W(e2, t2) {\n        for (var r3, n2, i2; ; ) {\n          if (e2.lookahead < z) {\n            if (j(e2), e2.lookahead < z && t2 === l) return A;\n            if (0 === e2.lookahead) break;\n          }\n          if (r3 = 0, e2.lookahead >= x && (e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + x - 1]) & e2.hash_mask, r3 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart), e2.prev_length = e2.match_length, e2.prev_match = e2.match_start, e2.match_length = x - 1, 0 !== r3 && e2.prev_length < e2.max_lazy_match && e2.strstart - r3 <= e2.w_size - z && (e2.match_length = L(e2, r3), e2.match_length <= 5 && (1 === e2.strategy || e2.match_length === x && 4096 < e2.strstart - e2.match_start) && (e2.match_length = x - 1)), e2.prev_length >= x && e2.match_length <= e2.prev_length) {\n            for (i2 = e2.strstart + e2.lookahead - x, n2 = u._tr_tally(e2, e2.strstart - 1 - e2.prev_match, e2.prev_length - x), e2.lookahead -= e2.prev_length - 1, e2.prev_length -= 2; ++e2.strstart <= i2 && (e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + x - 1]) & e2.hash_mask, r3 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart), 0 != --e2.prev_length; ) ;\n            if (e2.match_available = 0, e2.match_length = x - 1, e2.strstart++, n2 && (N(e2, false), 0 === e2.strm.avail_out)) return A;\n          } else if (e2.match_available) {\n            if ((n2 = u._tr_tally(e2, 0, e2.window[e2.strstart - 1])) && N(e2, false), e2.strstart++, e2.lookahead--, 0 === e2.strm.avail_out) return A;\n          } else e2.match_available = 1, e2.strstart++, e2.lookahead--;\n        }\n        return e2.match_available && (n2 = u._tr_tally(e2, 0, e2.window[e2.strstart - 1]), e2.match_available = 0), e2.insert = e2.strstart < x - 1 ? e2.strstart : x - 1, t2 === f2 ? (N(e2, true), 0 === e2.strm.avail_out ? O : B) : e2.last_lit && (N(e2, false), 0 === e2.strm.avail_out) ? A : I;\n      }\n      function M(e2, t2, r3, n2, i2) {\n        this.good_length = e2, this.max_lazy = t2, this.nice_length = r3, this.max_chain = n2, this.func = i2;\n      }\n      function H() {\n        this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = v, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new c.Buf16(2 * w), this.dyn_dtree = new c.Buf16(2 * (2 * a + 1)), this.bl_tree = new c.Buf16(2 * (2 * o + 1)), D(this.dyn_ltree), D(this.dyn_dtree), D(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new c.Buf16(k + 1), this.heap = new c.Buf16(2 * s2 + 1), D(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new c.Buf16(2 * s2 + 1), D(this.depth), this.l_buf = 0, this.lit_bufsize = 0, this.last_lit = 0, this.d_buf = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;\n      }\n      function G(e2) {\n        var t2;\n        return e2 && e2.state ? (e2.total_in = e2.total_out = 0, e2.data_type = i, (t2 = e2.state).pending = 0, t2.pending_out = 0, t2.wrap < 0 && (t2.wrap = -t2.wrap), t2.status = t2.wrap ? C : E, e2.adler = 2 === t2.wrap ? 0 : 1, t2.last_flush = l, u._tr_init(t2), m) : R2(e2, _);\n      }\n      function K2(e2) {\n        var t2 = G(e2);\n        return t2 === m && function(e3) {\n          e3.window_size = 2 * e3.w_size, D(e3.head), e3.max_lazy_match = h[e3.level].max_lazy, e3.good_match = h[e3.level].good_length, e3.nice_match = h[e3.level].nice_length, e3.max_chain_length = h[e3.level].max_chain, e3.strstart = 0, e3.block_start = 0, e3.lookahead = 0, e3.insert = 0, e3.match_length = e3.prev_length = x - 1, e3.match_available = 0, e3.ins_h = 0;\n        }(e2.state), t2;\n      }\n      function Y(e2, t2, r3, n2, i2, s3) {\n        if (!e2) return _;\n        var a2 = 1;\n        if (t2 === g && (t2 = 6), n2 < 0 ? (a2 = 0, n2 = -n2) : 15 < n2 && (a2 = 2, n2 -= 16), i2 < 1 || y < i2 || r3 !== v || n2 < 8 || 15 < n2 || t2 < 0 || 9 < t2 || s3 < 0 || b < s3) return R2(e2, _);\n        8 === n2 && (n2 = 9);\n        var o2 = new H();\n        return (e2.state = o2).strm = e2, o2.wrap = a2, o2.gzhead = null, o2.w_bits = n2, o2.w_size = 1 << o2.w_bits, o2.w_mask = o2.w_size - 1, o2.hash_bits = i2 + 7, o2.hash_size = 1 << o2.hash_bits, o2.hash_mask = o2.hash_size - 1, o2.hash_shift = ~~((o2.hash_bits + x - 1) / x), o2.window = new c.Buf8(2 * o2.w_size), o2.head = new c.Buf16(o2.hash_size), o2.prev = new c.Buf16(o2.w_size), o2.lit_bufsize = 1 << i2 + 6, o2.pending_buf_size = 4 * o2.lit_bufsize, o2.pending_buf = new c.Buf8(o2.pending_buf_size), o2.d_buf = 1 * o2.lit_bufsize, o2.l_buf = 3 * o2.lit_bufsize, o2.level = t2, o2.strategy = s3, o2.method = r3, K2(e2);\n      }\n      h = [new M(0, 0, 0, 0, function(e2, t2) {\n        var r3 = 65535;\n        for (r3 > e2.pending_buf_size - 5 && (r3 = e2.pending_buf_size - 5); ; ) {\n          if (e2.lookahead <= 1) {\n            if (j(e2), 0 === e2.lookahead && t2 === l) return A;\n            if (0 === e2.lookahead) break;\n          }\n          e2.strstart += e2.lookahead, e2.lookahead = 0;\n          var n2 = e2.block_start + r3;\n          if ((0 === e2.strstart || e2.strstart >= n2) && (e2.lookahead = e2.strstart - n2, e2.strstart = n2, N(e2, false), 0 === e2.strm.avail_out)) return A;\n          if (e2.strstart - e2.block_start >= e2.w_size - z && (N(e2, false), 0 === e2.strm.avail_out)) return A;\n        }\n        return e2.insert = 0, t2 === f2 ? (N(e2, true), 0 === e2.strm.avail_out ? O : B) : (e2.strstart > e2.block_start && (N(e2, false), e2.strm.avail_out), A);\n      }), new M(4, 4, 8, 4, Z), new M(4, 5, 16, 8, Z), new M(4, 6, 32, 32, Z), new M(4, 4, 16, 16, W), new M(8, 16, 32, 32, W), new M(8, 16, 128, 128, W), new M(8, 32, 128, 256, W), new M(32, 128, 258, 1024, W), new M(32, 258, 258, 4096, W)], r2.deflateInit = function(e2, t2) {\n        return Y(e2, t2, v, 15, 8, 0);\n      }, r2.deflateInit2 = Y, r2.deflateReset = K2, r2.deflateResetKeep = G, r2.deflateSetHeader = function(e2, t2) {\n        return e2 && e2.state ? 2 !== e2.state.wrap ? _ : (e2.state.gzhead = t2, m) : _;\n      }, r2.deflate = function(e2, t2) {\n        var r3, n2, i2, s3;\n        if (!e2 || !e2.state || 5 < t2 || t2 < 0) return e2 ? R2(e2, _) : _;\n        if (n2 = e2.state, !e2.output || !e2.input && 0 !== e2.avail_in || 666 === n2.status && t2 !== f2) return R2(e2, 0 === e2.avail_out ? -5 : _);\n        if (n2.strm = e2, r3 = n2.last_flush, n2.last_flush = t2, n2.status === C) if (2 === n2.wrap) e2.adler = 0, U(n2, 31), U(n2, 139), U(n2, 8), n2.gzhead ? (U(n2, (n2.gzhead.text ? 1 : 0) + (n2.gzhead.hcrc ? 2 : 0) + (n2.gzhead.extra ? 4 : 0) + (n2.gzhead.name ? 8 : 0) + (n2.gzhead.comment ? 16 : 0)), U(n2, 255 & n2.gzhead.time), U(n2, n2.gzhead.time >> 8 & 255), U(n2, n2.gzhead.time >> 16 & 255), U(n2, n2.gzhead.time >> 24 & 255), U(n2, 9 === n2.level ? 2 : 2 <= n2.strategy || n2.level < 2 ? 4 : 0), U(n2, 255 & n2.gzhead.os), n2.gzhead.extra && n2.gzhead.extra.length && (U(n2, 255 & n2.gzhead.extra.length), U(n2, n2.gzhead.extra.length >> 8 & 255)), n2.gzhead.hcrc && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending, 0)), n2.gzindex = 0, n2.status = 69) : (U(n2, 0), U(n2, 0), U(n2, 0), U(n2, 0), U(n2, 0), U(n2, 9 === n2.level ? 2 : 2 <= n2.strategy || n2.level < 2 ? 4 : 0), U(n2, 3), n2.status = E);\n        else {\n          var a2 = v + (n2.w_bits - 8 << 4) << 8;\n          a2 |= (2 <= n2.strategy || n2.level < 2 ? 0 : n2.level < 6 ? 1 : 6 === n2.level ? 2 : 3) << 6, 0 !== n2.strstart && (a2 |= 32), a2 += 31 - a2 % 31, n2.status = E, P(n2, a2), 0 !== n2.strstart && (P(n2, e2.adler >>> 16), P(n2, 65535 & e2.adler)), e2.adler = 1;\n        }\n        if (69 === n2.status) if (n2.gzhead.extra) {\n          for (i2 = n2.pending; n2.gzindex < (65535 & n2.gzhead.extra.length) && (n2.pending !== n2.pending_buf_size || (n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), F(e2), i2 = n2.pending, n2.pending !== n2.pending_buf_size)); ) U(n2, 255 & n2.gzhead.extra[n2.gzindex]), n2.gzindex++;\n          n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), n2.gzindex === n2.gzhead.extra.length && (n2.gzindex = 0, n2.status = 73);\n        } else n2.status = 73;\n        if (73 === n2.status) if (n2.gzhead.name) {\n          i2 = n2.pending;\n          do {\n            if (n2.pending === n2.pending_buf_size && (n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), F(e2), i2 = n2.pending, n2.pending === n2.pending_buf_size)) {\n              s3 = 1;\n              break;\n            }\n            s3 = n2.gzindex < n2.gzhead.name.length ? 255 & n2.gzhead.name.charCodeAt(n2.gzindex++) : 0, U(n2, s3);\n          } while (0 !== s3);\n          n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), 0 === s3 && (n2.gzindex = 0, n2.status = 91);\n        } else n2.status = 91;\n        if (91 === n2.status) if (n2.gzhead.comment) {\n          i2 = n2.pending;\n          do {\n            if (n2.pending === n2.pending_buf_size && (n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), F(e2), i2 = n2.pending, n2.pending === n2.pending_buf_size)) {\n              s3 = 1;\n              break;\n            }\n            s3 = n2.gzindex < n2.gzhead.comment.length ? 255 & n2.gzhead.comment.charCodeAt(n2.gzindex++) : 0, U(n2, s3);\n          } while (0 !== s3);\n          n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), 0 === s3 && (n2.status = 103);\n        } else n2.status = 103;\n        if (103 === n2.status && (n2.gzhead.hcrc ? (n2.pending + 2 > n2.pending_buf_size && F(e2), n2.pending + 2 <= n2.pending_buf_size && (U(n2, 255 & e2.adler), U(n2, e2.adler >> 8 & 255), e2.adler = 0, n2.status = E)) : n2.status = E), 0 !== n2.pending) {\n          if (F(e2), 0 === e2.avail_out) return n2.last_flush = -1, m;\n        } else if (0 === e2.avail_in && T(t2) <= T(r3) && t2 !== f2) return R2(e2, -5);\n        if (666 === n2.status && 0 !== e2.avail_in) return R2(e2, -5);\n        if (0 !== e2.avail_in || 0 !== n2.lookahead || t2 !== l && 666 !== n2.status) {\n          var o2 = 2 === n2.strategy ? function(e3, t3) {\n            for (var r4; ; ) {\n              if (0 === e3.lookahead && (j(e3), 0 === e3.lookahead)) {\n                if (t3 === l) return A;\n                break;\n              }\n              if (e3.match_length = 0, r4 = u._tr_tally(e3, 0, e3.window[e3.strstart]), e3.lookahead--, e3.strstart++, r4 && (N(e3, false), 0 === e3.strm.avail_out)) return A;\n            }\n            return e3.insert = 0, t3 === f2 ? (N(e3, true), 0 === e3.strm.avail_out ? O : B) : e3.last_lit && (N(e3, false), 0 === e3.strm.avail_out) ? A : I;\n          }(n2, t2) : 3 === n2.strategy ? function(e3, t3) {\n            for (var r4, n3, i3, s4, a3 = e3.window; ; ) {\n              if (e3.lookahead <= S) {\n                if (j(e3), e3.lookahead <= S && t3 === l) return A;\n                if (0 === e3.lookahead) break;\n              }\n              if (e3.match_length = 0, e3.lookahead >= x && 0 < e3.strstart && (n3 = a3[i3 = e3.strstart - 1]) === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3]) {\n                s4 = e3.strstart + S;\n                do {\n                } while (n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && i3 < s4);\n                e3.match_length = S - (s4 - i3), e3.match_length > e3.lookahead && (e3.match_length = e3.lookahead);\n              }\n              if (e3.match_length >= x ? (r4 = u._tr_tally(e3, 1, e3.match_length - x), e3.lookahead -= e3.match_length, e3.strstart += e3.match_length, e3.match_length = 0) : (r4 = u._tr_tally(e3, 0, e3.window[e3.strstart]), e3.lookahead--, e3.strstart++), r4 && (N(e3, false), 0 === e3.strm.avail_out)) return A;\n            }\n            return e3.insert = 0, t3 === f2 ? (N(e3, true), 0 === e3.strm.avail_out ? O : B) : e3.last_lit && (N(e3, false), 0 === e3.strm.avail_out) ? A : I;\n          }(n2, t2) : h[n2.level].func(n2, t2);\n          if (o2 !== O && o2 !== B || (n2.status = 666), o2 === A || o2 === O) return 0 === e2.avail_out && (n2.last_flush = -1), m;\n          if (o2 === I && (1 === t2 ? u._tr_align(n2) : 5 !== t2 && (u._tr_stored_block(n2, 0, 0, false), 3 === t2 && (D(n2.head), 0 === n2.lookahead && (n2.strstart = 0, n2.block_start = 0, n2.insert = 0))), F(e2), 0 === e2.avail_out)) return n2.last_flush = -1, m;\n        }\n        return t2 !== f2 ? m : n2.wrap <= 0 ? 1 : (2 === n2.wrap ? (U(n2, 255 & e2.adler), U(n2, e2.adler >> 8 & 255), U(n2, e2.adler >> 16 & 255), U(n2, e2.adler >> 24 & 255), U(n2, 255 & e2.total_in), U(n2, e2.total_in >> 8 & 255), U(n2, e2.total_in >> 16 & 255), U(n2, e2.total_in >> 24 & 255)) : (P(n2, e2.adler >>> 16), P(n2, 65535 & e2.adler)), F(e2), 0 < n2.wrap && (n2.wrap = -n2.wrap), 0 !== n2.pending ? m : 1);\n      }, r2.deflateEnd = function(e2) {\n        var t2;\n        return e2 && e2.state ? (t2 = e2.state.status) !== C && 69 !== t2 && 73 !== t2 && 91 !== t2 && 103 !== t2 && t2 !== E && 666 !== t2 ? R2(e2, _) : (e2.state = null, t2 === E ? R2(e2, -3) : m) : _;\n      }, r2.deflateSetDictionary = function(e2, t2) {\n        var r3, n2, i2, s3, a2, o2, h2, u2, l2 = t2.length;\n        if (!e2 || !e2.state) return _;\n        if (2 === (s3 = (r3 = e2.state).wrap) || 1 === s3 && r3.status !== C || r3.lookahead) return _;\n        for (1 === s3 && (e2.adler = d(e2.adler, t2, l2, 0)), r3.wrap = 0, l2 >= r3.w_size && (0 === s3 && (D(r3.head), r3.strstart = 0, r3.block_start = 0, r3.insert = 0), u2 = new c.Buf8(r3.w_size), c.arraySet(u2, t2, l2 - r3.w_size, r3.w_size, 0), t2 = u2, l2 = r3.w_size), a2 = e2.avail_in, o2 = e2.next_in, h2 = e2.input, e2.avail_in = l2, e2.next_in = 0, e2.input = t2, j(r3); r3.lookahead >= x; ) {\n          for (n2 = r3.strstart, i2 = r3.lookahead - (x - 1); r3.ins_h = (r3.ins_h << r3.hash_shift ^ r3.window[n2 + x - 1]) & r3.hash_mask, r3.prev[n2 & r3.w_mask] = r3.head[r3.ins_h], r3.head[r3.ins_h] = n2, n2++, --i2; ) ;\n          r3.strstart = n2, r3.lookahead = x - 1, j(r3);\n        }\n        return r3.strstart += r3.lookahead, r3.block_start = r3.strstart, r3.insert = r3.lookahead, r3.lookahead = 0, r3.match_length = r3.prev_length = x - 1, r3.match_available = 0, e2.next_in = o2, e2.input = h2, e2.avail_in = a2, r3.wrap = s3, m;\n      }, r2.deflateInfo = \"pako deflate (from Nodeca project)\";\n    }, { \"../utils/common\": 41, \"./adler32\": 43, \"./crc32\": 45, \"./messages\": 51, \"./trees\": 52 }], 47: [function(e, t, r2) {\n      t.exports = function() {\n        this.text = 0, this.time = 0, this.xflags = 0, this.os = 0, this.extra = null, this.extra_len = 0, this.name = \"\", this.comment = \"\", this.hcrc = 0, this.done = false;\n      };\n    }, {}], 48: [function(e, t, r2) {\n      t.exports = function(e2, t2) {\n        var r3, n, i, s2, a, o, h, u, l, f2, c, d, p, m, _, g, b, v, y, w, k, x, S, z, C;\n        r3 = e2.state, n = e2.next_in, z = e2.input, i = n + (e2.avail_in - 5), s2 = e2.next_out, C = e2.output, a = s2 - (t2 - e2.avail_out), o = s2 + (e2.avail_out - 257), h = r3.dmax, u = r3.wsize, l = r3.whave, f2 = r3.wnext, c = r3.window, d = r3.hold, p = r3.bits, m = r3.lencode, _ = r3.distcode, g = (1 << r3.lenbits) - 1, b = (1 << r3.distbits) - 1;\n        e: do {\n          p < 15 && (d += z[n++] << p, p += 8, d += z[n++] << p, p += 8), v = m[d & g];\n          t: for (; ; ) {\n            if (d >>>= y = v >>> 24, p -= y, 0 === (y = v >>> 16 & 255)) C[s2++] = 65535 & v;\n            else {\n              if (!(16 & y)) {\n                if (0 == (64 & y)) {\n                  v = m[(65535 & v) + (d & (1 << y) - 1)];\n                  continue t;\n                }\n                if (32 & y) {\n                  r3.mode = 12;\n                  break e;\n                }\n                e2.msg = \"invalid literal/length code\", r3.mode = 30;\n                break e;\n              }\n              w = 65535 & v, (y &= 15) && (p < y && (d += z[n++] << p, p += 8), w += d & (1 << y) - 1, d >>>= y, p -= y), p < 15 && (d += z[n++] << p, p += 8, d += z[n++] << p, p += 8), v = _[d & b];\n              r: for (; ; ) {\n                if (d >>>= y = v >>> 24, p -= y, !(16 & (y = v >>> 16 & 255))) {\n                  if (0 == (64 & y)) {\n                    v = _[(65535 & v) + (d & (1 << y) - 1)];\n                    continue r;\n                  }\n                  e2.msg = \"invalid distance code\", r3.mode = 30;\n                  break e;\n                }\n                if (k = 65535 & v, p < (y &= 15) && (d += z[n++] << p, (p += 8) < y && (d += z[n++] << p, p += 8)), h < (k += d & (1 << y) - 1)) {\n                  e2.msg = \"invalid distance too far back\", r3.mode = 30;\n                  break e;\n                }\n                if (d >>>= y, p -= y, (y = s2 - a) < k) {\n                  if (l < (y = k - y) && r3.sane) {\n                    e2.msg = \"invalid distance too far back\", r3.mode = 30;\n                    break e;\n                  }\n                  if (S = c, (x = 0) === f2) {\n                    if (x += u - y, y < w) {\n                      for (w -= y; C[s2++] = c[x++], --y; ) ;\n                      x = s2 - k, S = C;\n                    }\n                  } else if (f2 < y) {\n                    if (x += u + f2 - y, (y -= f2) < w) {\n                      for (w -= y; C[s2++] = c[x++], --y; ) ;\n                      if (x = 0, f2 < w) {\n                        for (w -= y = f2; C[s2++] = c[x++], --y; ) ;\n                        x = s2 - k, S = C;\n                      }\n                    }\n                  } else if (x += f2 - y, y < w) {\n                    for (w -= y; C[s2++] = c[x++], --y; ) ;\n                    x = s2 - k, S = C;\n                  }\n                  for (; 2 < w; ) C[s2++] = S[x++], C[s2++] = S[x++], C[s2++] = S[x++], w -= 3;\n                  w && (C[s2++] = S[x++], 1 < w && (C[s2++] = S[x++]));\n                } else {\n                  for (x = s2 - k; C[s2++] = C[x++], C[s2++] = C[x++], C[s2++] = C[x++], 2 < (w -= 3); ) ;\n                  w && (C[s2++] = C[x++], 1 < w && (C[s2++] = C[x++]));\n                }\n                break;\n              }\n            }\n            break;\n          }\n        } while (n < i && s2 < o);\n        n -= w = p >> 3, d &= (1 << (p -= w << 3)) - 1, e2.next_in = n, e2.next_out = s2, e2.avail_in = n < i ? i - n + 5 : 5 - (n - i), e2.avail_out = s2 < o ? o - s2 + 257 : 257 - (s2 - o), r3.hold = d, r3.bits = p;\n      };\n    }, {}], 49: [function(e, t, r2) {\n      var I = e(\"../utils/common\"), O = e(\"./adler32\"), B = e(\"./crc32\"), R2 = e(\"./inffast\"), T = e(\"./inftrees\"), D = 1, F = 2, N = 0, U = -2, P = 1, n = 852, i = 592;\n      function L(e2) {\n        return (e2 >>> 24 & 255) + (e2 >>> 8 & 65280) + ((65280 & e2) << 8) + ((255 & e2) << 24);\n      }\n      function s2() {\n        this.mode = 0, this.last = false, this.wrap = 0, this.havedict = false, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new I.Buf16(320), this.work = new I.Buf16(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;\n      }\n      function a(e2) {\n        var t2;\n        return e2 && e2.state ? (t2 = e2.state, e2.total_in = e2.total_out = t2.total = 0, e2.msg = \"\", t2.wrap && (e2.adler = 1 & t2.wrap), t2.mode = P, t2.last = 0, t2.havedict = 0, t2.dmax = 32768, t2.head = null, t2.hold = 0, t2.bits = 0, t2.lencode = t2.lendyn = new I.Buf32(n), t2.distcode = t2.distdyn = new I.Buf32(i), t2.sane = 1, t2.back = -1, N) : U;\n      }\n      function o(e2) {\n        var t2;\n        return e2 && e2.state ? ((t2 = e2.state).wsize = 0, t2.whave = 0, t2.wnext = 0, a(e2)) : U;\n      }\n      function h(e2, t2) {\n        var r3, n2;\n        return e2 && e2.state ? (n2 = e2.state, t2 < 0 ? (r3 = 0, t2 = -t2) : (r3 = 1 + (t2 >> 4), t2 < 48 && (t2 &= 15)), t2 && (t2 < 8 || 15 < t2) ? U : (null !== n2.window && n2.wbits !== t2 && (n2.window = null), n2.wrap = r3, n2.wbits = t2, o(e2))) : U;\n      }\n      function u(e2, t2) {\n        var r3, n2;\n        return e2 ? (n2 = new s2(), (e2.state = n2).window = null, (r3 = h(e2, t2)) !== N && (e2.state = null), r3) : U;\n      }\n      var l, f2, c = true;\n      function j(e2) {\n        if (c) {\n          var t2;\n          for (l = new I.Buf32(512), f2 = new I.Buf32(32), t2 = 0; t2 < 144; ) e2.lens[t2++] = 8;\n          for (; t2 < 256; ) e2.lens[t2++] = 9;\n          for (; t2 < 280; ) e2.lens[t2++] = 7;\n          for (; t2 < 288; ) e2.lens[t2++] = 8;\n          for (T(D, e2.lens, 0, 288, l, 0, e2.work, { bits: 9 }), t2 = 0; t2 < 32; ) e2.lens[t2++] = 5;\n          T(F, e2.lens, 0, 32, f2, 0, e2.work, { bits: 5 }), c = false;\n        }\n        e2.lencode = l, e2.lenbits = 9, e2.distcode = f2, e2.distbits = 5;\n      }\n      function Z(e2, t2, r3, n2) {\n        var i2, s3 = e2.state;\n        return null === s3.window && (s3.wsize = 1 << s3.wbits, s3.wnext = 0, s3.whave = 0, s3.window = new I.Buf8(s3.wsize)), n2 >= s3.wsize ? (I.arraySet(s3.window, t2, r3 - s3.wsize, s3.wsize, 0), s3.wnext = 0, s3.whave = s3.wsize) : (n2 < (i2 = s3.wsize - s3.wnext) && (i2 = n2), I.arraySet(s3.window, t2, r3 - n2, i2, s3.wnext), (n2 -= i2) ? (I.arraySet(s3.window, t2, r3 - n2, n2, 0), s3.wnext = n2, s3.whave = s3.wsize) : (s3.wnext += i2, s3.wnext === s3.wsize && (s3.wnext = 0), s3.whave < s3.wsize && (s3.whave += i2))), 0;\n      }\n      r2.inflateReset = o, r2.inflateReset2 = h, r2.inflateResetKeep = a, r2.inflateInit = function(e2) {\n        return u(e2, 15);\n      }, r2.inflateInit2 = u, r2.inflate = function(e2, t2) {\n        var r3, n2, i2, s3, a2, o2, h2, u2, l2, f3, c2, d, p, m, _, g, b, v, y, w, k, x, S, z, C = 0, E = new I.Buf8(4), A = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n        if (!e2 || !e2.state || !e2.output || !e2.input && 0 !== e2.avail_in) return U;\n        12 === (r3 = e2.state).mode && (r3.mode = 13), a2 = e2.next_out, i2 = e2.output, h2 = e2.avail_out, s3 = e2.next_in, n2 = e2.input, o2 = e2.avail_in, u2 = r3.hold, l2 = r3.bits, f3 = o2, c2 = h2, x = N;\n        e: for (; ; ) switch (r3.mode) {\n          case P:\n            if (0 === r3.wrap) {\n              r3.mode = 13;\n              break;\n            }\n            for (; l2 < 16; ) {\n              if (0 === o2) break e;\n              o2--, u2 += n2[s3++] << l2, l2 += 8;\n            }\n            if (2 & r3.wrap && 35615 === u2) {\n              E[r3.check = 0] = 255 & u2, E[1] = u2 >>> 8 & 255, r3.check = B(r3.check, E, 2, 0), l2 = u2 = 0, r3.mode = 2;\n              break;\n            }\n            if (r3.flags = 0, r3.head && (r3.head.done = false), !(1 & r3.wrap) || (((255 & u2) << 8) + (u2 >> 8)) % 31) {\n              e2.msg = \"incorrect header check\", r3.mode = 30;\n              break;\n            }\n            if (8 != (15 & u2)) {\n              e2.msg = \"unknown compression method\", r3.mode = 30;\n              break;\n            }\n            if (l2 -= 4, k = 8 + (15 & (u2 >>>= 4)), 0 === r3.wbits) r3.wbits = k;\n            else if (k > r3.wbits) {\n              e2.msg = \"invalid window size\", r3.mode = 30;\n              break;\n            }\n            r3.dmax = 1 << k, e2.adler = r3.check = 1, r3.mode = 512 & u2 ? 10 : 12, l2 = u2 = 0;\n            break;\n          case 2:\n            for (; l2 < 16; ) {\n              if (0 === o2) break e;\n              o2--, u2 += n2[s3++] << l2, l2 += 8;\n            }\n            if (r3.flags = u2, 8 != (255 & r3.flags)) {\n              e2.msg = \"unknown compression method\", r3.mode = 30;\n              break;\n            }\n            if (57344 & r3.flags) {\n              e2.msg = \"unknown header flags set\", r3.mode = 30;\n              break;\n            }\n            r3.head && (r3.head.text = u2 >> 8 & 1), 512 & r3.flags && (E[0] = 255 & u2, E[1] = u2 >>> 8 & 255, r3.check = B(r3.check, E, 2, 0)), l2 = u2 = 0, r3.mode = 3;\n          case 3:\n            for (; l2 < 32; ) {\n              if (0 === o2) break e;\n              o2--, u2 += n2[s3++] << l2, l2 += 8;\n            }\n            r3.head && (r3.head.time = u2), 512 & r3.flags && (E[0] = 255 & u2, E[1] = u2 >>> 8 & 255, E[2] = u2 >>> 16 & 255, E[3] = u2 >>> 24 & 255, r3.check = B(r3.check, E, 4, 0)), l2 = u2 = 0, r3.mode = 4;\n          case 4:\n            for (; l2 < 16; ) {\n              if (0 === o2) break e;\n              o2--, u2 += n2[s3++] << l2, l2 += 8;\n            }\n            r3.head && (r3.head.xflags = 255 & u2, r3.head.os = u2 >> 8), 512 & r3.flags && (E[0] = 255 & u2, E[1] = u2 >>> 8 & 255, r3.check = B(r3.check, E, 2, 0)), l2 = u2 = 0, r3.mode = 5;\n          case 5:\n            if (1024 & r3.flags) {\n              for (; l2 < 16; ) {\n                if (0 === o2) break e;\n                o2--, u2 += n2[s3++] << l2, l2 += 8;\n              }\n              r3.length = u2, r3.head && (r3.head.extra_len = u2), 512 & r3.flags && (E[0] = 255 & u2, E[1] = u2 >>> 8 & 255, r3.check = B(r3.check, E, 2, 0)), l2 = u2 = 0;\n            } else r3.head && (r3.head.extra = null);\n            r3.mode = 6;\n          case 6:\n            if (1024 & r3.flags && (o2 < (d = r3.length) && (d = o2), d && (r3.head && (k = r3.head.extra_len - r3.length, r3.head.extra || (r3.head.extra = new Array(r3.head.extra_len)), I.arraySet(r3.head.extra, n2, s3, d, k)), 512 & r3.flags && (r3.check = B(r3.check, n2, d, s3)), o2 -= d, s3 += d, r3.length -= d), r3.length)) break e;\n            r3.length = 0, r3.mode = 7;\n          case 7:\n            if (2048 & r3.flags) {\n              if (0 === o2) break e;\n              for (d = 0; k = n2[s3 + d++], r3.head && k && r3.length < 65536 && (r3.head.name += String.fromCharCode(k)), k && d < o2; ) ;\n              if (512 & r3.flags && (r3.check = B(r3.check, n2, d, s3)), o2 -= d, s3 += d, k) break e;\n            } else r3.head && (r3.head.name = null);\n            r3.length = 0, r3.mode = 8;\n          case 8:\n            if (4096 & r3.flags) {\n              if (0 === o2) break e;\n              for (d = 0; k = n2[s3 + d++], r3.head && k && r3.length < 65536 && (r3.head.comment += String.fromCharCode(k)), k && d < o2; ) ;\n              if (512 & r3.flags && (r3.check = B(r3.check, n2, d, s3)), o2 -= d, s3 += d, k) break e;\n            } else r3.head && (r3.head.comment = null);\n            r3.mode = 9;\n          case 9:\n            if (512 & r3.flags) {\n              for (; l2 < 16; ) {\n                if (0 === o2) break e;\n                o2--, u2 += n2[s3++] << l2, l2 += 8;\n              }\n              if (u2 !== (65535 & r3.check)) {\n                e2.msg = \"header crc mismatch\", r3.mode = 30;\n                break;\n              }\n              l2 = u2 = 0;\n            }\n            r3.head && (r3.head.hcrc = r3.flags >> 9 & 1, r3.head.done = true), e2.adler = r3.check = 0, r3.mode = 12;\n            break;\n          case 10:\n            for (; l2 < 32; ) {\n              if (0 === o2) break e;\n              o2--, u2 += n2[s3++] << l2, l2 += 8;\n            }\n            e2.adler = r3.check = L(u2), l2 = u2 = 0, r3.mode = 11;\n          case 11:\n            if (0 === r3.havedict) return e2.next_out = a2, e2.avail_out = h2, e2.next_in = s3, e2.avail_in = o2, r3.hold = u2, r3.bits = l2, 2;\n            e2.adler = r3.check = 1, r3.mode = 12;\n          case 12:\n            if (5 === t2 || 6 === t2) break e;\n          case 13:\n            if (r3.last) {\n              u2 >>>= 7 & l2, l2 -= 7 & l2, r3.mode = 27;\n              break;\n            }\n            for (; l2 < 3; ) {\n              if (0 === o2) break e;\n              o2--, u2 += n2[s3++] << l2, l2 += 8;\n            }\n            switch (r3.last = 1 & u2, l2 -= 1, 3 & (u2 >>>= 1)) {\n              case 0:\n                r3.mode = 14;\n                break;\n              case 1:\n                if (j(r3), r3.mode = 20, 6 !== t2) break;\n                u2 >>>= 2, l2 -= 2;\n                break e;\n              case 2:\n                r3.mode = 17;\n                break;\n              case 3:\n                e2.msg = \"invalid block type\", r3.mode = 30;\n            }\n            u2 >>>= 2, l2 -= 2;\n            break;\n          case 14:\n            for (u2 >>>= 7 & l2, l2 -= 7 & l2; l2 < 32; ) {\n              if (0 === o2) break e;\n              o2--, u2 += n2[s3++] << l2, l2 += 8;\n            }\n            if ((65535 & u2) != (u2 >>> 16 ^ 65535)) {\n              e2.msg = \"invalid stored block lengths\", r3.mode = 30;\n              break;\n            }\n            if (r3.length = 65535 & u2, l2 = u2 = 0, r3.mode = 15, 6 === t2) break e;\n          case 15:\n            r3.mode = 16;\n          case 16:\n            if (d = r3.length) {\n              if (o2 < d && (d = o2), h2 < d && (d = h2), 0 === d) break e;\n              I.arraySet(i2, n2, s3, d, a2), o2 -= d, s3 += d, h2 -= d, a2 += d, r3.length -= d;\n              break;\n            }\n            r3.mode = 12;\n            break;\n          case 17:\n            for (; l2 < 14; ) {\n              if (0 === o2) break e;\n              o2--, u2 += n2[s3++] << l2, l2 += 8;\n            }\n            if (r3.nlen = 257 + (31 & u2), u2 >>>= 5, l2 -= 5, r3.ndist = 1 + (31 & u2), u2 >>>= 5, l2 -= 5, r3.ncode = 4 + (15 & u2), u2 >>>= 4, l2 -= 4, 286 < r3.nlen || 30 < r3.ndist) {\n              e2.msg = \"too many length or distance symbols\", r3.mode = 30;\n              break;\n            }\n            r3.have = 0, r3.mode = 18;\n          case 18:\n            for (; r3.have < r3.ncode; ) {\n              for (; l2 < 3; ) {\n                if (0 === o2) break e;\n                o2--, u2 += n2[s3++] << l2, l2 += 8;\n              }\n              r3.lens[A[r3.have++]] = 7 & u2, u2 >>>= 3, l2 -= 3;\n            }\n            for (; r3.have < 19; ) r3.lens[A[r3.have++]] = 0;\n            if (r3.lencode = r3.lendyn, r3.lenbits = 7, S = { bits: r3.lenbits }, x = T(0, r3.lens, 0, 19, r3.lencode, 0, r3.work, S), r3.lenbits = S.bits, x) {\n              e2.msg = \"invalid code lengths set\", r3.mode = 30;\n              break;\n            }\n            r3.have = 0, r3.mode = 19;\n          case 19:\n            for (; r3.have < r3.nlen + r3.ndist; ) {\n              for (; g = (C = r3.lencode[u2 & (1 << r3.lenbits) - 1]) >>> 16 & 255, b = 65535 & C, !((_ = C >>> 24) <= l2); ) {\n                if (0 === o2) break e;\n                o2--, u2 += n2[s3++] << l2, l2 += 8;\n              }\n              if (b < 16) u2 >>>= _, l2 -= _, r3.lens[r3.have++] = b;\n              else {\n                if (16 === b) {\n                  for (z = _ + 2; l2 < z; ) {\n                    if (0 === o2) break e;\n                    o2--, u2 += n2[s3++] << l2, l2 += 8;\n                  }\n                  if (u2 >>>= _, l2 -= _, 0 === r3.have) {\n                    e2.msg = \"invalid bit length repeat\", r3.mode = 30;\n                    break;\n                  }\n                  k = r3.lens[r3.have - 1], d = 3 + (3 & u2), u2 >>>= 2, l2 -= 2;\n                } else if (17 === b) {\n                  for (z = _ + 3; l2 < z; ) {\n                    if (0 === o2) break e;\n                    o2--, u2 += n2[s3++] << l2, l2 += 8;\n                  }\n                  l2 -= _, k = 0, d = 3 + (7 & (u2 >>>= _)), u2 >>>= 3, l2 -= 3;\n                } else {\n                  for (z = _ + 7; l2 < z; ) {\n                    if (0 === o2) break e;\n                    o2--, u2 += n2[s3++] << l2, l2 += 8;\n                  }\n                  l2 -= _, k = 0, d = 11 + (127 & (u2 >>>= _)), u2 >>>= 7, l2 -= 7;\n                }\n                if (r3.have + d > r3.nlen + r3.ndist) {\n                  e2.msg = \"invalid bit length repeat\", r3.mode = 30;\n                  break;\n                }\n                for (; d--; ) r3.lens[r3.have++] = k;\n              }\n            }\n            if (30 === r3.mode) break;\n            if (0 === r3.lens[256]) {\n              e2.msg = \"invalid code -- missing end-of-block\", r3.mode = 30;\n              break;\n            }\n            if (r3.lenbits = 9, S = { bits: r3.lenbits }, x = T(D, r3.lens, 0, r3.nlen, r3.lencode, 0, r3.work, S), r3.lenbits = S.bits, x) {\n              e2.msg = \"invalid literal/lengths set\", r3.mode = 30;\n              break;\n            }\n            if (r3.distbits = 6, r3.distcode = r3.distdyn, S = { bits: r3.distbits }, x = T(F, r3.lens, r3.nlen, r3.ndist, r3.distcode, 0, r3.work, S), r3.distbits = S.bits, x) {\n              e2.msg = \"invalid distances set\", r3.mode = 30;\n              break;\n            }\n            if (r3.mode = 20, 6 === t2) break e;\n          case 20:\n            r3.mode = 21;\n          case 21:\n            if (6 <= o2 && 258 <= h2) {\n              e2.next_out = a2, e2.avail_out = h2, e2.next_in = s3, e2.avail_in = o2, r3.hold = u2, r3.bits = l2, R2(e2, c2), a2 = e2.next_out, i2 = e2.output, h2 = e2.avail_out, s3 = e2.next_in, n2 = e2.input, o2 = e2.avail_in, u2 = r3.hold, l2 = r3.bits, 12 === r3.mode && (r3.back = -1);\n              break;\n            }\n            for (r3.back = 0; g = (C = r3.lencode[u2 & (1 << r3.lenbits) - 1]) >>> 16 & 255, b = 65535 & C, !((_ = C >>> 24) <= l2); ) {\n              if (0 === o2) break e;\n              o2--, u2 += n2[s3++] << l2, l2 += 8;\n            }\n            if (g && 0 == (240 & g)) {\n              for (v = _, y = g, w = b; g = (C = r3.lencode[w + ((u2 & (1 << v + y) - 1) >> v)]) >>> 16 & 255, b = 65535 & C, !(v + (_ = C >>> 24) <= l2); ) {\n                if (0 === o2) break e;\n                o2--, u2 += n2[s3++] << l2, l2 += 8;\n              }\n              u2 >>>= v, l2 -= v, r3.back += v;\n            }\n            if (u2 >>>= _, l2 -= _, r3.back += _, r3.length = b, 0 === g) {\n              r3.mode = 26;\n              break;\n            }\n            if (32 & g) {\n              r3.back = -1, r3.mode = 12;\n              break;\n            }\n            if (64 & g) {\n              e2.msg = \"invalid literal/length code\", r3.mode = 30;\n              break;\n            }\n            r3.extra = 15 & g, r3.mode = 22;\n          case 22:\n            if (r3.extra) {\n              for (z = r3.extra; l2 < z; ) {\n                if (0 === o2) break e;\n                o2--, u2 += n2[s3++] << l2, l2 += 8;\n              }\n              r3.length += u2 & (1 << r3.extra) - 1, u2 >>>= r3.extra, l2 -= r3.extra, r3.back += r3.extra;\n            }\n            r3.was = r3.length, r3.mode = 23;\n          case 23:\n            for (; g = (C = r3.distcode[u2 & (1 << r3.distbits) - 1]) >>> 16 & 255, b = 65535 & C, !((_ = C >>> 24) <= l2); ) {\n              if (0 === o2) break e;\n              o2--, u2 += n2[s3++] << l2, l2 += 8;\n            }\n            if (0 == (240 & g)) {\n              for (v = _, y = g, w = b; g = (C = r3.distcode[w + ((u2 & (1 << v + y) - 1) >> v)]) >>> 16 & 255, b = 65535 & C, !(v + (_ = C >>> 24) <= l2); ) {\n                if (0 === o2) break e;\n                o2--, u2 += n2[s3++] << l2, l2 += 8;\n              }\n              u2 >>>= v, l2 -= v, r3.back += v;\n            }\n            if (u2 >>>= _, l2 -= _, r3.back += _, 64 & g) {\n              e2.msg = \"invalid distance code\", r3.mode = 30;\n              break;\n            }\n            r3.offset = b, r3.extra = 15 & g, r3.mode = 24;\n          case 24:\n            if (r3.extra) {\n              for (z = r3.extra; l2 < z; ) {\n                if (0 === o2) break e;\n                o2--, u2 += n2[s3++] << l2, l2 += 8;\n              }\n              r3.offset += u2 & (1 << r3.extra) - 1, u2 >>>= r3.extra, l2 -= r3.extra, r3.back += r3.extra;\n            }\n            if (r3.offset > r3.dmax) {\n              e2.msg = \"invalid distance too far back\", r3.mode = 30;\n              break;\n            }\n            r3.mode = 25;\n          case 25:\n            if (0 === h2) break e;\n            if (d = c2 - h2, r3.offset > d) {\n              if ((d = r3.offset - d) > r3.whave && r3.sane) {\n                e2.msg = \"invalid distance too far back\", r3.mode = 30;\n                break;\n              }\n              p = d > r3.wnext ? (d -= r3.wnext, r3.wsize - d) : r3.wnext - d, d > r3.length && (d = r3.length), m = r3.window;\n            } else m = i2, p = a2 - r3.offset, d = r3.length;\n            for (h2 < d && (d = h2), h2 -= d, r3.length -= d; i2[a2++] = m[p++], --d; ) ;\n            0 === r3.length && (r3.mode = 21);\n            break;\n          case 26:\n            if (0 === h2) break e;\n            i2[a2++] = r3.length, h2--, r3.mode = 21;\n            break;\n          case 27:\n            if (r3.wrap) {\n              for (; l2 < 32; ) {\n                if (0 === o2) break e;\n                o2--, u2 |= n2[s3++] << l2, l2 += 8;\n              }\n              if (c2 -= h2, e2.total_out += c2, r3.total += c2, c2 && (e2.adler = r3.check = r3.flags ? B(r3.check, i2, c2, a2 - c2) : O(r3.check, i2, c2, a2 - c2)), c2 = h2, (r3.flags ? u2 : L(u2)) !== r3.check) {\n                e2.msg = \"incorrect data check\", r3.mode = 30;\n                break;\n              }\n              l2 = u2 = 0;\n            }\n            r3.mode = 28;\n          case 28:\n            if (r3.wrap && r3.flags) {\n              for (; l2 < 32; ) {\n                if (0 === o2) break e;\n                o2--, u2 += n2[s3++] << l2, l2 += 8;\n              }\n              if (u2 !== (4294967295 & r3.total)) {\n                e2.msg = \"incorrect length check\", r3.mode = 30;\n                break;\n              }\n              l2 = u2 = 0;\n            }\n            r3.mode = 29;\n          case 29:\n            x = 1;\n            break e;\n          case 30:\n            x = -3;\n            break e;\n          case 31:\n            return -4;\n          case 32:\n          default:\n            return U;\n        }\n        return e2.next_out = a2, e2.avail_out = h2, e2.next_in = s3, e2.avail_in = o2, r3.hold = u2, r3.bits = l2, (r3.wsize || c2 !== e2.avail_out && r3.mode < 30 && (r3.mode < 27 || 4 !== t2)) && Z(e2, e2.output, e2.next_out, c2 - e2.avail_out) ? (r3.mode = 31, -4) : (f3 -= e2.avail_in, c2 -= e2.avail_out, e2.total_in += f3, e2.total_out += c2, r3.total += c2, r3.wrap && c2 && (e2.adler = r3.check = r3.flags ? B(r3.check, i2, c2, e2.next_out - c2) : O(r3.check, i2, c2, e2.next_out - c2)), e2.data_type = r3.bits + (r3.last ? 64 : 0) + (12 === r3.mode ? 128 : 0) + (20 === r3.mode || 15 === r3.mode ? 256 : 0), (0 == f3 && 0 === c2 || 4 === t2) && x === N && (x = -5), x);\n      }, r2.inflateEnd = function(e2) {\n        if (!e2 || !e2.state) return U;\n        var t2 = e2.state;\n        return t2.window && (t2.window = null), e2.state = null, N;\n      }, r2.inflateGetHeader = function(e2, t2) {\n        var r3;\n        return e2 && e2.state ? 0 == (2 & (r3 = e2.state).wrap) ? U : ((r3.head = t2).done = false, N) : U;\n      }, r2.inflateSetDictionary = function(e2, t2) {\n        var r3, n2 = t2.length;\n        return e2 && e2.state ? 0 !== (r3 = e2.state).wrap && 11 !== r3.mode ? U : 11 === r3.mode && O(1, t2, n2, 0) !== r3.check ? -3 : Z(e2, t2, n2, n2) ? (r3.mode = 31, -4) : (r3.havedict = 1, N) : U;\n      }, r2.inflateInfo = \"pako inflate (from Nodeca project)\";\n    }, { \"../utils/common\": 41, \"./adler32\": 43, \"./crc32\": 45, \"./inffast\": 48, \"./inftrees\": 50 }], 50: [function(e, t, r2) {\n      var D = e(\"../utils/common\"), F = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0], N = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78], U = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0], P = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];\n      t.exports = function(e2, t2, r3, n, i, s2, a, o) {\n        var h, u, l, f2, c, d, p, m, _, g = o.bits, b = 0, v = 0, y = 0, w = 0, k = 0, x = 0, S = 0, z = 0, C = 0, E = 0, A = null, I = 0, O = new D.Buf16(16), B = new D.Buf16(16), R2 = null, T = 0;\n        for (b = 0; b <= 15; b++) O[b] = 0;\n        for (v = 0; v < n; v++) O[t2[r3 + v]]++;\n        for (k = g, w = 15; 1 <= w && 0 === O[w]; w--) ;\n        if (w < k && (k = w), 0 === w) return i[s2++] = 20971520, i[s2++] = 20971520, o.bits = 1, 0;\n        for (y = 1; y < w && 0 === O[y]; y++) ;\n        for (k < y && (k = y), b = z = 1; b <= 15; b++) if (z <<= 1, (z -= O[b]) < 0) return -1;\n        if (0 < z && (0 === e2 || 1 !== w)) return -1;\n        for (B[1] = 0, b = 1; b < 15; b++) B[b + 1] = B[b] + O[b];\n        for (v = 0; v < n; v++) 0 !== t2[r3 + v] && (a[B[t2[r3 + v]]++] = v);\n        if (d = 0 === e2 ? (A = R2 = a, 19) : 1 === e2 ? (A = F, I -= 257, R2 = N, T -= 257, 256) : (A = U, R2 = P, -1), b = y, c = s2, S = v = E = 0, l = -1, f2 = (C = 1 << (x = k)) - 1, 1 === e2 && 852 < C || 2 === e2 && 592 < C) return 1;\n        for (; ; ) {\n          for (p = b - S, _ = a[v] < d ? (m = 0, a[v]) : a[v] > d ? (m = R2[T + a[v]], A[I + a[v]]) : (m = 96, 0), h = 1 << b - S, y = u = 1 << x; i[c + (E >> S) + (u -= h)] = p << 24 | m << 16 | _ | 0, 0 !== u; ) ;\n          for (h = 1 << b - 1; E & h; ) h >>= 1;\n          if (0 !== h ? (E &= h - 1, E += h) : E = 0, v++, 0 == --O[b]) {\n            if (b === w) break;\n            b = t2[r3 + a[v]];\n          }\n          if (k < b && (E & f2) !== l) {\n            for (0 === S && (S = k), c += y, z = 1 << (x = b - S); x + S < w && !((z -= O[x + S]) <= 0); ) x++, z <<= 1;\n            if (C += 1 << x, 1 === e2 && 852 < C || 2 === e2 && 592 < C) return 1;\n            i[l = E & f2] = k << 24 | x << 16 | c - s2 | 0;\n          }\n        }\n        return 0 !== E && (i[c + E] = b - S << 24 | 64 << 16 | 0), o.bits = k, 0;\n      };\n    }, { \"../utils/common\": 41 }], 51: [function(e, t, r2) {\n      t.exports = { 2: \"need dictionary\", 1: \"stream end\", 0: \"\", \"-1\": \"file error\", \"-2\": \"stream error\", \"-3\": \"data error\", \"-4\": \"insufficient memory\", \"-5\": \"buffer error\", \"-6\": \"incompatible version\" };\n    }, {}], 52: [function(e, t, r2) {\n      var i = e(\"../utils/common\"), o = 0, h = 1;\n      function n(e2) {\n        for (var t2 = e2.length; 0 <= --t2; ) e2[t2] = 0;\n      }\n      var s2 = 0, a = 29, u = 256, l = u + 1 + a, f2 = 30, c = 19, _ = 2 * l + 1, g = 15, d = 16, p = 7, m = 256, b = 16, v = 17, y = 18, w = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0], k = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13], x = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7], S = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], z = new Array(2 * (l + 2));\n      n(z);\n      var C = new Array(2 * f2);\n      n(C);\n      var E = new Array(512);\n      n(E);\n      var A = new Array(256);\n      n(A);\n      var I = new Array(a);\n      n(I);\n      var O, B, R2, T = new Array(f2);\n      function D(e2, t2, r3, n2, i2) {\n        this.static_tree = e2, this.extra_bits = t2, this.extra_base = r3, this.elems = n2, this.max_length = i2, this.has_stree = e2 && e2.length;\n      }\n      function F(e2, t2) {\n        this.dyn_tree = e2, this.max_code = 0, this.stat_desc = t2;\n      }\n      function N(e2) {\n        return e2 < 256 ? E[e2] : E[256 + (e2 >>> 7)];\n      }\n      function U(e2, t2) {\n        e2.pending_buf[e2.pending++] = 255 & t2, e2.pending_buf[e2.pending++] = t2 >>> 8 & 255;\n      }\n      function P(e2, t2, r3) {\n        e2.bi_valid > d - r3 ? (e2.bi_buf |= t2 << e2.bi_valid & 65535, U(e2, e2.bi_buf), e2.bi_buf = t2 >> d - e2.bi_valid, e2.bi_valid += r3 - d) : (e2.bi_buf |= t2 << e2.bi_valid & 65535, e2.bi_valid += r3);\n      }\n      function L(e2, t2, r3) {\n        P(e2, r3[2 * t2], r3[2 * t2 + 1]);\n      }\n      function j(e2, t2) {\n        for (var r3 = 0; r3 |= 1 & e2, e2 >>>= 1, r3 <<= 1, 0 < --t2; ) ;\n        return r3 >>> 1;\n      }\n      function Z(e2, t2, r3) {\n        var n2, i2, s3 = new Array(g + 1), a2 = 0;\n        for (n2 = 1; n2 <= g; n2++) s3[n2] = a2 = a2 + r3[n2 - 1] << 1;\n        for (i2 = 0; i2 <= t2; i2++) {\n          var o2 = e2[2 * i2 + 1];\n          0 !== o2 && (e2[2 * i2] = j(s3[o2]++, o2));\n        }\n      }\n      function W(e2) {\n        var t2;\n        for (t2 = 0; t2 < l; t2++) e2.dyn_ltree[2 * t2] = 0;\n        for (t2 = 0; t2 < f2; t2++) e2.dyn_dtree[2 * t2] = 0;\n        for (t2 = 0; t2 < c; t2++) e2.bl_tree[2 * t2] = 0;\n        e2.dyn_ltree[2 * m] = 1, e2.opt_len = e2.static_len = 0, e2.last_lit = e2.matches = 0;\n      }\n      function M(e2) {\n        8 < e2.bi_valid ? U(e2, e2.bi_buf) : 0 < e2.bi_valid && (e2.pending_buf[e2.pending++] = e2.bi_buf), e2.bi_buf = 0, e2.bi_valid = 0;\n      }\n      function H(e2, t2, r3, n2) {\n        var i2 = 2 * t2, s3 = 2 * r3;\n        return e2[i2] < e2[s3] || e2[i2] === e2[s3] && n2[t2] <= n2[r3];\n      }\n      function G(e2, t2, r3) {\n        for (var n2 = e2.heap[r3], i2 = r3 << 1; i2 <= e2.heap_len && (i2 < e2.heap_len && H(t2, e2.heap[i2 + 1], e2.heap[i2], e2.depth) && i2++, !H(t2, n2, e2.heap[i2], e2.depth)); ) e2.heap[r3] = e2.heap[i2], r3 = i2, i2 <<= 1;\n        e2.heap[r3] = n2;\n      }\n      function K2(e2, t2, r3) {\n        var n2, i2, s3, a2, o2 = 0;\n        if (0 !== e2.last_lit) for (; n2 = e2.pending_buf[e2.d_buf + 2 * o2] << 8 | e2.pending_buf[e2.d_buf + 2 * o2 + 1], i2 = e2.pending_buf[e2.l_buf + o2], o2++, 0 === n2 ? L(e2, i2, t2) : (L(e2, (s3 = A[i2]) + u + 1, t2), 0 !== (a2 = w[s3]) && P(e2, i2 -= I[s3], a2), L(e2, s3 = N(--n2), r3), 0 !== (a2 = k[s3]) && P(e2, n2 -= T[s3], a2)), o2 < e2.last_lit; ) ;\n        L(e2, m, t2);\n      }\n      function Y(e2, t2) {\n        var r3, n2, i2, s3 = t2.dyn_tree, a2 = t2.stat_desc.static_tree, o2 = t2.stat_desc.has_stree, h2 = t2.stat_desc.elems, u2 = -1;\n        for (e2.heap_len = 0, e2.heap_max = _, r3 = 0; r3 < h2; r3++) 0 !== s3[2 * r3] ? (e2.heap[++e2.heap_len] = u2 = r3, e2.depth[r3] = 0) : s3[2 * r3 + 1] = 0;\n        for (; e2.heap_len < 2; ) s3[2 * (i2 = e2.heap[++e2.heap_len] = u2 < 2 ? ++u2 : 0)] = 1, e2.depth[i2] = 0, e2.opt_len--, o2 && (e2.static_len -= a2[2 * i2 + 1]);\n        for (t2.max_code = u2, r3 = e2.heap_len >> 1; 1 <= r3; r3--) G(e2, s3, r3);\n        for (i2 = h2; r3 = e2.heap[1], e2.heap[1] = e2.heap[e2.heap_len--], G(e2, s3, 1), n2 = e2.heap[1], e2.heap[--e2.heap_max] = r3, e2.heap[--e2.heap_max] = n2, s3[2 * i2] = s3[2 * r3] + s3[2 * n2], e2.depth[i2] = (e2.depth[r3] >= e2.depth[n2] ? e2.depth[r3] : e2.depth[n2]) + 1, s3[2 * r3 + 1] = s3[2 * n2 + 1] = i2, e2.heap[1] = i2++, G(e2, s3, 1), 2 <= e2.heap_len; ) ;\n        e2.heap[--e2.heap_max] = e2.heap[1], function(e3, t3) {\n          var r4, n3, i3, s4, a3, o3, h3 = t3.dyn_tree, u3 = t3.max_code, l2 = t3.stat_desc.static_tree, f3 = t3.stat_desc.has_stree, c2 = t3.stat_desc.extra_bits, d2 = t3.stat_desc.extra_base, p2 = t3.stat_desc.max_length, m2 = 0;\n          for (s4 = 0; s4 <= g; s4++) e3.bl_count[s4] = 0;\n          for (h3[2 * e3.heap[e3.heap_max] + 1] = 0, r4 = e3.heap_max + 1; r4 < _; r4++) p2 < (s4 = h3[2 * h3[2 * (n3 = e3.heap[r4]) + 1] + 1] + 1) && (s4 = p2, m2++), h3[2 * n3 + 1] = s4, u3 < n3 || (e3.bl_count[s4]++, a3 = 0, d2 <= n3 && (a3 = c2[n3 - d2]), o3 = h3[2 * n3], e3.opt_len += o3 * (s4 + a3), f3 && (e3.static_len += o3 * (l2[2 * n3 + 1] + a3)));\n          if (0 !== m2) {\n            do {\n              for (s4 = p2 - 1; 0 === e3.bl_count[s4]; ) s4--;\n              e3.bl_count[s4]--, e3.bl_count[s4 + 1] += 2, e3.bl_count[p2]--, m2 -= 2;\n            } while (0 < m2);\n            for (s4 = p2; 0 !== s4; s4--) for (n3 = e3.bl_count[s4]; 0 !== n3; ) u3 < (i3 = e3.heap[--r4]) || (h3[2 * i3 + 1] !== s4 && (e3.opt_len += (s4 - h3[2 * i3 + 1]) * h3[2 * i3], h3[2 * i3 + 1] = s4), n3--);\n          }\n        }(e2, t2), Z(s3, u2, e2.bl_count);\n      }\n      function X(e2, t2, r3) {\n        var n2, i2, s3 = -1, a2 = t2[1], o2 = 0, h2 = 7, u2 = 4;\n        for (0 === a2 && (h2 = 138, u2 = 3), t2[2 * (r3 + 1) + 1] = 65535, n2 = 0; n2 <= r3; n2++) i2 = a2, a2 = t2[2 * (n2 + 1) + 1], ++o2 < h2 && i2 === a2 || (o2 < u2 ? e2.bl_tree[2 * i2] += o2 : 0 !== i2 ? (i2 !== s3 && e2.bl_tree[2 * i2]++, e2.bl_tree[2 * b]++) : o2 <= 10 ? e2.bl_tree[2 * v]++ : e2.bl_tree[2 * y]++, s3 = i2, u2 = (o2 = 0) === a2 ? (h2 = 138, 3) : i2 === a2 ? (h2 = 6, 3) : (h2 = 7, 4));\n      }\n      function V(e2, t2, r3) {\n        var n2, i2, s3 = -1, a2 = t2[1], o2 = 0, h2 = 7, u2 = 4;\n        for (0 === a2 && (h2 = 138, u2 = 3), n2 = 0; n2 <= r3; n2++) if (i2 = a2, a2 = t2[2 * (n2 + 1) + 1], !(++o2 < h2 && i2 === a2)) {\n          if (o2 < u2) for (; L(e2, i2, e2.bl_tree), 0 != --o2; ) ;\n          else 0 !== i2 ? (i2 !== s3 && (L(e2, i2, e2.bl_tree), o2--), L(e2, b, e2.bl_tree), P(e2, o2 - 3, 2)) : o2 <= 10 ? (L(e2, v, e2.bl_tree), P(e2, o2 - 3, 3)) : (L(e2, y, e2.bl_tree), P(e2, o2 - 11, 7));\n          s3 = i2, u2 = (o2 = 0) === a2 ? (h2 = 138, 3) : i2 === a2 ? (h2 = 6, 3) : (h2 = 7, 4);\n        }\n      }\n      n(T);\n      var q = false;\n      function J(e2, t2, r3, n2) {\n        P(e2, (s2 << 1) + (n2 ? 1 : 0), 3), function(e3, t3, r4, n3) {\n          M(e3), U(e3, r4), U(e3, ~r4), i.arraySet(e3.pending_buf, e3.window, t3, r4, e3.pending), e3.pending += r4;\n        }(e2, t2, r3);\n      }\n      r2._tr_init = function(e2) {\n        q || (function() {\n          var e3, t2, r3, n2, i2, s3 = new Array(g + 1);\n          for (n2 = r3 = 0; n2 < a - 1; n2++) for (I[n2] = r3, e3 = 0; e3 < 1 << w[n2]; e3++) A[r3++] = n2;\n          for (A[r3 - 1] = n2, n2 = i2 = 0; n2 < 16; n2++) for (T[n2] = i2, e3 = 0; e3 < 1 << k[n2]; e3++) E[i2++] = n2;\n          for (i2 >>= 7; n2 < f2; n2++) for (T[n2] = i2 << 7, e3 = 0; e3 < 1 << k[n2] - 7; e3++) E[256 + i2++] = n2;\n          for (t2 = 0; t2 <= g; t2++) s3[t2] = 0;\n          for (e3 = 0; e3 <= 143; ) z[2 * e3 + 1] = 8, e3++, s3[8]++;\n          for (; e3 <= 255; ) z[2 * e3 + 1] = 9, e3++, s3[9]++;\n          for (; e3 <= 279; ) z[2 * e3 + 1] = 7, e3++, s3[7]++;\n          for (; e3 <= 287; ) z[2 * e3 + 1] = 8, e3++, s3[8]++;\n          for (Z(z, l + 1, s3), e3 = 0; e3 < f2; e3++) C[2 * e3 + 1] = 5, C[2 * e3] = j(e3, 5);\n          O = new D(z, w, u + 1, l, g), B = new D(C, k, 0, f2, g), R2 = new D(new Array(0), x, 0, c, p);\n        }(), q = true), e2.l_desc = new F(e2.dyn_ltree, O), e2.d_desc = new F(e2.dyn_dtree, B), e2.bl_desc = new F(e2.bl_tree, R2), e2.bi_buf = 0, e2.bi_valid = 0, W(e2);\n      }, r2._tr_stored_block = J, r2._tr_flush_block = function(e2, t2, r3, n2) {\n        var i2, s3, a2 = 0;\n        0 < e2.level ? (2 === e2.strm.data_type && (e2.strm.data_type = function(e3) {\n          var t3, r4 = 4093624447;\n          for (t3 = 0; t3 <= 31; t3++, r4 >>>= 1) if (1 & r4 && 0 !== e3.dyn_ltree[2 * t3]) return o;\n          if (0 !== e3.dyn_ltree[18] || 0 !== e3.dyn_ltree[20] || 0 !== e3.dyn_ltree[26]) return h;\n          for (t3 = 32; t3 < u; t3++) if (0 !== e3.dyn_ltree[2 * t3]) return h;\n          return o;\n        }(e2)), Y(e2, e2.l_desc), Y(e2, e2.d_desc), a2 = function(e3) {\n          var t3;\n          for (X(e3, e3.dyn_ltree, e3.l_desc.max_code), X(e3, e3.dyn_dtree, e3.d_desc.max_code), Y(e3, e3.bl_desc), t3 = c - 1; 3 <= t3 && 0 === e3.bl_tree[2 * S[t3] + 1]; t3--) ;\n          return e3.opt_len += 3 * (t3 + 1) + 5 + 5 + 4, t3;\n        }(e2), i2 = e2.opt_len + 3 + 7 >>> 3, (s3 = e2.static_len + 3 + 7 >>> 3) <= i2 && (i2 = s3)) : i2 = s3 = r3 + 5, r3 + 4 <= i2 && -1 !== t2 ? J(e2, t2, r3, n2) : 4 === e2.strategy || s3 === i2 ? (P(e2, 2 + (n2 ? 1 : 0), 3), K2(e2, z, C)) : (P(e2, 4 + (n2 ? 1 : 0), 3), function(e3, t3, r4, n3) {\n          var i3;\n          for (P(e3, t3 - 257, 5), P(e3, r4 - 1, 5), P(e3, n3 - 4, 4), i3 = 0; i3 < n3; i3++) P(e3, e3.bl_tree[2 * S[i3] + 1], 3);\n          V(e3, e3.dyn_ltree, t3 - 1), V(e3, e3.dyn_dtree, r4 - 1);\n        }(e2, e2.l_desc.max_code + 1, e2.d_desc.max_code + 1, a2 + 1), K2(e2, e2.dyn_ltree, e2.dyn_dtree)), W(e2), n2 && M(e2);\n      }, r2._tr_tally = function(e2, t2, r3) {\n        return e2.pending_buf[e2.d_buf + 2 * e2.last_lit] = t2 >>> 8 & 255, e2.pending_buf[e2.d_buf + 2 * e2.last_lit + 1] = 255 & t2, e2.pending_buf[e2.l_buf + e2.last_lit] = 255 & r3, e2.last_lit++, 0 === t2 ? e2.dyn_ltree[2 * r3]++ : (e2.matches++, t2--, e2.dyn_ltree[2 * (A[r3] + u + 1)]++, e2.dyn_dtree[2 * N(t2)]++), e2.last_lit === e2.lit_bufsize - 1;\n      }, r2._tr_align = function(e2) {\n        P(e2, 2, 3), L(e2, m, z), function(e3) {\n          16 === e3.bi_valid ? (U(e3, e3.bi_buf), e3.bi_buf = 0, e3.bi_valid = 0) : 8 <= e3.bi_valid && (e3.pending_buf[e3.pending++] = 255 & e3.bi_buf, e3.bi_buf >>= 8, e3.bi_valid -= 8);\n        }(e2);\n      };\n    }, { \"../utils/common\": 41 }], 53: [function(e, t, r2) {\n      t.exports = function() {\n        this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = \"\", this.state = null, this.data_type = 2, this.adler = 0;\n      };\n    }, {}], 54: [function(e, t, r2) {\n      (function(e2) {\n        !function(r3, n) {\n          if (!r3.setImmediate) {\n            var i, s2, t2, a, o = 1, h = {}, u = false, l = r3.document, e3 = Object.getPrototypeOf && Object.getPrototypeOf(r3);\n            e3 = e3 && e3.setTimeout ? e3 : r3, i = \"[object process]\" === {}.toString.call(r3.process) ? function(e4) {\n              process$1.nextTick(function() {\n                c(e4);\n              });\n            } : function() {\n              if (r3.postMessage && !r3.importScripts) {\n                var e4 = true, t3 = r3.onmessage;\n                return r3.onmessage = function() {\n                  e4 = false;\n                }, r3.postMessage(\"\", \"*\"), r3.onmessage = t3, e4;\n              }\n            }() ? (a = \"setImmediate$\" + Math.random() + \"$\", r3.addEventListener ? r3.addEventListener(\"message\", d, false) : r3.attachEvent(\"onmessage\", d), function(e4) {\n              r3.postMessage(a + e4, \"*\");\n            }) : r3.MessageChannel ? ((t2 = new MessageChannel()).port1.onmessage = function(e4) {\n              c(e4.data);\n            }, function(e4) {\n              t2.port2.postMessage(e4);\n            }) : l && \"onreadystatechange\" in l.createElement(\"script\") ? (s2 = l.documentElement, function(e4) {\n              var t3 = l.createElement(\"script\");\n              t3.onreadystatechange = function() {\n                c(e4), t3.onreadystatechange = null, s2.removeChild(t3), t3 = null;\n              }, s2.appendChild(t3);\n            }) : function(e4) {\n              setTimeout(c, 0, e4);\n            }, e3.setImmediate = function(e4) {\n              \"function\" != typeof e4 && (e4 = new Function(\"\" + e4));\n              for (var t3 = new Array(arguments.length - 1), r4 = 0; r4 < t3.length; r4++) t3[r4] = arguments[r4 + 1];\n              var n2 = { callback: e4, args: t3 };\n              return h[o] = n2, i(o), o++;\n            }, e3.clearImmediate = f2;\n          }\n          function f2(e4) {\n            delete h[e4];\n          }\n          function c(e4) {\n            if (u) setTimeout(c, 0, e4);\n            else {\n              var t3 = h[e4];\n              if (t3) {\n                u = true;\n                try {\n                  !function(e5) {\n                    var t4 = e5.callback, r4 = e5.args;\n                    switch (r4.length) {\n                      case 0:\n                        t4();\n                        break;\n                      case 1:\n                        t4(r4[0]);\n                        break;\n                      case 2:\n                        t4(r4[0], r4[1]);\n                        break;\n                      case 3:\n                        t4(r4[0], r4[1], r4[2]);\n                        break;\n                      default:\n                        t4.apply(n, r4);\n                    }\n                  }(t3);\n                } finally {\n                  f2(e4), u = false;\n                }\n              }\n            }\n          }\n          function d(e4) {\n            e4.source === r3 && \"string\" == typeof e4.data && 0 === e4.data.indexOf(a) && c(+e4.data.slice(a.length));\n          }\n        }(\"undefined\" == typeof self ? void 0 === e2 ? this : e2 : self);\n      }).call(this, \"undefined\" != typeof commonjsGlobal ? commonjsGlobal : \"undefined\" != typeof self ? self : \"undefined\" != typeof window ? window : {});\n    }, {}] }, {}, [10])(10);\n  });\n})(jszip_min);\nvar jszip_minExports = jszip_min.exports;\nconst JSZip = /* @__PURE__ */ getDefaultExportFromCjs$1(jszip_minExports);\nvar xml$2 = { exports: {} };\nvar XML_CHARACTER_MAP = {\n  \"&\": \"&amp;\",\n  '\"': \"&quot;\",\n  \"'\": \"&apos;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\"\n};\nfunction escapeForXML$1(string) {\n  return string && string.replace ? string.replace(/([&\"<>'])/g, function(str, item) {\n    return XML_CHARACTER_MAP[item];\n  }) : string;\n}\nvar escapeForXML_1 = escapeForXML$1;\nvar escapeForXML = escapeForXML_1;\nvar Stream = streamBrowserify.Stream;\nvar DEFAULT_INDENT = \"    \";\nfunction xml(input, options2) {\n  if (typeof options2 !== \"object\") {\n    options2 = {\n      indent: options2\n    };\n  }\n  var stream = options2.stream ? new Stream() : null, output = \"\", interrupted = false, indent = !options2.indent ? \"\" : options2.indent === true ? DEFAULT_INDENT : options2.indent, instant = true;\n  function delay(func) {\n    if (!instant) {\n      func();\n    } else {\n      process$1.nextTick(func);\n    }\n  }\n  function append(interrupt, out) {\n    if (out !== void 0) {\n      output += out;\n    }\n    if (interrupt && !interrupted) {\n      stream = stream || new Stream();\n      interrupted = true;\n    }\n    if (interrupt && interrupted) {\n      var data = output;\n      delay(function() {\n        stream.emit(\"data\", data);\n      });\n      output = \"\";\n    }\n  }\n  function add(value, last) {\n    format(append, resolve(value, indent, indent ? 1 : 0), last);\n  }\n  function end() {\n    if (stream) {\n      var data = output;\n      delay(function() {\n        stream.emit(\"data\", data);\n        stream.emit(\"end\");\n        stream.readable = false;\n        stream.emit(\"close\");\n      });\n    }\n  }\n  function addXmlDeclaration(declaration) {\n    var encoding = declaration.encoding || \"UTF-8\", attr = { version: \"1.0\", encoding };\n    if (declaration.standalone) {\n      attr.standalone = declaration.standalone;\n    }\n    add({ \"?xml\": { _attr: attr } });\n    output = output.replace(\"/>\", \"?>\");\n  }\n  delay(function() {\n    instant = false;\n  });\n  if (options2.declaration) {\n    addXmlDeclaration(options2.declaration);\n  }\n  if (input && input.forEach) {\n    input.forEach(function(value, i) {\n      var last;\n      if (i + 1 === input.length)\n        last = end;\n      add(value, last);\n    });\n  } else {\n    add(input, end);\n  }\n  if (stream) {\n    stream.readable = true;\n    return stream;\n  }\n  return output;\n}\nfunction element() {\n  var input = Array.prototype.slice.call(arguments), self2 = {\n    _elem: resolve(input)\n  };\n  self2.push = function(input2) {\n    if (!this.append) {\n      throw new Error(\"not assigned to a parent!\");\n    }\n    var that = this;\n    var indent = this._elem.indent;\n    format(\n      this.append,\n      resolve(\n        input2,\n        indent,\n        this._elem.icount + (indent ? 1 : 0)\n      ),\n      function() {\n        that.append(true);\n      }\n    );\n  };\n  self2.close = function(input2) {\n    if (input2 !== void 0) {\n      this.push(input2);\n    }\n    if (this.end) {\n      this.end();\n    }\n  };\n  return self2;\n}\nfunction create_indent(character, count) {\n  return new Array(count || 0).join(character || \"\");\n}\nfunction resolve(data, indent, indent_count) {\n  indent_count = indent_count || 0;\n  var indent_spaces = create_indent(indent, indent_count);\n  var name;\n  var values = data;\n  var interrupt = false;\n  if (typeof data === \"object\") {\n    var keys = Object.keys(data);\n    name = keys[0];\n    values = data[name];\n    if (values && values._elem) {\n      values._elem.name = name;\n      values._elem.icount = indent_count;\n      values._elem.indent = indent;\n      values._elem.indents = indent_spaces;\n      values._elem.interrupt = values;\n      return values._elem;\n    }\n  }\n  var attributes = [], content = [];\n  var isStringContent;\n  function get_attributes(obj) {\n    var keys2 = Object.keys(obj);\n    keys2.forEach(function(key) {\n      attributes.push(attribute(key, obj[key]));\n    });\n  }\n  switch (typeof values) {\n    case \"object\":\n      if (values === null) break;\n      if (values._attr) {\n        get_attributes(values._attr);\n      }\n      if (values._cdata) {\n        content.push(\n          (\"<![CDATA[\" + values._cdata).replace(/\\]\\]>/g, \"]]]]><![CDATA[>\") + \"]]>\"\n        );\n      }\n      if (values.forEach) {\n        isStringContent = false;\n        content.push(\"\");\n        values.forEach(function(value) {\n          if (typeof value == \"object\") {\n            var _name = Object.keys(value)[0];\n            if (_name == \"_attr\") {\n              get_attributes(value._attr);\n            } else {\n              content.push(resolve(\n                value,\n                indent,\n                indent_count + 1\n              ));\n            }\n          } else {\n            content.pop();\n            isStringContent = true;\n            content.push(escapeForXML(value));\n          }\n        });\n        if (!isStringContent) {\n          content.push(\"\");\n        }\n      }\n      break;\n    default:\n      content.push(escapeForXML(values));\n  }\n  return {\n    name,\n    interrupt,\n    attributes,\n    content,\n    icount: indent_count,\n    indents: indent_spaces,\n    indent\n  };\n}\nfunction format(append, elem, end) {\n  if (typeof elem != \"object\") {\n    return append(false, elem);\n  }\n  var len = elem.interrupt ? 1 : elem.content.length;\n  function proceed() {\n    while (elem.content.length) {\n      var value = elem.content.shift();\n      if (value === void 0) continue;\n      if (interrupt(value)) return;\n      format(append, value);\n    }\n    append(false, (len > 1 ? elem.indents : \"\") + (elem.name ? \"</\" + elem.name + \">\" : \"\") + (elem.indent && !end ? \"\\n\" : \"\"));\n    if (end) {\n      end();\n    }\n  }\n  function interrupt(value) {\n    if (value.interrupt) {\n      value.interrupt.append = append;\n      value.interrupt.end = proceed;\n      value.interrupt = false;\n      append(true);\n      return true;\n    }\n    return false;\n  }\n  append(false, elem.indents + (elem.name ? \"<\" + elem.name : \"\") + (elem.attributes.length ? \" \" + elem.attributes.join(\" \") : \"\") + (len ? elem.name ? \">\" : \"\" : elem.name ? \"/>\" : \"\") + (elem.indent && len > 1 ? \"\\n\" : \"\"));\n  if (!len) {\n    return append(false, elem.indent ? \"\\n\" : \"\");\n  }\n  if (!interrupt(elem)) {\n    proceed();\n  }\n}\nfunction attribute(key, value) {\n  return key + '=\"' + escapeForXML(value) + '\"';\n}\nxml$2.exports = xml;\nxml$2.exports.element = xml$2.exports.Element = element;\nvar xmlExports = xml$2.exports;\nconst xml$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(xmlExports);\nconst obfuscatedStartOffset = 0;\nconst obfuscatedEndOffset = 32;\nconst guidSize = 32;\nconst obfuscate = (buf, fontKey) => {\n  const guid = fontKey.replace(/-/g, \"\");\n  if (guid.length !== guidSize) {\n    throw new Error(`Error: Cannot extract GUID from font filename: ${fontKey}`);\n  }\n  const hexStrings = guid.replace(/(..)/g, \"$1 \").trim().split(\" \");\n  const hexNumbers = hexStrings.map((hexString) => parseInt(hexString, 16));\n  hexNumbers.reverse();\n  const bytesToObfuscate = buf.slice(obfuscatedStartOffset, obfuscatedEndOffset);\n  const obfuscatedBytes = bytesToObfuscate.map((byte, i) => byte ^ hexNumbers[i % hexNumbers.length]);\n  const out = Buffer.concat([buf.slice(0, obfuscatedStartOffset), obfuscatedBytes, buf.slice(obfuscatedEndOffset)]);\n  return out;\n};\nclass Formatter {\n  format(input, context = { stack: [] }) {\n    const output = input.prepForXml(context);\n    if (output) {\n      return output;\n    } else {\n      throw Error(\"XMLComponent did not format correctly\");\n    }\n  }\n}\nclass ImageReplacer {\n  replace(xmlData, mediaData, offset) {\n    let currentXmlData = xmlData;\n    mediaData.forEach((image, i) => {\n      currentXmlData = currentXmlData.replace(new RegExp(`{${image.fileName}}`, \"g\"), (offset + i).toString());\n    });\n    return currentXmlData;\n  }\n  getMediaData(xmlData, media) {\n    return media.Array.filter((image) => xmlData.search(`{${image.fileName}}`) > 0);\n  }\n}\nclass NumberingReplacer {\n  replace(xmlData, concreteNumberings) {\n    let currentXmlData = xmlData;\n    for (const concreteNumbering of concreteNumberings) {\n      currentXmlData = currentXmlData.replace(\n        new RegExp(`{${concreteNumbering.reference}-${concreteNumbering.instance}}`, \"g\"),\n        concreteNumbering.numId.toString()\n      );\n    }\n    return currentXmlData;\n  }\n}\nclass Compiler {\n  constructor() {\n    __publicField(this, \"formatter\");\n    __publicField(this, \"imageReplacer\");\n    __publicField(this, \"numberingReplacer\");\n    this.formatter = new Formatter();\n    this.imageReplacer = new ImageReplacer();\n    this.numberingReplacer = new NumberingReplacer();\n  }\n  compile(file, prettifyXml) {\n    const zip = new JSZip();\n    const xmlifiedFileMapping = this.xmlifyFile(file, prettifyXml);\n    const map = new Map(Object.entries(xmlifiedFileMapping));\n    for (const [, obj] of map) {\n      if (Array.isArray(obj)) {\n        for (const subFile of obj) {\n          zip.file(subFile.path, subFile.data);\n        }\n      } else {\n        zip.file(obj.path, obj.data);\n      }\n    }\n    for (const data of file.Media.Array) {\n      if (data.type !== \"svg\") {\n        zip.file(`word/media/${data.fileName}`, data.data);\n      } else {\n        zip.file(`word/media/${data.fileName}`, data.data);\n        zip.file(`word/media/${data.fallback.fileName}`, data.fallback.data);\n      }\n    }\n    for (const { data: buffer2, name, fontKey } of file.FontTable.fontOptionsWithKey) {\n      const [nameWithoutExtension] = name.split(\".\");\n      zip.file(`word/fonts/${nameWithoutExtension}.odttf`, obfuscate(buffer2, fontKey));\n    }\n    return zip;\n  }\n  xmlifyFile(file, prettify) {\n    const documentRelationshipCount = file.Document.Relationships.RelationshipCount + 1;\n    const documentXmlData = xml$1(\n      this.formatter.format(file.Document.View, {\n        viewWrapper: file.Document,\n        file,\n        stack: []\n      }),\n      {\n        indent: prettify,\n        declaration: {\n          standalone: \"yes\",\n          encoding: \"UTF-8\"\n        }\n      }\n    );\n    const documentMediaDatas = this.imageReplacer.getMediaData(documentXmlData, file.Media);\n    return {\n      Relationships: {\n        data: (() => {\n          documentMediaDatas.forEach((mediaData, i) => {\n            file.Document.Relationships.createRelationship(\n              documentRelationshipCount + i,\n              \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\n              `media/${mediaData.fileName}`\n            );\n          });\n          file.Document.Relationships.createRelationship(\n            file.Document.Relationships.RelationshipCount + 1,\n            \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\n            \"fontTable.xml\"\n          );\n          return xml$1(\n            this.formatter.format(file.Document.Relationships, {\n              viewWrapper: file.Document,\n              file,\n              stack: []\n            }),\n            {\n              indent: prettify,\n              declaration: {\n                encoding: \"UTF-8\"\n              }\n            }\n          );\n        })(),\n        path: \"word/_rels/document.xml.rels\"\n      },\n      Document: {\n        data: (() => {\n          const xmlData = this.imageReplacer.replace(documentXmlData, documentMediaDatas, documentRelationshipCount);\n          const referenedXmlData = this.numberingReplacer.replace(xmlData, file.Numbering.ConcreteNumbering);\n          return referenedXmlData;\n        })(),\n        path: \"word/document.xml\"\n      },\n      Styles: {\n        data: (() => {\n          const xmlStyles = xml$1(\n            this.formatter.format(file.Styles, {\n              viewWrapper: file.Document,\n              file,\n              stack: []\n            }),\n            {\n              indent: prettify,\n              declaration: {\n                standalone: \"yes\",\n                encoding: \"UTF-8\"\n              }\n            }\n          );\n          const referencedXmlStyles = this.numberingReplacer.replace(xmlStyles, file.Numbering.ConcreteNumbering);\n          return referencedXmlStyles;\n        })(),\n        path: \"word/styles.xml\"\n      },\n      Properties: {\n        data: xml$1(\n          this.formatter.format(file.CoreProperties, {\n            viewWrapper: file.Document,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              standalone: \"yes\",\n              encoding: \"UTF-8\"\n            }\n          }\n        ),\n        path: \"docProps/core.xml\"\n      },\n      Numbering: {\n        data: xml$1(\n          this.formatter.format(file.Numbering, {\n            viewWrapper: file.Document,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              standalone: \"yes\",\n              encoding: \"UTF-8\"\n            }\n          }\n        ),\n        path: \"word/numbering.xml\"\n      },\n      FileRelationships: {\n        data: xml$1(\n          this.formatter.format(file.FileRelationships, {\n            viewWrapper: file.Document,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              encoding: \"UTF-8\"\n            }\n          }\n        ),\n        path: \"_rels/.rels\"\n      },\n      HeaderRelationships: file.Headers.map((headerWrapper, index) => {\n        const xmlData = xml$1(\n          this.formatter.format(headerWrapper.View, {\n            viewWrapper: headerWrapper,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              encoding: \"UTF-8\"\n            }\n          }\n        );\n        const mediaDatas = this.imageReplacer.getMediaData(xmlData, file.Media);\n        mediaDatas.forEach((mediaData, i) => {\n          headerWrapper.Relationships.createRelationship(\n            i,\n            \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\n            `media/${mediaData.fileName}`\n          );\n        });\n        return {\n          data: xml$1(\n            this.formatter.format(headerWrapper.Relationships, {\n              viewWrapper: headerWrapper,\n              file,\n              stack: []\n            }),\n            {\n              indent: prettify,\n              declaration: {\n                encoding: \"UTF-8\"\n              }\n            }\n          ),\n          path: `word/_rels/header${index + 1}.xml.rels`\n        };\n      }),\n      FooterRelationships: file.Footers.map((footerWrapper, index) => {\n        const xmlData = xml$1(\n          this.formatter.format(footerWrapper.View, {\n            viewWrapper: footerWrapper,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              encoding: \"UTF-8\"\n            }\n          }\n        );\n        const mediaDatas = this.imageReplacer.getMediaData(xmlData, file.Media);\n        mediaDatas.forEach((mediaData, i) => {\n          footerWrapper.Relationships.createRelationship(\n            i,\n            \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\n            `media/${mediaData.fileName}`\n          );\n        });\n        return {\n          data: xml$1(\n            this.formatter.format(footerWrapper.Relationships, {\n              viewWrapper: footerWrapper,\n              file,\n              stack: []\n            }),\n            {\n              indent: prettify,\n              declaration: {\n                encoding: \"UTF-8\"\n              }\n            }\n          ),\n          path: `word/_rels/footer${index + 1}.xml.rels`\n        };\n      }),\n      Headers: file.Headers.map((headerWrapper, index) => {\n        const tempXmlData = xml$1(\n          this.formatter.format(headerWrapper.View, {\n            viewWrapper: headerWrapper,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              encoding: \"UTF-8\"\n            }\n          }\n        );\n        const mediaDatas = this.imageReplacer.getMediaData(tempXmlData, file.Media);\n        const xmlData = this.imageReplacer.replace(tempXmlData, mediaDatas, 0);\n        const referenedXmlData = this.numberingReplacer.replace(xmlData, file.Numbering.ConcreteNumbering);\n        return {\n          data: referenedXmlData,\n          path: `word/header${index + 1}.xml`\n        };\n      }),\n      Footers: file.Footers.map((footerWrapper, index) => {\n        const tempXmlData = xml$1(\n          this.formatter.format(footerWrapper.View, {\n            viewWrapper: footerWrapper,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              encoding: \"UTF-8\"\n            }\n          }\n        );\n        const mediaDatas = this.imageReplacer.getMediaData(tempXmlData, file.Media);\n        const xmlData = this.imageReplacer.replace(tempXmlData, mediaDatas, 0);\n        const referenedXmlData = this.numberingReplacer.replace(xmlData, file.Numbering.ConcreteNumbering);\n        return {\n          data: referenedXmlData,\n          path: `word/footer${index + 1}.xml`\n        };\n      }),\n      ContentTypes: {\n        data: xml$1(\n          this.formatter.format(file.ContentTypes, {\n            viewWrapper: file.Document,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              encoding: \"UTF-8\"\n            }\n          }\n        ),\n        path: \"[Content_Types].xml\"\n      },\n      CustomProperties: {\n        data: xml$1(\n          this.formatter.format(file.CustomProperties, {\n            viewWrapper: file.Document,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              standalone: \"yes\",\n              encoding: \"UTF-8\"\n            }\n          }\n        ),\n        path: \"docProps/custom.xml\"\n      },\n      AppProperties: {\n        data: xml$1(\n          this.formatter.format(file.AppProperties, {\n            viewWrapper: file.Document,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              standalone: \"yes\",\n              encoding: \"UTF-8\"\n            }\n          }\n        ),\n        path: \"docProps/app.xml\"\n      },\n      FootNotes: {\n        data: xml$1(\n          this.formatter.format(file.FootNotes.View, {\n            viewWrapper: file.FootNotes,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              encoding: \"UTF-8\"\n            }\n          }\n        ),\n        path: \"word/footnotes.xml\"\n      },\n      FootNotesRelationships: {\n        data: xml$1(\n          this.formatter.format(file.FootNotes.Relationships, {\n            viewWrapper: file.FootNotes,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              encoding: \"UTF-8\"\n            }\n          }\n        ),\n        path: \"word/_rels/footnotes.xml.rels\"\n      },\n      Settings: {\n        data: xml$1(\n          this.formatter.format(file.Settings, {\n            viewWrapper: file.Document,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              standalone: \"yes\",\n              encoding: \"UTF-8\"\n            }\n          }\n        ),\n        path: \"word/settings.xml\"\n      },\n      Comments: {\n        data: xml$1(\n          this.formatter.format(file.Comments, {\n            viewWrapper: file.Document,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              standalone: \"yes\",\n              encoding: \"UTF-8\"\n            }\n          }\n        ),\n        path: \"word/comments.xml\"\n      },\n      FontTable: {\n        data: xml$1(\n          this.formatter.format(file.FontTable.View, {\n            viewWrapper: file.Document,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              standalone: \"yes\",\n              encoding: \"UTF-8\"\n            }\n          }\n        ),\n        path: \"word/fontTable.xml\"\n      },\n      FontTableRelationships: {\n        data: (() => xml$1(\n          this.formatter.format(file.FontTable.Relationships, {\n            viewWrapper: file.Document,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              encoding: \"UTF-8\"\n            }\n          }\n        ))(),\n        path: \"word/_rels/fontTable.xml.rels\"\n      }\n    };\n  }\n}\nconst PrettifyType = {\n  NONE: \"\",\n  WITH_2_BLANKS: \"  \",\n  WITH_4_BLANKS: \"    \",\n  WITH_TAB: \"\t\"\n};\nconst convertPrettifyType = (prettify) => prettify === true ? PrettifyType.WITH_2_BLANKS : prettify === false ? void 0 : prettify;\nclass Packer {\n  static toString(file, prettify) {\n    return __async(this, null, function* () {\n      const zip = this.compiler.compile(file, convertPrettifyType(prettify));\n      const zipData = yield zip.generateAsync({\n        type: \"string\",\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n        compression: \"DEFLATE\"\n      });\n      return zipData;\n    });\n  }\n  static toBuffer(file, prettify) {\n    return __async(this, null, function* () {\n      const zip = this.compiler.compile(file, convertPrettifyType(prettify));\n      const zipData = yield zip.generateAsync({\n        type: \"nodebuffer\",\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n        compression: \"DEFLATE\"\n      });\n      return zipData;\n    });\n  }\n  static toBase64String(file, prettify) {\n    return __async(this, null, function* () {\n      const zip = this.compiler.compile(file, convertPrettifyType(prettify));\n      const zipData = yield zip.generateAsync({\n        type: \"base64\",\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n        compression: \"DEFLATE\"\n      });\n      return zipData;\n    });\n  }\n  static toBlob(file, prettify) {\n    return __async(this, null, function* () {\n      const zip = this.compiler.compile(file, convertPrettifyType(prettify));\n      const zipData = yield zip.generateAsync({\n        type: \"blob\",\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n        compression: \"DEFLATE\"\n      });\n      return zipData;\n    });\n  }\n  static toStream(file, prettify) {\n    const stream = new streamBrowserify.Stream();\n    const zip = this.compiler.compile(file, convertPrettifyType(prettify));\n    zip.generateAsync({\n      type: \"nodebuffer\",\n      mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n      compression: \"DEFLATE\"\n    }).then((z) => {\n      stream.emit(\"data\", z);\n      stream.emit(\"end\");\n    });\n    return stream;\n  }\n}\n__publicField(Packer, \"compiler\", new Compiler());\nconst formatter$1 = new Formatter();\nconst toJson = (xmlData) => {\n  const xmlObj = lib.xml2js(xmlData, { compact: false, captureSpacesBetweenElements: true });\n  return xmlObj;\n};\nconst createTextElementContents = (text) => {\n  var _a;\n  const textJson = toJson(xml$1(formatter$1.format(new Text({ text }))));\n  return (_a = textJson.elements[0].elements) != null ? _a : [];\n};\nconst patchSpaceAttribute = (element2) => __spreadProps(__spreadValues({}, element2), {\n  attributes: {\n    \"xml:space\": \"preserve\"\n  }\n});\nconst getFirstLevelElements = (relationships, id) => {\n  var _a, _b;\n  return (_b = (_a = relationships.elements) == null ? void 0 : _a.filter((e) => e.name === id)[0].elements) != null ? _b : [];\n};\nconst appendContentType = (element2, contentType, extension) => {\n  const relationshipElements = getFirstLevelElements(element2, \"Types\");\n  const exist = relationshipElements.some(\n    (el) => {\n      var _a, _b;\n      return el.type === \"element\" && el.name === \"Default\" && ((_a = el == null ? void 0 : el.attributes) == null ? void 0 : _a.ContentType) === contentType && ((_b = el == null ? void 0 : el.attributes) == null ? void 0 : _b.Extension) === extension;\n    }\n  );\n  if (exist) {\n    return;\n  }\n  relationshipElements.push({\n    attributes: {\n      ContentType: contentType,\n      Extension: extension\n    },\n    name: \"Default\",\n    type: \"element\"\n  });\n};\nconst getIdFromRelationshipId = (relationshipId) => {\n  const output = parseInt(relationshipId.substring(3), 10);\n  return isNaN(output) ? 0 : output;\n};\nconst getNextRelationshipIndex = (relationships) => {\n  const relationshipElements = getFirstLevelElements(relationships, \"Relationships\");\n  return relationshipElements.map((e) => {\n    var _a, _b, _c;\n    return getIdFromRelationshipId((_c = (_b = (_a = e.attributes) == null ? void 0 : _a.Id) == null ? void 0 : _b.toString()) != null ? _c : \"\");\n  }).reduce((acc, curr) => Math.max(acc, curr), 0) + 1;\n};\nconst appendRelationship = (relationships, id, type2, target, targetMode) => {\n  const relationshipElements = getFirstLevelElements(relationships, \"Relationships\");\n  relationshipElements.push({\n    attributes: {\n      Id: `rId${id}`,\n      Type: type2,\n      Target: target,\n      TargetMode: targetMode\n    },\n    name: \"Relationship\",\n    type: \"element\"\n  });\n  return relationshipElements;\n};\nconst findRunElementIndexWithToken = (paragraphElement, token) => {\n  var _a, _b, _c, _d;\n  for (let i = 0; i < ((_a = paragraphElement.elements) != null ? _a : []).length; i++) {\n    const element2 = paragraphElement.elements[i];\n    if (element2.type === \"element\" && element2.name === \"w:r\") {\n      const textElement = ((_b = element2.elements) != null ? _b : []).filter((e) => e.type === \"element\" && e.name === \"w:t\");\n      for (const text of textElement) {\n        if (!((_c = text.elements) == null ? void 0 : _c[0])) {\n          continue;\n        }\n        if ((_d = text.elements[0].text) == null ? void 0 : _d.includes(token)) {\n          return i;\n        }\n      }\n    }\n  }\n  throw new Error(\"Token not found\");\n};\nconst splitRunElement = (runElement, token) => {\n  var _a, _b;\n  let splitIndex = 0;\n  const splitElements = (_b = (_a = runElement.elements) == null ? void 0 : _a.map((e, i) => {\n    var _a2, _b2, _c;\n    if (e.type === \"element\" && e.name === \"w:t\") {\n      const text = (_c = (_b2 = (_a2 = e.elements) == null ? void 0 : _a2[0]) == null ? void 0 : _b2.text) != null ? _c : \"\";\n      const splitText = text.split(token);\n      const newElements = splitText.map((t) => __spreadProps(__spreadValues(__spreadValues({}, e), patchSpaceAttribute(e)), {\n        elements: createTextElementContents(t)\n      }));\n      splitIndex = i;\n      return newElements;\n    } else {\n      return e;\n    }\n  }).flat()) != null ? _b : [];\n  const leftRunElement = __spreadProps(__spreadValues({}, JSON.parse(JSON.stringify(runElement))), {\n    elements: splitElements.slice(0, splitIndex + 1)\n  });\n  const rightRunElement = __spreadProps(__spreadValues({}, JSON.parse(JSON.stringify(runElement))), {\n    elements: splitElements.slice(splitIndex + 1)\n  });\n  return { left: leftRunElement, right: rightRunElement };\n};\nconst ReplaceMode = {\n  START: 0,\n  MIDDLE: 1,\n  END: 2\n};\nconst replaceTokenInParagraphElement = ({\n  paragraphElement,\n  renderedParagraph,\n  originalText,\n  replacementText\n}) => {\n  const startIndex = renderedParagraph.text.indexOf(originalText);\n  const endIndex = startIndex + originalText.length - 1;\n  let replaceMode = ReplaceMode.START;\n  for (const run of renderedParagraph.runs) {\n    for (const { text, index, start, end } of run.parts) {\n      switch (replaceMode) {\n        case ReplaceMode.START:\n          if (startIndex >= start) {\n            const offsetStartIndex = startIndex - start;\n            const offsetEndIndex = Math.min(endIndex, end) - start;\n            const partToReplace = run.text.substring(offsetStartIndex, offsetEndIndex + 1);\n            if (partToReplace === \"\") {\n              continue;\n            }\n            const firstPart = text.replace(partToReplace, replacementText);\n            patchTextElement(paragraphElement.elements[run.index].elements[index], firstPart);\n            replaceMode = ReplaceMode.MIDDLE;\n            continue;\n          }\n          break;\n        case ReplaceMode.MIDDLE:\n          if (endIndex <= end) {\n            const lastPart = text.substring(endIndex - start + 1);\n            patchTextElement(paragraphElement.elements[run.index].elements[index], lastPart);\n            const currentElement2 = paragraphElement.elements[run.index].elements[index];\n            paragraphElement.elements[run.index].elements[index] = patchSpaceAttribute(currentElement2);\n            replaceMode = ReplaceMode.END;\n          } else {\n            patchTextElement(paragraphElement.elements[run.index].elements[index], \"\");\n          }\n          break;\n      }\n    }\n  }\n  return paragraphElement;\n};\nconst patchTextElement = (element2, text) => {\n  element2.elements = createTextElementContents(text);\n  return element2;\n};\nconst renderParagraphNode = (node) => {\n  if (node.element.name !== \"w:p\") {\n    throw new Error(`Invalid node type: ${node.element.name}`);\n  }\n  if (!node.element.elements) {\n    return {\n      text: \"\",\n      runs: [],\n      index: -1,\n      pathToParagraph: []\n    };\n  }\n  let currentRunStringLength = 0;\n  const runs = node.element.elements.map((element2, i) => ({ element: element2, i })).filter(({ element: element2 }) => element2.name === \"w:r\").map(({ element: element2, i }) => {\n    const renderedRunNode = renderRunNode(element2, i, currentRunStringLength);\n    currentRunStringLength += renderedRunNode.text.length;\n    return renderedRunNode;\n  }).filter((e) => !!e);\n  const text = runs.reduce((acc, curr) => acc + curr.text, \"\");\n  return {\n    text,\n    runs,\n    index: node.index,\n    pathToParagraph: buildNodePath(node)\n  };\n};\nconst renderRunNode = (node, index, currentRunStringIndex) => {\n  if (!node.elements) {\n    return {\n      text: \"\",\n      parts: [],\n      index: -1,\n      start: currentRunStringIndex,\n      end: currentRunStringIndex\n    };\n  }\n  let currentTextStringIndex = currentRunStringIndex;\n  const parts = node.elements.map(\n    (element2, i) => {\n      var _a, _b;\n      return element2.name === \"w:t\" && element2.elements && element2.elements.length > 0 ? {\n        text: (_b = (_a = element2.elements[0].text) == null ? void 0 : _a.toString()) != null ? _b : \"\",\n        index: i,\n        start: currentTextStringIndex,\n        end: (() => {\n          var _a2, _b2;\n          currentTextStringIndex += ((_b2 = (_a2 = element2.elements[0].text) == null ? void 0 : _a2.toString()) != null ? _b2 : \"\").length - 1;\n          return currentTextStringIndex;\n        })()\n      } : void 0;\n    }\n  ).filter((e) => !!e).map((e) => e);\n  const text = parts.reduce((acc, curr) => acc + curr.text, \"\");\n  return {\n    text,\n    parts,\n    index,\n    start: currentRunStringIndex,\n    end: currentTextStringIndex\n  };\n};\nconst buildNodePath = (node) => node.parent ? [...buildNodePath(node.parent), node.index] : [node.index];\nconst elementsToWrapper = (wrapper) => {\n  var _a, _b;\n  return (_b = (_a = wrapper.element.elements) == null ? void 0 : _a.map((e, i) => ({\n    element: e,\n    index: i,\n    parent: wrapper\n  }))) != null ? _b : [];\n};\nconst traverse = (node) => {\n  let renderedParagraphs = [];\n  const queue2 = [\n    ...elementsToWrapper({\n      element: node,\n      index: 0,\n      parent: void 0\n    })\n  ];\n  let currentNode;\n  while (queue2.length > 0) {\n    currentNode = queue2.shift();\n    if (currentNode.element.name === \"w:p\") {\n      renderedParagraphs = [...renderedParagraphs, renderParagraphNode(currentNode)];\n    } else {\n      queue2.push(...elementsToWrapper(currentNode));\n    }\n  }\n  return renderedParagraphs;\n};\nconst findLocationOfText = (node, text) => traverse(node).filter((p) => p.text.includes(text));\nconst formatter = new Formatter();\nconst SPLIT_TOKEN = \"ɵ\";\nconst replacer = ({\n  json,\n  patch,\n  patchText,\n  context,\n  keepOriginalStyles = true\n}) => {\n  const renderedParagraphs = findLocationOfText(json, patchText);\n  if (renderedParagraphs.length === 0) {\n    return { element: json, didFindOccurrence: false };\n  }\n  for (const renderedParagraph of renderedParagraphs) {\n    const textJson = patch.children.map((c) => toJson(xml$1(formatter.format(c, context)))).map((c) => c.elements[0]);\n    switch (patch.type) {\n      case PatchType.DOCUMENT: {\n        const parentElement = goToParentElementFromPath(json, renderedParagraph.pathToParagraph);\n        const elementIndex = getLastElementIndexFromPath(renderedParagraph.pathToParagraph);\n        parentElement.elements.splice(elementIndex, 1, ...textJson);\n        break;\n      }\n      case PatchType.PARAGRAPH:\n      default: {\n        const paragraphElement = goToElementFromPath(json, renderedParagraph.pathToParagraph);\n        replaceTokenInParagraphElement({\n          paragraphElement,\n          renderedParagraph,\n          originalText: patchText,\n          replacementText: SPLIT_TOKEN\n        });\n        const index = findRunElementIndexWithToken(paragraphElement, SPLIT_TOKEN);\n        const runElementToBeReplaced = paragraphElement.elements[index];\n        const { left, right } = splitRunElement(runElementToBeReplaced, SPLIT_TOKEN);\n        let newRunElements = textJson;\n        let patchedRightElement = right;\n        if (keepOriginalStyles) {\n          const runElementNonTextualElements = runElementToBeReplaced.elements.filter(\n            (e) => e.type === \"element\" && e.name === \"w:rPr\"\n          );\n          newRunElements = textJson.map((e) => __spreadProps(__spreadValues({}, e), {\n            elements: [...runElementNonTextualElements, ...e.elements]\n          }));\n          patchedRightElement = __spreadProps(__spreadValues({}, right), {\n            elements: [...runElementNonTextualElements, ...right.elements]\n          });\n        }\n        paragraphElement.elements.splice(index, 1, left, ...newRunElements, patchedRightElement);\n        break;\n      }\n    }\n  }\n  return { element: json, didFindOccurrence: true };\n};\nconst goToElementFromPath = (json, path) => {\n  let element2 = json;\n  for (let i = 1; i < path.length; i++) {\n    const index = path[i];\n    const nextElements = element2.elements;\n    element2 = nextElements[index];\n  }\n  return element2;\n};\nconst goToParentElementFromPath = (json, path) => goToElementFromPath(json, path.slice(0, path.length - 1));\nconst getLastElementIndexFromPath = (path) => path[path.length - 1];\nconst PatchType = {\n  DOCUMENT: \"file\",\n  PARAGRAPH: \"paragraph\"\n};\nconst imageReplacer = new ImageReplacer();\nconst patchDocument = (_0) => __async(void 0, [_0], function* ({\n  outputType,\n  data,\n  patches,\n  keepOriginalStyles\n}) {\n  var _a, _b;\n  const zipContent = yield JSZip.loadAsync(data);\n  const contexts = /* @__PURE__ */ new Map();\n  const file = {\n    Media: new Media()\n  };\n  const map = /* @__PURE__ */ new Map();\n  const imageRelationshipAdditions = [];\n  const hyperlinkRelationshipAdditions = [];\n  let hasMedia = false;\n  const binaryContentMap = /* @__PURE__ */ new Map();\n  for (const [key, value] of Object.entries(zipContent.files)) {\n    if (!key.endsWith(\".xml\") && !key.endsWith(\".rels\")) {\n      binaryContentMap.set(key, yield value.async(\"uint8array\"));\n      continue;\n    }\n    const json = toJson(yield value.async(\"text\"));\n    if (key.startsWith(\"word/\") && !key.endsWith(\".xml.rels\")) {\n      const context = {\n        file,\n        viewWrapper: {\n          Relationships: {\n            createRelationship: (linkId, _, target, __) => {\n              hyperlinkRelationshipAdditions.push({\n                key,\n                hyperlink: {\n                  id: linkId,\n                  link: target\n                }\n              });\n            }\n          }\n        },\n        stack: []\n      };\n      contexts.set(key, context);\n      for (const [patchKey, patchValue] of Object.entries(patches)) {\n        const patchText = `{{${patchKey}}}`;\n        while (true) {\n          const { didFindOccurrence } = replacer({\n            json,\n            patch: __spreadProps(__spreadValues({}, patchValue), {\n              children: patchValue.children.map((element2) => {\n                if (element2 instanceof ExternalHyperlink) {\n                  const concreteHyperlink = new ConcreteHyperlink(element2.options.children, uniqueId());\n                  hyperlinkRelationshipAdditions.push({\n                    key,\n                    hyperlink: {\n                      id: concreteHyperlink.linkId,\n                      link: element2.options.link\n                    }\n                  });\n                  return concreteHyperlink;\n                } else {\n                  return element2;\n                }\n              })\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            }),\n            patchText,\n            context,\n            keepOriginalStyles\n          });\n          if (!didFindOccurrence) {\n            break;\n          }\n        }\n      }\n      const mediaDatas = imageReplacer.getMediaData(JSON.stringify(json), context.file.Media);\n      if (mediaDatas.length > 0) {\n        hasMedia = true;\n        imageRelationshipAdditions.push({\n          key,\n          mediaDatas\n        });\n      }\n    }\n    map.set(key, json);\n  }\n  for (const { key, mediaDatas } of imageRelationshipAdditions) {\n    const relationshipKey = `word/_rels/${key.split(\"/\").pop()}.rels`;\n    const relationshipsJson = (_a = map.get(relationshipKey)) != null ? _a : createRelationshipFile();\n    map.set(relationshipKey, relationshipsJson);\n    const index = getNextRelationshipIndex(relationshipsJson);\n    const newJson = imageReplacer.replace(JSON.stringify(map.get(key)), mediaDatas, index);\n    map.set(key, JSON.parse(newJson));\n    for (let i = 0; i < mediaDatas.length; i++) {\n      const { fileName } = mediaDatas[i];\n      appendRelationship(\n        relationshipsJson,\n        index + i,\n        \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\n        `media/${fileName}`\n      );\n    }\n  }\n  for (const { key, hyperlink } of hyperlinkRelationshipAdditions) {\n    const relationshipKey = `word/_rels/${key.split(\"/\").pop()}.rels`;\n    const relationshipsJson = (_b = map.get(relationshipKey)) != null ? _b : createRelationshipFile();\n    map.set(relationshipKey, relationshipsJson);\n    appendRelationship(\n      relationshipsJson,\n      hyperlink.id,\n      \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\",\n      hyperlink.link,\n      TargetModeType.EXTERNAL\n    );\n  }\n  if (hasMedia) {\n    const contentTypesJson = map.get(\"[Content_Types].xml\");\n    if (!contentTypesJson) {\n      throw new Error(\"Could not find content types file\");\n    }\n    appendContentType(contentTypesJson, \"image/png\", \"png\");\n    appendContentType(contentTypesJson, \"image/jpeg\", \"jpeg\");\n    appendContentType(contentTypesJson, \"image/jpeg\", \"jpg\");\n    appendContentType(contentTypesJson, \"image/bmp\", \"bmp\");\n    appendContentType(contentTypesJson, \"image/gif\", \"gif\");\n    appendContentType(contentTypesJson, \"image/svg+xml\", \"svg\");\n  }\n  const zip = new JSZip();\n  for (const [key, value] of map) {\n    const output = toXml(value);\n    zip.file(key, output);\n  }\n  for (const [key, value] of binaryContentMap) {\n    zip.file(key, value);\n  }\n  for (const { data: stream, fileName } of file.Media.Array) {\n    zip.file(`word/media/${fileName}`, stream);\n  }\n  return zip.generateAsync({\n    type: outputType,\n    mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n    compression: \"DEFLATE\"\n  });\n});\nconst toXml = (jsonObj) => {\n  const output = lib.js2xml(jsonObj);\n  return output;\n};\nconst createRelationshipFile = () => ({\n  declaration: {\n    attributes: {\n      version: \"1.0\",\n      encoding: \"UTF-8\",\n      standalone: \"yes\"\n    }\n  },\n  elements: [\n    {\n      type: \"element\",\n      name: \"Relationships\",\n      attributes: {\n        xmlns: \"http://schemas.openxmlformats.org/package/2006/relationships\"\n      },\n      elements: []\n    }\n  ]\n});\nconst patchDetector = (_0) => __async(void 0, [_0], function* ({ data }) {\n  const zipContent = yield JSZip.loadAsync(data);\n  const patches = /* @__PURE__ */ new Set();\n  for (const [key, value] of Object.entries(zipContent.files)) {\n    if (!key.endsWith(\".xml\") && !key.endsWith(\".rels\")) {\n      continue;\n    }\n    if (key.startsWith(\"word/\") && !key.endsWith(\".xml.rels\")) {\n      const json = toJson(yield value.async(\"text\"));\n      traverse(json).forEach((p) => findPatchKeys(p.text).forEach((patch) => patches.add(patch)));\n    }\n  }\n  return Array.from(patches);\n});\nconst findPatchKeys = (text) => {\n  var _a;\n  const pattern = new RegExp(\"(?<=\\\\{\\\\{).+?(?=\\\\}\\\\})\", \"gs\");\n  return (_a = text.match(pattern)) != null ? _a : [];\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/docx/build/index.mjs\n"));

/***/ })

});