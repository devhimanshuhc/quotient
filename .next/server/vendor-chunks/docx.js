"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/docx";
exports.ids = ["vendor-chunks/docx"];
exports.modules = {

/***/ "(ssr)/./node_modules/docx/build/index.mjs":
/*!*******************************************!*\
  !*** ./node_modules/docx/build/index.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractNumbering: () => (/* binding */ AbstractNumbering),\n/* harmony export */   Alignment: () => (/* binding */ Alignment),\n/* harmony export */   AlignmentAttributes: () => (/* binding */ AlignmentAttributes),\n/* harmony export */   AlignmentType: () => (/* binding */ AlignmentType),\n/* harmony export */   AnnotationReference: () => (/* binding */ AnnotationReference),\n/* harmony export */   Attributes: () => (/* binding */ Attributes),\n/* harmony export */   BaseEmphasisMark: () => (/* binding */ BaseEmphasisMark),\n/* harmony export */   BaseXmlComponent: () => (/* binding */ BaseXmlComponent),\n/* harmony export */   Body: () => (/* binding */ Body),\n/* harmony export */   Bookmark: () => (/* binding */ Bookmark),\n/* harmony export */   BookmarkEnd: () => (/* binding */ BookmarkEnd),\n/* harmony export */   BookmarkStart: () => (/* binding */ BookmarkStart),\n/* harmony export */   Border: () => (/* binding */ Border),\n/* harmony export */   BorderElement: () => (/* binding */ BorderElement),\n/* harmony export */   BorderStyle: () => (/* binding */ BorderStyle),\n/* harmony export */   BuilderElement: () => (/* binding */ BuilderElement),\n/* harmony export */   CarriageReturn: () => (/* binding */ CarriageReturn),\n/* harmony export */   CharacterSet: () => (/* binding */ CharacterSet),\n/* harmony export */   CheckBox: () => (/* binding */ CheckBox),\n/* harmony export */   CheckBoxSymbolElement: () => (/* binding */ CheckBoxSymbolElement),\n/* harmony export */   CheckBoxUtil: () => (/* binding */ CheckBoxUtil),\n/* harmony export */   Column: () => (/* binding */ Column),\n/* harmony export */   ColumnBreak: () => (/* binding */ ColumnBreak),\n/* harmony export */   Columns: () => (/* binding */ Columns),\n/* harmony export */   Comment: () => (/* binding */ Comment),\n/* harmony export */   CommentRangeEnd: () => (/* binding */ CommentRangeEnd),\n/* harmony export */   CommentRangeStart: () => (/* binding */ CommentRangeStart),\n/* harmony export */   CommentReference: () => (/* binding */ CommentReference),\n/* harmony export */   Comments: () => (/* binding */ Comments),\n/* harmony export */   ConcreteHyperlink: () => (/* binding */ ConcreteHyperlink),\n/* harmony export */   ConcreteNumbering: () => (/* binding */ ConcreteNumbering),\n/* harmony export */   ContinuationSeparator: () => (/* binding */ ContinuationSeparator),\n/* harmony export */   DayLong: () => (/* binding */ DayLong),\n/* harmony export */   DayShort: () => (/* binding */ DayShort),\n/* harmony export */   DeletedTextRun: () => (/* binding */ DeletedTextRun),\n/* harmony export */   DocGridAttributes: () => (/* binding */ DocGridAttributes),\n/* harmony export */   Document: () => (/* binding */ File),\n/* harmony export */   DocumentAttributes: () => (/* binding */ DocumentAttributes),\n/* harmony export */   DocumentBackground: () => (/* binding */ DocumentBackground),\n/* harmony export */   DocumentBackgroundAttributes: () => (/* binding */ DocumentBackgroundAttributes),\n/* harmony export */   DocumentDefaults: () => (/* binding */ DocumentDefaults),\n/* harmony export */   DocumentGrid: () => (/* binding */ DocumentGrid),\n/* harmony export */   DocumentGridType: () => (/* binding */ DocumentGridType),\n/* harmony export */   DotEmphasisMark: () => (/* binding */ DotEmphasisMark),\n/* harmony export */   Drawing: () => (/* binding */ Drawing),\n/* harmony export */   DropCapType: () => (/* binding */ DropCapType),\n/* harmony export */   EMPTY_OBJECT: () => (/* binding */ EMPTY_OBJECT),\n/* harmony export */   EmphasisMark: () => (/* binding */ EmphasisMark),\n/* harmony export */   EmphasisMarkType: () => (/* binding */ EmphasisMarkType),\n/* harmony export */   EmptyElement: () => (/* binding */ EmptyElement),\n/* harmony export */   EndnoteReference: () => (/* binding */ EndnoteReference),\n/* harmony export */   ExternalHyperlink: () => (/* binding */ ExternalHyperlink),\n/* harmony export */   File: () => (/* binding */ File),\n/* harmony export */   FileChild: () => (/* binding */ FileChild),\n/* harmony export */   FootNoteReferenceRunAttributes: () => (/* binding */ FootNoteReferenceRunAttributes),\n/* harmony export */   FootNotes: () => (/* binding */ FootNotes),\n/* harmony export */   Footer: () => (/* binding */ Footer2),\n/* harmony export */   FooterWrapper: () => (/* binding */ FooterWrapper),\n/* harmony export */   FootnoteReference: () => (/* binding */ FootnoteReference),\n/* harmony export */   FootnoteReferenceElement: () => (/* binding */ FootnoteReferenceElement),\n/* harmony export */   FootnoteReferenceRun: () => (/* binding */ FootnoteReferenceRun),\n/* harmony export */   FrameAnchorType: () => (/* binding */ FrameAnchorType),\n/* harmony export */   FrameWrap: () => (/* binding */ FrameWrap),\n/* harmony export */   GridSpan: () => (/* binding */ GridSpan),\n/* harmony export */   Header: () => (/* binding */ Header2),\n/* harmony export */   HeaderFooterReference: () => (/* binding */ HeaderFooterReference),\n/* harmony export */   HeaderFooterReferenceType: () => (/* binding */ HeaderFooterReferenceType),\n/* harmony export */   HeaderFooterType: () => (/* binding */ HeaderFooterType),\n/* harmony export */   HeaderWrapper: () => (/* binding */ HeaderWrapper),\n/* harmony export */   HeadingLevel: () => (/* binding */ HeadingLevel),\n/* harmony export */   HeightRule: () => (/* binding */ HeightRule),\n/* harmony export */   HighlightColor: () => (/* binding */ HighlightColor),\n/* harmony export */   HorizontalPosition: () => (/* binding */ HorizontalPosition),\n/* harmony export */   HorizontalPositionAlign: () => (/* binding */ HorizontalPositionAlign),\n/* harmony export */   HorizontalPositionRelativeFrom: () => (/* binding */ HorizontalPositionRelativeFrom),\n/* harmony export */   HpsMeasureElement: () => (/* binding */ HpsMeasureElement),\n/* harmony export */   HyperlinkType: () => (/* binding */ HyperlinkType),\n/* harmony export */   IgnoreIfEmptyXmlComponent: () => (/* binding */ IgnoreIfEmptyXmlComponent),\n/* harmony export */   ImageRun: () => (/* binding */ ImageRun),\n/* harmony export */   ImportedRootElementAttributes: () => (/* binding */ ImportedRootElementAttributes),\n/* harmony export */   ImportedXmlComponent: () => (/* binding */ ImportedXmlComponent),\n/* harmony export */   Indent: () => (/* binding */ Indent),\n/* harmony export */   InitializableXmlComponent: () => (/* binding */ InitializableXmlComponent),\n/* harmony export */   InsertedTextRun: () => (/* binding */ InsertedTextRun),\n/* harmony export */   InternalHyperlink: () => (/* binding */ InternalHyperlink),\n/* harmony export */   LastRenderedPageBreak: () => (/* binding */ LastRenderedPageBreak),\n/* harmony export */   LeaderType: () => (/* binding */ LeaderType),\n/* harmony export */   Level: () => (/* binding */ Level),\n/* harmony export */   LevelBase: () => (/* binding */ LevelBase),\n/* harmony export */   LevelForOverride: () => (/* binding */ LevelForOverride),\n/* harmony export */   LevelFormat: () => (/* binding */ LevelFormat),\n/* harmony export */   LevelOverride: () => (/* binding */ LevelOverride),\n/* harmony export */   LevelSuffix: () => (/* binding */ LevelSuffix),\n/* harmony export */   LineNumberRestartFormat: () => (/* binding */ LineNumberRestartFormat),\n/* harmony export */   LineRuleType: () => (/* binding */ LineRuleType),\n/* harmony export */   Math: () => (/* binding */ Math$1),\n/* harmony export */   MathAccentCharacter: () => (/* binding */ MathAccentCharacter),\n/* harmony export */   MathAngledBrackets: () => (/* binding */ MathAngledBrackets),\n/* harmony export */   MathBase: () => (/* binding */ MathBase),\n/* harmony export */   MathCurlyBrackets: () => (/* binding */ MathCurlyBrackets),\n/* harmony export */   MathDegree: () => (/* binding */ MathDegree),\n/* harmony export */   MathDenominator: () => (/* binding */ MathDenominator),\n/* harmony export */   MathFraction: () => (/* binding */ MathFraction),\n/* harmony export */   MathFunction: () => (/* binding */ MathFunction),\n/* harmony export */   MathFunctionName: () => (/* binding */ MathFunctionName),\n/* harmony export */   MathFunctionProperties: () => (/* binding */ MathFunctionProperties),\n/* harmony export */   MathIntegral: () => (/* binding */ MathIntegral),\n/* harmony export */   MathLimit: () => (/* binding */ MathLimit),\n/* harmony export */   MathLimitLocation: () => (/* binding */ MathLimitLocation),\n/* harmony export */   MathLimitLower: () => (/* binding */ MathLimitLower),\n/* harmony export */   MathLimitUpper: () => (/* binding */ MathLimitUpper),\n/* harmony export */   MathNAryProperties: () => (/* binding */ MathNAryProperties),\n/* harmony export */   MathNumerator: () => (/* binding */ MathNumerator),\n/* harmony export */   MathPreSubSuperScript: () => (/* binding */ MathPreSubSuperScript),\n/* harmony export */   MathPreSubSuperScriptProperties: () => (/* binding */ MathPreSubSuperScriptProperties),\n/* harmony export */   MathRadical: () => (/* binding */ MathRadical),\n/* harmony export */   MathRadicalProperties: () => (/* binding */ MathRadicalProperties),\n/* harmony export */   MathRoundBrackets: () => (/* binding */ MathRoundBrackets),\n/* harmony export */   MathRun: () => (/* binding */ MathRun),\n/* harmony export */   MathSquareBrackets: () => (/* binding */ MathSquareBrackets),\n/* harmony export */   MathSubScript: () => (/* binding */ MathSubScript),\n/* harmony export */   MathSubScriptElement: () => (/* binding */ MathSubScriptElement),\n/* harmony export */   MathSubScriptProperties: () => (/* binding */ MathSubScriptProperties),\n/* harmony export */   MathSubSuperScript: () => (/* binding */ MathSubSuperScript),\n/* harmony export */   MathSubSuperScriptProperties: () => (/* binding */ MathSubSuperScriptProperties),\n/* harmony export */   MathSum: () => (/* binding */ MathSum),\n/* harmony export */   MathSuperScript: () => (/* binding */ MathSuperScript),\n/* harmony export */   MathSuperScriptElement: () => (/* binding */ MathSuperScriptElement),\n/* harmony export */   MathSuperScriptProperties: () => (/* binding */ MathSuperScriptProperties),\n/* harmony export */   Media: () => (/* binding */ Media),\n/* harmony export */   MonthLong: () => (/* binding */ MonthLong),\n/* harmony export */   MonthShort: () => (/* binding */ MonthShort),\n/* harmony export */   NextAttributeComponent: () => (/* binding */ NextAttributeComponent),\n/* harmony export */   NoBreakHyphen: () => (/* binding */ NoBreakHyphen),\n/* harmony export */   NumberFormat: () => (/* binding */ NumberFormat$1),\n/* harmony export */   NumberProperties: () => (/* binding */ NumberProperties),\n/* harmony export */   NumberValueElement: () => (/* binding */ NumberValueElement),\n/* harmony export */   Numbering: () => (/* binding */ Numbering),\n/* harmony export */   OnOffElement: () => (/* binding */ OnOffElement),\n/* harmony export */   OutlineLevel: () => (/* binding */ OutlineLevel),\n/* harmony export */   OverlapType: () => (/* binding */ OverlapType),\n/* harmony export */   Packer: () => (/* binding */ Packer),\n/* harmony export */   PageBorderDisplay: () => (/* binding */ PageBorderDisplay),\n/* harmony export */   PageBorderOffsetFrom: () => (/* binding */ PageBorderOffsetFrom),\n/* harmony export */   PageBorderZOrder: () => (/* binding */ PageBorderZOrder),\n/* harmony export */   PageBorders: () => (/* binding */ PageBorders),\n/* harmony export */   PageBreak: () => (/* binding */ PageBreak),\n/* harmony export */   PageBreakBefore: () => (/* binding */ PageBreakBefore),\n/* harmony export */   PageMargin: () => (/* binding */ PageMargin),\n/* harmony export */   PageNumber: () => (/* binding */ PageNumber),\n/* harmony export */   PageNumberElement: () => (/* binding */ PageNumberElement),\n/* harmony export */   PageNumberSeparator: () => (/* binding */ PageNumberSeparator),\n/* harmony export */   PageNumberType: () => (/* binding */ PageNumberType),\n/* harmony export */   PageNumberTypeAttributes: () => (/* binding */ PageNumberTypeAttributes),\n/* harmony export */   PageOrientation: () => (/* binding */ PageOrientation),\n/* harmony export */   PageReference: () => (/* binding */ PageReference),\n/* harmony export */   PageSize: () => (/* binding */ PageSize),\n/* harmony export */   PageTextDirection: () => (/* binding */ PageTextDirection),\n/* harmony export */   PageTextDirectionType: () => (/* binding */ PageTextDirectionType),\n/* harmony export */   Paragraph: () => (/* binding */ Paragraph),\n/* harmony export */   ParagraphProperties: () => (/* binding */ ParagraphProperties),\n/* harmony export */   ParagraphPropertiesDefaults: () => (/* binding */ ParagraphPropertiesDefaults),\n/* harmony export */   PatchType: () => (/* binding */ PatchType),\n/* harmony export */   PositionalTab: () => (/* binding */ PositionalTab),\n/* harmony export */   PositionalTabAlignment: () => (/* binding */ PositionalTabAlignment),\n/* harmony export */   PositionalTabLeader: () => (/* binding */ PositionalTabLeader),\n/* harmony export */   PositionalTabRelativeTo: () => (/* binding */ PositionalTabRelativeTo),\n/* harmony export */   PrettifyType: () => (/* binding */ PrettifyType),\n/* harmony export */   RelativeHorizontalPosition: () => (/* binding */ RelativeHorizontalPosition),\n/* harmony export */   RelativeVerticalPosition: () => (/* binding */ RelativeVerticalPosition),\n/* harmony export */   Run: () => (/* binding */ Run),\n/* harmony export */   RunFonts: () => (/* binding */ RunFonts),\n/* harmony export */   RunProperties: () => (/* binding */ RunProperties),\n/* harmony export */   RunPropertiesChange: () => (/* binding */ RunPropertiesChange),\n/* harmony export */   RunPropertiesDefaults: () => (/* binding */ RunPropertiesDefaults),\n/* harmony export */   SectionProperties: () => (/* binding */ SectionProperties),\n/* harmony export */   SectionType: () => (/* binding */ SectionType),\n/* harmony export */   SectionTypeAttributes: () => (/* binding */ SectionTypeAttributes),\n/* harmony export */   Separator: () => (/* binding */ Separator),\n/* harmony export */   SequentialIdentifier: () => (/* binding */ SequentialIdentifier),\n/* harmony export */   Shading: () => (/* binding */ Shading),\n/* harmony export */   ShadingType: () => (/* binding */ ShadingType),\n/* harmony export */   SimpleField: () => (/* binding */ SimpleField),\n/* harmony export */   SimpleMailMergeField: () => (/* binding */ SimpleMailMergeField),\n/* harmony export */   SimplePos: () => (/* binding */ SimplePos),\n/* harmony export */   SoftHyphen: () => (/* binding */ SoftHyphen),\n/* harmony export */   SpaceType: () => (/* binding */ SpaceType),\n/* harmony export */   Spacing: () => (/* binding */ Spacing),\n/* harmony export */   StringContainer: () => (/* binding */ StringContainer),\n/* harmony export */   StringEnumValueElement: () => (/* binding */ StringEnumValueElement),\n/* harmony export */   StringValueElement: () => (/* binding */ StringValueElement),\n/* harmony export */   Style: () => (/* binding */ Style$1),\n/* harmony export */   StyleForCharacter: () => (/* binding */ StyleForCharacter),\n/* harmony export */   StyleForParagraph: () => (/* binding */ StyleForParagraph),\n/* harmony export */   StyleLevel: () => (/* binding */ StyleLevel),\n/* harmony export */   Styles: () => (/* binding */ Styles),\n/* harmony export */   SymbolRun: () => (/* binding */ SymbolRun),\n/* harmony export */   TDirection: () => (/* binding */ TDirection),\n/* harmony export */   Tab: () => (/* binding */ Tab),\n/* harmony export */   TabAttributes: () => (/* binding */ TabAttributes),\n/* harmony export */   TabStop: () => (/* binding */ TabStop),\n/* harmony export */   TabStopItem: () => (/* binding */ TabStopItem),\n/* harmony export */   TabStopPosition: () => (/* binding */ TabStopPosition),\n/* harmony export */   TabStopType: () => (/* binding */ TabStopType),\n/* harmony export */   Table: () => (/* binding */ Table),\n/* harmony export */   TableAnchorType: () => (/* binding */ TableAnchorType),\n/* harmony export */   TableBorders: () => (/* binding */ TableBorders),\n/* harmony export */   TableCell: () => (/* binding */ TableCell),\n/* harmony export */   TableCellBorders: () => (/* binding */ TableCellBorders),\n/* harmony export */   TableFloatProperties: () => (/* binding */ TableFloatProperties),\n/* harmony export */   TableLayout: () => (/* binding */ TableLayout),\n/* harmony export */   TableLayoutType: () => (/* binding */ TableLayoutType),\n/* harmony export */   TableOfContents: () => (/* binding */ TableOfContents),\n/* harmony export */   TableProperties: () => (/* binding */ TableProperties),\n/* harmony export */   TableRow: () => (/* binding */ TableRow),\n/* harmony export */   TableRowHeight: () => (/* binding */ TableRowHeight),\n/* harmony export */   TableRowHeightAttributes: () => (/* binding */ TableRowHeightAttributes),\n/* harmony export */   TableRowProperties: () => (/* binding */ TableRowProperties),\n/* harmony export */   TableWidthElement: () => (/* binding */ TableWidthElement),\n/* harmony export */   TextDirection: () => (/* binding */ TextDirection),\n/* harmony export */   TextEffect: () => (/* binding */ TextEffect),\n/* harmony export */   TextRun: () => (/* binding */ TextRun),\n/* harmony export */   TextWrappingSide: () => (/* binding */ TextWrappingSide),\n/* harmony export */   TextWrappingType: () => (/* binding */ TextWrappingType),\n/* harmony export */   Textbox: () => (/* binding */ Textbox),\n/* harmony export */   ThematicBreak: () => (/* binding */ ThematicBreak),\n/* harmony export */   Type: () => (/* binding */ Type),\n/* harmony export */   Underline: () => (/* binding */ Underline),\n/* harmony export */   UnderlineType: () => (/* binding */ UnderlineType),\n/* harmony export */   VerticalAlign: () => (/* binding */ VerticalAlign2),\n/* harmony export */   VerticalAlignAttributes: () => (/* binding */ VerticalAlignAttributes),\n/* harmony export */   VerticalAlignElement: () => (/* binding */ VerticalAlignElement),\n/* harmony export */   VerticalMerge: () => (/* binding */ VerticalMerge),\n/* harmony export */   VerticalMergeType: () => (/* binding */ VerticalMergeType),\n/* harmony export */   VerticalPosition: () => (/* binding */ VerticalPosition),\n/* harmony export */   VerticalPositionAlign: () => (/* binding */ VerticalPositionAlign),\n/* harmony export */   VerticalPositionRelativeFrom: () => (/* binding */ VerticalPositionRelativeFrom),\n/* harmony export */   WORKAROUND2: () => (/* binding */ WORKAROUND2),\n/* harmony export */   WORKAROUND3: () => (/* binding */ WORKAROUND3),\n/* harmony export */   WORKAROUND4: () => (/* binding */ WORKAROUND4),\n/* harmony export */   WidthType: () => (/* binding */ WidthType),\n/* harmony export */   WrapNone: () => (/* binding */ WrapNone),\n/* harmony export */   WrapSquare: () => (/* binding */ WrapSquare),\n/* harmony export */   WrapTight: () => (/* binding */ WrapTight),\n/* harmony export */   WrapTopAndBottom: () => (/* binding */ WrapTopAndBottom),\n/* harmony export */   XmlAttributeComponent: () => (/* binding */ XmlAttributeComponent),\n/* harmony export */   XmlComponent: () => (/* binding */ XmlComponent),\n/* harmony export */   YearLong: () => (/* binding */ YearLong),\n/* harmony export */   YearShort: () => (/* binding */ YearShort),\n/* harmony export */   abstractNumUniqueNumericIdGen: () => (/* binding */ abstractNumUniqueNumericIdGen),\n/* harmony export */   bookmarkUniqueNumericIdGen: () => (/* binding */ bookmarkUniqueNumericIdGen),\n/* harmony export */   concreteNumUniqueNumericIdGen: () => (/* binding */ concreteNumUniqueNumericIdGen),\n/* harmony export */   convertInchesToTwip: () => (/* binding */ convertInchesToTwip),\n/* harmony export */   convertMillimetersToTwip: () => (/* binding */ convertMillimetersToTwip),\n/* harmony export */   convertToXmlComponent: () => (/* binding */ convertToXmlComponent),\n/* harmony export */   createFrameProperties: () => (/* binding */ createFrameProperties),\n/* harmony export */   createLineNumberType: () => (/* binding */ createLineNumberType),\n/* harmony export */   createStringElement: () => (/* binding */ createStringElement),\n/* harmony export */   dateTimeValue: () => (/* binding */ dateTimeValue),\n/* harmony export */   decimalNumber: () => (/* binding */ decimalNumber),\n/* harmony export */   docPropertiesUniqueNumericIdGen: () => (/* binding */ docPropertiesUniqueNumericIdGen),\n/* harmony export */   eighthPointMeasureValue: () => (/* binding */ eighthPointMeasureValue),\n/* harmony export */   hashedId: () => (/* binding */ hashedId),\n/* harmony export */   hexColorValue: () => (/* binding */ hexColorValue),\n/* harmony export */   hpsMeasureValue: () => (/* binding */ hpsMeasureValue),\n/* harmony export */   longHexNumber: () => (/* binding */ longHexNumber),\n/* harmony export */   measurementOrPercentValue: () => (/* binding */ measurementOrPercentValue),\n/* harmony export */   patchDetector: () => (/* binding */ patchDetector),\n/* harmony export */   patchDocument: () => (/* binding */ patchDocument),\n/* harmony export */   percentageValue: () => (/* binding */ percentageValue),\n/* harmony export */   pointMeasureValue: () => (/* binding */ pointMeasureValue),\n/* harmony export */   positiveUniversalMeasureValue: () => (/* binding */ positiveUniversalMeasureValue),\n/* harmony export */   sectionMarginDefaults: () => (/* binding */ sectionMarginDefaults),\n/* harmony export */   sectionPageSizeDefaults: () => (/* binding */ sectionPageSizeDefaults),\n/* harmony export */   shortHexNumber: () => (/* binding */ shortHexNumber),\n/* harmony export */   signedHpsMeasureValue: () => (/* binding */ signedHpsMeasureValue),\n/* harmony export */   signedTwipsMeasureValue: () => (/* binding */ signedTwipsMeasureValue),\n/* harmony export */   twipsMeasureValue: () => (/* binding */ twipsMeasureValue),\n/* harmony export */   uCharHexNumber: () => (/* binding */ uCharHexNumber),\n/* harmony export */   uniqueId: () => (/* binding */ uniqueId),\n/* harmony export */   uniqueNumericIdCreator: () => (/* binding */ uniqueNumericIdCreator),\n/* harmony export */   uniqueUuid: () => (/* binding */ uniqueUuid),\n/* harmony export */   universalMeasureValue: () => (/* binding */ universalMeasureValue),\n/* harmony export */   unsignedDecimalNumber: () => (/* binding */ unsignedDecimalNumber)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve2, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve2(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nclass BaseXmlComponent {\n  constructor(rootKey) {\n    __publicField(this, \"rootKey\");\n    this.rootKey = rootKey;\n  }\n}\nconst EMPTY_OBJECT = Object.seal({});\nclass XmlComponent extends BaseXmlComponent {\n  constructor(rootKey) {\n    super(rootKey);\n    // eslint-disable-next-line functional/prefer-readonly-type, @typescript-eslint/no-explicit-any\n    __publicField(this, \"root\");\n    this.root = new Array();\n  }\n  // This method is called by the formatter to get the XML representation of this component.\n  // It is called recursively for all child components.\n  // It is a serializer to be used in the xml library.\n  // https://www.npmjs.com/package/xml\n  // Child components can override this method to customize the XML representation, or execute side effects.\n  prepForXml(context) {\n    var _a;\n    context.stack.push(this);\n    const children = this.root.map((comp) => {\n      if (comp instanceof BaseXmlComponent) {\n        return comp.prepForXml(context);\n      }\n      return comp;\n    }).filter((comp) => comp !== void 0);\n    context.stack.pop();\n    return {\n      [this.rootKey]: children.length ? children.length === 1 && ((_a = children[0]) == null ? void 0 : _a._attr) ? children[0] : children : EMPTY_OBJECT\n    };\n  }\n  /**\n   * @deprecated Do not use this method. It is only used internally by the library. It will be removed in a future version.\n   */\n  addChildElement(child) {\n    this.root.push(child);\n    return this;\n  }\n}\nclass IgnoreIfEmptyXmlComponent extends XmlComponent {\n  prepForXml(context) {\n    const result = super.prepForXml(context);\n    if (result && (typeof result[this.rootKey] !== \"object\" || Object.keys(result[this.rootKey]).length)) {\n      return result;\n    }\n    return void 0;\n  }\n}\nclass XmlAttributeComponent extends BaseXmlComponent {\n  constructor(root) {\n    super(\"_attr\");\n    __publicField(this, \"xmlKeys\");\n    this.root = root;\n  }\n  prepForXml(_) {\n    const attrs = {};\n    Object.entries(this.root).forEach(([key, value]) => {\n      if (value !== void 0) {\n        const newKey = this.xmlKeys && this.xmlKeys[key] || key;\n        attrs[newKey] = value;\n      }\n    });\n    return { _attr: attrs };\n  }\n}\nclass NextAttributeComponent extends BaseXmlComponent {\n  constructor(root) {\n    super(\"_attr\");\n    this.root = root;\n  }\n  prepForXml(_) {\n    const attrs = Object.values(this.root).filter(({ value }) => value !== void 0).reduce((acc, { key, value }) => __spreadProps(__spreadValues({}, acc), { [key]: value }), {});\n    return { _attr: attrs };\n  }\n}\nclass Attributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      val: \"w:val\",\n      color: \"w:color\",\n      fill: \"w:fill\",\n      space: \"w:space\",\n      sz: \"w:sz\",\n      type: \"w:type\",\n      rsidR: \"w:rsidR\",\n      rsidRPr: \"w:rsidRPr\",\n      rsidSect: \"w:rsidSect\",\n      w: \"w:w\",\n      h: \"w:h\",\n      top: \"w:top\",\n      right: \"w:right\",\n      bottom: \"w:bottom\",\n      left: \"w:left\",\n      header: \"w:header\",\n      footer: \"w:footer\",\n      gutter: \"w:gutter\",\n      linePitch: \"w:linePitch\",\n      pos: \"w:pos\"\n    });\n  }\n}\nvar commonjsGlobal = typeof globalThis !== \"undefined\" ? globalThis : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : {};\nfunction getDefaultExportFromCjs$1(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, \"default\") ? x[\"default\"] : x;\n}\nvar sax$1 = {};\nvar events = { exports: {} };\nvar R = typeof Reflect === \"object\" ? Reflect : null;\nvar ReflectApply = R && typeof R.apply === \"function\" ? R.apply : function ReflectApply2(target, receiver, args) {\n  return Function.prototype.apply.call(target, receiver, args);\n};\nvar ReflectOwnKeys;\nif (R && typeof R.ownKeys === \"function\") {\n  ReflectOwnKeys = R.ownKeys;\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys2(target) {\n    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys2(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {\n  return value !== value;\n};\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nevents.exports = EventEmitter;\nevents.exports.once = once2;\nEventEmitter.EventEmitter = EventEmitter;\nEventEmitter.prototype._events = void 0;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = void 0;\nvar defaultMaxListeners = 10;\nfunction checkListener(listener) {\n  if (typeof listener !== \"function\") {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\nObject.defineProperty(EventEmitter, \"defaultMaxListeners\", {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== \"number\" || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + \".\");\n    }\n    defaultMaxListeners = arg;\n  }\n});\nEventEmitter.init = function() {\n  if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {\n    this._events = /* @__PURE__ */ Object.create(null);\n    this._eventsCount = 0;\n  }\n  this._maxListeners = this._maxListeners || void 0;\n};\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== \"number\" || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + \".\");\n  }\n  this._maxListeners = n;\n  return this;\n};\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === void 0)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\nEventEmitter.prototype.emit = function emit(type2) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = type2 === \"error\";\n  var events2 = this._events;\n  if (events2 !== void 0)\n    doError = doError && events2.error === void 0;\n  else if (!doError)\n    return false;\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      throw er;\n    }\n    var err = new Error(\"Unhandled error.\" + (er ? \" (\" + er.message + \")\" : \"\"));\n    err.context = er;\n    throw err;\n  }\n  var handler = events2[type2];\n  if (handler === void 0)\n    return false;\n  if (typeof handler === \"function\") {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners2 = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners2[i], this, args);\n  }\n  return true;\n};\nfunction _addListener(target, type2, listener, prepend) {\n  var m;\n  var events2;\n  var existing;\n  checkListener(listener);\n  events2 = target._events;\n  if (events2 === void 0) {\n    events2 = target._events = /* @__PURE__ */ Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    if (events2.newListener !== void 0) {\n      target.emit(\n        \"newListener\",\n        type2,\n        listener.listener ? listener.listener : listener\n      );\n      events2 = target._events;\n    }\n    existing = events2[type2];\n  }\n  if (existing === void 0) {\n    existing = events2[type2] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === \"function\") {\n      existing = events2[type2] = prepend ? [listener, existing] : [existing, listener];\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      var w = new Error(\"Possible EventEmitter memory leak detected. \" + existing.length + \" \" + String(type2) + \" listeners added. Use emitter.setMaxListeners() to increase limit\");\n      w.name = \"MaxListenersExceededWarning\";\n      w.emitter = target;\n      w.type = type2;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n  return target;\n}\nEventEmitter.prototype.addListener = function addListener(type2, listener) {\n  return _addListener(this, type2, listener, false);\n};\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\nEventEmitter.prototype.prependListener = function prependListener(type2, listener) {\n  return _addListener(this, type2, listener, true);\n};\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\nfunction _onceWrap(target, type2, listener) {\n  var state2 = { fired: false, wrapFn: void 0, target, type: type2, listener };\n  var wrapped = onceWrapper.bind(state2);\n  wrapped.listener = listener;\n  state2.wrapFn = wrapped;\n  return wrapped;\n}\nEventEmitter.prototype.once = function once(type2, listener) {\n  checkListener(listener);\n  this.on(type2, _onceWrap(this, type2, listener));\n  return this;\n};\nEventEmitter.prototype.prependOnceListener = function prependOnceListener(type2, listener) {\n  checkListener(listener);\n  this.prependListener(type2, _onceWrap(this, type2, listener));\n  return this;\n};\nEventEmitter.prototype.removeListener = function removeListener(type2, listener) {\n  var list, events2, position, i, originalListener;\n  checkListener(listener);\n  events2 = this._events;\n  if (events2 === void 0)\n    return this;\n  list = events2[type2];\n  if (list === void 0)\n    return this;\n  if (list === listener || list.listener === listener) {\n    if (--this._eventsCount === 0)\n      this._events = /* @__PURE__ */ Object.create(null);\n    else {\n      delete events2[type2];\n      if (events2.removeListener)\n        this.emit(\"removeListener\", type2, list.listener || listener);\n    }\n  } else if (typeof list !== \"function\") {\n    position = -1;\n    for (i = list.length - 1; i >= 0; i--) {\n      if (list[i] === listener || list[i].listener === listener) {\n        originalListener = list[i].listener;\n        position = i;\n        break;\n      }\n    }\n    if (position < 0)\n      return this;\n    if (position === 0)\n      list.shift();\n    else {\n      spliceOne(list, position);\n    }\n    if (list.length === 1)\n      events2[type2] = list[0];\n    if (events2.removeListener !== void 0)\n      this.emit(\"removeListener\", type2, originalListener || listener);\n  }\n  return this;\n};\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(type2) {\n  var listeners2, events2, i;\n  events2 = this._events;\n  if (events2 === void 0)\n    return this;\n  if (events2.removeListener === void 0) {\n    if (arguments.length === 0) {\n      this._events = /* @__PURE__ */ Object.create(null);\n      this._eventsCount = 0;\n    } else if (events2[type2] !== void 0) {\n      if (--this._eventsCount === 0)\n        this._events = /* @__PURE__ */ Object.create(null);\n      else\n        delete events2[type2];\n    }\n    return this;\n  }\n  if (arguments.length === 0) {\n    var keys = Object.keys(events2);\n    var key;\n    for (i = 0; i < keys.length; ++i) {\n      key = keys[i];\n      if (key === \"removeListener\") continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners(\"removeListener\");\n    this._events = /* @__PURE__ */ Object.create(null);\n    this._eventsCount = 0;\n    return this;\n  }\n  listeners2 = events2[type2];\n  if (typeof listeners2 === \"function\") {\n    this.removeListener(type2, listeners2);\n  } else if (listeners2 !== void 0) {\n    for (i = listeners2.length - 1; i >= 0; i--) {\n      this.removeListener(type2, listeners2[i]);\n    }\n  }\n  return this;\n};\nfunction _listeners(target, type2, unwrap) {\n  var events2 = target._events;\n  if (events2 === void 0)\n    return [];\n  var evlistener = events2[type2];\n  if (evlistener === void 0)\n    return [];\n  if (typeof evlistener === \"function\")\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\nEventEmitter.prototype.listeners = function listeners(type2) {\n  return _listeners(this, type2, true);\n};\nEventEmitter.prototype.rawListeners = function rawListeners(type2) {\n  return _listeners(this, type2, false);\n};\nEventEmitter.listenerCount = function(emitter, type2) {\n  if (typeof emitter.listenerCount === \"function\") {\n    return emitter.listenerCount(type2);\n  } else {\n    return listenerCount.call(emitter, type2);\n  }\n};\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type2) {\n  var events2 = this._events;\n  if (events2 !== void 0) {\n    var evlistener = events2[type2];\n    if (typeof evlistener === \"function\") {\n      return 1;\n    } else if (evlistener !== void 0) {\n      return evlistener.length;\n    }\n  }\n  return 0;\n}\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\nfunction once2(emitter, name) {\n  return new Promise(function(resolve2, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n    function resolver() {\n      if (typeof emitter.removeListener === \"function\") {\n        emitter.removeListener(\"error\", errorListener);\n      }\n      resolve2([].slice.call(arguments));\n    }\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== \"error\") {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === \"function\") {\n    eventTargetAgnosticAddListener(emitter, \"error\", handler, flags);\n  }\n}\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === \"function\") {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === \"function\") {\n    emitter.addEventListener(name, function wrapListener(arg) {\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\nvar eventsExports = events.exports;\nvar inherits_browser = { exports: {} };\nif (typeof Object.create === \"function\") {\n  inherits_browser.exports = function inherits2(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor;\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n    }\n  };\n} else {\n  inherits_browser.exports = function inherits2(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor;\n      var TempCtor = function() {\n      };\n      TempCtor.prototype = superCtor.prototype;\n      ctor.prototype = new TempCtor();\n      ctor.prototype.constructor = ctor;\n    }\n  };\n}\nvar inherits_browserExports = inherits_browser.exports;\nfunction getDefaultExportFromCjs(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, \"default\") ? x[\"default\"] : x;\n}\nvar browser$1 = { exports: {} };\nvar process = browser$1.exports = {};\nvar cachedSetTimeout;\nvar cachedClearTimeout;\nfunction defaultSetTimout() {\n  throw new Error(\"setTimeout has not been defined\");\n}\nfunction defaultClearTimeout() {\n  throw new Error(\"clearTimeout has not been defined\");\n}\n(function() {\n  try {\n    if (typeof setTimeout === \"function\") {\n      cachedSetTimeout = setTimeout;\n    } else {\n      cachedSetTimeout = defaultSetTimout;\n    }\n  } catch (e) {\n    cachedSetTimeout = defaultSetTimout;\n  }\n  try {\n    if (typeof clearTimeout === \"function\") {\n      cachedClearTimeout = clearTimeout;\n    } else {\n      cachedClearTimeout = defaultClearTimeout;\n    }\n  } catch (e) {\n    cachedClearTimeout = defaultClearTimeout;\n  }\n})();\nfunction runTimeout(fun) {\n  if (cachedSetTimeout === setTimeout) {\n    return setTimeout(fun, 0);\n  }\n  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n    cachedSetTimeout = setTimeout;\n    return setTimeout(fun, 0);\n  }\n  try {\n    return cachedSetTimeout(fun, 0);\n  } catch (e) {\n    try {\n      return cachedSetTimeout.call(null, fun, 0);\n    } catch (e2) {\n      return cachedSetTimeout.call(this, fun, 0);\n    }\n  }\n}\nfunction runClearTimeout(marker) {\n  if (cachedClearTimeout === clearTimeout) {\n    return clearTimeout(marker);\n  }\n  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n    cachedClearTimeout = clearTimeout;\n    return clearTimeout(marker);\n  }\n  try {\n    return cachedClearTimeout(marker);\n  } catch (e) {\n    try {\n      return cachedClearTimeout.call(null, marker);\n    } catch (e2) {\n      return cachedClearTimeout.call(this, marker);\n    }\n  }\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\nfunction cleanUpNextTick() {\n  if (!draining || !currentQueue) {\n    return;\n  }\n  draining = false;\n  if (currentQueue.length) {\n    queue = currentQueue.concat(queue);\n  } else {\n    queueIndex = -1;\n  }\n  if (queue.length) {\n    drainQueue();\n  }\n}\nfunction drainQueue() {\n  if (draining) {\n    return;\n  }\n  var timeout = runTimeout(cleanUpNextTick);\n  draining = true;\n  var len = queue.length;\n  while (len) {\n    currentQueue = queue;\n    queue = [];\n    while (++queueIndex < len) {\n      if (currentQueue) {\n        currentQueue[queueIndex].run();\n      }\n    }\n    queueIndex = -1;\n    len = queue.length;\n  }\n  currentQueue = null;\n  draining = false;\n  runClearTimeout(timeout);\n}\nprocess.nextTick = function(fun) {\n  var args = new Array(arguments.length - 1);\n  if (arguments.length > 1) {\n    for (var i = 1; i < arguments.length; i++) {\n      args[i - 1] = arguments[i];\n    }\n  }\n  queue.push(new Item(fun, args));\n  if (queue.length === 1 && !draining) {\n    runTimeout(drainQueue);\n  }\n};\nfunction Item(fun, array) {\n  this.fun = fun;\n  this.array = array;\n}\nItem.prototype.run = function() {\n  this.fun.apply(null, this.array);\n};\nprocess.title = \"browser\";\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = \"\";\nprocess.versions = {};\nfunction noop() {\n}\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\nprocess.listeners = function(name) {\n  return [];\n};\nprocess.binding = function(name) {\n  throw new Error(\"process.binding is not supported\");\n};\nprocess.cwd = function() {\n  return \"/\";\n};\nprocess.chdir = function(dir) {\n  throw new Error(\"process.chdir is not supported\");\n};\nprocess.umask = function() {\n  return 0;\n};\nvar browserExports = browser$1.exports;\nconst process$1 = /* @__PURE__ */ getDefaultExportFromCjs(browserExports);\nvar streamBrowser;\nvar hasRequiredStreamBrowser;\nfunction requireStreamBrowser() {\n  if (hasRequiredStreamBrowser) return streamBrowser;\n  hasRequiredStreamBrowser = 1;\n  streamBrowser = eventsExports.EventEmitter;\n  return streamBrowser;\n}\nvar buffer = {};\nvar base64Js = {};\nvar hasRequiredBase64Js;\nfunction requireBase64Js() {\n  if (hasRequiredBase64Js) return base64Js;\n  hasRequiredBase64Js = 1;\n  base64Js.byteLength = byteLength;\n  base64Js.toByteArray = toByteArray;\n  base64Js.fromByteArray = fromByteArray;\n  var lookup = [];\n  var revLookup = [];\n  var Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\n  var code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  for (var i = 0, len = code.length; i < len; ++i) {\n    lookup[i] = code[i];\n    revLookup[code.charCodeAt(i)] = i;\n  }\n  revLookup[\"-\".charCodeAt(0)] = 62;\n  revLookup[\"_\".charCodeAt(0)] = 63;\n  function getLens(b64) {\n    var len2 = b64.length;\n    if (len2 % 4 > 0) {\n      throw new Error(\"Invalid string. Length must be a multiple of 4\");\n    }\n    var validLen = b64.indexOf(\"=\");\n    if (validLen === -1) validLen = len2;\n    var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;\n    return [validLen, placeHoldersLen];\n  }\n  function byteLength(b64) {\n    var lens = getLens(b64);\n    var validLen = lens[0];\n    var placeHoldersLen = lens[1];\n    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n  }\n  function _byteLength(b64, validLen, placeHoldersLen) {\n    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n  }\n  function toByteArray(b64) {\n    var tmp;\n    var lens = getLens(b64);\n    var validLen = lens[0];\n    var placeHoldersLen = lens[1];\n    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n    var curByte = 0;\n    var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;\n    var i2;\n    for (i2 = 0; i2 < len2; i2 += 4) {\n      tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];\n      arr[curByte++] = tmp >> 16 & 255;\n      arr[curByte++] = tmp >> 8 & 255;\n      arr[curByte++] = tmp & 255;\n    }\n    if (placeHoldersLen === 2) {\n      tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;\n      arr[curByte++] = tmp & 255;\n    }\n    if (placeHoldersLen === 1) {\n      tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;\n      arr[curByte++] = tmp >> 8 & 255;\n      arr[curByte++] = tmp & 255;\n    }\n    return arr;\n  }\n  function tripletToBase64(num) {\n    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];\n  }\n  function encodeChunk(uint8, start, end) {\n    var tmp;\n    var output = [];\n    for (var i2 = start; i2 < end; i2 += 3) {\n      tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);\n      output.push(tripletToBase64(tmp));\n    }\n    return output.join(\"\");\n  }\n  function fromByteArray(uint8) {\n    var tmp;\n    var len2 = uint8.length;\n    var extraBytes = len2 % 3;\n    var parts = [];\n    var maxChunkLength = 16383;\n    for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {\n      parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));\n    }\n    if (extraBytes === 1) {\n      tmp = uint8[len2 - 1];\n      parts.push(\n        lookup[tmp >> 2] + lookup[tmp << 4 & 63] + \"==\"\n      );\n    } else if (extraBytes === 2) {\n      tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];\n      parts.push(\n        lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + \"=\"\n      );\n    }\n    return parts.join(\"\");\n  }\n  return base64Js;\n}\nvar ieee754 = {};\n/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nvar hasRequiredIeee754;\nfunction requireIeee754() {\n  if (hasRequiredIeee754) return ieee754;\n  hasRequiredIeee754 = 1;\n  ieee754.read = function(buffer2, offset, isLE, mLen, nBytes) {\n    var e, m;\n    var eLen = nBytes * 8 - mLen - 1;\n    var eMax = (1 << eLen) - 1;\n    var eBias = eMax >> 1;\n    var nBits = -7;\n    var i = isLE ? nBytes - 1 : 0;\n    var d = isLE ? -1 : 1;\n    var s2 = buffer2[offset + i];\n    i += d;\n    e = s2 & (1 << -nBits) - 1;\n    s2 >>= -nBits;\n    nBits += eLen;\n    for (; nBits > 0; e = e * 256 + buffer2[offset + i], i += d, nBits -= 8) {\n    }\n    m = e & (1 << -nBits) - 1;\n    e >>= -nBits;\n    nBits += mLen;\n    for (; nBits > 0; m = m * 256 + buffer2[offset + i], i += d, nBits -= 8) {\n    }\n    if (e === 0) {\n      e = 1 - eBias;\n    } else if (e === eMax) {\n      return m ? NaN : (s2 ? -1 : 1) * Infinity;\n    } else {\n      m = m + Math.pow(2, mLen);\n      e = e - eBias;\n    }\n    return (s2 ? -1 : 1) * m * Math.pow(2, e - mLen);\n  };\n  ieee754.write = function(buffer2, value, offset, isLE, mLen, nBytes) {\n    var e, m, c;\n    var eLen = nBytes * 8 - mLen - 1;\n    var eMax = (1 << eLen) - 1;\n    var eBias = eMax >> 1;\n    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n    var i = isLE ? 0 : nBytes - 1;\n    var d = isLE ? 1 : -1;\n    var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n    value = Math.abs(value);\n    if (isNaN(value) || value === Infinity) {\n      m = isNaN(value) ? 1 : 0;\n      e = eMax;\n    } else {\n      e = Math.floor(Math.log(value) / Math.LN2);\n      if (value * (c = Math.pow(2, -e)) < 1) {\n        e--;\n        c *= 2;\n      }\n      if (e + eBias >= 1) {\n        value += rt / c;\n      } else {\n        value += rt * Math.pow(2, 1 - eBias);\n      }\n      if (value * c >= 2) {\n        e++;\n        c /= 2;\n      }\n      if (e + eBias >= eMax) {\n        m = 0;\n        e = eMax;\n      } else if (e + eBias >= 1) {\n        m = (value * c - 1) * Math.pow(2, mLen);\n        e = e + eBias;\n      } else {\n        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n        e = 0;\n      }\n    }\n    for (; mLen >= 8; buffer2[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {\n    }\n    e = e << mLen | m;\n    eLen += mLen;\n    for (; eLen > 0; buffer2[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {\n    }\n    buffer2[offset + i - d] |= s2 * 128;\n  };\n  return ieee754;\n}\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\nvar hasRequiredBuffer;\nfunction requireBuffer() {\n  if (hasRequiredBuffer) return buffer;\n  hasRequiredBuffer = 1;\n  (function(exports) {\n    var base64 = requireBase64Js();\n    var ieee7542 = requireIeee754();\n    var customInspectSymbol = typeof Symbol === \"function\" && typeof Symbol[\"for\"] === \"function\" ? Symbol[\"for\"](\"nodejs.util.inspect.custom\") : null;\n    exports.Buffer = Buffer2;\n    exports.SlowBuffer = SlowBuffer;\n    exports.INSPECT_MAX_BYTES = 50;\n    var K_MAX_LENGTH = 2147483647;\n    exports.kMaxLength = K_MAX_LENGTH;\n    Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();\n    if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== \"undefined\" && typeof console.error === \"function\") {\n      console.error(\n        \"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\"\n      );\n    }\n    function typedArraySupport() {\n      try {\n        var arr = new Uint8Array(1);\n        var proto = { foo: function() {\n          return 42;\n        } };\n        Object.setPrototypeOf(proto, Uint8Array.prototype);\n        Object.setPrototypeOf(arr, proto);\n        return arr.foo() === 42;\n      } catch (e) {\n        return false;\n      }\n    }\n    Object.defineProperty(Buffer2.prototype, \"parent\", {\n      enumerable: true,\n      get: function() {\n        if (!Buffer2.isBuffer(this)) return void 0;\n        return this.buffer;\n      }\n    });\n    Object.defineProperty(Buffer2.prototype, \"offset\", {\n      enumerable: true,\n      get: function() {\n        if (!Buffer2.isBuffer(this)) return void 0;\n        return this.byteOffset;\n      }\n    });\n    function createBuffer(length) {\n      if (length > K_MAX_LENGTH) {\n        throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n      }\n      var buf = new Uint8Array(length);\n      Object.setPrototypeOf(buf, Buffer2.prototype);\n      return buf;\n    }\n    function Buffer2(arg, encodingOrOffset, length) {\n      if (typeof arg === \"number\") {\n        if (typeof encodingOrOffset === \"string\") {\n          throw new TypeError(\n            'The \"string\" argument must be of type string. Received type number'\n          );\n        }\n        return allocUnsafe(arg);\n      }\n      return from(arg, encodingOrOffset, length);\n    }\n    Buffer2.poolSize = 8192;\n    function from(value, encodingOrOffset, length) {\n      if (typeof value === \"string\") {\n        return fromString(value, encodingOrOffset);\n      }\n      if (ArrayBuffer.isView(value)) {\n        return fromArrayView(value);\n      }\n      if (value == null) {\n        throw new TypeError(\n          \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value\n        );\n      }\n      if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {\n        return fromArrayBuffer(value, encodingOrOffset, length);\n      }\n      if (typeof SharedArrayBuffer !== \"undefined\" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {\n        return fromArrayBuffer(value, encodingOrOffset, length);\n      }\n      if (typeof value === \"number\") {\n        throw new TypeError(\n          'The \"value\" argument must not be of type number. Received type number'\n        );\n      }\n      var valueOf = value.valueOf && value.valueOf();\n      if (valueOf != null && valueOf !== value) {\n        return Buffer2.from(valueOf, encodingOrOffset, length);\n      }\n      var b = fromObject(value);\n      if (b) return b;\n      if (typeof Symbol !== \"undefined\" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === \"function\") {\n        return Buffer2.from(\n          value[Symbol.toPrimitive](\"string\"),\n          encodingOrOffset,\n          length\n        );\n      }\n      throw new TypeError(\n        \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value\n      );\n    }\n    Buffer2.from = function(value, encodingOrOffset, length) {\n      return from(value, encodingOrOffset, length);\n    };\n    Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);\n    Object.setPrototypeOf(Buffer2, Uint8Array);\n    function assertSize(size) {\n      if (typeof size !== \"number\") {\n        throw new TypeError('\"size\" argument must be of type number');\n      } else if (size < 0) {\n        throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n      }\n    }\n    function alloc(size, fill, encoding) {\n      assertSize(size);\n      if (size <= 0) {\n        return createBuffer(size);\n      }\n      if (fill !== void 0) {\n        return typeof encoding === \"string\" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\n      }\n      return createBuffer(size);\n    }\n    Buffer2.alloc = function(size, fill, encoding) {\n      return alloc(size, fill, encoding);\n    };\n    function allocUnsafe(size) {\n      assertSize(size);\n      return createBuffer(size < 0 ? 0 : checked(size) | 0);\n    }\n    Buffer2.allocUnsafe = function(size) {\n      return allocUnsafe(size);\n    };\n    Buffer2.allocUnsafeSlow = function(size) {\n      return allocUnsafe(size);\n    };\n    function fromString(string, encoding) {\n      if (typeof encoding !== \"string\" || encoding === \"\") {\n        encoding = \"utf8\";\n      }\n      if (!Buffer2.isEncoding(encoding)) {\n        throw new TypeError(\"Unknown encoding: \" + encoding);\n      }\n      var length = byteLength(string, encoding) | 0;\n      var buf = createBuffer(length);\n      var actual = buf.write(string, encoding);\n      if (actual !== length) {\n        buf = buf.slice(0, actual);\n      }\n      return buf;\n    }\n    function fromArrayLike(array) {\n      var length = array.length < 0 ? 0 : checked(array.length) | 0;\n      var buf = createBuffer(length);\n      for (var i = 0; i < length; i += 1) {\n        buf[i] = array[i] & 255;\n      }\n      return buf;\n    }\n    function fromArrayView(arrayView) {\n      if (isInstance(arrayView, Uint8Array)) {\n        var copy = new Uint8Array(arrayView);\n        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);\n      }\n      return fromArrayLike(arrayView);\n    }\n    function fromArrayBuffer(array, byteOffset, length) {\n      if (byteOffset < 0 || array.byteLength < byteOffset) {\n        throw new RangeError('\"offset\" is outside of buffer bounds');\n      }\n      if (array.byteLength < byteOffset + (length || 0)) {\n        throw new RangeError('\"length\" is outside of buffer bounds');\n      }\n      var buf;\n      if (byteOffset === void 0 && length === void 0) {\n        buf = new Uint8Array(array);\n      } else if (length === void 0) {\n        buf = new Uint8Array(array, byteOffset);\n      } else {\n        buf = new Uint8Array(array, byteOffset, length);\n      }\n      Object.setPrototypeOf(buf, Buffer2.prototype);\n      return buf;\n    }\n    function fromObject(obj) {\n      if (Buffer2.isBuffer(obj)) {\n        var len = checked(obj.length) | 0;\n        var buf = createBuffer(len);\n        if (buf.length === 0) {\n          return buf;\n        }\n        obj.copy(buf, 0, 0, len);\n        return buf;\n      }\n      if (obj.length !== void 0) {\n        if (typeof obj.length !== \"number\" || numberIsNaN(obj.length)) {\n          return createBuffer(0);\n        }\n        return fromArrayLike(obj);\n      }\n      if (obj.type === \"Buffer\" && Array.isArray(obj.data)) {\n        return fromArrayLike(obj.data);\n      }\n    }\n    function checked(length) {\n      if (length >= K_MAX_LENGTH) {\n        throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + K_MAX_LENGTH.toString(16) + \" bytes\");\n      }\n      return length | 0;\n    }\n    function SlowBuffer(length) {\n      if (+length != length) {\n        length = 0;\n      }\n      return Buffer2.alloc(+length);\n    }\n    Buffer2.isBuffer = function isBuffer(b) {\n      return b != null && b._isBuffer === true && b !== Buffer2.prototype;\n    };\n    Buffer2.compare = function compare(a, b) {\n      if (isInstance(a, Uint8Array)) a = Buffer2.from(a, a.offset, a.byteLength);\n      if (isInstance(b, Uint8Array)) b = Buffer2.from(b, b.offset, b.byteLength);\n      if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {\n        throw new TypeError(\n          'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n        );\n      }\n      if (a === b) return 0;\n      var x = a.length;\n      var y = b.length;\n      for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n        if (a[i] !== b[i]) {\n          x = a[i];\n          y = b[i];\n          break;\n        }\n      }\n      if (x < y) return -1;\n      if (y < x) return 1;\n      return 0;\n    };\n    Buffer2.isEncoding = function isEncoding(encoding) {\n      switch (String(encoding).toLowerCase()) {\n        case \"hex\":\n        case \"utf8\":\n        case \"utf-8\":\n        case \"ascii\":\n        case \"latin1\":\n        case \"binary\":\n        case \"base64\":\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n          return true;\n        default:\n          return false;\n      }\n    };\n    Buffer2.concat = function concat(list, length) {\n      if (!Array.isArray(list)) {\n        throw new TypeError('\"list\" argument must be an Array of Buffers');\n      }\n      if (list.length === 0) {\n        return Buffer2.alloc(0);\n      }\n      var i;\n      if (length === void 0) {\n        length = 0;\n        for (i = 0; i < list.length; ++i) {\n          length += list[i].length;\n        }\n      }\n      var buffer2 = Buffer2.allocUnsafe(length);\n      var pos = 0;\n      for (i = 0; i < list.length; ++i) {\n        var buf = list[i];\n        if (isInstance(buf, Uint8Array)) {\n          if (pos + buf.length > buffer2.length) {\n            Buffer2.from(buf).copy(buffer2, pos);\n          } else {\n            Uint8Array.prototype.set.call(\n              buffer2,\n              buf,\n              pos\n            );\n          }\n        } else if (!Buffer2.isBuffer(buf)) {\n          throw new TypeError('\"list\" argument must be an Array of Buffers');\n        } else {\n          buf.copy(buffer2, pos);\n        }\n        pos += buf.length;\n      }\n      return buffer2;\n    };\n    function byteLength(string, encoding) {\n      if (Buffer2.isBuffer(string)) {\n        return string.length;\n      }\n      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n        return string.byteLength;\n      }\n      if (typeof string !== \"string\") {\n        throw new TypeError(\n          'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string\n        );\n      }\n      var len = string.length;\n      var mustMatch = arguments.length > 2 && arguments[2] === true;\n      if (!mustMatch && len === 0) return 0;\n      var loweredCase = false;\n      for (; ; ) {\n        switch (encoding) {\n          case \"ascii\":\n          case \"latin1\":\n          case \"binary\":\n            return len;\n          case \"utf8\":\n          case \"utf-8\":\n            return utf8ToBytes(string).length;\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return len * 2;\n          case \"hex\":\n            return len >>> 1;\n          case \"base64\":\n            return base64ToBytes(string).length;\n          default:\n            if (loweredCase) {\n              return mustMatch ? -1 : utf8ToBytes(string).length;\n            }\n            encoding = (\"\" + encoding).toLowerCase();\n            loweredCase = true;\n        }\n      }\n    }\n    Buffer2.byteLength = byteLength;\n    function slowToString(encoding, start, end) {\n      var loweredCase = false;\n      if (start === void 0 || start < 0) {\n        start = 0;\n      }\n      if (start > this.length) {\n        return \"\";\n      }\n      if (end === void 0 || end > this.length) {\n        end = this.length;\n      }\n      if (end <= 0) {\n        return \"\";\n      }\n      end >>>= 0;\n      start >>>= 0;\n      if (end <= start) {\n        return \"\";\n      }\n      if (!encoding) encoding = \"utf8\";\n      while (true) {\n        switch (encoding) {\n          case \"hex\":\n            return hexSlice(this, start, end);\n          case \"utf8\":\n          case \"utf-8\":\n            return utf8Slice(this, start, end);\n          case \"ascii\":\n            return asciiSlice(this, start, end);\n          case \"latin1\":\n          case \"binary\":\n            return latin1Slice(this, start, end);\n          case \"base64\":\n            return base64Slice(this, start, end);\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return utf16leSlice(this, start, end);\n          default:\n            if (loweredCase) throw new TypeError(\"Unknown encoding: \" + encoding);\n            encoding = (encoding + \"\").toLowerCase();\n            loweredCase = true;\n        }\n      }\n    }\n    Buffer2.prototype._isBuffer = true;\n    function swap(b, n, m) {\n      var i = b[n];\n      b[n] = b[m];\n      b[m] = i;\n    }\n    Buffer2.prototype.swap16 = function swap16() {\n      var len = this.length;\n      if (len % 2 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n      }\n      for (var i = 0; i < len; i += 2) {\n        swap(this, i, i + 1);\n      }\n      return this;\n    };\n    Buffer2.prototype.swap32 = function swap32() {\n      var len = this.length;\n      if (len % 4 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n      }\n      for (var i = 0; i < len; i += 4) {\n        swap(this, i, i + 3);\n        swap(this, i + 1, i + 2);\n      }\n      return this;\n    };\n    Buffer2.prototype.swap64 = function swap64() {\n      var len = this.length;\n      if (len % 8 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n      }\n      for (var i = 0; i < len; i += 8) {\n        swap(this, i, i + 7);\n        swap(this, i + 1, i + 6);\n        swap(this, i + 2, i + 5);\n        swap(this, i + 3, i + 4);\n      }\n      return this;\n    };\n    Buffer2.prototype.toString = function toString() {\n      var length = this.length;\n      if (length === 0) return \"\";\n      if (arguments.length === 0) return utf8Slice(this, 0, length);\n      return slowToString.apply(this, arguments);\n    };\n    Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;\n    Buffer2.prototype.equals = function equals(b) {\n      if (!Buffer2.isBuffer(b)) throw new TypeError(\"Argument must be a Buffer\");\n      if (this === b) return true;\n      return Buffer2.compare(this, b) === 0;\n    };\n    Buffer2.prototype.inspect = function inspect() {\n      var str = \"\";\n      var max = exports.INSPECT_MAX_BYTES;\n      str = this.toString(\"hex\", 0, max).replace(/(.{2})/g, \"$1 \").trim();\n      if (this.length > max) str += \" ... \";\n      return \"<Buffer \" + str + \">\";\n    };\n    if (customInspectSymbol) {\n      Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;\n    }\n    Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n      if (isInstance(target, Uint8Array)) {\n        target = Buffer2.from(target, target.offset, target.byteLength);\n      }\n      if (!Buffer2.isBuffer(target)) {\n        throw new TypeError(\n          'The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target\n        );\n      }\n      if (start === void 0) {\n        start = 0;\n      }\n      if (end === void 0) {\n        end = target ? target.length : 0;\n      }\n      if (thisStart === void 0) {\n        thisStart = 0;\n      }\n      if (thisEnd === void 0) {\n        thisEnd = this.length;\n      }\n      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n        throw new RangeError(\"out of range index\");\n      }\n      if (thisStart >= thisEnd && start >= end) {\n        return 0;\n      }\n      if (thisStart >= thisEnd) {\n        return -1;\n      }\n      if (start >= end) {\n        return 1;\n      }\n      start >>>= 0;\n      end >>>= 0;\n      thisStart >>>= 0;\n      thisEnd >>>= 0;\n      if (this === target) return 0;\n      var x = thisEnd - thisStart;\n      var y = end - start;\n      var len = Math.min(x, y);\n      var thisCopy = this.slice(thisStart, thisEnd);\n      var targetCopy = target.slice(start, end);\n      for (var i = 0; i < len; ++i) {\n        if (thisCopy[i] !== targetCopy[i]) {\n          x = thisCopy[i];\n          y = targetCopy[i];\n          break;\n        }\n      }\n      if (x < y) return -1;\n      if (y < x) return 1;\n      return 0;\n    };\n    function bidirectionalIndexOf(buffer2, val, byteOffset, encoding, dir) {\n      if (buffer2.length === 0) return -1;\n      if (typeof byteOffset === \"string\") {\n        encoding = byteOffset;\n        byteOffset = 0;\n      } else if (byteOffset > 2147483647) {\n        byteOffset = 2147483647;\n      } else if (byteOffset < -2147483648) {\n        byteOffset = -2147483648;\n      }\n      byteOffset = +byteOffset;\n      if (numberIsNaN(byteOffset)) {\n        byteOffset = dir ? 0 : buffer2.length - 1;\n      }\n      if (byteOffset < 0) byteOffset = buffer2.length + byteOffset;\n      if (byteOffset >= buffer2.length) {\n        if (dir) return -1;\n        else byteOffset = buffer2.length - 1;\n      } else if (byteOffset < 0) {\n        if (dir) byteOffset = 0;\n        else return -1;\n      }\n      if (typeof val === \"string\") {\n        val = Buffer2.from(val, encoding);\n      }\n      if (Buffer2.isBuffer(val)) {\n        if (val.length === 0) {\n          return -1;\n        }\n        return arrayIndexOf(buffer2, val, byteOffset, encoding, dir);\n      } else if (typeof val === \"number\") {\n        val = val & 255;\n        if (typeof Uint8Array.prototype.indexOf === \"function\") {\n          if (dir) {\n            return Uint8Array.prototype.indexOf.call(buffer2, val, byteOffset);\n          } else {\n            return Uint8Array.prototype.lastIndexOf.call(buffer2, val, byteOffset);\n          }\n        }\n        return arrayIndexOf(buffer2, [val], byteOffset, encoding, dir);\n      }\n      throw new TypeError(\"val must be string, number or Buffer\");\n    }\n    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n      var indexSize = 1;\n      var arrLength = arr.length;\n      var valLength = val.length;\n      if (encoding !== void 0) {\n        encoding = String(encoding).toLowerCase();\n        if (encoding === \"ucs2\" || encoding === \"ucs-2\" || encoding === \"utf16le\" || encoding === \"utf-16le\") {\n          if (arr.length < 2 || val.length < 2) {\n            return -1;\n          }\n          indexSize = 2;\n          arrLength /= 2;\n          valLength /= 2;\n          byteOffset /= 2;\n        }\n      }\n      function read(buf, i2) {\n        if (indexSize === 1) {\n          return buf[i2];\n        } else {\n          return buf.readUInt16BE(i2 * indexSize);\n        }\n      }\n      var i;\n      if (dir) {\n        var foundIndex = -1;\n        for (i = byteOffset; i < arrLength; i++) {\n          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n            if (foundIndex === -1) foundIndex = i;\n            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n          } else {\n            if (foundIndex !== -1) i -= i - foundIndex;\n            foundIndex = -1;\n          }\n        }\n      } else {\n        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n        for (i = byteOffset; i >= 0; i--) {\n          var found = true;\n          for (var j = 0; j < valLength; j++) {\n            if (read(arr, i + j) !== read(val, j)) {\n              found = false;\n              break;\n            }\n          }\n          if (found) return i;\n        }\n      }\n      return -1;\n    }\n    Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {\n      return this.indexOf(val, byteOffset, encoding) !== -1;\n    };\n    Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n    };\n    Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n    };\n    function hexWrite(buf, string, offset, length) {\n      offset = Number(offset) || 0;\n      var remaining = buf.length - offset;\n      if (!length) {\n        length = remaining;\n      } else {\n        length = Number(length);\n        if (length > remaining) {\n          length = remaining;\n        }\n      }\n      var strLen = string.length;\n      if (length > strLen / 2) {\n        length = strLen / 2;\n      }\n      for (var i = 0; i < length; ++i) {\n        var parsed = parseInt(string.substr(i * 2, 2), 16);\n        if (numberIsNaN(parsed)) return i;\n        buf[offset + i] = parsed;\n      }\n      return i;\n    }\n    function utf8Write(buf, string, offset, length) {\n      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n    }\n    function asciiWrite(buf, string, offset, length) {\n      return blitBuffer(asciiToBytes(string), buf, offset, length);\n    }\n    function base64Write(buf, string, offset, length) {\n      return blitBuffer(base64ToBytes(string), buf, offset, length);\n    }\n    function ucs2Write(buf, string, offset, length) {\n      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n    }\n    Buffer2.prototype.write = function write(string, offset, length, encoding) {\n      if (offset === void 0) {\n        encoding = \"utf8\";\n        length = this.length;\n        offset = 0;\n      } else if (length === void 0 && typeof offset === \"string\") {\n        encoding = offset;\n        length = this.length;\n        offset = 0;\n      } else if (isFinite(offset)) {\n        offset = offset >>> 0;\n        if (isFinite(length)) {\n          length = length >>> 0;\n          if (encoding === void 0) encoding = \"utf8\";\n        } else {\n          encoding = length;\n          length = void 0;\n        }\n      } else {\n        throw new Error(\n          \"Buffer.write(string, encoding, offset[, length]) is no longer supported\"\n        );\n      }\n      var remaining = this.length - offset;\n      if (length === void 0 || length > remaining) length = remaining;\n      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n        throw new RangeError(\"Attempt to write outside buffer bounds\");\n      }\n      if (!encoding) encoding = \"utf8\";\n      var loweredCase = false;\n      for (; ; ) {\n        switch (encoding) {\n          case \"hex\":\n            return hexWrite(this, string, offset, length);\n          case \"utf8\":\n          case \"utf-8\":\n            return utf8Write(this, string, offset, length);\n          case \"ascii\":\n          case \"latin1\":\n          case \"binary\":\n            return asciiWrite(this, string, offset, length);\n          case \"base64\":\n            return base64Write(this, string, offset, length);\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return ucs2Write(this, string, offset, length);\n          default:\n            if (loweredCase) throw new TypeError(\"Unknown encoding: \" + encoding);\n            encoding = (\"\" + encoding).toLowerCase();\n            loweredCase = true;\n        }\n      }\n    };\n    Buffer2.prototype.toJSON = function toJSON() {\n      return {\n        type: \"Buffer\",\n        data: Array.prototype.slice.call(this._arr || this, 0)\n      };\n    };\n    function base64Slice(buf, start, end) {\n      if (start === 0 && end === buf.length) {\n        return base64.fromByteArray(buf);\n      } else {\n        return base64.fromByteArray(buf.slice(start, end));\n      }\n    }\n    function utf8Slice(buf, start, end) {\n      end = Math.min(buf.length, end);\n      var res = [];\n      var i = start;\n      while (i < end) {\n        var firstByte = buf[i];\n        var codePoint = null;\n        var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\n        if (i + bytesPerSequence <= end) {\n          var secondByte, thirdByte, fourthByte, tempCodePoint;\n          switch (bytesPerSequence) {\n            case 1:\n              if (firstByte < 128) {\n                codePoint = firstByte;\n              }\n              break;\n            case 2:\n              secondByte = buf[i + 1];\n              if ((secondByte & 192) === 128) {\n                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\n                if (tempCodePoint > 127) {\n                  codePoint = tempCodePoint;\n                }\n              }\n              break;\n            case 3:\n              secondByte = buf[i + 1];\n              thirdByte = buf[i + 2];\n              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\n                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\n                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\n                  codePoint = tempCodePoint;\n                }\n              }\n              break;\n            case 4:\n              secondByte = buf[i + 1];\n              thirdByte = buf[i + 2];\n              fourthByte = buf[i + 3];\n              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\n                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\n                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\n                  codePoint = tempCodePoint;\n                }\n              }\n          }\n        }\n        if (codePoint === null) {\n          codePoint = 65533;\n          bytesPerSequence = 1;\n        } else if (codePoint > 65535) {\n          codePoint -= 65536;\n          res.push(codePoint >>> 10 & 1023 | 55296);\n          codePoint = 56320 | codePoint & 1023;\n        }\n        res.push(codePoint);\n        i += bytesPerSequence;\n      }\n      return decodeCodePointsArray(res);\n    }\n    var MAX_ARGUMENTS_LENGTH = 4096;\n    function decodeCodePointsArray(codePoints) {\n      var len = codePoints.length;\n      if (len <= MAX_ARGUMENTS_LENGTH) {\n        return String.fromCharCode.apply(String, codePoints);\n      }\n      var res = \"\";\n      var i = 0;\n      while (i < len) {\n        res += String.fromCharCode.apply(\n          String,\n          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n        );\n      }\n      return res;\n    }\n    function asciiSlice(buf, start, end) {\n      var ret = \"\";\n      end = Math.min(buf.length, end);\n      for (var i = start; i < end; ++i) {\n        ret += String.fromCharCode(buf[i] & 127);\n      }\n      return ret;\n    }\n    function latin1Slice(buf, start, end) {\n      var ret = \"\";\n      end = Math.min(buf.length, end);\n      for (var i = start; i < end; ++i) {\n        ret += String.fromCharCode(buf[i]);\n      }\n      return ret;\n    }\n    function hexSlice(buf, start, end) {\n      var len = buf.length;\n      if (!start || start < 0) start = 0;\n      if (!end || end < 0 || end > len) end = len;\n      var out = \"\";\n      for (var i = start; i < end; ++i) {\n        out += hexSliceLookupTable[buf[i]];\n      }\n      return out;\n    }\n    function utf16leSlice(buf, start, end) {\n      var bytes = buf.slice(start, end);\n      var res = \"\";\n      for (var i = 0; i < bytes.length - 1; i += 2) {\n        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n      }\n      return res;\n    }\n    Buffer2.prototype.slice = function slice(start, end) {\n      var len = this.length;\n      start = ~~start;\n      end = end === void 0 ? len : ~~end;\n      if (start < 0) {\n        start += len;\n        if (start < 0) start = 0;\n      } else if (start > len) {\n        start = len;\n      }\n      if (end < 0) {\n        end += len;\n        if (end < 0) end = 0;\n      } else if (end > len) {\n        end = len;\n      }\n      if (end < start) end = start;\n      var newBuf = this.subarray(start, end);\n      Object.setPrototypeOf(newBuf, Buffer2.prototype);\n      return newBuf;\n    };\n    function checkOffset(offset, ext, length) {\n      if (offset % 1 !== 0 || offset < 0) throw new RangeError(\"offset is not uint\");\n      if (offset + ext > length) throw new RangeError(\"Trying to access beyond buffer length\");\n    }\n    Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) checkOffset(offset, byteLength2, this.length);\n      var val = this[offset];\n      var mul = 1;\n      var i = 0;\n      while (++i < byteLength2 && (mul *= 256)) {\n        val += this[offset + i] * mul;\n      }\n      return val;\n    };\n    Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) {\n        checkOffset(offset, byteLength2, this.length);\n      }\n      var val = this[offset + --byteLength2];\n      var mul = 1;\n      while (byteLength2 > 0 && (mul *= 256)) {\n        val += this[offset + --byteLength2] * mul;\n      }\n      return val;\n    };\n    Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 1, this.length);\n      return this[offset];\n    };\n    Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 2, this.length);\n      return this[offset] | this[offset + 1] << 8;\n    };\n    Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 2, this.length);\n      return this[offset] << 8 | this[offset + 1];\n    };\n    Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 4, this.length);\n      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;\n    };\n    Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 4, this.length);\n      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n    };\n    Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) checkOffset(offset, byteLength2, this.length);\n      var val = this[offset];\n      var mul = 1;\n      var i = 0;\n      while (++i < byteLength2 && (mul *= 256)) {\n        val += this[offset + i] * mul;\n      }\n      mul *= 128;\n      if (val >= mul) val -= Math.pow(2, 8 * byteLength2);\n      return val;\n    };\n    Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) checkOffset(offset, byteLength2, this.length);\n      var i = byteLength2;\n      var mul = 1;\n      var val = this[offset + --i];\n      while (i > 0 && (mul *= 256)) {\n        val += this[offset + --i] * mul;\n      }\n      mul *= 128;\n      if (val >= mul) val -= Math.pow(2, 8 * byteLength2);\n      return val;\n    };\n    Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 1, this.length);\n      if (!(this[offset] & 128)) return this[offset];\n      return (255 - this[offset] + 1) * -1;\n    };\n    Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 2, this.length);\n      var val = this[offset] | this[offset + 1] << 8;\n      return val & 32768 ? val | 4294901760 : val;\n    };\n    Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 2, this.length);\n      var val = this[offset + 1] | this[offset] << 8;\n      return val & 32768 ? val | 4294901760 : val;\n    };\n    Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 4, this.length);\n      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n    };\n    Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 4, this.length);\n      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n    };\n    Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 4, this.length);\n      return ieee7542.read(this, offset, true, 23, 4);\n    };\n    Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 4, this.length);\n      return ieee7542.read(this, offset, false, 23, 4);\n    };\n    Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 8, this.length);\n      return ieee7542.read(this, offset, true, 52, 8);\n    };\n    Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert) checkOffset(offset, 8, this.length);\n      return ieee7542.read(this, offset, false, 52, 8);\n    };\n    function checkInt(buf, value, offset, ext, max, min) {\n      if (!Buffer2.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n      if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n      if (offset + ext > buf.length) throw new RangeError(\"Index out of range\");\n    }\n    Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) {\n        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n        checkInt(this, value, offset, byteLength2, maxBytes, 0);\n      }\n      var mul = 1;\n      var i = 0;\n      this[offset] = value & 255;\n      while (++i < byteLength2 && (mul *= 256)) {\n        this[offset + i] = value / mul & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) {\n        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n        checkInt(this, value, offset, byteLength2, maxBytes, 0);\n      }\n      var i = byteLength2 - 1;\n      var mul = 1;\n      this[offset + i] = value & 255;\n      while (--i >= 0 && (mul *= 256)) {\n        this[offset + i] = value / mul & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) checkInt(this, value, offset, 1, 255, 0);\n      this[offset] = value & 255;\n      return offset + 1;\n    };\n    Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);\n      this[offset] = value & 255;\n      this[offset + 1] = value >>> 8;\n      return offset + 2;\n    };\n    Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);\n      this[offset] = value >>> 8;\n      this[offset + 1] = value & 255;\n      return offset + 2;\n    };\n    Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);\n      this[offset + 3] = value >>> 24;\n      this[offset + 2] = value >>> 16;\n      this[offset + 1] = value >>> 8;\n      this[offset] = value & 255;\n      return offset + 4;\n    };\n    Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);\n      this[offset] = value >>> 24;\n      this[offset + 1] = value >>> 16;\n      this[offset + 2] = value >>> 8;\n      this[offset + 3] = value & 255;\n      return offset + 4;\n    };\n    Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        var limit = Math.pow(2, 8 * byteLength2 - 1);\n        checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n      }\n      var i = 0;\n      var mul = 1;\n      var sub = 0;\n      this[offset] = value & 255;\n      while (++i < byteLength2 && (mul *= 256)) {\n        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n          sub = 1;\n        }\n        this[offset + i] = (value / mul >> 0) - sub & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        var limit = Math.pow(2, 8 * byteLength2 - 1);\n        checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n      }\n      var i = byteLength2 - 1;\n      var mul = 1;\n      var sub = 0;\n      this[offset + i] = value & 255;\n      while (--i >= 0 && (mul *= 256)) {\n        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n          sub = 1;\n        }\n        this[offset + i] = (value / mul >> 0) - sub & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) checkInt(this, value, offset, 1, 127, -128);\n      if (value < 0) value = 255 + value + 1;\n      this[offset] = value & 255;\n      return offset + 1;\n    };\n    Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);\n      this[offset] = value & 255;\n      this[offset + 1] = value >>> 8;\n      return offset + 2;\n    };\n    Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);\n      this[offset] = value >>> 8;\n      this[offset + 1] = value & 255;\n      return offset + 2;\n    };\n    Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);\n      this[offset] = value & 255;\n      this[offset + 1] = value >>> 8;\n      this[offset + 2] = value >>> 16;\n      this[offset + 3] = value >>> 24;\n      return offset + 4;\n    };\n    Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);\n      if (value < 0) value = 4294967295 + value + 1;\n      this[offset] = value >>> 24;\n      this[offset + 1] = value >>> 16;\n      this[offset + 2] = value >>> 8;\n      this[offset + 3] = value & 255;\n      return offset + 4;\n    };\n    function checkIEEE754(buf, value, offset, ext, max, min) {\n      if (offset + ext > buf.length) throw new RangeError(\"Index out of range\");\n      if (offset < 0) throw new RangeError(\"Index out of range\");\n    }\n    function writeFloat(buf, value, offset, littleEndian, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        checkIEEE754(buf, value, offset, 4);\n      }\n      ieee7542.write(buf, value, offset, littleEndian, 23, 4);\n      return offset + 4;\n    }\n    Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n      return writeFloat(this, value, offset, true, noAssert);\n    };\n    Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n      return writeFloat(this, value, offset, false, noAssert);\n    };\n    function writeDouble(buf, value, offset, littleEndian, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        checkIEEE754(buf, value, offset, 8);\n      }\n      ieee7542.write(buf, value, offset, littleEndian, 52, 8);\n      return offset + 8;\n    }\n    Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n      return writeDouble(this, value, offset, true, noAssert);\n    };\n    Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n      return writeDouble(this, value, offset, false, noAssert);\n    };\n    Buffer2.prototype.copy = function copy(target, targetStart, start, end) {\n      if (!Buffer2.isBuffer(target)) throw new TypeError(\"argument should be a Buffer\");\n      if (!start) start = 0;\n      if (!end && end !== 0) end = this.length;\n      if (targetStart >= target.length) targetStart = target.length;\n      if (!targetStart) targetStart = 0;\n      if (end > 0 && end < start) end = start;\n      if (end === start) return 0;\n      if (target.length === 0 || this.length === 0) return 0;\n      if (targetStart < 0) {\n        throw new RangeError(\"targetStart out of bounds\");\n      }\n      if (start < 0 || start >= this.length) throw new RangeError(\"Index out of range\");\n      if (end < 0) throw new RangeError(\"sourceEnd out of bounds\");\n      if (end > this.length) end = this.length;\n      if (target.length - targetStart < end - start) {\n        end = target.length - targetStart + start;\n      }\n      var len = end - start;\n      if (this === target && typeof Uint8Array.prototype.copyWithin === \"function\") {\n        this.copyWithin(targetStart, start, end);\n      } else {\n        Uint8Array.prototype.set.call(\n          target,\n          this.subarray(start, end),\n          targetStart\n        );\n      }\n      return len;\n    };\n    Buffer2.prototype.fill = function fill(val, start, end, encoding) {\n      if (typeof val === \"string\") {\n        if (typeof start === \"string\") {\n          encoding = start;\n          start = 0;\n          end = this.length;\n        } else if (typeof end === \"string\") {\n          encoding = end;\n          end = this.length;\n        }\n        if (encoding !== void 0 && typeof encoding !== \"string\") {\n          throw new TypeError(\"encoding must be a string\");\n        }\n        if (typeof encoding === \"string\" && !Buffer2.isEncoding(encoding)) {\n          throw new TypeError(\"Unknown encoding: \" + encoding);\n        }\n        if (val.length === 1) {\n          var code = val.charCodeAt(0);\n          if (encoding === \"utf8\" && code < 128 || encoding === \"latin1\") {\n            val = code;\n          }\n        }\n      } else if (typeof val === \"number\") {\n        val = val & 255;\n      } else if (typeof val === \"boolean\") {\n        val = Number(val);\n      }\n      if (start < 0 || this.length < start || this.length < end) {\n        throw new RangeError(\"Out of range index\");\n      }\n      if (end <= start) {\n        return this;\n      }\n      start = start >>> 0;\n      end = end === void 0 ? this.length : end >>> 0;\n      if (!val) val = 0;\n      var i;\n      if (typeof val === \"number\") {\n        for (i = start; i < end; ++i) {\n          this[i] = val;\n        }\n      } else {\n        var bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);\n        var len = bytes.length;\n        if (len === 0) {\n          throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n        }\n        for (i = 0; i < end - start; ++i) {\n          this[i + start] = bytes[i % len];\n        }\n      }\n      return this;\n    };\n    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\n    function base64clean(str) {\n      str = str.split(\"=\")[0];\n      str = str.trim().replace(INVALID_BASE64_RE, \"\");\n      if (str.length < 2) return \"\";\n      while (str.length % 4 !== 0) {\n        str = str + \"=\";\n      }\n      return str;\n    }\n    function utf8ToBytes(string, units) {\n      units = units || Infinity;\n      var codePoint;\n      var length = string.length;\n      var leadSurrogate = null;\n      var bytes = [];\n      for (var i = 0; i < length; ++i) {\n        codePoint = string.charCodeAt(i);\n        if (codePoint > 55295 && codePoint < 57344) {\n          if (!leadSurrogate) {\n            if (codePoint > 56319) {\n              if ((units -= 3) > -1) bytes.push(239, 191, 189);\n              continue;\n            } else if (i + 1 === length) {\n              if ((units -= 3) > -1) bytes.push(239, 191, 189);\n              continue;\n            }\n            leadSurrogate = codePoint;\n            continue;\n          }\n          if (codePoint < 56320) {\n            if ((units -= 3) > -1) bytes.push(239, 191, 189);\n            leadSurrogate = codePoint;\n            continue;\n          }\n          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;\n        } else if (leadSurrogate) {\n          if ((units -= 3) > -1) bytes.push(239, 191, 189);\n        }\n        leadSurrogate = null;\n        if (codePoint < 128) {\n          if ((units -= 1) < 0) break;\n          bytes.push(codePoint);\n        } else if (codePoint < 2048) {\n          if ((units -= 2) < 0) break;\n          bytes.push(\n            codePoint >> 6 | 192,\n            codePoint & 63 | 128\n          );\n        } else if (codePoint < 65536) {\n          if ((units -= 3) < 0) break;\n          bytes.push(\n            codePoint >> 12 | 224,\n            codePoint >> 6 & 63 | 128,\n            codePoint & 63 | 128\n          );\n        } else if (codePoint < 1114112) {\n          if ((units -= 4) < 0) break;\n          bytes.push(\n            codePoint >> 18 | 240,\n            codePoint >> 12 & 63 | 128,\n            codePoint >> 6 & 63 | 128,\n            codePoint & 63 | 128\n          );\n        } else {\n          throw new Error(\"Invalid code point\");\n        }\n      }\n      return bytes;\n    }\n    function asciiToBytes(str) {\n      var byteArray = [];\n      for (var i = 0; i < str.length; ++i) {\n        byteArray.push(str.charCodeAt(i) & 255);\n      }\n      return byteArray;\n    }\n    function utf16leToBytes(str, units) {\n      var c, hi, lo;\n      var byteArray = [];\n      for (var i = 0; i < str.length; ++i) {\n        if ((units -= 2) < 0) break;\n        c = str.charCodeAt(i);\n        hi = c >> 8;\n        lo = c % 256;\n        byteArray.push(lo);\n        byteArray.push(hi);\n      }\n      return byteArray;\n    }\n    function base64ToBytes(str) {\n      return base64.toByteArray(base64clean(str));\n    }\n    function blitBuffer(src, dst, offset, length) {\n      for (var i = 0; i < length; ++i) {\n        if (i + offset >= dst.length || i >= src.length) break;\n        dst[i + offset] = src[i];\n      }\n      return i;\n    }\n    function isInstance(obj, type2) {\n      return obj instanceof type2 || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type2.name;\n    }\n    function numberIsNaN(obj) {\n      return obj !== obj;\n    }\n    var hexSliceLookupTable = function() {\n      var alphabet = \"0123456789abcdef\";\n      var table = new Array(256);\n      for (var i = 0; i < 16; ++i) {\n        var i16 = i * 16;\n        for (var j = 0; j < 16; ++j) {\n          table[i16 + j] = alphabet[i] + alphabet[j];\n        }\n      }\n      return table;\n    }();\n  })(buffer);\n  return buffer;\n}\nvar util = {};\nvar types = {};\nvar shams$1;\nvar hasRequiredShams$1;\nfunction requireShams$1() {\n  if (hasRequiredShams$1) return shams$1;\n  hasRequiredShams$1 = 1;\n  shams$1 = function hasSymbols2() {\n    if (typeof Symbol !== \"function\" || typeof Object.getOwnPropertySymbols !== \"function\") {\n      return false;\n    }\n    if (typeof Symbol.iterator === \"symbol\") {\n      return true;\n    }\n    var obj = {};\n    var sym = Symbol(\"test\");\n    var symObj = Object(sym);\n    if (typeof sym === \"string\") {\n      return false;\n    }\n    if (Object.prototype.toString.call(sym) !== \"[object Symbol]\") {\n      return false;\n    }\n    if (Object.prototype.toString.call(symObj) !== \"[object Symbol]\") {\n      return false;\n    }\n    var symVal = 42;\n    obj[sym] = symVal;\n    for (sym in obj) {\n      return false;\n    }\n    if (typeof Object.keys === \"function\" && Object.keys(obj).length !== 0) {\n      return false;\n    }\n    if (typeof Object.getOwnPropertyNames === \"function\" && Object.getOwnPropertyNames(obj).length !== 0) {\n      return false;\n    }\n    var syms = Object.getOwnPropertySymbols(obj);\n    if (syms.length !== 1 || syms[0] !== sym) {\n      return false;\n    }\n    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {\n      return false;\n    }\n    if (typeof Object.getOwnPropertyDescriptor === \"function\") {\n      var descriptor = Object.getOwnPropertyDescriptor(obj, sym);\n      if (descriptor.value !== symVal || descriptor.enumerable !== true) {\n        return false;\n      }\n    }\n    return true;\n  };\n  return shams$1;\n}\nvar shams;\nvar hasRequiredShams;\nfunction requireShams() {\n  if (hasRequiredShams) return shams;\n  hasRequiredShams = 1;\n  var hasSymbols2 = requireShams$1();\n  shams = function hasToStringTagShams() {\n    return hasSymbols2() && !!Symbol.toStringTag;\n  };\n  return shams;\n}\nvar esErrors;\nvar hasRequiredEsErrors;\nfunction requireEsErrors() {\n  if (hasRequiredEsErrors) return esErrors;\n  hasRequiredEsErrors = 1;\n  esErrors = Error;\n  return esErrors;\n}\nvar _eval;\nvar hasRequired_eval;\nfunction require_eval() {\n  if (hasRequired_eval) return _eval;\n  hasRequired_eval = 1;\n  _eval = EvalError;\n  return _eval;\n}\nvar range;\nvar hasRequiredRange;\nfunction requireRange() {\n  if (hasRequiredRange) return range;\n  hasRequiredRange = 1;\n  range = RangeError;\n  return range;\n}\nvar ref;\nvar hasRequiredRef;\nfunction requireRef() {\n  if (hasRequiredRef) return ref;\n  hasRequiredRef = 1;\n  ref = ReferenceError;\n  return ref;\n}\nvar syntax;\nvar hasRequiredSyntax;\nfunction requireSyntax() {\n  if (hasRequiredSyntax) return syntax;\n  hasRequiredSyntax = 1;\n  syntax = SyntaxError;\n  return syntax;\n}\nvar type;\nvar hasRequiredType;\nfunction requireType() {\n  if (hasRequiredType) return type;\n  hasRequiredType = 1;\n  type = TypeError;\n  return type;\n}\nvar uri;\nvar hasRequiredUri;\nfunction requireUri() {\n  if (hasRequiredUri) return uri;\n  hasRequiredUri = 1;\n  uri = URIError;\n  return uri;\n}\nvar hasSymbols;\nvar hasRequiredHasSymbols;\nfunction requireHasSymbols() {\n  if (hasRequiredHasSymbols) return hasSymbols;\n  hasRequiredHasSymbols = 1;\n  var origSymbol = typeof Symbol !== \"undefined\" && Symbol;\n  var hasSymbolSham = requireShams$1();\n  hasSymbols = function hasNativeSymbols() {\n    if (typeof origSymbol !== \"function\") {\n      return false;\n    }\n    if (typeof Symbol !== \"function\") {\n      return false;\n    }\n    if (typeof origSymbol(\"foo\") !== \"symbol\") {\n      return false;\n    }\n    if (typeof Symbol(\"bar\") !== \"symbol\") {\n      return false;\n    }\n    return hasSymbolSham();\n  };\n  return hasSymbols;\n}\nvar hasProto;\nvar hasRequiredHasProto;\nfunction requireHasProto() {\n  if (hasRequiredHasProto) return hasProto;\n  hasRequiredHasProto = 1;\n  var test = {\n    __proto__: null,\n    foo: {}\n  };\n  var $Object = Object;\n  hasProto = function hasProto2() {\n    return { __proto__: test }.foo === test.foo && !(test instanceof $Object);\n  };\n  return hasProto;\n}\nvar implementation;\nvar hasRequiredImplementation;\nfunction requireImplementation() {\n  if (hasRequiredImplementation) return implementation;\n  hasRequiredImplementation = 1;\n  var ERROR_MESSAGE = \"Function.prototype.bind called on incompatible \";\n  var toStr = Object.prototype.toString;\n  var max = Math.max;\n  var funcType = \"[object Function]\";\n  var concatty = function concatty2(a, b) {\n    var arr = [];\n    for (var i = 0; i < a.length; i += 1) {\n      arr[i] = a[i];\n    }\n    for (var j = 0; j < b.length; j += 1) {\n      arr[j + a.length] = b[j];\n    }\n    return arr;\n  };\n  var slicy = function slicy2(arrLike, offset) {\n    var arr = [];\n    for (var i = offset, j = 0; i < arrLike.length; i += 1, j += 1) {\n      arr[j] = arrLike[i];\n    }\n    return arr;\n  };\n  var joiny = function(arr, joiner) {\n    var str = \"\";\n    for (var i = 0; i < arr.length; i += 1) {\n      str += arr[i];\n      if (i + 1 < arr.length) {\n        str += joiner;\n      }\n    }\n    return str;\n  };\n  implementation = function bind(that) {\n    var target = this;\n    if (typeof target !== \"function\" || toStr.apply(target) !== funcType) {\n      throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slicy(arguments, 1);\n    var bound;\n    var binder = function() {\n      if (this instanceof bound) {\n        var result = target.apply(\n          this,\n          concatty(args, arguments)\n        );\n        if (Object(result) === result) {\n          return result;\n        }\n        return this;\n      }\n      return target.apply(\n        that,\n        concatty(args, arguments)\n      );\n    };\n    var boundLength = max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n      boundArgs[i] = \"$\" + i;\n    }\n    bound = Function(\"binder\", \"return function (\" + joiny(boundArgs, \",\") + \"){ return binder.apply(this,arguments); }\")(binder);\n    if (target.prototype) {\n      var Empty = function Empty2() {\n      };\n      Empty.prototype = target.prototype;\n      bound.prototype = new Empty();\n      Empty.prototype = null;\n    }\n    return bound;\n  };\n  return implementation;\n}\nvar functionBind;\nvar hasRequiredFunctionBind;\nfunction requireFunctionBind() {\n  if (hasRequiredFunctionBind) return functionBind;\n  hasRequiredFunctionBind = 1;\n  var implementation2 = requireImplementation();\n  functionBind = Function.prototype.bind || implementation2;\n  return functionBind;\n}\nvar hasown;\nvar hasRequiredHasown;\nfunction requireHasown() {\n  if (hasRequiredHasown) return hasown;\n  hasRequiredHasown = 1;\n  var call = Function.prototype.call;\n  var $hasOwn = Object.prototype.hasOwnProperty;\n  var bind = requireFunctionBind();\n  hasown = bind.call(call, $hasOwn);\n  return hasown;\n}\nvar getIntrinsic;\nvar hasRequiredGetIntrinsic;\nfunction requireGetIntrinsic() {\n  if (hasRequiredGetIntrinsic) return getIntrinsic;\n  hasRequiredGetIntrinsic = 1;\n  var undefined$1;\n  var $Error = requireEsErrors();\n  var $EvalError = require_eval();\n  var $RangeError = requireRange();\n  var $ReferenceError = requireRef();\n  var $SyntaxError = requireSyntax();\n  var $TypeError = requireType();\n  var $URIError = requireUri();\n  var $Function = Function;\n  var getEvalledConstructor = function(expressionSyntax) {\n    try {\n      return $Function('\"use strict\"; return (' + expressionSyntax + \").constructor;\")();\n    } catch (e) {\n    }\n  };\n  var $gOPD = Object.getOwnPropertyDescriptor;\n  if ($gOPD) {\n    try {\n      $gOPD({}, \"\");\n    } catch (e) {\n      $gOPD = null;\n    }\n  }\n  var throwTypeError = function() {\n    throw new $TypeError();\n  };\n  var ThrowTypeError = $gOPD ? function() {\n    try {\n      arguments.callee;\n      return throwTypeError;\n    } catch (calleeThrows) {\n      try {\n        return $gOPD(arguments, \"callee\").get;\n      } catch (gOPDthrows) {\n        return throwTypeError;\n      }\n    }\n  }() : throwTypeError;\n  var hasSymbols2 = requireHasSymbols()();\n  var hasProto2 = requireHasProto()();\n  var getProto = Object.getPrototypeOf || (hasProto2 ? function(x) {\n    return x.__proto__;\n  } : null);\n  var needsEval = {};\n  var TypedArray = typeof Uint8Array === \"undefined\" || !getProto ? undefined$1 : getProto(Uint8Array);\n  var INTRINSICS = {\n    __proto__: null,\n    \"%AggregateError%\": typeof AggregateError === \"undefined\" ? undefined$1 : AggregateError,\n    \"%Array%\": Array,\n    \"%ArrayBuffer%\": typeof ArrayBuffer === \"undefined\" ? undefined$1 : ArrayBuffer,\n    \"%ArrayIteratorPrototype%\": hasSymbols2 && getProto ? getProto([][Symbol.iterator]()) : undefined$1,\n    \"%AsyncFromSyncIteratorPrototype%\": undefined$1,\n    \"%AsyncFunction%\": needsEval,\n    \"%AsyncGenerator%\": needsEval,\n    \"%AsyncGeneratorFunction%\": needsEval,\n    \"%AsyncIteratorPrototype%\": needsEval,\n    \"%Atomics%\": typeof Atomics === \"undefined\" ? undefined$1 : Atomics,\n    \"%BigInt%\": typeof BigInt === \"undefined\" ? undefined$1 : BigInt,\n    \"%BigInt64Array%\": typeof BigInt64Array === \"undefined\" ? undefined$1 : BigInt64Array,\n    \"%BigUint64Array%\": typeof BigUint64Array === \"undefined\" ? undefined$1 : BigUint64Array,\n    \"%Boolean%\": Boolean,\n    \"%DataView%\": typeof DataView === \"undefined\" ? undefined$1 : DataView,\n    \"%Date%\": Date,\n    \"%decodeURI%\": decodeURI,\n    \"%decodeURIComponent%\": decodeURIComponent,\n    \"%encodeURI%\": encodeURI,\n    \"%encodeURIComponent%\": encodeURIComponent,\n    \"%Error%\": $Error,\n    \"%eval%\": eval,\n    // eslint-disable-line no-eval\n    \"%EvalError%\": $EvalError,\n    \"%Float32Array%\": typeof Float32Array === \"undefined\" ? undefined$1 : Float32Array,\n    \"%Float64Array%\": typeof Float64Array === \"undefined\" ? undefined$1 : Float64Array,\n    \"%FinalizationRegistry%\": typeof FinalizationRegistry === \"undefined\" ? undefined$1 : FinalizationRegistry,\n    \"%Function%\": $Function,\n    \"%GeneratorFunction%\": needsEval,\n    \"%Int8Array%\": typeof Int8Array === \"undefined\" ? undefined$1 : Int8Array,\n    \"%Int16Array%\": typeof Int16Array === \"undefined\" ? undefined$1 : Int16Array,\n    \"%Int32Array%\": typeof Int32Array === \"undefined\" ? undefined$1 : Int32Array,\n    \"%isFinite%\": isFinite,\n    \"%isNaN%\": isNaN,\n    \"%IteratorPrototype%\": hasSymbols2 && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined$1,\n    \"%JSON%\": typeof JSON === \"object\" ? JSON : undefined$1,\n    \"%Map%\": typeof Map === \"undefined\" ? undefined$1 : Map,\n    \"%MapIteratorPrototype%\": typeof Map === \"undefined\" || !hasSymbols2 || !getProto ? undefined$1 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),\n    \"%Math%\": Math,\n    \"%Number%\": Number,\n    \"%Object%\": Object,\n    \"%parseFloat%\": parseFloat,\n    \"%parseInt%\": parseInt,\n    \"%Promise%\": typeof Promise === \"undefined\" ? undefined$1 : Promise,\n    \"%Proxy%\": typeof Proxy === \"undefined\" ? undefined$1 : Proxy,\n    \"%RangeError%\": $RangeError,\n    \"%ReferenceError%\": $ReferenceError,\n    \"%Reflect%\": typeof Reflect === \"undefined\" ? undefined$1 : Reflect,\n    \"%RegExp%\": RegExp,\n    \"%Set%\": typeof Set === \"undefined\" ? undefined$1 : Set,\n    \"%SetIteratorPrototype%\": typeof Set === \"undefined\" || !hasSymbols2 || !getProto ? undefined$1 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),\n    \"%SharedArrayBuffer%\": typeof SharedArrayBuffer === \"undefined\" ? undefined$1 : SharedArrayBuffer,\n    \"%String%\": String,\n    \"%StringIteratorPrototype%\": hasSymbols2 && getProto ? getProto(\"\"[Symbol.iterator]()) : undefined$1,\n    \"%Symbol%\": hasSymbols2 ? Symbol : undefined$1,\n    \"%SyntaxError%\": $SyntaxError,\n    \"%ThrowTypeError%\": ThrowTypeError,\n    \"%TypedArray%\": TypedArray,\n    \"%TypeError%\": $TypeError,\n    \"%Uint8Array%\": typeof Uint8Array === \"undefined\" ? undefined$1 : Uint8Array,\n    \"%Uint8ClampedArray%\": typeof Uint8ClampedArray === \"undefined\" ? undefined$1 : Uint8ClampedArray,\n    \"%Uint16Array%\": typeof Uint16Array === \"undefined\" ? undefined$1 : Uint16Array,\n    \"%Uint32Array%\": typeof Uint32Array === \"undefined\" ? undefined$1 : Uint32Array,\n    \"%URIError%\": $URIError,\n    \"%WeakMap%\": typeof WeakMap === \"undefined\" ? undefined$1 : WeakMap,\n    \"%WeakRef%\": typeof WeakRef === \"undefined\" ? undefined$1 : WeakRef,\n    \"%WeakSet%\": typeof WeakSet === \"undefined\" ? undefined$1 : WeakSet\n  };\n  if (getProto) {\n    try {\n      null.error;\n    } catch (e) {\n      var errorProto = getProto(getProto(e));\n      INTRINSICS[\"%Error.prototype%\"] = errorProto;\n    }\n  }\n  var doEval = function doEval2(name) {\n    var value;\n    if (name === \"%AsyncFunction%\") {\n      value = getEvalledConstructor(\"async function () {}\");\n    } else if (name === \"%GeneratorFunction%\") {\n      value = getEvalledConstructor(\"function* () {}\");\n    } else if (name === \"%AsyncGeneratorFunction%\") {\n      value = getEvalledConstructor(\"async function* () {}\");\n    } else if (name === \"%AsyncGenerator%\") {\n      var fn = doEval2(\"%AsyncGeneratorFunction%\");\n      if (fn) {\n        value = fn.prototype;\n      }\n    } else if (name === \"%AsyncIteratorPrototype%\") {\n      var gen = doEval2(\"%AsyncGenerator%\");\n      if (gen && getProto) {\n        value = getProto(gen.prototype);\n      }\n    }\n    INTRINSICS[name] = value;\n    return value;\n  };\n  var LEGACY_ALIASES = {\n    __proto__: null,\n    \"%ArrayBufferPrototype%\": [\"ArrayBuffer\", \"prototype\"],\n    \"%ArrayPrototype%\": [\"Array\", \"prototype\"],\n    \"%ArrayProto_entries%\": [\"Array\", \"prototype\", \"entries\"],\n    \"%ArrayProto_forEach%\": [\"Array\", \"prototype\", \"forEach\"],\n    \"%ArrayProto_keys%\": [\"Array\", \"prototype\", \"keys\"],\n    \"%ArrayProto_values%\": [\"Array\", \"prototype\", \"values\"],\n    \"%AsyncFunctionPrototype%\": [\"AsyncFunction\", \"prototype\"],\n    \"%AsyncGenerator%\": [\"AsyncGeneratorFunction\", \"prototype\"],\n    \"%AsyncGeneratorPrototype%\": [\"AsyncGeneratorFunction\", \"prototype\", \"prototype\"],\n    \"%BooleanPrototype%\": [\"Boolean\", \"prototype\"],\n    \"%DataViewPrototype%\": [\"DataView\", \"prototype\"],\n    \"%DatePrototype%\": [\"Date\", \"prototype\"],\n    \"%ErrorPrototype%\": [\"Error\", \"prototype\"],\n    \"%EvalErrorPrototype%\": [\"EvalError\", \"prototype\"],\n    \"%Float32ArrayPrototype%\": [\"Float32Array\", \"prototype\"],\n    \"%Float64ArrayPrototype%\": [\"Float64Array\", \"prototype\"],\n    \"%FunctionPrototype%\": [\"Function\", \"prototype\"],\n    \"%Generator%\": [\"GeneratorFunction\", \"prototype\"],\n    \"%GeneratorPrototype%\": [\"GeneratorFunction\", \"prototype\", \"prototype\"],\n    \"%Int8ArrayPrototype%\": [\"Int8Array\", \"prototype\"],\n    \"%Int16ArrayPrototype%\": [\"Int16Array\", \"prototype\"],\n    \"%Int32ArrayPrototype%\": [\"Int32Array\", \"prototype\"],\n    \"%JSONParse%\": [\"JSON\", \"parse\"],\n    \"%JSONStringify%\": [\"JSON\", \"stringify\"],\n    \"%MapPrototype%\": [\"Map\", \"prototype\"],\n    \"%NumberPrototype%\": [\"Number\", \"prototype\"],\n    \"%ObjectPrototype%\": [\"Object\", \"prototype\"],\n    \"%ObjProto_toString%\": [\"Object\", \"prototype\", \"toString\"],\n    \"%ObjProto_valueOf%\": [\"Object\", \"prototype\", \"valueOf\"],\n    \"%PromisePrototype%\": [\"Promise\", \"prototype\"],\n    \"%PromiseProto_then%\": [\"Promise\", \"prototype\", \"then\"],\n    \"%Promise_all%\": [\"Promise\", \"all\"],\n    \"%Promise_reject%\": [\"Promise\", \"reject\"],\n    \"%Promise_resolve%\": [\"Promise\", \"resolve\"],\n    \"%RangeErrorPrototype%\": [\"RangeError\", \"prototype\"],\n    \"%ReferenceErrorPrototype%\": [\"ReferenceError\", \"prototype\"],\n    \"%RegExpPrototype%\": [\"RegExp\", \"prototype\"],\n    \"%SetPrototype%\": [\"Set\", \"prototype\"],\n    \"%SharedArrayBufferPrototype%\": [\"SharedArrayBuffer\", \"prototype\"],\n    \"%StringPrototype%\": [\"String\", \"prototype\"],\n    \"%SymbolPrototype%\": [\"Symbol\", \"prototype\"],\n    \"%SyntaxErrorPrototype%\": [\"SyntaxError\", \"prototype\"],\n    \"%TypedArrayPrototype%\": [\"TypedArray\", \"prototype\"],\n    \"%TypeErrorPrototype%\": [\"TypeError\", \"prototype\"],\n    \"%Uint8ArrayPrototype%\": [\"Uint8Array\", \"prototype\"],\n    \"%Uint8ClampedArrayPrototype%\": [\"Uint8ClampedArray\", \"prototype\"],\n    \"%Uint16ArrayPrototype%\": [\"Uint16Array\", \"prototype\"],\n    \"%Uint32ArrayPrototype%\": [\"Uint32Array\", \"prototype\"],\n    \"%URIErrorPrototype%\": [\"URIError\", \"prototype\"],\n    \"%WeakMapPrototype%\": [\"WeakMap\", \"prototype\"],\n    \"%WeakSetPrototype%\": [\"WeakSet\", \"prototype\"]\n  };\n  var bind = requireFunctionBind();\n  var hasOwn = requireHasown();\n  var $concat = bind.call(Function.call, Array.prototype.concat);\n  var $spliceApply = bind.call(Function.apply, Array.prototype.splice);\n  var $replace = bind.call(Function.call, String.prototype.replace);\n  var $strSlice = bind.call(Function.call, String.prototype.slice);\n  var $exec = bind.call(Function.call, RegExp.prototype.exec);\n  var rePropName = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\n  var reEscapeChar = /\\\\(\\\\)?/g;\n  var stringToPath = function stringToPath2(string) {\n    var first = $strSlice(string, 0, 1);\n    var last = $strSlice(string, -1);\n    if (first === \"%\" && last !== \"%\") {\n      throw new $SyntaxError(\"invalid intrinsic syntax, expected closing `%`\");\n    } else if (last === \"%\" && first !== \"%\") {\n      throw new $SyntaxError(\"invalid intrinsic syntax, expected opening `%`\");\n    }\n    var result = [];\n    $replace(string, rePropName, function(match, number, quote, subString) {\n      result[result.length] = quote ? $replace(subString, reEscapeChar, \"$1\") : number || match;\n    });\n    return result;\n  };\n  var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {\n    var intrinsicName = name;\n    var alias;\n    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {\n      alias = LEGACY_ALIASES[intrinsicName];\n      intrinsicName = \"%\" + alias[0] + \"%\";\n    }\n    if (hasOwn(INTRINSICS, intrinsicName)) {\n      var value = INTRINSICS[intrinsicName];\n      if (value === needsEval) {\n        value = doEval(intrinsicName);\n      }\n      if (typeof value === \"undefined\" && !allowMissing) {\n        throw new $TypeError(\"intrinsic \" + name + \" exists, but is not available. Please file an issue!\");\n      }\n      return {\n        alias,\n        name: intrinsicName,\n        value\n      };\n    }\n    throw new $SyntaxError(\"intrinsic \" + name + \" does not exist!\");\n  };\n  getIntrinsic = function GetIntrinsic(name, allowMissing) {\n    if (typeof name !== \"string\" || name.length === 0) {\n      throw new $TypeError(\"intrinsic name must be a non-empty string\");\n    }\n    if (arguments.length > 1 && typeof allowMissing !== \"boolean\") {\n      throw new $TypeError('\"allowMissing\" argument must be a boolean');\n    }\n    if ($exec(/^%?[^%]*%?$/, name) === null) {\n      throw new $SyntaxError(\"`%` may not be present anywhere but at the beginning and end of the intrinsic name\");\n    }\n    var parts = stringToPath(name);\n    var intrinsicBaseName = parts.length > 0 ? parts[0] : \"\";\n    var intrinsic = getBaseIntrinsic(\"%\" + intrinsicBaseName + \"%\", allowMissing);\n    var intrinsicRealName = intrinsic.name;\n    var value = intrinsic.value;\n    var skipFurtherCaching = false;\n    var alias = intrinsic.alias;\n    if (alias) {\n      intrinsicBaseName = alias[0];\n      $spliceApply(parts, $concat([0, 1], alias));\n    }\n    for (var i = 1, isOwn = true; i < parts.length; i += 1) {\n      var part = parts[i];\n      var first = $strSlice(part, 0, 1);\n      var last = $strSlice(part, -1);\n      if ((first === '\"' || first === \"'\" || first === \"`\" || (last === '\"' || last === \"'\" || last === \"`\")) && first !== last) {\n        throw new $SyntaxError(\"property names with quotes must have matching quotes\");\n      }\n      if (part === \"constructor\" || !isOwn) {\n        skipFurtherCaching = true;\n      }\n      intrinsicBaseName += \".\" + part;\n      intrinsicRealName = \"%\" + intrinsicBaseName + \"%\";\n      if (hasOwn(INTRINSICS, intrinsicRealName)) {\n        value = INTRINSICS[intrinsicRealName];\n      } else if (value != null) {\n        if (!(part in value)) {\n          if (!allowMissing) {\n            throw new $TypeError(\"base intrinsic for \" + name + \" exists, but the property is not available.\");\n          }\n          return void 0;\n        }\n        if ($gOPD && i + 1 >= parts.length) {\n          var desc = $gOPD(value, part);\n          isOwn = !!desc;\n          if (isOwn && \"get\" in desc && !(\"originalValue\" in desc.get)) {\n            value = desc.get;\n          } else {\n            value = value[part];\n          }\n        } else {\n          isOwn = hasOwn(value, part);\n          value = value[part];\n        }\n        if (isOwn && !skipFurtherCaching) {\n          INTRINSICS[intrinsicRealName] = value;\n        }\n      }\n    }\n    return value;\n  };\n  return getIntrinsic;\n}\nvar callBind = { exports: {} };\nvar esDefineProperty;\nvar hasRequiredEsDefineProperty;\nfunction requireEsDefineProperty() {\n  if (hasRequiredEsDefineProperty) return esDefineProperty;\n  hasRequiredEsDefineProperty = 1;\n  var GetIntrinsic = requireGetIntrinsic();\n  var $defineProperty = GetIntrinsic(\"%Object.defineProperty%\", true) || false;\n  if ($defineProperty) {\n    try {\n      $defineProperty({}, \"a\", { value: 1 });\n    } catch (e) {\n      $defineProperty = false;\n    }\n  }\n  esDefineProperty = $defineProperty;\n  return esDefineProperty;\n}\nvar gopd;\nvar hasRequiredGopd;\nfunction requireGopd() {\n  if (hasRequiredGopd) return gopd;\n  hasRequiredGopd = 1;\n  var GetIntrinsic = requireGetIntrinsic();\n  var $gOPD = GetIntrinsic(\"%Object.getOwnPropertyDescriptor%\", true);\n  if ($gOPD) {\n    try {\n      $gOPD([], \"length\");\n    } catch (e) {\n      $gOPD = null;\n    }\n  }\n  gopd = $gOPD;\n  return gopd;\n}\nvar defineDataProperty;\nvar hasRequiredDefineDataProperty;\nfunction requireDefineDataProperty() {\n  if (hasRequiredDefineDataProperty) return defineDataProperty;\n  hasRequiredDefineDataProperty = 1;\n  var $defineProperty = requireEsDefineProperty();\n  var $SyntaxError = requireSyntax();\n  var $TypeError = requireType();\n  var gopd2 = requireGopd();\n  defineDataProperty = function defineDataProperty2(obj, property, value) {\n    if (!obj || typeof obj !== \"object\" && typeof obj !== \"function\") {\n      throw new $TypeError(\"`obj` must be an object or a function`\");\n    }\n    if (typeof property !== \"string\" && typeof property !== \"symbol\") {\n      throw new $TypeError(\"`property` must be a string or a symbol`\");\n    }\n    if (arguments.length > 3 && typeof arguments[3] !== \"boolean\" && arguments[3] !== null) {\n      throw new $TypeError(\"`nonEnumerable`, if provided, must be a boolean or null\");\n    }\n    if (arguments.length > 4 && typeof arguments[4] !== \"boolean\" && arguments[4] !== null) {\n      throw new $TypeError(\"`nonWritable`, if provided, must be a boolean or null\");\n    }\n    if (arguments.length > 5 && typeof arguments[5] !== \"boolean\" && arguments[5] !== null) {\n      throw new $TypeError(\"`nonConfigurable`, if provided, must be a boolean or null\");\n    }\n    if (arguments.length > 6 && typeof arguments[6] !== \"boolean\") {\n      throw new $TypeError(\"`loose`, if provided, must be a boolean\");\n    }\n    var nonEnumerable = arguments.length > 3 ? arguments[3] : null;\n    var nonWritable = arguments.length > 4 ? arguments[4] : null;\n    var nonConfigurable = arguments.length > 5 ? arguments[5] : null;\n    var loose = arguments.length > 6 ? arguments[6] : false;\n    var desc = !!gopd2 && gopd2(obj, property);\n    if ($defineProperty) {\n      $defineProperty(obj, property, {\n        configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,\n        enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,\n        value,\n        writable: nonWritable === null && desc ? desc.writable : !nonWritable\n      });\n    } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {\n      obj[property] = value;\n    } else {\n      throw new $SyntaxError(\"This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.\");\n    }\n  };\n  return defineDataProperty;\n}\nvar hasPropertyDescriptors_1;\nvar hasRequiredHasPropertyDescriptors;\nfunction requireHasPropertyDescriptors() {\n  if (hasRequiredHasPropertyDescriptors) return hasPropertyDescriptors_1;\n  hasRequiredHasPropertyDescriptors = 1;\n  var $defineProperty = requireEsDefineProperty();\n  var hasPropertyDescriptors = function hasPropertyDescriptors2() {\n    return !!$defineProperty;\n  };\n  hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {\n    if (!$defineProperty) {\n      return null;\n    }\n    try {\n      return $defineProperty([], \"length\", { value: 1 }).length !== 1;\n    } catch (e) {\n      return true;\n    }\n  };\n  hasPropertyDescriptors_1 = hasPropertyDescriptors;\n  return hasPropertyDescriptors_1;\n}\nvar setFunctionLength;\nvar hasRequiredSetFunctionLength;\nfunction requireSetFunctionLength() {\n  if (hasRequiredSetFunctionLength) return setFunctionLength;\n  hasRequiredSetFunctionLength = 1;\n  var GetIntrinsic = requireGetIntrinsic();\n  var define = requireDefineDataProperty();\n  var hasDescriptors = requireHasPropertyDescriptors()();\n  var gOPD = requireGopd();\n  var $TypeError = requireType();\n  var $floor = GetIntrinsic(\"%Math.floor%\");\n  setFunctionLength = function setFunctionLength2(fn, length) {\n    if (typeof fn !== \"function\") {\n      throw new $TypeError(\"`fn` is not a function\");\n    }\n    if (typeof length !== \"number\" || length < 0 || length > 4294967295 || $floor(length) !== length) {\n      throw new $TypeError(\"`length` must be a positive 32-bit integer\");\n    }\n    var loose = arguments.length > 2 && !!arguments[2];\n    var functionLengthIsConfigurable = true;\n    var functionLengthIsWritable = true;\n    if (\"length\" in fn && gOPD) {\n      var desc = gOPD(fn, \"length\");\n      if (desc && !desc.configurable) {\n        functionLengthIsConfigurable = false;\n      }\n      if (desc && !desc.writable) {\n        functionLengthIsWritable = false;\n      }\n    }\n    if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {\n      if (hasDescriptors) {\n        define(\n          /** @type {Parameters<define>[0]} */\n          fn,\n          \"length\",\n          length,\n          true,\n          true\n        );\n      } else {\n        define(\n          /** @type {Parameters<define>[0]} */\n          fn,\n          \"length\",\n          length\n        );\n      }\n    }\n    return fn;\n  };\n  return setFunctionLength;\n}\nvar hasRequiredCallBind;\nfunction requireCallBind() {\n  if (hasRequiredCallBind) return callBind.exports;\n  hasRequiredCallBind = 1;\n  (function(module) {\n    var bind = requireFunctionBind();\n    var GetIntrinsic = requireGetIntrinsic();\n    var setFunctionLength2 = requireSetFunctionLength();\n    var $TypeError = requireType();\n    var $apply = GetIntrinsic(\"%Function.prototype.apply%\");\n    var $call = GetIntrinsic(\"%Function.prototype.call%\");\n    var $reflectApply = GetIntrinsic(\"%Reflect.apply%\", true) || bind.call($call, $apply);\n    var $defineProperty = requireEsDefineProperty();\n    var $max = GetIntrinsic(\"%Math.max%\");\n    module.exports = function callBind2(originalFunction) {\n      if (typeof originalFunction !== \"function\") {\n        throw new $TypeError(\"a function is required\");\n      }\n      var func = $reflectApply(bind, $call, arguments);\n      return setFunctionLength2(\n        func,\n        1 + $max(0, originalFunction.length - (arguments.length - 1)),\n        true\n      );\n    };\n    var applyBind = function applyBind2() {\n      return $reflectApply(bind, $apply, arguments);\n    };\n    if ($defineProperty) {\n      $defineProperty(module.exports, \"apply\", { value: applyBind });\n    } else {\n      module.exports.apply = applyBind;\n    }\n  })(callBind);\n  return callBind.exports;\n}\nvar callBound;\nvar hasRequiredCallBound;\nfunction requireCallBound() {\n  if (hasRequiredCallBound) return callBound;\n  hasRequiredCallBound = 1;\n  var GetIntrinsic = requireGetIntrinsic();\n  var callBind2 = requireCallBind();\n  var $indexOf = callBind2(GetIntrinsic(\"String.prototype.indexOf\"));\n  callBound = function callBoundIntrinsic(name, allowMissing) {\n    var intrinsic = GetIntrinsic(name, !!allowMissing);\n    if (typeof intrinsic === \"function\" && $indexOf(name, \".prototype.\") > -1) {\n      return callBind2(intrinsic);\n    }\n    return intrinsic;\n  };\n  return callBound;\n}\nvar isArguments;\nvar hasRequiredIsArguments;\nfunction requireIsArguments() {\n  if (hasRequiredIsArguments) return isArguments;\n  hasRequiredIsArguments = 1;\n  var hasToStringTag = requireShams()();\n  var callBound2 = requireCallBound();\n  var $toString = callBound2(\"Object.prototype.toString\");\n  var isStandardArguments = function isArguments2(value) {\n    if (hasToStringTag && value && typeof value === \"object\" && Symbol.toStringTag in value) {\n      return false;\n    }\n    return $toString(value) === \"[object Arguments]\";\n  };\n  var isLegacyArguments = function isArguments2(value) {\n    if (isStandardArguments(value)) {\n      return true;\n    }\n    return value !== null && typeof value === \"object\" && typeof value.length === \"number\" && value.length >= 0 && $toString(value) !== \"[object Array]\" && $toString(value.callee) === \"[object Function]\";\n  };\n  var supportsStandardArguments = function() {\n    return isStandardArguments(arguments);\n  }();\n  isStandardArguments.isLegacyArguments = isLegacyArguments;\n  isArguments = supportsStandardArguments ? isStandardArguments : isLegacyArguments;\n  return isArguments;\n}\nvar isGeneratorFunction;\nvar hasRequiredIsGeneratorFunction;\nfunction requireIsGeneratorFunction() {\n  if (hasRequiredIsGeneratorFunction) return isGeneratorFunction;\n  hasRequiredIsGeneratorFunction = 1;\n  var toStr = Object.prototype.toString;\n  var fnToStr = Function.prototype.toString;\n  var isFnRegex = /^\\s*(?:function)?\\*/;\n  var hasToStringTag = requireShams()();\n  var getProto = Object.getPrototypeOf;\n  var getGeneratorFunc = function() {\n    if (!hasToStringTag) {\n      return false;\n    }\n    try {\n      return Function(\"return function*() {}\")();\n    } catch (e) {\n    }\n  };\n  var GeneratorFunction;\n  isGeneratorFunction = function isGeneratorFunction2(fn) {\n    if (typeof fn !== \"function\") {\n      return false;\n    }\n    if (isFnRegex.test(fnToStr.call(fn))) {\n      return true;\n    }\n    if (!hasToStringTag) {\n      var str = toStr.call(fn);\n      return str === \"[object GeneratorFunction]\";\n    }\n    if (!getProto) {\n      return false;\n    }\n    if (typeof GeneratorFunction === \"undefined\") {\n      var generatorFunc = getGeneratorFunc();\n      GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;\n    }\n    return getProto(fn) === GeneratorFunction;\n  };\n  return isGeneratorFunction;\n}\nvar isCallable;\nvar hasRequiredIsCallable;\nfunction requireIsCallable() {\n  if (hasRequiredIsCallable) return isCallable;\n  hasRequiredIsCallable = 1;\n  var fnToStr = Function.prototype.toString;\n  var reflectApply = typeof Reflect === \"object\" && Reflect !== null && Reflect.apply;\n  var badArrayLike;\n  var isCallableMarker;\n  if (typeof reflectApply === \"function\" && typeof Object.defineProperty === \"function\") {\n    try {\n      badArrayLike = Object.defineProperty({}, \"length\", {\n        get: function() {\n          throw isCallableMarker;\n        }\n      });\n      isCallableMarker = {};\n      reflectApply(function() {\n        throw 42;\n      }, null, badArrayLike);\n    } catch (_) {\n      if (_ !== isCallableMarker) {\n        reflectApply = null;\n      }\n    }\n  } else {\n    reflectApply = null;\n  }\n  var constructorRegex = /^\\s*class\\b/;\n  var isES6ClassFn = function isES6ClassFunction(value) {\n    try {\n      var fnStr = fnToStr.call(value);\n      return constructorRegex.test(fnStr);\n    } catch (e) {\n      return false;\n    }\n  };\n  var tryFunctionObject = function tryFunctionToStr(value) {\n    try {\n      if (isES6ClassFn(value)) {\n        return false;\n      }\n      fnToStr.call(value);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  };\n  var toStr = Object.prototype.toString;\n  var objectClass = \"[object Object]\";\n  var fnClass = \"[object Function]\";\n  var genClass = \"[object GeneratorFunction]\";\n  var ddaClass = \"[object HTMLAllCollection]\";\n  var ddaClass2 = \"[object HTML document.all class]\";\n  var ddaClass3 = \"[object HTMLCollection]\";\n  var hasToStringTag = typeof Symbol === \"function\" && !!Symbol.toStringTag;\n  var isIE68 = !(0 in [,]);\n  var isDDA = function isDocumentDotAll() {\n    return false;\n  };\n  if (typeof document === \"object\") {\n    var all = document.all;\n    if (toStr.call(all) === toStr.call(document.all)) {\n      isDDA = function isDocumentDotAll(value) {\n        if ((isIE68 || !value) && (typeof value === \"undefined\" || typeof value === \"object\")) {\n          try {\n            var str = toStr.call(value);\n            return (str === ddaClass || str === ddaClass2 || str === ddaClass3 || str === objectClass) && value(\"\") == null;\n          } catch (e) {\n          }\n        }\n        return false;\n      };\n    }\n  }\n  isCallable = reflectApply ? function isCallable2(value) {\n    if (isDDA(value)) {\n      return true;\n    }\n    if (!value) {\n      return false;\n    }\n    if (typeof value !== \"function\" && typeof value !== \"object\") {\n      return false;\n    }\n    try {\n      reflectApply(value, null, badArrayLike);\n    } catch (e) {\n      if (e !== isCallableMarker) {\n        return false;\n      }\n    }\n    return !isES6ClassFn(value) && tryFunctionObject(value);\n  } : function isCallable2(value) {\n    if (isDDA(value)) {\n      return true;\n    }\n    if (!value) {\n      return false;\n    }\n    if (typeof value !== \"function\" && typeof value !== \"object\") {\n      return false;\n    }\n    if (hasToStringTag) {\n      return tryFunctionObject(value);\n    }\n    if (isES6ClassFn(value)) {\n      return false;\n    }\n    var strClass = toStr.call(value);\n    if (strClass !== fnClass && strClass !== genClass && !/^\\[object HTML/.test(strClass)) {\n      return false;\n    }\n    return tryFunctionObject(value);\n  };\n  return isCallable;\n}\nvar forEach_1;\nvar hasRequiredForEach;\nfunction requireForEach() {\n  if (hasRequiredForEach) return forEach_1;\n  hasRequiredForEach = 1;\n  var isCallable2 = requireIsCallable();\n  var toStr = Object.prototype.toString;\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  var forEachArray = function forEachArray2(array, iterator, receiver) {\n    for (var i = 0, len = array.length; i < len; i++) {\n      if (hasOwnProperty.call(array, i)) {\n        if (receiver == null) {\n          iterator(array[i], i, array);\n        } else {\n          iterator.call(receiver, array[i], i, array);\n        }\n      }\n    }\n  };\n  var forEachString = function forEachString2(string, iterator, receiver) {\n    for (var i = 0, len = string.length; i < len; i++) {\n      if (receiver == null) {\n        iterator(string.charAt(i), i, string);\n      } else {\n        iterator.call(receiver, string.charAt(i), i, string);\n      }\n    }\n  };\n  var forEachObject = function forEachObject2(object, iterator, receiver) {\n    for (var k in object) {\n      if (hasOwnProperty.call(object, k)) {\n        if (receiver == null) {\n          iterator(object[k], k, object);\n        } else {\n          iterator.call(receiver, object[k], k, object);\n        }\n      }\n    }\n  };\n  var forEach = function forEach2(list, iterator, thisArg) {\n    if (!isCallable2(iterator)) {\n      throw new TypeError(\"iterator must be a function\");\n    }\n    var receiver;\n    if (arguments.length >= 3) {\n      receiver = thisArg;\n    }\n    if (toStr.call(list) === \"[object Array]\") {\n      forEachArray(list, iterator, receiver);\n    } else if (typeof list === \"string\") {\n      forEachString(list, iterator, receiver);\n    } else {\n      forEachObject(list, iterator, receiver);\n    }\n  };\n  forEach_1 = forEach;\n  return forEach_1;\n}\nvar possibleTypedArrayNames;\nvar hasRequiredPossibleTypedArrayNames;\nfunction requirePossibleTypedArrayNames() {\n  if (hasRequiredPossibleTypedArrayNames) return possibleTypedArrayNames;\n  hasRequiredPossibleTypedArrayNames = 1;\n  possibleTypedArrayNames = [\n    \"Float32Array\",\n    \"Float64Array\",\n    \"Int8Array\",\n    \"Int16Array\",\n    \"Int32Array\",\n    \"Uint8Array\",\n    \"Uint8ClampedArray\",\n    \"Uint16Array\",\n    \"Uint32Array\",\n    \"BigInt64Array\",\n    \"BigUint64Array\"\n  ];\n  return possibleTypedArrayNames;\n}\nvar availableTypedArrays;\nvar hasRequiredAvailableTypedArrays;\nfunction requireAvailableTypedArrays() {\n  if (hasRequiredAvailableTypedArrays) return availableTypedArrays;\n  hasRequiredAvailableTypedArrays = 1;\n  var possibleNames = requirePossibleTypedArrayNames();\n  var g = typeof globalThis === \"undefined\" ? commonjsGlobal : globalThis;\n  availableTypedArrays = function availableTypedArrays2() {\n    var out = [];\n    for (var i = 0; i < possibleNames.length; i++) {\n      if (typeof g[possibleNames[i]] === \"function\") {\n        out[out.length] = possibleNames[i];\n      }\n    }\n    return out;\n  };\n  return availableTypedArrays;\n}\nvar whichTypedArray;\nvar hasRequiredWhichTypedArray;\nfunction requireWhichTypedArray() {\n  if (hasRequiredWhichTypedArray) return whichTypedArray;\n  hasRequiredWhichTypedArray = 1;\n  var forEach = requireForEach();\n  var availableTypedArrays2 = requireAvailableTypedArrays();\n  var callBind2 = requireCallBind();\n  var callBound2 = requireCallBound();\n  var gOPD = requireGopd();\n  var $toString = callBound2(\"Object.prototype.toString\");\n  var hasToStringTag = requireShams()();\n  var g = typeof globalThis === \"undefined\" ? commonjsGlobal : globalThis;\n  var typedArrays = availableTypedArrays2();\n  var $slice = callBound2(\"String.prototype.slice\");\n  var getPrototypeOf = Object.getPrototypeOf;\n  var $indexOf = callBound2(\"Array.prototype.indexOf\", true) || function indexOf(array, value) {\n    for (var i = 0; i < array.length; i += 1) {\n      if (array[i] === value) {\n        return i;\n      }\n    }\n    return -1;\n  };\n  var cache = { __proto__: null };\n  if (hasToStringTag && gOPD && getPrototypeOf) {\n    forEach(typedArrays, function(typedArray) {\n      var arr = new g[typedArray]();\n      if (Symbol.toStringTag in arr) {\n        var proto = getPrototypeOf(arr);\n        var descriptor = gOPD(proto, Symbol.toStringTag);\n        if (!descriptor) {\n          var superProto = getPrototypeOf(proto);\n          descriptor = gOPD(superProto, Symbol.toStringTag);\n        }\n        cache[\"$\" + typedArray] = callBind2(descriptor.get);\n      }\n    });\n  } else {\n    forEach(typedArrays, function(typedArray) {\n      var arr = new g[typedArray]();\n      var fn = arr.slice || arr.set;\n      if (fn) {\n        cache[\"$\" + typedArray] = callBind2(fn);\n      }\n    });\n  }\n  var tryTypedArrays = function tryAllTypedArrays(value) {\n    var found = false;\n    forEach(\n      // eslint-disable-next-line no-extra-parens\n      /** @type {Record<`\\$${TypedArrayName}`, Getter>} */\n      /** @type {any} */\n      cache,\n      /** @type {(getter: Getter, name: `\\$${import('.').TypedArrayName}`) => void} */\n      function(getter, typedArray) {\n        if (!found) {\n          try {\n            if (\"$\" + getter(value) === typedArray) {\n              found = $slice(typedArray, 1);\n            }\n          } catch (e) {\n          }\n        }\n      }\n    );\n    return found;\n  };\n  var trySlices = function tryAllSlices(value) {\n    var found = false;\n    forEach(\n      // eslint-disable-next-line no-extra-parens\n      /** @type {Record<`\\$${TypedArrayName}`, Getter>} */\n      /** @type {any} */\n      cache,\n      /** @type {(getter: typeof cache, name: `\\$${import('.').TypedArrayName}`) => void} */\n      function(getter, name) {\n        if (!found) {\n          try {\n            getter(value);\n            found = $slice(name, 1);\n          } catch (e) {\n          }\n        }\n      }\n    );\n    return found;\n  };\n  whichTypedArray = function whichTypedArray2(value) {\n    if (!value || typeof value !== \"object\") {\n      return false;\n    }\n    if (!hasToStringTag) {\n      var tag = $slice($toString(value), 8, -1);\n      if ($indexOf(typedArrays, tag) > -1) {\n        return tag;\n      }\n      if (tag !== \"Object\") {\n        return false;\n      }\n      return trySlices(value);\n    }\n    if (!gOPD) {\n      return null;\n    }\n    return tryTypedArrays(value);\n  };\n  return whichTypedArray;\n}\nvar isTypedArray;\nvar hasRequiredIsTypedArray;\nfunction requireIsTypedArray() {\n  if (hasRequiredIsTypedArray) return isTypedArray;\n  hasRequiredIsTypedArray = 1;\n  var whichTypedArray2 = requireWhichTypedArray();\n  isTypedArray = function isTypedArray2(value) {\n    return !!whichTypedArray2(value);\n  };\n  return isTypedArray;\n}\nvar hasRequiredTypes;\nfunction requireTypes() {\n  if (hasRequiredTypes) return types;\n  hasRequiredTypes = 1;\n  (function(exports) {\n    var isArgumentsObject = requireIsArguments();\n    var isGeneratorFunction2 = requireIsGeneratorFunction();\n    var whichTypedArray2 = requireWhichTypedArray();\n    var isTypedArray2 = requireIsTypedArray();\n    function uncurryThis(f2) {\n      return f2.call.bind(f2);\n    }\n    var BigIntSupported = typeof BigInt !== \"undefined\";\n    var SymbolSupported = typeof Symbol !== \"undefined\";\n    var ObjectToString = uncurryThis(Object.prototype.toString);\n    var numberValue = uncurryThis(Number.prototype.valueOf);\n    var stringValue = uncurryThis(String.prototype.valueOf);\n    var booleanValue = uncurryThis(Boolean.prototype.valueOf);\n    if (BigIntSupported) {\n      var bigIntValue = uncurryThis(BigInt.prototype.valueOf);\n    }\n    if (SymbolSupported) {\n      var symbolValue = uncurryThis(Symbol.prototype.valueOf);\n    }\n    function checkBoxedPrimitive(value, prototypeValueOf) {\n      if (typeof value !== \"object\") {\n        return false;\n      }\n      try {\n        prototypeValueOf(value);\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }\n    exports.isArgumentsObject = isArgumentsObject;\n    exports.isGeneratorFunction = isGeneratorFunction2;\n    exports.isTypedArray = isTypedArray2;\n    function isPromise(input) {\n      return typeof Promise !== \"undefined\" && input instanceof Promise || input !== null && typeof input === \"object\" && typeof input.then === \"function\" && typeof input.catch === \"function\";\n    }\n    exports.isPromise = isPromise;\n    function isArrayBufferView(value) {\n      if (typeof ArrayBuffer !== \"undefined\" && ArrayBuffer.isView) {\n        return ArrayBuffer.isView(value);\n      }\n      return isTypedArray2(value) || isDataView(value);\n    }\n    exports.isArrayBufferView = isArrayBufferView;\n    function isUint8Array(value) {\n      return whichTypedArray2(value) === \"Uint8Array\";\n    }\n    exports.isUint8Array = isUint8Array;\n    function isUint8ClampedArray(value) {\n      return whichTypedArray2(value) === \"Uint8ClampedArray\";\n    }\n    exports.isUint8ClampedArray = isUint8ClampedArray;\n    function isUint16Array(value) {\n      return whichTypedArray2(value) === \"Uint16Array\";\n    }\n    exports.isUint16Array = isUint16Array;\n    function isUint32Array(value) {\n      return whichTypedArray2(value) === \"Uint32Array\";\n    }\n    exports.isUint32Array = isUint32Array;\n    function isInt8Array(value) {\n      return whichTypedArray2(value) === \"Int8Array\";\n    }\n    exports.isInt8Array = isInt8Array;\n    function isInt16Array(value) {\n      return whichTypedArray2(value) === \"Int16Array\";\n    }\n    exports.isInt16Array = isInt16Array;\n    function isInt32Array(value) {\n      return whichTypedArray2(value) === \"Int32Array\";\n    }\n    exports.isInt32Array = isInt32Array;\n    function isFloat32Array(value) {\n      return whichTypedArray2(value) === \"Float32Array\";\n    }\n    exports.isFloat32Array = isFloat32Array;\n    function isFloat64Array(value) {\n      return whichTypedArray2(value) === \"Float64Array\";\n    }\n    exports.isFloat64Array = isFloat64Array;\n    function isBigInt64Array(value) {\n      return whichTypedArray2(value) === \"BigInt64Array\";\n    }\n    exports.isBigInt64Array = isBigInt64Array;\n    function isBigUint64Array(value) {\n      return whichTypedArray2(value) === \"BigUint64Array\";\n    }\n    exports.isBigUint64Array = isBigUint64Array;\n    function isMapToString(value) {\n      return ObjectToString(value) === \"[object Map]\";\n    }\n    isMapToString.working = typeof Map !== \"undefined\" && isMapToString(/* @__PURE__ */ new Map());\n    function isMap(value) {\n      if (typeof Map === \"undefined\") {\n        return false;\n      }\n      return isMapToString.working ? isMapToString(value) : value instanceof Map;\n    }\n    exports.isMap = isMap;\n    function isSetToString(value) {\n      return ObjectToString(value) === \"[object Set]\";\n    }\n    isSetToString.working = typeof Set !== \"undefined\" && isSetToString(/* @__PURE__ */ new Set());\n    function isSet(value) {\n      if (typeof Set === \"undefined\") {\n        return false;\n      }\n      return isSetToString.working ? isSetToString(value) : value instanceof Set;\n    }\n    exports.isSet = isSet;\n    function isWeakMapToString(value) {\n      return ObjectToString(value) === \"[object WeakMap]\";\n    }\n    isWeakMapToString.working = typeof WeakMap !== \"undefined\" && isWeakMapToString(/* @__PURE__ */ new WeakMap());\n    function isWeakMap(value) {\n      if (typeof WeakMap === \"undefined\") {\n        return false;\n      }\n      return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;\n    }\n    exports.isWeakMap = isWeakMap;\n    function isWeakSetToString(value) {\n      return ObjectToString(value) === \"[object WeakSet]\";\n    }\n    isWeakSetToString.working = typeof WeakSet !== \"undefined\" && isWeakSetToString(/* @__PURE__ */ new WeakSet());\n    function isWeakSet(value) {\n      return isWeakSetToString(value);\n    }\n    exports.isWeakSet = isWeakSet;\n    function isArrayBufferToString(value) {\n      return ObjectToString(value) === \"[object ArrayBuffer]\";\n    }\n    isArrayBufferToString.working = typeof ArrayBuffer !== \"undefined\" && isArrayBufferToString(new ArrayBuffer());\n    function isArrayBuffer(value) {\n      if (typeof ArrayBuffer === \"undefined\") {\n        return false;\n      }\n      return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;\n    }\n    exports.isArrayBuffer = isArrayBuffer;\n    function isDataViewToString(value) {\n      return ObjectToString(value) === \"[object DataView]\";\n    }\n    isDataViewToString.working = typeof ArrayBuffer !== \"undefined\" && typeof DataView !== \"undefined\" && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));\n    function isDataView(value) {\n      if (typeof DataView === \"undefined\") {\n        return false;\n      }\n      return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;\n    }\n    exports.isDataView = isDataView;\n    var SharedArrayBufferCopy = typeof SharedArrayBuffer !== \"undefined\" ? SharedArrayBuffer : void 0;\n    function isSharedArrayBufferToString(value) {\n      return ObjectToString(value) === \"[object SharedArrayBuffer]\";\n    }\n    function isSharedArrayBuffer(value) {\n      if (typeof SharedArrayBufferCopy === \"undefined\") {\n        return false;\n      }\n      if (typeof isSharedArrayBufferToString.working === \"undefined\") {\n        isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());\n      }\n      return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;\n    }\n    exports.isSharedArrayBuffer = isSharedArrayBuffer;\n    function isAsyncFunction(value) {\n      return ObjectToString(value) === \"[object AsyncFunction]\";\n    }\n    exports.isAsyncFunction = isAsyncFunction;\n    function isMapIterator(value) {\n      return ObjectToString(value) === \"[object Map Iterator]\";\n    }\n    exports.isMapIterator = isMapIterator;\n    function isSetIterator(value) {\n      return ObjectToString(value) === \"[object Set Iterator]\";\n    }\n    exports.isSetIterator = isSetIterator;\n    function isGeneratorObject(value) {\n      return ObjectToString(value) === \"[object Generator]\";\n    }\n    exports.isGeneratorObject = isGeneratorObject;\n    function isWebAssemblyCompiledModule(value) {\n      return ObjectToString(value) === \"[object WebAssembly.Module]\";\n    }\n    exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;\n    function isNumberObject(value) {\n      return checkBoxedPrimitive(value, numberValue);\n    }\n    exports.isNumberObject = isNumberObject;\n    function isStringObject(value) {\n      return checkBoxedPrimitive(value, stringValue);\n    }\n    exports.isStringObject = isStringObject;\n    function isBooleanObject(value) {\n      return checkBoxedPrimitive(value, booleanValue);\n    }\n    exports.isBooleanObject = isBooleanObject;\n    function isBigIntObject(value) {\n      return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);\n    }\n    exports.isBigIntObject = isBigIntObject;\n    function isSymbolObject(value) {\n      return SymbolSupported && checkBoxedPrimitive(value, symbolValue);\n    }\n    exports.isSymbolObject = isSymbolObject;\n    function isBoxedPrimitive(value) {\n      return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);\n    }\n    exports.isBoxedPrimitive = isBoxedPrimitive;\n    function isAnyArrayBuffer(value) {\n      return typeof Uint8Array !== \"undefined\" && (isArrayBuffer(value) || isSharedArrayBuffer(value));\n    }\n    exports.isAnyArrayBuffer = isAnyArrayBuffer;\n    [\"isProxy\", \"isExternal\", \"isModuleNamespaceObject\"].forEach(function(method) {\n      Object.defineProperty(exports, method, {\n        enumerable: false,\n        value: function() {\n          throw new Error(method + \" is not supported in userland\");\n        }\n      });\n    });\n  })(types);\n  return types;\n}\nvar isBufferBrowser;\nvar hasRequiredIsBufferBrowser;\nfunction requireIsBufferBrowser() {\n  if (hasRequiredIsBufferBrowser) return isBufferBrowser;\n  hasRequiredIsBufferBrowser = 1;\n  isBufferBrowser = function isBuffer(arg) {\n    return arg && typeof arg === \"object\" && typeof arg.copy === \"function\" && typeof arg.fill === \"function\" && typeof arg.readUInt8 === \"function\";\n  };\n  return isBufferBrowser;\n}\nvar hasRequiredUtil;\nfunction requireUtil() {\n  if (hasRequiredUtil) return util;\n  hasRequiredUtil = 1;\n  (function(exports) {\n    var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(obj) {\n      var keys = Object.keys(obj);\n      var descriptors = {};\n      for (var i = 0; i < keys.length; i++) {\n        descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n      }\n      return descriptors;\n    };\n    var formatRegExp = /%[sdj%]/g;\n    exports.format = function(f2) {\n      if (!isString(f2)) {\n        var objects = [];\n        for (var i = 0; i < arguments.length; i++) {\n          objects.push(inspect(arguments[i]));\n        }\n        return objects.join(\" \");\n      }\n      var i = 1;\n      var args = arguments;\n      var len = args.length;\n      var str = String(f2).replace(formatRegExp, function(x2) {\n        if (x2 === \"%%\") return \"%\";\n        if (i >= len) return x2;\n        switch (x2) {\n          case \"%s\":\n            return String(args[i++]);\n          case \"%d\":\n            return Number(args[i++]);\n          case \"%j\":\n            try {\n              return JSON.stringify(args[i++]);\n            } catch (_) {\n              return \"[Circular]\";\n            }\n          default:\n            return x2;\n        }\n      });\n      for (var x = args[i]; i < len; x = args[++i]) {\n        if (isNull(x) || !isObject(x)) {\n          str += \" \" + x;\n        } else {\n          str += \" \" + inspect(x);\n        }\n      }\n      return str;\n    };\n    exports.deprecate = function(fn, msg) {\n      if (typeof process$1 !== \"undefined\" && process$1.noDeprecation === true) {\n        return fn;\n      }\n      if (typeof process$1 === \"undefined\") {\n        return function() {\n          return exports.deprecate(fn, msg).apply(this, arguments);\n        };\n      }\n      var warned = false;\n      function deprecated() {\n        if (!warned) {\n          if (process$1.throwDeprecation) {\n            throw new Error(msg);\n          } else if (process$1.traceDeprecation) {\n            console.trace(msg);\n          } else {\n            console.error(msg);\n          }\n          warned = true;\n        }\n        return fn.apply(this, arguments);\n      }\n      return deprecated;\n    };\n    var debugs = {};\n    var debugEnvRegex = /^$/;\n    if (process$1.env.NODE_DEBUG) {\n      var debugEnv = process$1.env.NODE_DEBUG;\n      debugEnv = debugEnv.replace(/[|\\\\{}()[\\]^$+?.]/g, \"\\\\$&\").replace(/\\*/g, \".*\").replace(/,/g, \"$|^\").toUpperCase();\n      debugEnvRegex = new RegExp(\"^\" + debugEnv + \"$\", \"i\");\n    }\n    exports.debuglog = function(set) {\n      set = set.toUpperCase();\n      if (!debugs[set]) {\n        if (debugEnvRegex.test(set)) {\n          var pid = process$1.pid;\n          debugs[set] = function() {\n            var msg = exports.format.apply(exports, arguments);\n            console.error(\"%s %d: %s\", set, pid, msg);\n          };\n        } else {\n          debugs[set] = function() {\n          };\n        }\n      }\n      return debugs[set];\n    };\n    function inspect(obj, opts) {\n      var ctx = {\n        seen: [],\n        stylize: stylizeNoColor\n      };\n      if (arguments.length >= 3) ctx.depth = arguments[2];\n      if (arguments.length >= 4) ctx.colors = arguments[3];\n      if (isBoolean(opts)) {\n        ctx.showHidden = opts;\n      } else if (opts) {\n        exports._extend(ctx, opts);\n      }\n      if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n      if (isUndefined(ctx.depth)) ctx.depth = 2;\n      if (isUndefined(ctx.colors)) ctx.colors = false;\n      if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n      if (ctx.colors) ctx.stylize = stylizeWithColor;\n      return formatValue(ctx, obj, ctx.depth);\n    }\n    exports.inspect = inspect;\n    inspect.colors = {\n      \"bold\": [1, 22],\n      \"italic\": [3, 23],\n      \"underline\": [4, 24],\n      \"inverse\": [7, 27],\n      \"white\": [37, 39],\n      \"grey\": [90, 39],\n      \"black\": [30, 39],\n      \"blue\": [34, 39],\n      \"cyan\": [36, 39],\n      \"green\": [32, 39],\n      \"magenta\": [35, 39],\n      \"red\": [31, 39],\n      \"yellow\": [33, 39]\n    };\n    inspect.styles = {\n      \"special\": \"cyan\",\n      \"number\": \"yellow\",\n      \"boolean\": \"yellow\",\n      \"undefined\": \"grey\",\n      \"null\": \"bold\",\n      \"string\": \"green\",\n      \"date\": \"magenta\",\n      // \"name\": intentionally not styling\n      \"regexp\": \"red\"\n    };\n    function stylizeWithColor(str, styleType) {\n      var style = inspect.styles[styleType];\n      if (style) {\n        return \"\\x1B[\" + inspect.colors[style][0] + \"m\" + str + \"\\x1B[\" + inspect.colors[style][1] + \"m\";\n      } else {\n        return str;\n      }\n    }\n    function stylizeNoColor(str, styleType) {\n      return str;\n    }\n    function arrayToHash(array) {\n      var hash2 = {};\n      array.forEach(function(val, idx) {\n        hash2[val] = true;\n      });\n      return hash2;\n    }\n    function formatValue(ctx, value, recurseTimes) {\n      if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n        var ret = value.inspect(recurseTimes, ctx);\n        if (!isString(ret)) {\n          ret = formatValue(ctx, ret, recurseTimes);\n        }\n        return ret;\n      }\n      var primitive = formatPrimitive(ctx, value);\n      if (primitive) {\n        return primitive;\n      }\n      var keys = Object.keys(value);\n      var visibleKeys = arrayToHash(keys);\n      if (ctx.showHidden) {\n        keys = Object.getOwnPropertyNames(value);\n      }\n      if (isError(value) && (keys.indexOf(\"message\") >= 0 || keys.indexOf(\"description\") >= 0)) {\n        return formatError(value);\n      }\n      if (keys.length === 0) {\n        if (isFunction(value)) {\n          var name = value.name ? \": \" + value.name : \"\";\n          return ctx.stylize(\"[Function\" + name + \"]\", \"special\");\n        }\n        if (isRegExp(value)) {\n          return ctx.stylize(RegExp.prototype.toString.call(value), \"regexp\");\n        }\n        if (isDate(value)) {\n          return ctx.stylize(Date.prototype.toString.call(value), \"date\");\n        }\n        if (isError(value)) {\n          return formatError(value);\n        }\n      }\n      var base = \"\", array = false, braces = [\"{\", \"}\"];\n      if (isArray2(value)) {\n        array = true;\n        braces = [\"[\", \"]\"];\n      }\n      if (isFunction(value)) {\n        var n = value.name ? \": \" + value.name : \"\";\n        base = \" [Function\" + n + \"]\";\n      }\n      if (isRegExp(value)) {\n        base = \" \" + RegExp.prototype.toString.call(value);\n      }\n      if (isDate(value)) {\n        base = \" \" + Date.prototype.toUTCString.call(value);\n      }\n      if (isError(value)) {\n        base = \" \" + formatError(value);\n      }\n      if (keys.length === 0 && (!array || value.length == 0)) {\n        return braces[0] + base + braces[1];\n      }\n      if (recurseTimes < 0) {\n        if (isRegExp(value)) {\n          return ctx.stylize(RegExp.prototype.toString.call(value), \"regexp\");\n        } else {\n          return ctx.stylize(\"[Object]\", \"special\");\n        }\n      }\n      ctx.seen.push(value);\n      var output;\n      if (array) {\n        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n      } else {\n        output = keys.map(function(key) {\n          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n        });\n      }\n      ctx.seen.pop();\n      return reduceToSingleString(output, base, braces);\n    }\n    function formatPrimitive(ctx, value) {\n      if (isUndefined(value))\n        return ctx.stylize(\"undefined\", \"undefined\");\n      if (isString(value)) {\n        var simple = \"'\" + JSON.stringify(value).replace(/^\"|\"$/g, \"\").replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"') + \"'\";\n        return ctx.stylize(simple, \"string\");\n      }\n      if (isNumber(value))\n        return ctx.stylize(\"\" + value, \"number\");\n      if (isBoolean(value))\n        return ctx.stylize(\"\" + value, \"boolean\");\n      if (isNull(value))\n        return ctx.stylize(\"null\", \"null\");\n    }\n    function formatError(value) {\n      return \"[\" + Error.prototype.toString.call(value) + \"]\";\n    }\n    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n      var output = [];\n      for (var i = 0, l = value.length; i < l; ++i) {\n        if (hasOwnProperty(value, String(i))) {\n          output.push(formatProperty(\n            ctx,\n            value,\n            recurseTimes,\n            visibleKeys,\n            String(i),\n            true\n          ));\n        } else {\n          output.push(\"\");\n        }\n      }\n      keys.forEach(function(key) {\n        if (!key.match(/^\\d+$/)) {\n          output.push(formatProperty(\n            ctx,\n            value,\n            recurseTimes,\n            visibleKeys,\n            key,\n            true\n          ));\n        }\n      });\n      return output;\n    }\n    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n      var name, str, desc;\n      desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n      if (desc.get) {\n        if (desc.set) {\n          str = ctx.stylize(\"[Getter/Setter]\", \"special\");\n        } else {\n          str = ctx.stylize(\"[Getter]\", \"special\");\n        }\n      } else {\n        if (desc.set) {\n          str = ctx.stylize(\"[Setter]\", \"special\");\n        }\n      }\n      if (!hasOwnProperty(visibleKeys, key)) {\n        name = \"[\" + key + \"]\";\n      }\n      if (!str) {\n        if (ctx.seen.indexOf(desc.value) < 0) {\n          if (isNull(recurseTimes)) {\n            str = formatValue(ctx, desc.value, null);\n          } else {\n            str = formatValue(ctx, desc.value, recurseTimes - 1);\n          }\n          if (str.indexOf(\"\\n\") > -1) {\n            if (array) {\n              str = str.split(\"\\n\").map(function(line) {\n                return \"  \" + line;\n              }).join(\"\\n\").slice(2);\n            } else {\n              str = \"\\n\" + str.split(\"\\n\").map(function(line) {\n                return \"   \" + line;\n              }).join(\"\\n\");\n            }\n          }\n        } else {\n          str = ctx.stylize(\"[Circular]\", \"special\");\n        }\n      }\n      if (isUndefined(name)) {\n        if (array && key.match(/^\\d+$/)) {\n          return str;\n        }\n        name = JSON.stringify(\"\" + key);\n        if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n          name = name.slice(1, -1);\n          name = ctx.stylize(name, \"name\");\n        } else {\n          name = name.replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"').replace(/(^\"|\"$)/g, \"'\");\n          name = ctx.stylize(name, \"string\");\n        }\n      }\n      return name + \": \" + str;\n    }\n    function reduceToSingleString(output, base, braces) {\n      var length = output.reduce(function(prev, cur) {\n        if (cur.indexOf(\"\\n\") >= 0) ;\n        return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, \"\").length + 1;\n      }, 0);\n      if (length > 60) {\n        return braces[0] + (base === \"\" ? \"\" : base + \"\\n \") + \" \" + output.join(\",\\n  \") + \" \" + braces[1];\n      }\n      return braces[0] + base + \" \" + output.join(\", \") + \" \" + braces[1];\n    }\n    exports.types = requireTypes();\n    function isArray2(ar) {\n      return Array.isArray(ar);\n    }\n    exports.isArray = isArray2;\n    function isBoolean(arg) {\n      return typeof arg === \"boolean\";\n    }\n    exports.isBoolean = isBoolean;\n    function isNull(arg) {\n      return arg === null;\n    }\n    exports.isNull = isNull;\n    function isNullOrUndefined(arg) {\n      return arg == null;\n    }\n    exports.isNullOrUndefined = isNullOrUndefined;\n    function isNumber(arg) {\n      return typeof arg === \"number\";\n    }\n    exports.isNumber = isNumber;\n    function isString(arg) {\n      return typeof arg === \"string\";\n    }\n    exports.isString = isString;\n    function isSymbol(arg) {\n      return typeof arg === \"symbol\";\n    }\n    exports.isSymbol = isSymbol;\n    function isUndefined(arg) {\n      return arg === void 0;\n    }\n    exports.isUndefined = isUndefined;\n    function isRegExp(re) {\n      return isObject(re) && objectToString(re) === \"[object RegExp]\";\n    }\n    exports.isRegExp = isRegExp;\n    exports.types.isRegExp = isRegExp;\n    function isObject(arg) {\n      return typeof arg === \"object\" && arg !== null;\n    }\n    exports.isObject = isObject;\n    function isDate(d) {\n      return isObject(d) && objectToString(d) === \"[object Date]\";\n    }\n    exports.isDate = isDate;\n    exports.types.isDate = isDate;\n    function isError(e) {\n      return isObject(e) && (objectToString(e) === \"[object Error]\" || e instanceof Error);\n    }\n    exports.isError = isError;\n    exports.types.isNativeError = isError;\n    function isFunction(arg) {\n      return typeof arg === \"function\";\n    }\n    exports.isFunction = isFunction;\n    function isPrimitive(arg) {\n      return arg === null || typeof arg === \"boolean\" || typeof arg === \"number\" || typeof arg === \"string\" || typeof arg === \"symbol\" || // ES6 symbol\n      typeof arg === \"undefined\";\n    }\n    exports.isPrimitive = isPrimitive;\n    exports.isBuffer = requireIsBufferBrowser();\n    function objectToString(o) {\n      return Object.prototype.toString.call(o);\n    }\n    function pad2(n) {\n      return n < 10 ? \"0\" + n.toString(10) : n.toString(10);\n    }\n    var months = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\"\n    ];\n    function timestamp() {\n      var d = /* @__PURE__ */ new Date();\n      var time = [\n        pad2(d.getHours()),\n        pad2(d.getMinutes()),\n        pad2(d.getSeconds())\n      ].join(\":\");\n      return [d.getDate(), months[d.getMonth()], time].join(\" \");\n    }\n    exports.log = function() {\n      console.log(\"%s - %s\", timestamp(), exports.format.apply(exports, arguments));\n    };\n    exports.inherits = inherits_browserExports;\n    exports._extend = function(origin, add) {\n      if (!add || !isObject(add)) return origin;\n      var keys = Object.keys(add);\n      var i = keys.length;\n      while (i--) {\n        origin[keys[i]] = add[keys[i]];\n      }\n      return origin;\n    };\n    function hasOwnProperty(obj, prop) {\n      return Object.prototype.hasOwnProperty.call(obj, prop);\n    }\n    var kCustomPromisifiedSymbol = typeof Symbol !== \"undefined\" ? Symbol(\"util.promisify.custom\") : void 0;\n    exports.promisify = function promisify(original) {\n      if (typeof original !== \"function\")\n        throw new TypeError('The \"original\" argument must be of type Function');\n      if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n        var fn = original[kCustomPromisifiedSymbol];\n        if (typeof fn !== \"function\") {\n          throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n        }\n        Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n          value: fn,\n          enumerable: false,\n          writable: false,\n          configurable: true\n        });\n        return fn;\n      }\n      function fn() {\n        var promiseResolve, promiseReject;\n        var promise = new Promise(function(resolve2, reject) {\n          promiseResolve = resolve2;\n          promiseReject = reject;\n        });\n        var args = [];\n        for (var i = 0; i < arguments.length; i++) {\n          args.push(arguments[i]);\n        }\n        args.push(function(err, value) {\n          if (err) {\n            promiseReject(err);\n          } else {\n            promiseResolve(value);\n          }\n        });\n        try {\n          original.apply(this, args);\n        } catch (err) {\n          promiseReject(err);\n        }\n        return promise;\n      }\n      Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n      if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n        value: fn,\n        enumerable: false,\n        writable: false,\n        configurable: true\n      });\n      return Object.defineProperties(\n        fn,\n        getOwnPropertyDescriptors(original)\n      );\n    };\n    exports.promisify.custom = kCustomPromisifiedSymbol;\n    function callbackifyOnRejected(reason, cb) {\n      if (!reason) {\n        var newReason = new Error(\"Promise was rejected with a falsy value\");\n        newReason.reason = reason;\n        reason = newReason;\n      }\n      return cb(reason);\n    }\n    function callbackify(original) {\n      if (typeof original !== \"function\") {\n        throw new TypeError('The \"original\" argument must be of type Function');\n      }\n      function callbackified() {\n        var args = [];\n        for (var i = 0; i < arguments.length; i++) {\n          args.push(arguments[i]);\n        }\n        var maybeCb = args.pop();\n        if (typeof maybeCb !== \"function\") {\n          throw new TypeError(\"The last argument must be of type Function\");\n        }\n        var self2 = this;\n        var cb = function() {\n          return maybeCb.apply(self2, arguments);\n        };\n        original.apply(this, args).then(\n          function(ret) {\n            process$1.nextTick(cb.bind(null, null, ret));\n          },\n          function(rej) {\n            process$1.nextTick(callbackifyOnRejected.bind(null, rej, cb));\n          }\n        );\n      }\n      Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n      Object.defineProperties(\n        callbackified,\n        getOwnPropertyDescriptors(original)\n      );\n      return callbackified;\n    }\n    exports.callbackify = callbackify;\n  })(util);\n  return util;\n}\nvar buffer_list;\nvar hasRequiredBuffer_list;\nfunction requireBuffer_list() {\n  if (hasRequiredBuffer_list) return buffer_list;\n  hasRequiredBuffer_list = 1;\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      if (enumerableOnly) symbols = symbols.filter(function(sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n      keys.push.apply(keys, symbols);\n    }\n    return keys;\n  }\n  function _objectSpread(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n      if (i % 2) {\n        ownKeys(Object(source), true).forEach(function(key) {\n          _defineProperty(target, key, source[key]);\n        });\n      } else if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n      } else {\n        ownKeys(Object(source)).forEach(function(key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n    }\n    return target;\n  }\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    return Constructor;\n  }\n  var _require = requireBuffer(), Buffer2 = _require.Buffer;\n  var _require2 = requireUtil(), inspect = _require2.inspect;\n  var custom = inspect && inspect.custom || \"inspect\";\n  function copyBuffer(src, target, offset) {\n    Buffer2.prototype.copy.call(src, target, offset);\n  }\n  buffer_list = /* @__PURE__ */ function() {\n    function BufferList() {\n      _classCallCheck(this, BufferList);\n      this.head = null;\n      this.tail = null;\n      this.length = 0;\n    }\n    _createClass(BufferList, [{\n      key: \"push\",\n      value: function push(v) {\n        var entry = {\n          data: v,\n          next: null\n        };\n        if (this.length > 0) this.tail.next = entry;\n        else this.head = entry;\n        this.tail = entry;\n        ++this.length;\n      }\n    }, {\n      key: \"unshift\",\n      value: function unshift(v) {\n        var entry = {\n          data: v,\n          next: this.head\n        };\n        if (this.length === 0) this.tail = entry;\n        this.head = entry;\n        ++this.length;\n      }\n    }, {\n      key: \"shift\",\n      value: function shift() {\n        if (this.length === 0) return;\n        var ret = this.head.data;\n        if (this.length === 1) this.head = this.tail = null;\n        else this.head = this.head.next;\n        --this.length;\n        return ret;\n      }\n    }, {\n      key: \"clear\",\n      value: function clear() {\n        this.head = this.tail = null;\n        this.length = 0;\n      }\n    }, {\n      key: \"join\",\n      value: function join(s2) {\n        if (this.length === 0) return \"\";\n        var p = this.head;\n        var ret = \"\" + p.data;\n        while (p = p.next) {\n          ret += s2 + p.data;\n        }\n        return ret;\n      }\n    }, {\n      key: \"concat\",\n      value: function concat(n) {\n        if (this.length === 0) return Buffer2.alloc(0);\n        var ret = Buffer2.allocUnsafe(n >>> 0);\n        var p = this.head;\n        var i = 0;\n        while (p) {\n          copyBuffer(p.data, ret, i);\n          i += p.data.length;\n          p = p.next;\n        }\n        return ret;\n      }\n      // Consumes a specified amount of bytes or characters from the buffered data.\n    }, {\n      key: \"consume\",\n      value: function consume(n, hasStrings) {\n        var ret;\n        if (n < this.head.data.length) {\n          ret = this.head.data.slice(0, n);\n          this.head.data = this.head.data.slice(n);\n        } else if (n === this.head.data.length) {\n          ret = this.shift();\n        } else {\n          ret = hasStrings ? this._getString(n) : this._getBuffer(n);\n        }\n        return ret;\n      }\n    }, {\n      key: \"first\",\n      value: function first() {\n        return this.head.data;\n      }\n      // Consumes a specified amount of characters from the buffered data.\n    }, {\n      key: \"_getString\",\n      value: function _getString(n) {\n        var p = this.head;\n        var c = 1;\n        var ret = p.data;\n        n -= ret.length;\n        while (p = p.next) {\n          var str = p.data;\n          var nb = n > str.length ? str.length : n;\n          if (nb === str.length) ret += str;\n          else ret += str.slice(0, n);\n          n -= nb;\n          if (n === 0) {\n            if (nb === str.length) {\n              ++c;\n              if (p.next) this.head = p.next;\n              else this.head = this.tail = null;\n            } else {\n              this.head = p;\n              p.data = str.slice(nb);\n            }\n            break;\n          }\n          ++c;\n        }\n        this.length -= c;\n        return ret;\n      }\n      // Consumes a specified amount of bytes from the buffered data.\n    }, {\n      key: \"_getBuffer\",\n      value: function _getBuffer(n) {\n        var ret = Buffer2.allocUnsafe(n);\n        var p = this.head;\n        var c = 1;\n        p.data.copy(ret);\n        n -= p.data.length;\n        while (p = p.next) {\n          var buf = p.data;\n          var nb = n > buf.length ? buf.length : n;\n          buf.copy(ret, ret.length - n, 0, nb);\n          n -= nb;\n          if (n === 0) {\n            if (nb === buf.length) {\n              ++c;\n              if (p.next) this.head = p.next;\n              else this.head = this.tail = null;\n            } else {\n              this.head = p;\n              p.data = buf.slice(nb);\n            }\n            break;\n          }\n          ++c;\n        }\n        this.length -= c;\n        return ret;\n      }\n      // Make sure the linked list only shows the minimal necessary information.\n    }, {\n      key: custom,\n      value: function value(_, options2) {\n        return inspect(this, _objectSpread({}, options2, {\n          // Only inspect one level.\n          depth: 0,\n          // It should not recurse.\n          customInspect: false\n        }));\n      }\n    }]);\n    return BufferList;\n  }();\n  return buffer_list;\n}\nvar destroy_1;\nvar hasRequiredDestroy;\nfunction requireDestroy() {\n  if (hasRequiredDestroy) return destroy_1;\n  hasRequiredDestroy = 1;\n  function destroy(err, cb) {\n    var _this = this;\n    var readableDestroyed = this._readableState && this._readableState.destroyed;\n    var writableDestroyed = this._writableState && this._writableState.destroyed;\n    if (readableDestroyed || writableDestroyed) {\n      if (cb) {\n        cb(err);\n      } else if (err) {\n        if (!this._writableState) {\n          process$1.nextTick(emitErrorNT, this, err);\n        } else if (!this._writableState.errorEmitted) {\n          this._writableState.errorEmitted = true;\n          process$1.nextTick(emitErrorNT, this, err);\n        }\n      }\n      return this;\n    }\n    if (this._readableState) {\n      this._readableState.destroyed = true;\n    }\n    if (this._writableState) {\n      this._writableState.destroyed = true;\n    }\n    this._destroy(err || null, function(err2) {\n      if (!cb && err2) {\n        if (!_this._writableState) {\n          process$1.nextTick(emitErrorAndCloseNT, _this, err2);\n        } else if (!_this._writableState.errorEmitted) {\n          _this._writableState.errorEmitted = true;\n          process$1.nextTick(emitErrorAndCloseNT, _this, err2);\n        } else {\n          process$1.nextTick(emitCloseNT, _this);\n        }\n      } else if (cb) {\n        process$1.nextTick(emitCloseNT, _this);\n        cb(err2);\n      } else {\n        process$1.nextTick(emitCloseNT, _this);\n      }\n    });\n    return this;\n  }\n  function emitErrorAndCloseNT(self2, err) {\n    emitErrorNT(self2, err);\n    emitCloseNT(self2);\n  }\n  function emitCloseNT(self2) {\n    if (self2._writableState && !self2._writableState.emitClose) return;\n    if (self2._readableState && !self2._readableState.emitClose) return;\n    self2.emit(\"close\");\n  }\n  function undestroy() {\n    if (this._readableState) {\n      this._readableState.destroyed = false;\n      this._readableState.reading = false;\n      this._readableState.ended = false;\n      this._readableState.endEmitted = false;\n    }\n    if (this._writableState) {\n      this._writableState.destroyed = false;\n      this._writableState.ended = false;\n      this._writableState.ending = false;\n      this._writableState.finalCalled = false;\n      this._writableState.prefinished = false;\n      this._writableState.finished = false;\n      this._writableState.errorEmitted = false;\n    }\n  }\n  function emitErrorNT(self2, err) {\n    self2.emit(\"error\", err);\n  }\n  function errorOrDestroy(stream, err) {\n    var rState = stream._readableState;\n    var wState = stream._writableState;\n    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);\n    else stream.emit(\"error\", err);\n  }\n  destroy_1 = {\n    destroy,\n    undestroy,\n    errorOrDestroy\n  };\n  return destroy_1;\n}\nvar errorsBrowser = {};\nvar hasRequiredErrorsBrowser;\nfunction requireErrorsBrowser() {\n  if (hasRequiredErrorsBrowser) return errorsBrowser;\n  hasRequiredErrorsBrowser = 1;\n  function _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n  }\n  var codes = {};\n  function createErrorType(code, message, Base) {\n    if (!Base) {\n      Base = Error;\n    }\n    function getMessage(arg1, arg2, arg3) {\n      if (typeof message === \"string\") {\n        return message;\n      } else {\n        return message(arg1, arg2, arg3);\n      }\n    }\n    var NodeError = /* @__PURE__ */ function(_Base) {\n      _inheritsLoose(NodeError2, _Base);\n      function NodeError2(arg1, arg2, arg3) {\n        return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;\n      }\n      return NodeError2;\n    }(Base);\n    NodeError.prototype.name = Base.name;\n    NodeError.prototype.code = code;\n    codes[code] = NodeError;\n  }\n  function oneOf(expected, thing) {\n    if (Array.isArray(expected)) {\n      var len = expected.length;\n      expected = expected.map(function(i) {\n        return String(i);\n      });\n      if (len > 2) {\n        return \"one of \".concat(thing, \" \").concat(expected.slice(0, len - 1).join(\", \"), \", or \") + expected[len - 1];\n      } else if (len === 2) {\n        return \"one of \".concat(thing, \" \").concat(expected[0], \" or \").concat(expected[1]);\n      } else {\n        return \"of \".concat(thing, \" \").concat(expected[0]);\n      }\n    } else {\n      return \"of \".concat(thing, \" \").concat(String(expected));\n    }\n  }\n  function startsWith(str, search, pos) {\n    return str.substr(0, search.length) === search;\n  }\n  function endsWith(str, search, this_len) {\n    if (this_len === void 0 || this_len > str.length) {\n      this_len = str.length;\n    }\n    return str.substring(this_len - search.length, this_len) === search;\n  }\n  function includes(str, search, start) {\n    if (typeof start !== \"number\") {\n      start = 0;\n    }\n    if (start + search.length > str.length) {\n      return false;\n    } else {\n      return str.indexOf(search, start) !== -1;\n    }\n  }\n  createErrorType(\"ERR_INVALID_OPT_VALUE\", function(name, value) {\n    return 'The value \"' + value + '\" is invalid for option \"' + name + '\"';\n  }, TypeError);\n  createErrorType(\"ERR_INVALID_ARG_TYPE\", function(name, expected, actual) {\n    var determiner;\n    if (typeof expected === \"string\" && startsWith(expected, \"not \")) {\n      determiner = \"must not be\";\n      expected = expected.replace(/^not /, \"\");\n    } else {\n      determiner = \"must be\";\n    }\n    var msg;\n    if (endsWith(name, \" argument\")) {\n      msg = \"The \".concat(name, \" \").concat(determiner, \" \").concat(oneOf(expected, \"type\"));\n    } else {\n      var type2 = includes(name, \".\") ? \"property\" : \"argument\";\n      msg = 'The \"'.concat(name, '\" ').concat(type2, \" \").concat(determiner, \" \").concat(oneOf(expected, \"type\"));\n    }\n    msg += \". Received type \".concat(typeof actual);\n    return msg;\n  }, TypeError);\n  createErrorType(\"ERR_STREAM_PUSH_AFTER_EOF\", \"stream.push() after EOF\");\n  createErrorType(\"ERR_METHOD_NOT_IMPLEMENTED\", function(name) {\n    return \"The \" + name + \" method is not implemented\";\n  });\n  createErrorType(\"ERR_STREAM_PREMATURE_CLOSE\", \"Premature close\");\n  createErrorType(\"ERR_STREAM_DESTROYED\", function(name) {\n    return \"Cannot call \" + name + \" after a stream was destroyed\";\n  });\n  createErrorType(\"ERR_MULTIPLE_CALLBACK\", \"Callback called multiple times\");\n  createErrorType(\"ERR_STREAM_CANNOT_PIPE\", \"Cannot pipe, not readable\");\n  createErrorType(\"ERR_STREAM_WRITE_AFTER_END\", \"write after end\");\n  createErrorType(\"ERR_STREAM_NULL_VALUES\", \"May not write null values to stream\", TypeError);\n  createErrorType(\"ERR_UNKNOWN_ENCODING\", function(arg) {\n    return \"Unknown encoding: \" + arg;\n  }, TypeError);\n  createErrorType(\"ERR_STREAM_UNSHIFT_AFTER_END_EVENT\", \"stream.unshift() after end event\");\n  errorsBrowser.codes = codes;\n  return errorsBrowser;\n}\nvar state;\nvar hasRequiredState;\nfunction requireState() {\n  if (hasRequiredState) return state;\n  hasRequiredState = 1;\n  var ERR_INVALID_OPT_VALUE = requireErrorsBrowser().codes.ERR_INVALID_OPT_VALUE;\n  function highWaterMarkFrom(options2, isDuplex, duplexKey) {\n    return options2.highWaterMark != null ? options2.highWaterMark : isDuplex ? options2[duplexKey] : null;\n  }\n  function getHighWaterMark(state2, options2, duplexKey, isDuplex) {\n    var hwm = highWaterMarkFrom(options2, isDuplex, duplexKey);\n    if (hwm != null) {\n      if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {\n        var name = isDuplex ? duplexKey : \"highWaterMark\";\n        throw new ERR_INVALID_OPT_VALUE(name, hwm);\n      }\n      return Math.floor(hwm);\n    }\n    return state2.objectMode ? 16 : 16 * 1024;\n  }\n  state = {\n    getHighWaterMark\n  };\n  return state;\n}\nvar browser;\nvar hasRequiredBrowser;\nfunction requireBrowser() {\n  if (hasRequiredBrowser) return browser;\n  hasRequiredBrowser = 1;\n  browser = deprecate;\n  function deprecate(fn, msg) {\n    if (config(\"noDeprecation\")) {\n      return fn;\n    }\n    var warned = false;\n    function deprecated() {\n      if (!warned) {\n        if (config(\"throwDeprecation\")) {\n          throw new Error(msg);\n        } else if (config(\"traceDeprecation\")) {\n          console.trace(msg);\n        } else {\n          console.warn(msg);\n        }\n        warned = true;\n      }\n      return fn.apply(this, arguments);\n    }\n    return deprecated;\n  }\n  function config(name) {\n    try {\n      if (!commonjsGlobal.localStorage) return false;\n    } catch (_) {\n      return false;\n    }\n    var val = commonjsGlobal.localStorage[name];\n    if (null == val) return false;\n    return String(val).toLowerCase() === \"true\";\n  }\n  return browser;\n}\nvar _stream_writable;\nvar hasRequired_stream_writable;\nfunction require_stream_writable() {\n  if (hasRequired_stream_writable) return _stream_writable;\n  hasRequired_stream_writable = 1;\n  _stream_writable = Writable;\n  function CorkedRequest(state2) {\n    var _this = this;\n    this.next = null;\n    this.entry = null;\n    this.finish = function() {\n      onCorkedFinish(_this, state2);\n    };\n  }\n  var Duplex;\n  Writable.WritableState = WritableState;\n  var internalUtil = {\n    deprecate: requireBrowser()\n  };\n  var Stream2 = requireStreamBrowser();\n  var Buffer2 = requireBuffer().Buffer;\n  var OurUint8Array = commonjsGlobal.Uint8Array || function() {\n  };\n  function _uint8ArrayToBuffer(chunk) {\n    return Buffer2.from(chunk);\n  }\n  function _isUint8Array(obj) {\n    return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;\n  }\n  var destroyImpl = requireDestroy();\n  var _require = requireState(), getHighWaterMark = _require.getHighWaterMark;\n  var _require$codes = requireErrorsBrowser().codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;\n  var errorOrDestroy = destroyImpl.errorOrDestroy;\n  inherits_browserExports(Writable, Stream2);\n  function nop() {\n  }\n  function WritableState(options2, stream, isDuplex) {\n    Duplex = Duplex || require_stream_duplex();\n    options2 = options2 || {};\n    if (typeof isDuplex !== \"boolean\") isDuplex = stream instanceof Duplex;\n    this.objectMode = !!options2.objectMode;\n    if (isDuplex) this.objectMode = this.objectMode || !!options2.writableObjectMode;\n    this.highWaterMark = getHighWaterMark(this, options2, \"writableHighWaterMark\", isDuplex);\n    this.finalCalled = false;\n    this.needDrain = false;\n    this.ending = false;\n    this.ended = false;\n    this.finished = false;\n    this.destroyed = false;\n    var noDecode = options2.decodeStrings === false;\n    this.decodeStrings = !noDecode;\n    this.defaultEncoding = options2.defaultEncoding || \"utf8\";\n    this.length = 0;\n    this.writing = false;\n    this.corked = 0;\n    this.sync = true;\n    this.bufferProcessing = false;\n    this.onwrite = function(er) {\n      onwrite(stream, er);\n    };\n    this.writecb = null;\n    this.writelen = 0;\n    this.bufferedRequest = null;\n    this.lastBufferedRequest = null;\n    this.pendingcb = 0;\n    this.prefinished = false;\n    this.errorEmitted = false;\n    this.emitClose = options2.emitClose !== false;\n    this.autoDestroy = !!options2.autoDestroy;\n    this.bufferedRequestCount = 0;\n    this.corkedRequestsFree = new CorkedRequest(this);\n  }\n  WritableState.prototype.getBuffer = function getBuffer() {\n    var current = this.bufferedRequest;\n    var out = [];\n    while (current) {\n      out.push(current);\n      current = current.next;\n    }\n    return out;\n  };\n  (function() {\n    try {\n      Object.defineProperty(WritableState.prototype, \"buffer\", {\n        get: internalUtil.deprecate(function writableStateBufferGetter() {\n          return this.getBuffer();\n        }, \"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.\", \"DEP0003\")\n      });\n    } catch (_) {\n    }\n  })();\n  var realHasInstance;\n  if (typeof Symbol === \"function\" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === \"function\") {\n    realHasInstance = Function.prototype[Symbol.hasInstance];\n    Object.defineProperty(Writable, Symbol.hasInstance, {\n      value: function value(object) {\n        if (realHasInstance.call(this, object)) return true;\n        if (this !== Writable) return false;\n        return object && object._writableState instanceof WritableState;\n      }\n    });\n  } else {\n    realHasInstance = function realHasInstance2(object) {\n      return object instanceof this;\n    };\n  }\n  function Writable(options2) {\n    Duplex = Duplex || require_stream_duplex();\n    var isDuplex = this instanceof Duplex;\n    if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options2);\n    this._writableState = new WritableState(options2, this, isDuplex);\n    this.writable = true;\n    if (options2) {\n      if (typeof options2.write === \"function\") this._write = options2.write;\n      if (typeof options2.writev === \"function\") this._writev = options2.writev;\n      if (typeof options2.destroy === \"function\") this._destroy = options2.destroy;\n      if (typeof options2.final === \"function\") this._final = options2.final;\n    }\n    Stream2.call(this);\n  }\n  Writable.prototype.pipe = function() {\n    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n  };\n  function writeAfterEnd(stream, cb) {\n    var er = new ERR_STREAM_WRITE_AFTER_END();\n    errorOrDestroy(stream, er);\n    process$1.nextTick(cb, er);\n  }\n  function validChunk(stream, state2, chunk, cb) {\n    var er;\n    if (chunk === null) {\n      er = new ERR_STREAM_NULL_VALUES();\n    } else if (typeof chunk !== \"string\" && !state2.objectMode) {\n      er = new ERR_INVALID_ARG_TYPE(\"chunk\", [\"string\", \"Buffer\"], chunk);\n    }\n    if (er) {\n      errorOrDestroy(stream, er);\n      process$1.nextTick(cb, er);\n      return false;\n    }\n    return true;\n  }\n  Writable.prototype.write = function(chunk, encoding, cb) {\n    var state2 = this._writableState;\n    var ret = false;\n    var isBuf = !state2.objectMode && _isUint8Array(chunk);\n    if (isBuf && !Buffer2.isBuffer(chunk)) {\n      chunk = _uint8ArrayToBuffer(chunk);\n    }\n    if (typeof encoding === \"function\") {\n      cb = encoding;\n      encoding = null;\n    }\n    if (isBuf) encoding = \"buffer\";\n    else if (!encoding) encoding = state2.defaultEncoding;\n    if (typeof cb !== \"function\") cb = nop;\n    if (state2.ending) writeAfterEnd(this, cb);\n    else if (isBuf || validChunk(this, state2, chunk, cb)) {\n      state2.pendingcb++;\n      ret = writeOrBuffer(this, state2, isBuf, chunk, encoding, cb);\n    }\n    return ret;\n  };\n  Writable.prototype.cork = function() {\n    this._writableState.corked++;\n  };\n  Writable.prototype.uncork = function() {\n    var state2 = this._writableState;\n    if (state2.corked) {\n      state2.corked--;\n      if (!state2.writing && !state2.corked && !state2.bufferProcessing && state2.bufferedRequest) clearBuffer(this, state2);\n    }\n  };\n  Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n    if (typeof encoding === \"string\") encoding = encoding.toLowerCase();\n    if (!([\"hex\", \"utf8\", \"utf-8\", \"ascii\", \"binary\", \"base64\", \"ucs2\", \"ucs-2\", \"utf16le\", \"utf-16le\", \"raw\"].indexOf((encoding + \"\").toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);\n    this._writableState.defaultEncoding = encoding;\n    return this;\n  };\n  Object.defineProperty(Writable.prototype, \"writableBuffer\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n      return this._writableState && this._writableState.getBuffer();\n    }\n  });\n  function decodeChunk(state2, chunk, encoding) {\n    if (!state2.objectMode && state2.decodeStrings !== false && typeof chunk === \"string\") {\n      chunk = Buffer2.from(chunk, encoding);\n    }\n    return chunk;\n  }\n  Object.defineProperty(Writable.prototype, \"writableHighWaterMark\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n      return this._writableState.highWaterMark;\n    }\n  });\n  function writeOrBuffer(stream, state2, isBuf, chunk, encoding, cb) {\n    if (!isBuf) {\n      var newChunk = decodeChunk(state2, chunk, encoding);\n      if (chunk !== newChunk) {\n        isBuf = true;\n        encoding = \"buffer\";\n        chunk = newChunk;\n      }\n    }\n    var len = state2.objectMode ? 1 : chunk.length;\n    state2.length += len;\n    var ret = state2.length < state2.highWaterMark;\n    if (!ret) state2.needDrain = true;\n    if (state2.writing || state2.corked) {\n      var last = state2.lastBufferedRequest;\n      state2.lastBufferedRequest = {\n        chunk,\n        encoding,\n        isBuf,\n        callback: cb,\n        next: null\n      };\n      if (last) {\n        last.next = state2.lastBufferedRequest;\n      } else {\n        state2.bufferedRequest = state2.lastBufferedRequest;\n      }\n      state2.bufferedRequestCount += 1;\n    } else {\n      doWrite(stream, state2, false, len, chunk, encoding, cb);\n    }\n    return ret;\n  }\n  function doWrite(stream, state2, writev, len, chunk, encoding, cb) {\n    state2.writelen = len;\n    state2.writecb = cb;\n    state2.writing = true;\n    state2.sync = true;\n    if (state2.destroyed) state2.onwrite(new ERR_STREAM_DESTROYED(\"write\"));\n    else if (writev) stream._writev(chunk, state2.onwrite);\n    else stream._write(chunk, encoding, state2.onwrite);\n    state2.sync = false;\n  }\n  function onwriteError(stream, state2, sync, er, cb) {\n    --state2.pendingcb;\n    if (sync) {\n      process$1.nextTick(cb, er);\n      process$1.nextTick(finishMaybe, stream, state2);\n      stream._writableState.errorEmitted = true;\n      errorOrDestroy(stream, er);\n    } else {\n      cb(er);\n      stream._writableState.errorEmitted = true;\n      errorOrDestroy(stream, er);\n      finishMaybe(stream, state2);\n    }\n  }\n  function onwriteStateUpdate(state2) {\n    state2.writing = false;\n    state2.writecb = null;\n    state2.length -= state2.writelen;\n    state2.writelen = 0;\n  }\n  function onwrite(stream, er) {\n    var state2 = stream._writableState;\n    var sync = state2.sync;\n    var cb = state2.writecb;\n    if (typeof cb !== \"function\") throw new ERR_MULTIPLE_CALLBACK();\n    onwriteStateUpdate(state2);\n    if (er) onwriteError(stream, state2, sync, er, cb);\n    else {\n      var finished = needFinish(state2) || stream.destroyed;\n      if (!finished && !state2.corked && !state2.bufferProcessing && state2.bufferedRequest) {\n        clearBuffer(stream, state2);\n      }\n      if (sync) {\n        process$1.nextTick(afterWrite, stream, state2, finished, cb);\n      } else {\n        afterWrite(stream, state2, finished, cb);\n      }\n    }\n  }\n  function afterWrite(stream, state2, finished, cb) {\n    if (!finished) onwriteDrain(stream, state2);\n    state2.pendingcb--;\n    cb();\n    finishMaybe(stream, state2);\n  }\n  function onwriteDrain(stream, state2) {\n    if (state2.length === 0 && state2.needDrain) {\n      state2.needDrain = false;\n      stream.emit(\"drain\");\n    }\n  }\n  function clearBuffer(stream, state2) {\n    state2.bufferProcessing = true;\n    var entry = state2.bufferedRequest;\n    if (stream._writev && entry && entry.next) {\n      var l = state2.bufferedRequestCount;\n      var buffer2 = new Array(l);\n      var holder = state2.corkedRequestsFree;\n      holder.entry = entry;\n      var count = 0;\n      var allBuffers = true;\n      while (entry) {\n        buffer2[count] = entry;\n        if (!entry.isBuf) allBuffers = false;\n        entry = entry.next;\n        count += 1;\n      }\n      buffer2.allBuffers = allBuffers;\n      doWrite(stream, state2, true, state2.length, buffer2, \"\", holder.finish);\n      state2.pendingcb++;\n      state2.lastBufferedRequest = null;\n      if (holder.next) {\n        state2.corkedRequestsFree = holder.next;\n        holder.next = null;\n      } else {\n        state2.corkedRequestsFree = new CorkedRequest(state2);\n      }\n      state2.bufferedRequestCount = 0;\n    } else {\n      while (entry) {\n        var chunk = entry.chunk;\n        var encoding = entry.encoding;\n        var cb = entry.callback;\n        var len = state2.objectMode ? 1 : chunk.length;\n        doWrite(stream, state2, false, len, chunk, encoding, cb);\n        entry = entry.next;\n        state2.bufferedRequestCount--;\n        if (state2.writing) {\n          break;\n        }\n      }\n      if (entry === null) state2.lastBufferedRequest = null;\n    }\n    state2.bufferedRequest = entry;\n    state2.bufferProcessing = false;\n  }\n  Writable.prototype._write = function(chunk, encoding, cb) {\n    cb(new ERR_METHOD_NOT_IMPLEMENTED(\"_write()\"));\n  };\n  Writable.prototype._writev = null;\n  Writable.prototype.end = function(chunk, encoding, cb) {\n    var state2 = this._writableState;\n    if (typeof chunk === \"function\") {\n      cb = chunk;\n      chunk = null;\n      encoding = null;\n    } else if (typeof encoding === \"function\") {\n      cb = encoding;\n      encoding = null;\n    }\n    if (chunk !== null && chunk !== void 0) this.write(chunk, encoding);\n    if (state2.corked) {\n      state2.corked = 1;\n      this.uncork();\n    }\n    if (!state2.ending) endWritable(this, state2, cb);\n    return this;\n  };\n  Object.defineProperty(Writable.prototype, \"writableLength\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n      return this._writableState.length;\n    }\n  });\n  function needFinish(state2) {\n    return state2.ending && state2.length === 0 && state2.bufferedRequest === null && !state2.finished && !state2.writing;\n  }\n  function callFinal(stream, state2) {\n    stream._final(function(err) {\n      state2.pendingcb--;\n      if (err) {\n        errorOrDestroy(stream, err);\n      }\n      state2.prefinished = true;\n      stream.emit(\"prefinish\");\n      finishMaybe(stream, state2);\n    });\n  }\n  function prefinish(stream, state2) {\n    if (!state2.prefinished && !state2.finalCalled) {\n      if (typeof stream._final === \"function\" && !state2.destroyed) {\n        state2.pendingcb++;\n        state2.finalCalled = true;\n        process$1.nextTick(callFinal, stream, state2);\n      } else {\n        state2.prefinished = true;\n        stream.emit(\"prefinish\");\n      }\n    }\n  }\n  function finishMaybe(stream, state2) {\n    var need = needFinish(state2);\n    if (need) {\n      prefinish(stream, state2);\n      if (state2.pendingcb === 0) {\n        state2.finished = true;\n        stream.emit(\"finish\");\n        if (state2.autoDestroy) {\n          var rState = stream._readableState;\n          if (!rState || rState.autoDestroy && rState.endEmitted) {\n            stream.destroy();\n          }\n        }\n      }\n    }\n    return need;\n  }\n  function endWritable(stream, state2, cb) {\n    state2.ending = true;\n    finishMaybe(stream, state2);\n    if (cb) {\n      if (state2.finished) process$1.nextTick(cb);\n      else stream.once(\"finish\", cb);\n    }\n    state2.ended = true;\n    stream.writable = false;\n  }\n  function onCorkedFinish(corkReq, state2, err) {\n    var entry = corkReq.entry;\n    corkReq.entry = null;\n    while (entry) {\n      var cb = entry.callback;\n      state2.pendingcb--;\n      cb(err);\n      entry = entry.next;\n    }\n    state2.corkedRequestsFree.next = corkReq;\n  }\n  Object.defineProperty(Writable.prototype, \"destroyed\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n      if (this._writableState === void 0) {\n        return false;\n      }\n      return this._writableState.destroyed;\n    },\n    set: function set(value) {\n      if (!this._writableState) {\n        return;\n      }\n      this._writableState.destroyed = value;\n    }\n  });\n  Writable.prototype.destroy = destroyImpl.destroy;\n  Writable.prototype._undestroy = destroyImpl.undestroy;\n  Writable.prototype._destroy = function(err, cb) {\n    cb(err);\n  };\n  return _stream_writable;\n}\nvar _stream_duplex;\nvar hasRequired_stream_duplex;\nfunction require_stream_duplex() {\n  if (hasRequired_stream_duplex) return _stream_duplex;\n  hasRequired_stream_duplex = 1;\n  var objectKeys = Object.keys || function(obj) {\n    var keys2 = [];\n    for (var key in obj) {\n      keys2.push(key);\n    }\n    return keys2;\n  };\n  _stream_duplex = Duplex;\n  var Readable = require_stream_readable();\n  var Writable = require_stream_writable();\n  inherits_browserExports(Duplex, Readable);\n  {\n    var keys = objectKeys(Writable.prototype);\n    for (var v = 0; v < keys.length; v++) {\n      var method = keys[v];\n      if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n    }\n  }\n  function Duplex(options2) {\n    if (!(this instanceof Duplex)) return new Duplex(options2);\n    Readable.call(this, options2);\n    Writable.call(this, options2);\n    this.allowHalfOpen = true;\n    if (options2) {\n      if (options2.readable === false) this.readable = false;\n      if (options2.writable === false) this.writable = false;\n      if (options2.allowHalfOpen === false) {\n        this.allowHalfOpen = false;\n        this.once(\"end\", onend);\n      }\n    }\n  }\n  Object.defineProperty(Duplex.prototype, \"writableHighWaterMark\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n      return this._writableState.highWaterMark;\n    }\n  });\n  Object.defineProperty(Duplex.prototype, \"writableBuffer\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n      return this._writableState && this._writableState.getBuffer();\n    }\n  });\n  Object.defineProperty(Duplex.prototype, \"writableLength\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n      return this._writableState.length;\n    }\n  });\n  function onend() {\n    if (this._writableState.ended) return;\n    process$1.nextTick(onEndNT, this);\n  }\n  function onEndNT(self2) {\n    self2.end();\n  }\n  Object.defineProperty(Duplex.prototype, \"destroyed\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n      if (this._readableState === void 0 || this._writableState === void 0) {\n        return false;\n      }\n      return this._readableState.destroyed && this._writableState.destroyed;\n    },\n    set: function set(value) {\n      if (this._readableState === void 0 || this._writableState === void 0) {\n        return;\n      }\n      this._readableState.destroyed = value;\n      this._writableState.destroyed = value;\n    }\n  });\n  return _stream_duplex;\n}\nvar string_decoder = {};\nvar safeBuffer = { exports: {} };\nvar hasRequiredSafeBuffer;\nfunction requireSafeBuffer() {\n  if (hasRequiredSafeBuffer) return safeBuffer.exports;\n  hasRequiredSafeBuffer = 1;\n  (function(module, exports) {\n    var buffer2 = requireBuffer();\n    var Buffer2 = buffer2.Buffer;\n    function copyProps(src, dst) {\n      for (var key in src) {\n        dst[key] = src[key];\n      }\n    }\n    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {\n      module.exports = buffer2;\n    } else {\n      copyProps(buffer2, exports);\n      exports.Buffer = SafeBuffer;\n    }\n    function SafeBuffer(arg, encodingOrOffset, length) {\n      return Buffer2(arg, encodingOrOffset, length);\n    }\n    copyProps(Buffer2, SafeBuffer);\n    SafeBuffer.from = function(arg, encodingOrOffset, length) {\n      if (typeof arg === \"number\") {\n        throw new TypeError(\"Argument must not be a number\");\n      }\n      return Buffer2(arg, encodingOrOffset, length);\n    };\n    SafeBuffer.alloc = function(size, fill, encoding) {\n      if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n      }\n      var buf = Buffer2(size);\n      if (fill !== void 0) {\n        if (typeof encoding === \"string\") {\n          buf.fill(fill, encoding);\n        } else {\n          buf.fill(fill);\n        }\n      } else {\n        buf.fill(0);\n      }\n      return buf;\n    };\n    SafeBuffer.allocUnsafe = function(size) {\n      if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n      }\n      return Buffer2(size);\n    };\n    SafeBuffer.allocUnsafeSlow = function(size) {\n      if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n      }\n      return buffer2.SlowBuffer(size);\n    };\n  })(safeBuffer, safeBuffer.exports);\n  return safeBuffer.exports;\n}\nvar hasRequiredString_decoder;\nfunction requireString_decoder() {\n  if (hasRequiredString_decoder) return string_decoder;\n  hasRequiredString_decoder = 1;\n  var Buffer2 = requireSafeBuffer().Buffer;\n  var isEncoding = Buffer2.isEncoding || function(encoding) {\n    encoding = \"\" + encoding;\n    switch (encoding && encoding.toLowerCase()) {\n      case \"hex\":\n      case \"utf8\":\n      case \"utf-8\":\n      case \"ascii\":\n      case \"binary\":\n      case \"base64\":\n      case \"ucs2\":\n      case \"ucs-2\":\n      case \"utf16le\":\n      case \"utf-16le\":\n      case \"raw\":\n        return true;\n      default:\n        return false;\n    }\n  };\n  function _normalizeEncoding(enc) {\n    if (!enc) return \"utf8\";\n    var retried;\n    while (true) {\n      switch (enc) {\n        case \"utf8\":\n        case \"utf-8\":\n          return \"utf8\";\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n          return \"utf16le\";\n        case \"latin1\":\n        case \"binary\":\n          return \"latin1\";\n        case \"base64\":\n        case \"ascii\":\n        case \"hex\":\n          return enc;\n        default:\n          if (retried) return;\n          enc = (\"\" + enc).toLowerCase();\n          retried = true;\n      }\n    }\n  }\n  function normalizeEncoding(enc) {\n    var nenc = _normalizeEncoding(enc);\n    if (typeof nenc !== \"string\" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc))) throw new Error(\"Unknown encoding: \" + enc);\n    return nenc || enc;\n  }\n  string_decoder.StringDecoder = StringDecoder;\n  function StringDecoder(encoding) {\n    this.encoding = normalizeEncoding(encoding);\n    var nb;\n    switch (this.encoding) {\n      case \"utf16le\":\n        this.text = utf16Text;\n        this.end = utf16End;\n        nb = 4;\n        break;\n      case \"utf8\":\n        this.fillLast = utf8FillLast;\n        nb = 4;\n        break;\n      case \"base64\":\n        this.text = base64Text;\n        this.end = base64End;\n        nb = 3;\n        break;\n      default:\n        this.write = simpleWrite;\n        this.end = simpleEnd;\n        return;\n    }\n    this.lastNeed = 0;\n    this.lastTotal = 0;\n    this.lastChar = Buffer2.allocUnsafe(nb);\n  }\n  StringDecoder.prototype.write = function(buf) {\n    if (buf.length === 0) return \"\";\n    var r2;\n    var i;\n    if (this.lastNeed) {\n      r2 = this.fillLast(buf);\n      if (r2 === void 0) return \"\";\n      i = this.lastNeed;\n      this.lastNeed = 0;\n    } else {\n      i = 0;\n    }\n    if (i < buf.length) return r2 ? r2 + this.text(buf, i) : this.text(buf, i);\n    return r2 || \"\";\n  };\n  StringDecoder.prototype.end = utf8End;\n  StringDecoder.prototype.text = utf8Text;\n  StringDecoder.prototype.fillLast = function(buf) {\n    if (this.lastNeed <= buf.length) {\n      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n      return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n    }\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n    this.lastNeed -= buf.length;\n  };\n  function utf8CheckByte(byte) {\n    if (byte <= 127) return 0;\n    else if (byte >> 5 === 6) return 2;\n    else if (byte >> 4 === 14) return 3;\n    else if (byte >> 3 === 30) return 4;\n    return byte >> 6 === 2 ? -1 : -2;\n  }\n  function utf8CheckIncomplete(self2, buf, i) {\n    var j = buf.length - 1;\n    if (j < i) return 0;\n    var nb = utf8CheckByte(buf[j]);\n    if (nb >= 0) {\n      if (nb > 0) self2.lastNeed = nb - 1;\n      return nb;\n    }\n    if (--j < i || nb === -2) return 0;\n    nb = utf8CheckByte(buf[j]);\n    if (nb >= 0) {\n      if (nb > 0) self2.lastNeed = nb - 2;\n      return nb;\n    }\n    if (--j < i || nb === -2) return 0;\n    nb = utf8CheckByte(buf[j]);\n    if (nb >= 0) {\n      if (nb > 0) {\n        if (nb === 2) nb = 0;\n        else self2.lastNeed = nb - 3;\n      }\n      return nb;\n    }\n    return 0;\n  }\n  function utf8CheckExtraBytes(self2, buf, p) {\n    if ((buf[0] & 192) !== 128) {\n      self2.lastNeed = 0;\n      return \"�\";\n    }\n    if (self2.lastNeed > 1 && buf.length > 1) {\n      if ((buf[1] & 192) !== 128) {\n        self2.lastNeed = 1;\n        return \"�\";\n      }\n      if (self2.lastNeed > 2 && buf.length > 2) {\n        if ((buf[2] & 192) !== 128) {\n          self2.lastNeed = 2;\n          return \"�\";\n        }\n      }\n    }\n  }\n  function utf8FillLast(buf) {\n    var p = this.lastTotal - this.lastNeed;\n    var r2 = utf8CheckExtraBytes(this, buf);\n    if (r2 !== void 0) return r2;\n    if (this.lastNeed <= buf.length) {\n      buf.copy(this.lastChar, p, 0, this.lastNeed);\n      return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n    }\n    buf.copy(this.lastChar, p, 0, buf.length);\n    this.lastNeed -= buf.length;\n  }\n  function utf8Text(buf, i) {\n    var total = utf8CheckIncomplete(this, buf, i);\n    if (!this.lastNeed) return buf.toString(\"utf8\", i);\n    this.lastTotal = total;\n    var end = buf.length - (total - this.lastNeed);\n    buf.copy(this.lastChar, 0, end);\n    return buf.toString(\"utf8\", i, end);\n  }\n  function utf8End(buf) {\n    var r2 = buf && buf.length ? this.write(buf) : \"\";\n    if (this.lastNeed) return r2 + \"�\";\n    return r2;\n  }\n  function utf16Text(buf, i) {\n    if ((buf.length - i) % 2 === 0) {\n      var r2 = buf.toString(\"utf16le\", i);\n      if (r2) {\n        var c = r2.charCodeAt(r2.length - 1);\n        if (c >= 55296 && c <= 56319) {\n          this.lastNeed = 2;\n          this.lastTotal = 4;\n          this.lastChar[0] = buf[buf.length - 2];\n          this.lastChar[1] = buf[buf.length - 1];\n          return r2.slice(0, -1);\n        }\n      }\n      return r2;\n    }\n    this.lastNeed = 1;\n    this.lastTotal = 2;\n    this.lastChar[0] = buf[buf.length - 1];\n    return buf.toString(\"utf16le\", i, buf.length - 1);\n  }\n  function utf16End(buf) {\n    var r2 = buf && buf.length ? this.write(buf) : \"\";\n    if (this.lastNeed) {\n      var end = this.lastTotal - this.lastNeed;\n      return r2 + this.lastChar.toString(\"utf16le\", 0, end);\n    }\n    return r2;\n  }\n  function base64Text(buf, i) {\n    var n = (buf.length - i) % 3;\n    if (n === 0) return buf.toString(\"base64\", i);\n    this.lastNeed = 3 - n;\n    this.lastTotal = 3;\n    if (n === 1) {\n      this.lastChar[0] = buf[buf.length - 1];\n    } else {\n      this.lastChar[0] = buf[buf.length - 2];\n      this.lastChar[1] = buf[buf.length - 1];\n    }\n    return buf.toString(\"base64\", i, buf.length - n);\n  }\n  function base64End(buf) {\n    var r2 = buf && buf.length ? this.write(buf) : \"\";\n    if (this.lastNeed) return r2 + this.lastChar.toString(\"base64\", 0, 3 - this.lastNeed);\n    return r2;\n  }\n  function simpleWrite(buf) {\n    return buf.toString(this.encoding);\n  }\n  function simpleEnd(buf) {\n    return buf && buf.length ? this.write(buf) : \"\";\n  }\n  return string_decoder;\n}\nvar endOfStream;\nvar hasRequiredEndOfStream;\nfunction requireEndOfStream() {\n  if (hasRequiredEndOfStream) return endOfStream;\n  hasRequiredEndOfStream = 1;\n  var ERR_STREAM_PREMATURE_CLOSE = requireErrorsBrowser().codes.ERR_STREAM_PREMATURE_CLOSE;\n  function once3(callback) {\n    var called = false;\n    return function() {\n      if (called) return;\n      called = true;\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      callback.apply(this, args);\n    };\n  }\n  function noop2() {\n  }\n  function isRequest(stream) {\n    return stream.setHeader && typeof stream.abort === \"function\";\n  }\n  function eos(stream, opts, callback) {\n    if (typeof opts === \"function\") return eos(stream, null, opts);\n    if (!opts) opts = {};\n    callback = once3(callback || noop2);\n    var readable = opts.readable || opts.readable !== false && stream.readable;\n    var writable = opts.writable || opts.writable !== false && stream.writable;\n    var onlegacyfinish = function onlegacyfinish2() {\n      if (!stream.writable) onfinish();\n    };\n    var writableEnded = stream._writableState && stream._writableState.finished;\n    var onfinish = function onfinish2() {\n      writable = false;\n      writableEnded = true;\n      if (!readable) callback.call(stream);\n    };\n    var readableEnded = stream._readableState && stream._readableState.endEmitted;\n    var onend = function onend2() {\n      readable = false;\n      readableEnded = true;\n      if (!writable) callback.call(stream);\n    };\n    var onerror = function onerror2(err) {\n      callback.call(stream, err);\n    };\n    var onclose = function onclose2() {\n      var err;\n      if (readable && !readableEnded) {\n        if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n        return callback.call(stream, err);\n      }\n      if (writable && !writableEnded) {\n        if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n        return callback.call(stream, err);\n      }\n    };\n    var onrequest = function onrequest2() {\n      stream.req.on(\"finish\", onfinish);\n    };\n    if (isRequest(stream)) {\n      stream.on(\"complete\", onfinish);\n      stream.on(\"abort\", onclose);\n      if (stream.req) onrequest();\n      else stream.on(\"request\", onrequest);\n    } else if (writable && !stream._writableState) {\n      stream.on(\"end\", onlegacyfinish);\n      stream.on(\"close\", onlegacyfinish);\n    }\n    stream.on(\"end\", onend);\n    stream.on(\"finish\", onfinish);\n    if (opts.error !== false) stream.on(\"error\", onerror);\n    stream.on(\"close\", onclose);\n    return function() {\n      stream.removeListener(\"complete\", onfinish);\n      stream.removeListener(\"abort\", onclose);\n      stream.removeListener(\"request\", onrequest);\n      if (stream.req) stream.req.removeListener(\"finish\", onfinish);\n      stream.removeListener(\"end\", onlegacyfinish);\n      stream.removeListener(\"close\", onlegacyfinish);\n      stream.removeListener(\"finish\", onfinish);\n      stream.removeListener(\"end\", onend);\n      stream.removeListener(\"error\", onerror);\n      stream.removeListener(\"close\", onclose);\n    };\n  }\n  endOfStream = eos;\n  return endOfStream;\n}\nvar async_iterator;\nvar hasRequiredAsync_iterator;\nfunction requireAsync_iterator() {\n  if (hasRequiredAsync_iterator) return async_iterator;\n  hasRequiredAsync_iterator = 1;\n  var _Object$setPrototypeO;\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n  var finished = requireEndOfStream();\n  var kLastResolve = Symbol(\"lastResolve\");\n  var kLastReject = Symbol(\"lastReject\");\n  var kError = Symbol(\"error\");\n  var kEnded = Symbol(\"ended\");\n  var kLastPromise = Symbol(\"lastPromise\");\n  var kHandlePromise = Symbol(\"handlePromise\");\n  var kStream = Symbol(\"stream\");\n  function createIterResult(value, done) {\n    return {\n      value,\n      done\n    };\n  }\n  function readAndResolve(iter) {\n    var resolve2 = iter[kLastResolve];\n    if (resolve2 !== null) {\n      var data = iter[kStream].read();\n      if (data !== null) {\n        iter[kLastPromise] = null;\n        iter[kLastResolve] = null;\n        iter[kLastReject] = null;\n        resolve2(createIterResult(data, false));\n      }\n    }\n  }\n  function onReadable(iter) {\n    process$1.nextTick(readAndResolve, iter);\n  }\n  function wrapForNext(lastPromise, iter) {\n    return function(resolve2, reject) {\n      lastPromise.then(function() {\n        if (iter[kEnded]) {\n          resolve2(createIterResult(void 0, true));\n          return;\n        }\n        iter[kHandlePromise](resolve2, reject);\n      }, reject);\n    };\n  }\n  var AsyncIteratorPrototype = Object.getPrototypeOf(function() {\n  });\n  var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {\n    get stream() {\n      return this[kStream];\n    },\n    next: function next() {\n      var _this = this;\n      var error = this[kError];\n      if (error !== null) {\n        return Promise.reject(error);\n      }\n      if (this[kEnded]) {\n        return Promise.resolve(createIterResult(void 0, true));\n      }\n      if (this[kStream].destroyed) {\n        return new Promise(function(resolve2, reject) {\n          process$1.nextTick(function() {\n            if (_this[kError]) {\n              reject(_this[kError]);\n            } else {\n              resolve2(createIterResult(void 0, true));\n            }\n          });\n        });\n      }\n      var lastPromise = this[kLastPromise];\n      var promise;\n      if (lastPromise) {\n        promise = new Promise(wrapForNext(lastPromise, this));\n      } else {\n        var data = this[kStream].read();\n        if (data !== null) {\n          return Promise.resolve(createIterResult(data, false));\n        }\n        promise = new Promise(this[kHandlePromise]);\n      }\n      this[kLastPromise] = promise;\n      return promise;\n    }\n  }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {\n    return this;\n  }), _defineProperty(_Object$setPrototypeO, \"return\", function _return() {\n    var _this2 = this;\n    return new Promise(function(resolve2, reject) {\n      _this2[kStream].destroy(null, function(err) {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve2(createIterResult(void 0, true));\n      });\n    });\n  }), _Object$setPrototypeO), AsyncIteratorPrototype);\n  var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {\n    var _Object$create;\n    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {\n      value: stream,\n      writable: true\n    }), _defineProperty(_Object$create, kLastResolve, {\n      value: null,\n      writable: true\n    }), _defineProperty(_Object$create, kLastReject, {\n      value: null,\n      writable: true\n    }), _defineProperty(_Object$create, kError, {\n      value: null,\n      writable: true\n    }), _defineProperty(_Object$create, kEnded, {\n      value: stream._readableState.endEmitted,\n      writable: true\n    }), _defineProperty(_Object$create, kHandlePromise, {\n      value: function value(resolve2, reject) {\n        var data = iterator[kStream].read();\n        if (data) {\n          iterator[kLastPromise] = null;\n          iterator[kLastResolve] = null;\n          iterator[kLastReject] = null;\n          resolve2(createIterResult(data, false));\n        } else {\n          iterator[kLastResolve] = resolve2;\n          iterator[kLastReject] = reject;\n        }\n      },\n      writable: true\n    }), _Object$create));\n    iterator[kLastPromise] = null;\n    finished(stream, function(err) {\n      if (err && err.code !== \"ERR_STREAM_PREMATURE_CLOSE\") {\n        var reject = iterator[kLastReject];\n        if (reject !== null) {\n          iterator[kLastPromise] = null;\n          iterator[kLastResolve] = null;\n          iterator[kLastReject] = null;\n          reject(err);\n        }\n        iterator[kError] = err;\n        return;\n      }\n      var resolve2 = iterator[kLastResolve];\n      if (resolve2 !== null) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        resolve2(createIterResult(void 0, true));\n      }\n      iterator[kEnded] = true;\n    });\n    stream.on(\"readable\", onReadable.bind(null, iterator));\n    return iterator;\n  };\n  async_iterator = createReadableStreamAsyncIterator;\n  return async_iterator;\n}\nvar fromBrowser;\nvar hasRequiredFromBrowser;\nfunction requireFromBrowser() {\n  if (hasRequiredFromBrowser) return fromBrowser;\n  hasRequiredFromBrowser = 1;\n  fromBrowser = function() {\n    throw new Error(\"Readable.from is not available in the browser\");\n  };\n  return fromBrowser;\n}\nvar _stream_readable;\nvar hasRequired_stream_readable;\nfunction require_stream_readable() {\n  if (hasRequired_stream_readable) return _stream_readable;\n  hasRequired_stream_readable = 1;\n  _stream_readable = Readable;\n  var Duplex;\n  Readable.ReadableState = ReadableState;\n  eventsExports.EventEmitter;\n  var EElistenerCount = function EElistenerCount2(emitter, type2) {\n    return emitter.listeners(type2).length;\n  };\n  var Stream2 = requireStreamBrowser();\n  var Buffer2 = requireBuffer().Buffer;\n  var OurUint8Array = commonjsGlobal.Uint8Array || function() {\n  };\n  function _uint8ArrayToBuffer(chunk) {\n    return Buffer2.from(chunk);\n  }\n  function _isUint8Array(obj) {\n    return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;\n  }\n  var debugUtil = requireUtil();\n  var debug;\n  if (debugUtil && debugUtil.debuglog) {\n    debug = debugUtil.debuglog(\"stream\");\n  } else {\n    debug = function debug2() {\n    };\n  }\n  var BufferList = requireBuffer_list();\n  var destroyImpl = requireDestroy();\n  var _require = requireState(), getHighWaterMark = _require.getHighWaterMark;\n  var _require$codes = requireErrorsBrowser().codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;\n  var StringDecoder;\n  var createReadableStreamAsyncIterator;\n  var from;\n  inherits_browserExports(Readable, Stream2);\n  var errorOrDestroy = destroyImpl.errorOrDestroy;\n  var kProxyEvents = [\"error\", \"close\", \"destroy\", \"pause\", \"resume\"];\n  function prependListener2(emitter, event, fn) {\n    if (typeof emitter.prependListener === \"function\") return emitter.prependListener(event, fn);\n    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);\n    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);\n    else emitter._events[event] = [fn, emitter._events[event]];\n  }\n  function ReadableState(options2, stream, isDuplex) {\n    Duplex = Duplex || require_stream_duplex();\n    options2 = options2 || {};\n    if (typeof isDuplex !== \"boolean\") isDuplex = stream instanceof Duplex;\n    this.objectMode = !!options2.objectMode;\n    if (isDuplex) this.objectMode = this.objectMode || !!options2.readableObjectMode;\n    this.highWaterMark = getHighWaterMark(this, options2, \"readableHighWaterMark\", isDuplex);\n    this.buffer = new BufferList();\n    this.length = 0;\n    this.pipes = null;\n    this.pipesCount = 0;\n    this.flowing = null;\n    this.ended = false;\n    this.endEmitted = false;\n    this.reading = false;\n    this.sync = true;\n    this.needReadable = false;\n    this.emittedReadable = false;\n    this.readableListening = false;\n    this.resumeScheduled = false;\n    this.paused = true;\n    this.emitClose = options2.emitClose !== false;\n    this.autoDestroy = !!options2.autoDestroy;\n    this.destroyed = false;\n    this.defaultEncoding = options2.defaultEncoding || \"utf8\";\n    this.awaitDrain = 0;\n    this.readingMore = false;\n    this.decoder = null;\n    this.encoding = null;\n    if (options2.encoding) {\n      if (!StringDecoder) StringDecoder = requireString_decoder().StringDecoder;\n      this.decoder = new StringDecoder(options2.encoding);\n      this.encoding = options2.encoding;\n    }\n  }\n  function Readable(options2) {\n    Duplex = Duplex || require_stream_duplex();\n    if (!(this instanceof Readable)) return new Readable(options2);\n    var isDuplex = this instanceof Duplex;\n    this._readableState = new ReadableState(options2, this, isDuplex);\n    this.readable = true;\n    if (options2) {\n      if (typeof options2.read === \"function\") this._read = options2.read;\n      if (typeof options2.destroy === \"function\") this._destroy = options2.destroy;\n    }\n    Stream2.call(this);\n  }\n  Object.defineProperty(Readable.prototype, \"destroyed\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n      if (this._readableState === void 0) {\n        return false;\n      }\n      return this._readableState.destroyed;\n    },\n    set: function set(value) {\n      if (!this._readableState) {\n        return;\n      }\n      this._readableState.destroyed = value;\n    }\n  });\n  Readable.prototype.destroy = destroyImpl.destroy;\n  Readable.prototype._undestroy = destroyImpl.undestroy;\n  Readable.prototype._destroy = function(err, cb) {\n    cb(err);\n  };\n  Readable.prototype.push = function(chunk, encoding) {\n    var state2 = this._readableState;\n    var skipChunkCheck;\n    if (!state2.objectMode) {\n      if (typeof chunk === \"string\") {\n        encoding = encoding || state2.defaultEncoding;\n        if (encoding !== state2.encoding) {\n          chunk = Buffer2.from(chunk, encoding);\n          encoding = \"\";\n        }\n        skipChunkCheck = true;\n      }\n    } else {\n      skipChunkCheck = true;\n    }\n    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n  };\n  Readable.prototype.unshift = function(chunk) {\n    return readableAddChunk(this, chunk, null, true, false);\n  };\n  function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n    debug(\"readableAddChunk\", chunk);\n    var state2 = stream._readableState;\n    if (chunk === null) {\n      state2.reading = false;\n      onEofChunk(stream, state2);\n    } else {\n      var er;\n      if (!skipChunkCheck) er = chunkInvalid(state2, chunk);\n      if (er) {\n        errorOrDestroy(stream, er);\n      } else if (state2.objectMode || chunk && chunk.length > 0) {\n        if (typeof chunk !== \"string\" && !state2.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {\n          chunk = _uint8ArrayToBuffer(chunk);\n        }\n        if (addToFront) {\n          if (state2.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());\n          else addChunk(stream, state2, chunk, true);\n        } else if (state2.ended) {\n          errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\n        } else if (state2.destroyed) {\n          return false;\n        } else {\n          state2.reading = false;\n          if (state2.decoder && !encoding) {\n            chunk = state2.decoder.write(chunk);\n            if (state2.objectMode || chunk.length !== 0) addChunk(stream, state2, chunk, false);\n            else maybeReadMore(stream, state2);\n          } else {\n            addChunk(stream, state2, chunk, false);\n          }\n        }\n      } else if (!addToFront) {\n        state2.reading = false;\n        maybeReadMore(stream, state2);\n      }\n    }\n    return !state2.ended && (state2.length < state2.highWaterMark || state2.length === 0);\n  }\n  function addChunk(stream, state2, chunk, addToFront) {\n    if (state2.flowing && state2.length === 0 && !state2.sync) {\n      state2.awaitDrain = 0;\n      stream.emit(\"data\", chunk);\n    } else {\n      state2.length += state2.objectMode ? 1 : chunk.length;\n      if (addToFront) state2.buffer.unshift(chunk);\n      else state2.buffer.push(chunk);\n      if (state2.needReadable) emitReadable(stream);\n    }\n    maybeReadMore(stream, state2);\n  }\n  function chunkInvalid(state2, chunk) {\n    var er;\n    if (!_isUint8Array(chunk) && typeof chunk !== \"string\" && chunk !== void 0 && !state2.objectMode) {\n      er = new ERR_INVALID_ARG_TYPE(\"chunk\", [\"string\", \"Buffer\", \"Uint8Array\"], chunk);\n    }\n    return er;\n  }\n  Readable.prototype.isPaused = function() {\n    return this._readableState.flowing === false;\n  };\n  Readable.prototype.setEncoding = function(enc) {\n    if (!StringDecoder) StringDecoder = requireString_decoder().StringDecoder;\n    var decoder = new StringDecoder(enc);\n    this._readableState.decoder = decoder;\n    this._readableState.encoding = this._readableState.decoder.encoding;\n    var p = this._readableState.buffer.head;\n    var content = \"\";\n    while (p !== null) {\n      content += decoder.write(p.data);\n      p = p.next;\n    }\n    this._readableState.buffer.clear();\n    if (content !== \"\") this._readableState.buffer.push(content);\n    this._readableState.length = content.length;\n    return this;\n  };\n  var MAX_HWM = 1073741824;\n  function computeNewHighWaterMark(n) {\n    if (n >= MAX_HWM) {\n      n = MAX_HWM;\n    } else {\n      n--;\n      n |= n >>> 1;\n      n |= n >>> 2;\n      n |= n >>> 4;\n      n |= n >>> 8;\n      n |= n >>> 16;\n      n++;\n    }\n    return n;\n  }\n  function howMuchToRead(n, state2) {\n    if (n <= 0 || state2.length === 0 && state2.ended) return 0;\n    if (state2.objectMode) return 1;\n    if (n !== n) {\n      if (state2.flowing && state2.length) return state2.buffer.head.data.length;\n      else return state2.length;\n    }\n    if (n > state2.highWaterMark) state2.highWaterMark = computeNewHighWaterMark(n);\n    if (n <= state2.length) return n;\n    if (!state2.ended) {\n      state2.needReadable = true;\n      return 0;\n    }\n    return state2.length;\n  }\n  Readable.prototype.read = function(n) {\n    debug(\"read\", n);\n    n = parseInt(n, 10);\n    var state2 = this._readableState;\n    var nOrig = n;\n    if (n !== 0) state2.emittedReadable = false;\n    if (n === 0 && state2.needReadable && ((state2.highWaterMark !== 0 ? state2.length >= state2.highWaterMark : state2.length > 0) || state2.ended)) {\n      debug(\"read: emitReadable\", state2.length, state2.ended);\n      if (state2.length === 0 && state2.ended) endReadable(this);\n      else emitReadable(this);\n      return null;\n    }\n    n = howMuchToRead(n, state2);\n    if (n === 0 && state2.ended) {\n      if (state2.length === 0) endReadable(this);\n      return null;\n    }\n    var doRead = state2.needReadable;\n    debug(\"need readable\", doRead);\n    if (state2.length === 0 || state2.length - n < state2.highWaterMark) {\n      doRead = true;\n      debug(\"length less than watermark\", doRead);\n    }\n    if (state2.ended || state2.reading) {\n      doRead = false;\n      debug(\"reading or ended\", doRead);\n    } else if (doRead) {\n      debug(\"do read\");\n      state2.reading = true;\n      state2.sync = true;\n      if (state2.length === 0) state2.needReadable = true;\n      this._read(state2.highWaterMark);\n      state2.sync = false;\n      if (!state2.reading) n = howMuchToRead(nOrig, state2);\n    }\n    var ret;\n    if (n > 0) ret = fromList(n, state2);\n    else ret = null;\n    if (ret === null) {\n      state2.needReadable = state2.length <= state2.highWaterMark;\n      n = 0;\n    } else {\n      state2.length -= n;\n      state2.awaitDrain = 0;\n    }\n    if (state2.length === 0) {\n      if (!state2.ended) state2.needReadable = true;\n      if (nOrig !== n && state2.ended) endReadable(this);\n    }\n    if (ret !== null) this.emit(\"data\", ret);\n    return ret;\n  };\n  function onEofChunk(stream, state2) {\n    debug(\"onEofChunk\");\n    if (state2.ended) return;\n    if (state2.decoder) {\n      var chunk = state2.decoder.end();\n      if (chunk && chunk.length) {\n        state2.buffer.push(chunk);\n        state2.length += state2.objectMode ? 1 : chunk.length;\n      }\n    }\n    state2.ended = true;\n    if (state2.sync) {\n      emitReadable(stream);\n    } else {\n      state2.needReadable = false;\n      if (!state2.emittedReadable) {\n        state2.emittedReadable = true;\n        emitReadable_(stream);\n      }\n    }\n  }\n  function emitReadable(stream) {\n    var state2 = stream._readableState;\n    debug(\"emitReadable\", state2.needReadable, state2.emittedReadable);\n    state2.needReadable = false;\n    if (!state2.emittedReadable) {\n      debug(\"emitReadable\", state2.flowing);\n      state2.emittedReadable = true;\n      process$1.nextTick(emitReadable_, stream);\n    }\n  }\n  function emitReadable_(stream) {\n    var state2 = stream._readableState;\n    debug(\"emitReadable_\", state2.destroyed, state2.length, state2.ended);\n    if (!state2.destroyed && (state2.length || state2.ended)) {\n      stream.emit(\"readable\");\n      state2.emittedReadable = false;\n    }\n    state2.needReadable = !state2.flowing && !state2.ended && state2.length <= state2.highWaterMark;\n    flow(stream);\n  }\n  function maybeReadMore(stream, state2) {\n    if (!state2.readingMore) {\n      state2.readingMore = true;\n      process$1.nextTick(maybeReadMore_, stream, state2);\n    }\n  }\n  function maybeReadMore_(stream, state2) {\n    while (!state2.reading && !state2.ended && (state2.length < state2.highWaterMark || state2.flowing && state2.length === 0)) {\n      var len = state2.length;\n      debug(\"maybeReadMore read 0\");\n      stream.read(0);\n      if (len === state2.length)\n        break;\n    }\n    state2.readingMore = false;\n  }\n  Readable.prototype._read = function(n) {\n    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED(\"_read()\"));\n  };\n  Readable.prototype.pipe = function(dest, pipeOpts) {\n    var src = this;\n    var state2 = this._readableState;\n    switch (state2.pipesCount) {\n      case 0:\n        state2.pipes = dest;\n        break;\n      case 1:\n        state2.pipes = [state2.pipes, dest];\n        break;\n      default:\n        state2.pipes.push(dest);\n        break;\n    }\n    state2.pipesCount += 1;\n    debug(\"pipe count=%d opts=%j\", state2.pipesCount, pipeOpts);\n    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process$1.stdout && dest !== process$1.stderr;\n    var endFn = doEnd ? onend : unpipe;\n    if (state2.endEmitted) process$1.nextTick(endFn);\n    else src.once(\"end\", endFn);\n    dest.on(\"unpipe\", onunpipe);\n    function onunpipe(readable, unpipeInfo) {\n      debug(\"onunpipe\");\n      if (readable === src) {\n        if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n          unpipeInfo.hasUnpiped = true;\n          cleanup();\n        }\n      }\n    }\n    function onend() {\n      debug(\"onend\");\n      dest.end();\n    }\n    var ondrain = pipeOnDrain(src);\n    dest.on(\"drain\", ondrain);\n    var cleanedUp = false;\n    function cleanup() {\n      debug(\"cleanup\");\n      dest.removeListener(\"close\", onclose);\n      dest.removeListener(\"finish\", onfinish);\n      dest.removeListener(\"drain\", ondrain);\n      dest.removeListener(\"error\", onerror);\n      dest.removeListener(\"unpipe\", onunpipe);\n      src.removeListener(\"end\", onend);\n      src.removeListener(\"end\", unpipe);\n      src.removeListener(\"data\", ondata);\n      cleanedUp = true;\n      if (state2.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n    }\n    src.on(\"data\", ondata);\n    function ondata(chunk) {\n      debug(\"ondata\");\n      var ret = dest.write(chunk);\n      debug(\"dest.write\", ret);\n      if (ret === false) {\n        if ((state2.pipesCount === 1 && state2.pipes === dest || state2.pipesCount > 1 && indexOf(state2.pipes, dest) !== -1) && !cleanedUp) {\n          debug(\"false write response, pause\", state2.awaitDrain);\n          state2.awaitDrain++;\n        }\n        src.pause();\n      }\n    }\n    function onerror(er) {\n      debug(\"onerror\", er);\n      unpipe();\n      dest.removeListener(\"error\", onerror);\n      if (EElistenerCount(dest, \"error\") === 0) errorOrDestroy(dest, er);\n    }\n    prependListener2(dest, \"error\", onerror);\n    function onclose() {\n      dest.removeListener(\"finish\", onfinish);\n      unpipe();\n    }\n    dest.once(\"close\", onclose);\n    function onfinish() {\n      debug(\"onfinish\");\n      dest.removeListener(\"close\", onclose);\n      unpipe();\n    }\n    dest.once(\"finish\", onfinish);\n    function unpipe() {\n      debug(\"unpipe\");\n      src.unpipe(dest);\n    }\n    dest.emit(\"pipe\", src);\n    if (!state2.flowing) {\n      debug(\"pipe resume\");\n      src.resume();\n    }\n    return dest;\n  };\n  function pipeOnDrain(src) {\n    return function pipeOnDrainFunctionResult() {\n      var state2 = src._readableState;\n      debug(\"pipeOnDrain\", state2.awaitDrain);\n      if (state2.awaitDrain) state2.awaitDrain--;\n      if (state2.awaitDrain === 0 && EElistenerCount(src, \"data\")) {\n        state2.flowing = true;\n        flow(src);\n      }\n    };\n  }\n  Readable.prototype.unpipe = function(dest) {\n    var state2 = this._readableState;\n    var unpipeInfo = {\n      hasUnpiped: false\n    };\n    if (state2.pipesCount === 0) return this;\n    if (state2.pipesCount === 1) {\n      if (dest && dest !== state2.pipes) return this;\n      if (!dest) dest = state2.pipes;\n      state2.pipes = null;\n      state2.pipesCount = 0;\n      state2.flowing = false;\n      if (dest) dest.emit(\"unpipe\", this, unpipeInfo);\n      return this;\n    }\n    if (!dest) {\n      var dests = state2.pipes;\n      var len = state2.pipesCount;\n      state2.pipes = null;\n      state2.pipesCount = 0;\n      state2.flowing = false;\n      for (var i = 0; i < len; i++) {\n        dests[i].emit(\"unpipe\", this, {\n          hasUnpiped: false\n        });\n      }\n      return this;\n    }\n    var index = indexOf(state2.pipes, dest);\n    if (index === -1) return this;\n    state2.pipes.splice(index, 1);\n    state2.pipesCount -= 1;\n    if (state2.pipesCount === 1) state2.pipes = state2.pipes[0];\n    dest.emit(\"unpipe\", this, unpipeInfo);\n    return this;\n  };\n  Readable.prototype.on = function(ev, fn) {\n    var res = Stream2.prototype.on.call(this, ev, fn);\n    var state2 = this._readableState;\n    if (ev === \"data\") {\n      state2.readableListening = this.listenerCount(\"readable\") > 0;\n      if (state2.flowing !== false) this.resume();\n    } else if (ev === \"readable\") {\n      if (!state2.endEmitted && !state2.readableListening) {\n        state2.readableListening = state2.needReadable = true;\n        state2.flowing = false;\n        state2.emittedReadable = false;\n        debug(\"on readable\", state2.length, state2.reading);\n        if (state2.length) {\n          emitReadable(this);\n        } else if (!state2.reading) {\n          process$1.nextTick(nReadingNextTick, this);\n        }\n      }\n    }\n    return res;\n  };\n  Readable.prototype.addListener = Readable.prototype.on;\n  Readable.prototype.removeListener = function(ev, fn) {\n    var res = Stream2.prototype.removeListener.call(this, ev, fn);\n    if (ev === \"readable\") {\n      process$1.nextTick(updateReadableListening, this);\n    }\n    return res;\n  };\n  Readable.prototype.removeAllListeners = function(ev) {\n    var res = Stream2.prototype.removeAllListeners.apply(this, arguments);\n    if (ev === \"readable\" || ev === void 0) {\n      process$1.nextTick(updateReadableListening, this);\n    }\n    return res;\n  };\n  function updateReadableListening(self2) {\n    var state2 = self2._readableState;\n    state2.readableListening = self2.listenerCount(\"readable\") > 0;\n    if (state2.resumeScheduled && !state2.paused) {\n      state2.flowing = true;\n    } else if (self2.listenerCount(\"data\") > 0) {\n      self2.resume();\n    }\n  }\n  function nReadingNextTick(self2) {\n    debug(\"readable nexttick read 0\");\n    self2.read(0);\n  }\n  Readable.prototype.resume = function() {\n    var state2 = this._readableState;\n    if (!state2.flowing) {\n      debug(\"resume\");\n      state2.flowing = !state2.readableListening;\n      resume(this, state2);\n    }\n    state2.paused = false;\n    return this;\n  };\n  function resume(stream, state2) {\n    if (!state2.resumeScheduled) {\n      state2.resumeScheduled = true;\n      process$1.nextTick(resume_, stream, state2);\n    }\n  }\n  function resume_(stream, state2) {\n    debug(\"resume\", state2.reading);\n    if (!state2.reading) {\n      stream.read(0);\n    }\n    state2.resumeScheduled = false;\n    stream.emit(\"resume\");\n    flow(stream);\n    if (state2.flowing && !state2.reading) stream.read(0);\n  }\n  Readable.prototype.pause = function() {\n    debug(\"call pause flowing=%j\", this._readableState.flowing);\n    if (this._readableState.flowing !== false) {\n      debug(\"pause\");\n      this._readableState.flowing = false;\n      this.emit(\"pause\");\n    }\n    this._readableState.paused = true;\n    return this;\n  };\n  function flow(stream) {\n    var state2 = stream._readableState;\n    debug(\"flow\", state2.flowing);\n    while (state2.flowing && stream.read() !== null) {\n    }\n  }\n  Readable.prototype.wrap = function(stream) {\n    var _this = this;\n    var state2 = this._readableState;\n    var paused = false;\n    stream.on(\"end\", function() {\n      debug(\"wrapped end\");\n      if (state2.decoder && !state2.ended) {\n        var chunk = state2.decoder.end();\n        if (chunk && chunk.length) _this.push(chunk);\n      }\n      _this.push(null);\n    });\n    stream.on(\"data\", function(chunk) {\n      debug(\"wrapped data\");\n      if (state2.decoder) chunk = state2.decoder.write(chunk);\n      if (state2.objectMode && (chunk === null || chunk === void 0)) return;\n      else if (!state2.objectMode && (!chunk || !chunk.length)) return;\n      var ret = _this.push(chunk);\n      if (!ret) {\n        paused = true;\n        stream.pause();\n      }\n    });\n    for (var i in stream) {\n      if (this[i] === void 0 && typeof stream[i] === \"function\") {\n        this[i] = /* @__PURE__ */ function methodWrap(method) {\n          return function methodWrapReturnFunction() {\n            return stream[method].apply(stream, arguments);\n          };\n        }(i);\n      }\n    }\n    for (var n = 0; n < kProxyEvents.length; n++) {\n      stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n    }\n    this._read = function(n2) {\n      debug(\"wrapped _read\", n2);\n      if (paused) {\n        paused = false;\n        stream.resume();\n      }\n    };\n    return this;\n  };\n  if (typeof Symbol === \"function\") {\n    Readable.prototype[Symbol.asyncIterator] = function() {\n      if (createReadableStreamAsyncIterator === void 0) {\n        createReadableStreamAsyncIterator = requireAsync_iterator();\n      }\n      return createReadableStreamAsyncIterator(this);\n    };\n  }\n  Object.defineProperty(Readable.prototype, \"readableHighWaterMark\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n      return this._readableState.highWaterMark;\n    }\n  });\n  Object.defineProperty(Readable.prototype, \"readableBuffer\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n      return this._readableState && this._readableState.buffer;\n    }\n  });\n  Object.defineProperty(Readable.prototype, \"readableFlowing\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n      return this._readableState.flowing;\n    },\n    set: function set(state2) {\n      if (this._readableState) {\n        this._readableState.flowing = state2;\n      }\n    }\n  });\n  Readable._fromList = fromList;\n  Object.defineProperty(Readable.prototype, \"readableLength\", {\n    // making it explicit this property is not enumerable\n    // because otherwise some prototype manipulation in\n    // userland will fail\n    enumerable: false,\n    get: function get() {\n      return this._readableState.length;\n    }\n  });\n  function fromList(n, state2) {\n    if (state2.length === 0) return null;\n    var ret;\n    if (state2.objectMode) ret = state2.buffer.shift();\n    else if (!n || n >= state2.length) {\n      if (state2.decoder) ret = state2.buffer.join(\"\");\n      else if (state2.buffer.length === 1) ret = state2.buffer.first();\n      else ret = state2.buffer.concat(state2.length);\n      state2.buffer.clear();\n    } else {\n      ret = state2.buffer.consume(n, state2.decoder);\n    }\n    return ret;\n  }\n  function endReadable(stream) {\n    var state2 = stream._readableState;\n    debug(\"endReadable\", state2.endEmitted);\n    if (!state2.endEmitted) {\n      state2.ended = true;\n      process$1.nextTick(endReadableNT, state2, stream);\n    }\n  }\n  function endReadableNT(state2, stream) {\n    debug(\"endReadableNT\", state2.endEmitted, state2.length);\n    if (!state2.endEmitted && state2.length === 0) {\n      state2.endEmitted = true;\n      stream.readable = false;\n      stream.emit(\"end\");\n      if (state2.autoDestroy) {\n        var wState = stream._writableState;\n        if (!wState || wState.autoDestroy && wState.finished) {\n          stream.destroy();\n        }\n      }\n    }\n  }\n  if (typeof Symbol === \"function\") {\n    Readable.from = function(iterable, opts) {\n      if (from === void 0) {\n        from = requireFromBrowser();\n      }\n      return from(Readable, iterable, opts);\n    };\n  }\n  function indexOf(xs, x) {\n    for (var i = 0, l = xs.length; i < l; i++) {\n      if (xs[i] === x) return i;\n    }\n    return -1;\n  }\n  return _stream_readable;\n}\nvar _stream_transform;\nvar hasRequired_stream_transform;\nfunction require_stream_transform() {\n  if (hasRequired_stream_transform) return _stream_transform;\n  hasRequired_stream_transform = 1;\n  _stream_transform = Transform;\n  var _require$codes = requireErrorsBrowser().codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;\n  var Duplex = require_stream_duplex();\n  inherits_browserExports(Transform, Duplex);\n  function afterTransform(er, data) {\n    var ts = this._transformState;\n    ts.transforming = false;\n    var cb = ts.writecb;\n    if (cb === null) {\n      return this.emit(\"error\", new ERR_MULTIPLE_CALLBACK());\n    }\n    ts.writechunk = null;\n    ts.writecb = null;\n    if (data != null)\n      this.push(data);\n    cb(er);\n    var rs = this._readableState;\n    rs.reading = false;\n    if (rs.needReadable || rs.length < rs.highWaterMark) {\n      this._read(rs.highWaterMark);\n    }\n  }\n  function Transform(options2) {\n    if (!(this instanceof Transform)) return new Transform(options2);\n    Duplex.call(this, options2);\n    this._transformState = {\n      afterTransform: afterTransform.bind(this),\n      needTransform: false,\n      transforming: false,\n      writecb: null,\n      writechunk: null,\n      writeencoding: null\n    };\n    this._readableState.needReadable = true;\n    this._readableState.sync = false;\n    if (options2) {\n      if (typeof options2.transform === \"function\") this._transform = options2.transform;\n      if (typeof options2.flush === \"function\") this._flush = options2.flush;\n    }\n    this.on(\"prefinish\", prefinish);\n  }\n  function prefinish() {\n    var _this = this;\n    if (typeof this._flush === \"function\" && !this._readableState.destroyed) {\n      this._flush(function(er, data) {\n        done(_this, er, data);\n      });\n    } else {\n      done(this, null, null);\n    }\n  }\n  Transform.prototype.push = function(chunk, encoding) {\n    this._transformState.needTransform = false;\n    return Duplex.prototype.push.call(this, chunk, encoding);\n  };\n  Transform.prototype._transform = function(chunk, encoding, cb) {\n    cb(new ERR_METHOD_NOT_IMPLEMENTED(\"_transform()\"));\n  };\n  Transform.prototype._write = function(chunk, encoding, cb) {\n    var ts = this._transformState;\n    ts.writecb = cb;\n    ts.writechunk = chunk;\n    ts.writeencoding = encoding;\n    if (!ts.transforming) {\n      var rs = this._readableState;\n      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n    }\n  };\n  Transform.prototype._read = function(n) {\n    var ts = this._transformState;\n    if (ts.writechunk !== null && !ts.transforming) {\n      ts.transforming = true;\n      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n    } else {\n      ts.needTransform = true;\n    }\n  };\n  Transform.prototype._destroy = function(err, cb) {\n    Duplex.prototype._destroy.call(this, err, function(err2) {\n      cb(err2);\n    });\n  };\n  function done(stream, er, data) {\n    if (er) return stream.emit(\"error\", er);\n    if (data != null)\n      stream.push(data);\n    if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();\n    if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\n    return stream.push(null);\n  }\n  return _stream_transform;\n}\nvar _stream_passthrough;\nvar hasRequired_stream_passthrough;\nfunction require_stream_passthrough() {\n  if (hasRequired_stream_passthrough) return _stream_passthrough;\n  hasRequired_stream_passthrough = 1;\n  _stream_passthrough = PassThrough;\n  var Transform = require_stream_transform();\n  inherits_browserExports(PassThrough, Transform);\n  function PassThrough(options2) {\n    if (!(this instanceof PassThrough)) return new PassThrough(options2);\n    Transform.call(this, options2);\n  }\n  PassThrough.prototype._transform = function(chunk, encoding, cb) {\n    cb(null, chunk);\n  };\n  return _stream_passthrough;\n}\nvar pipeline_1;\nvar hasRequiredPipeline;\nfunction requirePipeline() {\n  if (hasRequiredPipeline) return pipeline_1;\n  hasRequiredPipeline = 1;\n  var eos;\n  function once3(callback) {\n    var called = false;\n    return function() {\n      if (called) return;\n      called = true;\n      callback.apply(void 0, arguments);\n    };\n  }\n  var _require$codes = requireErrorsBrowser().codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\n  function noop2(err) {\n    if (err) throw err;\n  }\n  function isRequest(stream) {\n    return stream.setHeader && typeof stream.abort === \"function\";\n  }\n  function destroyer(stream, reading, writing, callback) {\n    callback = once3(callback);\n    var closed = false;\n    stream.on(\"close\", function() {\n      closed = true;\n    });\n    if (eos === void 0) eos = requireEndOfStream();\n    eos(stream, {\n      readable: reading,\n      writable: writing\n    }, function(err) {\n      if (err) return callback(err);\n      closed = true;\n      callback();\n    });\n    var destroyed = false;\n    return function(err) {\n      if (closed) return;\n      if (destroyed) return;\n      destroyed = true;\n      if (isRequest(stream)) return stream.abort();\n      if (typeof stream.destroy === \"function\") return stream.destroy();\n      callback(err || new ERR_STREAM_DESTROYED(\"pipe\"));\n    };\n  }\n  function call(fn) {\n    fn();\n  }\n  function pipe(from, to) {\n    return from.pipe(to);\n  }\n  function popCallback(streams) {\n    if (!streams.length) return noop2;\n    if (typeof streams[streams.length - 1] !== \"function\") return noop2;\n    return streams.pop();\n  }\n  function pipeline() {\n    for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {\n      streams[_key] = arguments[_key];\n    }\n    var callback = popCallback(streams);\n    if (Array.isArray(streams[0])) streams = streams[0];\n    if (streams.length < 2) {\n      throw new ERR_MISSING_ARGS(\"streams\");\n    }\n    var error;\n    var destroys = streams.map(function(stream, i) {\n      var reading = i < streams.length - 1;\n      var writing = i > 0;\n      return destroyer(stream, reading, writing, function(err) {\n        if (!error) error = err;\n        if (err) destroys.forEach(call);\n        if (reading) return;\n        destroys.forEach(call);\n        callback(error);\n      });\n    });\n    return streams.reduce(pipe);\n  }\n  pipeline_1 = pipeline;\n  return pipeline_1;\n}\nvar streamBrowserify = Stream$1;\nvar EE = eventsExports.EventEmitter;\nvar inherits$1 = inherits_browserExports;\ninherits$1(Stream$1, EE);\nStream$1.Readable = require_stream_readable();\nStream$1.Writable = require_stream_writable();\nStream$1.Duplex = require_stream_duplex();\nStream$1.Transform = require_stream_transform();\nStream$1.PassThrough = require_stream_passthrough();\nStream$1.finished = requireEndOfStream();\nStream$1.pipeline = requirePipeline();\nStream$1.Stream = Stream$1;\nfunction Stream$1() {\n  EE.call(this);\n}\nStream$1.prototype.pipe = function(dest, options2) {\n  var source = this;\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n  source.on(\"data\", ondata);\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n  dest.on(\"drain\", ondrain);\n  if (!dest._isStdio && (!options2 || options2.end !== false)) {\n    source.on(\"end\", onend);\n    source.on(\"close\", onclose);\n  }\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n    dest.end();\n  }\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n    if (typeof dest.destroy === \"function\") dest.destroy();\n  }\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, \"error\") === 0) {\n      throw er;\n    }\n  }\n  source.on(\"error\", onerror);\n  dest.on(\"error\", onerror);\n  function cleanup() {\n    source.removeListener(\"data\", ondata);\n    dest.removeListener(\"drain\", ondrain);\n    source.removeListener(\"end\", onend);\n    source.removeListener(\"close\", onclose);\n    source.removeListener(\"error\", onerror);\n    dest.removeListener(\"error\", onerror);\n    source.removeListener(\"end\", cleanup);\n    source.removeListener(\"close\", cleanup);\n    dest.removeListener(\"close\", cleanup);\n  }\n  source.on(\"end\", cleanup);\n  source.on(\"close\", cleanup);\n  dest.on(\"close\", cleanup);\n  dest.emit(\"pipe\", source);\n  return dest;\n};\n(function(exports) {\n  (function(sax2) {\n    sax2.parser = function(strict, opt) {\n      return new SAXParser(strict, opt);\n    };\n    sax2.SAXParser = SAXParser;\n    sax2.SAXStream = SAXStream;\n    sax2.createStream = createStream;\n    sax2.MAX_BUFFER_LENGTH = 64 * 1024;\n    var buffers = [\n      \"comment\",\n      \"sgmlDecl\",\n      \"textNode\",\n      \"tagName\",\n      \"doctype\",\n      \"procInstName\",\n      \"procInstBody\",\n      \"entity\",\n      \"attribName\",\n      \"attribValue\",\n      \"cdata\",\n      \"script\"\n    ];\n    sax2.EVENTS = [\n      \"text\",\n      \"processinginstruction\",\n      \"sgmldeclaration\",\n      \"doctype\",\n      \"comment\",\n      \"opentagstart\",\n      \"attribute\",\n      \"opentag\",\n      \"closetag\",\n      \"opencdata\",\n      \"cdata\",\n      \"closecdata\",\n      \"error\",\n      \"end\",\n      \"ready\",\n      \"script\",\n      \"opennamespace\",\n      \"closenamespace\"\n    ];\n    function SAXParser(strict, opt) {\n      if (!(this instanceof SAXParser)) {\n        return new SAXParser(strict, opt);\n      }\n      var parser = this;\n      clearBuffers(parser);\n      parser.q = parser.c = \"\";\n      parser.bufferCheckPosition = sax2.MAX_BUFFER_LENGTH;\n      parser.opt = opt || {};\n      parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;\n      parser.looseCase = parser.opt.lowercase ? \"toLowerCase\" : \"toUpperCase\";\n      parser.tags = [];\n      parser.closed = parser.closedRoot = parser.sawRoot = false;\n      parser.tag = parser.error = null;\n      parser.strict = !!strict;\n      parser.noscript = !!(strict || parser.opt.noscript);\n      parser.state = S.BEGIN;\n      parser.strictEntities = parser.opt.strictEntities;\n      parser.ENTITIES = parser.strictEntities ? Object.create(sax2.XML_ENTITIES) : Object.create(sax2.ENTITIES);\n      parser.attribList = [];\n      if (parser.opt.xmlns) {\n        parser.ns = Object.create(rootNS);\n      }\n      parser.trackPosition = parser.opt.position !== false;\n      if (parser.trackPosition) {\n        parser.position = parser.line = parser.column = 0;\n      }\n      emit2(parser, \"onready\");\n    }\n    if (!Object.create) {\n      Object.create = function(o) {\n        function F() {\n        }\n        F.prototype = o;\n        var newf = new F();\n        return newf;\n      };\n    }\n    if (!Object.keys) {\n      Object.keys = function(o) {\n        var a = [];\n        for (var i in o) if (o.hasOwnProperty(i)) a.push(i);\n        return a;\n      };\n    }\n    function checkBufferLength(parser) {\n      var maxAllowed = Math.max(sax2.MAX_BUFFER_LENGTH, 10);\n      var maxActual = 0;\n      for (var i = 0, l = buffers.length; i < l; i++) {\n        var len = parser[buffers[i]].length;\n        if (len > maxAllowed) {\n          switch (buffers[i]) {\n            case \"textNode\":\n              closeText(parser);\n              break;\n            case \"cdata\":\n              emitNode(parser, \"oncdata\", parser.cdata);\n              parser.cdata = \"\";\n              break;\n            case \"script\":\n              emitNode(parser, \"onscript\", parser.script);\n              parser.script = \"\";\n              break;\n            default:\n              error(parser, \"Max buffer length exceeded: \" + buffers[i]);\n          }\n        }\n        maxActual = Math.max(maxActual, len);\n      }\n      var m = sax2.MAX_BUFFER_LENGTH - maxActual;\n      parser.bufferCheckPosition = m + parser.position;\n    }\n    function clearBuffers(parser) {\n      for (var i = 0, l = buffers.length; i < l; i++) {\n        parser[buffers[i]] = \"\";\n      }\n    }\n    function flushBuffers(parser) {\n      closeText(parser);\n      if (parser.cdata !== \"\") {\n        emitNode(parser, \"oncdata\", parser.cdata);\n        parser.cdata = \"\";\n      }\n      if (parser.script !== \"\") {\n        emitNode(parser, \"onscript\", parser.script);\n        parser.script = \"\";\n      }\n    }\n    SAXParser.prototype = {\n      end: function() {\n        end(this);\n      },\n      write,\n      resume: function() {\n        this.error = null;\n        return this;\n      },\n      close: function() {\n        return this.write(null);\n      },\n      flush: function() {\n        flushBuffers(this);\n      }\n    };\n    var Stream2;\n    try {\n      Stream2 = streamBrowserify.Stream;\n    } catch (ex) {\n      Stream2 = function() {\n      };\n    }\n    var streamWraps = sax2.EVENTS.filter(function(ev) {\n      return ev !== \"error\" && ev !== \"end\";\n    });\n    function createStream(strict, opt) {\n      return new SAXStream(strict, opt);\n    }\n    function SAXStream(strict, opt) {\n      if (!(this instanceof SAXStream)) {\n        return new SAXStream(strict, opt);\n      }\n      Stream2.apply(this);\n      this._parser = new SAXParser(strict, opt);\n      this.writable = true;\n      this.readable = true;\n      var me = this;\n      this._parser.onend = function() {\n        me.emit(\"end\");\n      };\n      this._parser.onerror = function(er) {\n        me.emit(\"error\", er);\n        me._parser.error = null;\n      };\n      this._decoder = null;\n      streamWraps.forEach(function(ev) {\n        Object.defineProperty(me, \"on\" + ev, {\n          get: function() {\n            return me._parser[\"on\" + ev];\n          },\n          set: function(h) {\n            if (!h) {\n              me.removeAllListeners(ev);\n              me._parser[\"on\" + ev] = h;\n              return h;\n            }\n            me.on(ev, h);\n          },\n          enumerable: true,\n          configurable: false\n        });\n      });\n    }\n    SAXStream.prototype = Object.create(Stream2.prototype, {\n      constructor: {\n        value: SAXStream\n      }\n    });\n    SAXStream.prototype.write = function(data) {\n      if (typeof Buffer === \"function\" && typeof Buffer.isBuffer === \"function\" && Buffer.isBuffer(data)) {\n        if (!this._decoder) {\n          var SD = requireString_decoder().StringDecoder;\n          this._decoder = new SD(\"utf8\");\n        }\n        data = this._decoder.write(data);\n      }\n      this._parser.write(data.toString());\n      this.emit(\"data\", data);\n      return true;\n    };\n    SAXStream.prototype.end = function(chunk) {\n      if (chunk && chunk.length) {\n        this.write(chunk);\n      }\n      this._parser.end();\n      return true;\n    };\n    SAXStream.prototype.on = function(ev, handler) {\n      var me = this;\n      if (!me._parser[\"on\" + ev] && streamWraps.indexOf(ev) !== -1) {\n        me._parser[\"on\" + ev] = function() {\n          var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);\n          args.splice(0, 0, ev);\n          me.emit.apply(me, args);\n        };\n      }\n      return Stream2.prototype.on.call(me, ev, handler);\n    };\n    var CDATA = \"[CDATA[\";\n    var DOCTYPE = \"DOCTYPE\";\n    var XML_NAMESPACE = \"http://www.w3.org/XML/1998/namespace\";\n    var XMLNS_NAMESPACE = \"http://www.w3.org/2000/xmlns/\";\n    var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE };\n    var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n    var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\n    var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n    var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\n    function isWhitespace(c) {\n      return c === \" \" || c === \"\\n\" || c === \"\\r\" || c === \"\t\";\n    }\n    function isQuote(c) {\n      return c === '\"' || c === \"'\";\n    }\n    function isAttribEnd(c) {\n      return c === \">\" || isWhitespace(c);\n    }\n    function isMatch(regex, c) {\n      return regex.test(c);\n    }\n    function notMatch(regex, c) {\n      return !isMatch(regex, c);\n    }\n    var S = 0;\n    sax2.STATE = {\n      BEGIN: S++,\n      // leading byte order mark or whitespace\n      BEGIN_WHITESPACE: S++,\n      // leading whitespace\n      TEXT: S++,\n      // general stuff\n      TEXT_ENTITY: S++,\n      // &amp and such.\n      OPEN_WAKA: S++,\n      // <\n      SGML_DECL: S++,\n      // <!BLARG\n      SGML_DECL_QUOTED: S++,\n      // <!BLARG foo \"bar\n      DOCTYPE: S++,\n      // <!DOCTYPE\n      DOCTYPE_QUOTED: S++,\n      // <!DOCTYPE \"//blah\n      DOCTYPE_DTD: S++,\n      // <!DOCTYPE \"//blah\" [ ...\n      DOCTYPE_DTD_QUOTED: S++,\n      // <!DOCTYPE \"//blah\" [ \"foo\n      COMMENT_STARTING: S++,\n      // <!-\n      COMMENT: S++,\n      // <!--\n      COMMENT_ENDING: S++,\n      // <!-- blah -\n      COMMENT_ENDED: S++,\n      // <!-- blah --\n      CDATA: S++,\n      // <![CDATA[ something\n      CDATA_ENDING: S++,\n      // ]\n      CDATA_ENDING_2: S++,\n      // ]]\n      PROC_INST: S++,\n      // <?hi\n      PROC_INST_BODY: S++,\n      // <?hi there\n      PROC_INST_ENDING: S++,\n      // <?hi \"there\" ?\n      OPEN_TAG: S++,\n      // <strong\n      OPEN_TAG_SLASH: S++,\n      // <strong /\n      ATTRIB: S++,\n      // <a\n      ATTRIB_NAME: S++,\n      // <a foo\n      ATTRIB_NAME_SAW_WHITE: S++,\n      // <a foo _\n      ATTRIB_VALUE: S++,\n      // <a foo=\n      ATTRIB_VALUE_QUOTED: S++,\n      // <a foo=\"bar\n      ATTRIB_VALUE_CLOSED: S++,\n      // <a foo=\"bar\"\n      ATTRIB_VALUE_UNQUOTED: S++,\n      // <a foo=bar\n      ATTRIB_VALUE_ENTITY_Q: S++,\n      // <foo bar=\"&quot;\"\n      ATTRIB_VALUE_ENTITY_U: S++,\n      // <foo bar=&quot\n      CLOSE_TAG: S++,\n      // </a\n      CLOSE_TAG_SAW_WHITE: S++,\n      // </a   >\n      SCRIPT: S++,\n      // <script> ...\n      SCRIPT_ENDING: S++\n      // <script> ... <\n    };\n    sax2.XML_ENTITIES = {\n      \"amp\": \"&\",\n      \"gt\": \">\",\n      \"lt\": \"<\",\n      \"quot\": '\"',\n      \"apos\": \"'\"\n    };\n    sax2.ENTITIES = {\n      \"amp\": \"&\",\n      \"gt\": \">\",\n      \"lt\": \"<\",\n      \"quot\": '\"',\n      \"apos\": \"'\",\n      \"AElig\": 198,\n      \"Aacute\": 193,\n      \"Acirc\": 194,\n      \"Agrave\": 192,\n      \"Aring\": 197,\n      \"Atilde\": 195,\n      \"Auml\": 196,\n      \"Ccedil\": 199,\n      \"ETH\": 208,\n      \"Eacute\": 201,\n      \"Ecirc\": 202,\n      \"Egrave\": 200,\n      \"Euml\": 203,\n      \"Iacute\": 205,\n      \"Icirc\": 206,\n      \"Igrave\": 204,\n      \"Iuml\": 207,\n      \"Ntilde\": 209,\n      \"Oacute\": 211,\n      \"Ocirc\": 212,\n      \"Ograve\": 210,\n      \"Oslash\": 216,\n      \"Otilde\": 213,\n      \"Ouml\": 214,\n      \"THORN\": 222,\n      \"Uacute\": 218,\n      \"Ucirc\": 219,\n      \"Ugrave\": 217,\n      \"Uuml\": 220,\n      \"Yacute\": 221,\n      \"aacute\": 225,\n      \"acirc\": 226,\n      \"aelig\": 230,\n      \"agrave\": 224,\n      \"aring\": 229,\n      \"atilde\": 227,\n      \"auml\": 228,\n      \"ccedil\": 231,\n      \"eacute\": 233,\n      \"ecirc\": 234,\n      \"egrave\": 232,\n      \"eth\": 240,\n      \"euml\": 235,\n      \"iacute\": 237,\n      \"icirc\": 238,\n      \"igrave\": 236,\n      \"iuml\": 239,\n      \"ntilde\": 241,\n      \"oacute\": 243,\n      \"ocirc\": 244,\n      \"ograve\": 242,\n      \"oslash\": 248,\n      \"otilde\": 245,\n      \"ouml\": 246,\n      \"szlig\": 223,\n      \"thorn\": 254,\n      \"uacute\": 250,\n      \"ucirc\": 251,\n      \"ugrave\": 249,\n      \"uuml\": 252,\n      \"yacute\": 253,\n      \"yuml\": 255,\n      \"copy\": 169,\n      \"reg\": 174,\n      \"nbsp\": 160,\n      \"iexcl\": 161,\n      \"cent\": 162,\n      \"pound\": 163,\n      \"curren\": 164,\n      \"yen\": 165,\n      \"brvbar\": 166,\n      \"sect\": 167,\n      \"uml\": 168,\n      \"ordf\": 170,\n      \"laquo\": 171,\n      \"not\": 172,\n      \"shy\": 173,\n      \"macr\": 175,\n      \"deg\": 176,\n      \"plusmn\": 177,\n      \"sup1\": 185,\n      \"sup2\": 178,\n      \"sup3\": 179,\n      \"acute\": 180,\n      \"micro\": 181,\n      \"para\": 182,\n      \"middot\": 183,\n      \"cedil\": 184,\n      \"ordm\": 186,\n      \"raquo\": 187,\n      \"frac14\": 188,\n      \"frac12\": 189,\n      \"frac34\": 190,\n      \"iquest\": 191,\n      \"times\": 215,\n      \"divide\": 247,\n      \"OElig\": 338,\n      \"oelig\": 339,\n      \"Scaron\": 352,\n      \"scaron\": 353,\n      \"Yuml\": 376,\n      \"fnof\": 402,\n      \"circ\": 710,\n      \"tilde\": 732,\n      \"Alpha\": 913,\n      \"Beta\": 914,\n      \"Gamma\": 915,\n      \"Delta\": 916,\n      \"Epsilon\": 917,\n      \"Zeta\": 918,\n      \"Eta\": 919,\n      \"Theta\": 920,\n      \"Iota\": 921,\n      \"Kappa\": 922,\n      \"Lambda\": 923,\n      \"Mu\": 924,\n      \"Nu\": 925,\n      \"Xi\": 926,\n      \"Omicron\": 927,\n      \"Pi\": 928,\n      \"Rho\": 929,\n      \"Sigma\": 931,\n      \"Tau\": 932,\n      \"Upsilon\": 933,\n      \"Phi\": 934,\n      \"Chi\": 935,\n      \"Psi\": 936,\n      \"Omega\": 937,\n      \"alpha\": 945,\n      \"beta\": 946,\n      \"gamma\": 947,\n      \"delta\": 948,\n      \"epsilon\": 949,\n      \"zeta\": 950,\n      \"eta\": 951,\n      \"theta\": 952,\n      \"iota\": 953,\n      \"kappa\": 954,\n      \"lambda\": 955,\n      \"mu\": 956,\n      \"nu\": 957,\n      \"xi\": 958,\n      \"omicron\": 959,\n      \"pi\": 960,\n      \"rho\": 961,\n      \"sigmaf\": 962,\n      \"sigma\": 963,\n      \"tau\": 964,\n      \"upsilon\": 965,\n      \"phi\": 966,\n      \"chi\": 967,\n      \"psi\": 968,\n      \"omega\": 969,\n      \"thetasym\": 977,\n      \"upsih\": 978,\n      \"piv\": 982,\n      \"ensp\": 8194,\n      \"emsp\": 8195,\n      \"thinsp\": 8201,\n      \"zwnj\": 8204,\n      \"zwj\": 8205,\n      \"lrm\": 8206,\n      \"rlm\": 8207,\n      \"ndash\": 8211,\n      \"mdash\": 8212,\n      \"lsquo\": 8216,\n      \"rsquo\": 8217,\n      \"sbquo\": 8218,\n      \"ldquo\": 8220,\n      \"rdquo\": 8221,\n      \"bdquo\": 8222,\n      \"dagger\": 8224,\n      \"Dagger\": 8225,\n      \"bull\": 8226,\n      \"hellip\": 8230,\n      \"permil\": 8240,\n      \"prime\": 8242,\n      \"Prime\": 8243,\n      \"lsaquo\": 8249,\n      \"rsaquo\": 8250,\n      \"oline\": 8254,\n      \"frasl\": 8260,\n      \"euro\": 8364,\n      \"image\": 8465,\n      \"weierp\": 8472,\n      \"real\": 8476,\n      \"trade\": 8482,\n      \"alefsym\": 8501,\n      \"larr\": 8592,\n      \"uarr\": 8593,\n      \"rarr\": 8594,\n      \"darr\": 8595,\n      \"harr\": 8596,\n      \"crarr\": 8629,\n      \"lArr\": 8656,\n      \"uArr\": 8657,\n      \"rArr\": 8658,\n      \"dArr\": 8659,\n      \"hArr\": 8660,\n      \"forall\": 8704,\n      \"part\": 8706,\n      \"exist\": 8707,\n      \"empty\": 8709,\n      \"nabla\": 8711,\n      \"isin\": 8712,\n      \"notin\": 8713,\n      \"ni\": 8715,\n      \"prod\": 8719,\n      \"sum\": 8721,\n      \"minus\": 8722,\n      \"lowast\": 8727,\n      \"radic\": 8730,\n      \"prop\": 8733,\n      \"infin\": 8734,\n      \"ang\": 8736,\n      \"and\": 8743,\n      \"or\": 8744,\n      \"cap\": 8745,\n      \"cup\": 8746,\n      \"int\": 8747,\n      \"there4\": 8756,\n      \"sim\": 8764,\n      \"cong\": 8773,\n      \"asymp\": 8776,\n      \"ne\": 8800,\n      \"equiv\": 8801,\n      \"le\": 8804,\n      \"ge\": 8805,\n      \"sub\": 8834,\n      \"sup\": 8835,\n      \"nsub\": 8836,\n      \"sube\": 8838,\n      \"supe\": 8839,\n      \"oplus\": 8853,\n      \"otimes\": 8855,\n      \"perp\": 8869,\n      \"sdot\": 8901,\n      \"lceil\": 8968,\n      \"rceil\": 8969,\n      \"lfloor\": 8970,\n      \"rfloor\": 8971,\n      \"lang\": 9001,\n      \"rang\": 9002,\n      \"loz\": 9674,\n      \"spades\": 9824,\n      \"clubs\": 9827,\n      \"hearts\": 9829,\n      \"diams\": 9830\n    };\n    Object.keys(sax2.ENTITIES).forEach(function(key) {\n      var e = sax2.ENTITIES[key];\n      var s3 = typeof e === \"number\" ? String.fromCharCode(e) : e;\n      sax2.ENTITIES[key] = s3;\n    });\n    for (var s2 in sax2.STATE) {\n      sax2.STATE[sax2.STATE[s2]] = s2;\n    }\n    S = sax2.STATE;\n    function emit2(parser, event, data) {\n      parser[event] && parser[event](data);\n    }\n    function emitNode(parser, nodeType, data) {\n      if (parser.textNode) closeText(parser);\n      emit2(parser, nodeType, data);\n    }\n    function closeText(parser) {\n      parser.textNode = textopts(parser.opt, parser.textNode);\n      if (parser.textNode) emit2(parser, \"ontext\", parser.textNode);\n      parser.textNode = \"\";\n    }\n    function textopts(opt, text) {\n      if (opt.trim) text = text.trim();\n      if (opt.normalize) text = text.replace(/\\s+/g, \" \");\n      return text;\n    }\n    function error(parser, er) {\n      closeText(parser);\n      if (parser.trackPosition) {\n        er += \"\\nLine: \" + parser.line + \"\\nColumn: \" + parser.column + \"\\nChar: \" + parser.c;\n      }\n      er = new Error(er);\n      parser.error = er;\n      emit2(parser, \"onerror\", er);\n      return parser;\n    }\n    function end(parser) {\n      if (parser.sawRoot && !parser.closedRoot) strictFail(parser, \"Unclosed root tag\");\n      if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) {\n        error(parser, \"Unexpected end\");\n      }\n      closeText(parser);\n      parser.c = \"\";\n      parser.closed = true;\n      emit2(parser, \"onend\");\n      SAXParser.call(parser, parser.strict, parser.opt);\n      return parser;\n    }\n    function strictFail(parser, message) {\n      if (typeof parser !== \"object\" || !(parser instanceof SAXParser)) {\n        throw new Error(\"bad call to strictFail\");\n      }\n      if (parser.strict) {\n        error(parser, message);\n      }\n    }\n    function newTag(parser) {\n      if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]();\n      var parent = parser.tags[parser.tags.length - 1] || parser;\n      var tag = parser.tag = { name: parser.tagName, attributes: {} };\n      if (parser.opt.xmlns) {\n        tag.ns = parent.ns;\n      }\n      parser.attribList.length = 0;\n      emitNode(parser, \"onopentagstart\", tag);\n    }\n    function qname(name, attribute2) {\n      var i = name.indexOf(\":\");\n      var qualName = i < 0 ? [\"\", name] : name.split(\":\");\n      var prefix = qualName[0];\n      var local = qualName[1];\n      if (attribute2 && name === \"xmlns\") {\n        prefix = \"xmlns\";\n        local = \"\";\n      }\n      return { prefix, local };\n    }\n    function attrib(parser) {\n      if (!parser.strict) {\n        parser.attribName = parser.attribName[parser.looseCase]();\n      }\n      if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n        parser.attribName = parser.attribValue = \"\";\n        return;\n      }\n      if (parser.opt.xmlns) {\n        var qn = qname(parser.attribName, true);\n        var prefix = qn.prefix;\n        var local = qn.local;\n        if (prefix === \"xmlns\") {\n          if (local === \"xml\" && parser.attribValue !== XML_NAMESPACE) {\n            strictFail(\n              parser,\n              \"xml: prefix must be bound to \" + XML_NAMESPACE + \"\\nActual: \" + parser.attribValue\n            );\n          } else if (local === \"xmlns\" && parser.attribValue !== XMLNS_NAMESPACE) {\n            strictFail(\n              parser,\n              \"xmlns: prefix must be bound to \" + XMLNS_NAMESPACE + \"\\nActual: \" + parser.attribValue\n            );\n          } else {\n            var tag = parser.tag;\n            var parent = parser.tags[parser.tags.length - 1] || parser;\n            if (tag.ns === parent.ns) {\n              tag.ns = Object.create(parent.ns);\n            }\n            tag.ns[local] = parser.attribValue;\n          }\n        }\n        parser.attribList.push([parser.attribName, parser.attribValue]);\n      } else {\n        parser.tag.attributes[parser.attribName] = parser.attribValue;\n        emitNode(parser, \"onattribute\", {\n          name: parser.attribName,\n          value: parser.attribValue\n        });\n      }\n      parser.attribName = parser.attribValue = \"\";\n    }\n    function openTag(parser, selfClosing) {\n      if (parser.opt.xmlns) {\n        var tag = parser.tag;\n        var qn = qname(parser.tagName);\n        tag.prefix = qn.prefix;\n        tag.local = qn.local;\n        tag.uri = tag.ns[qn.prefix] || \"\";\n        if (tag.prefix && !tag.uri) {\n          strictFail(parser, \"Unbound namespace prefix: \" + JSON.stringify(parser.tagName));\n          tag.uri = qn.prefix;\n        }\n        var parent = parser.tags[parser.tags.length - 1] || parser;\n        if (tag.ns && parent.ns !== tag.ns) {\n          Object.keys(tag.ns).forEach(function(p) {\n            emitNode(parser, \"onopennamespace\", {\n              prefix: p,\n              uri: tag.ns[p]\n            });\n          });\n        }\n        for (var i = 0, l = parser.attribList.length; i < l; i++) {\n          var nv = parser.attribList[i];\n          var name = nv[0];\n          var value = nv[1];\n          var qualName = qname(name, true);\n          var prefix = qualName.prefix;\n          var local = qualName.local;\n          var uri2 = prefix === \"\" ? \"\" : tag.ns[prefix] || \"\";\n          var a = {\n            name,\n            value,\n            prefix,\n            local,\n            uri: uri2\n          };\n          if (prefix && prefix !== \"xmlns\" && !uri2) {\n            strictFail(parser, \"Unbound namespace prefix: \" + JSON.stringify(prefix));\n            a.uri = prefix;\n          }\n          parser.tag.attributes[name] = a;\n          emitNode(parser, \"onattribute\", a);\n        }\n        parser.attribList.length = 0;\n      }\n      parser.tag.isSelfClosing = !!selfClosing;\n      parser.sawRoot = true;\n      parser.tags.push(parser.tag);\n      emitNode(parser, \"onopentag\", parser.tag);\n      if (!selfClosing) {\n        if (!parser.noscript && parser.tagName.toLowerCase() === \"script\") {\n          parser.state = S.SCRIPT;\n        } else {\n          parser.state = S.TEXT;\n        }\n        parser.tag = null;\n        parser.tagName = \"\";\n      }\n      parser.attribName = parser.attribValue = \"\";\n      parser.attribList.length = 0;\n    }\n    function closeTag(parser) {\n      if (!parser.tagName) {\n        strictFail(parser, \"Weird empty close tag.\");\n        parser.textNode += \"</>\";\n        parser.state = S.TEXT;\n        return;\n      }\n      if (parser.script) {\n        if (parser.tagName !== \"script\") {\n          parser.script += \"</\" + parser.tagName + \">\";\n          parser.tagName = \"\";\n          parser.state = S.SCRIPT;\n          return;\n        }\n        emitNode(parser, \"onscript\", parser.script);\n        parser.script = \"\";\n      }\n      var t = parser.tags.length;\n      var tagName = parser.tagName;\n      if (!parser.strict) {\n        tagName = tagName[parser.looseCase]();\n      }\n      var closeTo = tagName;\n      while (t--) {\n        var close = parser.tags[t];\n        if (close.name !== closeTo) {\n          strictFail(parser, \"Unexpected close tag\");\n        } else {\n          break;\n        }\n      }\n      if (t < 0) {\n        strictFail(parser, \"Unmatched closing tag: \" + parser.tagName);\n        parser.textNode += \"</\" + parser.tagName + \">\";\n        parser.state = S.TEXT;\n        return;\n      }\n      parser.tagName = tagName;\n      var s3 = parser.tags.length;\n      while (s3-- > t) {\n        var tag = parser.tag = parser.tags.pop();\n        parser.tagName = parser.tag.name;\n        emitNode(parser, \"onclosetag\", parser.tagName);\n        var x = {};\n        for (var i in tag.ns) {\n          x[i] = tag.ns[i];\n        }\n        var parent = parser.tags[parser.tags.length - 1] || parser;\n        if (parser.opt.xmlns && tag.ns !== parent.ns) {\n          Object.keys(tag.ns).forEach(function(p) {\n            var n = tag.ns[p];\n            emitNode(parser, \"onclosenamespace\", { prefix: p, uri: n });\n          });\n        }\n      }\n      if (t === 0) parser.closedRoot = true;\n      parser.tagName = parser.attribValue = parser.attribName = \"\";\n      parser.attribList.length = 0;\n      parser.state = S.TEXT;\n    }\n    function parseEntity(parser) {\n      var entity = parser.entity;\n      var entityLC = entity.toLowerCase();\n      var num;\n      var numStr = \"\";\n      if (parser.ENTITIES[entity]) {\n        return parser.ENTITIES[entity];\n      }\n      if (parser.ENTITIES[entityLC]) {\n        return parser.ENTITIES[entityLC];\n      }\n      entity = entityLC;\n      if (entity.charAt(0) === \"#\") {\n        if (entity.charAt(1) === \"x\") {\n          entity = entity.slice(2);\n          num = parseInt(entity, 16);\n          numStr = num.toString(16);\n        } else {\n          entity = entity.slice(1);\n          num = parseInt(entity, 10);\n          numStr = num.toString(10);\n        }\n      }\n      entity = entity.replace(/^0+/, \"\");\n      if (isNaN(num) || numStr.toLowerCase() !== entity) {\n        strictFail(parser, \"Invalid character entity\");\n        return \"&\" + parser.entity + \";\";\n      }\n      return String.fromCodePoint(num);\n    }\n    function beginWhiteSpace(parser, c) {\n      if (c === \"<\") {\n        parser.state = S.OPEN_WAKA;\n        parser.startTagPosition = parser.position;\n      } else if (!isWhitespace(c)) {\n        strictFail(parser, \"Non-whitespace before first tag.\");\n        parser.textNode = c;\n        parser.state = S.TEXT;\n      }\n    }\n    function charAt(chunk, i) {\n      var result = \"\";\n      if (i < chunk.length) {\n        result = chunk.charAt(i);\n      }\n      return result;\n    }\n    function write(chunk) {\n      var parser = this;\n      if (this.error) {\n        throw this.error;\n      }\n      if (parser.closed) {\n        return error(\n          parser,\n          \"Cannot write after close. Assign an onready handler.\"\n        );\n      }\n      if (chunk === null) {\n        return end(parser);\n      }\n      if (typeof chunk === \"object\") {\n        chunk = chunk.toString();\n      }\n      var i = 0;\n      var c = \"\";\n      while (true) {\n        c = charAt(chunk, i++);\n        parser.c = c;\n        if (!c) {\n          break;\n        }\n        if (parser.trackPosition) {\n          parser.position++;\n          if (c === \"\\n\") {\n            parser.line++;\n            parser.column = 0;\n          } else {\n            parser.column++;\n          }\n        }\n        switch (parser.state) {\n          case S.BEGIN:\n            parser.state = S.BEGIN_WHITESPACE;\n            if (c === \"\\uFEFF\") {\n              continue;\n            }\n            beginWhiteSpace(parser, c);\n            continue;\n          case S.BEGIN_WHITESPACE:\n            beginWhiteSpace(parser, c);\n            continue;\n          case S.TEXT:\n            if (parser.sawRoot && !parser.closedRoot) {\n              var starti = i - 1;\n              while (c && c !== \"<\" && c !== \"&\") {\n                c = charAt(chunk, i++);\n                if (c && parser.trackPosition) {\n                  parser.position++;\n                  if (c === \"\\n\") {\n                    parser.line++;\n                    parser.column = 0;\n                  } else {\n                    parser.column++;\n                  }\n                }\n              }\n              parser.textNode += chunk.substring(starti, i - 1);\n            }\n            if (c === \"<\" && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n              parser.state = S.OPEN_WAKA;\n              parser.startTagPosition = parser.position;\n            } else {\n              if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n                strictFail(parser, \"Text data outside of root node.\");\n              }\n              if (c === \"&\") {\n                parser.state = S.TEXT_ENTITY;\n              } else {\n                parser.textNode += c;\n              }\n            }\n            continue;\n          case S.SCRIPT:\n            if (c === \"<\") {\n              parser.state = S.SCRIPT_ENDING;\n            } else {\n              parser.script += c;\n            }\n            continue;\n          case S.SCRIPT_ENDING:\n            if (c === \"/\") {\n              parser.state = S.CLOSE_TAG;\n            } else {\n              parser.script += \"<\" + c;\n              parser.state = S.SCRIPT;\n            }\n            continue;\n          case S.OPEN_WAKA:\n            if (c === \"!\") {\n              parser.state = S.SGML_DECL;\n              parser.sgmlDecl = \"\";\n            } else if (isWhitespace(c)) ;\n            else if (isMatch(nameStart, c)) {\n              parser.state = S.OPEN_TAG;\n              parser.tagName = c;\n            } else if (c === \"/\") {\n              parser.state = S.CLOSE_TAG;\n              parser.tagName = \"\";\n            } else if (c === \"?\") {\n              parser.state = S.PROC_INST;\n              parser.procInstName = parser.procInstBody = \"\";\n            } else {\n              strictFail(parser, \"Unencoded <\");\n              if (parser.startTagPosition + 1 < parser.position) {\n                var pad2 = parser.position - parser.startTagPosition;\n                c = new Array(pad2).join(\" \") + c;\n              }\n              parser.textNode += \"<\" + c;\n              parser.state = S.TEXT;\n            }\n            continue;\n          case S.SGML_DECL:\n            if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n              emitNode(parser, \"onopencdata\");\n              parser.state = S.CDATA;\n              parser.sgmlDecl = \"\";\n              parser.cdata = \"\";\n            } else if (parser.sgmlDecl + c === \"--\") {\n              parser.state = S.COMMENT;\n              parser.comment = \"\";\n              parser.sgmlDecl = \"\";\n            } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n              parser.state = S.DOCTYPE;\n              if (parser.doctype || parser.sawRoot) {\n                strictFail(\n                  parser,\n                  \"Inappropriately located doctype declaration\"\n                );\n              }\n              parser.doctype = \"\";\n              parser.sgmlDecl = \"\";\n            } else if (c === \">\") {\n              emitNode(parser, \"onsgmldeclaration\", parser.sgmlDecl);\n              parser.sgmlDecl = \"\";\n              parser.state = S.TEXT;\n            } else if (isQuote(c)) {\n              parser.state = S.SGML_DECL_QUOTED;\n              parser.sgmlDecl += c;\n            } else {\n              parser.sgmlDecl += c;\n            }\n            continue;\n          case S.SGML_DECL_QUOTED:\n            if (c === parser.q) {\n              parser.state = S.SGML_DECL;\n              parser.q = \"\";\n            }\n            parser.sgmlDecl += c;\n            continue;\n          case S.DOCTYPE:\n            if (c === \">\") {\n              parser.state = S.TEXT;\n              emitNode(parser, \"ondoctype\", parser.doctype);\n              parser.doctype = true;\n            } else {\n              parser.doctype += c;\n              if (c === \"[\") {\n                parser.state = S.DOCTYPE_DTD;\n              } else if (isQuote(c)) {\n                parser.state = S.DOCTYPE_QUOTED;\n                parser.q = c;\n              }\n            }\n            continue;\n          case S.DOCTYPE_QUOTED:\n            parser.doctype += c;\n            if (c === parser.q) {\n              parser.q = \"\";\n              parser.state = S.DOCTYPE;\n            }\n            continue;\n          case S.DOCTYPE_DTD:\n            parser.doctype += c;\n            if (c === \"]\") {\n              parser.state = S.DOCTYPE;\n            } else if (isQuote(c)) {\n              parser.state = S.DOCTYPE_DTD_QUOTED;\n              parser.q = c;\n            }\n            continue;\n          case S.DOCTYPE_DTD_QUOTED:\n            parser.doctype += c;\n            if (c === parser.q) {\n              parser.state = S.DOCTYPE_DTD;\n              parser.q = \"\";\n            }\n            continue;\n          case S.COMMENT:\n            if (c === \"-\") {\n              parser.state = S.COMMENT_ENDING;\n            } else {\n              parser.comment += c;\n            }\n            continue;\n          case S.COMMENT_ENDING:\n            if (c === \"-\") {\n              parser.state = S.COMMENT_ENDED;\n              parser.comment = textopts(parser.opt, parser.comment);\n              if (parser.comment) {\n                emitNode(parser, \"oncomment\", parser.comment);\n              }\n              parser.comment = \"\";\n            } else {\n              parser.comment += \"-\" + c;\n              parser.state = S.COMMENT;\n            }\n            continue;\n          case S.COMMENT_ENDED:\n            if (c !== \">\") {\n              strictFail(parser, \"Malformed comment\");\n              parser.comment += \"--\" + c;\n              parser.state = S.COMMENT;\n            } else {\n              parser.state = S.TEXT;\n            }\n            continue;\n          case S.CDATA:\n            if (c === \"]\") {\n              parser.state = S.CDATA_ENDING;\n            } else {\n              parser.cdata += c;\n            }\n            continue;\n          case S.CDATA_ENDING:\n            if (c === \"]\") {\n              parser.state = S.CDATA_ENDING_2;\n            } else {\n              parser.cdata += \"]\" + c;\n              parser.state = S.CDATA;\n            }\n            continue;\n          case S.CDATA_ENDING_2:\n            if (c === \">\") {\n              if (parser.cdata) {\n                emitNode(parser, \"oncdata\", parser.cdata);\n              }\n              emitNode(parser, \"onclosecdata\");\n              parser.cdata = \"\";\n              parser.state = S.TEXT;\n            } else if (c === \"]\") {\n              parser.cdata += \"]\";\n            } else {\n              parser.cdata += \"]]\" + c;\n              parser.state = S.CDATA;\n            }\n            continue;\n          case S.PROC_INST:\n            if (c === \"?\") {\n              parser.state = S.PROC_INST_ENDING;\n            } else if (isWhitespace(c)) {\n              parser.state = S.PROC_INST_BODY;\n            } else {\n              parser.procInstName += c;\n            }\n            continue;\n          case S.PROC_INST_BODY:\n            if (!parser.procInstBody && isWhitespace(c)) {\n              continue;\n            } else if (c === \"?\") {\n              parser.state = S.PROC_INST_ENDING;\n            } else {\n              parser.procInstBody += c;\n            }\n            continue;\n          case S.PROC_INST_ENDING:\n            if (c === \">\") {\n              emitNode(parser, \"onprocessinginstruction\", {\n                name: parser.procInstName,\n                body: parser.procInstBody\n              });\n              parser.procInstName = parser.procInstBody = \"\";\n              parser.state = S.TEXT;\n            } else {\n              parser.procInstBody += \"?\" + c;\n              parser.state = S.PROC_INST_BODY;\n            }\n            continue;\n          case S.OPEN_TAG:\n            if (isMatch(nameBody, c)) {\n              parser.tagName += c;\n            } else {\n              newTag(parser);\n              if (c === \">\") {\n                openTag(parser);\n              } else if (c === \"/\") {\n                parser.state = S.OPEN_TAG_SLASH;\n              } else {\n                if (!isWhitespace(c)) {\n                  strictFail(parser, \"Invalid character in tag name\");\n                }\n                parser.state = S.ATTRIB;\n              }\n            }\n            continue;\n          case S.OPEN_TAG_SLASH:\n            if (c === \">\") {\n              openTag(parser, true);\n              closeTag(parser);\n            } else {\n              strictFail(parser, \"Forward-slash in opening tag not followed by >\");\n              parser.state = S.ATTRIB;\n            }\n            continue;\n          case S.ATTRIB:\n            if (isWhitespace(c)) {\n              continue;\n            } else if (c === \">\") {\n              openTag(parser);\n            } else if (c === \"/\") {\n              parser.state = S.OPEN_TAG_SLASH;\n            } else if (isMatch(nameStart, c)) {\n              parser.attribName = c;\n              parser.attribValue = \"\";\n              parser.state = S.ATTRIB_NAME;\n            } else {\n              strictFail(parser, \"Invalid attribute name\");\n            }\n            continue;\n          case S.ATTRIB_NAME:\n            if (c === \"=\") {\n              parser.state = S.ATTRIB_VALUE;\n            } else if (c === \">\") {\n              strictFail(parser, \"Attribute without value\");\n              parser.attribValue = parser.attribName;\n              attrib(parser);\n              openTag(parser);\n            } else if (isWhitespace(c)) {\n              parser.state = S.ATTRIB_NAME_SAW_WHITE;\n            } else if (isMatch(nameBody, c)) {\n              parser.attribName += c;\n            } else {\n              strictFail(parser, \"Invalid attribute name\");\n            }\n            continue;\n          case S.ATTRIB_NAME_SAW_WHITE:\n            if (c === \"=\") {\n              parser.state = S.ATTRIB_VALUE;\n            } else if (isWhitespace(c)) {\n              continue;\n            } else {\n              strictFail(parser, \"Attribute without value\");\n              parser.tag.attributes[parser.attribName] = \"\";\n              parser.attribValue = \"\";\n              emitNode(parser, \"onattribute\", {\n                name: parser.attribName,\n                value: \"\"\n              });\n              parser.attribName = \"\";\n              if (c === \">\") {\n                openTag(parser);\n              } else if (isMatch(nameStart, c)) {\n                parser.attribName = c;\n                parser.state = S.ATTRIB_NAME;\n              } else {\n                strictFail(parser, \"Invalid attribute name\");\n                parser.state = S.ATTRIB;\n              }\n            }\n            continue;\n          case S.ATTRIB_VALUE:\n            if (isWhitespace(c)) {\n              continue;\n            } else if (isQuote(c)) {\n              parser.q = c;\n              parser.state = S.ATTRIB_VALUE_QUOTED;\n            } else {\n              strictFail(parser, \"Unquoted attribute value\");\n              parser.state = S.ATTRIB_VALUE_UNQUOTED;\n              parser.attribValue = c;\n            }\n            continue;\n          case S.ATTRIB_VALUE_QUOTED:\n            if (c !== parser.q) {\n              if (c === \"&\") {\n                parser.state = S.ATTRIB_VALUE_ENTITY_Q;\n              } else {\n                parser.attribValue += c;\n              }\n              continue;\n            }\n            attrib(parser);\n            parser.q = \"\";\n            parser.state = S.ATTRIB_VALUE_CLOSED;\n            continue;\n          case S.ATTRIB_VALUE_CLOSED:\n            if (isWhitespace(c)) {\n              parser.state = S.ATTRIB;\n            } else if (c === \">\") {\n              openTag(parser);\n            } else if (c === \"/\") {\n              parser.state = S.OPEN_TAG_SLASH;\n            } else if (isMatch(nameStart, c)) {\n              strictFail(parser, \"No whitespace between attributes\");\n              parser.attribName = c;\n              parser.attribValue = \"\";\n              parser.state = S.ATTRIB_NAME;\n            } else {\n              strictFail(parser, \"Invalid attribute name\");\n            }\n            continue;\n          case S.ATTRIB_VALUE_UNQUOTED:\n            if (!isAttribEnd(c)) {\n              if (c === \"&\") {\n                parser.state = S.ATTRIB_VALUE_ENTITY_U;\n              } else {\n                parser.attribValue += c;\n              }\n              continue;\n            }\n            attrib(parser);\n            if (c === \">\") {\n              openTag(parser);\n            } else {\n              parser.state = S.ATTRIB;\n            }\n            continue;\n          case S.CLOSE_TAG:\n            if (!parser.tagName) {\n              if (isWhitespace(c)) {\n                continue;\n              } else if (notMatch(nameStart, c)) {\n                if (parser.script) {\n                  parser.script += \"</\" + c;\n                  parser.state = S.SCRIPT;\n                } else {\n                  strictFail(parser, \"Invalid tagname in closing tag.\");\n                }\n              } else {\n                parser.tagName = c;\n              }\n            } else if (c === \">\") {\n              closeTag(parser);\n            } else if (isMatch(nameBody, c)) {\n              parser.tagName += c;\n            } else if (parser.script) {\n              parser.script += \"</\" + parser.tagName;\n              parser.tagName = \"\";\n              parser.state = S.SCRIPT;\n            } else {\n              if (!isWhitespace(c)) {\n                strictFail(parser, \"Invalid tagname in closing tag\");\n              }\n              parser.state = S.CLOSE_TAG_SAW_WHITE;\n            }\n            continue;\n          case S.CLOSE_TAG_SAW_WHITE:\n            if (isWhitespace(c)) {\n              continue;\n            }\n            if (c === \">\") {\n              closeTag(parser);\n            } else {\n              strictFail(parser, \"Invalid characters in closing tag\");\n            }\n            continue;\n          case S.TEXT_ENTITY:\n          case S.ATTRIB_VALUE_ENTITY_Q:\n          case S.ATTRIB_VALUE_ENTITY_U:\n            var returnState;\n            var buffer2;\n            switch (parser.state) {\n              case S.TEXT_ENTITY:\n                returnState = S.TEXT;\n                buffer2 = \"textNode\";\n                break;\n              case S.ATTRIB_VALUE_ENTITY_Q:\n                returnState = S.ATTRIB_VALUE_QUOTED;\n                buffer2 = \"attribValue\";\n                break;\n              case S.ATTRIB_VALUE_ENTITY_U:\n                returnState = S.ATTRIB_VALUE_UNQUOTED;\n                buffer2 = \"attribValue\";\n                break;\n            }\n            if (c === \";\") {\n              parser[buffer2] += parseEntity(parser);\n              parser.entity = \"\";\n              parser.state = returnState;\n            } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n              parser.entity += c;\n            } else {\n              strictFail(parser, \"Invalid character in entity name\");\n              parser[buffer2] += \"&\" + parser.entity + c;\n              parser.entity = \"\";\n              parser.state = returnState;\n            }\n            continue;\n          default:\n            throw new Error(parser, \"Unknown state: \" + parser.state);\n        }\n      }\n      if (parser.position >= parser.bufferCheckPosition) {\n        checkBufferLength(parser);\n      }\n      return parser;\n    }\n    /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */\n    if (!String.fromCodePoint) {\n      (function() {\n        var stringFromCharCode = String.fromCharCode;\n        var floor = Math.floor;\n        var fromCodePoint = function() {\n          var MAX_SIZE = 16384;\n          var codeUnits = [];\n          var highSurrogate;\n          var lowSurrogate;\n          var index = -1;\n          var length = arguments.length;\n          if (!length) {\n            return \"\";\n          }\n          var result = \"\";\n          while (++index < length) {\n            var codePoint = Number(arguments[index]);\n            if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n            codePoint < 0 || // not a valid Unicode code point\n            codePoint > 1114111 || // not a valid Unicode code point\n            floor(codePoint) !== codePoint) {\n              throw RangeError(\"Invalid code point: \" + codePoint);\n            }\n            if (codePoint <= 65535) {\n              codeUnits.push(codePoint);\n            } else {\n              codePoint -= 65536;\n              highSurrogate = (codePoint >> 10) + 55296;\n              lowSurrogate = codePoint % 1024 + 56320;\n              codeUnits.push(highSurrogate, lowSurrogate);\n            }\n            if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n              result += stringFromCharCode.apply(null, codeUnits);\n              codeUnits.length = 0;\n            }\n          }\n          return result;\n        };\n        if (Object.defineProperty) {\n          Object.defineProperty(String, \"fromCodePoint\", {\n            value: fromCodePoint,\n            configurable: true,\n            writable: true\n          });\n        } else {\n          String.fromCodePoint = fromCodePoint;\n        }\n      })();\n    }\n  })(exports);\n})(sax$1);\nvar arrayHelper = {\n  isArray: function(value) {\n    if (Array.isArray) {\n      return Array.isArray(value);\n    }\n    return Object.prototype.toString.call(value) === \"[object Array]\";\n  }\n};\nvar isArray$2 = arrayHelper.isArray;\nvar optionsHelper = {\n  copyOptions: function(options2) {\n    var key, copy = {};\n    for (key in options2) {\n      if (options2.hasOwnProperty(key)) {\n        copy[key] = options2[key];\n      }\n    }\n    return copy;\n  },\n  ensureFlagExists: function(item, options2) {\n    if (!(item in options2) || typeof options2[item] !== \"boolean\") {\n      options2[item] = false;\n    }\n  },\n  ensureSpacesExists: function(options2) {\n    if (!(\"spaces\" in options2) || typeof options2.spaces !== \"number\" && typeof options2.spaces !== \"string\") {\n      options2.spaces = 0;\n    }\n  },\n  ensureAlwaysArrayExists: function(options2) {\n    if (!(\"alwaysArray\" in options2) || typeof options2.alwaysArray !== \"boolean\" && !isArray$2(options2.alwaysArray)) {\n      options2.alwaysArray = false;\n    }\n  },\n  ensureKeyExists: function(key, options2) {\n    if (!(key + \"Key\" in options2) || typeof options2[key + \"Key\"] !== \"string\") {\n      options2[key + \"Key\"] = options2.compact ? \"_\" + key : key;\n    }\n  },\n  checkFnExists: function(key, options2) {\n    return key + \"Fn\" in options2;\n  }\n};\nvar sax = sax$1;\nvar helper$2 = optionsHelper;\nvar isArray$1 = arrayHelper.isArray;\nvar options;\nvar currentElement$1;\nfunction validateOptions$2(userOptions) {\n  options = helper$2.copyOptions(userOptions);\n  helper$2.ensureFlagExists(\"ignoreDeclaration\", options);\n  helper$2.ensureFlagExists(\"ignoreInstruction\", options);\n  helper$2.ensureFlagExists(\"ignoreAttributes\", options);\n  helper$2.ensureFlagExists(\"ignoreText\", options);\n  helper$2.ensureFlagExists(\"ignoreComment\", options);\n  helper$2.ensureFlagExists(\"ignoreCdata\", options);\n  helper$2.ensureFlagExists(\"ignoreDoctype\", options);\n  helper$2.ensureFlagExists(\"compact\", options);\n  helper$2.ensureFlagExists(\"alwaysChildren\", options);\n  helper$2.ensureFlagExists(\"addParent\", options);\n  helper$2.ensureFlagExists(\"trim\", options);\n  helper$2.ensureFlagExists(\"nativeType\", options);\n  helper$2.ensureFlagExists(\"nativeTypeAttributes\", options);\n  helper$2.ensureFlagExists(\"sanitize\", options);\n  helper$2.ensureFlagExists(\"instructionHasAttributes\", options);\n  helper$2.ensureFlagExists(\"captureSpacesBetweenElements\", options);\n  helper$2.ensureAlwaysArrayExists(options);\n  helper$2.ensureKeyExists(\"declaration\", options);\n  helper$2.ensureKeyExists(\"instruction\", options);\n  helper$2.ensureKeyExists(\"attributes\", options);\n  helper$2.ensureKeyExists(\"text\", options);\n  helper$2.ensureKeyExists(\"comment\", options);\n  helper$2.ensureKeyExists(\"cdata\", options);\n  helper$2.ensureKeyExists(\"doctype\", options);\n  helper$2.ensureKeyExists(\"type\", options);\n  helper$2.ensureKeyExists(\"name\", options);\n  helper$2.ensureKeyExists(\"elements\", options);\n  helper$2.ensureKeyExists(\"parent\", options);\n  helper$2.checkFnExists(\"doctype\", options);\n  helper$2.checkFnExists(\"instruction\", options);\n  helper$2.checkFnExists(\"cdata\", options);\n  helper$2.checkFnExists(\"comment\", options);\n  helper$2.checkFnExists(\"text\", options);\n  helper$2.checkFnExists(\"instructionName\", options);\n  helper$2.checkFnExists(\"elementName\", options);\n  helper$2.checkFnExists(\"attributeName\", options);\n  helper$2.checkFnExists(\"attributeValue\", options);\n  helper$2.checkFnExists(\"attributes\", options);\n  return options;\n}\nfunction nativeType(value) {\n  var nValue = Number(value);\n  if (!isNaN(nValue)) {\n    return nValue;\n  }\n  var bValue = value.toLowerCase();\n  if (bValue === \"true\") {\n    return true;\n  } else if (bValue === \"false\") {\n    return false;\n  }\n  return value;\n}\nfunction addField(type2, value) {\n  var key;\n  if (options.compact) {\n    if (!currentElement$1[options[type2 + \"Key\"]] && (isArray$1(options.alwaysArray) ? options.alwaysArray.indexOf(options[type2 + \"Key\"]) !== -1 : options.alwaysArray)) {\n      currentElement$1[options[type2 + \"Key\"]] = [];\n    }\n    if (currentElement$1[options[type2 + \"Key\"]] && !isArray$1(currentElement$1[options[type2 + \"Key\"]])) {\n      currentElement$1[options[type2 + \"Key\"]] = [currentElement$1[options[type2 + \"Key\"]]];\n    }\n    if (type2 + \"Fn\" in options && typeof value === \"string\") {\n      value = options[type2 + \"Fn\"](value, currentElement$1);\n    }\n    if (type2 === \"instruction\" && (\"instructionFn\" in options || \"instructionNameFn\" in options)) {\n      for (key in value) {\n        if (value.hasOwnProperty(key)) {\n          if (\"instructionFn\" in options) {\n            value[key] = options.instructionFn(value[key], key, currentElement$1);\n          } else {\n            var temp = value[key];\n            delete value[key];\n            value[options.instructionNameFn(key, temp, currentElement$1)] = temp;\n          }\n        }\n      }\n    }\n    if (isArray$1(currentElement$1[options[type2 + \"Key\"]])) {\n      currentElement$1[options[type2 + \"Key\"]].push(value);\n    } else {\n      currentElement$1[options[type2 + \"Key\"]] = value;\n    }\n  } else {\n    if (!currentElement$1[options.elementsKey]) {\n      currentElement$1[options.elementsKey] = [];\n    }\n    var element2 = {};\n    element2[options.typeKey] = type2;\n    if (type2 === \"instruction\") {\n      for (key in value) {\n        if (value.hasOwnProperty(key)) {\n          break;\n        }\n      }\n      element2[options.nameKey] = \"instructionNameFn\" in options ? options.instructionNameFn(key, value, currentElement$1) : key;\n      if (options.instructionHasAttributes) {\n        element2[options.attributesKey] = value[key][options.attributesKey];\n        if (\"instructionFn\" in options) {\n          element2[options.attributesKey] = options.instructionFn(element2[options.attributesKey], key, currentElement$1);\n        }\n      } else {\n        if (\"instructionFn\" in options) {\n          value[key] = options.instructionFn(value[key], key, currentElement$1);\n        }\n        element2[options.instructionKey] = value[key];\n      }\n    } else {\n      if (type2 + \"Fn\" in options) {\n        value = options[type2 + \"Fn\"](value, currentElement$1);\n      }\n      element2[options[type2 + \"Key\"]] = value;\n    }\n    if (options.addParent) {\n      element2[options.parentKey] = currentElement$1;\n    }\n    currentElement$1[options.elementsKey].push(element2);\n  }\n}\nfunction manipulateAttributes(attributes) {\n  if (\"attributesFn\" in options && attributes) {\n    attributes = options.attributesFn(attributes, currentElement$1);\n  }\n  if ((options.trim || \"attributeValueFn\" in options || \"attributeNameFn\" in options || options.nativeTypeAttributes) && attributes) {\n    var key;\n    for (key in attributes) {\n      if (attributes.hasOwnProperty(key)) {\n        if (options.trim) attributes[key] = attributes[key].trim();\n        if (options.nativeTypeAttributes) {\n          attributes[key] = nativeType(attributes[key]);\n        }\n        if (\"attributeValueFn\" in options) attributes[key] = options.attributeValueFn(attributes[key], key, currentElement$1);\n        if (\"attributeNameFn\" in options) {\n          var temp = attributes[key];\n          delete attributes[key];\n          attributes[options.attributeNameFn(key, attributes[key], currentElement$1)] = temp;\n        }\n      }\n    }\n  }\n  return attributes;\n}\nfunction onInstruction(instruction) {\n  var attributes = {};\n  if (instruction.body && (instruction.name.toLowerCase() === \"xml\" || options.instructionHasAttributes)) {\n    var attrsRegExp = /([\\w:-]+)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|(\\w+))\\s*/g;\n    var match;\n    while ((match = attrsRegExp.exec(instruction.body)) !== null) {\n      attributes[match[1]] = match[2] || match[3] || match[4];\n    }\n    attributes = manipulateAttributes(attributes);\n  }\n  if (instruction.name.toLowerCase() === \"xml\") {\n    if (options.ignoreDeclaration) {\n      return;\n    }\n    currentElement$1[options.declarationKey] = {};\n    if (Object.keys(attributes).length) {\n      currentElement$1[options.declarationKey][options.attributesKey] = attributes;\n    }\n    if (options.addParent) {\n      currentElement$1[options.declarationKey][options.parentKey] = currentElement$1;\n    }\n  } else {\n    if (options.ignoreInstruction) {\n      return;\n    }\n    if (options.trim) {\n      instruction.body = instruction.body.trim();\n    }\n    var value = {};\n    if (options.instructionHasAttributes && Object.keys(attributes).length) {\n      value[instruction.name] = {};\n      value[instruction.name][options.attributesKey] = attributes;\n    } else {\n      value[instruction.name] = instruction.body;\n    }\n    addField(\"instruction\", value);\n  }\n}\nfunction onStartElement(name, attributes) {\n  var element2;\n  if (typeof name === \"object\") {\n    attributes = name.attributes;\n    name = name.name;\n  }\n  attributes = manipulateAttributes(attributes);\n  if (\"elementNameFn\" in options) {\n    name = options.elementNameFn(name, currentElement$1);\n  }\n  if (options.compact) {\n    element2 = {};\n    if (!options.ignoreAttributes && attributes && Object.keys(attributes).length) {\n      element2[options.attributesKey] = {};\n      var key;\n      for (key in attributes) {\n        if (attributes.hasOwnProperty(key)) {\n          element2[options.attributesKey][key] = attributes[key];\n        }\n      }\n    }\n    if (!(name in currentElement$1) && (isArray$1(options.alwaysArray) ? options.alwaysArray.indexOf(name) !== -1 : options.alwaysArray)) {\n      currentElement$1[name] = [];\n    }\n    if (currentElement$1[name] && !isArray$1(currentElement$1[name])) {\n      currentElement$1[name] = [currentElement$1[name]];\n    }\n    if (isArray$1(currentElement$1[name])) {\n      currentElement$1[name].push(element2);\n    } else {\n      currentElement$1[name] = element2;\n    }\n  } else {\n    if (!currentElement$1[options.elementsKey]) {\n      currentElement$1[options.elementsKey] = [];\n    }\n    element2 = {};\n    element2[options.typeKey] = \"element\";\n    element2[options.nameKey] = name;\n    if (!options.ignoreAttributes && attributes && Object.keys(attributes).length) {\n      element2[options.attributesKey] = attributes;\n    }\n    if (options.alwaysChildren) {\n      element2[options.elementsKey] = [];\n    }\n    currentElement$1[options.elementsKey].push(element2);\n  }\n  element2[options.parentKey] = currentElement$1;\n  currentElement$1 = element2;\n}\nfunction onText(text) {\n  if (options.ignoreText) {\n    return;\n  }\n  if (!text.trim() && !options.captureSpacesBetweenElements) {\n    return;\n  }\n  if (options.trim) {\n    text = text.trim();\n  }\n  if (options.nativeType) {\n    text = nativeType(text);\n  }\n  if (options.sanitize) {\n    text = text.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n  }\n  addField(\"text\", text);\n}\nfunction onComment(comment) {\n  if (options.ignoreComment) {\n    return;\n  }\n  if (options.trim) {\n    comment = comment.trim();\n  }\n  addField(\"comment\", comment);\n}\nfunction onEndElement(name) {\n  var parentElement = currentElement$1[options.parentKey];\n  if (!options.addParent) {\n    delete currentElement$1[options.parentKey];\n  }\n  currentElement$1 = parentElement;\n}\nfunction onCdata(cdata) {\n  if (options.ignoreCdata) {\n    return;\n  }\n  if (options.trim) {\n    cdata = cdata.trim();\n  }\n  addField(\"cdata\", cdata);\n}\nfunction onDoctype(doctype) {\n  if (options.ignoreDoctype) {\n    return;\n  }\n  doctype = doctype.replace(/^ /, \"\");\n  if (options.trim) {\n    doctype = doctype.trim();\n  }\n  addField(\"doctype\", doctype);\n}\nfunction onError(error) {\n  error.note = error;\n}\nvar xml2js$2 = function(xml2, userOptions) {\n  var parser = sax.parser(true, {});\n  var result = {};\n  currentElement$1 = result;\n  options = validateOptions$2(userOptions);\n  {\n    parser.opt = { strictEntities: true };\n    parser.onopentag = onStartElement;\n    parser.ontext = onText;\n    parser.oncomment = onComment;\n    parser.onclosetag = onEndElement;\n    parser.onerror = onError;\n    parser.oncdata = onCdata;\n    parser.ondoctype = onDoctype;\n    parser.onprocessinginstruction = onInstruction;\n  }\n  {\n    parser.write(xml2).close();\n  }\n  if (result[options.elementsKey]) {\n    var temp = result[options.elementsKey];\n    delete result[options.elementsKey];\n    result[options.elementsKey] = temp;\n    delete result.text;\n  }\n  return result;\n};\nvar helper$1 = optionsHelper;\nvar xml2js$1 = xml2js$2;\nfunction validateOptions$1(userOptions) {\n  var options2 = helper$1.copyOptions(userOptions);\n  helper$1.ensureSpacesExists(options2);\n  return options2;\n}\nvar xml2json$1 = function(xml2, userOptions) {\n  var options2, js, json, parentKey;\n  options2 = validateOptions$1(userOptions);\n  js = xml2js$1(xml2, options2);\n  parentKey = \"compact\" in options2 && options2.compact ? \"_parent\" : \"parent\";\n  if (\"addParent\" in options2 && options2.addParent) {\n    json = JSON.stringify(js, function(k, v) {\n      return k === parentKey ? \"_\" : v;\n    }, options2.spaces);\n  } else {\n    json = JSON.stringify(js, null, options2.spaces);\n  }\n  return json.replace(/\\u2028/g, \"\\\\u2028\").replace(/\\u2029/g, \"\\\\u2029\");\n};\nvar helper = optionsHelper;\nvar isArray = arrayHelper.isArray;\nvar currentElement, currentElementName;\nfunction validateOptions(userOptions) {\n  var options2 = helper.copyOptions(userOptions);\n  helper.ensureFlagExists(\"ignoreDeclaration\", options2);\n  helper.ensureFlagExists(\"ignoreInstruction\", options2);\n  helper.ensureFlagExists(\"ignoreAttributes\", options2);\n  helper.ensureFlagExists(\"ignoreText\", options2);\n  helper.ensureFlagExists(\"ignoreComment\", options2);\n  helper.ensureFlagExists(\"ignoreCdata\", options2);\n  helper.ensureFlagExists(\"ignoreDoctype\", options2);\n  helper.ensureFlagExists(\"compact\", options2);\n  helper.ensureFlagExists(\"indentText\", options2);\n  helper.ensureFlagExists(\"indentCdata\", options2);\n  helper.ensureFlagExists(\"indentAttributes\", options2);\n  helper.ensureFlagExists(\"indentInstruction\", options2);\n  helper.ensureFlagExists(\"fullTagEmptyElement\", options2);\n  helper.ensureFlagExists(\"noQuotesForNativeAttributes\", options2);\n  helper.ensureSpacesExists(options2);\n  if (typeof options2.spaces === \"number\") {\n    options2.spaces = Array(options2.spaces + 1).join(\" \");\n  }\n  helper.ensureKeyExists(\"declaration\", options2);\n  helper.ensureKeyExists(\"instruction\", options2);\n  helper.ensureKeyExists(\"attributes\", options2);\n  helper.ensureKeyExists(\"text\", options2);\n  helper.ensureKeyExists(\"comment\", options2);\n  helper.ensureKeyExists(\"cdata\", options2);\n  helper.ensureKeyExists(\"doctype\", options2);\n  helper.ensureKeyExists(\"type\", options2);\n  helper.ensureKeyExists(\"name\", options2);\n  helper.ensureKeyExists(\"elements\", options2);\n  helper.checkFnExists(\"doctype\", options2);\n  helper.checkFnExists(\"instruction\", options2);\n  helper.checkFnExists(\"cdata\", options2);\n  helper.checkFnExists(\"comment\", options2);\n  helper.checkFnExists(\"text\", options2);\n  helper.checkFnExists(\"instructionName\", options2);\n  helper.checkFnExists(\"elementName\", options2);\n  helper.checkFnExists(\"attributeName\", options2);\n  helper.checkFnExists(\"attributeValue\", options2);\n  helper.checkFnExists(\"attributes\", options2);\n  helper.checkFnExists(\"fullTagEmptyElement\", options2);\n  return options2;\n}\nfunction writeIndentation(options2, depth, firstLine) {\n  return (!firstLine && options2.spaces ? \"\\n\" : \"\") + Array(depth + 1).join(options2.spaces);\n}\nfunction writeAttributes(attributes, options2, depth) {\n  if (options2.ignoreAttributes) {\n    return \"\";\n  }\n  if (\"attributesFn\" in options2) {\n    attributes = options2.attributesFn(attributes, currentElementName, currentElement);\n  }\n  var key, attr, attrName, quote, result = [];\n  for (key in attributes) {\n    if (attributes.hasOwnProperty(key) && attributes[key] !== null && attributes[key] !== void 0) {\n      quote = options2.noQuotesForNativeAttributes && typeof attributes[key] !== \"string\" ? \"\" : '\"';\n      attr = \"\" + attributes[key];\n      attr = attr.replace(/\"/g, \"&quot;\");\n      attrName = \"attributeNameFn\" in options2 ? options2.attributeNameFn(key, attr, currentElementName, currentElement) : key;\n      result.push(options2.spaces && options2.indentAttributes ? writeIndentation(options2, depth + 1, false) : \" \");\n      result.push(attrName + \"=\" + quote + (\"attributeValueFn\" in options2 ? options2.attributeValueFn(attr, key, currentElementName, currentElement) : attr) + quote);\n    }\n  }\n  if (attributes && Object.keys(attributes).length && options2.spaces && options2.indentAttributes) {\n    result.push(writeIndentation(options2, depth, false));\n  }\n  return result.join(\"\");\n}\nfunction writeDeclaration(declaration, options2, depth) {\n  currentElement = declaration;\n  currentElementName = \"xml\";\n  return options2.ignoreDeclaration ? \"\" : \"<?xml\" + writeAttributes(declaration[options2.attributesKey], options2, depth) + \"?>\";\n}\nfunction writeInstruction(instruction, options2, depth) {\n  if (options2.ignoreInstruction) {\n    return \"\";\n  }\n  var key;\n  for (key in instruction) {\n    if (instruction.hasOwnProperty(key)) {\n      break;\n    }\n  }\n  var instructionName = \"instructionNameFn\" in options2 ? options2.instructionNameFn(key, instruction[key], currentElementName, currentElement) : key;\n  if (typeof instruction[key] === \"object\") {\n    currentElement = instruction;\n    currentElementName = instructionName;\n    return \"<?\" + instructionName + writeAttributes(instruction[key][options2.attributesKey], options2, depth) + \"?>\";\n  } else {\n    var instructionValue = instruction[key] ? instruction[key] : \"\";\n    if (\"instructionFn\" in options2) instructionValue = options2.instructionFn(instructionValue, key, currentElementName, currentElement);\n    return \"<?\" + instructionName + (instructionValue ? \" \" + instructionValue : \"\") + \"?>\";\n  }\n}\nfunction writeComment(comment, options2) {\n  return options2.ignoreComment ? \"\" : \"<!--\" + (\"commentFn\" in options2 ? options2.commentFn(comment, currentElementName, currentElement) : comment) + \"-->\";\n}\nfunction writeCdata(cdata, options2) {\n  return options2.ignoreCdata ? \"\" : \"<![CDATA[\" + (\"cdataFn\" in options2 ? options2.cdataFn(cdata, currentElementName, currentElement) : cdata.replace(\"]]>\", \"]]]]><![CDATA[>\")) + \"]]>\";\n}\nfunction writeDoctype(doctype, options2) {\n  return options2.ignoreDoctype ? \"\" : \"<!DOCTYPE \" + (\"doctypeFn\" in options2 ? options2.doctypeFn(doctype, currentElementName, currentElement) : doctype) + \">\";\n}\nfunction writeText(text, options2) {\n  if (options2.ignoreText) return \"\";\n  text = \"\" + text;\n  text = text.replace(/&amp;/g, \"&\");\n  text = text.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n  return \"textFn\" in options2 ? options2.textFn(text, currentElementName, currentElement) : text;\n}\nfunction hasContent(element2, options2) {\n  var i;\n  if (element2.elements && element2.elements.length) {\n    for (i = 0; i < element2.elements.length; ++i) {\n      switch (element2.elements[i][options2.typeKey]) {\n        case \"text\":\n          if (options2.indentText) {\n            return true;\n          }\n          break;\n        case \"cdata\":\n          if (options2.indentCdata) {\n            return true;\n          }\n          break;\n        case \"instruction\":\n          if (options2.indentInstruction) {\n            return true;\n          }\n          break;\n        case \"doctype\":\n        case \"comment\":\n        case \"element\":\n          return true;\n        default:\n          return true;\n      }\n    }\n  }\n  return false;\n}\nfunction writeElement(element2, options2, depth) {\n  currentElement = element2;\n  currentElementName = element2.name;\n  var xml2 = [], elementName = \"elementNameFn\" in options2 ? options2.elementNameFn(element2.name, element2) : element2.name;\n  xml2.push(\"<\" + elementName);\n  if (element2[options2.attributesKey]) {\n    xml2.push(writeAttributes(element2[options2.attributesKey], options2, depth));\n  }\n  var withClosingTag = element2[options2.elementsKey] && element2[options2.elementsKey].length || element2[options2.attributesKey] && element2[options2.attributesKey][\"xml:space\"] === \"preserve\";\n  if (!withClosingTag) {\n    if (\"fullTagEmptyElementFn\" in options2) {\n      withClosingTag = options2.fullTagEmptyElementFn(element2.name, element2);\n    } else {\n      withClosingTag = options2.fullTagEmptyElement;\n    }\n  }\n  if (withClosingTag) {\n    xml2.push(\">\");\n    if (element2[options2.elementsKey] && element2[options2.elementsKey].length) {\n      xml2.push(writeElements(element2[options2.elementsKey], options2, depth + 1));\n      currentElement = element2;\n      currentElementName = element2.name;\n    }\n    xml2.push(options2.spaces && hasContent(element2, options2) ? \"\\n\" + Array(depth + 1).join(options2.spaces) : \"\");\n    xml2.push(\"</\" + elementName + \">\");\n  } else {\n    xml2.push(\"/>\");\n  }\n  return xml2.join(\"\");\n}\nfunction writeElements(elements, options2, depth, firstLine) {\n  return elements.reduce(function(xml2, element2) {\n    var indent = writeIndentation(options2, depth, firstLine && !xml2);\n    switch (element2.type) {\n      case \"element\":\n        return xml2 + indent + writeElement(element2, options2, depth);\n      case \"comment\":\n        return xml2 + indent + writeComment(element2[options2.commentKey], options2);\n      case \"doctype\":\n        return xml2 + indent + writeDoctype(element2[options2.doctypeKey], options2);\n      case \"cdata\":\n        return xml2 + (options2.indentCdata ? indent : \"\") + writeCdata(element2[options2.cdataKey], options2);\n      case \"text\":\n        return xml2 + (options2.indentText ? indent : \"\") + writeText(element2[options2.textKey], options2);\n      case \"instruction\":\n        var instruction = {};\n        instruction[element2[options2.nameKey]] = element2[options2.attributesKey] ? element2 : element2[options2.instructionKey];\n        return xml2 + (options2.indentInstruction ? indent : \"\") + writeInstruction(instruction, options2, depth);\n    }\n  }, \"\");\n}\nfunction hasContentCompact(element2, options2, anyContent) {\n  var key;\n  for (key in element2) {\n    if (element2.hasOwnProperty(key)) {\n      switch (key) {\n        case options2.parentKey:\n        case options2.attributesKey:\n          break;\n        case options2.textKey:\n          if (options2.indentText || anyContent) {\n            return true;\n          }\n          break;\n        case options2.cdataKey:\n          if (options2.indentCdata || anyContent) {\n            return true;\n          }\n          break;\n        case options2.instructionKey:\n          if (options2.indentInstruction || anyContent) {\n            return true;\n          }\n          break;\n        case options2.doctypeKey:\n        case options2.commentKey:\n          return true;\n        default:\n          return true;\n      }\n    }\n  }\n  return false;\n}\nfunction writeElementCompact(element2, name, options2, depth, indent) {\n  currentElement = element2;\n  currentElementName = name;\n  var elementName = \"elementNameFn\" in options2 ? options2.elementNameFn(name, element2) : name;\n  if (typeof element2 === \"undefined\" || element2 === null || element2 === \"\") {\n    return \"fullTagEmptyElementFn\" in options2 && options2.fullTagEmptyElementFn(name, element2) || options2.fullTagEmptyElement ? \"<\" + elementName + \"></\" + elementName + \">\" : \"<\" + elementName + \"/>\";\n  }\n  var xml2 = [];\n  if (name) {\n    xml2.push(\"<\" + elementName);\n    if (typeof element2 !== \"object\") {\n      xml2.push(\">\" + writeText(element2, options2) + \"</\" + elementName + \">\");\n      return xml2.join(\"\");\n    }\n    if (element2[options2.attributesKey]) {\n      xml2.push(writeAttributes(element2[options2.attributesKey], options2, depth));\n    }\n    var withClosingTag = hasContentCompact(element2, options2, true) || element2[options2.attributesKey] && element2[options2.attributesKey][\"xml:space\"] === \"preserve\";\n    if (!withClosingTag) {\n      if (\"fullTagEmptyElementFn\" in options2) {\n        withClosingTag = options2.fullTagEmptyElementFn(name, element2);\n      } else {\n        withClosingTag = options2.fullTagEmptyElement;\n      }\n    }\n    if (withClosingTag) {\n      xml2.push(\">\");\n    } else {\n      xml2.push(\"/>\");\n      return xml2.join(\"\");\n    }\n  }\n  xml2.push(writeElementsCompact(element2, options2, depth + 1, false));\n  currentElement = element2;\n  currentElementName = name;\n  if (name) {\n    xml2.push((indent ? writeIndentation(options2, depth, false) : \"\") + \"</\" + elementName + \">\");\n  }\n  return xml2.join(\"\");\n}\nfunction writeElementsCompact(element2, options2, depth, firstLine) {\n  var i, key, nodes, xml2 = [];\n  for (key in element2) {\n    if (element2.hasOwnProperty(key)) {\n      nodes = isArray(element2[key]) ? element2[key] : [element2[key]];\n      for (i = 0; i < nodes.length; ++i) {\n        switch (key) {\n          case options2.declarationKey:\n            xml2.push(writeDeclaration(nodes[i], options2, depth));\n            break;\n          case options2.instructionKey:\n            xml2.push((options2.indentInstruction ? writeIndentation(options2, depth, firstLine) : \"\") + writeInstruction(nodes[i], options2, depth));\n            break;\n          case options2.attributesKey:\n          case options2.parentKey:\n            break;\n          case options2.textKey:\n            xml2.push((options2.indentText ? writeIndentation(options2, depth, firstLine) : \"\") + writeText(nodes[i], options2));\n            break;\n          case options2.cdataKey:\n            xml2.push((options2.indentCdata ? writeIndentation(options2, depth, firstLine) : \"\") + writeCdata(nodes[i], options2));\n            break;\n          case options2.doctypeKey:\n            xml2.push(writeIndentation(options2, depth, firstLine) + writeDoctype(nodes[i], options2));\n            break;\n          case options2.commentKey:\n            xml2.push(writeIndentation(options2, depth, firstLine) + writeComment(nodes[i], options2));\n            break;\n          default:\n            xml2.push(writeIndentation(options2, depth, firstLine) + writeElementCompact(nodes[i], key, options2, depth, hasContentCompact(nodes[i], options2)));\n        }\n        firstLine = firstLine && !xml2.length;\n      }\n    }\n  }\n  return xml2.join(\"\");\n}\nvar js2xml$2 = function(js, options2) {\n  options2 = validateOptions(options2);\n  var xml2 = [];\n  currentElement = js;\n  currentElementName = \"_root_\";\n  if (options2.compact) {\n    xml2.push(writeElementsCompact(js, options2, 0, true));\n  } else {\n    if (js[options2.declarationKey]) {\n      xml2.push(writeDeclaration(js[options2.declarationKey], options2, 0));\n    }\n    if (js[options2.elementsKey] && js[options2.elementsKey].length) {\n      xml2.push(writeElements(js[options2.elementsKey], options2, 0, !xml2.length));\n    }\n  }\n  return xml2.join(\"\");\n};\nvar js2xml$1 = js2xml$2;\nvar json2xml$1 = function(json, options2) {\n  if (json instanceof Buffer) {\n    json = json.toString();\n  }\n  var js = null;\n  if (typeof json === \"string\") {\n    try {\n      js = JSON.parse(json);\n    } catch (e) {\n      throw new Error(\"The JSON structure is invalid\");\n    }\n  } else {\n    js = json;\n  }\n  return js2xml$1(js, options2);\n};\nvar xml2js = xml2js$2;\nvar xml2json = xml2json$1;\nvar js2xml = js2xml$2;\nvar json2xml = json2xml$1;\nvar lib = {\n  xml2js,\n  xml2json,\n  js2xml,\n  json2xml\n};\nconst convertToXmlComponent = (element2) => {\n  switch (element2.type) {\n    case void 0:\n    case \"element\":\n      const xmlComponent = new ImportedXmlComponent(element2.name, element2.attributes);\n      const childElements = element2.elements || [];\n      for (const childElm of childElements) {\n        const child = convertToXmlComponent(childElm);\n        if (child !== void 0) {\n          xmlComponent.push(child);\n        }\n      }\n      return xmlComponent;\n    case \"text\":\n      return element2.text;\n    default:\n      return void 0;\n  }\n};\nclass ImportedXmlComponentAttributes extends XmlAttributeComponent {\n  // noop\n}\nclass ImportedXmlComponent extends XmlComponent {\n  /**\n   * Converts the xml string to a XmlComponent tree.\n   *\n   * @param importedContent xml content of the imported component\n   */\n  static fromXmlString(importedContent) {\n    const xmlObj = lib.xml2js(importedContent, { compact: false });\n    return convertToXmlComponent(xmlObj);\n  }\n  /**\n   * Converts the xml string to a XmlComponent tree.\n   *\n   * @param importedContent xml content of the imported component\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(rootKey, _attr) {\n    super(rootKey);\n    if (_attr) {\n      this.root.push(new ImportedXmlComponentAttributes(_attr));\n    }\n  }\n  push(xmlComponent) {\n    this.root.push(xmlComponent);\n  }\n}\nclass ImportedRootElementAttributes extends XmlComponent {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(_attr) {\n    super(\"\");\n    this._attr = _attr;\n  }\n  prepForXml(_) {\n    return {\n      _attr: this._attr\n    };\n  }\n}\nconst WORKAROUND3 = \"\";\nclass InitializableXmlComponent extends XmlComponent {\n  constructor(rootKey, initComponent) {\n    super(rootKey);\n    if (initComponent) {\n      this.root = initComponent.root;\n    }\n  }\n}\nconst decimalNumber = (val) => {\n  if (isNaN(val)) {\n    throw new Error(`Invalid value '${val}' specified. Must be an integer.`);\n  }\n  return Math.floor(val);\n};\nconst unsignedDecimalNumber = (val) => {\n  const value = decimalNumber(val);\n  if (value < 0) {\n    throw new Error(`Invalid value '${val}' specified. Must be a positive integer.`);\n  }\n  return value;\n};\nconst hexBinary = (val, length) => {\n  const expectedLength = length * 2;\n  if (val.length !== expectedLength || isNaN(Number(`0x${val}`))) {\n    throw new Error(`Invalid hex value '${val}'. Expected ${expectedLength} digit hex value`);\n  }\n  return val;\n};\nconst longHexNumber = (val) => hexBinary(val, 4);\nconst shortHexNumber = (val) => hexBinary(val, 2);\nconst uCharHexNumber = (val) => hexBinary(val, 1);\nconst universalMeasureValue = (val) => {\n  const unit = val.slice(-2);\n  const amount = val.substring(0, val.length - 2);\n  return `${Number(amount)}${unit}`;\n};\nconst positiveUniversalMeasureValue = (val) => {\n  const value = universalMeasureValue(val);\n  if (parseFloat(value) < 0) {\n    throw new Error(`Invalid value '${value}' specified. Expected a positive number.`);\n  }\n  return value;\n};\nconst hexColorValue = (val) => {\n  if (val === \"auto\") {\n    return val;\n  }\n  const color = val.charAt(0) === \"#\" ? val.substring(1) : val;\n  return hexBinary(color, 3);\n};\nconst signedTwipsMeasureValue = (val) => typeof val === \"string\" ? universalMeasureValue(val) : decimalNumber(val);\nconst hpsMeasureValue = (val) => typeof val === \"string\" ? positiveUniversalMeasureValue(val) : unsignedDecimalNumber(val);\nconst signedHpsMeasureValue = (val) => typeof val === \"string\" ? universalMeasureValue(val) : decimalNumber(val);\nconst twipsMeasureValue = (val) => typeof val === \"string\" ? positiveUniversalMeasureValue(val) : unsignedDecimalNumber(val);\nconst percentageValue = (val) => {\n  const percent = val.substring(0, val.length - 1);\n  return `${Number(percent)}%`;\n};\nconst measurementOrPercentValue = (val) => {\n  if (typeof val === \"number\") {\n    return decimalNumber(val);\n  }\n  if (val.slice(-1) === \"%\") {\n    return percentageValue(val);\n  }\n  return universalMeasureValue(val);\n};\nconst eighthPointMeasureValue = unsignedDecimalNumber;\nconst pointMeasureValue = unsignedDecimalNumber;\nconst dateTimeValue = (val) => val.toISOString();\nclass OnOffElement extends XmlComponent {\n  constructor(name, val = true) {\n    super(name);\n    if (val !== true) {\n      this.root.push(new Attributes({ val }));\n    }\n  }\n}\nclass HpsMeasureElement extends XmlComponent {\n  constructor(name, val) {\n    super(name);\n    this.root.push(new Attributes({ val: hpsMeasureValue(val) }));\n  }\n}\nclass EmptyElement extends XmlComponent {\n}\nclass StringValueElement extends XmlComponent {\n  constructor(name, val) {\n    super(name);\n    this.root.push(new Attributes({ val }));\n  }\n}\nconst createStringElement = (name, value) => new BuilderElement({\n  name,\n  attributes: {\n    value: { key: \"w:val\", value }\n  }\n});\nclass NumberValueElement extends XmlComponent {\n  constructor(name, val) {\n    super(name);\n    this.root.push(new Attributes({ val }));\n  }\n}\nclass StringEnumValueElement extends XmlComponent {\n  constructor(name, val) {\n    super(name);\n    this.root.push(new Attributes({ val }));\n  }\n}\nclass StringContainer extends XmlComponent {\n  constructor(name, val) {\n    super(name);\n    this.root.push(val);\n  }\n}\nclass BuilderElement extends XmlComponent {\n  constructor({\n    name,\n    attributes,\n    children\n  }) {\n    super(name);\n    if (attributes) {\n      this.root.push(new NextAttributeComponent(attributes));\n    }\n    if (children) {\n      this.root.push(...children);\n    }\n  }\n}\nconst AlignmentType = {\n  /** Align Start */\n  START: \"start\",\n  /** Align Center */\n  CENTER: \"center\",\n  /** End */\n  END: \"end\",\n  /** Justified */\n  BOTH: \"both\",\n  /** Medium Kashida Length */\n  MEDIUM_KASHIDA: \"mediumKashida\",\n  /** Distribute All Characters Equally */\n  DISTRIBUTE: \"distribute\",\n  /** Align to List Tab */\n  NUM_TAB: \"numTab\",\n  /** Widest Kashida Length */\n  HIGH_KASHIDA: \"highKashida\",\n  /** Low Kashida Length */\n  LOW_KASHIDA: \"lowKashida\",\n  /** Thai Language Justification */\n  THAI_DISTRIBUTE: \"thaiDistribute\",\n  /** Align Left */\n  LEFT: \"left\",\n  /** Align Right */\n  RIGHT: \"right\",\n  /** Justified */\n  JUSTIFIED: \"both\"\n};\nclass AlignmentAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { val: \"w:val\" });\n  }\n}\nclass Alignment extends XmlComponent {\n  constructor(type2) {\n    super(\"w:jc\");\n    this.root.push(new AlignmentAttributes({ val: type2 }));\n  }\n}\nclass BorderElement extends XmlComponent {\n  constructor(elementName, { color, size, space, style }) {\n    super(elementName);\n    this.root.push(\n      new BordersAttributes({\n        style,\n        color: color === void 0 ? void 0 : hexColorValue(color),\n        size: size === void 0 ? void 0 : eighthPointMeasureValue(size),\n        space: space === void 0 ? void 0 : pointMeasureValue(space)\n      })\n    );\n  }\n}\nclass BordersAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      style: \"w:val\",\n      color: \"w:color\",\n      size: \"w:sz\",\n      space: \"w:space\"\n    });\n  }\n}\nconst BorderStyle = {\n  SINGLE: \"single\",\n  DASH_DOT_STROKED: \"dashDotStroked\",\n  DASHED: \"dashed\",\n  DASH_SMALL_GAP: \"dashSmallGap\",\n  DOT_DASH: \"dotDash\",\n  DOT_DOT_DASH: \"dotDotDash\",\n  DOTTED: \"dotted\",\n  DOUBLE: \"double\",\n  DOUBLE_WAVE: \"doubleWave\",\n  INSET: \"inset\",\n  NIL: \"nil\",\n  NONE: \"none\",\n  OUTSET: \"outset\",\n  THICK: \"thick\",\n  THICK_THIN_LARGE_GAP: \"thickThinLargeGap\",\n  THICK_THIN_MEDIUM_GAP: \"thickThinMediumGap\",\n  THICK_THIN_SMALL_GAP: \"thickThinSmallGap\",\n  THIN_THICK_LARGE_GAP: \"thinThickLargeGap\",\n  THIN_THICK_MEDIUM_GAP: \"thinThickMediumGap\",\n  THIN_THICK_SMALL_GAP: \"thinThickSmallGap\",\n  THIN_THICK_THIN_LARGE_GAP: \"thinThickThinLargeGap\",\n  THIN_THICK_THIN_MEDIUM_GAP: \"thinThickThinMediumGap\",\n  THIN_THICK_THIN_SMALL_GAP: \"thinThickThinSmallGap\",\n  THREE_D_EMBOSS: \"threeDEmboss\",\n  THREE_D_ENGRAVE: \"threeDEngrave\",\n  TRIPLE: \"triple\",\n  WAVE: \"wave\"\n};\nclass Border extends IgnoreIfEmptyXmlComponent {\n  constructor(options2) {\n    super(\"w:pBdr\");\n    if (options2.top) {\n      this.root.push(new BorderElement(\"w:top\", options2.top));\n    }\n    if (options2.bottom) {\n      this.root.push(new BorderElement(\"w:bottom\", options2.bottom));\n    }\n    if (options2.left) {\n      this.root.push(new BorderElement(\"w:left\", options2.left));\n    }\n    if (options2.right) {\n      this.root.push(new BorderElement(\"w:right\", options2.right));\n    }\n  }\n}\nclass ThematicBreak extends XmlComponent {\n  constructor() {\n    super(\"w:pBdr\");\n    const bottom = new BorderElement(\"w:bottom\", {\n      color: \"auto\",\n      space: 1,\n      style: BorderStyle.SINGLE,\n      size: 6\n    });\n    this.root.push(bottom);\n  }\n}\nclass Indent extends XmlComponent {\n  constructor({ start, end, left, right, hanging, firstLine }) {\n    super(\"w:ind\");\n    this.root.push(\n      new NextAttributeComponent({\n        start: {\n          key: \"w:start\",\n          value: start === void 0 ? void 0 : signedTwipsMeasureValue(start)\n        },\n        end: {\n          key: \"w:end\",\n          value: end === void 0 ? void 0 : signedTwipsMeasureValue(end)\n        },\n        left: {\n          key: \"w:left\",\n          value: left === void 0 ? void 0 : signedTwipsMeasureValue(left)\n        },\n        right: {\n          key: \"w:right\",\n          value: right === void 0 ? void 0 : signedTwipsMeasureValue(right)\n        },\n        hanging: {\n          key: \"w:hanging\",\n          value: hanging === void 0 ? void 0 : twipsMeasureValue(hanging)\n        },\n        firstLine: {\n          key: \"w:firstLine\",\n          value: firstLine === void 0 ? void 0 : twipsMeasureValue(firstLine)\n        }\n      })\n    );\n  }\n}\nlet Break$1 = class Break extends XmlComponent {\n  constructor() {\n    super(\"w:br\");\n  }\n};\nconst FieldCharacterType = {\n  BEGIN: \"begin\",\n  END: \"end\",\n  SEPARATE: \"separate\"\n};\nclass FidCharAttrs extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { type: \"w:fldCharType\", dirty: \"w:dirty\" });\n  }\n}\nclass Begin extends XmlComponent {\n  constructor(dirty) {\n    super(\"w:fldChar\");\n    this.root.push(new FidCharAttrs({ type: FieldCharacterType.BEGIN, dirty }));\n  }\n}\nclass Separate extends XmlComponent {\n  constructor(dirty) {\n    super(\"w:fldChar\");\n    this.root.push(new FidCharAttrs({ type: FieldCharacterType.SEPARATE, dirty }));\n  }\n}\nclass End extends XmlComponent {\n  constructor(dirty) {\n    super(\"w:fldChar\");\n    this.root.push(new FidCharAttrs({ type: FieldCharacterType.END, dirty }));\n  }\n}\nconst HorizontalPositionAlign = {\n  CENTER: \"center\",\n  INSIDE: \"inside\",\n  LEFT: \"left\",\n  OUTSIDE: \"outside\",\n  RIGHT: \"right\"\n};\nconst VerticalPositionAlign = {\n  BOTTOM: \"bottom\",\n  CENTER: \"center\",\n  INSIDE: \"inside\",\n  OUTSIDE: \"outside\",\n  TOP: \"top\"\n};\nconst NumberFormat$1 = {\n  DECIMAL: \"decimal\",\n  UPPER_ROMAN: \"upperRoman\",\n  LOWER_ROMAN: \"lowerRoman\",\n  UPPER_LETTER: \"upperLetter\",\n  LOWER_LETTER: \"lowerLetter\",\n  ORDINAL: \"ordinal\",\n  CARDINAL_TEXT: \"cardinalText\",\n  ORDINAL_TEXT: \"ordinalText\",\n  HEX: \"hex\",\n  CHICAGO: \"chicago\",\n  IDEOGRAPH_DIGITAL: \"ideographDigital\",\n  JAPANESE_COUNTING: \"japaneseCounting\",\n  AIUEO: \"aiueo\",\n  IROHA: \"iroha\",\n  DECIMAL_FULL_WIDTH: \"decimalFullWidth\",\n  DECIMAL_HALF_WIDTH: \"decimalHalfWidth\",\n  JAPANESE_LEGAL: \"japaneseLegal\",\n  JAPANESE_DIGITAL_TEN_THOUSAND: \"japaneseDigitalTenThousand\",\n  DECIMAL_ENCLOSED_CIRCLE: \"decimalEnclosedCircle\",\n  DECIMAL_FULL_WIDTH_2: \"decimalFullWidth2\",\n  AIUEO_FULL_WIDTH: \"aiueoFullWidth\",\n  IROHA_FULL_WIDTH: \"irohaFullWidth\",\n  DECIMAL_ZERO: \"decimalZero\",\n  BULLET: \"bullet\",\n  GANADA: \"ganada\",\n  CHOSUNG: \"chosung\",\n  DECIMAL_ENCLOSED_FULL_STOP: \"decimalEnclosedFullstop\",\n  DECIMAL_ENCLOSED_PAREN: \"decimalEnclosedParen\",\n  DECIMAL_ENCLOSED_CIRCLE_CHINESE: \"decimalEnclosedCircleChinese\",\n  IDEOGRAPH_ENCLOSED_CIRCLE: \"ideographEnclosedCircle\",\n  IDEOGRAPH_TRADITIONAL: \"ideographTraditional\",\n  IDEOGRAPH_ZODIAC: \"ideographZodiac\",\n  IDEOGRAPH_ZODIAC_TRADITIONAL: \"ideographZodiacTraditional\",\n  TAIWANESE_COUNTING: \"taiwaneseCounting\",\n  IDEOGRAPH_LEGAL_TRADITIONAL: \"ideographLegalTraditional\",\n  TAIWANESE_COUNTING_THOUSAND: \"taiwaneseCountingThousand\",\n  TAIWANESE_DIGITAL: \"taiwaneseDigital\",\n  CHINESE_COUNTING: \"chineseCounting\",\n  CHINESE_LEGAL_SIMPLIFIED: \"chineseLegalSimplified\",\n  CHINESE_COUNTING_TEN_THOUSAND: \"chineseCountingThousand\",\n  KOREAN_DIGITAL: \"koreanDigital\",\n  KOREAN_COUNTING: \"koreanCounting\",\n  KOREAN_LEGAL: \"koreanLegal\",\n  KOREAN_DIGITAL_2: \"koreanDigital2\",\n  VIETNAMESE_COUNTING: \"vietnameseCounting\",\n  RUSSIAN_LOWER: \"russianLower\",\n  RUSSIAN_UPPER: \"russianUpper\",\n  NONE: \"none\",\n  NUMBER_IN_DASH: \"numberInDash\",\n  HEBREW_1: \"hebrew1\",\n  HEBREW_2: \"hebrew2\",\n  ARABIC_ALPHA: \"arabicAlpha\",\n  ARABIC_ABJAD: \"arabicAbjad\",\n  HINDI_VOWELS: \"hindiVowels\",\n  HINDI_CONSONANTS: \"hindiConsonants\",\n  HINDI_NUMBERS: \"hindiNumbers\",\n  HINDI_COUNTING: \"hindiCounting\",\n  THAI_LETTERS: \"thaiLetters\",\n  THAI_NUMBERS: \"thaiNumbers\",\n  THAI_COUNTING: \"thaiCounting\",\n  BAHT_TEXT: \"bahtText\",\n  DOLLAR_TEXT: \"dollarText\"\n  //   <xsd:enumeration value=\"custom\"/>\n};\nconst SpaceType = {\n  DEFAULT: \"default\",\n  PRESERVE: \"preserve\"\n};\nclass TextAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { space: \"xml:space\" });\n  }\n}\nclass Page extends XmlComponent {\n  constructor() {\n    super(\"w:instrText\");\n    this.root.push(new TextAttributes({ space: SpaceType.PRESERVE }));\n    this.root.push(\"PAGE\");\n  }\n}\nclass NumberOfPages extends XmlComponent {\n  constructor() {\n    super(\"w:instrText\");\n    this.root.push(new TextAttributes({ space: SpaceType.PRESERVE }));\n    this.root.push(\"NUMPAGES\");\n  }\n}\nclass NumberOfPagesSection extends XmlComponent {\n  constructor() {\n    super(\"w:instrText\");\n    this.root.push(new TextAttributes({ space: SpaceType.PRESERVE }));\n    this.root.push(\"SECTIONPAGES\");\n  }\n}\nclass CurrentSection extends XmlComponent {\n  constructor() {\n    super(\"w:instrText\");\n    this.root.push(new TextAttributes({ space: SpaceType.PRESERVE }));\n    this.root.push(\"SECTION\");\n  }\n}\nclass ShadingAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      fill: \"w:fill\",\n      color: \"w:color\",\n      type: \"w:val\"\n    });\n  }\n}\nclass Shading extends XmlComponent {\n  constructor({ fill, color, type: type2 }) {\n    super(\"w:shd\");\n    this.root.push(\n      new ShadingAttributes({\n        fill: fill === void 0 ? void 0 : hexColorValue(fill),\n        color: color === void 0 ? void 0 : hexColorValue(color),\n        type: type2\n      })\n    );\n  }\n}\nconst ShadingType = {\n  CLEAR: \"clear\",\n  DIAGONAL_CROSS: \"diagCross\",\n  DIAGONAL_STRIPE: \"diagStripe\",\n  HORIZONTAL_CROSS: \"horzCross\",\n  HORIZONTAL_STRIPE: \"horzStripe\",\n  NIL: \"nil\",\n  PERCENT_5: \"pct5\",\n  PERCENT_10: \"pct10\",\n  PERCENT_12: \"pct12\",\n  PERCENT_15: \"pct15\",\n  PERCENT_20: \"pct20\",\n  PERCENT_25: \"pct25\",\n  PERCENT_30: \"pct30\",\n  PERCENT_35: \"pct35\",\n  PERCENT_37: \"pct37\",\n  PERCENT_40: \"pct40\",\n  PERCENT_45: \"pct45\",\n  PERCENT_50: \"pct50\",\n  PERCENT_55: \"pct55\",\n  PERCENT_60: \"pct60\",\n  PERCENT_62: \"pct62\",\n  PERCENT_65: \"pct65\",\n  PERCENT_70: \"pct70\",\n  PERCENT_75: \"pct75\",\n  PERCENT_80: \"pct80\",\n  PERCENT_85: \"pct85\",\n  PERCENT_87: \"pct87\",\n  PERCENT_90: \"pct90\",\n  PERCENT_95: \"pct95\",\n  REVERSE_DIAGONAL_STRIPE: \"reverseDiagStripe\",\n  SOLID: \"solid\",\n  THIN_DIAGONAL_CROSS: \"thinDiagCross\",\n  THIN_DIAGONAL_STRIPE: \"thinDiagStripe\",\n  THIN_HORIZONTAL_CROSS: \"thinHorzCross\",\n  THIN_REVERSE_DIAGONAL_STRIPE: \"thinReverseDiagStripe\",\n  THIN_VERTICAL_STRIPE: \"thinVertStripe\",\n  VERTICAL_STRIPE: \"vertStripe\"\n};\nclass ChangeAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      id: \"w:id\",\n      author: \"w:author\",\n      date: \"w:date\"\n    });\n  }\n}\nconst EmphasisMarkType = {\n  DOT: \"dot\"\n};\nclass BaseEmphasisMark extends XmlComponent {\n  constructor(emphasisMarkType) {\n    super(\"w:em\");\n    this.root.push(\n      new Attributes({\n        val: emphasisMarkType\n      })\n    );\n  }\n}\nclass EmphasisMark extends BaseEmphasisMark {\n  constructor(emphasisMarkType = EmphasisMarkType.DOT) {\n    super(emphasisMarkType);\n  }\n}\nclass DotEmphasisMark extends BaseEmphasisMark {\n  constructor() {\n    super(EmphasisMarkType.DOT);\n  }\n}\nclass CharacterSpacing extends XmlComponent {\n  constructor(value) {\n    super(\"w:spacing\");\n    this.root.push(\n      new Attributes({\n        val: signedTwipsMeasureValue(value)\n      })\n    );\n  }\n}\nclass Color extends XmlComponent {\n  constructor(color) {\n    super(\"w:color\");\n    this.root.push(\n      new Attributes({\n        val: hexColorValue(color)\n      })\n    );\n  }\n}\nclass Highlight extends XmlComponent {\n  constructor(color) {\n    super(\"w:highlight\");\n    this.root.push(\n      new Attributes({\n        val: color\n      })\n    );\n  }\n}\nclass HighlightComplexScript extends XmlComponent {\n  constructor(color) {\n    super(\"w:highlightCs\");\n    this.root.push(\n      new Attributes({\n        val: color\n      })\n    );\n  }\n}\nconst createLanguageComponent = (options2) => new BuilderElement({\n  name: \"w:lang\",\n  attributes: {\n    value: {\n      key: \"w:val\",\n      value: options2.value\n    },\n    eastAsia: {\n      key: \"w:eastAsia\",\n      value: options2.eastAsia\n    },\n    bidirectional: {\n      key: \"w:bidi\",\n      value: options2.bidirectional\n    }\n  }\n});\nclass RunFontAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      ascii: \"w:ascii\",\n      cs: \"w:cs\",\n      eastAsia: \"w:eastAsia\",\n      hAnsi: \"w:hAnsi\",\n      hint: \"w:hint\"\n    });\n  }\n}\nclass RunFonts extends XmlComponent {\n  constructor(nameOrAttrs, hint) {\n    super(\"w:rFonts\");\n    if (typeof nameOrAttrs === \"string\") {\n      const name = nameOrAttrs;\n      this.root.push(\n        new RunFontAttributes({\n          ascii: name,\n          cs: name,\n          eastAsia: name,\n          hAnsi: name,\n          hint\n        })\n      );\n    } else {\n      const attrs = nameOrAttrs;\n      this.root.push(new RunFontAttributes(attrs));\n    }\n  }\n}\nlet VerticalAlign$1 = class VerticalAlign extends XmlComponent {\n  constructor(type2) {\n    super(\"w:vertAlign\");\n    this.root.push(\n      new Attributes({\n        val: type2\n      })\n    );\n  }\n};\nclass SuperScript extends VerticalAlign$1 {\n  constructor() {\n    super(\"superscript\");\n  }\n}\nclass SubScript extends VerticalAlign$1 {\n  constructor() {\n    super(\"subscript\");\n  }\n}\nconst UnderlineType = {\n  SINGLE: \"single\",\n  WORDS: \"words\",\n  DOUBLE: \"double\",\n  THICK: \"thick\",\n  DOTTED: \"dotted\",\n  DOTTEDHEAVY: \"dottedHeavy\",\n  DASH: \"dash\",\n  DASHEDHEAVY: \"dashedHeavy\",\n  DASHLONG: \"dashLong\",\n  DASHLONGHEAVY: \"dashLongHeavy\",\n  DOTDASH: \"dotDash\",\n  DASHDOTHEAVY: \"dashDotHeavy\",\n  DOTDOTDASH: \"dotDotDash\",\n  DASHDOTDOTHEAVY: \"dashDotDotHeavy\",\n  WAVE: \"wave\",\n  WAVYHEAVY: \"wavyHeavy\",\n  WAVYDOUBLE: \"wavyDouble\",\n  NONE: \"none\"\n};\nclass Underline extends XmlComponent {\n  constructor(underlineType = UnderlineType.SINGLE, color) {\n    super(\"w:u\");\n    this.root.push(\n      new Attributes({\n        val: underlineType,\n        color: color === void 0 ? void 0 : hexColorValue(color)\n      })\n    );\n  }\n}\nconst TextEffect = {\n  BLINK_BACKGROUND: \"blinkBackground\",\n  LIGHTS: \"lights\",\n  ANTS_BLACK: \"antsBlack\",\n  ANTS_RED: \"antsRed\",\n  SHIMMER: \"shimmer\",\n  SPARKLE: \"sparkle\",\n  NONE: \"none\"\n};\nconst HighlightColor = {\n  BLACK: \"black\",\n  BLUE: \"blue\",\n  CYAN: \"cyan\",\n  DARK_BLUE: \"darkBlue\",\n  DARK_CYAN: \"darkCyan\",\n  DARK_GRAY: \"darkGray\",\n  DARK_GREEN: \"darkGreen\",\n  DARK_MAGENTA: \"darkMagenta\",\n  DARK_RED: \"darkRed\",\n  DARK_YELLOW: \"darkYellow\",\n  GREEN: \"green\",\n  LIGHT_GRAY: \"lightGray\",\n  MAGENTA: \"magenta\",\n  NONE: \"none\",\n  RED: \"red\",\n  WHITE: \"white\",\n  YELLOW: \"yellow\"\n};\nclass RunProperties extends IgnoreIfEmptyXmlComponent {\n  constructor(options2) {\n    var _a, _b;\n    super(\"w:rPr\");\n    if (!options2) {\n      return;\n    }\n    if (options2.noProof !== void 0) {\n      this.push(new OnOffElement(\"w:noProof\", options2.noProof));\n    }\n    if (options2.bold !== void 0) {\n      this.push(new OnOffElement(\"w:b\", options2.bold));\n    }\n    if (options2.boldComplexScript === void 0 && options2.bold !== void 0 || options2.boldComplexScript) {\n      this.push(new OnOffElement(\"w:bCs\", (_a = options2.boldComplexScript) != null ? _a : options2.bold));\n    }\n    if (options2.italics !== void 0) {\n      this.push(new OnOffElement(\"w:i\", options2.italics));\n    }\n    if (options2.italicsComplexScript === void 0 && options2.italics !== void 0 || options2.italicsComplexScript) {\n      this.push(new OnOffElement(\"w:iCs\", (_b = options2.italicsComplexScript) != null ? _b : options2.italics));\n    }\n    if (options2.underline) {\n      this.push(new Underline(options2.underline.type, options2.underline.color));\n    }\n    if (options2.effect) {\n      this.push(new StringValueElement(\"w:effect\", options2.effect));\n    }\n    if (options2.emphasisMark) {\n      this.push(new EmphasisMark(options2.emphasisMark.type));\n    }\n    if (options2.color) {\n      this.push(new Color(options2.color));\n    }\n    if (options2.kern) {\n      this.push(new HpsMeasureElement(\"w:kern\", options2.kern));\n    }\n    if (options2.position) {\n      this.push(new StringValueElement(\"w:position\", options2.position));\n    }\n    if (options2.size !== void 0) {\n      this.push(new HpsMeasureElement(\"w:sz\", options2.size));\n    }\n    const szCs = options2.sizeComplexScript === void 0 || options2.sizeComplexScript === true ? options2.size : options2.sizeComplexScript;\n    if (szCs) {\n      this.push(new HpsMeasureElement(\"w:szCs\", szCs));\n    }\n    if (options2.rightToLeft !== void 0) {\n      this.push(new OnOffElement(\"w:rtl\", options2.rightToLeft));\n    }\n    if (options2.smallCaps !== void 0) {\n      this.push(new OnOffElement(\"w:smallCaps\", options2.smallCaps));\n    } else if (options2.allCaps !== void 0) {\n      this.push(new OnOffElement(\"w:caps\", options2.allCaps));\n    }\n    if (options2.strike !== void 0) {\n      this.push(new OnOffElement(\"w:strike\", options2.strike));\n    }\n    if (options2.doubleStrike !== void 0) {\n      this.push(new OnOffElement(\"w:dstrike\", options2.doubleStrike));\n    }\n    if (options2.subScript) {\n      this.push(new SubScript());\n    }\n    if (options2.superScript) {\n      this.push(new SuperScript());\n    }\n    if (options2.style) {\n      this.push(new StringValueElement(\"w:rStyle\", options2.style));\n    }\n    if (options2.font) {\n      if (typeof options2.font === \"string\") {\n        this.push(new RunFonts(options2.font));\n      } else if (\"name\" in options2.font) {\n        this.push(new RunFonts(options2.font.name, options2.font.hint));\n      } else {\n        this.push(new RunFonts(options2.font));\n      }\n    }\n    if (options2.highlight) {\n      this.push(new Highlight(options2.highlight));\n    }\n    const highlightCs = options2.highlightComplexScript === void 0 || options2.highlightComplexScript === true ? options2.highlight : options2.highlightComplexScript;\n    if (highlightCs) {\n      this.push(new HighlightComplexScript(highlightCs));\n    }\n    if (options2.characterSpacing) {\n      this.push(new CharacterSpacing(options2.characterSpacing));\n    }\n    if (options2.emboss !== void 0) {\n      this.push(new OnOffElement(\"w:emboss\", options2.emboss));\n    }\n    if (options2.imprint !== void 0) {\n      this.push(new OnOffElement(\"w:imprint\", options2.imprint));\n    }\n    if (options2.shading) {\n      this.push(new Shading(options2.shading));\n    }\n    if (options2.revision) {\n      this.push(new RunPropertiesChange(options2.revision));\n    }\n    if (options2.border) {\n      this.push(new BorderElement(\"w:bdr\", options2.border));\n    }\n    if (options2.snapToGrid !== void 0) {\n      this.push(new OnOffElement(\"w:snapToGrid\", options2.snapToGrid));\n    }\n    if (options2.vanish) {\n      this.push(new OnOffElement(\"w:vanish\", options2.vanish));\n    }\n    if (options2.specVanish) {\n      this.push(new OnOffElement(\"w:specVanish\", options2.vanish));\n    }\n    if (options2.scale !== void 0) {\n      this.push(new NumberValueElement(\"w:w\", options2.scale));\n    }\n    if (options2.language) {\n      this.push(createLanguageComponent(options2.language));\n    }\n    if (options2.math) {\n      this.push(new OnOffElement(\"w:oMath\", options2.math));\n    }\n  }\n  push(item) {\n    this.root.push(item);\n  }\n}\nclass RunPropertiesChange extends XmlComponent {\n  constructor(options2) {\n    super(\"w:rPrChange\");\n    this.root.push(\n      new ChangeAttributes({\n        id: options2.id,\n        author: options2.author,\n        date: options2.date\n      })\n    );\n    this.addChildElement(new RunProperties(options2));\n  }\n}\nclass Text extends XmlComponent {\n  constructor(options2) {\n    var _a;\n    super(\"w:t\");\n    if (typeof options2 === \"string\") {\n      this.root.push(new TextAttributes({ space: SpaceType.PRESERVE }));\n      this.root.push(options2);\n    } else {\n      this.root.push(new TextAttributes({ space: (_a = options2.space) != null ? _a : SpaceType.DEFAULT }));\n      this.root.push(options2.text);\n    }\n  }\n}\nconst PageNumber = {\n  CURRENT: \"CURRENT\",\n  TOTAL_PAGES: \"TOTAL_PAGES\",\n  TOTAL_PAGES_IN_SECTION: \"TOTAL_PAGES_IN_SECTION\",\n  CURRENT_SECTION: \"SECTION\"\n};\nclass Run extends XmlComponent {\n  constructor(options2) {\n    super(\"w:r\");\n    __publicField(this, \"properties\");\n    this.properties = new RunProperties(options2);\n    this.root.push(this.properties);\n    if (options2.break) {\n      for (let i = 0; i < options2.break; i++) {\n        this.root.push(new Break$1());\n      }\n    }\n    if (options2.children) {\n      for (const child of options2.children) {\n        if (typeof child === \"string\") {\n          switch (child) {\n            case PageNumber.CURRENT:\n              this.root.push(new Begin());\n              this.root.push(new Page());\n              this.root.push(new Separate());\n              this.root.push(new End());\n              break;\n            case PageNumber.TOTAL_PAGES:\n              this.root.push(new Begin());\n              this.root.push(new NumberOfPages());\n              this.root.push(new Separate());\n              this.root.push(new End());\n              break;\n            case PageNumber.TOTAL_PAGES_IN_SECTION:\n              this.root.push(new Begin());\n              this.root.push(new NumberOfPagesSection());\n              this.root.push(new Separate());\n              this.root.push(new End());\n              break;\n            case PageNumber.CURRENT_SECTION:\n              this.root.push(new Begin());\n              this.root.push(new CurrentSection());\n              this.root.push(new Separate());\n              this.root.push(new End());\n              break;\n            default:\n              this.root.push(new Text(child));\n              break;\n          }\n          continue;\n        }\n        this.root.push(child);\n      }\n    } else if (options2.text) {\n      this.root.push(new Text(options2.text));\n    }\n  }\n}\nclass TextRun extends Run {\n  constructor(options2) {\n    if (typeof options2 === \"string\") {\n      super({});\n      this.root.push(new Text(options2));\n      return this;\n    }\n    super(options2);\n  }\n}\nclass SymbolAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      char: \"w:char\",\n      symbolfont: \"w:font\"\n    });\n  }\n}\nlet Symbol$1 = class Symbol2 extends XmlComponent {\n  constructor(char = \"\", symbolfont = \"Wingdings\") {\n    super(\"w:sym\");\n    this.root.push(new SymbolAttributes({ char, symbolfont }));\n  }\n};\nclass SymbolRun extends Run {\n  constructor(options2) {\n    if (typeof options2 === \"string\") {\n      super({});\n      this.root.push(new Symbol$1(options2));\n      return this;\n    }\n    super(options2);\n    this.root.push(new Symbol$1(options2.char, options2.symbolfont));\n  }\n}\nvar hash$1 = {};\nvar utils$9 = {};\nvar minimalisticAssert = assert$5;\nfunction assert$5(val, msg) {\n  if (!val)\n    throw new Error(msg || \"Assertion failed\");\n}\nassert$5.equal = function assertEqual(l, r2, msg) {\n  if (l != r2)\n    throw new Error(msg || \"Assertion failed: \" + l + \" != \" + r2);\n};\nvar assert$4 = minimalisticAssert;\nvar inherits = inherits_browserExports;\nutils$9.inherits = inherits;\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 64512) !== 55296) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 64512) === 56320;\n}\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === \"string\") {\n    if (!enc) {\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = c >> 6 | 192;\n          res[p++] = c & 63 | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i) & 1023);\n          res[p++] = c >> 18 | 240;\n          res[p++] = c >> 12 & 63 | 128;\n          res[p++] = c >> 6 & 63 | 128;\n          res[p++] = c & 63 | 128;\n        } else {\n          res[p++] = c >> 12 | 224;\n          res[p++] = c >> 6 & 63 | 128;\n          res[p++] = c & 63 | 128;\n        }\n      }\n    } else if (enc === \"hex\") {\n      msg = msg.replace(/[^a-z0-9]+/ig, \"\");\n      if (msg.length % 2 !== 0)\n        msg = \"0\" + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nutils$9.toArray = toArray;\nfunction toHex(msg) {\n  var res = \"\";\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nutils$9.toHex = toHex;\nfunction htonl(w) {\n  var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;\n  return res >>> 0;\n}\nutils$9.htonl = htonl;\nfunction toHex32(msg, endian) {\n  var res = \"\";\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === \"little\")\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nutils$9.toHex32 = toHex32;\nfunction zero2(word) {\n  if (word.length === 1)\n    return \"0\" + word;\n  else\n    return word;\n}\nutils$9.zero2 = zero2;\nfunction zero8(word) {\n  if (word.length === 7)\n    return \"0\" + word;\n  else if (word.length === 6)\n    return \"00\" + word;\n  else if (word.length === 5)\n    return \"000\" + word;\n  else if (word.length === 4)\n    return \"0000\" + word;\n  else if (word.length === 3)\n    return \"00000\" + word;\n  else if (word.length === 2)\n    return \"000000\" + word;\n  else if (word.length === 1)\n    return \"0000000\" + word;\n  else\n    return word;\n}\nutils$9.zero8 = zero8;\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert$4(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === \"big\")\n      w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];\n    else\n      w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nutils$9.join32 = join32;\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === \"big\") {\n      res[k] = m >>> 24;\n      res[k + 1] = m >>> 16 & 255;\n      res[k + 2] = m >>> 8 & 255;\n      res[k + 3] = m & 255;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = m >>> 16 & 255;\n      res[k + 1] = m >>> 8 & 255;\n      res[k] = m & 255;\n    }\n  }\n  return res;\n}\nutils$9.split32 = split32;\nfunction rotr32$1(w, b) {\n  return w >>> b | w << 32 - b;\n}\nutils$9.rotr32 = rotr32$1;\nfunction rotl32$2(w, b) {\n  return w << b | w >>> 32 - b;\n}\nutils$9.rotl32 = rotl32$2;\nfunction sum32$3(a, b) {\n  return a + b >>> 0;\n}\nutils$9.sum32 = sum32$3;\nfunction sum32_3$1(a, b, c) {\n  return a + b + c >>> 0;\n}\nutils$9.sum32_3 = sum32_3$1;\nfunction sum32_4$2(a, b, c, d) {\n  return a + b + c + d >>> 0;\n}\nutils$9.sum32_4 = sum32_4$2;\nfunction sum32_5$2(a, b, c, d, e) {\n  return a + b + c + d + e >>> 0;\n}\nutils$9.sum32_5 = sum32_5$2;\nfunction sum64$1(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nutils$9.sum64 = sum64$1;\nfunction sum64_hi$1(ah, al, bh, bl) {\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nutils$9.sum64_hi = sum64_hi$1;\nfunction sum64_lo$1(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nutils$9.sum64_lo = sum64_lo$1;\nfunction sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nutils$9.sum64_4_hi = sum64_4_hi$1;\nfunction sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nutils$9.sum64_4_lo = sum64_4_lo$1;\nfunction sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = lo + el >>> 0;\n  carry += lo < el ? 1 : 0;\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nutils$9.sum64_5_hi = sum64_5_hi$1;\nfunction sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n  return lo >>> 0;\n}\nutils$9.sum64_5_lo = sum64_5_lo$1;\nfunction rotr64_hi$1(ah, al, num) {\n  var r2 = al << 32 - num | ah >>> num;\n  return r2 >>> 0;\n}\nutils$9.rotr64_hi = rotr64_hi$1;\nfunction rotr64_lo$1(ah, al, num) {\n  var r2 = ah << 32 - num | al >>> num;\n  return r2 >>> 0;\n}\nutils$9.rotr64_lo = rotr64_lo$1;\nfunction shr64_hi$1(ah, al, num) {\n  return ah >>> num;\n}\nutils$9.shr64_hi = shr64_hi$1;\nfunction shr64_lo$1(ah, al, num) {\n  var r2 = ah << 32 - num | al >>> num;\n  return r2 >>> 0;\n}\nutils$9.shr64_lo = shr64_lo$1;\nvar common$5 = {};\nvar utils$8 = utils$9;\nvar assert$3 = minimalisticAssert;\nfunction BlockHash$4() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = \"big\";\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\ncommon$5.BlockHash = BlockHash$4;\nBlockHash$4.prototype.update = function update(msg, enc) {\n  msg = utils$8.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n    var r2 = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r2, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n    msg = utils$8.join32(msg, 0, msg.length - r2, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n  return this;\n};\nBlockHash$4.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert$3(this.pending === null);\n  return this._digest(enc);\n};\nBlockHash$4.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - (len + this.padLength) % bytes;\n  var res = new Array(k + this.padLength);\n  res[0] = 128;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n  len <<= 3;\n  if (this.endian === \"big\") {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = len >>> 24 & 255;\n    res[i++] = len >>> 16 & 255;\n    res[i++] = len >>> 8 & 255;\n    res[i++] = len & 255;\n  } else {\n    res[i++] = len & 255;\n    res[i++] = len >>> 8 & 255;\n    res[i++] = len >>> 16 & 255;\n    res[i++] = len >>> 24 & 255;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n  return res;\n};\nvar sha = {};\nvar common$4 = {};\nvar utils$7 = utils$9;\nvar rotr32 = utils$7.rotr32;\nfunction ft_1$1(s2, x, y, z) {\n  if (s2 === 0)\n    return ch32$1(x, y, z);\n  if (s2 === 1 || s2 === 3)\n    return p32(x, y, z);\n  if (s2 === 2)\n    return maj32$1(x, y, z);\n}\ncommon$4.ft_1 = ft_1$1;\nfunction ch32$1(x, y, z) {\n  return x & y ^ ~x & z;\n}\ncommon$4.ch32 = ch32$1;\nfunction maj32$1(x, y, z) {\n  return x & y ^ x & z ^ y & z;\n}\ncommon$4.maj32 = maj32$1;\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\ncommon$4.p32 = p32;\nfunction s0_256$1(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\ncommon$4.s0_256 = s0_256$1;\nfunction s1_256$1(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\ncommon$4.s1_256 = s1_256$1;\nfunction g0_256$1(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;\n}\ncommon$4.g0_256 = g0_256$1;\nfunction g1_256$1(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;\n}\ncommon$4.g1_256 = g1_256$1;\nvar utils$6 = utils$9;\nvar common$3 = common$5;\nvar shaCommon$1 = common$4;\nvar rotl32$1 = utils$6.rotl32;\nvar sum32$2 = utils$6.sum32;\nvar sum32_5$1 = utils$6.sum32_5;\nvar ft_1 = shaCommon$1.ft_1;\nvar BlockHash$3 = common$3.BlockHash;\nvar sha1_K = [\n  1518500249,\n  1859775393,\n  2400959708,\n  3395469782\n];\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n  BlockHash$3.call(this);\n  this.h = [\n    1732584193,\n    4023233417,\n    2562383102,\n    271733878,\n    3285377520\n  ];\n  this.W = new Array(80);\n}\nutils$6.inherits(SHA1, BlockHash$3);\nvar _1 = SHA1;\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  for (i = 0; i < W.length; i++) {\n    var s2 = ~~(i / 20);\n    var t = sum32_5$1(rotl32$1(a, 5), ft_1(s2, b, c, d), e, W[i], sha1_K[s2]);\n    e = d;\n    d = c;\n    c = rotl32$1(b, 30);\n    b = a;\n    a = t;\n  }\n  this.h[0] = sum32$2(this.h[0], a);\n  this.h[1] = sum32$2(this.h[1], b);\n  this.h[2] = sum32$2(this.h[2], c);\n  this.h[3] = sum32$2(this.h[3], d);\n  this.h[4] = sum32$2(this.h[4], e);\n};\nSHA1.prototype._digest = function digest2(enc) {\n  if (enc === \"hex\")\n    return utils$6.toHex32(this.h, \"big\");\n  else\n    return utils$6.split32(this.h, \"big\");\n};\nvar utils$5 = utils$9;\nvar common$2 = common$5;\nvar shaCommon = common$4;\nvar assert$2 = minimalisticAssert;\nvar sum32$1 = utils$5.sum32;\nvar sum32_4$1 = utils$5.sum32_4;\nvar sum32_5 = utils$5.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\nvar BlockHash$2 = common$2.BlockHash;\nvar sha256_K = [\n  1116352408,\n  1899447441,\n  3049323471,\n  3921009573,\n  961987163,\n  1508970993,\n  2453635748,\n  2870763221,\n  3624381080,\n  310598401,\n  607225278,\n  1426881987,\n  1925078388,\n  2162078206,\n  2614888103,\n  3248222580,\n  3835390401,\n  4022224774,\n  264347078,\n  604807628,\n  770255983,\n  1249150122,\n  1555081692,\n  1996064986,\n  2554220882,\n  2821834349,\n  2952996808,\n  3210313671,\n  3336571891,\n  3584528711,\n  113926993,\n  338241895,\n  666307205,\n  773529912,\n  1294757372,\n  1396182291,\n  1695183700,\n  1986661051,\n  2177026350,\n  2456956037,\n  2730485921,\n  2820302411,\n  3259730800,\n  3345764771,\n  3516065817,\n  3600352804,\n  4094571909,\n  275423344,\n  430227734,\n  506948616,\n  659060556,\n  883997877,\n  958139571,\n  1322822218,\n  1537002063,\n  1747873779,\n  1955562222,\n  2024104815,\n  2227730452,\n  2361852424,\n  2428436474,\n  2756734187,\n  3204031479,\n  3329325298\n];\nfunction SHA256$1() {\n  if (!(this instanceof SHA256$1))\n    return new SHA256$1();\n  BlockHash$2.call(this);\n  this.h = [\n    1779033703,\n    3144134277,\n    1013904242,\n    2773480762,\n    1359893119,\n    2600822924,\n    528734635,\n    1541459225\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils$5.inherits(SHA256$1, BlockHash$2);\nvar _256 = SHA256$1;\nSHA256$1.blockSize = 512;\nSHA256$1.outSize = 256;\nSHA256$1.hmacStrength = 192;\nSHA256$1.padLength = 64;\nSHA256$1.prototype._update = function _update2(msg, start) {\n  var W = this.W;\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f2 = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n  assert$2(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f2, g), this.k[i], W[i]);\n    var T2 = sum32$1(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f2;\n    f2 = e;\n    e = sum32$1(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32$1(T1, T2);\n  }\n  this.h[0] = sum32$1(this.h[0], a);\n  this.h[1] = sum32$1(this.h[1], b);\n  this.h[2] = sum32$1(this.h[2], c);\n  this.h[3] = sum32$1(this.h[3], d);\n  this.h[4] = sum32$1(this.h[4], e);\n  this.h[5] = sum32$1(this.h[5], f2);\n  this.h[6] = sum32$1(this.h[6], g);\n  this.h[7] = sum32$1(this.h[7], h);\n};\nSHA256$1.prototype._digest = function digest3(enc) {\n  if (enc === \"hex\")\n    return utils$5.toHex32(this.h, \"big\");\n  else\n    return utils$5.split32(this.h, \"big\");\n};\nvar utils$4 = utils$9;\nvar SHA256 = _256;\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n  SHA256.call(this);\n  this.h = [\n    3238371032,\n    914150663,\n    812702999,\n    4144912697,\n    4290775857,\n    1750603025,\n    1694076839,\n    3204075428\n  ];\n}\nutils$4.inherits(SHA224, SHA256);\nvar _224 = SHA224;\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\nSHA224.prototype._digest = function digest4(enc) {\n  if (enc === \"hex\")\n    return utils$4.toHex32(this.h.slice(0, 7), \"big\");\n  else\n    return utils$4.split32(this.h.slice(0, 7), \"big\");\n};\nvar utils$3 = utils$9;\nvar common$1 = common$5;\nvar assert$1 = minimalisticAssert;\nvar rotr64_hi = utils$3.rotr64_hi;\nvar rotr64_lo = utils$3.rotr64_lo;\nvar shr64_hi = utils$3.shr64_hi;\nvar shr64_lo = utils$3.shr64_lo;\nvar sum64 = utils$3.sum64;\nvar sum64_hi = utils$3.sum64_hi;\nvar sum64_lo = utils$3.sum64_lo;\nvar sum64_4_hi = utils$3.sum64_4_hi;\nvar sum64_4_lo = utils$3.sum64_4_lo;\nvar sum64_5_hi = utils$3.sum64_5_hi;\nvar sum64_5_lo = utils$3.sum64_5_lo;\nvar BlockHash$1 = common$1.BlockHash;\nvar sha512_K = [\n  1116352408,\n  3609767458,\n  1899447441,\n  602891725,\n  3049323471,\n  3964484399,\n  3921009573,\n  2173295548,\n  961987163,\n  4081628472,\n  1508970993,\n  3053834265,\n  2453635748,\n  2937671579,\n  2870763221,\n  3664609560,\n  3624381080,\n  2734883394,\n  310598401,\n  1164996542,\n  607225278,\n  1323610764,\n  1426881987,\n  3590304994,\n  1925078388,\n  4068182383,\n  2162078206,\n  991336113,\n  2614888103,\n  633803317,\n  3248222580,\n  3479774868,\n  3835390401,\n  2666613458,\n  4022224774,\n  944711139,\n  264347078,\n  2341262773,\n  604807628,\n  2007800933,\n  770255983,\n  1495990901,\n  1249150122,\n  1856431235,\n  1555081692,\n  3175218132,\n  1996064986,\n  2198950837,\n  2554220882,\n  3999719339,\n  2821834349,\n  766784016,\n  2952996808,\n  2566594879,\n  3210313671,\n  3203337956,\n  3336571891,\n  1034457026,\n  3584528711,\n  2466948901,\n  113926993,\n  3758326383,\n  338241895,\n  168717936,\n  666307205,\n  1188179964,\n  773529912,\n  1546045734,\n  1294757372,\n  1522805485,\n  1396182291,\n  2643833823,\n  1695183700,\n  2343527390,\n  1986661051,\n  1014477480,\n  2177026350,\n  1206759142,\n  2456956037,\n  344077627,\n  2730485921,\n  1290863460,\n  2820302411,\n  3158454273,\n  3259730800,\n  3505952657,\n  3345764771,\n  106217008,\n  3516065817,\n  3606008344,\n  3600352804,\n  1432725776,\n  4094571909,\n  1467031594,\n  275423344,\n  851169720,\n  430227734,\n  3100823752,\n  506948616,\n  1363258195,\n  659060556,\n  3750685593,\n  883997877,\n  3785050280,\n  958139571,\n  3318307427,\n  1322822218,\n  3812723403,\n  1537002063,\n  2003034995,\n  1747873779,\n  3602036899,\n  1955562222,\n  1575990012,\n  2024104815,\n  1125592928,\n  2227730452,\n  2716904306,\n  2361852424,\n  442776044,\n  2428436474,\n  593698344,\n  2756734187,\n  3733110249,\n  3204031479,\n  2999351573,\n  3329325298,\n  3815920427,\n  3391569614,\n  3928383900,\n  3515267271,\n  566280711,\n  3940187606,\n  3454069534,\n  4118630271,\n  4000239992,\n  116418474,\n  1914138554,\n  174292421,\n  2731055270,\n  289380356,\n  3203993006,\n  460393269,\n  320620315,\n  685471733,\n  587496836,\n  852142971,\n  1086792851,\n  1017036298,\n  365543100,\n  1126000580,\n  2618297676,\n  1288033470,\n  3409855158,\n  1501505948,\n  4234509866,\n  1607167915,\n  987167468,\n  1816402316,\n  1246189591\n];\nfunction SHA512$1() {\n  if (!(this instanceof SHA512$1))\n    return new SHA512$1();\n  BlockHash$1.call(this);\n  this.h = [\n    1779033703,\n    4089235720,\n    3144134277,\n    2227873595,\n    1013904242,\n    4271175723,\n    2773480762,\n    1595750129,\n    1359893119,\n    2917565137,\n    2600822924,\n    725511199,\n    528734635,\n    4215389547,\n    1541459225,\n    327033209\n  ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils$3.inherits(SHA512$1, BlockHash$1);\nvar _512 = SHA512$1;\nSHA512$1.blockSize = 1024;\nSHA512$1.outSize = 512;\nSHA512$1.hmacStrength = 192;\nSHA512$1.padLength = 128;\nSHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];\n    var c3_lo = W[i - 31];\n    W[i] = sum64_4_hi(\n      c0_hi,\n      c0_lo,\n      c1_hi,\n      c1_lo,\n      c2_hi,\n      c2_lo,\n      c3_hi,\n      c3_lo\n    );\n    W[i + 1] = sum64_4_lo(\n      c0_hi,\n      c0_lo,\n      c1_hi,\n      c1_lo,\n      c2_hi,\n      c2_lo,\n      c3_hi,\n      c3_lo\n    );\n  }\n};\nSHA512$1.prototype._update = function _update3(msg, start) {\n  this._prepareBlock(msg, start);\n  var W = this.W;\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n  assert$1(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n    var T1_hi = sum64_5_hi(\n      c0_hi,\n      c0_lo,\n      c1_hi,\n      c1_lo,\n      c2_hi,\n      c2_lo,\n      c3_hi,\n      c3_lo,\n      c4_hi,\n      c4_lo\n    );\n    var T1_lo = sum64_5_lo(\n      c0_hi,\n      c0_lo,\n      c1_hi,\n      c1_lo,\n      c2_hi,\n      c2_lo,\n      c3_hi,\n      c3_lo,\n      c4_hi,\n      c4_lo\n    );\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n    hh = gh;\n    hl = gl;\n    gh = fh;\n    gl = fl;\n    fh = eh;\n    fl = el;\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n    dh = ch;\n    dl = cl;\n    ch = bh;\n    cl = bl;\n    bh = ah;\n    bl = al;\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\nSHA512$1.prototype._digest = function digest5(enc) {\n  if (enc === \"hex\")\n    return utils$3.toHex32(this.h, \"big\");\n  else\n    return utils$3.split32(this.h, \"big\");\n};\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r2 = xh & yh ^ ~xh & zh;\n  if (r2 < 0)\n    r2 += 4294967296;\n  return r2;\n}\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r2 = xl & yl ^ ~xl & zl;\n  if (r2 < 0)\n    r2 += 4294967296;\n  return r2;\n}\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r2 = xh & yh ^ xh & zh ^ yh & zh;\n  if (r2 < 0)\n    r2 += 4294967296;\n  return r2;\n}\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r2 = xl & yl ^ xl & zl ^ yl & zl;\n  if (r2 < 0)\n    r2 += 4294967296;\n  return r2;\n}\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);\n  var c2_hi = rotr64_hi(xl, xh, 7);\n  var r2 = c0_hi ^ c1_hi ^ c2_hi;\n  if (r2 < 0)\n    r2 += 4294967296;\n  return r2;\n}\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);\n  var c2_lo = rotr64_lo(xl, xh, 7);\n  var r2 = c0_lo ^ c1_lo ^ c2_lo;\n  if (r2 < 0)\n    r2 += 4294967296;\n  return r2;\n}\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);\n  var r2 = c0_hi ^ c1_hi ^ c2_hi;\n  if (r2 < 0)\n    r2 += 4294967296;\n  return r2;\n}\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);\n  var r2 = c0_lo ^ c1_lo ^ c2_lo;\n  if (r2 < 0)\n    r2 += 4294967296;\n  return r2;\n}\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n  var r2 = c0_hi ^ c1_hi ^ c2_hi;\n  if (r2 < 0)\n    r2 += 4294967296;\n  return r2;\n}\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n  var r2 = c0_lo ^ c1_lo ^ c2_lo;\n  if (r2 < 0)\n    r2 += 4294967296;\n  return r2;\n}\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);\n  var c2_hi = shr64_hi(xh, xl, 6);\n  var r2 = c0_hi ^ c1_hi ^ c2_hi;\n  if (r2 < 0)\n    r2 += 4294967296;\n  return r2;\n}\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);\n  var c2_lo = shr64_lo(xh, xl, 6);\n  var r2 = c0_lo ^ c1_lo ^ c2_lo;\n  if (r2 < 0)\n    r2 += 4294967296;\n  return r2;\n}\nvar utils$2 = utils$9;\nvar SHA512 = _512;\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n  SHA512.call(this);\n  this.h = [\n    3418070365,\n    3238371032,\n    1654270250,\n    914150663,\n    2438529370,\n    812702999,\n    355462360,\n    4144912697,\n    1731405415,\n    4290775857,\n    2394180231,\n    1750603025,\n    3675008525,\n    1694076839,\n    1203062813,\n    3204075428\n  ];\n}\nutils$2.inherits(SHA384, SHA512);\nvar _384 = SHA384;\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\nSHA384.prototype._digest = function digest6(enc) {\n  if (enc === \"hex\")\n    return utils$2.toHex32(this.h.slice(0, 12), \"big\");\n  else\n    return utils$2.split32(this.h.slice(0, 12), \"big\");\n};\nsha.sha1 = _1;\nsha.sha224 = _224;\nsha.sha256 = _256;\nsha.sha384 = _384;\nsha.sha512 = _512;\nvar ripemd = {};\nvar utils$1 = utils$9;\nvar common = common$5;\nvar rotl32 = utils$1.rotl32;\nvar sum32 = utils$1.sum32;\nvar sum32_3 = utils$1.sum32_3;\nvar sum32_4 = utils$1.sum32_4;\nvar BlockHash = common.BlockHash;\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n  BlockHash.call(this);\n  this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];\n  this.endian = \"little\";\n}\nutils$1.inherits(RIPEMD160, BlockHash);\nripemd.ripemd160 = RIPEMD160;\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\nRIPEMD160.prototype._update = function update2(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]\n      ),\n      E\n    );\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]\n      ),\n      Eh\n    );\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\nRIPEMD160.prototype._digest = function digest7(enc) {\n  if (enc === \"hex\")\n    return utils$1.toHex32(this.h, \"little\");\n  else\n    return utils$1.split32(this.h, \"little\");\n};\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return x & y | ~x & z;\n  else if (j <= 47)\n    return (x | ~y) ^ z;\n  else if (j <= 63)\n    return x & z | y & ~z;\n  else\n    return x ^ (y | ~z);\n}\nfunction K(j) {\n  if (j <= 15)\n    return 0;\n  else if (j <= 31)\n    return 1518500249;\n  else if (j <= 47)\n    return 1859775393;\n  else if (j <= 63)\n    return 2400959708;\n  else\n    return 2840853838;\n}\nfunction Kh(j) {\n  if (j <= 15)\n    return 1352829926;\n  else if (j <= 31)\n    return 1548603684;\n  else if (j <= 47)\n    return 1836072691;\n  else if (j <= 63)\n    return 2053994217;\n  else\n    return 0;\n}\nvar r = [\n  0,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  13,\n  14,\n  15,\n  7,\n  4,\n  13,\n  1,\n  10,\n  6,\n  15,\n  3,\n  12,\n  0,\n  9,\n  5,\n  2,\n  14,\n  11,\n  8,\n  3,\n  10,\n  14,\n  4,\n  9,\n  15,\n  8,\n  1,\n  2,\n  7,\n  0,\n  6,\n  13,\n  11,\n  5,\n  12,\n  1,\n  9,\n  11,\n  10,\n  0,\n  8,\n  12,\n  4,\n  13,\n  3,\n  7,\n  15,\n  14,\n  5,\n  6,\n  2,\n  4,\n  0,\n  5,\n  9,\n  7,\n  12,\n  2,\n  10,\n  14,\n  1,\n  3,\n  8,\n  11,\n  6,\n  15,\n  13\n];\nvar rh = [\n  5,\n  14,\n  7,\n  0,\n  9,\n  2,\n  11,\n  4,\n  13,\n  6,\n  15,\n  8,\n  1,\n  10,\n  3,\n  12,\n  6,\n  11,\n  3,\n  7,\n  0,\n  13,\n  5,\n  10,\n  14,\n  15,\n  8,\n  12,\n  4,\n  9,\n  1,\n  2,\n  15,\n  5,\n  1,\n  3,\n  7,\n  14,\n  6,\n  9,\n  11,\n  8,\n  12,\n  2,\n  10,\n  0,\n  4,\n  13,\n  8,\n  6,\n  4,\n  1,\n  3,\n  11,\n  15,\n  0,\n  5,\n  12,\n  2,\n  13,\n  9,\n  7,\n  10,\n  14,\n  12,\n  15,\n  10,\n  4,\n  1,\n  5,\n  8,\n  7,\n  6,\n  2,\n  13,\n  14,\n  0,\n  3,\n  9,\n  11\n];\nvar s = [\n  11,\n  14,\n  15,\n  12,\n  5,\n  8,\n  7,\n  9,\n  11,\n  13,\n  14,\n  15,\n  6,\n  7,\n  9,\n  8,\n  7,\n  6,\n  8,\n  13,\n  11,\n  9,\n  7,\n  15,\n  7,\n  12,\n  15,\n  9,\n  11,\n  7,\n  13,\n  12,\n  11,\n  13,\n  6,\n  7,\n  14,\n  9,\n  13,\n  15,\n  14,\n  8,\n  13,\n  6,\n  5,\n  12,\n  7,\n  5,\n  11,\n  12,\n  14,\n  15,\n  14,\n  15,\n  9,\n  8,\n  9,\n  14,\n  5,\n  6,\n  8,\n  6,\n  5,\n  12,\n  9,\n  15,\n  5,\n  11,\n  6,\n  8,\n  13,\n  12,\n  5,\n  12,\n  13,\n  14,\n  11,\n  8,\n  5,\n  6\n];\nvar sh = [\n  8,\n  9,\n  9,\n  11,\n  13,\n  15,\n  15,\n  5,\n  7,\n  7,\n  8,\n  11,\n  14,\n  14,\n  12,\n  6,\n  9,\n  13,\n  15,\n  7,\n  12,\n  8,\n  9,\n  11,\n  7,\n  7,\n  12,\n  7,\n  6,\n  15,\n  13,\n  11,\n  9,\n  7,\n  15,\n  11,\n  8,\n  6,\n  6,\n  14,\n  12,\n  13,\n  5,\n  14,\n  13,\n  13,\n  7,\n  5,\n  15,\n  5,\n  8,\n  11,\n  14,\n  14,\n  6,\n  14,\n  6,\n  9,\n  12,\n  9,\n  12,\n  5,\n  15,\n  8,\n  8,\n  5,\n  12,\n  9,\n  12,\n  5,\n  14,\n  6,\n  8,\n  13,\n  6,\n  5,\n  15,\n  13,\n  11,\n  11\n];\nvar utils = utils$9;\nvar assert = minimalisticAssert;\nfunction Hmac(hash2, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash2, key, enc);\n  this.Hash = hash2;\n  this.blockSize = hash2.blockSize / 8;\n  this.outSize = hash2.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n  this._init(utils.toArray(key, enc));\n}\nvar hmac = Hmac;\nHmac.prototype._init = function init(key) {\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 54;\n  this.inner = new this.Hash().update(key);\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 106;\n  this.outer = new this.Hash().update(key);\n};\nHmac.prototype.update = function update3(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\nHmac.prototype.digest = function digest8(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n(function(exports) {\n  var hash2 = exports;\n  hash2.utils = utils$9;\n  hash2.common = common$5;\n  hash2.sha = sha;\n  hash2.ripemd = ripemd;\n  hash2.hmac = hmac;\n  hash2.sha1 = hash2.sha.sha1;\n  hash2.sha256 = hash2.sha.sha256;\n  hash2.sha224 = hash2.sha.sha224;\n  hash2.sha384 = hash2.sha.sha384;\n  hash2.sha512 = hash2.sha.sha512;\n  hash2.ripemd160 = hash2.ripemd.ripemd160;\n})(hash$1);\nconst hash = /* @__PURE__ */ getDefaultExportFromCjs$1(hash$1);\nlet urlAlphabet = \"useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict\";\nlet customAlphabet = (alphabet, defaultSize = 21) => {\n  return (size = defaultSize) => {\n    let id = \"\";\n    let i = size;\n    while (i--) {\n      id += alphabet[Math.random() * alphabet.length | 0];\n    }\n    return id;\n  };\n};\nlet nanoid = (size = 21) => {\n  let id = \"\";\n  let i = size;\n  while (i--) {\n    id += urlAlphabet[Math.random() * 64 | 0];\n  }\n  return id;\n};\nconst convertMillimetersToTwip = (millimeters) => Math.floor(millimeters / 25.4 * 72 * 20);\nconst convertInchesToTwip = (inches) => Math.floor(inches * 72 * 20);\nconst uniqueNumericIdCreator = (initial = 0) => {\n  let currentCount = initial;\n  return () => ++currentCount;\n};\nconst abstractNumUniqueNumericIdGen = () => uniqueNumericIdCreator();\nconst concreteNumUniqueNumericIdGen = () => uniqueNumericIdCreator(1);\nconst docPropertiesUniqueNumericIdGen = () => uniqueNumericIdCreator();\nconst bookmarkUniqueNumericIdGen = () => uniqueNumericIdCreator();\nconst uniqueId = () => nanoid().toLowerCase();\nconst hashedId = (data) => hash.sha1().update(data instanceof ArrayBuffer ? new Uint8Array(data) : data).digest(\"hex\");\nconst generateUuidPart = (count) => customAlphabet(\"1234567890abcdef\", count)();\nconst uniqueUuid = () => `${generateUuidPart(8)}-${generateUuidPart(4)}-${generateUuidPart(4)}-${generateUuidPart(4)}-${generateUuidPart(12)}`;\nconst HorizontalPositionRelativeFrom = {\n  CHARACTER: \"character\",\n  COLUMN: \"column\",\n  INSIDE_MARGIN: \"insideMargin\",\n  LEFT_MARGIN: \"leftMargin\",\n  MARGIN: \"margin\",\n  OUTSIDE_MARGIN: \"outsideMargin\",\n  PAGE: \"page\",\n  RIGHT_MARGIN: \"rightMargin\"\n};\nconst VerticalPositionRelativeFrom = {\n  BOTTOM_MARGIN: \"bottomMargin\",\n  INSIDE_MARGIN: \"insideMargin\",\n  LINE: \"line\",\n  MARGIN: \"margin\",\n  OUTSIDE_MARGIN: \"outsideMargin\",\n  PAGE: \"page\",\n  PARAGRAPH: \"paragraph\",\n  TOP_MARGIN: \"topMargin\"\n};\nclass SimplePosAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      x: \"x\",\n      y: \"y\"\n    });\n  }\n}\nclass SimplePos extends XmlComponent {\n  constructor() {\n    super(\"wp:simplePos\");\n    this.root.push(\n      new SimplePosAttributes({\n        x: 0,\n        y: 0\n      })\n    );\n  }\n}\nclass Align extends XmlComponent {\n  constructor(value) {\n    super(\"wp:align\");\n    this.root.push(value);\n  }\n}\nclass PositionOffset extends XmlComponent {\n  constructor(offsetValue) {\n    super(\"wp:posOffset\");\n    this.root.push(offsetValue.toString());\n  }\n}\nclass HorizontalPositionAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      relativeFrom: \"relativeFrom\"\n    });\n  }\n}\nclass HorizontalPosition extends XmlComponent {\n  constructor(horizontalPosition) {\n    super(\"wp:positionH\");\n    this.root.push(\n      new HorizontalPositionAttributes({\n        relativeFrom: horizontalPosition.relative || HorizontalPositionRelativeFrom.PAGE\n      })\n    );\n    if (horizontalPosition.align) {\n      this.root.push(new Align(horizontalPosition.align));\n    } else if (horizontalPosition.offset !== void 0) {\n      this.root.push(new PositionOffset(horizontalPosition.offset));\n    } else {\n      throw new Error(\"There is no configuration provided for floating position (Align or offset)\");\n    }\n  }\n}\nclass VerticalPositionAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      relativeFrom: \"relativeFrom\"\n    });\n  }\n}\nclass VerticalPosition extends XmlComponent {\n  constructor(verticalPosition) {\n    super(\"wp:positionV\");\n    this.root.push(\n      new VerticalPositionAttributes({\n        relativeFrom: verticalPosition.relative || VerticalPositionRelativeFrom.PAGE\n      })\n    );\n    if (verticalPosition.align) {\n      this.root.push(new Align(verticalPosition.align));\n    } else if (verticalPosition.offset !== void 0) {\n      this.root.push(new PositionOffset(verticalPosition.offset));\n    } else {\n      throw new Error(\"There is no configuration provided for floating position (Align or offset)\");\n    }\n  }\n}\nclass GraphicDataAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      uri: \"uri\"\n    });\n  }\n}\nconst createSvgBlip = (mediaData) => new BuilderElement({\n  name: \"asvg:svgBlip\",\n  attributes: {\n    asvg: {\n      key: \"xmlns:asvg\",\n      value: \"http://schemas.microsoft.com/office/drawing/2016/SVG/main\"\n    },\n    embed: {\n      key: \"r:embed\",\n      value: `rId{${mediaData.fileName}}`\n    }\n  }\n});\nconst createExtention = (mediaData) => new BuilderElement({\n  name: \"a:ext\",\n  attributes: {\n    uri: {\n      key: \"uri\",\n      value: \"{96DAC541-7B7A-43D3-8B79-37D633B846F1}\"\n    }\n  },\n  children: [createSvgBlip(mediaData)]\n});\nconst createExtentionList = (mediaData) => new BuilderElement({\n  name: \"a:extLst\",\n  children: [createExtention(mediaData)]\n});\nconst createBlip = (mediaData) => new BuilderElement({\n  name: \"a:blip\",\n  attributes: {\n    embed: {\n      key: \"r:embed\",\n      value: `rId{${mediaData.type === \"svg\" ? mediaData.fallback.fileName : mediaData.fileName}}`\n    },\n    cstate: {\n      key: \"cstate\",\n      value: \"none\"\n    }\n  },\n  children: mediaData.type === \"svg\" ? [createExtentionList(mediaData)] : []\n});\nclass SourceRectangle extends XmlComponent {\n  constructor() {\n    super(\"a:srcRect\");\n  }\n}\nclass FillRectangle extends XmlComponent {\n  constructor() {\n    super(\"a:fillRect\");\n  }\n}\nclass Stretch extends XmlComponent {\n  constructor() {\n    super(\"a:stretch\");\n    this.root.push(new FillRectangle());\n  }\n}\nclass BlipFill extends XmlComponent {\n  constructor(mediaData) {\n    super(\"pic:blipFill\");\n    this.root.push(createBlip(mediaData));\n    this.root.push(new SourceRectangle());\n    this.root.push(new Stretch());\n  }\n}\nclass PicLocksAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      noChangeAspect: \"noChangeAspect\",\n      noChangeArrowheads: \"noChangeArrowheads\"\n    });\n  }\n}\nclass PicLocks extends XmlComponent {\n  constructor() {\n    super(\"a:picLocks\");\n    this.root.push(\n      new PicLocksAttributes({\n        noChangeAspect: 1,\n        noChangeArrowheads: 1\n      })\n    );\n  }\n}\nclass ChildNonVisualProperties extends XmlComponent {\n  constructor() {\n    super(\"pic:cNvPicPr\");\n    this.root.push(new PicLocks());\n  }\n}\nconst createHyperlinkClick = (linkId, hasXmlNs) => new BuilderElement({\n  name: \"a:hlinkClick\",\n  attributes: __spreadProps(__spreadValues({}, hasXmlNs ? {\n    xmlns: {\n      key: \"xmlns:a\",\n      value: \"http://schemas.openxmlformats.org/drawingml/2006/main\"\n    }\n  } : {}), {\n    id: {\n      key: \"r:id\",\n      value: `rId${linkId}`\n    }\n  })\n});\nclass NonVisualPropertiesAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      id: \"id\",\n      name: \"name\",\n      descr: \"descr\"\n    });\n  }\n}\nclass NonVisualProperties extends XmlComponent {\n  constructor() {\n    super(\"pic:cNvPr\");\n    this.root.push(\n      new NonVisualPropertiesAttributes({\n        id: 0,\n        name: \"\",\n        descr: \"\"\n      })\n    );\n  }\n  prepForXml(context) {\n    for (let i = context.stack.length - 1; i >= 0; i--) {\n      const element2 = context.stack[i];\n      if (!(element2 instanceof ConcreteHyperlink)) {\n        continue;\n      }\n      this.root.push(createHyperlinkClick(element2.linkId, false));\n      break;\n    }\n    return super.prepForXml(context);\n  }\n}\nclass NonVisualPicProperties extends XmlComponent {\n  constructor() {\n    super(\"pic:nvPicPr\");\n    this.root.push(new NonVisualProperties());\n    this.root.push(new ChildNonVisualProperties());\n  }\n}\nclass PicAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      xmlns: \"xmlns:pic\"\n    });\n  }\n}\nclass ExtentsAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      cx: \"cx\",\n      cy: \"cy\"\n    });\n  }\n}\nclass Extents extends XmlComponent {\n  constructor(x, y) {\n    super(\"a:ext\");\n    __publicField(this, \"attributes\");\n    this.attributes = new ExtentsAttributes({\n      cx: x,\n      cy: y\n    });\n    this.root.push(this.attributes);\n  }\n}\nclass OffsetAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      x: \"x\",\n      y: \"y\"\n    });\n  }\n}\nclass Offset extends XmlComponent {\n  constructor() {\n    super(\"a:off\");\n    this.root.push(\n      new OffsetAttributes({\n        x: 0,\n        y: 0\n      })\n    );\n  }\n}\nclass FormAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      flipVertical: \"flipV\",\n      flipHorizontal: \"flipH\",\n      rotation: \"rot\"\n    });\n  }\n}\nclass Form extends XmlComponent {\n  constructor(options2) {\n    var _a, _b;\n    super(\"a:xfrm\");\n    __publicField(this, \"extents\");\n    this.root.push(\n      new FormAttributes({\n        flipVertical: (_a = options2.flip) == null ? void 0 : _a.vertical,\n        flipHorizontal: (_b = options2.flip) == null ? void 0 : _b.horizontal,\n        rotation: options2.rotation\n      })\n    );\n    this.extents = new Extents(options2.emus.x, options2.emus.y);\n    this.root.push(new Offset());\n    this.root.push(this.extents);\n  }\n}\nconst createNoFill = () => new BuilderElement({ name: \"a:noFill\" });\nconst createSolidRgbColor = (options2) => new BuilderElement({\n  name: \"a:srgbClr\",\n  attributes: {\n    value: {\n      key: \"val\",\n      value: options2.value\n    }\n  }\n});\nconst createSchemeColor = (options2) => new BuilderElement({\n  name: \"a:schemeClr\",\n  attributes: {\n    value: {\n      key: \"val\",\n      value: options2.value\n    }\n  }\n});\nconst createSolidFill = (options2) => new BuilderElement({\n  name: \"a:solidFill\",\n  children: [options2.type === \"rgb\" ? createSolidRgbColor(options2) : createSchemeColor(options2)]\n});\nconst createOutline = (options2) => new BuilderElement({\n  name: \"a:ln\",\n  attributes: {\n    width: {\n      key: \"w\",\n      value: options2.width\n    },\n    cap: {\n      key: \"cap\",\n      value: options2.cap\n    },\n    compoundLine: {\n      key: \"cmpd\",\n      value: options2.compoundLine\n    },\n    align: {\n      key: \"algn\",\n      value: options2.align\n    }\n  },\n  children: [\n    options2.type === \"noFill\" ? createNoFill() : options2.solidFillType === \"rgb\" ? createSolidFill({\n      type: \"rgb\",\n      value: options2.value\n    }) : createSolidFill({\n      type: \"scheme\",\n      value: options2.value\n    })\n  ]\n});\nclass AdjustmentValues extends XmlComponent {\n  constructor() {\n    super(\"a:avLst\");\n  }\n}\nclass PresetGeometryAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      prst: \"prst\"\n    });\n  }\n}\nclass PresetGeometry extends XmlComponent {\n  constructor() {\n    super(\"a:prstGeom\");\n    this.root.push(\n      new PresetGeometryAttributes({\n        prst: \"rect\"\n      })\n    );\n    this.root.push(new AdjustmentValues());\n  }\n}\nclass ShapePropertiesAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      bwMode: \"bwMode\"\n    });\n  }\n}\nclass ShapeProperties extends XmlComponent {\n  constructor({ outline, transform }) {\n    super(\"pic:spPr\");\n    __publicField(this, \"form\");\n    this.root.push(\n      new ShapePropertiesAttributes({\n        bwMode: \"auto\"\n      })\n    );\n    this.form = new Form(transform);\n    this.root.push(this.form);\n    this.root.push(new PresetGeometry());\n    if (outline) {\n      this.root.push(createNoFill());\n      this.root.push(createOutline(outline));\n    }\n  }\n}\nclass Pic extends XmlComponent {\n  constructor({\n    mediaData,\n    transform,\n    outline\n  }) {\n    super(\"pic:pic\");\n    this.root.push(\n      new PicAttributes({\n        xmlns: \"http://schemas.openxmlformats.org/drawingml/2006/picture\"\n      })\n    );\n    this.root.push(new NonVisualPicProperties());\n    this.root.push(new BlipFill(mediaData));\n    this.root.push(new ShapeProperties({ transform, outline }));\n  }\n}\nclass GraphicData extends XmlComponent {\n  constructor({\n    mediaData,\n    transform,\n    outline\n  }) {\n    super(\"a:graphicData\");\n    __publicField(this, \"pic\");\n    this.root.push(\n      new GraphicDataAttributes({\n        uri: \"http://schemas.openxmlformats.org/drawingml/2006/picture\"\n      })\n    );\n    this.pic = new Pic({ mediaData, transform, outline });\n    this.root.push(this.pic);\n  }\n}\nclass GraphicAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      a: \"xmlns:a\"\n    });\n  }\n}\nclass Graphic extends XmlComponent {\n  constructor({\n    mediaData,\n    transform,\n    outline\n  }) {\n    super(\"a:graphic\");\n    __publicField(this, \"data\");\n    this.root.push(\n      new GraphicAttributes({\n        a: \"http://schemas.openxmlformats.org/drawingml/2006/main\"\n      })\n    );\n    this.data = new GraphicData({ mediaData, transform, outline });\n    this.root.push(this.data);\n  }\n}\nconst TextWrappingType = {\n  NONE: 0,\n  SQUARE: 1,\n  TIGHT: 2,\n  TOP_AND_BOTTOM: 3\n};\nconst TextWrappingSide = {\n  BOTH_SIDES: \"bothSides\",\n  LEFT: \"left\",\n  RIGHT: \"right\",\n  LARGEST: \"largest\"\n};\nclass WrapNone extends XmlComponent {\n  constructor() {\n    super(\"wp:wrapNone\");\n  }\n}\nclass WrapSquareAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      distT: \"distT\",\n      distB: \"distB\",\n      distL: \"distL\",\n      distR: \"distR\",\n      wrapText: \"wrapText\"\n    });\n  }\n}\nclass WrapSquare extends XmlComponent {\n  constructor(textWrapping, margins = {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0\n  }) {\n    super(\"wp:wrapSquare\");\n    this.root.push(\n      new WrapSquareAttributes({\n        wrapText: textWrapping.side || TextWrappingSide.BOTH_SIDES,\n        distT: margins.top,\n        distB: margins.bottom,\n        distL: margins.left,\n        distR: margins.right\n      })\n    );\n  }\n}\nclass WrapTightAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      distT: \"distT\",\n      distB: \"distB\"\n    });\n  }\n}\nclass WrapTight extends XmlComponent {\n  constructor(margins = {\n    top: 0,\n    bottom: 0\n  }) {\n    super(\"wp:wrapTight\");\n    this.root.push(\n      new WrapTightAttributes({\n        distT: margins.top,\n        distB: margins.bottom\n      })\n    );\n  }\n}\nclass WrapTopAndBottomAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      distT: \"distT\",\n      distB: \"distB\"\n    });\n  }\n}\nclass WrapTopAndBottom extends XmlComponent {\n  constructor(margins = {\n    top: 0,\n    bottom: 0\n  }) {\n    super(\"wp:wrapTopAndBottom\");\n    this.root.push(\n      new WrapTopAndBottomAttributes({\n        distT: margins.top,\n        distB: margins.bottom\n      })\n    );\n  }\n}\nclass DocProperties extends XmlComponent {\n  constructor({ name, description, title } = { name: \"\", description: \"\", title: \"\" }) {\n    super(\"wp:docPr\");\n    __publicField(this, \"docPropertiesUniqueNumericId\", docPropertiesUniqueNumericIdGen());\n    this.root.push(\n      new NextAttributeComponent({\n        id: {\n          key: \"id\",\n          value: this.docPropertiesUniqueNumericId()\n        },\n        name: {\n          key: \"name\",\n          value: name\n        },\n        description: {\n          key: \"descr\",\n          value: description\n        },\n        title: {\n          key: \"title\",\n          value: title\n        }\n      })\n    );\n  }\n  prepForXml(context) {\n    for (let i = context.stack.length - 1; i >= 0; i--) {\n      const element2 = context.stack[i];\n      if (!(element2 instanceof ConcreteHyperlink)) {\n        continue;\n      }\n      this.root.push(createHyperlinkClick(element2.linkId, true));\n      break;\n    }\n    return super.prepForXml(context);\n  }\n}\nconst createEffectExtent = ({ top, right, bottom, left }) => new BuilderElement({\n  name: \"wp:effectExtent\",\n  attributes: {\n    top: {\n      key: \"t\",\n      value: top\n    },\n    right: {\n      key: \"r\",\n      value: right\n    },\n    bottom: {\n      key: \"b\",\n      value: bottom\n    },\n    left: {\n      key: \"l\",\n      value: left\n    }\n  }\n});\nclass ExtentAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      cx: \"cx\",\n      cy: \"cy\"\n    });\n  }\n}\nclass Extent extends XmlComponent {\n  constructor(x, y) {\n    super(\"wp:extent\");\n    __publicField(this, \"attributes\");\n    this.attributes = new ExtentAttributes({\n      cx: x,\n      cy: y\n    });\n    this.root.push(this.attributes);\n  }\n}\nclass GraphicFrameLockAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      xmlns: \"xmlns:a\",\n      noChangeAspect: \"noChangeAspect\"\n    });\n  }\n}\nclass GraphicFrameLocks extends XmlComponent {\n  constructor() {\n    super(\"a:graphicFrameLocks\");\n    this.root.push(\n      new GraphicFrameLockAttributes({\n        xmlns: \"http://schemas.openxmlformats.org/drawingml/2006/main\",\n        noChangeAspect: 1\n      })\n    );\n  }\n}\nclass GraphicFrameProperties extends XmlComponent {\n  constructor() {\n    super(\"wp:cNvGraphicFramePr\");\n    this.root.push(new GraphicFrameLocks());\n  }\n}\nclass AnchorAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      distT: \"distT\",\n      distB: \"distB\",\n      distL: \"distL\",\n      distR: \"distR\",\n      allowOverlap: \"allowOverlap\",\n      behindDoc: \"behindDoc\",\n      layoutInCell: \"layoutInCell\",\n      locked: \"locked\",\n      relativeHeight: \"relativeHeight\",\n      simplePos: \"simplePos\"\n    });\n  }\n}\nclass Anchor extends XmlComponent {\n  constructor({\n    mediaData,\n    transform,\n    drawingOptions\n  }) {\n    super(\"wp:anchor\");\n    const floating = __spreadValues({\n      allowOverlap: true,\n      behindDocument: false,\n      lockAnchor: false,\n      layoutInCell: true,\n      verticalPosition: {},\n      horizontalPosition: {}\n    }, drawingOptions.floating);\n    this.root.push(\n      new AnchorAttributes({\n        distT: floating.margins ? floating.margins.top || 0 : 0,\n        distB: floating.margins ? floating.margins.bottom || 0 : 0,\n        distL: floating.margins ? floating.margins.left || 0 : 0,\n        distR: floating.margins ? floating.margins.right || 0 : 0,\n        simplePos: \"0\",\n        // note: word doesn't fully support - so we use 0\n        allowOverlap: floating.allowOverlap === true ? \"1\" : \"0\",\n        behindDoc: floating.behindDocument === true ? \"1\" : \"0\",\n        locked: floating.lockAnchor === true ? \"1\" : \"0\",\n        layoutInCell: floating.layoutInCell === true ? \"1\" : \"0\",\n        relativeHeight: floating.zIndex ? floating.zIndex : transform.emus.y\n      })\n    );\n    this.root.push(new SimplePos());\n    this.root.push(new HorizontalPosition(floating.horizontalPosition));\n    this.root.push(new VerticalPosition(floating.verticalPosition));\n    this.root.push(new Extent(transform.emus.x, transform.emus.y));\n    this.root.push(createEffectExtent({ top: 0, right: 0, bottom: 0, left: 0 }));\n    if (drawingOptions.floating !== void 0 && drawingOptions.floating.wrap !== void 0) {\n      switch (drawingOptions.floating.wrap.type) {\n        case TextWrappingType.SQUARE:\n          this.root.push(new WrapSquare(drawingOptions.floating.wrap, drawingOptions.floating.margins));\n          break;\n        case TextWrappingType.TIGHT:\n          this.root.push(new WrapTight(drawingOptions.floating.margins));\n          break;\n        case TextWrappingType.TOP_AND_BOTTOM:\n          this.root.push(new WrapTopAndBottom(drawingOptions.floating.margins));\n          break;\n        case TextWrappingType.NONE:\n        default:\n          this.root.push(new WrapNone());\n      }\n    } else {\n      this.root.push(new WrapNone());\n    }\n    this.root.push(new DocProperties(drawingOptions.docProperties));\n    this.root.push(new GraphicFrameProperties());\n    this.root.push(new Graphic({ mediaData, transform, outline: drawingOptions.outline }));\n  }\n}\nconst createInline = ({ mediaData, transform, docProperties, outline }) => {\n  var _a, _b, _c, _d;\n  return new BuilderElement({\n    name: \"wp:inline\",\n    attributes: {\n      distanceTop: {\n        key: \"distT\",\n        value: 0\n      },\n      distanceBottom: {\n        key: \"distB\",\n        value: 0\n      },\n      distanceLeft: {\n        key: \"distL\",\n        value: 0\n      },\n      distanceRight: {\n        key: \"distR\",\n        value: 0\n      }\n    },\n    children: [\n      new Extent(transform.emus.x, transform.emus.y),\n      createEffectExtent(\n        outline ? {\n          top: ((_a = outline.width) != null ? _a : 9525) * 2,\n          right: ((_b = outline.width) != null ? _b : 9525) * 2,\n          bottom: ((_c = outline.width) != null ? _c : 9525) * 2,\n          left: ((_d = outline.width) != null ? _d : 9525) * 2\n        } : { top: 0, right: 0, bottom: 0, left: 0 }\n      ),\n      new DocProperties(docProperties),\n      new GraphicFrameProperties(),\n      new Graphic({ mediaData, transform, outline })\n    ]\n  });\n};\nclass Drawing extends XmlComponent {\n  constructor(imageData, drawingOptions = {}) {\n    super(\"w:drawing\");\n    if (!drawingOptions.floating) {\n      this.root.push(\n        createInline({\n          mediaData: imageData,\n          transform: imageData.transformation,\n          docProperties: drawingOptions.docProperties,\n          outline: drawingOptions.outline\n        })\n      );\n    } else {\n      this.root.push(new Anchor({ mediaData: imageData, transform: imageData.transformation, drawingOptions }));\n    }\n  }\n}\nconst convertDataURIToBinary = (dataURI) => {\n  if (typeof atob === \"function\") {\n    const BASE64_MARKER = \";base64,\";\n    const base64Index = dataURI.indexOf(BASE64_MARKER);\n    const base64IndexWithOffset = base64Index === -1 ? 0 : base64Index + BASE64_MARKER.length;\n    return new Uint8Array(\n      atob(dataURI.substring(base64IndexWithOffset)).split(\"\").map((c) => c.charCodeAt(0))\n    );\n  } else {\n    const b = require(\"buffer\");\n    return new b.Buffer(dataURI, \"base64\");\n  }\n};\nconst standardizeData = (data) => typeof data === \"string\" ? convertDataURIToBinary(data) : data;\nconst createImageData = (options2, key) => ({\n  data: standardizeData(options2.data),\n  fileName: key,\n  transformation: {\n    pixels: {\n      x: Math.round(options2.transformation.width),\n      y: Math.round(options2.transformation.height)\n    },\n    emus: {\n      x: Math.round(options2.transformation.width * 9525),\n      y: Math.round(options2.transformation.height * 9525)\n    },\n    flip: options2.transformation.flip,\n    rotation: options2.transformation.rotation ? options2.transformation.rotation * 6e4 : void 0\n  }\n});\nclass ImageRun extends Run {\n  constructor(options2) {\n    super({});\n    __publicField(this, \"imageData\");\n    const hash2 = hashedId(options2.data);\n    const key = `${hash2}.${options2.type}`;\n    this.imageData = options2.type === \"svg\" ? __spreadProps(__spreadValues({\n      type: options2.type\n    }, createImageData(options2, key)), {\n      fallback: __spreadValues({\n        type: options2.fallback.type\n      }, createImageData(\n        __spreadProps(__spreadValues({}, options2.fallback), {\n          transformation: options2.transformation\n        }),\n        `${hashedId(options2.fallback.data)}.${options2.fallback.type}`\n      ))\n    }) : __spreadValues({\n      type: options2.type\n    }, createImageData(options2, key));\n    const drawing = new Drawing(this.imageData, {\n      floating: options2.floating,\n      docProperties: options2.altText,\n      outline: options2.outline\n    });\n    this.root.push(drawing);\n  }\n  prepForXml(context) {\n    context.file.Media.addImage(this.imageData.fileName, this.imageData);\n    if (this.imageData.type === \"svg\") {\n      context.file.Media.addImage(this.imageData.fallback.fileName, this.imageData.fallback);\n    }\n    return super.prepForXml(context);\n  }\n}\nclass SequentialIdentifierInstruction extends XmlComponent {\n  constructor(identifier) {\n    super(\"w:instrText\");\n    this.root.push(new TextAttributes({ space: SpaceType.PRESERVE }));\n    this.root.push(`SEQ ${identifier}`);\n  }\n}\nclass SequentialIdentifier extends Run {\n  constructor(identifier) {\n    super({});\n    this.root.push(new Begin(true));\n    this.root.push(new SequentialIdentifierInstruction(identifier));\n    this.root.push(new Separate());\n    this.root.push(new End());\n  }\n}\nclass FldSimpleAttrs extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { instr: \"w:instr\" });\n  }\n}\nclass SimpleField extends XmlComponent {\n  constructor(instruction, cachedValue) {\n    super(\"w:fldSimple\");\n    this.root.push(new FldSimpleAttrs({ instr: instruction }));\n    if (cachedValue !== void 0) {\n      this.root.push(new TextRun(cachedValue));\n    }\n  }\n}\nclass SimpleMailMergeField extends SimpleField {\n  constructor(fieldName) {\n    super(` MERGEFIELD ${fieldName} `, `«${fieldName}»`);\n  }\n}\nclass CommentAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { id: \"w:id\", initials: \"w:initials\", author: \"w:author\", date: \"w:date\" });\n  }\n}\nclass CommentRangeAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { id: \"w:id\" });\n  }\n}\nclass RootCommentsAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      \"xmlns:cx\": \"xmlns:cx\",\n      \"xmlns:cx1\": \"xmlns:cx1\",\n      \"xmlns:cx2\": \"xmlns:cx2\",\n      \"xmlns:cx3\": \"xmlns:cx3\",\n      \"xmlns:cx4\": \"xmlns:cx4\",\n      \"xmlns:cx5\": \"xmlns:cx5\",\n      \"xmlns:cx6\": \"xmlns:cx6\",\n      \"xmlns:cx7\": \"xmlns:cx7\",\n      \"xmlns:cx8\": \"xmlns:cx8\",\n      \"xmlns:mc\": \"xmlns:mc\",\n      \"xmlns:aink\": \"xmlns:aink\",\n      \"xmlns:am3d\": \"xmlns:am3d\",\n      \"xmlns:o\": \"xmlns:o\",\n      \"xmlns:r\": \"xmlns:r\",\n      \"xmlns:m\": \"xmlns:m\",\n      \"xmlns:v\": \"xmlns:v\",\n      \"xmlns:wp14\": \"xmlns:wp14\",\n      \"xmlns:wp\": \"xmlns:wp\",\n      \"xmlns:w10\": \"xmlns:w10\",\n      \"xmlns:w\": \"xmlns:w\",\n      \"xmlns:w14\": \"xmlns:w14\",\n      \"xmlns:w15\": \"xmlns:w15\",\n      \"xmlns:w16cex\": \"xmlns:w16cex\",\n      \"xmlns:w16cid\": \"xmlns:w16cid\",\n      \"xmlns:w16\": \"xmlns:w16\",\n      \"xmlns:w16sdtdh\": \"xmlns:w16sdtdh\",\n      \"xmlns:w16se\": \"xmlns:w16se\",\n      \"xmlns:wpg\": \"xmlns:wpg\",\n      \"xmlns:wpi\": \"xmlns:wpi\",\n      \"xmlns:wne\": \"xmlns:wne\",\n      \"xmlns:wps\": \"xmlns:wps\"\n    });\n  }\n}\nclass CommentRangeStart extends XmlComponent {\n  constructor(id) {\n    super(\"w:commentRangeStart\");\n    this.root.push(new CommentRangeAttributes({ id }));\n  }\n}\nclass CommentRangeEnd extends XmlComponent {\n  constructor(id) {\n    super(\"w:commentRangeEnd\");\n    this.root.push(new CommentRangeAttributes({ id }));\n  }\n}\nclass CommentReference extends XmlComponent {\n  constructor(id) {\n    super(\"w:commentReference\");\n    this.root.push(new CommentRangeAttributes({ id }));\n  }\n}\nclass Comment extends XmlComponent {\n  constructor({ id, initials, author, date = /* @__PURE__ */ new Date(), children }) {\n    super(\"w:comment\");\n    this.root.push(\n      new CommentAttributes({\n        id,\n        initials,\n        author,\n        date: date.toISOString()\n      })\n    );\n    for (const child of children) {\n      this.root.push(child);\n    }\n  }\n}\nclass Comments extends XmlComponent {\n  constructor({ children }) {\n    super(\"w:comments\");\n    this.root.push(\n      new RootCommentsAttributes({\n        \"xmlns:cx\": \"http://schemas.microsoft.com/office/drawing/2014/chartex\",\n        \"xmlns:cx1\": \"http://schemas.microsoft.com/office/drawing/2015/9/8/chartex\",\n        \"xmlns:cx2\": \"http://schemas.microsoft.com/office/drawing/2015/10/21/chartex\",\n        \"xmlns:cx3\": \"http://schemas.microsoft.com/office/drawing/2016/5/9/chartex\",\n        \"xmlns:cx4\": \"http://schemas.microsoft.com/office/drawing/2016/5/10/chartex\",\n        \"xmlns:cx5\": \"http://schemas.microsoft.com/office/drawing/2016/5/11/chartex\",\n        \"xmlns:cx6\": \"http://schemas.microsoft.com/office/drawing/2016/5/12/chartex\",\n        \"xmlns:cx7\": \"http://schemas.microsoft.com/office/drawing/2016/5/13/chartex\",\n        \"xmlns:cx8\": \"http://schemas.microsoft.com/office/drawing/2016/5/14/chartex\",\n        \"xmlns:mc\": \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\n        \"xmlns:aink\": \"http://schemas.microsoft.com/office/drawing/2016/ink\",\n        \"xmlns:am3d\": \"http://schemas.microsoft.com/office/drawing/2017/model3d\",\n        \"xmlns:o\": \"urn:schemas-microsoft-com:office:office\",\n        \"xmlns:r\": \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\",\n        \"xmlns:m\": \"http://schemas.openxmlformats.org/officeDocument/2006/math\",\n        \"xmlns:v\": \"urn:schemas-microsoft-com:vml\",\n        \"xmlns:wp14\": \"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\",\n        \"xmlns:wp\": \"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\",\n        \"xmlns:w10\": \"urn:schemas-microsoft-com:office:word\",\n        \"xmlns:w\": \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\n        \"xmlns:w14\": \"http://schemas.microsoft.com/office/word/2010/wordml\",\n        \"xmlns:w15\": \"http://schemas.microsoft.com/office/word/2012/wordml\",\n        \"xmlns:w16cex\": \"http://schemas.microsoft.com/office/word/2018/wordml/cex\",\n        \"xmlns:w16cid\": \"http://schemas.microsoft.com/office/word/2016/wordml/cid\",\n        \"xmlns:w16\": \"http://schemas.microsoft.com/office/word/2018/wordml\",\n        \"xmlns:w16sdtdh\": \"http://schemas.microsoft.com/office/word/2020/wordml/sdtdatahash\",\n        \"xmlns:w16se\": \"http://schemas.microsoft.com/office/word/2015/wordml/symex\",\n        \"xmlns:wpg\": \"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\",\n        \"xmlns:wpi\": \"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\",\n        \"xmlns:wne\": \"http://schemas.microsoft.com/office/word/2006/wordml\",\n        \"xmlns:wps\": \"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\"\n      })\n    );\n    for (const child of children) {\n      this.root.push(new Comment(child));\n    }\n  }\n}\nclass NoBreakHyphen extends EmptyElement {\n  constructor() {\n    super(\"w:noBreakHyphen\");\n  }\n}\nclass SoftHyphen extends EmptyElement {\n  constructor() {\n    super(\"w:softHyphen\");\n  }\n}\nclass DayShort extends EmptyElement {\n  constructor() {\n    super(\"w:dayShort\");\n  }\n}\nclass MonthShort extends EmptyElement {\n  constructor() {\n    super(\"w:monthShort\");\n  }\n}\nclass YearShort extends EmptyElement {\n  constructor() {\n    super(\"w:yearShort\");\n  }\n}\nclass DayLong extends EmptyElement {\n  constructor() {\n    super(\"w:dayLong\");\n  }\n}\nclass MonthLong extends EmptyElement {\n  constructor() {\n    super(\"w:monthLong\");\n  }\n}\nclass YearLong extends EmptyElement {\n  constructor() {\n    super(\"w:yearLong\");\n  }\n}\nclass AnnotationReference extends EmptyElement {\n  constructor() {\n    super(\"w:annotationRef\");\n  }\n}\nclass FootnoteReferenceElement extends EmptyElement {\n  constructor() {\n    super(\"w:footnoteRef\");\n  }\n}\nclass EndnoteReference extends EmptyElement {\n  constructor() {\n    super(\"w:endnoteRef\");\n  }\n}\nclass Separator extends EmptyElement {\n  constructor() {\n    super(\"w:separator\");\n  }\n}\nclass ContinuationSeparator extends EmptyElement {\n  constructor() {\n    super(\"w:continuationSeparator\");\n  }\n}\nclass PageNumberElement extends EmptyElement {\n  constructor() {\n    super(\"w:pgNum\");\n  }\n}\nclass CarriageReturn extends EmptyElement {\n  constructor() {\n    super(\"w:cr\");\n  }\n}\nclass Tab extends EmptyElement {\n  constructor() {\n    super(\"w:tab\");\n  }\n}\nclass LastRenderedPageBreak extends EmptyElement {\n  constructor() {\n    super(\"w:lastRenderedPageBreak\");\n  }\n}\nconst PositionalTabAlignment = {\n  LEFT: \"left\",\n  CENTER: \"center\",\n  RIGHT: \"right\"\n};\nconst PositionalTabRelativeTo = {\n  MARGIN: \"margin\",\n  INDENT: \"indent\"\n};\nconst PositionalTabLeader = {\n  NONE: \"none\",\n  DOT: \"dot\",\n  HYPHEN: \"hyphen\",\n  UNDERSCORE: \"underscore\",\n  MIDDLE_DOT: \"middleDot\"\n};\nclass PositionalTab extends XmlComponent {\n  constructor(options2) {\n    super(\"w:ptab\");\n    this.root.push(\n      new NextAttributeComponent({\n        alignment: {\n          key: \"w:alignment\",\n          value: options2.alignment\n        },\n        relativeTo: {\n          key: \"w:relativeTo\",\n          value: options2.relativeTo\n        },\n        leader: {\n          key: \"w:leader\",\n          value: options2.leader\n        }\n      })\n    );\n  }\n}\nconst BreakType = {\n  COLUMN: \"column\",\n  PAGE: \"page\"\n  // textWrapping breaks are the default and already exposed via the \"Run\" class\n};\nclass Break2 extends XmlComponent {\n  constructor(type2) {\n    super(\"w:br\");\n    this.root.push(\n      new Attributes({\n        type: type2\n      })\n    );\n  }\n}\nclass PageBreak extends Run {\n  constructor() {\n    super({});\n    this.root.push(new Break2(BreakType.PAGE));\n  }\n}\nclass ColumnBreak extends Run {\n  constructor() {\n    super({});\n    this.root.push(new Break2(BreakType.COLUMN));\n  }\n}\nclass PageBreakBefore extends XmlComponent {\n  constructor() {\n    super(\"w:pageBreakBefore\");\n  }\n}\nconst LineRuleType = {\n  AT_LEAST: \"atLeast\",\n  EXACTLY: \"exactly\",\n  EXACT: \"exact\",\n  AUTO: \"auto\"\n};\nclass SpacingAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      after: \"w:after\",\n      before: \"w:before\",\n      line: \"w:line\",\n      lineRule: \"w:lineRule\",\n      beforeAutoSpacing: \"w:beforeAutospacing\",\n      afterAutoSpacing: \"w:afterAutoSpacing\"\n    });\n  }\n}\nclass Spacing extends XmlComponent {\n  constructor(options2) {\n    super(\"w:spacing\");\n    this.root.push(new SpacingAttributes(options2));\n  }\n}\nconst HeadingLevel = {\n  HEADING_1: \"Heading1\",\n  HEADING_2: \"Heading2\",\n  HEADING_3: \"Heading3\",\n  HEADING_4: \"Heading4\",\n  HEADING_5: \"Heading5\",\n  HEADING_6: \"Heading6\",\n  TITLE: \"Title\"\n};\nlet Style$1 = class Style extends XmlComponent {\n  constructor(styleId) {\n    super(\"w:pStyle\");\n    this.root.push(\n      new Attributes({\n        val: styleId\n      })\n    );\n  }\n};\nclass TabStop extends XmlComponent {\n  constructor(tabDefinitions) {\n    super(\"w:tabs\");\n    for (const tabDefinition of tabDefinitions) {\n      this.root.push(new TabStopItem(tabDefinition));\n    }\n  }\n}\nconst TabStopType = {\n  LEFT: \"left\",\n  RIGHT: \"right\",\n  CENTER: \"center\",\n  BAR: \"bar\",\n  CLEAR: \"clear\",\n  DECIMAL: \"decimal\",\n  END: \"end\",\n  NUM: \"num\",\n  START: \"start\"\n};\nconst LeaderType = {\n  DOT: \"dot\",\n  HYPHEN: \"hyphen\",\n  MIDDLE_DOT: \"middleDot\",\n  NONE: \"none\",\n  UNDERSCORE: \"underscore\"\n};\nconst TabStopPosition = {\n  MAX: 9026\n};\nclass TabAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { val: \"w:val\", pos: \"w:pos\", leader: \"w:leader\" });\n  }\n}\nclass TabStopItem extends XmlComponent {\n  constructor({ type: type2, position, leader }) {\n    super(\"w:tab\");\n    this.root.push(\n      new TabAttributes({\n        val: type2,\n        pos: position,\n        leader\n      })\n    );\n  }\n}\nclass NumberProperties extends XmlComponent {\n  constructor(numberId, indentLevel) {\n    super(\"w:numPr\");\n    this.root.push(new IndentLevel(indentLevel));\n    this.root.push(new NumberId(numberId));\n  }\n}\nclass IndentLevel extends XmlComponent {\n  constructor(level) {\n    super(\"w:ilvl\");\n    if (level > 9) {\n      throw new Error(\n        \"Level cannot be greater than 9. Read more here: https://answers.microsoft.com/en-us/msoffice/forum/all/does-word-support-more-than-9-list-levels/d130fdcd-1781-446d-8c84-c6c79124e4d7\"\n      );\n    }\n    this.root.push(\n      new Attributes({\n        val: level\n      })\n    );\n  }\n}\nclass NumberId extends XmlComponent {\n  constructor(id) {\n    super(\"w:numId\");\n    this.root.push(\n      new Attributes({\n        val: typeof id === \"string\" ? `{${id}}` : id\n      })\n    );\n  }\n}\nclass FileChild extends XmlComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"fileChild\", Symbol());\n  }\n}\nclass RelationshipAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      id: \"Id\",\n      type: \"Type\",\n      target: \"Target\",\n      targetMode: \"TargetMode\"\n    });\n  }\n}\nconst TargetModeType = {\n  EXTERNAL: \"External\"\n};\nclass Relationship extends XmlComponent {\n  constructor(id, type2, target, targetMode) {\n    super(\"Relationship\");\n    this.root.push(\n      new RelationshipAttributes({\n        id,\n        type: type2,\n        target,\n        targetMode\n      })\n    );\n  }\n}\nclass HyperlinkAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      id: \"r:id\",\n      history: \"w:history\",\n      anchor: \"w:anchor\"\n    });\n  }\n}\nconst HyperlinkType = {\n  INTERNAL: \"INTERNAL\",\n  EXTERNAL: \"EXTERNAL\"\n};\nclass ConcreteHyperlink extends XmlComponent {\n  constructor(children, relationshipId, anchor) {\n    super(\"w:hyperlink\");\n    __publicField(this, \"linkId\");\n    this.linkId = relationshipId;\n    const props = {\n      history: 1,\n      anchor: anchor ? anchor : void 0,\n      id: !anchor ? `rId${this.linkId}` : void 0\n    };\n    const attributes = new HyperlinkAttributes(props);\n    this.root.push(attributes);\n    children.forEach((child) => {\n      this.root.push(child);\n    });\n  }\n}\nclass InternalHyperlink extends ConcreteHyperlink {\n  constructor(options2) {\n    super(options2.children, uniqueId(), options2.anchor);\n  }\n}\nclass ExternalHyperlink extends XmlComponent {\n  constructor(options2) {\n    super(\"w:externalHyperlink\");\n    this.options = options2;\n  }\n}\nclass BookmarkStartAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      id: \"w:id\",\n      name: \"w:name\"\n    });\n  }\n}\nclass BookmarkEndAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      id: \"w:id\"\n    });\n  }\n}\nclass Bookmark {\n  constructor(options2) {\n    __publicField(this, \"bookmarkUniqueNumericId\", bookmarkUniqueNumericIdGen());\n    __publicField(this, \"start\");\n    __publicField(this, \"children\");\n    __publicField(this, \"end\");\n    const linkId = this.bookmarkUniqueNumericId();\n    this.start = new BookmarkStart(options2.id, linkId);\n    this.children = options2.children;\n    this.end = new BookmarkEnd(linkId);\n  }\n}\nclass BookmarkStart extends XmlComponent {\n  constructor(id, linkId) {\n    super(\"w:bookmarkStart\");\n    const attributes = new BookmarkStartAttributes({\n      name: id,\n      id: linkId\n    });\n    this.root.push(attributes);\n  }\n}\nclass BookmarkEnd extends XmlComponent {\n  constructor(linkId) {\n    super(\"w:bookmarkEnd\");\n    const attributes = new BookmarkEndAttributes({\n      id: linkId\n    });\n    this.root.push(attributes);\n  }\n}\nclass OutlineLevel extends XmlComponent {\n  constructor(level) {\n    super(\"w:outlineLvl\");\n    this.level = level;\n    this.root.push(\n      new Attributes({\n        val: level\n      })\n    );\n  }\n}\nclass PageReferenceFieldInstruction extends XmlComponent {\n  constructor(bookmarkId, options2 = {}) {\n    super(\"w:instrText\");\n    this.root.push(new TextAttributes({ space: SpaceType.PRESERVE }));\n    let instruction = `PAGEREF ${bookmarkId}`;\n    if (options2.hyperlink) {\n      instruction = `${instruction} \\\\h`;\n    }\n    if (options2.useRelativePosition) {\n      instruction = `${instruction} \\\\p`;\n    }\n    this.root.push(instruction);\n  }\n}\nclass PageReference extends Run {\n  constructor(bookmarkId, options2 = {}) {\n    super({\n      children: [new Begin(true), new PageReferenceFieldInstruction(bookmarkId, options2), new End()]\n    });\n  }\n}\nconst VerticalAlign2 = {\n  BOTTOM: \"bottom\",\n  CENTER: \"center\",\n  TOP: \"top\"\n};\nclass VerticalAlignAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      verticalAlign: \"w:val\"\n    });\n  }\n}\nclass VerticalAlignElement extends XmlComponent {\n  constructor(value) {\n    super(\"w:vAlign\");\n    this.root.push(new VerticalAlignAttributes({ verticalAlign: value }));\n  }\n}\nclass Columns extends XmlComponent {\n  constructor({ space, count, separate, equalWidth, children }) {\n    super(\"w:cols\");\n    this.root.push(\n      new NextAttributeComponent({\n        space: { key: \"w:space\", value: space === void 0 ? void 0 : twipsMeasureValue(space) },\n        count: { key: \"w:num\", value: count === void 0 ? void 0 : decimalNumber(count) },\n        separate: { key: \"w:sep\", value: separate },\n        equalWidth: { key: \"w:equalWidth\", value: equalWidth }\n      })\n    );\n    if (!equalWidth && children) {\n      children.forEach((column) => this.addChildElement(column));\n    }\n  }\n}\nconst DocumentGridType = {\n  DEFAULT: \"default\",\n  LINES: \"lines\",\n  LINES_AND_CHARS: \"linesAndChars\",\n  SNAP_TO_CHARS: \"snapToChars\"\n};\nclass DocGridAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      type: \"w:type\",\n      linePitch: \"w:linePitch\",\n      charSpace: \"w:charSpace\"\n    });\n  }\n}\nclass DocumentGrid extends XmlComponent {\n  constructor(linePitch, charSpace, type2) {\n    super(\"w:docGrid\");\n    this.root.push(\n      new DocGridAttributes({\n        type: type2,\n        linePitch: decimalNumber(linePitch),\n        charSpace: charSpace ? decimalNumber(charSpace) : void 0\n      })\n    );\n  }\n}\nconst HeaderFooterReferenceType = {\n  DEFAULT: \"default\",\n  FIRST: \"first\",\n  EVEN: \"even\"\n};\nclass FooterReferenceAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      type: \"w:type\",\n      id: \"r:id\"\n    });\n  }\n}\nconst HeaderFooterType = {\n  HEADER: \"w:headerReference\",\n  FOOTER: \"w:footerReference\"\n};\nclass HeaderFooterReference extends XmlComponent {\n  constructor(type2, options2) {\n    super(type2);\n    this.root.push(\n      new FooterReferenceAttributes({\n        type: options2.type || HeaderFooterReferenceType.DEFAULT,\n        id: `rId${options2.id}`\n      })\n    );\n  }\n}\nconst LineNumberRestartFormat = {\n  NEW_PAGE: \"newPage\",\n  NEW_SECTION: \"newSection\",\n  CONTINUOUS: \"continuous\"\n};\nconst createLineNumberType = ({ countBy, start, restart, distance }) => new BuilderElement({\n  name: \"w:lnNumType\",\n  attributes: {\n    countBy: { key: \"w:countBy\", value: countBy === void 0 ? void 0 : decimalNumber(countBy) },\n    start: { key: \"w:start\", value: start === void 0 ? void 0 : decimalNumber(start) },\n    restart: { key: \"w:restart\", value: restart },\n    distance: {\n      key: \"w:distance\",\n      value: distance === void 0 ? void 0 : twipsMeasureValue(distance)\n    }\n  }\n});\nconst PageBorderDisplay = {\n  ALL_PAGES: \"allPages\",\n  FIRST_PAGE: \"firstPage\",\n  NOT_FIRST_PAGE: \"notFirstPage\"\n};\nconst PageBorderOffsetFrom = {\n  PAGE: \"page\",\n  TEXT: \"text\"\n};\nconst PageBorderZOrder = {\n  BACK: \"back\",\n  FRONT: \"front\"\n};\nclass PageBordersAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      display: \"w:display\",\n      offsetFrom: \"w:offsetFrom\",\n      zOrder: \"w:zOrder\"\n    });\n  }\n}\nclass PageBorders extends IgnoreIfEmptyXmlComponent {\n  constructor(options2) {\n    super(\"w:pgBorders\");\n    if (!options2) {\n      return this;\n    }\n    if (options2.pageBorders) {\n      this.root.push(\n        new PageBordersAttributes({\n          display: options2.pageBorders.display,\n          offsetFrom: options2.pageBorders.offsetFrom,\n          zOrder: options2.pageBorders.zOrder\n        })\n      );\n    } else {\n      this.root.push(new PageBordersAttributes({}));\n    }\n    if (options2.pageBorderTop) {\n      this.root.push(new BorderElement(\"w:top\", options2.pageBorderTop));\n    }\n    if (options2.pageBorderLeft) {\n      this.root.push(new BorderElement(\"w:left\", options2.pageBorderLeft));\n    }\n    if (options2.pageBorderBottom) {\n      this.root.push(new BorderElement(\"w:bottom\", options2.pageBorderBottom));\n    }\n    if (options2.pageBorderRight) {\n      this.root.push(new BorderElement(\"w:right\", options2.pageBorderRight));\n    }\n  }\n}\nclass PageMargin extends XmlComponent {\n  constructor(top, right, bottom, left, header, footer, gutter) {\n    super(\"w:pgMar\");\n    this.root.push(\n      new NextAttributeComponent({\n        top: { key: \"w:top\", value: signedTwipsMeasureValue(top) },\n        right: { key: \"w:right\", value: twipsMeasureValue(right) },\n        bottom: { key: \"w:bottom\", value: signedTwipsMeasureValue(bottom) },\n        left: { key: \"w:left\", value: twipsMeasureValue(left) },\n        header: { key: \"w:header\", value: twipsMeasureValue(header) },\n        footer: { key: \"w:footer\", value: twipsMeasureValue(footer) },\n        gutter: { key: \"w:gutter\", value: twipsMeasureValue(gutter) }\n      })\n    );\n  }\n}\nconst PageNumberSeparator = {\n  HYPHEN: \"hyphen\",\n  PERIOD: \"period\",\n  COLON: \"colon\",\n  EM_DASH: \"emDash\",\n  EN_DASH: \"endash\"\n};\nclass PageNumberTypeAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      start: \"w:start\",\n      formatType: \"w:fmt\",\n      separator: \"w:chapSep\"\n    });\n  }\n}\nclass PageNumberType extends XmlComponent {\n  constructor({ start, formatType, separator }) {\n    super(\"w:pgNumType\");\n    this.root.push(\n      new PageNumberTypeAttributes({\n        start: start === void 0 ? void 0 : decimalNumber(start),\n        formatType,\n        separator\n      })\n    );\n  }\n}\nconst PageOrientation = {\n  PORTRAIT: \"portrait\",\n  LANDSCAPE: \"landscape\"\n};\nclass PageSize extends XmlComponent {\n  constructor(width, height, orientation) {\n    super(\"w:pgSz\");\n    const flip = orientation === PageOrientation.LANDSCAPE;\n    const widthTwips = twipsMeasureValue(width);\n    const heightTwips = twipsMeasureValue(height);\n    this.root.push(\n      new NextAttributeComponent({\n        width: { key: \"w:w\", value: flip ? heightTwips : widthTwips },\n        height: { key: \"w:h\", value: flip ? widthTwips : heightTwips },\n        orientation: { key: \"w:orient\", value: orientation }\n      })\n    );\n  }\n}\nconst PageTextDirectionType = {\n  LEFT_TO_RIGHT_TOP_TO_BOTTOM: \"lrTb\",\n  TOP_TO_BOTTOM_RIGHT_TO_LEFT: \"tbRl\"\n};\nclass PageTextDirectionAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { val: \"w:val\" });\n  }\n}\nclass PageTextDirection extends XmlComponent {\n  constructor(value) {\n    super(\"w:textDirection\");\n    this.root.push(\n      new PageTextDirectionAttributes({\n        val: value\n      })\n    );\n  }\n}\nconst SectionType = {\n  NEXT_PAGE: \"nextPage\",\n  NEXT_COLUMN: \"nextColumn\",\n  CONTINUOUS: \"continuous\",\n  EVEN_PAGE: \"evenPage\",\n  ODD_PAGE: \"oddPage\"\n};\nclass SectionTypeAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      val: \"w:val\"\n    });\n  }\n}\nclass Type extends XmlComponent {\n  constructor(value) {\n    super(\"w:type\");\n    this.root.push(new SectionTypeAttributes({ val: value }));\n  }\n}\nconst sectionMarginDefaults = {\n  TOP: 1440,\n  RIGHT: 1440,\n  BOTTOM: 1440,\n  LEFT: 1440,\n  HEADER: 708,\n  FOOTER: 708,\n  GUTTER: 0\n};\nconst sectionPageSizeDefaults = {\n  WIDTH: 11906,\n  HEIGHT: 16838,\n  ORIENTATION: PageOrientation.PORTRAIT\n};\nclass SectionProperties extends XmlComponent {\n  constructor({\n    page: {\n      size: {\n        width = sectionPageSizeDefaults.WIDTH,\n        height = sectionPageSizeDefaults.HEIGHT,\n        orientation = sectionPageSizeDefaults.ORIENTATION\n      } = {},\n      margin: {\n        top = sectionMarginDefaults.TOP,\n        right = sectionMarginDefaults.RIGHT,\n        bottom = sectionMarginDefaults.BOTTOM,\n        left = sectionMarginDefaults.LEFT,\n        header = sectionMarginDefaults.HEADER,\n        footer = sectionMarginDefaults.FOOTER,\n        gutter = sectionMarginDefaults.GUTTER\n      } = {},\n      pageNumbers = {},\n      borders,\n      textDirection\n    } = {},\n    grid: { linePitch = 360, charSpace, type: gridType } = {},\n    headerWrapperGroup = {},\n    footerWrapperGroup = {},\n    lineNumbers,\n    titlePage,\n    verticalAlign,\n    column,\n    type: type2\n  } = {}) {\n    super(\"w:sectPr\");\n    this.addHeaderFooterGroup(HeaderFooterType.HEADER, headerWrapperGroup);\n    this.addHeaderFooterGroup(HeaderFooterType.FOOTER, footerWrapperGroup);\n    if (type2) {\n      this.root.push(new Type(type2));\n    }\n    this.root.push(new PageSize(width, height, orientation));\n    this.root.push(new PageMargin(top, right, bottom, left, header, footer, gutter));\n    if (borders) {\n      this.root.push(new PageBorders(borders));\n    }\n    if (lineNumbers) {\n      this.root.push(createLineNumberType(lineNumbers));\n    }\n    this.root.push(new PageNumberType(pageNumbers));\n    if (column) {\n      this.root.push(new Columns(column));\n    }\n    if (verticalAlign) {\n      this.root.push(new VerticalAlignElement(verticalAlign));\n    }\n    if (titlePage !== void 0) {\n      this.root.push(new OnOffElement(\"w:titlePg\", titlePage));\n    }\n    if (textDirection) {\n      this.root.push(new PageTextDirection(textDirection));\n    }\n    this.root.push(new DocumentGrid(linePitch, charSpace, gridType));\n  }\n  addHeaderFooterGroup(type2, group) {\n    if (group.default) {\n      this.root.push(\n        new HeaderFooterReference(type2, {\n          type: HeaderFooterReferenceType.DEFAULT,\n          id: group.default.View.ReferenceId\n        })\n      );\n    }\n    if (group.first) {\n      this.root.push(\n        new HeaderFooterReference(type2, {\n          type: HeaderFooterReferenceType.FIRST,\n          id: group.first.View.ReferenceId\n        })\n      );\n    }\n    if (group.even) {\n      this.root.push(\n        new HeaderFooterReference(type2, {\n          type: HeaderFooterReferenceType.EVEN,\n          id: group.even.View.ReferenceId\n        })\n      );\n    }\n  }\n}\nclass Body extends XmlComponent {\n  constructor() {\n    super(\"w:body\");\n    // eslint-disable-next-line functional/prefer-readonly-type\n    __publicField(this, \"sections\", []);\n  }\n  /**\n   * Adds new section properties.\n   * Note: Previous section is created in paragraph after the current element, and then new section will be added.\n   * The spec says:\n   *  - section element should be in the last paragraph of the section\n   *  - last section should be direct child of body\n   *\n   * @param options new section options\n   */\n  addSection(options2) {\n    const currentSection = this.sections.pop();\n    this.root.push(this.createSectionParagraph(currentSection));\n    this.sections.push(new SectionProperties(options2));\n  }\n  prepForXml(context) {\n    if (this.sections.length === 1) {\n      this.root.splice(0, 1);\n      this.root.push(this.sections.pop());\n    }\n    return super.prepForXml(context);\n  }\n  push(component) {\n    this.root.push(component);\n  }\n  createSectionParagraph(section) {\n    const paragraph = new Paragraph({});\n    const properties = new ParagraphProperties({});\n    properties.push(section);\n    paragraph.addChildElement(properties);\n    return paragraph;\n  }\n}\nclass Column extends XmlComponent {\n  constructor({ width, space }) {\n    super(\"w:col\");\n    this.root.push(\n      new NextAttributeComponent({\n        width: { key: \"w:w\", value: twipsMeasureValue(width) },\n        space: { key: \"w:space\", value: space === void 0 ? void 0 : twipsMeasureValue(space) }\n      })\n    );\n  }\n}\nclass DocumentAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      wpc: \"xmlns:wpc\",\n      mc: \"xmlns:mc\",\n      o: \"xmlns:o\",\n      r: \"xmlns:r\",\n      m: \"xmlns:m\",\n      v: \"xmlns:v\",\n      wp14: \"xmlns:wp14\",\n      wp: \"xmlns:wp\",\n      w10: \"xmlns:w10\",\n      w: \"xmlns:w\",\n      w14: \"xmlns:w14\",\n      w15: \"xmlns:w15\",\n      wpg: \"xmlns:wpg\",\n      wpi: \"xmlns:wpi\",\n      wne: \"xmlns:wne\",\n      wps: \"xmlns:wps\",\n      Ignorable: \"mc:Ignorable\",\n      cp: \"xmlns:cp\",\n      dc: \"xmlns:dc\",\n      dcterms: \"xmlns:dcterms\",\n      dcmitype: \"xmlns:dcmitype\",\n      xsi: \"xmlns:xsi\",\n      type: \"xsi:type\",\n      cx: \"xmlns:cx\",\n      cx1: \"xmlns:cx1\",\n      cx2: \"xmlns:cx2\",\n      cx3: \"xmlns:cx3\",\n      cx4: \"xmlns:cx4\",\n      cx5: \"xmlns:cx5\",\n      cx6: \"xmlns:cx6\",\n      cx7: \"xmlns:cx7\",\n      cx8: \"xmlns:cx8\",\n      aink: \"xmlns:aink\",\n      am3d: \"xmlns:am3d\",\n      w16cex: \"xmlns:w16cex\",\n      w16cid: \"xmlns:w16cid\",\n      w16: \"xmlns:w16\",\n      w16sdtdh: \"xmlns:w16sdtdh\",\n      w16se: \"xmlns:w16se\"\n    });\n  }\n}\nclass DocumentBackgroundAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      color: \"w:color\",\n      themeColor: \"w:themeColor\",\n      themeShade: \"w:themeShade\",\n      themeTint: \"w:themeTint\"\n    });\n  }\n}\nclass DocumentBackground extends XmlComponent {\n  constructor(options2) {\n    super(\"w:background\");\n    this.root.push(\n      new DocumentBackgroundAttributes({\n        color: options2.color === void 0 ? void 0 : hexColorValue(options2.color),\n        themeColor: options2.themeColor,\n        themeShade: options2.themeShade === void 0 ? void 0 : uCharHexNumber(options2.themeShade),\n        themeTint: options2.themeTint === void 0 ? void 0 : uCharHexNumber(options2.themeTint)\n      })\n    );\n  }\n}\nclass Document extends XmlComponent {\n  constructor(options2) {\n    super(\"w:document\");\n    __publicField(this, \"body\");\n    this.root.push(\n      new DocumentAttributes({\n        wpc: \"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\",\n        mc: \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\n        o: \"urn:schemas-microsoft-com:office:office\",\n        r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\",\n        m: \"http://schemas.openxmlformats.org/officeDocument/2006/math\",\n        v: \"urn:schemas-microsoft-com:vml\",\n        wp14: \"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\",\n        wp: \"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\",\n        w10: \"urn:schemas-microsoft-com:office:word\",\n        w: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\n        w14: \"http://schemas.microsoft.com/office/word/2010/wordml\",\n        w15: \"http://schemas.microsoft.com/office/word/2012/wordml\",\n        wpg: \"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\",\n        wpi: \"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\",\n        wne: \"http://schemas.microsoft.com/office/word/2006/wordml\",\n        wps: \"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\",\n        cx: \"http://schemas.microsoft.com/office/drawing/2014/chartex\",\n        cx1: \"http://schemas.microsoft.com/office/drawing/2015/9/8/chartex\",\n        cx2: \"http://schemas.microsoft.com/office/drawing/2015/10/21/chartex\",\n        cx3: \"http://schemas.microsoft.com/office/drawing/2016/5/9/chartex\",\n        cx4: \"http://schemas.microsoft.com/office/drawing/2016/5/10/chartex\",\n        cx5: \"http://schemas.microsoft.com/office/drawing/2016/5/11/chartex\",\n        cx6: \"http://schemas.microsoft.com/office/drawing/2016/5/12/chartex\",\n        cx7: \"http://schemas.microsoft.com/office/drawing/2016/5/13/chartex\",\n        cx8: \"http://schemas.microsoft.com/office/drawing/2016/5/14/chartex\",\n        aink: \"http://schemas.microsoft.com/office/drawing/2016/ink\",\n        am3d: \"http://schemas.microsoft.com/office/drawing/2017/model3d\",\n        w16cex: \"http://schemas.microsoft.com/office/word/2018/wordml/cex\",\n        w16cid: \"http://schemas.microsoft.com/office/word/2016/wordml/cid\",\n        w16: \"http://schemas.microsoft.com/office/word/2018/wordml\",\n        w16sdtdh: \"http://schemas.microsoft.com/office/word/2020/wordml/sdtdatahash\",\n        w16se: \"http://schemas.microsoft.com/office/word/2015/wordml/symex\",\n        Ignorable: \"w14 w15 wp14\"\n      })\n    );\n    this.body = new Body();\n    if (options2.background) {\n      this.root.push(new DocumentBackground(options2.background));\n    }\n    this.root.push(this.body);\n  }\n  add(item) {\n    this.body.push(item);\n    return this;\n  }\n  get Body() {\n    return this.body;\n  }\n}\nclass RelationshipsAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      xmlns: \"xmlns\"\n    });\n  }\n}\nclass Relationships extends XmlComponent {\n  constructor() {\n    super(\"Relationships\");\n    this.root.push(\n      new RelationshipsAttributes({\n        xmlns: \"http://schemas.openxmlformats.org/package/2006/relationships\"\n      })\n    );\n  }\n  createRelationship(id, type2, target, targetMode) {\n    const relationship = new Relationship(`rId${id}`, type2, target, targetMode);\n    this.root.push(relationship);\n    return relationship;\n  }\n  get RelationshipCount() {\n    return this.root.length - 1;\n  }\n}\nclass DocumentWrapper {\n  constructor(options2) {\n    __publicField(this, \"document\");\n    __publicField(this, \"relationships\");\n    this.document = new Document(options2);\n    this.relationships = new Relationships();\n  }\n  get View() {\n    return this.document;\n  }\n  get Relationships() {\n    return this.relationships;\n  }\n}\nclass WordWrapAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { val: \"w:val\" });\n  }\n}\nclass WordWrap extends XmlComponent {\n  constructor() {\n    super(\"w:wordWrap\");\n    this.root.push(new WordWrapAttributes({ val: 0 }));\n  }\n}\nconst DropCapType = {\n  NONE: \"none\",\n  DROP: \"drop\",\n  MARGIN: \"margin\"\n};\nconst FrameAnchorType = {\n  MARGIN: \"margin\",\n  PAGE: \"page\",\n  TEXT: \"text\"\n};\nconst FrameWrap = {\n  AROUND: \"around\",\n  AUTO: \"auto\",\n  NONE: \"none\",\n  NOT_BESIDE: \"notBeside\",\n  THROUGH: \"through\",\n  TIGHT: \"tight\"\n};\nconst createFrameProperties = (options2) => {\n  var _a, _b;\n  return new BuilderElement({\n    name: \"w:framePr\",\n    attributes: {\n      anchorLock: {\n        key: \"w:anchorLock\",\n        value: options2.anchorLock\n      },\n      dropCap: {\n        key: \"w:dropCap\",\n        value: options2.dropCap\n      },\n      width: {\n        key: \"w:w\",\n        value: options2.width\n      },\n      height: {\n        key: \"w:h\",\n        value: options2.height\n      },\n      x: {\n        key: \"w:x\",\n        value: options2.position ? options2.position.x : void 0\n      },\n      y: {\n        key: \"w:y\",\n        value: options2.position ? options2.position.y : void 0\n      },\n      anchorHorizontal: {\n        key: \"w:hAnchor\",\n        value: options2.anchor.horizontal\n      },\n      anchorVertical: {\n        key: \"w:vAnchor\",\n        value: options2.anchor.vertical\n      },\n      spaceHorizontal: {\n        key: \"w:hSpace\",\n        value: (_a = options2.space) == null ? void 0 : _a.horizontal\n      },\n      spaceVertical: {\n        key: \"w:vSpace\",\n        value: (_b = options2.space) == null ? void 0 : _b.vertical\n      },\n      rule: {\n        key: \"w:hRule\",\n        value: options2.rule\n      },\n      alignmentX: {\n        key: \"w:xAlign\",\n        value: options2.alignment ? options2.alignment.x : void 0\n      },\n      alignmentY: {\n        key: \"w:yAlign\",\n        value: options2.alignment ? options2.alignment.y : void 0\n      },\n      lines: {\n        key: \"w:lines\",\n        value: options2.lines\n      },\n      wrap: {\n        key: \"w:wrap\",\n        value: options2.wrap\n      }\n    }\n  });\n};\nclass ParagraphProperties extends IgnoreIfEmptyXmlComponent {\n  constructor(options2) {\n    var _a, _b;\n    super(\"w:pPr\");\n    // eslint-disable-next-line functional/prefer-readonly-type\n    __publicField(this, \"numberingReferences\", []);\n    if (!options2) {\n      return this;\n    }\n    if (options2.heading) {\n      this.push(new Style$1(options2.heading));\n    }\n    if (options2.bullet) {\n      this.push(new Style$1(\"ListParagraph\"));\n    }\n    if (options2.numbering) {\n      if (!options2.style && !options2.heading) {\n        if (!options2.numbering.custom) {\n          this.push(new Style$1(\"ListParagraph\"));\n        }\n      }\n    }\n    if (options2.style) {\n      this.push(new Style$1(options2.style));\n    }\n    if (options2.keepNext !== void 0) {\n      this.push(new OnOffElement(\"w:keepNext\", options2.keepNext));\n    }\n    if (options2.keepLines !== void 0) {\n      this.push(new OnOffElement(\"w:keepLines\", options2.keepLines));\n    }\n    if (options2.pageBreakBefore) {\n      this.push(new PageBreakBefore());\n    }\n    if (options2.frame) {\n      this.push(createFrameProperties(options2.frame));\n    }\n    if (options2.widowControl !== void 0) {\n      this.push(new OnOffElement(\"w:widowControl\", options2.widowControl));\n    }\n    if (options2.bullet) {\n      this.push(new NumberProperties(1, options2.bullet.level));\n    }\n    if (options2.numbering) {\n      this.numberingReferences.push({\n        reference: options2.numbering.reference,\n        instance: (_a = options2.numbering.instance) != null ? _a : 0\n      });\n      this.push(new NumberProperties(`${options2.numbering.reference}-${(_b = options2.numbering.instance) != null ? _b : 0}`, options2.numbering.level));\n    } else if (options2.numbering === false) {\n      this.push(new NumberProperties(0, 0));\n    }\n    if (options2.border) {\n      this.push(new Border(options2.border));\n    }\n    if (options2.thematicBreak) {\n      this.push(new ThematicBreak());\n    }\n    if (options2.shading) {\n      this.push(new Shading(options2.shading));\n    }\n    if (options2.wordWrap) {\n      this.push(new WordWrap());\n    }\n    if (options2.overflowPunctuation) {\n      this.push(new OnOffElement(\"w:overflowPunct\", options2.overflowPunctuation));\n    }\n    const tabDefinitions = [\n      ...options2.rightTabStop !== void 0 ? [{ type: TabStopType.RIGHT, position: options2.rightTabStop }] : [],\n      ...options2.tabStops ? options2.tabStops : [],\n      ...options2.leftTabStop !== void 0 ? [{ type: TabStopType.LEFT, position: options2.leftTabStop }] : []\n    ];\n    if (tabDefinitions.length > 0) {\n      this.push(new TabStop(tabDefinitions));\n    }\n    if (options2.bidirectional !== void 0) {\n      this.push(new OnOffElement(\"w:bidi\", options2.bidirectional));\n    }\n    if (options2.spacing) {\n      this.push(new Spacing(options2.spacing));\n    }\n    if (options2.indent) {\n      this.push(new Indent(options2.indent));\n    }\n    if (options2.contextualSpacing !== void 0) {\n      this.push(new OnOffElement(\"w:contextualSpacing\", options2.contextualSpacing));\n    }\n    if (options2.alignment) {\n      this.push(new Alignment(options2.alignment));\n    }\n    if (options2.outlineLevel !== void 0) {\n      this.push(new OutlineLevel(options2.outlineLevel));\n    }\n    if (options2.suppressLineNumbers !== void 0) {\n      this.push(new OnOffElement(\"w:suppressLineNumbers\", options2.suppressLineNumbers));\n    }\n    if (options2.autoSpaceEastAsianText !== void 0) {\n      this.push(new OnOffElement(\"w:autoSpaceDN\", options2.autoSpaceEastAsianText));\n    }\n    if (options2.run) {\n      this.push(new RunProperties(options2.run));\n    }\n  }\n  push(item) {\n    this.root.push(item);\n  }\n  prepForXml(context) {\n    if (context.viewWrapper instanceof DocumentWrapper) {\n      for (const reference of this.numberingReferences) {\n        context.file.Numbering.createConcreteNumberingInstance(reference.reference, reference.instance);\n      }\n    }\n    return super.prepForXml(context);\n  }\n}\nclass Paragraph extends FileChild {\n  constructor(options2) {\n    super(\"w:p\");\n    __publicField(this, \"properties\");\n    if (typeof options2 === \"string\") {\n      this.properties = new ParagraphProperties({});\n      this.root.push(this.properties);\n      this.root.push(new TextRun(options2));\n      return this;\n    }\n    this.properties = new ParagraphProperties(options2);\n    this.root.push(this.properties);\n    if (options2.text) {\n      this.root.push(new TextRun(options2.text));\n    }\n    if (options2.children) {\n      for (const child of options2.children) {\n        if (child instanceof Bookmark) {\n          this.root.push(child.start);\n          for (const textRun of child.children) {\n            this.root.push(textRun);\n          }\n          this.root.push(child.end);\n          continue;\n        }\n        this.root.push(child);\n      }\n    }\n  }\n  prepForXml(context) {\n    for (const element2 of this.root) {\n      if (element2 instanceof ExternalHyperlink) {\n        const index = this.root.indexOf(element2);\n        const concreteHyperlink = new ConcreteHyperlink(element2.options.children, uniqueId());\n        context.viewWrapper.Relationships.createRelationship(\n          concreteHyperlink.linkId,\n          \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\",\n          element2.options.link,\n          TargetModeType.EXTERNAL\n        );\n        this.root[index] = concreteHyperlink;\n      }\n    }\n    return super.prepForXml(context);\n  }\n  addRunToFront(run) {\n    this.root.splice(1, 0, run);\n    return this;\n  }\n}\nlet Math$1 = class Math2 extends XmlComponent {\n  constructor(options2) {\n    super(\"m:oMath\");\n    for (const child of options2.children) {\n      this.root.push(child);\n    }\n  }\n};\nclass MathText extends XmlComponent {\n  constructor(text) {\n    super(\"m:t\");\n    this.root.push(text);\n  }\n}\nclass MathRun extends XmlComponent {\n  constructor(text) {\n    super(\"m:r\");\n    this.root.push(new MathText(text));\n  }\n}\nclass MathDenominator extends XmlComponent {\n  constructor(children) {\n    super(\"m:den\");\n    for (const child of children) {\n      this.root.push(child);\n    }\n  }\n}\nclass MathNumerator extends XmlComponent {\n  constructor(children) {\n    super(\"m:num\");\n    for (const child of children) {\n      this.root.push(child);\n    }\n  }\n}\nclass MathFraction extends XmlComponent {\n  constructor(options2) {\n    super(\"m:f\");\n    this.root.push(new MathNumerator(options2.numerator));\n    this.root.push(new MathDenominator(options2.denominator));\n  }\n}\nclass MathAccentCharacterAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { accent: \"m:val\" });\n  }\n}\nclass MathAccentCharacter extends XmlComponent {\n  constructor(accent) {\n    super(\"m:chr\");\n    this.root.push(new MathAccentCharacterAttributes({ accent }));\n  }\n}\nclass MathBase extends XmlComponent {\n  constructor(children) {\n    super(\"m:e\");\n    for (const child of children) {\n      this.root.push(child);\n    }\n  }\n}\nclass MathLimitLocationAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { value: \"m:val\" });\n  }\n}\nclass MathLimitLocation extends XmlComponent {\n  constructor(value) {\n    super(\"m:limLoc\");\n    this.root.push(new MathLimitLocationAttributes({ value: value || \"undOvr\" }));\n  }\n}\nclass MathSubScriptHideAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { hide: \"m:val\" });\n  }\n}\nclass MathSubScriptHide extends XmlComponent {\n  constructor() {\n    super(\"m:subHide\");\n    this.root.push(new MathSubScriptHideAttributes({ hide: 1 }));\n  }\n}\nclass MathSuperScriptHideAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { hide: \"m:val\" });\n  }\n}\nclass MathSuperScriptHide extends XmlComponent {\n  constructor() {\n    super(\"m:supHide\");\n    this.root.push(new MathSuperScriptHideAttributes({ hide: 1 }));\n  }\n}\nclass MathNAryProperties extends XmlComponent {\n  constructor(accent, hasSuperScript, hasSubScript, limitLocationVal) {\n    super(\"m:naryPr\");\n    if (!!accent) {\n      this.root.push(new MathAccentCharacter(accent));\n    }\n    this.root.push(new MathLimitLocation(limitLocationVal));\n    if (!hasSuperScript) {\n      this.root.push(new MathSuperScriptHide());\n    }\n    if (!hasSubScript) {\n      this.root.push(new MathSubScriptHide());\n    }\n  }\n}\nclass MathSubScriptElement extends XmlComponent {\n  constructor(children) {\n    super(\"m:sub\");\n    for (const child of children) {\n      this.root.push(child);\n    }\n  }\n}\nclass MathSuperScriptElement extends XmlComponent {\n  constructor(children) {\n    super(\"m:sup\");\n    for (const child of children) {\n      this.root.push(child);\n    }\n  }\n}\nclass MathSum extends XmlComponent {\n  constructor(options2) {\n    super(\"m:nary\");\n    this.root.push(new MathNAryProperties(\"∑\", !!options2.superScript, !!options2.subScript));\n    if (!!options2.subScript) {\n      this.root.push(new MathSubScriptElement(options2.subScript));\n    }\n    if (!!options2.superScript) {\n      this.root.push(new MathSuperScriptElement(options2.superScript));\n    }\n    this.root.push(new MathBase(options2.children));\n  }\n}\nclass MathIntegral extends XmlComponent {\n  constructor(options2) {\n    super(\"m:nary\");\n    this.root.push(new MathNAryProperties(\"\", !!options2.superScript, !!options2.subScript, \"subSup\"));\n    if (!!options2.subScript) {\n      this.root.push(new MathSubScriptElement(options2.subScript));\n    }\n    if (!!options2.superScript) {\n      this.root.push(new MathSuperScriptElement(options2.superScript));\n    }\n    this.root.push(new MathBase(options2.children));\n  }\n}\nclass MathLimit extends XmlComponent {\n  constructor(children) {\n    super(\"m:lim\");\n    for (const child of children) {\n      this.root.push(child);\n    }\n  }\n}\nclass MathLimitUpper extends XmlComponent {\n  constructor(options2) {\n    super(\"m:limUpp\");\n    this.root.push(new MathBase(options2.children));\n    this.root.push(new MathLimit(options2.limit));\n  }\n}\nclass MathLimitLower extends XmlComponent {\n  constructor(options2) {\n    super(\"m:limLow\");\n    this.root.push(new MathBase(options2.children));\n    this.root.push(new MathLimit(options2.limit));\n  }\n}\nclass MathSuperScriptProperties extends XmlComponent {\n  constructor() {\n    super(\"m:sSupPr\");\n  }\n}\nclass MathSuperScript extends XmlComponent {\n  constructor(options2) {\n    super(\"m:sSup\");\n    this.root.push(new MathSuperScriptProperties());\n    this.root.push(new MathBase(options2.children));\n    this.root.push(new MathSuperScriptElement(options2.superScript));\n  }\n}\nclass MathSubScriptProperties extends XmlComponent {\n  constructor() {\n    super(\"m:sSubPr\");\n  }\n}\nclass MathSubScript extends XmlComponent {\n  constructor(options2) {\n    super(\"m:sSub\");\n    this.root.push(new MathSubScriptProperties());\n    this.root.push(new MathBase(options2.children));\n    this.root.push(new MathSubScriptElement(options2.subScript));\n  }\n}\nclass MathSubSuperScriptProperties extends XmlComponent {\n  constructor() {\n    super(\"m:sSubSupPr\");\n  }\n}\nclass MathSubSuperScript extends XmlComponent {\n  constructor(options2) {\n    super(\"m:sSubSup\");\n    this.root.push(new MathSubSuperScriptProperties());\n    this.root.push(new MathBase(options2.children));\n    this.root.push(new MathSubScriptElement(options2.subScript));\n    this.root.push(new MathSuperScriptElement(options2.superScript));\n  }\n}\nclass MathPreSubSuperScriptProperties extends XmlComponent {\n  constructor() {\n    super(\"m:sPrePr\");\n  }\n}\nclass MathPreSubSuperScript extends XmlComponent {\n  constructor(options2) {\n    super(\"m:sPre\");\n    this.root.push(new MathPreSubSuperScriptProperties());\n    this.root.push(new MathBase(options2.children));\n    this.root.push(new MathSubScriptElement(options2.subScript));\n    this.root.push(new MathSuperScriptElement(options2.superScript));\n  }\n}\nconst WORKAROUND4 = \"\";\nclass MathDegree extends XmlComponent {\n  constructor(children) {\n    super(\"m:deg\");\n    if (!!children) {\n      for (const child of children) {\n        this.root.push(child);\n      }\n    }\n  }\n}\nclass MathDegreeHideAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { hide: \"m:val\" });\n  }\n}\nclass MathDegreeHide extends XmlComponent {\n  constructor() {\n    super(\"m:degHide\");\n    this.root.push(new MathDegreeHideAttributes({ hide: 1 }));\n  }\n}\nclass MathRadicalProperties extends XmlComponent {\n  constructor(hasDegree) {\n    super(\"m:radPr\");\n    if (!hasDegree) {\n      this.root.push(new MathDegreeHide());\n    }\n  }\n}\nclass MathRadical extends XmlComponent {\n  constructor(options2) {\n    super(\"m:rad\");\n    this.root.push(new MathRadicalProperties(!!options2.degree));\n    this.root.push(new MathDegree(options2.degree));\n    this.root.push(new MathBase(options2.children));\n  }\n}\nclass MathFunctionName extends XmlComponent {\n  constructor(children) {\n    super(\"m:fName\");\n    for (const child of children) {\n      this.root.push(child);\n    }\n  }\n}\nclass MathFunctionProperties extends XmlComponent {\n  constructor() {\n    super(\"m:funcPr\");\n  }\n}\nclass MathFunction extends XmlComponent {\n  constructor(options2) {\n    super(\"m:func\");\n    this.root.push(new MathFunctionProperties());\n    this.root.push(new MathFunctionName(options2.name));\n    this.root.push(new MathBase(options2.children));\n  }\n}\nclass MathBeginningCharacterAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { character: \"m:val\" });\n  }\n}\nclass MathBeginningCharacter extends XmlComponent {\n  constructor(character) {\n    super(\"m:begChr\");\n    this.root.push(new MathBeginningCharacterAttributes({ character }));\n  }\n}\nclass MathEndingCharacterAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { character: \"m:val\" });\n  }\n}\nclass MathEndingCharacter extends XmlComponent {\n  constructor(character) {\n    super(\"m:endChr\");\n    this.root.push(new MathEndingCharacterAttributes({ character }));\n  }\n}\nclass MathBracketProperties extends XmlComponent {\n  constructor(options2) {\n    super(\"m:dPr\");\n    if (!!options2) {\n      this.root.push(new MathBeginningCharacter(options2.beginningCharacter));\n      this.root.push(new MathEndingCharacter(options2.endingCharacter));\n    }\n  }\n}\nclass MathRoundBrackets extends XmlComponent {\n  constructor(options2) {\n    super(\"m:d\");\n    this.root.push(new MathBracketProperties());\n    this.root.push(new MathBase(options2.children));\n  }\n}\nclass MathSquareBrackets extends XmlComponent {\n  constructor(options2) {\n    super(\"m:d\");\n    this.root.push(\n      new MathBracketProperties({\n        beginningCharacter: \"[\",\n        endingCharacter: \"]\"\n      })\n    );\n    this.root.push(new MathBase(options2.children));\n  }\n}\nclass MathCurlyBrackets extends XmlComponent {\n  constructor(options2) {\n    super(\"m:d\");\n    this.root.push(\n      new MathBracketProperties({\n        beginningCharacter: \"{\",\n        endingCharacter: \"}\"\n      })\n    );\n    this.root.push(new MathBase(options2.children));\n  }\n}\nclass MathAngledBrackets extends XmlComponent {\n  constructor(options2) {\n    super(\"m:d\");\n    this.root.push(\n      new MathBracketProperties({\n        beginningCharacter: \"〈\",\n        endingCharacter: \"〉\"\n      })\n    );\n    this.root.push(new MathBase(options2.children));\n  }\n}\nclass TableGrid extends XmlComponent {\n  constructor(widths) {\n    super(\"w:tblGrid\");\n    for (const width of widths) {\n      this.root.push(new GridCol(width));\n    }\n  }\n}\nclass GridCol extends XmlComponent {\n  constructor(width) {\n    super(\"w:gridCol\");\n    if (width !== void 0) {\n      this.root.push(\n        new NextAttributeComponent({\n          width: { key: \"w:w\", value: twipsMeasureValue(width) }\n        })\n      );\n    }\n  }\n}\nconst TableCellMarginElementType = {\n  TABLE: \"w:tblCellMar\",\n  TABLE_CELL: \"w:tcMar\"\n};\nclass TableCellMargin extends IgnoreIfEmptyXmlComponent {\n  constructor(type2, { marginUnitType = WidthType.DXA, top, left, bottom, right }) {\n    super(type2);\n    if (top !== void 0) {\n      this.root.push(new TableWidthElement(\"w:top\", { type: marginUnitType, size: top }));\n    }\n    if (left !== void 0) {\n      this.root.push(new TableWidthElement(\"w:left\", { type: marginUnitType, size: left }));\n    }\n    if (bottom !== void 0) {\n      this.root.push(new TableWidthElement(\"w:bottom\", { type: marginUnitType, size: bottom }));\n    }\n    if (right !== void 0) {\n      this.root.push(new TableWidthElement(\"w:right\", { type: marginUnitType, size: right }));\n    }\n  }\n}\nconst WidthType = {\n  /** Auto. */\n  AUTO: \"auto\",\n  /** Value is in twentieths of a point */\n  DXA: \"dxa\",\n  /** No (empty) value. */\n  NIL: \"nil\",\n  /** Value is in percentage. */\n  PERCENTAGE: \"pct\"\n};\nclass TableWidthElement extends XmlComponent {\n  constructor(name, { type: type2 = WidthType.AUTO, size }) {\n    super(name);\n    let tableWidthValue = size;\n    if (type2 === WidthType.PERCENTAGE && typeof size === \"number\") {\n      tableWidthValue = `${size}%`;\n    }\n    this.root.push(\n      new NextAttributeComponent({\n        type: { key: \"w:type\", value: type2 },\n        size: { key: \"w:w\", value: measurementOrPercentValue(tableWidthValue) }\n      })\n    );\n  }\n}\nclass TableCellBorders extends IgnoreIfEmptyXmlComponent {\n  constructor(options2) {\n    super(\"w:tcBorders\");\n    if (options2.top) {\n      this.root.push(new BorderElement(\"w:top\", options2.top));\n    }\n    if (options2.start) {\n      this.root.push(new BorderElement(\"w:start\", options2.start));\n    }\n    if (options2.left) {\n      this.root.push(new BorderElement(\"w:left\", options2.left));\n    }\n    if (options2.bottom) {\n      this.root.push(new BorderElement(\"w:bottom\", options2.bottom));\n    }\n    if (options2.end) {\n      this.root.push(new BorderElement(\"w:end\", options2.end));\n    }\n    if (options2.right) {\n      this.root.push(new BorderElement(\"w:right\", options2.right));\n    }\n  }\n}\nclass GridSpanAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { val: \"w:val\" });\n  }\n}\nclass GridSpan extends XmlComponent {\n  constructor(value) {\n    super(\"w:gridSpan\");\n    this.root.push(\n      new GridSpanAttributes({\n        val: decimalNumber(value)\n      })\n    );\n  }\n}\nconst VerticalMergeType = {\n  /**\n   * Cell that is merged with upper one.\n   */\n  CONTINUE: \"continue\",\n  /**\n   * Cell that is starting the vertical merge.\n   */\n  RESTART: \"restart\"\n};\nclass VerticalMergeAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { val: \"w:val\" });\n  }\n}\nclass VerticalMerge extends XmlComponent {\n  constructor(value) {\n    super(\"w:vMerge\");\n    this.root.push(\n      new VerticalMergeAttributes({\n        val: value\n      })\n    );\n  }\n}\nconst TextDirection = {\n  BOTTOM_TO_TOP_LEFT_TO_RIGHT: \"btLr\",\n  LEFT_TO_RIGHT_TOP_TO_BOTTOM: \"lrTb\",\n  TOP_TO_BOTTOM_RIGHT_TO_LEFT: \"tbRl\"\n};\nclass TDirectionAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { val: \"w:val\" });\n  }\n}\nclass TDirection extends XmlComponent {\n  constructor(value) {\n    super(\"w:textDirection\");\n    this.root.push(\n      new TDirectionAttributes({\n        val: value\n      })\n    );\n  }\n}\nclass TableCellProperties extends IgnoreIfEmptyXmlComponent {\n  constructor(options2) {\n    super(\"w:tcPr\");\n    if (options2.width) {\n      this.root.push(new TableWidthElement(\"w:tcW\", options2.width));\n    }\n    if (options2.columnSpan) {\n      this.root.push(new GridSpan(options2.columnSpan));\n    }\n    if (options2.verticalMerge) {\n      this.root.push(new VerticalMerge(options2.verticalMerge));\n    } else if (options2.rowSpan && options2.rowSpan > 1) {\n      this.root.push(new VerticalMerge(VerticalMergeType.RESTART));\n    }\n    if (options2.borders) {\n      this.root.push(new TableCellBorders(options2.borders));\n    }\n    if (options2.shading) {\n      this.root.push(new Shading(options2.shading));\n    }\n    if (options2.margins) {\n      this.root.push(new TableCellMargin(TableCellMarginElementType.TABLE_CELL, options2.margins));\n    }\n    if (options2.textDirection) {\n      this.root.push(new TDirection(options2.textDirection));\n    }\n    if (options2.verticalAlign) {\n      this.root.push(new VerticalAlignElement(options2.verticalAlign));\n    }\n  }\n}\nclass TableCell extends XmlComponent {\n  constructor(options2) {\n    super(\"w:tc\");\n    this.options = options2;\n    this.root.push(new TableCellProperties(options2));\n    for (const child of options2.children) {\n      this.root.push(child);\n    }\n  }\n  prepForXml(context) {\n    if (!(this.root[this.root.length - 1] instanceof Paragraph)) {\n      this.root.push(new Paragraph({}));\n    }\n    return super.prepForXml(context);\n  }\n}\nconst NONE_BORDER = {\n  style: BorderStyle.NONE,\n  size: 0,\n  color: \"auto\"\n};\nconst DEFAULT_BORDER = {\n  style: BorderStyle.SINGLE,\n  size: 4,\n  color: \"auto\"\n};\nclass TableBorders extends XmlComponent {\n  constructor(options2) {\n    super(\"w:tblBorders\");\n    if (options2.top) {\n      this.root.push(new BorderElement(\"w:top\", options2.top));\n    } else {\n      this.root.push(new BorderElement(\"w:top\", DEFAULT_BORDER));\n    }\n    if (options2.left) {\n      this.root.push(new BorderElement(\"w:left\", options2.left));\n    } else {\n      this.root.push(new BorderElement(\"w:left\", DEFAULT_BORDER));\n    }\n    if (options2.bottom) {\n      this.root.push(new BorderElement(\"w:bottom\", options2.bottom));\n    } else {\n      this.root.push(new BorderElement(\"w:bottom\", DEFAULT_BORDER));\n    }\n    if (options2.right) {\n      this.root.push(new BorderElement(\"w:right\", options2.right));\n    } else {\n      this.root.push(new BorderElement(\"w:right\", DEFAULT_BORDER));\n    }\n    if (options2.insideHorizontal) {\n      this.root.push(new BorderElement(\"w:insideH\", options2.insideHorizontal));\n    } else {\n      this.root.push(new BorderElement(\"w:insideH\", DEFAULT_BORDER));\n    }\n    if (options2.insideVertical) {\n      this.root.push(new BorderElement(\"w:insideV\", options2.insideVertical));\n    } else {\n      this.root.push(new BorderElement(\"w:insideV\", DEFAULT_BORDER));\n    }\n  }\n}\n__publicField(TableBorders, \"NONE\", {\n  top: NONE_BORDER,\n  bottom: NONE_BORDER,\n  left: NONE_BORDER,\n  right: NONE_BORDER,\n  insideHorizontal: NONE_BORDER,\n  insideVertical: NONE_BORDER\n});\nconst TableAnchorType = {\n  MARGIN: \"margin\",\n  PAGE: \"page\",\n  TEXT: \"text\"\n};\nconst RelativeHorizontalPosition = {\n  CENTER: \"center\",\n  INSIDE: \"inside\",\n  LEFT: \"left\",\n  OUTSIDE: \"outside\",\n  RIGHT: \"right\"\n};\nconst RelativeVerticalPosition = {\n  CENTER: \"center\",\n  INSIDE: \"inside\",\n  BOTTOM: \"bottom\",\n  OUTSIDE: \"outside\",\n  INLINE: \"inline\",\n  TOP: \"top\"\n};\nconst OverlapType = {\n  NEVER: \"never\",\n  OVERLAP: \"overlap\"\n};\nclass TableFloatProperties extends XmlComponent {\n  constructor({\n    horizontalAnchor,\n    verticalAnchor,\n    absoluteHorizontalPosition,\n    relativeHorizontalPosition,\n    absoluteVerticalPosition,\n    relativeVerticalPosition,\n    bottomFromText,\n    topFromText,\n    leftFromText,\n    rightFromText,\n    overlap\n  }) {\n    super(\"w:tblpPr\");\n    this.root.push(\n      new NextAttributeComponent({\n        leftFromText: {\n          key: \"w:leftFromText\",\n          value: leftFromText === void 0 ? void 0 : twipsMeasureValue(leftFromText)\n        },\n        rightFromText: {\n          key: \"w:rightFromText\",\n          value: rightFromText === void 0 ? void 0 : twipsMeasureValue(rightFromText)\n        },\n        topFromText: {\n          key: \"w:topFromText\",\n          value: topFromText === void 0 ? void 0 : twipsMeasureValue(topFromText)\n        },\n        bottomFromText: {\n          key: \"w:bottomFromText\",\n          value: bottomFromText === void 0 ? void 0 : twipsMeasureValue(bottomFromText)\n        },\n        absoluteHorizontalPosition: {\n          key: \"w:tblpX\",\n          value: absoluteHorizontalPosition === void 0 ? void 0 : signedTwipsMeasureValue(absoluteHorizontalPosition)\n        },\n        absoluteVerticalPosition: {\n          key: \"w:tblpY\",\n          value: absoluteVerticalPosition === void 0 ? void 0 : signedTwipsMeasureValue(absoluteVerticalPosition)\n        },\n        horizontalAnchor: {\n          key: \"w:horzAnchor\",\n          value: horizontalAnchor === void 0 ? void 0 : horizontalAnchor\n        },\n        relativeHorizontalPosition: {\n          key: \"w:tblpXSpec\",\n          value: relativeHorizontalPosition\n        },\n        relativeVerticalPosition: {\n          key: \"w:tblpYSpec\",\n          value: relativeVerticalPosition\n        },\n        verticalAnchor: {\n          key: \"w:vertAnchor\",\n          value: verticalAnchor\n        }\n      })\n    );\n    if (overlap) {\n      this.root.push(new StringEnumValueElement(\"w:tblOverlap\", overlap));\n    }\n  }\n}\nconst TableLayoutType = {\n  AUTOFIT: \"autofit\",\n  FIXED: \"fixed\"\n};\nclass TableLayoutAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { type: \"w:type\" });\n  }\n}\nclass TableLayout extends XmlComponent {\n  constructor(type2) {\n    super(\"w:tblLayout\");\n    this.root.push(new TableLayoutAttributes({ type: type2 }));\n  }\n}\nclass TableProperties extends IgnoreIfEmptyXmlComponent {\n  constructor(options2) {\n    super(\"w:tblPr\");\n    if (options2.style) {\n      this.root.push(new StringValueElement(\"w:tblStyle\", options2.style));\n    }\n    if (options2.float) {\n      this.root.push(new TableFloatProperties(options2.float));\n    }\n    if (options2.visuallyRightToLeft !== void 0) {\n      this.root.push(new OnOffElement(\"w:bidiVisual\", options2.visuallyRightToLeft));\n    }\n    if (options2.width) {\n      this.root.push(new TableWidthElement(\"w:tblW\", options2.width));\n    }\n    if (options2.alignment) {\n      this.root.push(new Alignment(options2.alignment));\n    }\n    if (options2.indent) {\n      this.root.push(new TableWidthElement(\"w:tblInd\", options2.indent));\n    }\n    if (options2.borders) {\n      this.root.push(new TableBorders(options2.borders));\n    }\n    if (options2.shading) {\n      this.root.push(new Shading(options2.shading));\n    }\n    if (options2.layout) {\n      this.root.push(new TableLayout(options2.layout));\n    }\n    if (options2.cellMargin) {\n      this.root.push(new TableCellMargin(TableCellMarginElementType.TABLE, options2.cellMargin));\n    }\n  }\n}\nclass Table extends FileChild {\n  constructor({\n    rows,\n    width,\n    // eslint-disable-next-line functional/immutable-data\n    columnWidths = Array(Math.max(...rows.map((row) => row.CellCount))).fill(100),\n    margins,\n    indent,\n    float,\n    layout,\n    style,\n    borders,\n    alignment,\n    visuallyRightToLeft\n  }) {\n    super(\"w:tbl\");\n    this.root.push(\n      new TableProperties({\n        borders: borders != null ? borders : {},\n        width: width != null ? width : { size: 100 },\n        indent,\n        float,\n        layout,\n        style,\n        alignment,\n        cellMargin: margins,\n        visuallyRightToLeft\n      })\n    );\n    this.root.push(new TableGrid(columnWidths));\n    for (const row of rows) {\n      this.root.push(row);\n    }\n    rows.forEach((row, rowIndex) => {\n      if (rowIndex === rows.length - 1) {\n        return;\n      }\n      let columnIndex = 0;\n      row.cells.forEach((cell) => {\n        if (cell.options.rowSpan && cell.options.rowSpan > 1) {\n          const continueCell = new TableCell({\n            // the inserted CONTINUE cell has rowSpan, and will be handled when process the next row\n            rowSpan: cell.options.rowSpan - 1,\n            columnSpan: cell.options.columnSpan,\n            borders: cell.options.borders,\n            children: [],\n            verticalMerge: VerticalMergeType.CONTINUE\n          });\n          rows[rowIndex + 1].addCellToColumnIndex(continueCell, columnIndex);\n        }\n        columnIndex += cell.options.columnSpan || 1;\n      });\n    });\n  }\n}\nconst HeightRule = {\n  /** Height is determined based on the content, so value is ignored. */\n  AUTO: \"auto\",\n  /** At least the value specified */\n  ATLEAST: \"atLeast\",\n  /** Exactly the value specified */\n  EXACT: \"exact\"\n};\nclass TableRowHeightAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { value: \"w:val\", rule: \"w:hRule\" });\n  }\n}\nclass TableRowHeight extends XmlComponent {\n  constructor(value, rule) {\n    super(\"w:trHeight\");\n    this.root.push(\n      new TableRowHeightAttributes({\n        value: twipsMeasureValue(value),\n        rule\n      })\n    );\n  }\n}\nclass TableRowProperties extends IgnoreIfEmptyXmlComponent {\n  constructor(options2) {\n    super(\"w:trPr\");\n    if (options2.cantSplit !== void 0) {\n      this.root.push(new OnOffElement(\"w:cantSplit\", options2.cantSplit));\n    }\n    if (options2.tableHeader !== void 0) {\n      this.root.push(new OnOffElement(\"w:tblHeader\", options2.tableHeader));\n    }\n    if (options2.height) {\n      this.root.push(new TableRowHeight(options2.height.value, options2.height.rule));\n    }\n  }\n}\nclass TableRow extends XmlComponent {\n  constructor(options2) {\n    super(\"w:tr\");\n    this.options = options2;\n    this.root.push(new TableRowProperties(options2));\n    for (const child of options2.children) {\n      this.root.push(child);\n    }\n  }\n  get CellCount() {\n    return this.options.children.length;\n  }\n  get cells() {\n    return this.root.filter((xmlComponent) => xmlComponent instanceof TableCell);\n  }\n  addCellToIndex(cell, index) {\n    this.root.splice(index + 1, 0, cell);\n  }\n  addCellToColumnIndex(cell, columnIndex) {\n    const rootIndex = this.columnIndexToRootIndex(columnIndex, true);\n    this.addCellToIndex(cell, rootIndex - 1);\n  }\n  rootIndexToColumnIndex(rootIndex) {\n    if (rootIndex < 1 || rootIndex >= this.root.length) {\n      throw new Error(`cell 'rootIndex' should between 1 to ${this.root.length - 1}`);\n    }\n    let colIdx = 0;\n    for (let rootIdx = 1; rootIdx < rootIndex; rootIdx++) {\n      const cell = this.root[rootIdx];\n      colIdx += cell.options.columnSpan || 1;\n    }\n    return colIdx;\n  }\n  columnIndexToRootIndex(columnIndex, allowEndNewCell = false) {\n    if (columnIndex < 0) {\n      throw new Error(`cell 'columnIndex' should not less than zero`);\n    }\n    let colIdx = 0;\n    let rootIdx = 1;\n    while (colIdx <= columnIndex) {\n      if (rootIdx >= this.root.length) {\n        if (allowEndNewCell) {\n          return this.root.length;\n        } else {\n          throw new Error(`cell 'columnIndex' should not great than ${colIdx - 1}`);\n        }\n      }\n      const cell = this.root[rootIdx];\n      rootIdx += 1;\n      colIdx += cell && cell.options.columnSpan || 1;\n    }\n    return rootIdx - 1;\n  }\n}\nclass AppPropertiesAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      xmlns: \"xmlns\",\n      vt: \"xmlns:vt\"\n    });\n  }\n}\nclass AppProperties extends XmlComponent {\n  constructor() {\n    super(\"Properties\");\n    this.root.push(\n      new AppPropertiesAttributes({\n        xmlns: \"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\",\n        vt: \"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\"\n      })\n    );\n  }\n}\nclass ContentTypeAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      xmlns: \"xmlns\"\n    });\n  }\n}\nclass DefaultAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      contentType: \"ContentType\",\n      extension: \"Extension\"\n    });\n  }\n}\nclass Default extends XmlComponent {\n  constructor(contentType, extension) {\n    super(\"Default\");\n    this.root.push(\n      new DefaultAttributes({\n        contentType,\n        extension\n      })\n    );\n  }\n}\nclass OverrideAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      contentType: \"ContentType\",\n      partName: \"PartName\"\n    });\n  }\n}\nclass Override extends XmlComponent {\n  constructor(contentType, partName) {\n    super(\"Override\");\n    this.root.push(\n      new OverrideAttributes({\n        contentType,\n        partName\n      })\n    );\n  }\n}\nclass ContentTypes extends XmlComponent {\n  constructor() {\n    super(\"Types\");\n    this.root.push(\n      new ContentTypeAttributes({\n        xmlns: \"http://schemas.openxmlformats.org/package/2006/content-types\"\n      })\n    );\n    this.root.push(new Default(\"image/png\", \"png\"));\n    this.root.push(new Default(\"image/jpeg\", \"jpeg\"));\n    this.root.push(new Default(\"image/jpeg\", \"jpg\"));\n    this.root.push(new Default(\"image/bmp\", \"bmp\"));\n    this.root.push(new Default(\"image/gif\", \"gif\"));\n    this.root.push(new Default(\"image/svg+xml\", \"svg\"));\n    this.root.push(new Default(\"application/vnd.openxmlformats-package.relationships+xml\", \"rels\"));\n    this.root.push(new Default(\"application/xml\", \"xml\"));\n    this.root.push(new Default(\"application/vnd.openxmlformats-officedocument.obfuscatedFont\", \"odttf\"));\n    this.root.push(\n      new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml\", \"/word/document.xml\")\n    );\n    this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml\", \"/word/styles.xml\"));\n    this.root.push(new Override(\"application/vnd.openxmlformats-package.core-properties+xml\", \"/docProps/core.xml\"));\n    this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.custom-properties+xml\", \"/docProps/custom.xml\"));\n    this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.extended-properties+xml\", \"/docProps/app.xml\"));\n    this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml\", \"/word/numbering.xml\"));\n    this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml\", \"/word/footnotes.xml\"));\n    this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml\", \"/word/settings.xml\"));\n    this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml\", \"/word/comments.xml\"));\n    this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.fontTable+xml\", \"/word/fontTable.xml\"));\n  }\n  addFooter(index) {\n    this.root.push(\n      new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml\", `/word/footer${index}.xml`)\n    );\n  }\n  addHeader(index) {\n    this.root.push(\n      new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.header+xml\", `/word/header${index}.xml`)\n    );\n  }\n}\nclass CoreProperties extends XmlComponent {\n  constructor(options2) {\n    super(\"cp:coreProperties\");\n    this.root.push(\n      new DocumentAttributes({\n        cp: \"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\",\n        dc: \"http://purl.org/dc/elements/1.1/\",\n        dcterms: \"http://purl.org/dc/terms/\",\n        dcmitype: \"http://purl.org/dc/dcmitype/\",\n        xsi: \"http://www.w3.org/2001/XMLSchema-instance\"\n      })\n    );\n    if (options2.title) {\n      this.root.push(new StringContainer(\"dc:title\", options2.title));\n    }\n    if (options2.subject) {\n      this.root.push(new StringContainer(\"dc:subject\", options2.subject));\n    }\n    if (options2.creator) {\n      this.root.push(new StringContainer(\"dc:creator\", options2.creator));\n    }\n    if (options2.keywords) {\n      this.root.push(new StringContainer(\"cp:keywords\", options2.keywords));\n    }\n    if (options2.description) {\n      this.root.push(new StringContainer(\"dc:description\", options2.description));\n    }\n    if (options2.lastModifiedBy) {\n      this.root.push(new StringContainer(\"cp:lastModifiedBy\", options2.lastModifiedBy));\n    }\n    if (options2.revision) {\n      this.root.push(new StringContainer(\"cp:revision\", String(options2.revision)));\n    }\n    this.root.push(new TimestampElement(\"dcterms:created\"));\n    this.root.push(new TimestampElement(\"dcterms:modified\"));\n  }\n}\nclass TimestampElement extends XmlComponent {\n  constructor(name) {\n    super(name);\n    this.root.push(\n      new DocumentAttributes({\n        type: \"dcterms:W3CDTF\"\n      })\n    );\n    this.root.push(dateTimeValue(/* @__PURE__ */ new Date()));\n  }\n}\nclass CustomPropertiesAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      xmlns: \"xmlns\",\n      vt: \"xmlns:vt\"\n    });\n  }\n}\nclass CustomPropertyAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      fmtid: \"fmtid\",\n      pid: \"pid\",\n      name: \"name\"\n    });\n  }\n}\nclass CustomProperty extends XmlComponent {\n  constructor(id, properties) {\n    super(\"property\");\n    this.root.push(\n      new CustomPropertyAttributes({\n        fmtid: \"{D5CDD505-2E9C-101B-9397-08002B2CF9AE}\",\n        pid: id.toString(),\n        name: properties.name\n      })\n    );\n    this.root.push(new CustomPropertyValue(properties.value));\n  }\n}\nclass CustomPropertyValue extends XmlComponent {\n  constructor(value) {\n    super(\"vt:lpwstr\");\n    this.root.push(value);\n  }\n}\nclass CustomProperties extends XmlComponent {\n  constructor(properties) {\n    super(\"Properties\");\n    // eslint-disable-next-line functional/prefer-readonly-type\n    __publicField(this, \"nextId\");\n    // eslint-disable-next-line functional/prefer-readonly-type\n    __publicField(this, \"properties\", []);\n    this.root.push(\n      new CustomPropertiesAttributes({\n        xmlns: \"http://schemas.openxmlformats.org/officeDocument/2006/custom-properties\",\n        vt: \"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\"\n      })\n    );\n    this.nextId = 2;\n    for (const property of properties) {\n      this.addCustomProperty(property);\n    }\n  }\n  prepForXml(context) {\n    this.properties.forEach((x) => this.root.push(x));\n    return super.prepForXml(context);\n  }\n  addCustomProperty(property) {\n    this.properties.push(new CustomProperty(this.nextId++, property));\n  }\n}\nconst CharacterSet = {\n  ANSI: \"00\",\n  DEFAULT: \"01\",\n  SYMBOL: \"02\",\n  MAC: \"4D\",\n  JIS: \"80\",\n  HANGUL: \"81\",\n  JOHAB: \"82\",\n  GB_2312: \"86\",\n  CHINESEBIG5: \"88\",\n  GREEK: \"A1\",\n  TURKISH: \"A2\",\n  VIETNAMESE: \"A3\",\n  HEBREW: \"B1\",\n  ARABIC: \"B2\",\n  BALTIC: \"BA\",\n  RUSSIAN: \"CC\",\n  THAI: \"DE\",\n  EASTEUROPE: \"EE\",\n  OEM: \"FF\"\n};\nconst createFontRelationship = ({ id, fontKey, subsetted }, name) => new BuilderElement({\n  name,\n  attributes: __spreadValues({\n    id: { key: \"r:id\", value: id }\n  }, fontKey ? { fontKey: { key: \"w:fontKey\", value: `{${fontKey}}` } } : {}),\n  children: [...subsetted ? [new OnOffElement(\"w:subsetted\", subsetted)] : []]\n});\nconst createFont = ({\n  name,\n  altName,\n  panose1,\n  charset,\n  family,\n  notTrueType,\n  pitch,\n  sig,\n  embedRegular,\n  embedBold,\n  embedItalic,\n  embedBoldItalic\n}) => (\n  // http://www.datypic.com/sc/ooxml/e-w_font-1.html\n  new BuilderElement({\n    name: \"w:font\",\n    attributes: {\n      name: { key: \"w:name\", value: name }\n    },\n    children: [\n      // http://www.datypic.com/sc/ooxml/e-w_altName-1.html\n      ...altName ? [createStringElement(\"w:altName\", altName)] : [],\n      // http://www.datypic.com/sc/ooxml/e-w_panose1-1.html\n      ...panose1 ? [createStringElement(\"w:panose1\", panose1)] : [],\n      // http://www.datypic.com/sc/ooxml/e-w_charset-1.html\n      ...charset ? [createStringElement(\"w:charset\", charset)] : [],\n      // http://www.datypic.com/sc/ooxml/e-w_family-1.html\n      ...family ? [createStringElement(\"w:family\", family)] : [],\n      // http://www.datypic.com/sc/ooxml/e-w_notTrueType-1.html\n      ...notTrueType ? [new OnOffElement(\"w:notTrueType\", notTrueType)] : [],\n      ...pitch ? [createStringElement(\"w:pitch\", pitch)] : [],\n      // http://www.datypic.com/sc/ooxml/e-w_sig-1.html\n      ...sig ? [\n        new BuilderElement({\n          name: \"w:sig\",\n          attributes: {\n            usb0: { key: \"w:usb0\", value: sig.usb0 },\n            usb1: { key: \"w:usb1\", value: sig.usb1 },\n            usb2: { key: \"w:usb2\", value: sig.usb2 },\n            usb3: { key: \"w:usb3\", value: sig.usb3 },\n            csb0: { key: \"w:csb0\", value: sig.csb0 },\n            csb1: { key: \"w:csb1\", value: sig.csb1 }\n          }\n        })\n      ] : [],\n      // http://www.datypic.com/sc/ooxml/e-w_embedRegular-1.html\n      ...embedRegular ? [createFontRelationship(embedRegular, \"w:embedRegular\")] : [],\n      // http://www.datypic.com/sc/ooxml/e-w_embedBold-1.html\n      ...embedBold ? [createFontRelationship(embedBold, \"w:embedBold\")] : [],\n      // http://www.datypic.com/sc/ooxml/e-w_embedItalic-1.html\n      ...embedItalic ? [createFontRelationship(embedItalic, \"w:embedItalic\")] : [],\n      // http://www.datypic.com/sc/ooxml/e-w_embedBoldItalic-1.html\n      ...embedBoldItalic ? [createFontRelationship(embedBoldItalic, \"w:embedBoldItalic\")] : []\n    ]\n  })\n);\nconst createRegularFont = ({\n  name,\n  index,\n  fontKey,\n  characterSet\n}) => createFont({\n  name,\n  sig: {\n    usb0: \"E0002AFF\",\n    usb1: \"C000247B\",\n    usb2: \"00000009\",\n    usb3: \"00000000\",\n    csb0: \"000001FF\",\n    csb1: \"00000000\"\n  },\n  charset: characterSet,\n  family: \"auto\",\n  pitch: \"variable\",\n  embedRegular: {\n    fontKey,\n    id: `rId${index}`\n  }\n});\nconst createFontTable = (fonts) => (\n  // https://c-rex.net/projects/samples/ooxml/e1/Part4/OOXML_P4_DOCX_Font_topic_ID0ERNCU.html\n  // http://www.datypic.com/sc/ooxml/e-w_fonts.html\n  new BuilderElement({\n    name: \"w:fonts\",\n    attributes: {\n      mc: { key: \"xmlns:mc\", value: \"http://schemas.openxmlformats.org/markup-compatibility/2006\" },\n      r: { key: \"xmlns:r\", value: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" },\n      w: { key: \"xmlns:w\", value: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\" },\n      w14: { key: \"xmlns:w14\", value: \"http://schemas.microsoft.com/office/word/2010/wordml\" },\n      w15: { key: \"xmlns:w15\", value: \"http://schemas.microsoft.com/office/word/2012/wordml\" },\n      w16cex: { key: \"xmlns:w16cex\", value: \"http://schemas.microsoft.com/office/word/2018/wordml/cex\" },\n      w16cid: { key: \"xmlns:w16cid\", value: \"http://schemas.microsoft.com/office/word/2016/wordml/cid\" },\n      w16: { key: \"xmlns:w16\", value: \"http://schemas.microsoft.com/office/word/2018/wordml\" },\n      w16sdtdh: { key: \"xmlns:w16sdtdh\", value: \"http://schemas.microsoft.com/office/word/2020/wordml/sdtdatahash\" },\n      w16se: { key: \"xmlns:w16se\", value: \"http://schemas.microsoft.com/office/word/2015/wordml/symex\" },\n      Ignorable: { key: \"mc:Ignorable\", value: \"w14 w15 w16se w16cid w16 w16cex w16sdtdh\" }\n    },\n    children: fonts.map(\n      (font, i) => createRegularFont({\n        name: font.name,\n        index: i + 1,\n        fontKey: font.fontKey\n      })\n    )\n  })\n);\nclass FontWrapper {\n  constructor(options2) {\n    __publicField(this, \"fontTable\");\n    __publicField(this, \"relationships\");\n    __publicField(this, \"fontOptionsWithKey\", []);\n    this.options = options2;\n    this.fontOptionsWithKey = options2.map((o) => __spreadProps(__spreadValues({}, o), { fontKey: uniqueUuid() }));\n    this.fontTable = createFontTable(this.fontOptionsWithKey);\n    this.relationships = new Relationships();\n    for (let i = 0; i < options2.length; i++) {\n      this.relationships.createRelationship(\n        i + 1,\n        \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/font\",\n        `fonts/${options2[i].name}.odttf`\n      );\n    }\n  }\n  get View() {\n    return this.fontTable;\n  }\n  get Relationships() {\n    return this.relationships;\n  }\n}\nclass FooterAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      wpc: \"xmlns:wpc\",\n      mc: \"xmlns:mc\",\n      o: \"xmlns:o\",\n      r: \"xmlns:r\",\n      m: \"xmlns:m\",\n      v: \"xmlns:v\",\n      wp14: \"xmlns:wp14\",\n      wp: \"xmlns:wp\",\n      w10: \"xmlns:w10\",\n      w: \"xmlns:w\",\n      w14: \"xmlns:w14\",\n      w15: \"xmlns:w15\",\n      wpg: \"xmlns:wpg\",\n      wpi: \"xmlns:wpi\",\n      wne: \"xmlns:wne\",\n      wps: \"xmlns:wps\",\n      cp: \"xmlns:cp\",\n      dc: \"xmlns:dc\",\n      dcterms: \"xmlns:dcterms\",\n      dcmitype: \"xmlns:dcmitype\",\n      xsi: \"xmlns:xsi\",\n      type: \"xsi:type\"\n    });\n  }\n}\nlet Footer$1 = class Footer extends InitializableXmlComponent {\n  constructor(referenceNumber, initContent) {\n    super(\"w:ftr\", initContent);\n    __publicField(this, \"refId\");\n    this.refId = referenceNumber;\n    if (!initContent) {\n      this.root.push(\n        new FooterAttributes({\n          wpc: \"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\",\n          mc: \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\n          o: \"urn:schemas-microsoft-com:office:office\",\n          r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\",\n          m: \"http://schemas.openxmlformats.org/officeDocument/2006/math\",\n          v: \"urn:schemas-microsoft-com:vml\",\n          wp14: \"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\",\n          wp: \"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\",\n          w10: \"urn:schemas-microsoft-com:office:word\",\n          w: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\n          w14: \"http://schemas.microsoft.com/office/word/2010/wordml\",\n          w15: \"http://schemas.microsoft.com/office/word/2012/wordml\",\n          wpg: \"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\",\n          wpi: \"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\",\n          wne: \"http://schemas.microsoft.com/office/word/2006/wordml\",\n          wps: \"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\"\n        })\n      );\n    }\n  }\n  get ReferenceId() {\n    return this.refId;\n  }\n  add(item) {\n    this.root.push(item);\n  }\n};\nclass FooterWrapper {\n  constructor(media, referenceId, initContent) {\n    __publicField(this, \"footer\");\n    __publicField(this, \"relationships\");\n    this.media = media;\n    this.footer = new Footer$1(referenceId, initContent);\n    this.relationships = new Relationships();\n  }\n  add(item) {\n    this.footer.add(item);\n  }\n  addChildElement(childElement) {\n    this.footer.addChildElement(childElement);\n  }\n  get View() {\n    return this.footer;\n  }\n  get Relationships() {\n    return this.relationships;\n  }\n  get Media() {\n    return this.media;\n  }\n}\nclass FootnoteAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      type: \"w:type\",\n      id: \"w:id\"\n    });\n  }\n}\nclass FootnoteRef extends XmlComponent {\n  constructor() {\n    super(\"w:footnoteRef\");\n  }\n}\nclass FootnoteRefRun extends Run {\n  constructor() {\n    super({\n      style: \"FootnoteReference\"\n    });\n    this.root.push(new FootnoteRef());\n  }\n}\nconst FootnoteType = {\n  SEPERATOR: \"separator\",\n  CONTINUATION_SEPERATOR: \"continuationSeparator\"\n};\nclass Footnote extends XmlComponent {\n  constructor(options2) {\n    super(\"w:footnote\");\n    this.root.push(\n      new FootnoteAttributes({\n        type: options2.type,\n        id: options2.id\n      })\n    );\n    for (let i = 0; i < options2.children.length; i++) {\n      const child = options2.children[i];\n      if (i === 0) {\n        child.addRunToFront(new FootnoteRefRun());\n      }\n      this.root.push(child);\n    }\n  }\n}\nclass ContinuationSeperator extends XmlComponent {\n  constructor() {\n    super(\"w:continuationSeparator\");\n  }\n}\nclass ContinuationSeperatorRun extends Run {\n  constructor() {\n    super({});\n    this.root.push(new ContinuationSeperator());\n  }\n}\nclass Seperator extends XmlComponent {\n  constructor() {\n    super(\"w:separator\");\n  }\n}\nclass SeperatorRun extends Run {\n  constructor() {\n    super({});\n    this.root.push(new Seperator());\n  }\n}\nclass FootnotesAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      wpc: \"xmlns:wpc\",\n      mc: \"xmlns:mc\",\n      o: \"xmlns:o\",\n      r: \"xmlns:r\",\n      m: \"xmlns:m\",\n      v: \"xmlns:v\",\n      wp14: \"xmlns:wp14\",\n      wp: \"xmlns:wp\",\n      w10: \"xmlns:w10\",\n      w: \"xmlns:w\",\n      w14: \"xmlns:w14\",\n      w15: \"xmlns:w15\",\n      wpg: \"xmlns:wpg\",\n      wpi: \"xmlns:wpi\",\n      wne: \"xmlns:wne\",\n      wps: \"xmlns:wps\",\n      Ignorable: \"mc:Ignorable\"\n    });\n  }\n}\nclass FootNotes extends XmlComponent {\n  constructor() {\n    super(\"w:footnotes\");\n    this.root.push(\n      new FootnotesAttributes({\n        wpc: \"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\",\n        mc: \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\n        o: \"urn:schemas-microsoft-com:office:office\",\n        r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\",\n        m: \"http://schemas.openxmlformats.org/officeDocument/2006/math\",\n        v: \"urn:schemas-microsoft-com:vml\",\n        wp14: \"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\",\n        wp: \"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\",\n        w10: \"urn:schemas-microsoft-com:office:word\",\n        w: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\n        w14: \"http://schemas.microsoft.com/office/word/2010/wordml\",\n        w15: \"http://schemas.microsoft.com/office/word/2012/wordml\",\n        wpg: \"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\",\n        wpi: \"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\",\n        wne: \"http://schemas.microsoft.com/office/word/2006/wordml\",\n        wps: \"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\",\n        Ignorable: \"w14 w15 wp14\"\n      })\n    );\n    const begin = new Footnote({\n      id: -1,\n      type: FootnoteType.SEPERATOR,\n      children: [\n        new Paragraph({\n          spacing: {\n            after: 0,\n            line: 240,\n            lineRule: LineRuleType.AUTO\n          },\n          children: [new SeperatorRun()]\n        })\n      ]\n    });\n    this.root.push(begin);\n    const spacing = new Footnote({\n      id: 0,\n      type: FootnoteType.CONTINUATION_SEPERATOR,\n      children: [\n        new Paragraph({\n          spacing: {\n            after: 0,\n            line: 240,\n            lineRule: LineRuleType.AUTO\n          },\n          children: [new ContinuationSeperatorRun()]\n        })\n      ]\n    });\n    this.root.push(spacing);\n  }\n  createFootNote(id, paragraph) {\n    const footnote = new Footnote({\n      id,\n      children: paragraph\n    });\n    this.root.push(footnote);\n  }\n}\nclass FootnotesWrapper {\n  constructor() {\n    __publicField(this, \"footnotess\");\n    __publicField(this, \"relationships\");\n    this.footnotess = new FootNotes();\n    this.relationships = new Relationships();\n  }\n  get View() {\n    return this.footnotess;\n  }\n  get Relationships() {\n    return this.relationships;\n  }\n}\nclass HeaderAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      wpc: \"xmlns:wpc\",\n      mc: \"xmlns:mc\",\n      o: \"xmlns:o\",\n      r: \"xmlns:r\",\n      m: \"xmlns:m\",\n      v: \"xmlns:v\",\n      wp14: \"xmlns:wp14\",\n      wp: \"xmlns:wp\",\n      w10: \"xmlns:w10\",\n      w: \"xmlns:w\",\n      w14: \"xmlns:w14\",\n      w15: \"xmlns:w15\",\n      wpg: \"xmlns:wpg\",\n      wpi: \"xmlns:wpi\",\n      wne: \"xmlns:wne\",\n      wps: \"xmlns:wps\",\n      cp: \"xmlns:cp\",\n      dc: \"xmlns:dc\",\n      dcterms: \"xmlns:dcterms\",\n      dcmitype: \"xmlns:dcmitype\",\n      xsi: \"xmlns:xsi\",\n      type: \"xsi:type\",\n      cx: \"xmlns:cx\",\n      cx1: \"xmlns:cx1\",\n      cx2: \"xmlns:cx2\",\n      cx3: \"xmlns:cx3\",\n      cx4: \"xmlns:cx4\",\n      cx5: \"xmlns:cx5\",\n      cx6: \"xmlns:cx6\",\n      cx7: \"xmlns:cx7\",\n      cx8: \"xmlns:cx8\",\n      w16cid: \"xmlns:w16cid\",\n      w16se: \"xmlns:w16se\"\n    });\n  }\n}\nlet Header$1 = class Header extends InitializableXmlComponent {\n  constructor(referenceNumber, initContent) {\n    super(\"w:hdr\", initContent);\n    __publicField(this, \"refId\");\n    this.refId = referenceNumber;\n    if (!initContent) {\n      this.root.push(\n        new HeaderAttributes({\n          wpc: \"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\",\n          mc: \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\n          o: \"urn:schemas-microsoft-com:office:office\",\n          r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\",\n          m: \"http://schemas.openxmlformats.org/officeDocument/2006/math\",\n          v: \"urn:schemas-microsoft-com:vml\",\n          wp14: \"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\",\n          wp: \"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\",\n          w10: \"urn:schemas-microsoft-com:office:word\",\n          w: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\n          w14: \"http://schemas.microsoft.com/office/word/2010/wordml\",\n          w15: \"http://schemas.microsoft.com/office/word/2012/wordml\",\n          wpg: \"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\",\n          wpi: \"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\",\n          wne: \"http://schemas.microsoft.com/office/word/2006/wordml\",\n          wps: \"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\",\n          cx: \"http://schemas.microsoft.com/office/drawing/2014/chartex\",\n          cx1: \"http://schemas.microsoft.com/office/drawing/2015/9/8/chartex\",\n          cx2: \"http://schemas.microsoft.com/office/drawing/2015/10/21/chartex\",\n          cx3: \"http://schemas.microsoft.com/office/drawing/2016/5/9/chartex\",\n          cx4: \"http://schemas.microsoft.com/office/drawing/2016/5/10/chartex\",\n          cx5: \"http://schemas.microsoft.com/office/drawing/2016/5/11/chartex\",\n          cx6: \"http://schemas.microsoft.com/office/drawing/2016/5/12/chartex\",\n          cx7: \"http://schemas.microsoft.com/office/drawing/2016/5/13/chartex\",\n          cx8: \"http://schemas.microsoft.com/office/drawing/2016/5/14/chartex\",\n          w16cid: \"http://schemas.microsoft.com/office/word/2016/wordml/cid\",\n          w16se: \"http://schemas.microsoft.com/office/word/2015/wordml/symex\"\n        })\n      );\n    }\n  }\n  get ReferenceId() {\n    return this.refId;\n  }\n  add(item) {\n    this.root.push(item);\n  }\n};\nclass HeaderWrapper {\n  constructor(media, referenceId, initContent) {\n    __publicField(this, \"header\");\n    __publicField(this, \"relationships\");\n    this.media = media;\n    this.header = new Header$1(referenceId, initContent);\n    this.relationships = new Relationships();\n  }\n  add(item) {\n    this.header.add(item);\n    return this;\n  }\n  addChildElement(childElement) {\n    this.header.addChildElement(childElement);\n  }\n  get View() {\n    return this.header;\n  }\n  get Relationships() {\n    return this.relationships;\n  }\n  get Media() {\n    return this.media;\n  }\n}\nclass Media {\n  constructor() {\n    // eslint-disable-next-line functional/prefer-readonly-type\n    __publicField(this, \"map\");\n    this.map = /* @__PURE__ */ new Map();\n  }\n  addImage(key, mediaData) {\n    this.map.set(key, mediaData);\n  }\n  get Array() {\n    return Array.from(this.map.values());\n  }\n}\nconst WORKAROUND2 = \"\";\nconst LevelFormat = {\n  DECIMAL: \"decimal\",\n  UPPER_ROMAN: \"upperRoman\",\n  LOWER_ROMAN: \"lowerRoman\",\n  UPPER_LETTER: \"upperLetter\",\n  LOWER_LETTER: \"lowerLetter\",\n  ORDINAL: \"ordinal\",\n  CARDINAL_TEXT: \"cardinalText\",\n  ORDINAL_TEXT: \"ordinalText\",\n  HEX: \"hex\",\n  CHICAGO: \"chicago\",\n  IDEOGRAPH__DIGITAL: \"ideographDigital\",\n  JAPANESE_COUNTING: \"japaneseCounting\",\n  AIUEO: \"aiueo\",\n  IROHA: \"iroha\",\n  DECIMAL_FULL_WIDTH: \"decimalFullWidth\",\n  DECIMAL_HALF_WIDTH: \"decimalHalfWidth\",\n  JAPANESE_LEGAL: \"japaneseLegal\",\n  JAPANESE_DIGITAL_TEN_THOUSAND: \"japaneseDigitalTenThousand\",\n  DECIMAL_ENCLOSED_CIRCLE: \"decimalEnclosedCircle\",\n  DECIMAL_FULL_WIDTH2: \"decimalFullWidth2\",\n  AIUEO_FULL_WIDTH: \"aiueoFullWidth\",\n  IROHA_FULL_WIDTH: \"irohaFullWidth\",\n  DECIMAL_ZERO: \"decimalZero\",\n  BULLET: \"bullet\",\n  GANADA: \"ganada\",\n  CHOSUNG: \"chosung\",\n  DECIMAL_ENCLOSED_FULLSTOP: \"decimalEnclosedFullstop\",\n  DECIMAL_ENCLOSED_PARENTHESES: \"decimalEnclosedParen\",\n  DECIMAL_ENCLOSED_CIRCLE_CHINESE: \"decimalEnclosedCircleChinese\",\n  IDEOGRAPH_ENCLOSED_CIRCLE: \"ideographEnclosedCircle\",\n  IDEOGRAPH_TRADITIONAL: \"ideographTraditional\",\n  IDEOGRAPH_ZODIAC: \"ideographZodiac\",\n  IDEOGRAPH_ZODIAC_TRADITIONAL: \"ideographZodiacTraditional\",\n  TAIWANESE_COUNTING: \"taiwaneseCounting\",\n  IDEOGRAPH_LEGAL_TRADITIONAL: \"ideographLegalTraditional\",\n  TAIWANESE_COUNTING_THOUSAND: \"taiwaneseCountingThousand\",\n  TAIWANESE_DIGITAL: \"taiwaneseDigital\",\n  CHINESE_COUNTING: \"chineseCounting\",\n  CHINESE_LEGAL_SIMPLIFIED: \"chineseLegalSimplified\",\n  CHINESE_COUNTING_THOUSAND: \"chineseCountingThousand\",\n  KOREAN_DIGITAL: \"koreanDigital\",\n  KOREAN_COUNTING: \"koreanCounting\",\n  KOREAN_LEGAL: \"koreanLegal\",\n  KOREAN_DIGITAL2: \"koreanDigital2\",\n  VIETNAMESE_COUNTING: \"vietnameseCounting\",\n  RUSSIAN_LOWER: \"russianLower\",\n  RUSSIAN_UPPER: \"russianUpper\",\n  NONE: \"none\",\n  NUMBER_IN_DASH: \"numberInDash\",\n  HEBREW1: \"hebrew1\",\n  HEBREW2: \"hebrew2\",\n  ARABIC_ALPHA: \"arabicAlpha\",\n  ARABIC_ABJAD: \"arabicAbjad\",\n  HINDI_VOWELS: \"hindiVowels\",\n  HINDI_CONSONANTS: \"hindiConsonants\",\n  HINDI_NUMBERS: \"hindiNumbers\",\n  HINDI_COUNTING: \"hindiCounting\",\n  THAI_LETTERS: \"thaiLetters\",\n  THAI_NUMBERS: \"thaiNumbers\",\n  THAI_COUNTING: \"thaiCounting\",\n  BAHT_TEXT: \"bahtText\",\n  DOLLAR_TEXT: \"dollarText\",\n  CUSTOM: \"custom\"\n};\nclass LevelAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      ilvl: \"w:ilvl\",\n      tentative: \"w15:tentative\"\n    });\n  }\n}\nclass NumberFormat extends XmlComponent {\n  constructor(value) {\n    super(\"w:numFmt\");\n    this.root.push(\n      new Attributes({\n        val: value\n      })\n    );\n  }\n}\nclass LevelText extends XmlComponent {\n  constructor(value) {\n    super(\"w:lvlText\");\n    this.root.push(\n      new Attributes({\n        val: value\n      })\n    );\n  }\n}\nclass LevelJc extends XmlComponent {\n  constructor(value) {\n    super(\"w:lvlJc\");\n    this.root.push(\n      new Attributes({\n        val: value\n      })\n    );\n  }\n}\nconst LevelSuffix = {\n  NOTHING: \"nothing\",\n  SPACE: \"space\",\n  TAB: \"tab\"\n};\nclass Suffix extends XmlComponent {\n  constructor(value) {\n    super(\"w:suff\");\n    this.root.push(\n      new Attributes({\n        val: value\n      })\n    );\n  }\n}\nclass IsLegalNumberingStyle extends XmlComponent {\n  constructor() {\n    super(\"w:isLgl\");\n  }\n}\nclass LevelBase extends XmlComponent {\n  constructor({\n    level,\n    format: format2,\n    text,\n    alignment = AlignmentType.START,\n    start = 1,\n    style,\n    suffix,\n    isLegalNumberingStyle\n  }) {\n    super(\"w:lvl\");\n    __publicField(this, \"paragraphProperties\");\n    __publicField(this, \"runProperties\");\n    this.root.push(new NumberValueElement(\"w:start\", decimalNumber(start)));\n    if (format2) {\n      this.root.push(new NumberFormat(format2));\n    }\n    if (suffix) {\n      this.root.push(new Suffix(suffix));\n    }\n    if (isLegalNumberingStyle) {\n      this.root.push(new IsLegalNumberingStyle());\n    }\n    if (text) {\n      this.root.push(new LevelText(text));\n    }\n    this.root.push(new LevelJc(alignment));\n    this.paragraphProperties = new ParagraphProperties(style && style.paragraph);\n    this.runProperties = new RunProperties(style && style.run);\n    this.root.push(this.paragraphProperties);\n    this.root.push(this.runProperties);\n    if (level > 9) {\n      throw new Error(\n        \"Level cannot be greater than 9. Read more here: https://answers.microsoft.com/en-us/msoffice/forum/all/does-word-support-more-than-9-list-levels/d130fdcd-1781-446d-8c84-c6c79124e4d7\"\n      );\n    }\n    this.root.push(\n      new LevelAttributes({\n        ilvl: decimalNumber(level),\n        tentative: 1\n      })\n    );\n  }\n}\nclass Level extends LevelBase {\n  // This is the level that sits under abstractNum. We make a\n  // handful of properties required\n}\nclass LevelForOverride extends LevelBase {\n}\nclass MultiLevelType extends XmlComponent {\n  constructor(value) {\n    super(\"w:multiLevelType\");\n    this.root.push(\n      new Attributes({\n        val: value\n      })\n    );\n  }\n}\nclass AbstractNumberingAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      abstractNumId: \"w:abstractNumId\",\n      restartNumberingAfterBreak: \"w15:restartNumberingAfterBreak\"\n    });\n  }\n}\nclass AbstractNumbering extends XmlComponent {\n  constructor(id, levelOptions) {\n    super(\"w:abstractNum\");\n    __publicField(this, \"id\");\n    this.root.push(\n      new AbstractNumberingAttributes({\n        abstractNumId: decimalNumber(id),\n        restartNumberingAfterBreak: 0\n      })\n    );\n    this.root.push(new MultiLevelType(\"hybridMultilevel\"));\n    this.id = id;\n    for (const option of levelOptions) {\n      this.root.push(new Level(option));\n    }\n  }\n}\nclass AbstractNumId extends XmlComponent {\n  constructor(value) {\n    super(\"w:abstractNumId\");\n    this.root.push(\n      new Attributes({\n        val: value\n      })\n    );\n  }\n}\nclass NumAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { numId: \"w:numId\" });\n  }\n}\nclass ConcreteNumbering extends XmlComponent {\n  constructor(options2) {\n    super(\"w:num\");\n    __publicField(this, \"numId\");\n    __publicField(this, \"reference\");\n    __publicField(this, \"instance\");\n    this.numId = options2.numId;\n    this.reference = options2.reference;\n    this.instance = options2.instance;\n    this.root.push(\n      new NumAttributes({\n        numId: decimalNumber(options2.numId)\n      })\n    );\n    this.root.push(new AbstractNumId(decimalNumber(options2.abstractNumId)));\n    if (options2.overrideLevels && options2.overrideLevels.length) {\n      for (const level of options2.overrideLevels) {\n        this.root.push(new LevelOverride(level.num, level.start));\n      }\n    }\n  }\n}\nclass LevelOverrideAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { ilvl: \"w:ilvl\" });\n  }\n}\nclass LevelOverride extends XmlComponent {\n  constructor(levelNum, start) {\n    super(\"w:lvlOverride\");\n    this.root.push(new LevelOverrideAttributes({ ilvl: levelNum }));\n    if (start !== void 0) {\n      this.root.push(new StartOverride(start));\n    }\n  }\n}\nclass StartOverrideAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { val: \"w:val\" });\n  }\n}\nclass StartOverride extends XmlComponent {\n  constructor(start) {\n    super(\"w:startOverride\");\n    this.root.push(new StartOverrideAttributes({ val: start }));\n  }\n}\nclass Numbering extends XmlComponent {\n  constructor(options2) {\n    super(\"w:numbering\");\n    __publicField(this, \"abstractNumberingMap\", /* @__PURE__ */ new Map());\n    __publicField(this, \"concreteNumberingMap\", /* @__PURE__ */ new Map());\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    __publicField(this, \"referenceConfigMap\", /* @__PURE__ */ new Map());\n    __publicField(this, \"abstractNumUniqueNumericId\", abstractNumUniqueNumericIdGen());\n    __publicField(this, \"concreteNumUniqueNumericId\", concreteNumUniqueNumericIdGen());\n    this.root.push(\n      new DocumentAttributes({\n        wpc: \"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\",\n        mc: \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\n        o: \"urn:schemas-microsoft-com:office:office\",\n        r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\",\n        m: \"http://schemas.openxmlformats.org/officeDocument/2006/math\",\n        v: \"urn:schemas-microsoft-com:vml\",\n        wp14: \"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\",\n        wp: \"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\",\n        w10: \"urn:schemas-microsoft-com:office:word\",\n        w: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\n        w14: \"http://schemas.microsoft.com/office/word/2010/wordml\",\n        w15: \"http://schemas.microsoft.com/office/word/2012/wordml\",\n        wpg: \"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\",\n        wpi: \"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\",\n        wne: \"http://schemas.microsoft.com/office/word/2006/wordml\",\n        wps: \"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\",\n        Ignorable: \"w14 w15 wp14\"\n      })\n    );\n    const abstractNumbering = new AbstractNumbering(this.abstractNumUniqueNumericId(), [\n      {\n        level: 0,\n        format: LevelFormat.BULLET,\n        text: \"●\",\n        alignment: AlignmentType.LEFT,\n        style: {\n          paragraph: {\n            indent: { left: convertInchesToTwip(0.5), hanging: convertInchesToTwip(0.25) }\n          }\n        }\n      },\n      {\n        level: 1,\n        format: LevelFormat.BULLET,\n        text: \"○\",\n        alignment: AlignmentType.LEFT,\n        style: {\n          paragraph: {\n            indent: { left: convertInchesToTwip(1), hanging: convertInchesToTwip(0.25) }\n          }\n        }\n      },\n      {\n        level: 2,\n        format: LevelFormat.BULLET,\n        text: \"■\",\n        alignment: AlignmentType.LEFT,\n        style: {\n          paragraph: {\n            indent: { left: 2160, hanging: convertInchesToTwip(0.25) }\n          }\n        }\n      },\n      {\n        level: 3,\n        format: LevelFormat.BULLET,\n        text: \"●\",\n        alignment: AlignmentType.LEFT,\n        style: {\n          paragraph: {\n            indent: { left: 2880, hanging: convertInchesToTwip(0.25) }\n          }\n        }\n      },\n      {\n        level: 4,\n        format: LevelFormat.BULLET,\n        text: \"○\",\n        alignment: AlignmentType.LEFT,\n        style: {\n          paragraph: {\n            indent: { left: 3600, hanging: convertInchesToTwip(0.25) }\n          }\n        }\n      },\n      {\n        level: 5,\n        format: LevelFormat.BULLET,\n        text: \"■\",\n        alignment: AlignmentType.LEFT,\n        style: {\n          paragraph: {\n            indent: { left: 4320, hanging: convertInchesToTwip(0.25) }\n          }\n        }\n      },\n      {\n        level: 6,\n        format: LevelFormat.BULLET,\n        text: \"●\",\n        alignment: AlignmentType.LEFT,\n        style: {\n          paragraph: {\n            indent: { left: 5040, hanging: convertInchesToTwip(0.25) }\n          }\n        }\n      },\n      {\n        level: 7,\n        format: LevelFormat.BULLET,\n        text: \"●\",\n        alignment: AlignmentType.LEFT,\n        style: {\n          paragraph: {\n            indent: { left: 5760, hanging: convertInchesToTwip(0.25) }\n          }\n        }\n      },\n      {\n        level: 8,\n        format: LevelFormat.BULLET,\n        text: \"●\",\n        alignment: AlignmentType.LEFT,\n        style: {\n          paragraph: {\n            indent: { left: 6480, hanging: convertInchesToTwip(0.25) }\n          }\n        }\n      }\n    ]);\n    this.concreteNumberingMap.set(\n      \"default-bullet-numbering\",\n      new ConcreteNumbering({\n        numId: 1,\n        abstractNumId: abstractNumbering.id,\n        reference: \"default-bullet-numbering\",\n        instance: 0,\n        overrideLevels: [\n          {\n            num: 0,\n            start: 1\n          }\n        ]\n      })\n    );\n    this.abstractNumberingMap.set(\"default-bullet-numbering\", abstractNumbering);\n    for (const con of options2.config) {\n      this.abstractNumberingMap.set(con.reference, new AbstractNumbering(this.abstractNumUniqueNumericId(), con.levels));\n      this.referenceConfigMap.set(con.reference, con.levels);\n    }\n  }\n  prepForXml(context) {\n    for (const numbering of this.abstractNumberingMap.values()) {\n      this.root.push(numbering);\n    }\n    for (const numbering of this.concreteNumberingMap.values()) {\n      this.root.push(numbering);\n    }\n    return super.prepForXml(context);\n  }\n  createConcreteNumberingInstance(reference, instance) {\n    const abstractNumbering = this.abstractNumberingMap.get(reference);\n    if (!abstractNumbering) {\n      return;\n    }\n    const fullReference = `${reference}-${instance}`;\n    if (this.concreteNumberingMap.has(fullReference)) {\n      return;\n    }\n    const referenceConfigLevels = this.referenceConfigMap.get(reference);\n    const firstLevelStartNumber = referenceConfigLevels && referenceConfigLevels[0].start;\n    const concreteNumberingSettings = {\n      numId: this.concreteNumUniqueNumericId(),\n      abstractNumId: abstractNumbering.id,\n      reference,\n      instance,\n      overrideLevels: [\n        firstLevelStartNumber && Number.isInteger(firstLevelStartNumber) ? {\n          num: 0,\n          start: firstLevelStartNumber\n        } : {\n          num: 0,\n          start: 1\n        }\n      ]\n    };\n    this.concreteNumberingMap.set(fullReference, new ConcreteNumbering(concreteNumberingSettings));\n  }\n  get ConcreteNumbering() {\n    return Array.from(this.concreteNumberingMap.values());\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get ReferenceConfig() {\n    return Array.from(this.referenceConfigMap.values());\n  }\n}\nclass CompatibilitySettingAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      version: \"w:val\",\n      name: \"w:name\",\n      uri: \"w:uri\"\n    });\n  }\n}\nclass CompatibilitySetting extends XmlComponent {\n  constructor(version) {\n    super(\"w:compatSetting\");\n    this.root.push(\n      new CompatibilitySettingAttributes({\n        version,\n        uri: \"http://schemas.microsoft.com/office/word\",\n        name: \"compatibilityMode\"\n      })\n    );\n  }\n}\nclass Compatibility extends XmlComponent {\n  constructor(options2) {\n    super(\"w:compat\");\n    if (options2.version) {\n      this.root.push(new CompatibilitySetting(options2.version));\n    }\n    if (options2.useSingleBorderforContiguousCells) {\n      this.root.push(new OnOffElement(\"w:useSingleBorderforContiguousCells\", options2.useSingleBorderforContiguousCells));\n    }\n    if (options2.wordPerfectJustification) {\n      this.root.push(new OnOffElement(\"w:wpJustification\", options2.wordPerfectJustification));\n    }\n    if (options2.noTabStopForHangingIndent) {\n      this.root.push(new OnOffElement(\"w:noTabHangInd\", options2.noTabStopForHangingIndent));\n    }\n    if (options2.noLeading) {\n      this.root.push(new OnOffElement(\"w:noLeading\", options2.noLeading));\n    }\n    if (options2.spaceForUnderline) {\n      this.root.push(new OnOffElement(\"w:spaceForUL\", options2.spaceForUnderline));\n    }\n    if (options2.noColumnBalance) {\n      this.root.push(new OnOffElement(\"w:noColumnBalance\", options2.noColumnBalance));\n    }\n    if (options2.balanceSingleByteDoubleByteWidth) {\n      this.root.push(new OnOffElement(\"w:balanceSingleByteDoubleByteWidth\", options2.balanceSingleByteDoubleByteWidth));\n    }\n    if (options2.noExtraLineSpacing) {\n      this.root.push(new OnOffElement(\"w:noExtraLineSpacing\", options2.noExtraLineSpacing));\n    }\n    if (options2.doNotLeaveBackslashAlone) {\n      this.root.push(new OnOffElement(\"w:doNotLeaveBackslashAlone\", options2.doNotLeaveBackslashAlone));\n    }\n    if (options2.underlineTrailingSpaces) {\n      this.root.push(new OnOffElement(\"w:ulTrailSpace\", options2.underlineTrailingSpaces));\n    }\n    if (options2.doNotExpandShiftReturn) {\n      this.root.push(new OnOffElement(\"w:doNotExpandShiftReturn\", options2.doNotExpandShiftReturn));\n    }\n    if (options2.spacingInWholePoints) {\n      this.root.push(new OnOffElement(\"w:spacingInWholePoints\", options2.spacingInWholePoints));\n    }\n    if (options2.lineWrapLikeWord6) {\n      this.root.push(new OnOffElement(\"w:lineWrapLikeWord6\", options2.lineWrapLikeWord6));\n    }\n    if (options2.printBodyTextBeforeHeader) {\n      this.root.push(new OnOffElement(\"w:printBodyTextBeforeHeader\", options2.printBodyTextBeforeHeader));\n    }\n    if (options2.printColorsBlack) {\n      this.root.push(new OnOffElement(\"w:printColBlack\", options2.printColorsBlack));\n    }\n    if (options2.spaceWidth) {\n      this.root.push(new OnOffElement(\"w:wpSpaceWidth\", options2.spaceWidth));\n    }\n    if (options2.showBreaksInFrames) {\n      this.root.push(new OnOffElement(\"w:showBreaksInFrames\", options2.showBreaksInFrames));\n    }\n    if (options2.subFontBySize) {\n      this.root.push(new OnOffElement(\"w:subFontBySize\", options2.subFontBySize));\n    }\n    if (options2.suppressBottomSpacing) {\n      this.root.push(new OnOffElement(\"w:suppressBottomSpacing\", options2.suppressBottomSpacing));\n    }\n    if (options2.suppressTopSpacing) {\n      this.root.push(new OnOffElement(\"w:suppressTopSpacing\", options2.suppressTopSpacing));\n    }\n    if (options2.suppressSpacingAtTopOfPage) {\n      this.root.push(new OnOffElement(\"w:suppressSpacingAtTopOfPage\", options2.suppressSpacingAtTopOfPage));\n    }\n    if (options2.suppressTopSpacingWP) {\n      this.root.push(new OnOffElement(\"w:suppressTopSpacingWP\", options2.suppressTopSpacingWP));\n    }\n    if (options2.suppressSpBfAfterPgBrk) {\n      this.root.push(new OnOffElement(\"w:suppressSpBfAfterPgBrk\", options2.suppressSpBfAfterPgBrk));\n    }\n    if (options2.swapBordersFacingPages) {\n      this.root.push(new OnOffElement(\"w:swapBordersFacingPages\", options2.swapBordersFacingPages));\n    }\n    if (options2.convertMailMergeEsc) {\n      this.root.push(new OnOffElement(\"w:convMailMergeEsc\", options2.convertMailMergeEsc));\n    }\n    if (options2.truncateFontHeightsLikeWP6) {\n      this.root.push(new OnOffElement(\"w:truncateFontHeightsLikeWP6\", options2.truncateFontHeightsLikeWP6));\n    }\n    if (options2.macWordSmallCaps) {\n      this.root.push(new OnOffElement(\"w:mwSmallCaps\", options2.macWordSmallCaps));\n    }\n    if (options2.usePrinterMetrics) {\n      this.root.push(new OnOffElement(\"w:usePrinterMetrics\", options2.usePrinterMetrics));\n    }\n    if (options2.doNotSuppressParagraphBorders) {\n      this.root.push(new OnOffElement(\"w:doNotSuppressParagraphBorders\", options2.doNotSuppressParagraphBorders));\n    }\n    if (options2.wrapTrailSpaces) {\n      this.root.push(new OnOffElement(\"w:wrapTrailSpaces\", options2.wrapTrailSpaces));\n    }\n    if (options2.footnoteLayoutLikeWW8) {\n      this.root.push(new OnOffElement(\"w:footnoteLayoutLikeWW8\", options2.footnoteLayoutLikeWW8));\n    }\n    if (options2.shapeLayoutLikeWW8) {\n      this.root.push(new OnOffElement(\"w:shapeLayoutLikeWW8\", options2.shapeLayoutLikeWW8));\n    }\n    if (options2.alignTablesRowByRow) {\n      this.root.push(new OnOffElement(\"w:alignTablesRowByRow\", options2.alignTablesRowByRow));\n    }\n    if (options2.forgetLastTabAlignment) {\n      this.root.push(new OnOffElement(\"w:forgetLastTabAlignment\", options2.forgetLastTabAlignment));\n    }\n    if (options2.adjustLineHeightInTable) {\n      this.root.push(new OnOffElement(\"w:adjustLineHeightInTable\", options2.adjustLineHeightInTable));\n    }\n    if (options2.autoSpaceLikeWord95) {\n      this.root.push(new OnOffElement(\"w:autoSpaceLikeWord95\", options2.autoSpaceLikeWord95));\n    }\n    if (options2.noSpaceRaiseLower) {\n      this.root.push(new OnOffElement(\"w:noSpaceRaiseLower\", options2.noSpaceRaiseLower));\n    }\n    if (options2.doNotUseHTMLParagraphAutoSpacing) {\n      this.root.push(new OnOffElement(\"w:doNotUseHTMLParagraphAutoSpacing\", options2.doNotUseHTMLParagraphAutoSpacing));\n    }\n    if (options2.layoutRawTableWidth) {\n      this.root.push(new OnOffElement(\"w:layoutRawTableWidth\", options2.layoutRawTableWidth));\n    }\n    if (options2.layoutTableRowsApart) {\n      this.root.push(new OnOffElement(\"w:layoutTableRowsApart\", options2.layoutTableRowsApart));\n    }\n    if (options2.useWord97LineBreakRules) {\n      this.root.push(new OnOffElement(\"w:useWord97LineBreakRules\", options2.useWord97LineBreakRules));\n    }\n    if (options2.doNotBreakWrappedTables) {\n      this.root.push(new OnOffElement(\"w:doNotBreakWrappedTables\", options2.doNotBreakWrappedTables));\n    }\n    if (options2.doNotSnapToGridInCell) {\n      this.root.push(new OnOffElement(\"w:doNotSnapToGridInCell\", options2.doNotSnapToGridInCell));\n    }\n    if (options2.selectFieldWithFirstOrLastCharacter) {\n      this.root.push(new OnOffElement(\"w:selectFldWithFirstOrLastChar\", options2.selectFieldWithFirstOrLastCharacter));\n    }\n    if (options2.applyBreakingRules) {\n      this.root.push(new OnOffElement(\"w:applyBreakingRules\", options2.applyBreakingRules));\n    }\n    if (options2.doNotWrapTextWithPunctuation) {\n      this.root.push(new OnOffElement(\"w:doNotWrapTextWithPunct\", options2.doNotWrapTextWithPunctuation));\n    }\n    if (options2.doNotUseEastAsianBreakRules) {\n      this.root.push(new OnOffElement(\"w:doNotUseEastAsianBreakRules\", options2.doNotUseEastAsianBreakRules));\n    }\n    if (options2.useWord2002TableStyleRules) {\n      this.root.push(new OnOffElement(\"w:useWord2002TableStyleRules\", options2.useWord2002TableStyleRules));\n    }\n    if (options2.growAutofit) {\n      this.root.push(new OnOffElement(\"w:growAutofit\", options2.growAutofit));\n    }\n    if (options2.useFELayout) {\n      this.root.push(new OnOffElement(\"w:useFELayout\", options2.useFELayout));\n    }\n    if (options2.useNormalStyleForList) {\n      this.root.push(new OnOffElement(\"w:useNormalStyleForList\", options2.useNormalStyleForList));\n    }\n    if (options2.doNotUseIndentAsNumberingTabStop) {\n      this.root.push(new OnOffElement(\"w:doNotUseIndentAsNumberingTabStop\", options2.doNotUseIndentAsNumberingTabStop));\n    }\n    if (options2.useAlternateEastAsianLineBreakRules) {\n      this.root.push(new OnOffElement(\"w:useAltKinsokuLineBreakRules\", options2.useAlternateEastAsianLineBreakRules));\n    }\n    if (options2.allowSpaceOfSameStyleInTable) {\n      this.root.push(new OnOffElement(\"w:allowSpaceOfSameStyleInTable\", options2.allowSpaceOfSameStyleInTable));\n    }\n    if (options2.doNotSuppressIndentation) {\n      this.root.push(new OnOffElement(\"w:doNotSuppressIndentation\", options2.doNotSuppressIndentation));\n    }\n    if (options2.doNotAutofitConstrainedTables) {\n      this.root.push(new OnOffElement(\"w:doNotAutofitConstrainedTables\", options2.doNotAutofitConstrainedTables));\n    }\n    if (options2.autofitToFirstFixedWidthCell) {\n      this.root.push(new OnOffElement(\"w:autofitToFirstFixedWidthCell\", options2.autofitToFirstFixedWidthCell));\n    }\n    if (options2.underlineTabInNumberingList) {\n      this.root.push(new OnOffElement(\"w:underlineTabInNumList\", options2.underlineTabInNumberingList));\n    }\n    if (options2.displayHangulFixedWidth) {\n      this.root.push(new OnOffElement(\"w:displayHangulFixedWidth\", options2.displayHangulFixedWidth));\n    }\n    if (options2.splitPgBreakAndParaMark) {\n      this.root.push(new OnOffElement(\"w:splitPgBreakAndParaMark\", options2.splitPgBreakAndParaMark));\n    }\n    if (options2.doNotVerticallyAlignCellWithSp) {\n      this.root.push(new OnOffElement(\"w:doNotVertAlignCellWithSp\", options2.doNotVerticallyAlignCellWithSp));\n    }\n    if (options2.doNotBreakConstrainedForcedTable) {\n      this.root.push(new OnOffElement(\"w:doNotBreakConstrainedForcedTable\", options2.doNotBreakConstrainedForcedTable));\n    }\n    if (options2.ignoreVerticalAlignmentInTextboxes) {\n      this.root.push(new OnOffElement(\"w:doNotVertAlignInTxbx\", options2.ignoreVerticalAlignmentInTextboxes));\n    }\n    if (options2.useAnsiKerningPairs) {\n      this.root.push(new OnOffElement(\"w:useAnsiKerningPairs\", options2.useAnsiKerningPairs));\n    }\n    if (options2.cachedColumnBalance) {\n      this.root.push(new OnOffElement(\"w:cachedColBalance\", options2.cachedColumnBalance));\n    }\n  }\n}\nclass SettingsAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      wpc: \"xmlns:wpc\",\n      mc: \"xmlns:mc\",\n      o: \"xmlns:o\",\n      r: \"xmlns:r\",\n      m: \"xmlns:m\",\n      v: \"xmlns:v\",\n      wp14: \"xmlns:wp14\",\n      wp: \"xmlns:wp\",\n      w10: \"xmlns:w10\",\n      w: \"xmlns:w\",\n      w14: \"xmlns:w14\",\n      w15: \"xmlns:w15\",\n      wpg: \"xmlns:wpg\",\n      wpi: \"xmlns:wpi\",\n      wne: \"xmlns:wne\",\n      wps: \"xmlns:wps\",\n      Ignorable: \"mc:Ignorable\"\n    });\n  }\n}\nclass Settings extends XmlComponent {\n  constructor(options2) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    super(\"w:settings\");\n    this.root.push(\n      new SettingsAttributes({\n        wpc: \"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\",\n        mc: \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\n        o: \"urn:schemas-microsoft-com:office:office\",\n        r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\",\n        m: \"http://schemas.openxmlformats.org/officeDocument/2006/math\",\n        v: \"urn:schemas-microsoft-com:vml\",\n        wp14: \"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\",\n        wp: \"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\",\n        w10: \"urn:schemas-microsoft-com:office:word\",\n        w: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\n        w14: \"http://schemas.microsoft.com/office/word/2010/wordml\",\n        w15: \"http://schemas.microsoft.com/office/word/2012/wordml\",\n        wpg: \"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\",\n        wpi: \"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\",\n        wne: \"http://schemas.microsoft.com/office/word/2006/wordml\",\n        wps: \"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\",\n        Ignorable: \"w14 w15 wp14\"\n      })\n    );\n    this.root.push(new OnOffElement(\"w:displayBackgroundShape\", true));\n    if (options2.trackRevisions !== void 0) {\n      this.root.push(new OnOffElement(\"w:trackRevisions\", options2.trackRevisions));\n    }\n    if (options2.evenAndOddHeaders !== void 0) {\n      this.root.push(new OnOffElement(\"w:evenAndOddHeaders\", options2.evenAndOddHeaders));\n    }\n    if (options2.updateFields !== void 0) {\n      this.root.push(new OnOffElement(\"w:updateFields\", options2.updateFields));\n    }\n    if (options2.defaultTabStop !== void 0) {\n      this.root.push(new NumberValueElement(\"w:defaultTabStop\", options2.defaultTabStop));\n    }\n    if (((_a = options2.hyphenation) == null ? void 0 : _a.autoHyphenation) !== void 0) {\n      this.root.push(new OnOffElement(\"w:autoHyphenation\", options2.hyphenation.autoHyphenation));\n    }\n    if (((_b = options2.hyphenation) == null ? void 0 : _b.hyphenationZone) !== void 0) {\n      this.root.push(new NumberValueElement(\"w:hyphenationZone\", options2.hyphenation.hyphenationZone));\n    }\n    if (((_c = options2.hyphenation) == null ? void 0 : _c.consecutiveHyphenLimit) !== void 0) {\n      this.root.push(new NumberValueElement(\"w:consecutiveHyphenLimit\", options2.hyphenation.consecutiveHyphenLimit));\n    }\n    if (((_d = options2.hyphenation) == null ? void 0 : _d.doNotHyphenateCaps) !== void 0) {\n      this.root.push(new OnOffElement(\"w:doNotHyphenateCaps\", options2.hyphenation.doNotHyphenateCaps));\n    }\n    this.root.push(\n      new Compatibility(__spreadProps(__spreadValues({}, (_e = options2.compatibility) != null ? _e : {}), {\n        version: (_h = (_g = (_f = options2.compatibility) == null ? void 0 : _f.version) != null ? _g : options2.compatibilityModeVersion) != null ? _h : 15\n      }))\n    );\n  }\n}\nclass ComponentAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", { val: \"w:val\" });\n  }\n}\nclass Name extends XmlComponent {\n  constructor(value) {\n    super(\"w:name\");\n    this.root.push(new ComponentAttributes({ val: value }));\n  }\n}\nclass UiPriority extends XmlComponent {\n  constructor(value) {\n    super(\"w:uiPriority\");\n    this.root.push(new ComponentAttributes({ val: decimalNumber(value) }));\n  }\n}\nclass StyleAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      type: \"w:type\",\n      styleId: \"w:styleId\",\n      default: \"w:default\",\n      customStyle: \"w:customStyle\"\n    });\n  }\n}\nclass Style2 extends XmlComponent {\n  constructor(attributes, options2) {\n    super(\"w:style\");\n    this.root.push(new StyleAttributes(attributes));\n    if (options2.name) {\n      this.root.push(new Name(options2.name));\n    }\n    if (options2.basedOn) {\n      this.root.push(new StringValueElement(\"w:basedOn\", options2.basedOn));\n    }\n    if (options2.next) {\n      this.root.push(new StringValueElement(\"w:next\", options2.next));\n    }\n    if (options2.link) {\n      this.root.push(new StringValueElement(\"w:link\", options2.link));\n    }\n    if (options2.uiPriority !== void 0) {\n      this.root.push(new UiPriority(options2.uiPriority));\n    }\n    if (options2.semiHidden !== void 0) {\n      this.root.push(new OnOffElement(\"w:semiHidden\", options2.semiHidden));\n    }\n    if (options2.unhideWhenUsed !== void 0) {\n      this.root.push(new OnOffElement(\"w:unhideWhenUsed\", options2.unhideWhenUsed));\n    }\n    if (options2.quickFormat !== void 0) {\n      this.root.push(new OnOffElement(\"w:qFormat\", options2.quickFormat));\n    }\n  }\n}\nclass StyleForParagraph extends Style2 {\n  constructor(options2) {\n    super({ type: \"paragraph\", styleId: options2.id }, options2);\n    __publicField(this, \"paragraphProperties\");\n    __publicField(this, \"runProperties\");\n    this.paragraphProperties = new ParagraphProperties(options2.paragraph);\n    this.runProperties = new RunProperties(options2.run);\n    this.root.push(this.paragraphProperties);\n    this.root.push(this.runProperties);\n  }\n}\nclass StyleForCharacter extends Style2 {\n  constructor(options2) {\n    super(\n      { type: \"character\", styleId: options2.id },\n      __spreadValues({\n        uiPriority: 99,\n        unhideWhenUsed: true\n      }, options2)\n    );\n    __publicField(this, \"runProperties\");\n    this.runProperties = new RunProperties(options2.run);\n    this.root.push(this.runProperties);\n  }\n}\nclass HeadingStyle extends StyleForParagraph {\n  constructor(options2) {\n    super(__spreadValues({\n      basedOn: \"Normal\",\n      next: \"Normal\",\n      quickFormat: true\n    }, options2));\n  }\n}\nclass TitleStyle extends HeadingStyle {\n  constructor(options2) {\n    super(__spreadValues({\n      id: \"Title\",\n      name: \"Title\"\n    }, options2));\n  }\n}\nclass Heading1Style extends HeadingStyle {\n  constructor(options2) {\n    super(__spreadValues({\n      id: \"Heading1\",\n      name: \"Heading 1\"\n    }, options2));\n  }\n}\nclass Heading2Style extends HeadingStyle {\n  constructor(options2) {\n    super(__spreadValues({\n      id: \"Heading2\",\n      name: \"Heading 2\"\n    }, options2));\n  }\n}\nclass Heading3Style extends HeadingStyle {\n  constructor(options2) {\n    super(__spreadValues({\n      id: \"Heading3\",\n      name: \"Heading 3\"\n    }, options2));\n  }\n}\nclass Heading4Style extends HeadingStyle {\n  constructor(options2) {\n    super(__spreadValues({\n      id: \"Heading4\",\n      name: \"Heading 4\"\n    }, options2));\n  }\n}\nclass Heading5Style extends HeadingStyle {\n  constructor(options2) {\n    super(__spreadValues({\n      id: \"Heading5\",\n      name: \"Heading 5\"\n    }, options2));\n  }\n}\nclass Heading6Style extends HeadingStyle {\n  constructor(options2) {\n    super(__spreadValues({\n      id: \"Heading6\",\n      name: \"Heading 6\"\n    }, options2));\n  }\n}\nclass StrongStyle extends HeadingStyle {\n  constructor(options2) {\n    super(__spreadValues({\n      id: \"Strong\",\n      name: \"Strong\"\n    }, options2));\n  }\n}\nclass ListParagraph extends StyleForParagraph {\n  constructor(options2) {\n    super(__spreadValues({\n      id: \"ListParagraph\",\n      name: \"List Paragraph\",\n      basedOn: \"Normal\",\n      quickFormat: true\n    }, options2));\n  }\n}\nclass FootnoteText extends StyleForParagraph {\n  constructor(options2) {\n    super(__spreadValues({\n      id: \"FootnoteText\",\n      name: \"footnote text\",\n      link: \"FootnoteTextChar\",\n      basedOn: \"Normal\",\n      uiPriority: 99,\n      semiHidden: true,\n      unhideWhenUsed: true,\n      paragraph: {\n        spacing: {\n          after: 0,\n          line: 240,\n          lineRule: LineRuleType.AUTO\n        }\n      },\n      run: {\n        size: 20\n      }\n    }, options2));\n  }\n}\nclass FootnoteReferenceStyle extends StyleForCharacter {\n  constructor(options2) {\n    super(__spreadValues({\n      id: \"FootnoteReference\",\n      name: \"footnote reference\",\n      basedOn: \"DefaultParagraphFont\",\n      semiHidden: true,\n      run: {\n        superScript: true\n      }\n    }, options2));\n  }\n}\nclass FootnoteTextChar extends StyleForCharacter {\n  constructor(options2) {\n    super(__spreadValues({\n      id: \"FootnoteTextChar\",\n      name: \"Footnote Text Char\",\n      basedOn: \"DefaultParagraphFont\",\n      link: \"FootnoteText\",\n      semiHidden: true,\n      run: {\n        size: 20\n      }\n    }, options2));\n  }\n}\nclass HyperlinkStyle extends StyleForCharacter {\n  constructor(options2) {\n    super(__spreadValues({\n      id: \"Hyperlink\",\n      name: \"Hyperlink\",\n      basedOn: \"DefaultParagraphFont\",\n      run: {\n        color: \"0563C1\",\n        underline: {\n          type: UnderlineType.SINGLE\n        }\n      }\n    }, options2));\n  }\n}\nclass Styles extends XmlComponent {\n  constructor(options2) {\n    super(\"w:styles\");\n    if (options2.initialStyles) {\n      this.root.push(options2.initialStyles);\n    }\n    if (options2.importedStyles) {\n      for (const style of options2.importedStyles) {\n        this.root.push(style);\n      }\n    }\n    if (options2.paragraphStyles) {\n      for (const style of options2.paragraphStyles) {\n        this.root.push(new StyleForParagraph(style));\n      }\n    }\n    if (options2.characterStyles) {\n      for (const style of options2.characterStyles) {\n        this.root.push(new StyleForCharacter(style));\n      }\n    }\n  }\n}\nclass ParagraphPropertiesDefaults extends XmlComponent {\n  constructor(options2) {\n    super(\"w:pPrDefault\");\n    this.root.push(new ParagraphProperties(options2));\n  }\n}\nclass RunPropertiesDefaults extends XmlComponent {\n  constructor(options2) {\n    super(\"w:rPrDefault\");\n    this.root.push(new RunProperties(options2));\n  }\n}\nclass DocumentDefaults extends XmlComponent {\n  constructor(options2) {\n    super(\"w:docDefaults\");\n    __publicField(this, \"runPropertiesDefaults\");\n    __publicField(this, \"paragraphPropertiesDefaults\");\n    this.runPropertiesDefaults = new RunPropertiesDefaults(options2.run);\n    this.paragraphPropertiesDefaults = new ParagraphPropertiesDefaults(options2.paragraph);\n    this.root.push(this.runPropertiesDefaults);\n    this.root.push(this.paragraphPropertiesDefaults);\n  }\n}\nclass ExternalStylesFactory {\n  /**\n   * Creates new Style based on the given styles.\n   * Parses the styles and convert them to XmlComponent.\n   * Example content from styles.xml:\n   * <?xml version=\"1.0\">\n   * <w:styles xmlns:mc=\"some schema\" ...>\n   *\n   *   <w:style w:type=\"paragraph\" w:styleId=\"Heading1\">\n   *           <w:name w:val=\"heading 1\"/>\n   *           .....\n   *   </w:style>\n   *\n   *   <w:style w:type=\"paragraph\" w:styleId=\"Heading2\">\n   *           <w:name w:val=\"heading 2\"/>\n   *           .....\n   *   </w:style>\n   *\n   *   <w:docDefaults>Or any other element will be parsed to</w:docDefaults>\n   *\n   * </w:styles>\n   *\n   * @param externalStyles context from styles.xml\n   */\n  newInstance(xmlData) {\n    const xmlObj = lib.xml2js(xmlData, { compact: false });\n    let stylesXmlElement;\n    for (const xmlElm of xmlObj.elements || []) {\n      if (xmlElm.name === \"w:styles\") {\n        stylesXmlElement = xmlElm;\n      }\n    }\n    if (stylesXmlElement === void 0) {\n      throw new Error(\"can not find styles element\");\n    }\n    const stylesElements = stylesXmlElement.elements || [];\n    const importedStyle = new Styles({\n      initialStyles: new ImportedRootElementAttributes(stylesXmlElement.attributes),\n      importedStyles: stylesElements.map((childElm) => convertToXmlComponent(childElm))\n    });\n    return importedStyle;\n  }\n}\nclass DefaultStylesFactory {\n  newInstance(options2 = {}) {\n    var _a;\n    const documentAttributes = new DocumentAttributes({\n      mc: \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\n      r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\",\n      w: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\n      w14: \"http://schemas.microsoft.com/office/word/2010/wordml\",\n      w15: \"http://schemas.microsoft.com/office/word/2012/wordml\",\n      Ignorable: \"w14 w15\"\n    });\n    return {\n      initialStyles: documentAttributes,\n      importedStyles: [\n        new DocumentDefaults((_a = options2.document) != null ? _a : {}),\n        new TitleStyle(__spreadValues({\n          run: {\n            size: 56\n          }\n        }, options2.title)),\n        new Heading1Style(__spreadValues({\n          run: {\n            color: \"2E74B5\",\n            size: 32\n          }\n        }, options2.heading1)),\n        new Heading2Style(__spreadValues({\n          run: {\n            color: \"2E74B5\",\n            size: 26\n          }\n        }, options2.heading2)),\n        new Heading3Style(__spreadValues({\n          run: {\n            color: \"1F4D78\",\n            size: 24\n          }\n        }, options2.heading3)),\n        new Heading4Style(__spreadValues({\n          run: {\n            color: \"2E74B5\",\n            italics: true\n          }\n        }, options2.heading4)),\n        new Heading5Style(__spreadValues({\n          run: {\n            color: \"2E74B5\"\n          }\n        }, options2.heading5)),\n        new Heading6Style(__spreadValues({\n          run: {\n            color: \"1F4D78\"\n          }\n        }, options2.heading6)),\n        new StrongStyle(__spreadValues({\n          run: {\n            bold: true\n          }\n        }, options2.strong)),\n        new ListParagraph(options2.listParagraph || {}),\n        new HyperlinkStyle(options2.hyperlink || {}),\n        new FootnoteReferenceStyle(options2.footnoteReference || {}),\n        new FootnoteText(options2.footnoteText || {}),\n        new FootnoteTextChar(options2.footnoteTextChar || {})\n      ]\n    };\n  }\n}\nclass File {\n  constructor(options2) {\n    // eslint-disable-next-line functional/prefer-readonly-type\n    __publicField(this, \"currentRelationshipId\", 1);\n    __publicField(this, \"documentWrapper\");\n    // eslint-disable-next-line functional/prefer-readonly-type\n    __publicField(this, \"headers\", []);\n    // eslint-disable-next-line functional/prefer-readonly-type\n    __publicField(this, \"footers\", []);\n    __publicField(this, \"coreProperties\");\n    __publicField(this, \"numbering\");\n    __publicField(this, \"media\");\n    __publicField(this, \"fileRelationships\");\n    __publicField(this, \"footnotesWrapper\");\n    __publicField(this, \"settings\");\n    __publicField(this, \"contentTypes\");\n    __publicField(this, \"customProperties\");\n    __publicField(this, \"appProperties\");\n    __publicField(this, \"styles\");\n    __publicField(this, \"comments\");\n    __publicField(this, \"fontWrapper\");\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;\n    this.coreProperties = new CoreProperties(__spreadProps(__spreadValues({}, options2), {\n      creator: (_a = options2.creator) != null ? _a : \"Un-named\",\n      revision: (_b = options2.revision) != null ? _b : 1,\n      lastModifiedBy: (_c = options2.lastModifiedBy) != null ? _c : \"Un-named\"\n    }));\n    this.numbering = new Numbering(options2.numbering ? options2.numbering : { config: [] });\n    this.comments = new Comments((_d = options2.comments) != null ? _d : { children: [] });\n    this.fileRelationships = new Relationships();\n    this.customProperties = new CustomProperties((_e = options2.customProperties) != null ? _e : []);\n    this.appProperties = new AppProperties();\n    this.footnotesWrapper = new FootnotesWrapper();\n    this.contentTypes = new ContentTypes();\n    this.documentWrapper = new DocumentWrapper({ background: options2.background });\n    this.settings = new Settings({\n      compatibilityModeVersion: options2.compatabilityModeVersion,\n      compatibility: options2.compatibility,\n      evenAndOddHeaders: options2.evenAndOddHeaderAndFooters ? true : false,\n      trackRevisions: (_f = options2.features) == null ? void 0 : _f.trackRevisions,\n      updateFields: (_g = options2.features) == null ? void 0 : _g.updateFields,\n      defaultTabStop: options2.defaultTabStop,\n      hyphenation: {\n        autoHyphenation: (_h = options2.hyphenation) == null ? void 0 : _h.autoHyphenation,\n        hyphenationZone: (_i = options2.hyphenation) == null ? void 0 : _i.hyphenationZone,\n        consecutiveHyphenLimit: (_j = options2.hyphenation) == null ? void 0 : _j.consecutiveHyphenLimit,\n        doNotHyphenateCaps: (_k = options2.hyphenation) == null ? void 0 : _k.doNotHyphenateCaps\n      }\n    });\n    this.media = new Media();\n    if (options2.externalStyles !== void 0) {\n      const stylesFactory = new ExternalStylesFactory();\n      this.styles = stylesFactory.newInstance(options2.externalStyles);\n    } else if (options2.styles) {\n      const stylesFactory = new DefaultStylesFactory();\n      const defaultStyles = stylesFactory.newInstance(options2.styles.default);\n      this.styles = new Styles(__spreadValues(__spreadValues({}, defaultStyles), options2.styles));\n    } else {\n      const stylesFactory = new DefaultStylesFactory();\n      this.styles = new Styles(stylesFactory.newInstance());\n    }\n    this.addDefaultRelationships();\n    for (const section of options2.sections) {\n      this.addSection(section);\n    }\n    if (options2.footnotes) {\n      for (const key in options2.footnotes) {\n        this.footnotesWrapper.View.createFootNote(parseFloat(key), options2.footnotes[key].children);\n      }\n    }\n    this.fontWrapper = new FontWrapper((_l = options2.fonts) != null ? _l : []);\n  }\n  addSection({ headers = {}, footers = {}, children, properties }) {\n    this.documentWrapper.View.Body.addSection(__spreadProps(__spreadValues({}, properties), {\n      headerWrapperGroup: {\n        default: headers.default ? this.createHeader(headers.default) : void 0,\n        first: headers.first ? this.createHeader(headers.first) : void 0,\n        even: headers.even ? this.createHeader(headers.even) : void 0\n      },\n      footerWrapperGroup: {\n        default: footers.default ? this.createFooter(footers.default) : void 0,\n        first: footers.first ? this.createFooter(footers.first) : void 0,\n        even: footers.even ? this.createFooter(footers.even) : void 0\n      }\n    }));\n    for (const child of children) {\n      this.documentWrapper.View.add(child);\n    }\n  }\n  createHeader(header) {\n    const wrapper = new HeaderWrapper(this.media, this.currentRelationshipId++);\n    for (const child of header.options.children) {\n      wrapper.add(child);\n    }\n    this.addHeaderToDocument(wrapper);\n    return wrapper;\n  }\n  createFooter(footer) {\n    const wrapper = new FooterWrapper(this.media, this.currentRelationshipId++);\n    for (const child of footer.options.children) {\n      wrapper.add(child);\n    }\n    this.addFooterToDocument(wrapper);\n    return wrapper;\n  }\n  addHeaderToDocument(header, type2 = HeaderFooterReferenceType.DEFAULT) {\n    this.headers.push({ header, type: type2 });\n    this.documentWrapper.Relationships.createRelationship(\n      header.View.ReferenceId,\n      \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header\",\n      `header${this.headers.length}.xml`\n    );\n    this.contentTypes.addHeader(this.headers.length);\n  }\n  addFooterToDocument(footer, type2 = HeaderFooterReferenceType.DEFAULT) {\n    this.footers.push({ footer, type: type2 });\n    this.documentWrapper.Relationships.createRelationship(\n      footer.View.ReferenceId,\n      \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer\",\n      `footer${this.footers.length}.xml`\n    );\n    this.contentTypes.addFooter(this.footers.length);\n  }\n  addDefaultRelationships() {\n    this.fileRelationships.createRelationship(\n      1,\n      \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\n      \"word/document.xml\"\n    );\n    this.fileRelationships.createRelationship(\n      2,\n      \"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\",\n      \"docProps/core.xml\"\n    );\n    this.fileRelationships.createRelationship(\n      3,\n      \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\",\n      \"docProps/app.xml\"\n    );\n    this.fileRelationships.createRelationship(\n      4,\n      \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties\",\n      \"docProps/custom.xml\"\n    );\n    this.documentWrapper.Relationships.createRelationship(\n      // eslint-disable-next-line functional/immutable-data\n      this.currentRelationshipId++,\n      \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\n      \"styles.xml\"\n    );\n    this.documentWrapper.Relationships.createRelationship(\n      // eslint-disable-next-line functional/immutable-data\n      this.currentRelationshipId++,\n      \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\n      \"numbering.xml\"\n    );\n    this.documentWrapper.Relationships.createRelationship(\n      // eslint-disable-next-line functional/immutable-data\n      this.currentRelationshipId++,\n      \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footnotes\",\n      \"footnotes.xml\"\n    );\n    this.documentWrapper.Relationships.createRelationship(\n      // eslint-disable-next-line functional/immutable-data\n      this.currentRelationshipId++,\n      \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\n      \"settings.xml\"\n    );\n    this.documentWrapper.Relationships.createRelationship(\n      // eslint-disable-next-line functional/immutable-data\n      this.currentRelationshipId++,\n      \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments\",\n      \"comments.xml\"\n    );\n  }\n  get Document() {\n    return this.documentWrapper;\n  }\n  get Styles() {\n    return this.styles;\n  }\n  get CoreProperties() {\n    return this.coreProperties;\n  }\n  get Numbering() {\n    return this.numbering;\n  }\n  get Media() {\n    return this.media;\n  }\n  get FileRelationships() {\n    return this.fileRelationships;\n  }\n  get Headers() {\n    return this.headers.map((item) => item.header);\n  }\n  get Footers() {\n    return this.footers.map((item) => item.footer);\n  }\n  get ContentTypes() {\n    return this.contentTypes;\n  }\n  get CustomProperties() {\n    return this.customProperties;\n  }\n  get AppProperties() {\n    return this.appProperties;\n  }\n  get FootNotes() {\n    return this.footnotesWrapper;\n  }\n  get Settings() {\n    return this.settings;\n  }\n  get Comments() {\n    return this.comments;\n  }\n  get FontTable() {\n    return this.fontWrapper;\n  }\n}\nclass FieldInstruction extends XmlComponent {\n  constructor(properties = {}) {\n    super(\"w:instrText\");\n    __publicField(this, \"properties\");\n    this.properties = properties;\n    this.root.push(new TextAttributes({ space: SpaceType.PRESERVE }));\n    let instruction = \"TOC\";\n    if (this.properties.captionLabel) {\n      instruction = `${instruction} \\\\a \"${this.properties.captionLabel}\"`;\n    }\n    if (this.properties.entriesFromBookmark) {\n      instruction = `${instruction} \\\\b \"${this.properties.entriesFromBookmark}\"`;\n    }\n    if (this.properties.captionLabelIncludingNumbers) {\n      instruction = `${instruction} \\\\c \"${this.properties.captionLabelIncludingNumbers}\"`;\n    }\n    if (this.properties.sequenceAndPageNumbersSeparator) {\n      instruction = `${instruction} \\\\d \"${this.properties.sequenceAndPageNumbersSeparator}\"`;\n    }\n    if (this.properties.tcFieldIdentifier) {\n      instruction = `${instruction} \\\\f \"${this.properties.tcFieldIdentifier}\"`;\n    }\n    if (this.properties.hyperlink) {\n      instruction = `${instruction} \\\\h`;\n    }\n    if (this.properties.tcFieldLevelRange) {\n      instruction = `${instruction} \\\\l \"${this.properties.tcFieldLevelRange}\"`;\n    }\n    if (this.properties.pageNumbersEntryLevelsRange) {\n      instruction = `${instruction} \\\\n \"${this.properties.pageNumbersEntryLevelsRange}\"`;\n    }\n    if (this.properties.headingStyleRange) {\n      instruction = `${instruction} \\\\o \"${this.properties.headingStyleRange}\"`;\n    }\n    if (this.properties.entryAndPageNumberSeparator) {\n      instruction = `${instruction} \\\\p \"${this.properties.entryAndPageNumberSeparator}\"`;\n    }\n    if (this.properties.seqFieldIdentifierForPrefix) {\n      instruction = `${instruction} \\\\s \"${this.properties.seqFieldIdentifierForPrefix}\"`;\n    }\n    if (this.properties.stylesWithLevels && this.properties.stylesWithLevels.length) {\n      const styles = this.properties.stylesWithLevels.map((sl) => `${sl.styleName},${sl.level}`).join(\",\");\n      instruction = `${instruction} \\\\t \"${styles}\"`;\n    }\n    if (this.properties.useAppliedParagraphOutlineLevel) {\n      instruction = `${instruction} \\\\u`;\n    }\n    if (this.properties.preserveTabInEntries) {\n      instruction = `${instruction} \\\\w`;\n    }\n    if (this.properties.preserveNewLineInEntries) {\n      instruction = `${instruction} \\\\x`;\n    }\n    if (this.properties.hideTabAndPageNumbersInWebView) {\n      instruction = `${instruction} \\\\z`;\n    }\n    this.root.push(instruction);\n  }\n}\nclass StructuredDocumentTagContent extends XmlComponent {\n  constructor() {\n    super(\"w:sdtContent\");\n  }\n}\nclass StructuredDocumentTagProperties extends XmlComponent {\n  constructor(alias) {\n    super(\"w:sdtPr\");\n    if (alias) {\n      this.root.push(new StringValueElement(\"w:alias\", alias));\n    }\n  }\n}\nclass TableOfContents extends FileChild {\n  constructor(alias = \"Table of Contents\", properties) {\n    super(\"w:sdt\");\n    this.root.push(new StructuredDocumentTagProperties(alias));\n    const content = new StructuredDocumentTagContent();\n    const beginParagraph = new Paragraph({\n      children: [\n        new Run({\n          children: [new Begin(true), new FieldInstruction(properties), new Separate()]\n        })\n      ]\n    });\n    content.addChildElement(beginParagraph);\n    const endParagraph = new Paragraph({\n      children: [\n        new Run({\n          children: [new End()]\n        })\n      ]\n    });\n    content.addChildElement(endParagraph);\n    this.root.push(content);\n  }\n}\nclass StyleLevel {\n  constructor(styleName, level) {\n    __publicField(this, \"styleName\");\n    __publicField(this, \"level\");\n    this.styleName = styleName;\n    this.level = level;\n  }\n}\nclass Header2 {\n  constructor(options2 = { children: [] }) {\n    __publicField(this, \"options\");\n    this.options = options2;\n  }\n}\nclass Footer2 {\n  constructor(options2 = { children: [] }) {\n    __publicField(this, \"options\");\n    this.options = options2;\n  }\n}\nclass FootNoteReferenceRunAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      id: \"w:id\"\n    });\n  }\n}\nclass FootnoteReference extends XmlComponent {\n  constructor(id) {\n    super(\"w:footnoteReference\");\n    this.root.push(\n      new FootNoteReferenceRunAttributes({\n        id\n      })\n    );\n  }\n}\nclass FootnoteReferenceRun extends Run {\n  constructor(id) {\n    super({ style: \"FootnoteReference\" });\n    this.root.push(new FootnoteReference(id));\n  }\n}\nclass InsertedTextRun extends XmlComponent {\n  constructor(options2) {\n    super(\"w:ins\");\n    this.root.push(\n      new ChangeAttributes({\n        id: options2.id,\n        author: options2.author,\n        date: options2.date\n      })\n    );\n    this.addChildElement(new TextRun(options2));\n  }\n}\nclass DeletedPage extends XmlComponent {\n  constructor() {\n    super(\"w:delInstrText\");\n    this.root.push(new TextAttributes({ space: SpaceType.PRESERVE }));\n    this.root.push(\"PAGE\");\n  }\n}\nclass DeletedNumberOfPages extends XmlComponent {\n  constructor() {\n    super(\"w:delInstrText\");\n    this.root.push(new TextAttributes({ space: SpaceType.PRESERVE }));\n    this.root.push(\"NUMPAGES\");\n  }\n}\nclass DeletedNumberOfPagesSection extends XmlComponent {\n  constructor() {\n    super(\"w:delInstrText\");\n    this.root.push(new TextAttributes({ space: SpaceType.PRESERVE }));\n    this.root.push(\"SECTIONPAGES\");\n  }\n}\nclass DeletedText extends XmlComponent {\n  constructor(text) {\n    super(\"w:delText\");\n    this.root.push(new TextAttributes({ space: SpaceType.PRESERVE }));\n    this.root.push(text);\n  }\n}\nclass DeletedTextRun extends XmlComponent {\n  constructor(options2) {\n    super(\"w:del\");\n    __publicField(this, \"deletedTextRunWrapper\");\n    this.root.push(\n      new ChangeAttributes({\n        id: options2.id,\n        author: options2.author,\n        date: options2.date\n      })\n    );\n    this.deletedTextRunWrapper = new DeletedTextRunWrapper(options2);\n    this.addChildElement(this.deletedTextRunWrapper);\n  }\n}\nclass DeletedTextRunWrapper extends XmlComponent {\n  constructor(options2) {\n    super(\"w:r\");\n    this.root.push(new RunProperties(options2));\n    if (options2.children) {\n      for (const child of options2.children) {\n        if (typeof child === \"string\") {\n          switch (child) {\n            case PageNumber.CURRENT:\n              this.root.push(new Begin());\n              this.root.push(new DeletedPage());\n              this.root.push(new Separate());\n              this.root.push(new End());\n              break;\n            case PageNumber.TOTAL_PAGES:\n              this.root.push(new Begin());\n              this.root.push(new DeletedNumberOfPages());\n              this.root.push(new Separate());\n              this.root.push(new End());\n              break;\n            case PageNumber.TOTAL_PAGES_IN_SECTION:\n              this.root.push(new Begin());\n              this.root.push(new DeletedNumberOfPagesSection());\n              this.root.push(new Separate());\n              this.root.push(new End());\n              break;\n            default:\n              this.root.push(new DeletedText(child));\n              break;\n          }\n          continue;\n        }\n        this.root.push(child);\n      }\n    } else if (options2.text) {\n      this.root.push(new DeletedText(options2.text));\n    }\n    if (options2.break) {\n      for (let i = 0; i < options2.break; i++) {\n        this.root.splice(1, 0, new Break$1());\n      }\n    }\n  }\n}\nclass CheckboxSymbolAttributes extends XmlAttributeComponent {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"xmlKeys\", {\n      val: \"w14:val\",\n      symbolfont: \"w14:font\"\n    });\n  }\n}\nclass CheckBoxSymbolElement extends XmlComponent {\n  constructor(name, val, font) {\n    super(name);\n    if (font) {\n      this.root.push(new CheckboxSymbolAttributes({ val: shortHexNumber(val), symbolfont: font }));\n    } else {\n      this.root.push(new CheckboxSymbolAttributes({ val }));\n    }\n  }\n}\nclass CheckBoxUtil extends XmlComponent {\n  constructor(options2) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    super(\"w14:checkbox\");\n    __publicField(this, \"DEFAULT_UNCHECKED_SYMBOL\", \"2610\");\n    __publicField(this, \"DEFAULT_CHECKED_SYMBOL\", \"2612\");\n    __publicField(this, \"DEFAULT_FONT\", \"MS Gothic\");\n    const value = (options2 == null ? void 0 : options2.checked) ? \"1\" : \"0\";\n    let symbol;\n    let font;\n    this.root.push(new CheckBoxSymbolElement(\"w14:checked\", value));\n    symbol = ((_a = options2 == null ? void 0 : options2.checkedState) == null ? void 0 : _a.value) ? (_b = options2 == null ? void 0 : options2.checkedState) == null ? void 0 : _b.value : this.DEFAULT_CHECKED_SYMBOL;\n    font = ((_c = options2 == null ? void 0 : options2.checkedState) == null ? void 0 : _c.font) ? (_d = options2 == null ? void 0 : options2.checkedState) == null ? void 0 : _d.font : this.DEFAULT_FONT;\n    this.root.push(new CheckBoxSymbolElement(\"w14:checkedState\", symbol, font));\n    symbol = ((_e = options2 == null ? void 0 : options2.uncheckedState) == null ? void 0 : _e.value) ? (_f = options2 == null ? void 0 : options2.uncheckedState) == null ? void 0 : _f.value : this.DEFAULT_UNCHECKED_SYMBOL;\n    font = ((_g = options2 == null ? void 0 : options2.uncheckedState) == null ? void 0 : _g.font) ? (_h = options2 == null ? void 0 : options2.uncheckedState) == null ? void 0 : _h.font : this.DEFAULT_FONT;\n    this.root.push(new CheckBoxSymbolElement(\"w14:uncheckedState\", symbol, font));\n  }\n}\nclass CheckBox extends XmlComponent {\n  constructor(options2) {\n    var _a, _b, _c, _d;\n    super(\"w:sdt\");\n    // default values per Microsoft\n    __publicField(this, \"DEFAULT_UNCHECKED_SYMBOL\", \"2610\");\n    __publicField(this, \"DEFAULT_CHECKED_SYMBOL\", \"2612\");\n    __publicField(this, \"DEFAULT_FONT\", \"MS Gothic\");\n    const properties = new StructuredDocumentTagProperties(options2 == null ? void 0 : options2.alias);\n    properties.addChildElement(new CheckBoxUtil(options2));\n    this.root.push(properties);\n    const content = new StructuredDocumentTagContent();\n    const checkedFont = (_a = options2 == null ? void 0 : options2.checkedState) == null ? void 0 : _a.font;\n    const checkedText = (_b = options2 == null ? void 0 : options2.checkedState) == null ? void 0 : _b.value;\n    const uncheckedFont = (_c = options2 == null ? void 0 : options2.uncheckedState) == null ? void 0 : _c.font;\n    const uncheckedText = (_d = options2 == null ? void 0 : options2.uncheckedState) == null ? void 0 : _d.value;\n    let symbolFont;\n    let char;\n    if (options2 == null ? void 0 : options2.checked) {\n      symbolFont = checkedFont ? checkedFont : this.DEFAULT_FONT;\n      char = checkedText ? checkedText : this.DEFAULT_CHECKED_SYMBOL;\n    } else {\n      symbolFont = uncheckedFont ? uncheckedFont : this.DEFAULT_FONT;\n      char = uncheckedText ? uncheckedText : this.DEFAULT_UNCHECKED_SYMBOL;\n    }\n    const initialRenderedChar = new SymbolRun({\n      char,\n      symbolfont: symbolFont\n    });\n    content.addChildElement(initialRenderedChar);\n    this.root.push(content);\n  }\n}\nconst createPictElement = ({ shape }) => new BuilderElement({\n  name: \"w:pict\",\n  children: [shape]\n});\nconst createTextboxContent = ({ children = [] }) => new BuilderElement({\n  name: \"w:txbxContent\",\n  children\n});\nconst createVmlTextbox = ({ style, children, inset }) => new BuilderElement({\n  name: \"v:textbox\",\n  attributes: {\n    style: {\n      key: \"style\",\n      value: style\n    },\n    insetMode: {\n      key: \"insetmode\",\n      value: inset ? \"custom\" : \"auto\"\n    },\n    inset: {\n      key: \"inset\",\n      value: inset ? `${inset.left}, ${inset.top}, ${inset.right}, ${inset.bottom}` : void 0\n    }\n  },\n  children: [createTextboxContent({ children })]\n});\nconst SHAPE_TYPE = \"#_x0000_t202\";\nconst styleToKeyMap = {\n  flip: \"flip\",\n  height: \"height\",\n  left: \"left\",\n  marginBottom: \"margin-bottom\",\n  marginLeft: \"margin-left\",\n  marginRight: \"margin-right\",\n  marginTop: \"margin-top\",\n  positionHorizontal: \"mso-position-horizontal\",\n  positionHorizontalRelative: \"mso-position-horizontal-relative\",\n  positionVertical: \"mso-position-vertical\",\n  positionVerticalRelative: \"mso-position-vertical-relative\",\n  wrapDistanceBottom: \"mso-wrap-distance-bottom\",\n  wrapDistanceLeft: \"mso-wrap-distance-left\",\n  wrapDistanceRight: \"mso-wrap-distance-right\",\n  wrapDistanceTop: \"mso-wrap-distance-top\",\n  wrapEdited: \"mso-wrap-edited\",\n  wrapStyle: \"mso-wrap-style\",\n  position: \"position\",\n  rotation: \"rotation\",\n  top: \"top\",\n  visibility: \"visibility\",\n  width: \"width\",\n  zIndex: \"z-index\"\n};\nconst formatShapeStyle = (style) => style ? Object.entries(style).map(([key, value]) => `${styleToKeyMap[key]}:${value}`).join(\";\") : void 0;\nconst createShape = ({\n  id,\n  children,\n  type: type2 = SHAPE_TYPE,\n  style\n}) => new BuilderElement({\n  name: \"v:shape\",\n  attributes: {\n    id: {\n      key: \"id\",\n      value: id\n    },\n    type: {\n      key: \"type\",\n      value: type2\n    },\n    style: {\n      key: \"style\",\n      value: formatShapeStyle(style)\n    }\n  },\n  children: [createVmlTextbox({ style: \"mso-fit-shape-to-text:t;\", children })]\n});\nclass Textbox extends FileChild {\n  constructor(_a) {\n    var _b = _a, { style, children } = _b, rest = __objRest(_b, [\"style\", \"children\"]);\n    super(\"w:p\");\n    this.root.push(new ParagraphProperties(rest));\n    this.root.push(\n      createPictElement({\n        shape: createShape({\n          children,\n          id: uniqueId(),\n          style\n        })\n      })\n    );\n  }\n}\nfunction commonjsRequire(path) {\n  throw new Error('Could not dynamically require \"' + path + '\". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');\n}\nvar jszip_min = { exports: {} };\n(function(module, exports) {\n  !function(e) {\n    module.exports = e();\n  }(function() {\n    return function s2(a, o, h) {\n      function u(r2, e2) {\n        if (!o[r2]) {\n          if (!a[r2]) {\n            var t = \"function\" == typeof commonjsRequire && commonjsRequire;\n            if (!e2 && t) return t(r2, true);\n            if (l) return l(r2, true);\n            var n = new Error(\"Cannot find module '\" + r2 + \"'\");\n            throw n.code = \"MODULE_NOT_FOUND\", n;\n          }\n          var i = o[r2] = { exports: {} };\n          a[r2][0].call(i.exports, function(e3) {\n            var t2 = a[r2][1][e3];\n            return u(t2 || e3);\n          }, i, i.exports, s2, a, o, h);\n        }\n        return o[r2].exports;\n      }\n      for (var l = \"function\" == typeof commonjsRequire && commonjsRequire, e = 0; e < h.length; e++) u(h[e]);\n      return u;\n    }({ 1: [function(e, t, r2) {\n      var d = e(\"./utils\"), c = e(\"./support\"), p = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n      r2.encode = function(e2) {\n        for (var t2, r3, n, i, s2, a, o, h = [], u = 0, l = e2.length, f2 = l, c2 = \"string\" !== d.getTypeOf(e2); u < e2.length; ) f2 = l - u, n = c2 ? (t2 = e2[u++], r3 = u < l ? e2[u++] : 0, u < l ? e2[u++] : 0) : (t2 = e2.charCodeAt(u++), r3 = u < l ? e2.charCodeAt(u++) : 0, u < l ? e2.charCodeAt(u++) : 0), i = t2 >> 2, s2 = (3 & t2) << 4 | r3 >> 4, a = 1 < f2 ? (15 & r3) << 2 | n >> 6 : 64, o = 2 < f2 ? 63 & n : 64, h.push(p.charAt(i) + p.charAt(s2) + p.charAt(a) + p.charAt(o));\n        return h.join(\"\");\n      }, r2.decode = function(e2) {\n        var t2, r3, n, i, s2, a, o = 0, h = 0, u = \"data:\";\n        if (e2.substr(0, u.length) === u) throw new Error(\"Invalid base64 input, it looks like a data url.\");\n        var l, f2 = 3 * (e2 = e2.replace(/[^A-Za-z0-9+/=]/g, \"\")).length / 4;\n        if (e2.charAt(e2.length - 1) === p.charAt(64) && f2--, e2.charAt(e2.length - 2) === p.charAt(64) && f2--, f2 % 1 != 0) throw new Error(\"Invalid base64 input, bad content length.\");\n        for (l = c.uint8array ? new Uint8Array(0 | f2) : new Array(0 | f2); o < e2.length; ) t2 = p.indexOf(e2.charAt(o++)) << 2 | (i = p.indexOf(e2.charAt(o++))) >> 4, r3 = (15 & i) << 4 | (s2 = p.indexOf(e2.charAt(o++))) >> 2, n = (3 & s2) << 6 | (a = p.indexOf(e2.charAt(o++))), l[h++] = t2, 64 !== s2 && (l[h++] = r3), 64 !== a && (l[h++] = n);\n        return l;\n      };\n    }, { \"./support\": 30, \"./utils\": 32 }], 2: [function(e, t, r2) {\n      var n = e(\"./external\"), i = e(\"./stream/DataWorker\"), s2 = e(\"./stream/Crc32Probe\"), a = e(\"./stream/DataLengthProbe\");\n      function o(e2, t2, r3, n2, i2) {\n        this.compressedSize = e2, this.uncompressedSize = t2, this.crc32 = r3, this.compression = n2, this.compressedContent = i2;\n      }\n      o.prototype = { getContentWorker: function() {\n        var e2 = new i(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a(\"data_length\")), t2 = this;\n        return e2.on(\"end\", function() {\n          if (this.streamInfo.data_length !== t2.uncompressedSize) throw new Error(\"Bug : uncompressed data size mismatch\");\n        }), e2;\n      }, getCompressedWorker: function() {\n        return new i(n.Promise.resolve(this.compressedContent)).withStreamInfo(\"compressedSize\", this.compressedSize).withStreamInfo(\"uncompressedSize\", this.uncompressedSize).withStreamInfo(\"crc32\", this.crc32).withStreamInfo(\"compression\", this.compression);\n      } }, o.createWorkerFrom = function(e2, t2, r3) {\n        return e2.pipe(new s2()).pipe(new a(\"uncompressedSize\")).pipe(t2.compressWorker(r3)).pipe(new a(\"compressedSize\")).withStreamInfo(\"compression\", t2);\n      }, t.exports = o;\n    }, { \"./external\": 6, \"./stream/Crc32Probe\": 25, \"./stream/DataLengthProbe\": 26, \"./stream/DataWorker\": 27 }], 3: [function(e, t, r2) {\n      var n = e(\"./stream/GenericWorker\");\n      r2.STORE = { magic: \"\\0\\0\", compressWorker: function() {\n        return new n(\"STORE compression\");\n      }, uncompressWorker: function() {\n        return new n(\"STORE decompression\");\n      } }, r2.DEFLATE = e(\"./flate\");\n    }, { \"./flate\": 7, \"./stream/GenericWorker\": 28 }], 4: [function(e, t, r2) {\n      var n = e(\"./utils\");\n      var o = function() {\n        for (var e2, t2 = [], r3 = 0; r3 < 256; r3++) {\n          e2 = r3;\n          for (var n2 = 0; n2 < 8; n2++) e2 = 1 & e2 ? 3988292384 ^ e2 >>> 1 : e2 >>> 1;\n          t2[r3] = e2;\n        }\n        return t2;\n      }();\n      t.exports = function(e2, t2) {\n        return void 0 !== e2 && e2.length ? \"string\" !== n.getTypeOf(e2) ? function(e3, t3, r3, n2) {\n          var i = o, s2 = n2 + r3;\n          e3 ^= -1;\n          for (var a = n2; a < s2; a++) e3 = e3 >>> 8 ^ i[255 & (e3 ^ t3[a])];\n          return -1 ^ e3;\n        }(0 | t2, e2, e2.length, 0) : function(e3, t3, r3, n2) {\n          var i = o, s2 = n2 + r3;\n          e3 ^= -1;\n          for (var a = n2; a < s2; a++) e3 = e3 >>> 8 ^ i[255 & (e3 ^ t3.charCodeAt(a))];\n          return -1 ^ e3;\n        }(0 | t2, e2, e2.length, 0) : 0;\n      };\n    }, { \"./utils\": 32 }], 5: [function(e, t, r2) {\n      r2.base64 = false, r2.binary = false, r2.dir = false, r2.createFolders = true, r2.date = null, r2.compression = null, r2.compressionOptions = null, r2.comment = null, r2.unixPermissions = null, r2.dosPermissions = null;\n    }, {}], 6: [function(e, t, r2) {\n      var n = null;\n      n = \"undefined\" != typeof Promise ? Promise : e(\"lie\"), t.exports = { Promise: n };\n    }, { lie: 37 }], 7: [function(e, t, r2) {\n      var n = \"undefined\" != typeof Uint8Array && \"undefined\" != typeof Uint16Array && \"undefined\" != typeof Uint32Array, i = e(\"pako\"), s2 = e(\"./utils\"), a = e(\"./stream/GenericWorker\"), o = n ? \"uint8array\" : \"array\";\n      function h(e2, t2) {\n        a.call(this, \"FlateWorker/\" + e2), this._pako = null, this._pakoAction = e2, this._pakoOptions = t2, this.meta = {};\n      }\n      r2.magic = \"\\b\\0\", s2.inherits(h, a), h.prototype.processChunk = function(e2) {\n        this.meta = e2.meta, null === this._pako && this._createPako(), this._pako.push(s2.transformTo(o, e2.data), false);\n      }, h.prototype.flush = function() {\n        a.prototype.flush.call(this), null === this._pako && this._createPako(), this._pako.push([], true);\n      }, h.prototype.cleanUp = function() {\n        a.prototype.cleanUp.call(this), this._pako = null;\n      }, h.prototype._createPako = function() {\n        this._pako = new i[this._pakoAction]({ raw: true, level: this._pakoOptions.level || -1 });\n        var t2 = this;\n        this._pako.onData = function(e2) {\n          t2.push({ data: e2, meta: t2.meta });\n        };\n      }, r2.compressWorker = function(e2) {\n        return new h(\"Deflate\", e2);\n      }, r2.uncompressWorker = function() {\n        return new h(\"Inflate\", {});\n      };\n    }, { \"./stream/GenericWorker\": 28, \"./utils\": 32, pako: 38 }], 8: [function(e, t, r2) {\n      function A(e2, t2) {\n        var r3, n2 = \"\";\n        for (r3 = 0; r3 < t2; r3++) n2 += String.fromCharCode(255 & e2), e2 >>>= 8;\n        return n2;\n      }\n      function n(e2, t2, r3, n2, i2, s3) {\n        var a, o, h = e2.file, u = e2.compression, l = s3 !== O.utf8encode, f2 = I.transformTo(\"string\", s3(h.name)), c = I.transformTo(\"string\", O.utf8encode(h.name)), d = h.comment, p = I.transformTo(\"string\", s3(d)), m = I.transformTo(\"string\", O.utf8encode(d)), _ = c.length !== h.name.length, g = m.length !== d.length, b = \"\", v = \"\", y = \"\", w = h.dir, k = h.date, x = { crc32: 0, compressedSize: 0, uncompressedSize: 0 };\n        t2 && !r3 || (x.crc32 = e2.crc32, x.compressedSize = e2.compressedSize, x.uncompressedSize = e2.uncompressedSize);\n        var S = 0;\n        t2 && (S |= 8), l || !_ && !g || (S |= 2048);\n        var z = 0, C = 0;\n        w && (z |= 16), \"UNIX\" === i2 ? (C = 798, z |= function(e3, t3) {\n          var r4 = e3;\n          return e3 || (r4 = t3 ? 16893 : 33204), (65535 & r4) << 16;\n        }(h.unixPermissions, w)) : (C = 20, z |= function(e3) {\n          return 63 & (e3 || 0);\n        }(h.dosPermissions)), a = k.getUTCHours(), a <<= 6, a |= k.getUTCMinutes(), a <<= 5, a |= k.getUTCSeconds() / 2, o = k.getUTCFullYear() - 1980, o <<= 4, o |= k.getUTCMonth() + 1, o <<= 5, o |= k.getUTCDate(), _ && (v = A(1, 1) + A(B(f2), 4) + c, b += \"up\" + A(v.length, 2) + v), g && (y = A(1, 1) + A(B(p), 4) + m, b += \"uc\" + A(y.length, 2) + y);\n        var E = \"\";\n        return E += \"\\n\\0\", E += A(S, 2), E += u.magic, E += A(a, 2), E += A(o, 2), E += A(x.crc32, 4), E += A(x.compressedSize, 4), E += A(x.uncompressedSize, 4), E += A(f2.length, 2), E += A(b.length, 2), { fileRecord: R2.LOCAL_FILE_HEADER + E + f2 + b, dirRecord: R2.CENTRAL_FILE_HEADER + A(C, 2) + E + A(p.length, 2) + \"\\0\\0\\0\\0\" + A(z, 4) + A(n2, 4) + f2 + b + p };\n      }\n      var I = e(\"../utils\"), i = e(\"../stream/GenericWorker\"), O = e(\"../utf8\"), B = e(\"../crc32\"), R2 = e(\"../signature\");\n      function s2(e2, t2, r3, n2) {\n        i.call(this, \"ZipFileWorker\"), this.bytesWritten = 0, this.zipComment = t2, this.zipPlatform = r3, this.encodeFileName = n2, this.streamFiles = e2, this.accumulate = false, this.contentBuffer = [], this.dirRecords = [], this.currentSourceOffset = 0, this.entriesCount = 0, this.currentFile = null, this._sources = [];\n      }\n      I.inherits(s2, i), s2.prototype.push = function(e2) {\n        var t2 = e2.meta.percent || 0, r3 = this.entriesCount, n2 = this._sources.length;\n        this.accumulate ? this.contentBuffer.push(e2) : (this.bytesWritten += e2.data.length, i.prototype.push.call(this, { data: e2.data, meta: { currentFile: this.currentFile, percent: r3 ? (t2 + 100 * (r3 - n2 - 1)) / r3 : 100 } }));\n      }, s2.prototype.openedSource = function(e2) {\n        this.currentSourceOffset = this.bytesWritten, this.currentFile = e2.file.name;\n        var t2 = this.streamFiles && !e2.file.dir;\n        if (t2) {\n          var r3 = n(e2, t2, false, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);\n          this.push({ data: r3.fileRecord, meta: { percent: 0 } });\n        } else this.accumulate = true;\n      }, s2.prototype.closedSource = function(e2) {\n        this.accumulate = false;\n        var t2 = this.streamFiles && !e2.file.dir, r3 = n(e2, t2, true, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);\n        if (this.dirRecords.push(r3.dirRecord), t2) this.push({ data: function(e3) {\n          return R2.DATA_DESCRIPTOR + A(e3.crc32, 4) + A(e3.compressedSize, 4) + A(e3.uncompressedSize, 4);\n        }(e2), meta: { percent: 100 } });\n        else for (this.push({ data: r3.fileRecord, meta: { percent: 0 } }); this.contentBuffer.length; ) this.push(this.contentBuffer.shift());\n        this.currentFile = null;\n      }, s2.prototype.flush = function() {\n        for (var e2 = this.bytesWritten, t2 = 0; t2 < this.dirRecords.length; t2++) this.push({ data: this.dirRecords[t2], meta: { percent: 100 } });\n        var r3 = this.bytesWritten - e2, n2 = function(e3, t3, r4, n3, i2) {\n          var s3 = I.transformTo(\"string\", i2(n3));\n          return R2.CENTRAL_DIRECTORY_END + \"\\0\\0\\0\\0\" + A(e3, 2) + A(e3, 2) + A(t3, 4) + A(r4, 4) + A(s3.length, 2) + s3;\n        }(this.dirRecords.length, r3, e2, this.zipComment, this.encodeFileName);\n        this.push({ data: n2, meta: { percent: 100 } });\n      }, s2.prototype.prepareNextSource = function() {\n        this.previous = this._sources.shift(), this.openedSource(this.previous.streamInfo), this.isPaused ? this.previous.pause() : this.previous.resume();\n      }, s2.prototype.registerPrevious = function(e2) {\n        this._sources.push(e2);\n        var t2 = this;\n        return e2.on(\"data\", function(e3) {\n          t2.processChunk(e3);\n        }), e2.on(\"end\", function() {\n          t2.closedSource(t2.previous.streamInfo), t2._sources.length ? t2.prepareNextSource() : t2.end();\n        }), e2.on(\"error\", function(e3) {\n          t2.error(e3);\n        }), this;\n      }, s2.prototype.resume = function() {\n        return !!i.prototype.resume.call(this) && (!this.previous && this._sources.length ? (this.prepareNextSource(), true) : this.previous || this._sources.length || this.generatedError ? void 0 : (this.end(), true));\n      }, s2.prototype.error = function(e2) {\n        var t2 = this._sources;\n        if (!i.prototype.error.call(this, e2)) return false;\n        for (var r3 = 0; r3 < t2.length; r3++) try {\n          t2[r3].error(e2);\n        } catch (e3) {\n        }\n        return true;\n      }, s2.prototype.lock = function() {\n        i.prototype.lock.call(this);\n        for (var e2 = this._sources, t2 = 0; t2 < e2.length; t2++) e2[t2].lock();\n      }, t.exports = s2;\n    }, { \"../crc32\": 4, \"../signature\": 23, \"../stream/GenericWorker\": 28, \"../utf8\": 31, \"../utils\": 32 }], 9: [function(e, t, r2) {\n      var u = e(\"../compressions\"), n = e(\"./ZipFileWorker\");\n      r2.generateWorker = function(e2, a, t2) {\n        var o = new n(a.streamFiles, t2, a.platform, a.encodeFileName), h = 0;\n        try {\n          e2.forEach(function(e3, t3) {\n            h++;\n            var r3 = function(e4, t4) {\n              var r4 = e4 || t4, n3 = u[r4];\n              if (!n3) throw new Error(r4 + \" is not a valid compression method !\");\n              return n3;\n            }(t3.options.compression, a.compression), n2 = t3.options.compressionOptions || a.compressionOptions || {}, i = t3.dir, s2 = t3.date;\n            t3._compressWorker(r3, n2).withStreamInfo(\"file\", { name: e3, dir: i, date: s2, comment: t3.comment || \"\", unixPermissions: t3.unixPermissions, dosPermissions: t3.dosPermissions }).pipe(o);\n          }), o.entriesCount = h;\n        } catch (e3) {\n          o.error(e3);\n        }\n        return o;\n      };\n    }, { \"../compressions\": 3, \"./ZipFileWorker\": 8 }], 10: [function(e, t, r2) {\n      function n() {\n        if (!(this instanceof n)) return new n();\n        if (arguments.length) throw new Error(\"The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.\");\n        this.files = /* @__PURE__ */ Object.create(null), this.comment = null, this.root = \"\", this.clone = function() {\n          var e2 = new n();\n          for (var t2 in this) \"function\" != typeof this[t2] && (e2[t2] = this[t2]);\n          return e2;\n        };\n      }\n      (n.prototype = e(\"./object\")).loadAsync = e(\"./load\"), n.support = e(\"./support\"), n.defaults = e(\"./defaults\"), n.version = \"3.10.1\", n.loadAsync = function(e2, t2) {\n        return new n().loadAsync(e2, t2);\n      }, n.external = e(\"./external\"), t.exports = n;\n    }, { \"./defaults\": 5, \"./external\": 6, \"./load\": 11, \"./object\": 15, \"./support\": 30 }], 11: [function(e, t, r2) {\n      var u = e(\"./utils\"), i = e(\"./external\"), n = e(\"./utf8\"), s2 = e(\"./zipEntries\"), a = e(\"./stream/Crc32Probe\"), l = e(\"./nodejsUtils\");\n      function f2(n2) {\n        return new i.Promise(function(e2, t2) {\n          var r3 = n2.decompressed.getContentWorker().pipe(new a());\n          r3.on(\"error\", function(e3) {\n            t2(e3);\n          }).on(\"end\", function() {\n            r3.streamInfo.crc32 !== n2.decompressed.crc32 ? t2(new Error(\"Corrupted zip : CRC32 mismatch\")) : e2();\n          }).resume();\n        });\n      }\n      t.exports = function(e2, o) {\n        var h = this;\n        return o = u.extend(o || {}, { base64: false, checkCRC32: false, optimizedBinaryString: false, createFolders: false, decodeFileName: n.utf8decode }), l.isNode && l.isStream(e2) ? i.Promise.reject(new Error(\"JSZip can't accept a stream when loading a zip file.\")) : u.prepareContent(\"the loaded zip file\", e2, true, o.optimizedBinaryString, o.base64).then(function(e3) {\n          var t2 = new s2(o);\n          return t2.load(e3), t2;\n        }).then(function(e3) {\n          var t2 = [i.Promise.resolve(e3)], r3 = e3.files;\n          if (o.checkCRC32) for (var n2 = 0; n2 < r3.length; n2++) t2.push(f2(r3[n2]));\n          return i.Promise.all(t2);\n        }).then(function(e3) {\n          for (var t2 = e3.shift(), r3 = t2.files, n2 = 0; n2 < r3.length; n2++) {\n            var i2 = r3[n2], s3 = i2.fileNameStr, a2 = u.resolve(i2.fileNameStr);\n            h.file(a2, i2.decompressed, { binary: true, optimizedBinaryString: true, date: i2.date, dir: i2.dir, comment: i2.fileCommentStr.length ? i2.fileCommentStr : null, unixPermissions: i2.unixPermissions, dosPermissions: i2.dosPermissions, createFolders: o.createFolders }), i2.dir || (h.file(a2).unsafeOriginalName = s3);\n          }\n          return t2.zipComment.length && (h.comment = t2.zipComment), h;\n        });\n      };\n    }, { \"./external\": 6, \"./nodejsUtils\": 14, \"./stream/Crc32Probe\": 25, \"./utf8\": 31, \"./utils\": 32, \"./zipEntries\": 33 }], 12: [function(e, t, r2) {\n      var n = e(\"../utils\"), i = e(\"../stream/GenericWorker\");\n      function s2(e2, t2) {\n        i.call(this, \"Nodejs stream input adapter for \" + e2), this._upstreamEnded = false, this._bindStream(t2);\n      }\n      n.inherits(s2, i), s2.prototype._bindStream = function(e2) {\n        var t2 = this;\n        (this._stream = e2).pause(), e2.on(\"data\", function(e3) {\n          t2.push({ data: e3, meta: { percent: 0 } });\n        }).on(\"error\", function(e3) {\n          t2.isPaused ? this.generatedError = e3 : t2.error(e3);\n        }).on(\"end\", function() {\n          t2.isPaused ? t2._upstreamEnded = true : t2.end();\n        });\n      }, s2.prototype.pause = function() {\n        return !!i.prototype.pause.call(this) && (this._stream.pause(), true);\n      }, s2.prototype.resume = function() {\n        return !!i.prototype.resume.call(this) && (this._upstreamEnded ? this.end() : this._stream.resume(), true);\n      }, t.exports = s2;\n    }, { \"../stream/GenericWorker\": 28, \"../utils\": 32 }], 13: [function(e, t, r2) {\n      var i = e(\"readable-stream\").Readable;\n      function n(e2, t2, r3) {\n        i.call(this, t2), this._helper = e2;\n        var n2 = this;\n        e2.on(\"data\", function(e3, t3) {\n          n2.push(e3) || n2._helper.pause(), r3 && r3(t3);\n        }).on(\"error\", function(e3) {\n          n2.emit(\"error\", e3);\n        }).on(\"end\", function() {\n          n2.push(null);\n        });\n      }\n      e(\"../utils\").inherits(n, i), n.prototype._read = function() {\n        this._helper.resume();\n      }, t.exports = n;\n    }, { \"../utils\": 32, \"readable-stream\": 16 }], 14: [function(e, t, r2) {\n      t.exports = { isNode: \"undefined\" != typeof Buffer, newBufferFrom: function(e2, t2) {\n        if (Buffer.from && Buffer.from !== Uint8Array.from) return Buffer.from(e2, t2);\n        if (\"number\" == typeof e2) throw new Error('The \"data\" argument must not be a number');\n        return new Buffer(e2, t2);\n      }, allocBuffer: function(e2) {\n        if (Buffer.alloc) return Buffer.alloc(e2);\n        var t2 = new Buffer(e2);\n        return t2.fill(0), t2;\n      }, isBuffer: function(e2) {\n        return Buffer.isBuffer(e2);\n      }, isStream: function(e2) {\n        return e2 && \"function\" == typeof e2.on && \"function\" == typeof e2.pause && \"function\" == typeof e2.resume;\n      } };\n    }, {}], 15: [function(e, t, r2) {\n      function s2(e2, t2, r3) {\n        var n2, i2 = u.getTypeOf(t2), s3 = u.extend(r3 || {}, f2);\n        s3.date = s3.date || /* @__PURE__ */ new Date(), null !== s3.compression && (s3.compression = s3.compression.toUpperCase()), \"string\" == typeof s3.unixPermissions && (s3.unixPermissions = parseInt(s3.unixPermissions, 8)), s3.unixPermissions && 16384 & s3.unixPermissions && (s3.dir = true), s3.dosPermissions && 16 & s3.dosPermissions && (s3.dir = true), s3.dir && (e2 = g(e2)), s3.createFolders && (n2 = _(e2)) && b.call(this, n2, true);\n        var a2 = \"string\" === i2 && false === s3.binary && false === s3.base64;\n        r3 && void 0 !== r3.binary || (s3.binary = !a2), (t2 instanceof c && 0 === t2.uncompressedSize || s3.dir || !t2 || 0 === t2.length) && (s3.base64 = false, s3.binary = true, t2 = \"\", s3.compression = \"STORE\", i2 = \"string\");\n        var o2 = null;\n        o2 = t2 instanceof c || t2 instanceof l ? t2 : p.isNode && p.isStream(t2) ? new m(e2, t2) : u.prepareContent(e2, t2, s3.binary, s3.optimizedBinaryString, s3.base64);\n        var h2 = new d(e2, o2, s3);\n        this.files[e2] = h2;\n      }\n      var i = e(\"./utf8\"), u = e(\"./utils\"), l = e(\"./stream/GenericWorker\"), a = e(\"./stream/StreamHelper\"), f2 = e(\"./defaults\"), c = e(\"./compressedObject\"), d = e(\"./zipObject\"), o = e(\"./generate\"), p = e(\"./nodejsUtils\"), m = e(\"./nodejs/NodejsStreamInputAdapter\"), _ = function(e2) {\n        \"/\" === e2.slice(-1) && (e2 = e2.substring(0, e2.length - 1));\n        var t2 = e2.lastIndexOf(\"/\");\n        return 0 < t2 ? e2.substring(0, t2) : \"\";\n      }, g = function(e2) {\n        return \"/\" !== e2.slice(-1) && (e2 += \"/\"), e2;\n      }, b = function(e2, t2) {\n        return t2 = void 0 !== t2 ? t2 : f2.createFolders, e2 = g(e2), this.files[e2] || s2.call(this, e2, null, { dir: true, createFolders: t2 }), this.files[e2];\n      };\n      function h(e2) {\n        return \"[object RegExp]\" === Object.prototype.toString.call(e2);\n      }\n      var n = { load: function() {\n        throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\");\n      }, forEach: function(e2) {\n        var t2, r3, n2;\n        for (t2 in this.files) n2 = this.files[t2], (r3 = t2.slice(this.root.length, t2.length)) && t2.slice(0, this.root.length) === this.root && e2(r3, n2);\n      }, filter: function(r3) {\n        var n2 = [];\n        return this.forEach(function(e2, t2) {\n          r3(e2, t2) && n2.push(t2);\n        }), n2;\n      }, file: function(e2, t2, r3) {\n        if (1 !== arguments.length) return e2 = this.root + e2, s2.call(this, e2, t2, r3), this;\n        if (h(e2)) {\n          var n2 = e2;\n          return this.filter(function(e3, t3) {\n            return !t3.dir && n2.test(e3);\n          });\n        }\n        var i2 = this.files[this.root + e2];\n        return i2 && !i2.dir ? i2 : null;\n      }, folder: function(r3) {\n        if (!r3) return this;\n        if (h(r3)) return this.filter(function(e3, t3) {\n          return t3.dir && r3.test(e3);\n        });\n        var e2 = this.root + r3, t2 = b.call(this, e2), n2 = this.clone();\n        return n2.root = t2.name, n2;\n      }, remove: function(r3) {\n        r3 = this.root + r3;\n        var e2 = this.files[r3];\n        if (e2 || (\"/\" !== r3.slice(-1) && (r3 += \"/\"), e2 = this.files[r3]), e2 && !e2.dir) delete this.files[r3];\n        else for (var t2 = this.filter(function(e3, t3) {\n          return t3.name.slice(0, r3.length) === r3;\n        }), n2 = 0; n2 < t2.length; n2++) delete this.files[t2[n2].name];\n        return this;\n      }, generate: function() {\n        throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\");\n      }, generateInternalStream: function(e2) {\n        var t2, r3 = {};\n        try {\n          if ((r3 = u.extend(e2 || {}, { streamFiles: false, compression: \"STORE\", compressionOptions: null, type: \"\", platform: \"DOS\", comment: null, mimeType: \"application/zip\", encodeFileName: i.utf8encode })).type = r3.type.toLowerCase(), r3.compression = r3.compression.toUpperCase(), \"binarystring\" === r3.type && (r3.type = \"string\"), !r3.type) throw new Error(\"No output type specified.\");\n          u.checkSupport(r3.type), \"darwin\" !== r3.platform && \"freebsd\" !== r3.platform && \"linux\" !== r3.platform && \"sunos\" !== r3.platform || (r3.platform = \"UNIX\"), \"win32\" === r3.platform && (r3.platform = \"DOS\");\n          var n2 = r3.comment || this.comment || \"\";\n          t2 = o.generateWorker(this, r3, n2);\n        } catch (e3) {\n          (t2 = new l(\"error\")).error(e3);\n        }\n        return new a(t2, r3.type || \"string\", r3.mimeType);\n      }, generateAsync: function(e2, t2) {\n        return this.generateInternalStream(e2).accumulate(t2);\n      }, generateNodeStream: function(e2, t2) {\n        return (e2 = e2 || {}).type || (e2.type = \"nodebuffer\"), this.generateInternalStream(e2).toNodejsStream(t2);\n      } };\n      t.exports = n;\n    }, { \"./compressedObject\": 2, \"./defaults\": 5, \"./generate\": 9, \"./nodejs/NodejsStreamInputAdapter\": 12, \"./nodejsUtils\": 14, \"./stream/GenericWorker\": 28, \"./stream/StreamHelper\": 29, \"./utf8\": 31, \"./utils\": 32, \"./zipObject\": 35 }], 16: [function(e, t, r2) {\n      t.exports = e(\"stream\");\n    }, { stream: void 0 }], 17: [function(e, t, r2) {\n      var n = e(\"./DataReader\");\n      function i(e2) {\n        n.call(this, e2);\n        for (var t2 = 0; t2 < this.data.length; t2++) e2[t2] = 255 & e2[t2];\n      }\n      e(\"../utils\").inherits(i, n), i.prototype.byteAt = function(e2) {\n        return this.data[this.zero + e2];\n      }, i.prototype.lastIndexOfSignature = function(e2) {\n        for (var t2 = e2.charCodeAt(0), r3 = e2.charCodeAt(1), n2 = e2.charCodeAt(2), i2 = e2.charCodeAt(3), s2 = this.length - 4; 0 <= s2; --s2) if (this.data[s2] === t2 && this.data[s2 + 1] === r3 && this.data[s2 + 2] === n2 && this.data[s2 + 3] === i2) return s2 - this.zero;\n        return -1;\n      }, i.prototype.readAndCheckSignature = function(e2) {\n        var t2 = e2.charCodeAt(0), r3 = e2.charCodeAt(1), n2 = e2.charCodeAt(2), i2 = e2.charCodeAt(3), s2 = this.readData(4);\n        return t2 === s2[0] && r3 === s2[1] && n2 === s2[2] && i2 === s2[3];\n      }, i.prototype.readData = function(e2) {\n        if (this.checkOffset(e2), 0 === e2) return [];\n        var t2 = this.data.slice(this.zero + this.index, this.zero + this.index + e2);\n        return this.index += e2, t2;\n      }, t.exports = i;\n    }, { \"../utils\": 32, \"./DataReader\": 18 }], 18: [function(e, t, r2) {\n      var n = e(\"../utils\");\n      function i(e2) {\n        this.data = e2, this.length = e2.length, this.index = 0, this.zero = 0;\n      }\n      i.prototype = { checkOffset: function(e2) {\n        this.checkIndex(this.index + e2);\n      }, checkIndex: function(e2) {\n        if (this.length < this.zero + e2 || e2 < 0) throw new Error(\"End of data reached (data length = \" + this.length + \", asked index = \" + e2 + \"). Corrupted zip ?\");\n      }, setIndex: function(e2) {\n        this.checkIndex(e2), this.index = e2;\n      }, skip: function(e2) {\n        this.setIndex(this.index + e2);\n      }, byteAt: function() {\n      }, readInt: function(e2) {\n        var t2, r3 = 0;\n        for (this.checkOffset(e2), t2 = this.index + e2 - 1; t2 >= this.index; t2--) r3 = (r3 << 8) + this.byteAt(t2);\n        return this.index += e2, r3;\n      }, readString: function(e2) {\n        return n.transformTo(\"string\", this.readData(e2));\n      }, readData: function() {\n      }, lastIndexOfSignature: function() {\n      }, readAndCheckSignature: function() {\n      }, readDate: function() {\n        var e2 = this.readInt(4);\n        return new Date(Date.UTC(1980 + (e2 >> 25 & 127), (e2 >> 21 & 15) - 1, e2 >> 16 & 31, e2 >> 11 & 31, e2 >> 5 & 63, (31 & e2) << 1));\n      } }, t.exports = i;\n    }, { \"../utils\": 32 }], 19: [function(e, t, r2) {\n      var n = e(\"./Uint8ArrayReader\");\n      function i(e2) {\n        n.call(this, e2);\n      }\n      e(\"../utils\").inherits(i, n), i.prototype.readData = function(e2) {\n        this.checkOffset(e2);\n        var t2 = this.data.slice(this.zero + this.index, this.zero + this.index + e2);\n        return this.index += e2, t2;\n      }, t.exports = i;\n    }, { \"../utils\": 32, \"./Uint8ArrayReader\": 21 }], 20: [function(e, t, r2) {\n      var n = e(\"./DataReader\");\n      function i(e2) {\n        n.call(this, e2);\n      }\n      e(\"../utils\").inherits(i, n), i.prototype.byteAt = function(e2) {\n        return this.data.charCodeAt(this.zero + e2);\n      }, i.prototype.lastIndexOfSignature = function(e2) {\n        return this.data.lastIndexOf(e2) - this.zero;\n      }, i.prototype.readAndCheckSignature = function(e2) {\n        return e2 === this.readData(4);\n      }, i.prototype.readData = function(e2) {\n        this.checkOffset(e2);\n        var t2 = this.data.slice(this.zero + this.index, this.zero + this.index + e2);\n        return this.index += e2, t2;\n      }, t.exports = i;\n    }, { \"../utils\": 32, \"./DataReader\": 18 }], 21: [function(e, t, r2) {\n      var n = e(\"./ArrayReader\");\n      function i(e2) {\n        n.call(this, e2);\n      }\n      e(\"../utils\").inherits(i, n), i.prototype.readData = function(e2) {\n        if (this.checkOffset(e2), 0 === e2) return new Uint8Array(0);\n        var t2 = this.data.subarray(this.zero + this.index, this.zero + this.index + e2);\n        return this.index += e2, t2;\n      }, t.exports = i;\n    }, { \"../utils\": 32, \"./ArrayReader\": 17 }], 22: [function(e, t, r2) {\n      var n = e(\"../utils\"), i = e(\"../support\"), s2 = e(\"./ArrayReader\"), a = e(\"./StringReader\"), o = e(\"./NodeBufferReader\"), h = e(\"./Uint8ArrayReader\");\n      t.exports = function(e2) {\n        var t2 = n.getTypeOf(e2);\n        return n.checkSupport(t2), \"string\" !== t2 || i.uint8array ? \"nodebuffer\" === t2 ? new o(e2) : i.uint8array ? new h(n.transformTo(\"uint8array\", e2)) : new s2(n.transformTo(\"array\", e2)) : new a(e2);\n      };\n    }, { \"../support\": 30, \"../utils\": 32, \"./ArrayReader\": 17, \"./NodeBufferReader\": 19, \"./StringReader\": 20, \"./Uint8ArrayReader\": 21 }], 23: [function(e, t, r2) {\n      r2.LOCAL_FILE_HEADER = \"PK\u0003\u0004\", r2.CENTRAL_FILE_HEADER = \"PK\u0001\u0002\", r2.CENTRAL_DIRECTORY_END = \"PK\u0005\u0006\", r2.ZIP64_CENTRAL_DIRECTORY_LOCATOR = \"PK\u0006\\x07\", r2.ZIP64_CENTRAL_DIRECTORY_END = \"PK\u0006\u0006\", r2.DATA_DESCRIPTOR = \"PK\\x07\\b\";\n    }, {}], 24: [function(e, t, r2) {\n      var n = e(\"./GenericWorker\"), i = e(\"../utils\");\n      function s2(e2) {\n        n.call(this, \"ConvertWorker to \" + e2), this.destType = e2;\n      }\n      i.inherits(s2, n), s2.prototype.processChunk = function(e2) {\n        this.push({ data: i.transformTo(this.destType, e2.data), meta: e2.meta });\n      }, t.exports = s2;\n    }, { \"../utils\": 32, \"./GenericWorker\": 28 }], 25: [function(e, t, r2) {\n      var n = e(\"./GenericWorker\"), i = e(\"../crc32\");\n      function s2() {\n        n.call(this, \"Crc32Probe\"), this.withStreamInfo(\"crc32\", 0);\n      }\n      e(\"../utils\").inherits(s2, n), s2.prototype.processChunk = function(e2) {\n        this.streamInfo.crc32 = i(e2.data, this.streamInfo.crc32 || 0), this.push(e2);\n      }, t.exports = s2;\n    }, { \"../crc32\": 4, \"../utils\": 32, \"./GenericWorker\": 28 }], 26: [function(e, t, r2) {\n      var n = e(\"../utils\"), i = e(\"./GenericWorker\");\n      function s2(e2) {\n        i.call(this, \"DataLengthProbe for \" + e2), this.propName = e2, this.withStreamInfo(e2, 0);\n      }\n      n.inherits(s2, i), s2.prototype.processChunk = function(e2) {\n        if (e2) {\n          var t2 = this.streamInfo[this.propName] || 0;\n          this.streamInfo[this.propName] = t2 + e2.data.length;\n        }\n        i.prototype.processChunk.call(this, e2);\n      }, t.exports = s2;\n    }, { \"../utils\": 32, \"./GenericWorker\": 28 }], 27: [function(e, t, r2) {\n      var n = e(\"../utils\"), i = e(\"./GenericWorker\");\n      function s2(e2) {\n        i.call(this, \"DataWorker\");\n        var t2 = this;\n        this.dataIsReady = false, this.index = 0, this.max = 0, this.data = null, this.type = \"\", this._tickScheduled = false, e2.then(function(e3) {\n          t2.dataIsReady = true, t2.data = e3, t2.max = e3 && e3.length || 0, t2.type = n.getTypeOf(e3), t2.isPaused || t2._tickAndRepeat();\n        }, function(e3) {\n          t2.error(e3);\n        });\n      }\n      n.inherits(s2, i), s2.prototype.cleanUp = function() {\n        i.prototype.cleanUp.call(this), this.data = null;\n      }, s2.prototype.resume = function() {\n        return !!i.prototype.resume.call(this) && (!this._tickScheduled && this.dataIsReady && (this._tickScheduled = true, n.delay(this._tickAndRepeat, [], this)), true);\n      }, s2.prototype._tickAndRepeat = function() {\n        this._tickScheduled = false, this.isPaused || this.isFinished || (this._tick(), this.isFinished || (n.delay(this._tickAndRepeat, [], this), this._tickScheduled = true));\n      }, s2.prototype._tick = function() {\n        if (this.isPaused || this.isFinished) return false;\n        var e2 = null, t2 = Math.min(this.max, this.index + 16384);\n        if (this.index >= this.max) return this.end();\n        switch (this.type) {\n          case \"string\":\n            e2 = this.data.substring(this.index, t2);\n            break;\n          case \"uint8array\":\n            e2 = this.data.subarray(this.index, t2);\n            break;\n          case \"array\":\n          case \"nodebuffer\":\n            e2 = this.data.slice(this.index, t2);\n        }\n        return this.index = t2, this.push({ data: e2, meta: { percent: this.max ? this.index / this.max * 100 : 0 } });\n      }, t.exports = s2;\n    }, { \"../utils\": 32, \"./GenericWorker\": 28 }], 28: [function(e, t, r2) {\n      function n(e2) {\n        this.name = e2 || \"default\", this.streamInfo = {}, this.generatedError = null, this.extraStreamInfo = {}, this.isPaused = true, this.isFinished = false, this.isLocked = false, this._listeners = { data: [], end: [], error: [] }, this.previous = null;\n      }\n      n.prototype = { push: function(e2) {\n        this.emit(\"data\", e2);\n      }, end: function() {\n        if (this.isFinished) return false;\n        this.flush();\n        try {\n          this.emit(\"end\"), this.cleanUp(), this.isFinished = true;\n        } catch (e2) {\n          this.emit(\"error\", e2);\n        }\n        return true;\n      }, error: function(e2) {\n        return !this.isFinished && (this.isPaused ? this.generatedError = e2 : (this.isFinished = true, this.emit(\"error\", e2), this.previous && this.previous.error(e2), this.cleanUp()), true);\n      }, on: function(e2, t2) {\n        return this._listeners[e2].push(t2), this;\n      }, cleanUp: function() {\n        this.streamInfo = this.generatedError = this.extraStreamInfo = null, this._listeners = [];\n      }, emit: function(e2, t2) {\n        if (this._listeners[e2]) for (var r3 = 0; r3 < this._listeners[e2].length; r3++) this._listeners[e2][r3].call(this, t2);\n      }, pipe: function(e2) {\n        return e2.registerPrevious(this);\n      }, registerPrevious: function(e2) {\n        if (this.isLocked) throw new Error(\"The stream '\" + this + \"' has already been used.\");\n        this.streamInfo = e2.streamInfo, this.mergeStreamInfo(), this.previous = e2;\n        var t2 = this;\n        return e2.on(\"data\", function(e3) {\n          t2.processChunk(e3);\n        }), e2.on(\"end\", function() {\n          t2.end();\n        }), e2.on(\"error\", function(e3) {\n          t2.error(e3);\n        }), this;\n      }, pause: function() {\n        return !this.isPaused && !this.isFinished && (this.isPaused = true, this.previous && this.previous.pause(), true);\n      }, resume: function() {\n        if (!this.isPaused || this.isFinished) return false;\n        var e2 = this.isPaused = false;\n        return this.generatedError && (this.error(this.generatedError), e2 = true), this.previous && this.previous.resume(), !e2;\n      }, flush: function() {\n      }, processChunk: function(e2) {\n        this.push(e2);\n      }, withStreamInfo: function(e2, t2) {\n        return this.extraStreamInfo[e2] = t2, this.mergeStreamInfo(), this;\n      }, mergeStreamInfo: function() {\n        for (var e2 in this.extraStreamInfo) Object.prototype.hasOwnProperty.call(this.extraStreamInfo, e2) && (this.streamInfo[e2] = this.extraStreamInfo[e2]);\n      }, lock: function() {\n        if (this.isLocked) throw new Error(\"The stream '\" + this + \"' has already been used.\");\n        this.isLocked = true, this.previous && this.previous.lock();\n      }, toString: function() {\n        var e2 = \"Worker \" + this.name;\n        return this.previous ? this.previous + \" -> \" + e2 : e2;\n      } }, t.exports = n;\n    }, {}], 29: [function(e, t, r2) {\n      var h = e(\"../utils\"), i = e(\"./ConvertWorker\"), s2 = e(\"./GenericWorker\"), u = e(\"../base64\"), n = e(\"../support\"), a = e(\"../external\"), o = null;\n      if (n.nodestream) try {\n        o = e(\"../nodejs/NodejsStreamOutputAdapter\");\n      } catch (e2) {\n      }\n      function l(e2, o2) {\n        return new a.Promise(function(t2, r3) {\n          var n2 = [], i2 = e2._internalType, s3 = e2._outputType, a2 = e2._mimeType;\n          e2.on(\"data\", function(e3, t3) {\n            n2.push(e3), o2 && o2(t3);\n          }).on(\"error\", function(e3) {\n            n2 = [], r3(e3);\n          }).on(\"end\", function() {\n            try {\n              var e3 = function(e4, t3, r4) {\n                switch (e4) {\n                  case \"blob\":\n                    return h.newBlob(h.transformTo(\"arraybuffer\", t3), r4);\n                  case \"base64\":\n                    return u.encode(t3);\n                  default:\n                    return h.transformTo(e4, t3);\n                }\n              }(s3, function(e4, t3) {\n                var r4, n3 = 0, i3 = null, s4 = 0;\n                for (r4 = 0; r4 < t3.length; r4++) s4 += t3[r4].length;\n                switch (e4) {\n                  case \"string\":\n                    return t3.join(\"\");\n                  case \"array\":\n                    return Array.prototype.concat.apply([], t3);\n                  case \"uint8array\":\n                    for (i3 = new Uint8Array(s4), r4 = 0; r4 < t3.length; r4++) i3.set(t3[r4], n3), n3 += t3[r4].length;\n                    return i3;\n                  case \"nodebuffer\":\n                    return Buffer.concat(t3);\n                  default:\n                    throw new Error(\"concat : unsupported type '\" + e4 + \"'\");\n                }\n              }(i2, n2), a2);\n              t2(e3);\n            } catch (e4) {\n              r3(e4);\n            }\n            n2 = [];\n          }).resume();\n        });\n      }\n      function f2(e2, t2, r3) {\n        var n2 = t2;\n        switch (t2) {\n          case \"blob\":\n          case \"arraybuffer\":\n            n2 = \"uint8array\";\n            break;\n          case \"base64\":\n            n2 = \"string\";\n        }\n        try {\n          this._internalType = n2, this._outputType = t2, this._mimeType = r3, h.checkSupport(n2), this._worker = e2.pipe(new i(n2)), e2.lock();\n        } catch (e3) {\n          this._worker = new s2(\"error\"), this._worker.error(e3);\n        }\n      }\n      f2.prototype = { accumulate: function(e2) {\n        return l(this, e2);\n      }, on: function(e2, t2) {\n        var r3 = this;\n        return \"data\" === e2 ? this._worker.on(e2, function(e3) {\n          t2.call(r3, e3.data, e3.meta);\n        }) : this._worker.on(e2, function() {\n          h.delay(t2, arguments, r3);\n        }), this;\n      }, resume: function() {\n        return h.delay(this._worker.resume, [], this._worker), this;\n      }, pause: function() {\n        return this._worker.pause(), this;\n      }, toNodejsStream: function(e2) {\n        if (h.checkSupport(\"nodestream\"), \"nodebuffer\" !== this._outputType) throw new Error(this._outputType + \" is not supported by this method\");\n        return new o(this, { objectMode: \"nodebuffer\" !== this._outputType }, e2);\n      } }, t.exports = f2;\n    }, { \"../base64\": 1, \"../external\": 6, \"../nodejs/NodejsStreamOutputAdapter\": 13, \"../support\": 30, \"../utils\": 32, \"./ConvertWorker\": 24, \"./GenericWorker\": 28 }], 30: [function(e, t, r2) {\n      if (r2.base64 = true, r2.array = true, r2.string = true, r2.arraybuffer = \"undefined\" != typeof ArrayBuffer && \"undefined\" != typeof Uint8Array, r2.nodebuffer = \"undefined\" != typeof Buffer, r2.uint8array = \"undefined\" != typeof Uint8Array, \"undefined\" == typeof ArrayBuffer) r2.blob = false;\n      else {\n        var n = new ArrayBuffer(0);\n        try {\n          r2.blob = 0 === new Blob([n], { type: \"application/zip\" }).size;\n        } catch (e2) {\n          try {\n            var i = new (self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder)();\n            i.append(n), r2.blob = 0 === i.getBlob(\"application/zip\").size;\n          } catch (e3) {\n            r2.blob = false;\n          }\n        }\n      }\n      try {\n        r2.nodestream = !!e(\"readable-stream\").Readable;\n      } catch (e2) {\n        r2.nodestream = false;\n      }\n    }, { \"readable-stream\": 16 }], 31: [function(e, t, s2) {\n      for (var o = e(\"./utils\"), h = e(\"./support\"), r2 = e(\"./nodejsUtils\"), n = e(\"./stream/GenericWorker\"), u = new Array(256), i = 0; i < 256; i++) u[i] = 252 <= i ? 6 : 248 <= i ? 5 : 240 <= i ? 4 : 224 <= i ? 3 : 192 <= i ? 2 : 1;\n      u[254] = u[254] = 1;\n      function a() {\n        n.call(this, \"utf-8 decode\"), this.leftOver = null;\n      }\n      function l() {\n        n.call(this, \"utf-8 encode\");\n      }\n      s2.utf8encode = function(e2) {\n        return h.nodebuffer ? r2.newBufferFrom(e2, \"utf-8\") : function(e3) {\n          var t2, r3, n2, i2, s3, a2 = e3.length, o2 = 0;\n          for (i2 = 0; i2 < a2; i2++) 55296 == (64512 & (r3 = e3.charCodeAt(i2))) && i2 + 1 < a2 && 56320 == (64512 & (n2 = e3.charCodeAt(i2 + 1))) && (r3 = 65536 + (r3 - 55296 << 10) + (n2 - 56320), i2++), o2 += r3 < 128 ? 1 : r3 < 2048 ? 2 : r3 < 65536 ? 3 : 4;\n          for (t2 = h.uint8array ? new Uint8Array(o2) : new Array(o2), i2 = s3 = 0; s3 < o2; i2++) 55296 == (64512 & (r3 = e3.charCodeAt(i2))) && i2 + 1 < a2 && 56320 == (64512 & (n2 = e3.charCodeAt(i2 + 1))) && (r3 = 65536 + (r3 - 55296 << 10) + (n2 - 56320), i2++), r3 < 128 ? t2[s3++] = r3 : (r3 < 2048 ? t2[s3++] = 192 | r3 >>> 6 : (r3 < 65536 ? t2[s3++] = 224 | r3 >>> 12 : (t2[s3++] = 240 | r3 >>> 18, t2[s3++] = 128 | r3 >>> 12 & 63), t2[s3++] = 128 | r3 >>> 6 & 63), t2[s3++] = 128 | 63 & r3);\n          return t2;\n        }(e2);\n      }, s2.utf8decode = function(e2) {\n        return h.nodebuffer ? o.transformTo(\"nodebuffer\", e2).toString(\"utf-8\") : function(e3) {\n          var t2, r3, n2, i2, s3 = e3.length, a2 = new Array(2 * s3);\n          for (t2 = r3 = 0; t2 < s3; ) if ((n2 = e3[t2++]) < 128) a2[r3++] = n2;\n          else if (4 < (i2 = u[n2])) a2[r3++] = 65533, t2 += i2 - 1;\n          else {\n            for (n2 &= 2 === i2 ? 31 : 3 === i2 ? 15 : 7; 1 < i2 && t2 < s3; ) n2 = n2 << 6 | 63 & e3[t2++], i2--;\n            1 < i2 ? a2[r3++] = 65533 : n2 < 65536 ? a2[r3++] = n2 : (n2 -= 65536, a2[r3++] = 55296 | n2 >> 10 & 1023, a2[r3++] = 56320 | 1023 & n2);\n          }\n          return a2.length !== r3 && (a2.subarray ? a2 = a2.subarray(0, r3) : a2.length = r3), o.applyFromCharCode(a2);\n        }(e2 = o.transformTo(h.uint8array ? \"uint8array\" : \"array\", e2));\n      }, o.inherits(a, n), a.prototype.processChunk = function(e2) {\n        var t2 = o.transformTo(h.uint8array ? \"uint8array\" : \"array\", e2.data);\n        if (this.leftOver && this.leftOver.length) {\n          if (h.uint8array) {\n            var r3 = t2;\n            (t2 = new Uint8Array(r3.length + this.leftOver.length)).set(this.leftOver, 0), t2.set(r3, this.leftOver.length);\n          } else t2 = this.leftOver.concat(t2);\n          this.leftOver = null;\n        }\n        var n2 = function(e3, t3) {\n          var r4;\n          for ((t3 = t3 || e3.length) > e3.length && (t3 = e3.length), r4 = t3 - 1; 0 <= r4 && 128 == (192 & e3[r4]); ) r4--;\n          return r4 < 0 ? t3 : 0 === r4 ? t3 : r4 + u[e3[r4]] > t3 ? r4 : t3;\n        }(t2), i2 = t2;\n        n2 !== t2.length && (h.uint8array ? (i2 = t2.subarray(0, n2), this.leftOver = t2.subarray(n2, t2.length)) : (i2 = t2.slice(0, n2), this.leftOver = t2.slice(n2, t2.length))), this.push({ data: s2.utf8decode(i2), meta: e2.meta });\n      }, a.prototype.flush = function() {\n        this.leftOver && this.leftOver.length && (this.push({ data: s2.utf8decode(this.leftOver), meta: {} }), this.leftOver = null);\n      }, s2.Utf8DecodeWorker = a, o.inherits(l, n), l.prototype.processChunk = function(e2) {\n        this.push({ data: s2.utf8encode(e2.data), meta: e2.meta });\n      }, s2.Utf8EncodeWorker = l;\n    }, { \"./nodejsUtils\": 14, \"./stream/GenericWorker\": 28, \"./support\": 30, \"./utils\": 32 }], 32: [function(e, t, a) {\n      var o = e(\"./support\"), h = e(\"./base64\"), r2 = e(\"./nodejsUtils\"), u = e(\"./external\");\n      function n(e2) {\n        return e2;\n      }\n      function l(e2, t2) {\n        for (var r3 = 0; r3 < e2.length; ++r3) t2[r3] = 255 & e2.charCodeAt(r3);\n        return t2;\n      }\n      e(\"setimmediate\"), a.newBlob = function(t2, r3) {\n        a.checkSupport(\"blob\");\n        try {\n          return new Blob([t2], { type: r3 });\n        } catch (e2) {\n          try {\n            var n2 = new (self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder)();\n            return n2.append(t2), n2.getBlob(r3);\n          } catch (e3) {\n            throw new Error(\"Bug : can't construct the Blob.\");\n          }\n        }\n      };\n      var i = { stringifyByChunk: function(e2, t2, r3) {\n        var n2 = [], i2 = 0, s3 = e2.length;\n        if (s3 <= r3) return String.fromCharCode.apply(null, e2);\n        for (; i2 < s3; ) \"array\" === t2 || \"nodebuffer\" === t2 ? n2.push(String.fromCharCode.apply(null, e2.slice(i2, Math.min(i2 + r3, s3)))) : n2.push(String.fromCharCode.apply(null, e2.subarray(i2, Math.min(i2 + r3, s3)))), i2 += r3;\n        return n2.join(\"\");\n      }, stringifyByChar: function(e2) {\n        for (var t2 = \"\", r3 = 0; r3 < e2.length; r3++) t2 += String.fromCharCode(e2[r3]);\n        return t2;\n      }, applyCanBeUsed: { uint8array: function() {\n        try {\n          return o.uint8array && 1 === String.fromCharCode.apply(null, new Uint8Array(1)).length;\n        } catch (e2) {\n          return false;\n        }\n      }(), nodebuffer: function() {\n        try {\n          return o.nodebuffer && 1 === String.fromCharCode.apply(null, r2.allocBuffer(1)).length;\n        } catch (e2) {\n          return false;\n        }\n      }() } };\n      function s2(e2) {\n        var t2 = 65536, r3 = a.getTypeOf(e2), n2 = true;\n        if (\"uint8array\" === r3 ? n2 = i.applyCanBeUsed.uint8array : \"nodebuffer\" === r3 && (n2 = i.applyCanBeUsed.nodebuffer), n2) for (; 1 < t2; ) try {\n          return i.stringifyByChunk(e2, r3, t2);\n        } catch (e3) {\n          t2 = Math.floor(t2 / 2);\n        }\n        return i.stringifyByChar(e2);\n      }\n      function f2(e2, t2) {\n        for (var r3 = 0; r3 < e2.length; r3++) t2[r3] = e2[r3];\n        return t2;\n      }\n      a.applyFromCharCode = s2;\n      var c = {};\n      c.string = { string: n, array: function(e2) {\n        return l(e2, new Array(e2.length));\n      }, arraybuffer: function(e2) {\n        return c.string.uint8array(e2).buffer;\n      }, uint8array: function(e2) {\n        return l(e2, new Uint8Array(e2.length));\n      }, nodebuffer: function(e2) {\n        return l(e2, r2.allocBuffer(e2.length));\n      } }, c.array = { string: s2, array: n, arraybuffer: function(e2) {\n        return new Uint8Array(e2).buffer;\n      }, uint8array: function(e2) {\n        return new Uint8Array(e2);\n      }, nodebuffer: function(e2) {\n        return r2.newBufferFrom(e2);\n      } }, c.arraybuffer = { string: function(e2) {\n        return s2(new Uint8Array(e2));\n      }, array: function(e2) {\n        return f2(new Uint8Array(e2), new Array(e2.byteLength));\n      }, arraybuffer: n, uint8array: function(e2) {\n        return new Uint8Array(e2);\n      }, nodebuffer: function(e2) {\n        return r2.newBufferFrom(new Uint8Array(e2));\n      } }, c.uint8array = { string: s2, array: function(e2) {\n        return f2(e2, new Array(e2.length));\n      }, arraybuffer: function(e2) {\n        return e2.buffer;\n      }, uint8array: n, nodebuffer: function(e2) {\n        return r2.newBufferFrom(e2);\n      } }, c.nodebuffer = { string: s2, array: function(e2) {\n        return f2(e2, new Array(e2.length));\n      }, arraybuffer: function(e2) {\n        return c.nodebuffer.uint8array(e2).buffer;\n      }, uint8array: function(e2) {\n        return f2(e2, new Uint8Array(e2.length));\n      }, nodebuffer: n }, a.transformTo = function(e2, t2) {\n        if (t2 = t2 || \"\", !e2) return t2;\n        a.checkSupport(e2);\n        var r3 = a.getTypeOf(t2);\n        return c[r3][e2](t2);\n      }, a.resolve = function(e2) {\n        for (var t2 = e2.split(\"/\"), r3 = [], n2 = 0; n2 < t2.length; n2++) {\n          var i2 = t2[n2];\n          \".\" === i2 || \"\" === i2 && 0 !== n2 && n2 !== t2.length - 1 || (\"..\" === i2 ? r3.pop() : r3.push(i2));\n        }\n        return r3.join(\"/\");\n      }, a.getTypeOf = function(e2) {\n        return \"string\" == typeof e2 ? \"string\" : \"[object Array]\" === Object.prototype.toString.call(e2) ? \"array\" : o.nodebuffer && r2.isBuffer(e2) ? \"nodebuffer\" : o.uint8array && e2 instanceof Uint8Array ? \"uint8array\" : o.arraybuffer && e2 instanceof ArrayBuffer ? \"arraybuffer\" : void 0;\n      }, a.checkSupport = function(e2) {\n        if (!o[e2.toLowerCase()]) throw new Error(e2 + \" is not supported by this platform\");\n      }, a.MAX_VALUE_16BITS = 65535, a.MAX_VALUE_32BITS = -1, a.pretty = function(e2) {\n        var t2, r3, n2 = \"\";\n        for (r3 = 0; r3 < (e2 || \"\").length; r3++) n2 += \"\\\\x\" + ((t2 = e2.charCodeAt(r3)) < 16 ? \"0\" : \"\") + t2.toString(16).toUpperCase();\n        return n2;\n      }, a.delay = function(e2, t2, r3) {\n        setImmediate(function() {\n          e2.apply(r3 || null, t2 || []);\n        });\n      }, a.inherits = function(e2, t2) {\n        function r3() {\n        }\n        r3.prototype = t2.prototype, e2.prototype = new r3();\n      }, a.extend = function() {\n        var e2, t2, r3 = {};\n        for (e2 = 0; e2 < arguments.length; e2++) for (t2 in arguments[e2]) Object.prototype.hasOwnProperty.call(arguments[e2], t2) && void 0 === r3[t2] && (r3[t2] = arguments[e2][t2]);\n        return r3;\n      }, a.prepareContent = function(r3, e2, n2, i2, s3) {\n        return u.Promise.resolve(e2).then(function(n3) {\n          return o.blob && (n3 instanceof Blob || -1 !== [\"[object File]\", \"[object Blob]\"].indexOf(Object.prototype.toString.call(n3))) && \"undefined\" != typeof FileReader ? new u.Promise(function(t2, r4) {\n            var e3 = new FileReader();\n            e3.onload = function(e4) {\n              t2(e4.target.result);\n            }, e3.onerror = function(e4) {\n              r4(e4.target.error);\n            }, e3.readAsArrayBuffer(n3);\n          }) : n3;\n        }).then(function(e3) {\n          var t2 = a.getTypeOf(e3);\n          return t2 ? (\"arraybuffer\" === t2 ? e3 = a.transformTo(\"uint8array\", e3) : \"string\" === t2 && (s3 ? e3 = h.decode(e3) : n2 && true !== i2 && (e3 = function(e4) {\n            return l(e4, o.uint8array ? new Uint8Array(e4.length) : new Array(e4.length));\n          }(e3))), e3) : u.Promise.reject(new Error(\"Can't read the data of '\" + r3 + \"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?\"));\n        });\n      };\n    }, { \"./base64\": 1, \"./external\": 6, \"./nodejsUtils\": 14, \"./support\": 30, setimmediate: 54 }], 33: [function(e, t, r2) {\n      var n = e(\"./reader/readerFor\"), i = e(\"./utils\"), s2 = e(\"./signature\"), a = e(\"./zipEntry\"), o = e(\"./support\");\n      function h(e2) {\n        this.files = [], this.loadOptions = e2;\n      }\n      h.prototype = { checkSignature: function(e2) {\n        if (!this.reader.readAndCheckSignature(e2)) {\n          this.reader.index -= 4;\n          var t2 = this.reader.readString(4);\n          throw new Error(\"Corrupted zip or bug: unexpected signature (\" + i.pretty(t2) + \", expected \" + i.pretty(e2) + \")\");\n        }\n      }, isSignature: function(e2, t2) {\n        var r3 = this.reader.index;\n        this.reader.setIndex(e2);\n        var n2 = this.reader.readString(4) === t2;\n        return this.reader.setIndex(r3), n2;\n      }, readBlockEndOfCentral: function() {\n        this.diskNumber = this.reader.readInt(2), this.diskWithCentralDirStart = this.reader.readInt(2), this.centralDirRecordsOnThisDisk = this.reader.readInt(2), this.centralDirRecords = this.reader.readInt(2), this.centralDirSize = this.reader.readInt(4), this.centralDirOffset = this.reader.readInt(4), this.zipCommentLength = this.reader.readInt(2);\n        var e2 = this.reader.readData(this.zipCommentLength), t2 = o.uint8array ? \"uint8array\" : \"array\", r3 = i.transformTo(t2, e2);\n        this.zipComment = this.loadOptions.decodeFileName(r3);\n      }, readBlockZip64EndOfCentral: function() {\n        this.zip64EndOfCentralSize = this.reader.readInt(8), this.reader.skip(4), this.diskNumber = this.reader.readInt(4), this.diskWithCentralDirStart = this.reader.readInt(4), this.centralDirRecordsOnThisDisk = this.reader.readInt(8), this.centralDirRecords = this.reader.readInt(8), this.centralDirSize = this.reader.readInt(8), this.centralDirOffset = this.reader.readInt(8), this.zip64ExtensibleData = {};\n        for (var e2, t2, r3, n2 = this.zip64EndOfCentralSize - 44; 0 < n2; ) e2 = this.reader.readInt(2), t2 = this.reader.readInt(4), r3 = this.reader.readData(t2), this.zip64ExtensibleData[e2] = { id: e2, length: t2, value: r3 };\n      }, readBlockZip64EndOfCentralLocator: function() {\n        if (this.diskWithZip64CentralDirStart = this.reader.readInt(4), this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8), this.disksCount = this.reader.readInt(4), 1 < this.disksCount) throw new Error(\"Multi-volumes zip are not supported\");\n      }, readLocalFiles: function() {\n        var e2, t2;\n        for (e2 = 0; e2 < this.files.length; e2++) t2 = this.files[e2], this.reader.setIndex(t2.localHeaderOffset), this.checkSignature(s2.LOCAL_FILE_HEADER), t2.readLocalPart(this.reader), t2.handleUTF8(), t2.processAttributes();\n      }, readCentralDir: function() {\n        var e2;\n        for (this.reader.setIndex(this.centralDirOffset); this.reader.readAndCheckSignature(s2.CENTRAL_FILE_HEADER); ) (e2 = new a({ zip64: this.zip64 }, this.loadOptions)).readCentralPart(this.reader), this.files.push(e2);\n        if (this.centralDirRecords !== this.files.length && 0 !== this.centralDirRecords && 0 === this.files.length) throw new Error(\"Corrupted zip or bug: expected \" + this.centralDirRecords + \" records in central dir, got \" + this.files.length);\n      }, readEndOfCentral: function() {\n        var e2 = this.reader.lastIndexOfSignature(s2.CENTRAL_DIRECTORY_END);\n        if (e2 < 0) throw !this.isSignature(0, s2.LOCAL_FILE_HEADER) ? new Error(\"Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html\") : new Error(\"Corrupted zip: can't find end of central directory\");\n        this.reader.setIndex(e2);\n        var t2 = e2;\n        if (this.checkSignature(s2.CENTRAL_DIRECTORY_END), this.readBlockEndOfCentral(), this.diskNumber === i.MAX_VALUE_16BITS || this.diskWithCentralDirStart === i.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === i.MAX_VALUE_16BITS || this.centralDirRecords === i.MAX_VALUE_16BITS || this.centralDirSize === i.MAX_VALUE_32BITS || this.centralDirOffset === i.MAX_VALUE_32BITS) {\n          if (this.zip64 = true, (e2 = this.reader.lastIndexOfSignature(s2.ZIP64_CENTRAL_DIRECTORY_LOCATOR)) < 0) throw new Error(\"Corrupted zip: can't find the ZIP64 end of central directory locator\");\n          if (this.reader.setIndex(e2), this.checkSignature(s2.ZIP64_CENTRAL_DIRECTORY_LOCATOR), this.readBlockZip64EndOfCentralLocator(), !this.isSignature(this.relativeOffsetEndOfZip64CentralDir, s2.ZIP64_CENTRAL_DIRECTORY_END) && (this.relativeOffsetEndOfZip64CentralDir = this.reader.lastIndexOfSignature(s2.ZIP64_CENTRAL_DIRECTORY_END), this.relativeOffsetEndOfZip64CentralDir < 0)) throw new Error(\"Corrupted zip: can't find the ZIP64 end of central directory\");\n          this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir), this.checkSignature(s2.ZIP64_CENTRAL_DIRECTORY_END), this.readBlockZip64EndOfCentral();\n        }\n        var r3 = this.centralDirOffset + this.centralDirSize;\n        this.zip64 && (r3 += 20, r3 += 12 + this.zip64EndOfCentralSize);\n        var n2 = t2 - r3;\n        if (0 < n2) this.isSignature(t2, s2.CENTRAL_FILE_HEADER) || (this.reader.zero = n2);\n        else if (n2 < 0) throw new Error(\"Corrupted zip: missing \" + Math.abs(n2) + \" bytes.\");\n      }, prepareReader: function(e2) {\n        this.reader = n(e2);\n      }, load: function(e2) {\n        this.prepareReader(e2), this.readEndOfCentral(), this.readCentralDir(), this.readLocalFiles();\n      } }, t.exports = h;\n    }, { \"./reader/readerFor\": 22, \"./signature\": 23, \"./support\": 30, \"./utils\": 32, \"./zipEntry\": 34 }], 34: [function(e, t, r2) {\n      var n = e(\"./reader/readerFor\"), s2 = e(\"./utils\"), i = e(\"./compressedObject\"), a = e(\"./crc32\"), o = e(\"./utf8\"), h = e(\"./compressions\"), u = e(\"./support\");\n      function l(e2, t2) {\n        this.options = e2, this.loadOptions = t2;\n      }\n      l.prototype = { isEncrypted: function() {\n        return 1 == (1 & this.bitFlag);\n      }, useUTF8: function() {\n        return 2048 == (2048 & this.bitFlag);\n      }, readLocalPart: function(e2) {\n        var t2, r3;\n        if (e2.skip(22), this.fileNameLength = e2.readInt(2), r3 = e2.readInt(2), this.fileName = e2.readData(this.fileNameLength), e2.skip(r3), -1 === this.compressedSize || -1 === this.uncompressedSize) throw new Error(\"Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)\");\n        if (null === (t2 = function(e3) {\n          for (var t3 in h) if (Object.prototype.hasOwnProperty.call(h, t3) && h[t3].magic === e3) return h[t3];\n          return null;\n        }(this.compressionMethod))) throw new Error(\"Corrupted zip : compression \" + s2.pretty(this.compressionMethod) + \" unknown (inner file : \" + s2.transformTo(\"string\", this.fileName) + \")\");\n        this.decompressed = new i(this.compressedSize, this.uncompressedSize, this.crc32, t2, e2.readData(this.compressedSize));\n      }, readCentralPart: function(e2) {\n        this.versionMadeBy = e2.readInt(2), e2.skip(2), this.bitFlag = e2.readInt(2), this.compressionMethod = e2.readString(2), this.date = e2.readDate(), this.crc32 = e2.readInt(4), this.compressedSize = e2.readInt(4), this.uncompressedSize = e2.readInt(4);\n        var t2 = e2.readInt(2);\n        if (this.extraFieldsLength = e2.readInt(2), this.fileCommentLength = e2.readInt(2), this.diskNumberStart = e2.readInt(2), this.internalFileAttributes = e2.readInt(2), this.externalFileAttributes = e2.readInt(4), this.localHeaderOffset = e2.readInt(4), this.isEncrypted()) throw new Error(\"Encrypted zip are not supported\");\n        e2.skip(t2), this.readExtraFields(e2), this.parseZIP64ExtraField(e2), this.fileComment = e2.readData(this.fileCommentLength);\n      }, processAttributes: function() {\n        this.unixPermissions = null, this.dosPermissions = null;\n        var e2 = this.versionMadeBy >> 8;\n        this.dir = !!(16 & this.externalFileAttributes), 0 == e2 && (this.dosPermissions = 63 & this.externalFileAttributes), 3 == e2 && (this.unixPermissions = this.externalFileAttributes >> 16 & 65535), this.dir || \"/\" !== this.fileNameStr.slice(-1) || (this.dir = true);\n      }, parseZIP64ExtraField: function() {\n        if (this.extraFields[1]) {\n          var e2 = n(this.extraFields[1].value);\n          this.uncompressedSize === s2.MAX_VALUE_32BITS && (this.uncompressedSize = e2.readInt(8)), this.compressedSize === s2.MAX_VALUE_32BITS && (this.compressedSize = e2.readInt(8)), this.localHeaderOffset === s2.MAX_VALUE_32BITS && (this.localHeaderOffset = e2.readInt(8)), this.diskNumberStart === s2.MAX_VALUE_32BITS && (this.diskNumberStart = e2.readInt(4));\n        }\n      }, readExtraFields: function(e2) {\n        var t2, r3, n2, i2 = e2.index + this.extraFieldsLength;\n        for (this.extraFields || (this.extraFields = {}); e2.index + 4 < i2; ) t2 = e2.readInt(2), r3 = e2.readInt(2), n2 = e2.readData(r3), this.extraFields[t2] = { id: t2, length: r3, value: n2 };\n        e2.setIndex(i2);\n      }, handleUTF8: function() {\n        var e2 = u.uint8array ? \"uint8array\" : \"array\";\n        if (this.useUTF8()) this.fileNameStr = o.utf8decode(this.fileName), this.fileCommentStr = o.utf8decode(this.fileComment);\n        else {\n          var t2 = this.findExtraFieldUnicodePath();\n          if (null !== t2) this.fileNameStr = t2;\n          else {\n            var r3 = s2.transformTo(e2, this.fileName);\n            this.fileNameStr = this.loadOptions.decodeFileName(r3);\n          }\n          var n2 = this.findExtraFieldUnicodeComment();\n          if (null !== n2) this.fileCommentStr = n2;\n          else {\n            var i2 = s2.transformTo(e2, this.fileComment);\n            this.fileCommentStr = this.loadOptions.decodeFileName(i2);\n          }\n        }\n      }, findExtraFieldUnicodePath: function() {\n        var e2 = this.extraFields[28789];\n        if (e2) {\n          var t2 = n(e2.value);\n          return 1 !== t2.readInt(1) ? null : a(this.fileName) !== t2.readInt(4) ? null : o.utf8decode(t2.readData(e2.length - 5));\n        }\n        return null;\n      }, findExtraFieldUnicodeComment: function() {\n        var e2 = this.extraFields[25461];\n        if (e2) {\n          var t2 = n(e2.value);\n          return 1 !== t2.readInt(1) ? null : a(this.fileComment) !== t2.readInt(4) ? null : o.utf8decode(t2.readData(e2.length - 5));\n        }\n        return null;\n      } }, t.exports = l;\n    }, { \"./compressedObject\": 2, \"./compressions\": 3, \"./crc32\": 4, \"./reader/readerFor\": 22, \"./support\": 30, \"./utf8\": 31, \"./utils\": 32 }], 35: [function(e, t, r2) {\n      function n(e2, t2, r3) {\n        this.name = e2, this.dir = r3.dir, this.date = r3.date, this.comment = r3.comment, this.unixPermissions = r3.unixPermissions, this.dosPermissions = r3.dosPermissions, this._data = t2, this._dataBinary = r3.binary, this.options = { compression: r3.compression, compressionOptions: r3.compressionOptions };\n      }\n      var s2 = e(\"./stream/StreamHelper\"), i = e(\"./stream/DataWorker\"), a = e(\"./utf8\"), o = e(\"./compressedObject\"), h = e(\"./stream/GenericWorker\");\n      n.prototype = { internalStream: function(e2) {\n        var t2 = null, r3 = \"string\";\n        try {\n          if (!e2) throw new Error(\"No output type specified.\");\n          var n2 = \"string\" === (r3 = e2.toLowerCase()) || \"text\" === r3;\n          \"binarystring\" !== r3 && \"text\" !== r3 || (r3 = \"string\"), t2 = this._decompressWorker();\n          var i2 = !this._dataBinary;\n          i2 && !n2 && (t2 = t2.pipe(new a.Utf8EncodeWorker())), !i2 && n2 && (t2 = t2.pipe(new a.Utf8DecodeWorker()));\n        } catch (e3) {\n          (t2 = new h(\"error\")).error(e3);\n        }\n        return new s2(t2, r3, \"\");\n      }, async: function(e2, t2) {\n        return this.internalStream(e2).accumulate(t2);\n      }, nodeStream: function(e2, t2) {\n        return this.internalStream(e2 || \"nodebuffer\").toNodejsStream(t2);\n      }, _compressWorker: function(e2, t2) {\n        if (this._data instanceof o && this._data.compression.magic === e2.magic) return this._data.getCompressedWorker();\n        var r3 = this._decompressWorker();\n        return this._dataBinary || (r3 = r3.pipe(new a.Utf8EncodeWorker())), o.createWorkerFrom(r3, e2, t2);\n      }, _decompressWorker: function() {\n        return this._data instanceof o ? this._data.getContentWorker() : this._data instanceof h ? this._data : new i(this._data);\n      } };\n      for (var u = [\"asText\", \"asBinary\", \"asNodeBuffer\", \"asUint8Array\", \"asArrayBuffer\"], l = function() {\n        throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\");\n      }, f2 = 0; f2 < u.length; f2++) n.prototype[u[f2]] = l;\n      t.exports = n;\n    }, { \"./compressedObject\": 2, \"./stream/DataWorker\": 27, \"./stream/GenericWorker\": 28, \"./stream/StreamHelper\": 29, \"./utf8\": 31 }], 36: [function(e, l, t) {\n      (function(t2) {\n        var r2, n, e2 = t2.MutationObserver || t2.WebKitMutationObserver;\n        if (e2) {\n          var i = 0, s2 = new e2(u), a = t2.document.createTextNode(\"\");\n          s2.observe(a, { characterData: true }), r2 = function() {\n            a.data = i = ++i % 2;\n          };\n        } else if (t2.setImmediate || void 0 === t2.MessageChannel) r2 = \"document\" in t2 && \"onreadystatechange\" in t2.document.createElement(\"script\") ? function() {\n          var e3 = t2.document.createElement(\"script\");\n          e3.onreadystatechange = function() {\n            u(), e3.onreadystatechange = null, e3.parentNode.removeChild(e3), e3 = null;\n          }, t2.document.documentElement.appendChild(e3);\n        } : function() {\n          setTimeout(u, 0);\n        };\n        else {\n          var o = new t2.MessageChannel();\n          o.port1.onmessage = u, r2 = function() {\n            o.port2.postMessage(0);\n          };\n        }\n        var h = [];\n        function u() {\n          var e3, t3;\n          n = true;\n          for (var r3 = h.length; r3; ) {\n            for (t3 = h, h = [], e3 = -1; ++e3 < r3; ) t3[e3]();\n            r3 = h.length;\n          }\n          n = false;\n        }\n        l.exports = function(e3) {\n          1 !== h.push(e3) || n || r2();\n        };\n      }).call(this, \"undefined\" != typeof commonjsGlobal ? commonjsGlobal : \"undefined\" != typeof self ? self : \"undefined\" != typeof window ? window : {});\n    }, {}], 37: [function(e, t, r2) {\n      var i = e(\"immediate\");\n      function u() {\n      }\n      var l = {}, s2 = [\"REJECTED\"], a = [\"FULFILLED\"], n = [\"PENDING\"];\n      function o(e2) {\n        if (\"function\" != typeof e2) throw new TypeError(\"resolver must be a function\");\n        this.state = n, this.queue = [], this.outcome = void 0, e2 !== u && d(this, e2);\n      }\n      function h(e2, t2, r3) {\n        this.promise = e2, \"function\" == typeof t2 && (this.onFulfilled = t2, this.callFulfilled = this.otherCallFulfilled), \"function\" == typeof r3 && (this.onRejected = r3, this.callRejected = this.otherCallRejected);\n      }\n      function f2(t2, r3, n2) {\n        i(function() {\n          var e2;\n          try {\n            e2 = r3(n2);\n          } catch (e3) {\n            return l.reject(t2, e3);\n          }\n          e2 === t2 ? l.reject(t2, new TypeError(\"Cannot resolve promise with itself\")) : l.resolve(t2, e2);\n        });\n      }\n      function c(e2) {\n        var t2 = e2 && e2.then;\n        if (e2 && (\"object\" == typeof e2 || \"function\" == typeof e2) && \"function\" == typeof t2) return function() {\n          t2.apply(e2, arguments);\n        };\n      }\n      function d(t2, e2) {\n        var r3 = false;\n        function n2(e3) {\n          r3 || (r3 = true, l.reject(t2, e3));\n        }\n        function i2(e3) {\n          r3 || (r3 = true, l.resolve(t2, e3));\n        }\n        var s3 = p(function() {\n          e2(i2, n2);\n        });\n        \"error\" === s3.status && n2(s3.value);\n      }\n      function p(e2, t2) {\n        var r3 = {};\n        try {\n          r3.value = e2(t2), r3.status = \"success\";\n        } catch (e3) {\n          r3.status = \"error\", r3.value = e3;\n        }\n        return r3;\n      }\n      (t.exports = o).prototype.finally = function(t2) {\n        if (\"function\" != typeof t2) return this;\n        var r3 = this.constructor;\n        return this.then(function(e2) {\n          return r3.resolve(t2()).then(function() {\n            return e2;\n          });\n        }, function(e2) {\n          return r3.resolve(t2()).then(function() {\n            throw e2;\n          });\n        });\n      }, o.prototype.catch = function(e2) {\n        return this.then(null, e2);\n      }, o.prototype.then = function(e2, t2) {\n        if (\"function\" != typeof e2 && this.state === a || \"function\" != typeof t2 && this.state === s2) return this;\n        var r3 = new this.constructor(u);\n        this.state !== n ? f2(r3, this.state === a ? e2 : t2, this.outcome) : this.queue.push(new h(r3, e2, t2));\n        return r3;\n      }, h.prototype.callFulfilled = function(e2) {\n        l.resolve(this.promise, e2);\n      }, h.prototype.otherCallFulfilled = function(e2) {\n        f2(this.promise, this.onFulfilled, e2);\n      }, h.prototype.callRejected = function(e2) {\n        l.reject(this.promise, e2);\n      }, h.prototype.otherCallRejected = function(e2) {\n        f2(this.promise, this.onRejected, e2);\n      }, l.resolve = function(e2, t2) {\n        var r3 = p(c, t2);\n        if (\"error\" === r3.status) return l.reject(e2, r3.value);\n        var n2 = r3.value;\n        if (n2) d(e2, n2);\n        else {\n          e2.state = a, e2.outcome = t2;\n          for (var i2 = -1, s3 = e2.queue.length; ++i2 < s3; ) e2.queue[i2].callFulfilled(t2);\n        }\n        return e2;\n      }, l.reject = function(e2, t2) {\n        e2.state = s2, e2.outcome = t2;\n        for (var r3 = -1, n2 = e2.queue.length; ++r3 < n2; ) e2.queue[r3].callRejected(t2);\n        return e2;\n      }, o.resolve = function(e2) {\n        if (e2 instanceof this) return e2;\n        return l.resolve(new this(u), e2);\n      }, o.reject = function(e2) {\n        var t2 = new this(u);\n        return l.reject(t2, e2);\n      }, o.all = function(e2) {\n        var r3 = this;\n        if (\"[object Array]\" !== Object.prototype.toString.call(e2)) return this.reject(new TypeError(\"must be an array\"));\n        var n2 = e2.length, i2 = false;\n        if (!n2) return this.resolve([]);\n        var s3 = new Array(n2), a2 = 0, t2 = -1, o2 = new this(u);\n        for (; ++t2 < n2; ) h2(e2[t2], t2);\n        return o2;\n        function h2(e3, t3) {\n          r3.resolve(e3).then(function(e4) {\n            s3[t3] = e4, ++a2 !== n2 || i2 || (i2 = true, l.resolve(o2, s3));\n          }, function(e4) {\n            i2 || (i2 = true, l.reject(o2, e4));\n          });\n        }\n      }, o.race = function(e2) {\n        var t2 = this;\n        if (\"[object Array]\" !== Object.prototype.toString.call(e2)) return this.reject(new TypeError(\"must be an array\"));\n        var r3 = e2.length, n2 = false;\n        if (!r3) return this.resolve([]);\n        var i2 = -1, s3 = new this(u);\n        for (; ++i2 < r3; ) a2 = e2[i2], t2.resolve(a2).then(function(e3) {\n          n2 || (n2 = true, l.resolve(s3, e3));\n        }, function(e3) {\n          n2 || (n2 = true, l.reject(s3, e3));\n        });\n        var a2;\n        return s3;\n      };\n    }, { immediate: 36 }], 38: [function(e, t, r2) {\n      var n = {};\n      (0, e(\"./lib/utils/common\").assign)(n, e(\"./lib/deflate\"), e(\"./lib/inflate\"), e(\"./lib/zlib/constants\")), t.exports = n;\n    }, { \"./lib/deflate\": 39, \"./lib/inflate\": 40, \"./lib/utils/common\": 41, \"./lib/zlib/constants\": 44 }], 39: [function(e, t, r2) {\n      var a = e(\"./zlib/deflate\"), o = e(\"./utils/common\"), h = e(\"./utils/strings\"), i = e(\"./zlib/messages\"), s2 = e(\"./zlib/zstream\"), u = Object.prototype.toString, l = 0, f2 = -1, c = 0, d = 8;\n      function p(e2) {\n        if (!(this instanceof p)) return new p(e2);\n        this.options = o.assign({ level: f2, method: d, chunkSize: 16384, windowBits: 15, memLevel: 8, strategy: c, to: \"\" }, e2 || {});\n        var t2 = this.options;\n        t2.raw && 0 < t2.windowBits ? t2.windowBits = -t2.windowBits : t2.gzip && 0 < t2.windowBits && t2.windowBits < 16 && (t2.windowBits += 16), this.err = 0, this.msg = \"\", this.ended = false, this.chunks = [], this.strm = new s2(), this.strm.avail_out = 0;\n        var r3 = a.deflateInit2(this.strm, t2.level, t2.method, t2.windowBits, t2.memLevel, t2.strategy);\n        if (r3 !== l) throw new Error(i[r3]);\n        if (t2.header && a.deflateSetHeader(this.strm, t2.header), t2.dictionary) {\n          var n2;\n          if (n2 = \"string\" == typeof t2.dictionary ? h.string2buf(t2.dictionary) : \"[object ArrayBuffer]\" === u.call(t2.dictionary) ? new Uint8Array(t2.dictionary) : t2.dictionary, (r3 = a.deflateSetDictionary(this.strm, n2)) !== l) throw new Error(i[r3]);\n          this._dict_set = true;\n        }\n      }\n      function n(e2, t2) {\n        var r3 = new p(t2);\n        if (r3.push(e2, true), r3.err) throw r3.msg || i[r3.err];\n        return r3.result;\n      }\n      p.prototype.push = function(e2, t2) {\n        var r3, n2, i2 = this.strm, s3 = this.options.chunkSize;\n        if (this.ended) return false;\n        n2 = t2 === ~~t2 ? t2 : true === t2 ? 4 : 0, \"string\" == typeof e2 ? i2.input = h.string2buf(e2) : \"[object ArrayBuffer]\" === u.call(e2) ? i2.input = new Uint8Array(e2) : i2.input = e2, i2.next_in = 0, i2.avail_in = i2.input.length;\n        do {\n          if (0 === i2.avail_out && (i2.output = new o.Buf8(s3), i2.next_out = 0, i2.avail_out = s3), 1 !== (r3 = a.deflate(i2, n2)) && r3 !== l) return this.onEnd(r3), !(this.ended = true);\n          0 !== i2.avail_out && (0 !== i2.avail_in || 4 !== n2 && 2 !== n2) || (\"string\" === this.options.to ? this.onData(h.buf2binstring(o.shrinkBuf(i2.output, i2.next_out))) : this.onData(o.shrinkBuf(i2.output, i2.next_out)));\n        } while ((0 < i2.avail_in || 0 === i2.avail_out) && 1 !== r3);\n        return 4 === n2 ? (r3 = a.deflateEnd(this.strm), this.onEnd(r3), this.ended = true, r3 === l) : 2 !== n2 || (this.onEnd(l), !(i2.avail_out = 0));\n      }, p.prototype.onData = function(e2) {\n        this.chunks.push(e2);\n      }, p.prototype.onEnd = function(e2) {\n        e2 === l && (\"string\" === this.options.to ? this.result = this.chunks.join(\"\") : this.result = o.flattenChunks(this.chunks)), this.chunks = [], this.err = e2, this.msg = this.strm.msg;\n      }, r2.Deflate = p, r2.deflate = n, r2.deflateRaw = function(e2, t2) {\n        return (t2 = t2 || {}).raw = true, n(e2, t2);\n      }, r2.gzip = function(e2, t2) {\n        return (t2 = t2 || {}).gzip = true, n(e2, t2);\n      };\n    }, { \"./utils/common\": 41, \"./utils/strings\": 42, \"./zlib/deflate\": 46, \"./zlib/messages\": 51, \"./zlib/zstream\": 53 }], 40: [function(e, t, r2) {\n      var c = e(\"./zlib/inflate\"), d = e(\"./utils/common\"), p = e(\"./utils/strings\"), m = e(\"./zlib/constants\"), n = e(\"./zlib/messages\"), i = e(\"./zlib/zstream\"), s2 = e(\"./zlib/gzheader\"), _ = Object.prototype.toString;\n      function a(e2) {\n        if (!(this instanceof a)) return new a(e2);\n        this.options = d.assign({ chunkSize: 16384, windowBits: 0, to: \"\" }, e2 || {});\n        var t2 = this.options;\n        t2.raw && 0 <= t2.windowBits && t2.windowBits < 16 && (t2.windowBits = -t2.windowBits, 0 === t2.windowBits && (t2.windowBits = -15)), !(0 <= t2.windowBits && t2.windowBits < 16) || e2 && e2.windowBits || (t2.windowBits += 32), 15 < t2.windowBits && t2.windowBits < 48 && 0 == (15 & t2.windowBits) && (t2.windowBits |= 15), this.err = 0, this.msg = \"\", this.ended = false, this.chunks = [], this.strm = new i(), this.strm.avail_out = 0;\n        var r3 = c.inflateInit2(this.strm, t2.windowBits);\n        if (r3 !== m.Z_OK) throw new Error(n[r3]);\n        this.header = new s2(), c.inflateGetHeader(this.strm, this.header);\n      }\n      function o(e2, t2) {\n        var r3 = new a(t2);\n        if (r3.push(e2, true), r3.err) throw r3.msg || n[r3.err];\n        return r3.result;\n      }\n      a.prototype.push = function(e2, t2) {\n        var r3, n2, i2, s3, a2, o2, h = this.strm, u = this.options.chunkSize, l = this.options.dictionary, f2 = false;\n        if (this.ended) return false;\n        n2 = t2 === ~~t2 ? t2 : true === t2 ? m.Z_FINISH : m.Z_NO_FLUSH, \"string\" == typeof e2 ? h.input = p.binstring2buf(e2) : \"[object ArrayBuffer]\" === _.call(e2) ? h.input = new Uint8Array(e2) : h.input = e2, h.next_in = 0, h.avail_in = h.input.length;\n        do {\n          if (0 === h.avail_out && (h.output = new d.Buf8(u), h.next_out = 0, h.avail_out = u), (r3 = c.inflate(h, m.Z_NO_FLUSH)) === m.Z_NEED_DICT && l && (o2 = \"string\" == typeof l ? p.string2buf(l) : \"[object ArrayBuffer]\" === _.call(l) ? new Uint8Array(l) : l, r3 = c.inflateSetDictionary(this.strm, o2)), r3 === m.Z_BUF_ERROR && true === f2 && (r3 = m.Z_OK, f2 = false), r3 !== m.Z_STREAM_END && r3 !== m.Z_OK) return this.onEnd(r3), !(this.ended = true);\n          h.next_out && (0 !== h.avail_out && r3 !== m.Z_STREAM_END && (0 !== h.avail_in || n2 !== m.Z_FINISH && n2 !== m.Z_SYNC_FLUSH) || (\"string\" === this.options.to ? (i2 = p.utf8border(h.output, h.next_out), s3 = h.next_out - i2, a2 = p.buf2string(h.output, i2), h.next_out = s3, h.avail_out = u - s3, s3 && d.arraySet(h.output, h.output, i2, s3, 0), this.onData(a2)) : this.onData(d.shrinkBuf(h.output, h.next_out)))), 0 === h.avail_in && 0 === h.avail_out && (f2 = true);\n        } while ((0 < h.avail_in || 0 === h.avail_out) && r3 !== m.Z_STREAM_END);\n        return r3 === m.Z_STREAM_END && (n2 = m.Z_FINISH), n2 === m.Z_FINISH ? (r3 = c.inflateEnd(this.strm), this.onEnd(r3), this.ended = true, r3 === m.Z_OK) : n2 !== m.Z_SYNC_FLUSH || (this.onEnd(m.Z_OK), !(h.avail_out = 0));\n      }, a.prototype.onData = function(e2) {\n        this.chunks.push(e2);\n      }, a.prototype.onEnd = function(e2) {\n        e2 === m.Z_OK && (\"string\" === this.options.to ? this.result = this.chunks.join(\"\") : this.result = d.flattenChunks(this.chunks)), this.chunks = [], this.err = e2, this.msg = this.strm.msg;\n      }, r2.Inflate = a, r2.inflate = o, r2.inflateRaw = function(e2, t2) {\n        return (t2 = t2 || {}).raw = true, o(e2, t2);\n      }, r2.ungzip = o;\n    }, { \"./utils/common\": 41, \"./utils/strings\": 42, \"./zlib/constants\": 44, \"./zlib/gzheader\": 47, \"./zlib/inflate\": 49, \"./zlib/messages\": 51, \"./zlib/zstream\": 53 }], 41: [function(e, t, r2) {\n      var n = \"undefined\" != typeof Uint8Array && \"undefined\" != typeof Uint16Array && \"undefined\" != typeof Int32Array;\n      r2.assign = function(e2) {\n        for (var t2 = Array.prototype.slice.call(arguments, 1); t2.length; ) {\n          var r3 = t2.shift();\n          if (r3) {\n            if (\"object\" != typeof r3) throw new TypeError(r3 + \"must be non-object\");\n            for (var n2 in r3) r3.hasOwnProperty(n2) && (e2[n2] = r3[n2]);\n          }\n        }\n        return e2;\n      }, r2.shrinkBuf = function(e2, t2) {\n        return e2.length === t2 ? e2 : e2.subarray ? e2.subarray(0, t2) : (e2.length = t2, e2);\n      };\n      var i = { arraySet: function(e2, t2, r3, n2, i2) {\n        if (t2.subarray && e2.subarray) e2.set(t2.subarray(r3, r3 + n2), i2);\n        else for (var s3 = 0; s3 < n2; s3++) e2[i2 + s3] = t2[r3 + s3];\n      }, flattenChunks: function(e2) {\n        var t2, r3, n2, i2, s3, a;\n        for (t2 = n2 = 0, r3 = e2.length; t2 < r3; t2++) n2 += e2[t2].length;\n        for (a = new Uint8Array(n2), t2 = i2 = 0, r3 = e2.length; t2 < r3; t2++) s3 = e2[t2], a.set(s3, i2), i2 += s3.length;\n        return a;\n      } }, s2 = { arraySet: function(e2, t2, r3, n2, i2) {\n        for (var s3 = 0; s3 < n2; s3++) e2[i2 + s3] = t2[r3 + s3];\n      }, flattenChunks: function(e2) {\n        return [].concat.apply([], e2);\n      } };\n      r2.setTyped = function(e2) {\n        e2 ? (r2.Buf8 = Uint8Array, r2.Buf16 = Uint16Array, r2.Buf32 = Int32Array, r2.assign(r2, i)) : (r2.Buf8 = Array, r2.Buf16 = Array, r2.Buf32 = Array, r2.assign(r2, s2));\n      }, r2.setTyped(n);\n    }, {}], 42: [function(e, t, r2) {\n      var h = e(\"./common\"), i = true, s2 = true;\n      try {\n        String.fromCharCode.apply(null, [0]);\n      } catch (e2) {\n        i = false;\n      }\n      try {\n        String.fromCharCode.apply(null, new Uint8Array(1));\n      } catch (e2) {\n        s2 = false;\n      }\n      for (var u = new h.Buf8(256), n = 0; n < 256; n++) u[n] = 252 <= n ? 6 : 248 <= n ? 5 : 240 <= n ? 4 : 224 <= n ? 3 : 192 <= n ? 2 : 1;\n      function l(e2, t2) {\n        if (t2 < 65537 && (e2.subarray && s2 || !e2.subarray && i)) return String.fromCharCode.apply(null, h.shrinkBuf(e2, t2));\n        for (var r3 = \"\", n2 = 0; n2 < t2; n2++) r3 += String.fromCharCode(e2[n2]);\n        return r3;\n      }\n      u[254] = u[254] = 1, r2.string2buf = function(e2) {\n        var t2, r3, n2, i2, s3, a = e2.length, o = 0;\n        for (i2 = 0; i2 < a; i2++) 55296 == (64512 & (r3 = e2.charCodeAt(i2))) && i2 + 1 < a && 56320 == (64512 & (n2 = e2.charCodeAt(i2 + 1))) && (r3 = 65536 + (r3 - 55296 << 10) + (n2 - 56320), i2++), o += r3 < 128 ? 1 : r3 < 2048 ? 2 : r3 < 65536 ? 3 : 4;\n        for (t2 = new h.Buf8(o), i2 = s3 = 0; s3 < o; i2++) 55296 == (64512 & (r3 = e2.charCodeAt(i2))) && i2 + 1 < a && 56320 == (64512 & (n2 = e2.charCodeAt(i2 + 1))) && (r3 = 65536 + (r3 - 55296 << 10) + (n2 - 56320), i2++), r3 < 128 ? t2[s3++] = r3 : (r3 < 2048 ? t2[s3++] = 192 | r3 >>> 6 : (r3 < 65536 ? t2[s3++] = 224 | r3 >>> 12 : (t2[s3++] = 240 | r3 >>> 18, t2[s3++] = 128 | r3 >>> 12 & 63), t2[s3++] = 128 | r3 >>> 6 & 63), t2[s3++] = 128 | 63 & r3);\n        return t2;\n      }, r2.buf2binstring = function(e2) {\n        return l(e2, e2.length);\n      }, r2.binstring2buf = function(e2) {\n        for (var t2 = new h.Buf8(e2.length), r3 = 0, n2 = t2.length; r3 < n2; r3++) t2[r3] = e2.charCodeAt(r3);\n        return t2;\n      }, r2.buf2string = function(e2, t2) {\n        var r3, n2, i2, s3, a = t2 || e2.length, o = new Array(2 * a);\n        for (r3 = n2 = 0; r3 < a; ) if ((i2 = e2[r3++]) < 128) o[n2++] = i2;\n        else if (4 < (s3 = u[i2])) o[n2++] = 65533, r3 += s3 - 1;\n        else {\n          for (i2 &= 2 === s3 ? 31 : 3 === s3 ? 15 : 7; 1 < s3 && r3 < a; ) i2 = i2 << 6 | 63 & e2[r3++], s3--;\n          1 < s3 ? o[n2++] = 65533 : i2 < 65536 ? o[n2++] = i2 : (i2 -= 65536, o[n2++] = 55296 | i2 >> 10 & 1023, o[n2++] = 56320 | 1023 & i2);\n        }\n        return l(o, n2);\n      }, r2.utf8border = function(e2, t2) {\n        var r3;\n        for ((t2 = t2 || e2.length) > e2.length && (t2 = e2.length), r3 = t2 - 1; 0 <= r3 && 128 == (192 & e2[r3]); ) r3--;\n        return r3 < 0 ? t2 : 0 === r3 ? t2 : r3 + u[e2[r3]] > t2 ? r3 : t2;\n      };\n    }, { \"./common\": 41 }], 43: [function(e, t, r2) {\n      t.exports = function(e2, t2, r3, n) {\n        for (var i = 65535 & e2 | 0, s2 = e2 >>> 16 & 65535 | 0, a = 0; 0 !== r3; ) {\n          for (r3 -= a = 2e3 < r3 ? 2e3 : r3; s2 = s2 + (i = i + t2[n++] | 0) | 0, --a; ) ;\n          i %= 65521, s2 %= 65521;\n        }\n        return i | s2 << 16 | 0;\n      };\n    }, {}], 44: [function(e, t, r2) {\n      t.exports = { Z_NO_FLUSH: 0, Z_PARTIAL_FLUSH: 1, Z_SYNC_FLUSH: 2, Z_FULL_FLUSH: 3, Z_FINISH: 4, Z_BLOCK: 5, Z_TREES: 6, Z_OK: 0, Z_STREAM_END: 1, Z_NEED_DICT: 2, Z_ERRNO: -1, Z_STREAM_ERROR: -2, Z_DATA_ERROR: -3, Z_BUF_ERROR: -5, Z_NO_COMPRESSION: 0, Z_BEST_SPEED: 1, Z_BEST_COMPRESSION: 9, Z_DEFAULT_COMPRESSION: -1, Z_FILTERED: 1, Z_HUFFMAN_ONLY: 2, Z_RLE: 3, Z_FIXED: 4, Z_DEFAULT_STRATEGY: 0, Z_BINARY: 0, Z_TEXT: 1, Z_UNKNOWN: 2, Z_DEFLATED: 8 };\n    }, {}], 45: [function(e, t, r2) {\n      var o = function() {\n        for (var e2, t2 = [], r3 = 0; r3 < 256; r3++) {\n          e2 = r3;\n          for (var n = 0; n < 8; n++) e2 = 1 & e2 ? 3988292384 ^ e2 >>> 1 : e2 >>> 1;\n          t2[r3] = e2;\n        }\n        return t2;\n      }();\n      t.exports = function(e2, t2, r3, n) {\n        var i = o, s2 = n + r3;\n        e2 ^= -1;\n        for (var a = n; a < s2; a++) e2 = e2 >>> 8 ^ i[255 & (e2 ^ t2[a])];\n        return -1 ^ e2;\n      };\n    }, {}], 46: [function(e, t, r2) {\n      var h, c = e(\"../utils/common\"), u = e(\"./trees\"), d = e(\"./adler32\"), p = e(\"./crc32\"), n = e(\"./messages\"), l = 0, f2 = 4, m = 0, _ = -2, g = -1, b = 4, i = 2, v = 8, y = 9, s2 = 286, a = 30, o = 19, w = 2 * s2 + 1, k = 15, x = 3, S = 258, z = S + x + 1, C = 42, E = 113, A = 1, I = 2, O = 3, B = 4;\n      function R2(e2, t2) {\n        return e2.msg = n[t2], t2;\n      }\n      function T(e2) {\n        return (e2 << 1) - (4 < e2 ? 9 : 0);\n      }\n      function D(e2) {\n        for (var t2 = e2.length; 0 <= --t2; ) e2[t2] = 0;\n      }\n      function F(e2) {\n        var t2 = e2.state, r3 = t2.pending;\n        r3 > e2.avail_out && (r3 = e2.avail_out), 0 !== r3 && (c.arraySet(e2.output, t2.pending_buf, t2.pending_out, r3, e2.next_out), e2.next_out += r3, t2.pending_out += r3, e2.total_out += r3, e2.avail_out -= r3, t2.pending -= r3, 0 === t2.pending && (t2.pending_out = 0));\n      }\n      function N(e2, t2) {\n        u._tr_flush_block(e2, 0 <= e2.block_start ? e2.block_start : -1, e2.strstart - e2.block_start, t2), e2.block_start = e2.strstart, F(e2.strm);\n      }\n      function U(e2, t2) {\n        e2.pending_buf[e2.pending++] = t2;\n      }\n      function P(e2, t2) {\n        e2.pending_buf[e2.pending++] = t2 >>> 8 & 255, e2.pending_buf[e2.pending++] = 255 & t2;\n      }\n      function L(e2, t2) {\n        var r3, n2, i2 = e2.max_chain_length, s3 = e2.strstart, a2 = e2.prev_length, o2 = e2.nice_match, h2 = e2.strstart > e2.w_size - z ? e2.strstart - (e2.w_size - z) : 0, u2 = e2.window, l2 = e2.w_mask, f3 = e2.prev, c2 = e2.strstart + S, d2 = u2[s3 + a2 - 1], p2 = u2[s3 + a2];\n        e2.prev_length >= e2.good_match && (i2 >>= 2), o2 > e2.lookahead && (o2 = e2.lookahead);\n        do {\n          if (u2[(r3 = t2) + a2] === p2 && u2[r3 + a2 - 1] === d2 && u2[r3] === u2[s3] && u2[++r3] === u2[s3 + 1]) {\n            s3 += 2, r3++;\n            do {\n            } while (u2[++s3] === u2[++r3] && u2[++s3] === u2[++r3] && u2[++s3] === u2[++r3] && u2[++s3] === u2[++r3] && u2[++s3] === u2[++r3] && u2[++s3] === u2[++r3] && u2[++s3] === u2[++r3] && u2[++s3] === u2[++r3] && s3 < c2);\n            if (n2 = S - (c2 - s3), s3 = c2 - S, a2 < n2) {\n              if (e2.match_start = t2, o2 <= (a2 = n2)) break;\n              d2 = u2[s3 + a2 - 1], p2 = u2[s3 + a2];\n            }\n          }\n        } while ((t2 = f3[t2 & l2]) > h2 && 0 != --i2);\n        return a2 <= e2.lookahead ? a2 : e2.lookahead;\n      }\n      function j(e2) {\n        var t2, r3, n2, i2, s3, a2, o2, h2, u2, l2, f3 = e2.w_size;\n        do {\n          if (i2 = e2.window_size - e2.lookahead - e2.strstart, e2.strstart >= f3 + (f3 - z)) {\n            for (c.arraySet(e2.window, e2.window, f3, f3, 0), e2.match_start -= f3, e2.strstart -= f3, e2.block_start -= f3, t2 = r3 = e2.hash_size; n2 = e2.head[--t2], e2.head[t2] = f3 <= n2 ? n2 - f3 : 0, --r3; ) ;\n            for (t2 = r3 = f3; n2 = e2.prev[--t2], e2.prev[t2] = f3 <= n2 ? n2 - f3 : 0, --r3; ) ;\n            i2 += f3;\n          }\n          if (0 === e2.strm.avail_in) break;\n          if (a2 = e2.strm, o2 = e2.window, h2 = e2.strstart + e2.lookahead, u2 = i2, l2 = void 0, l2 = a2.avail_in, u2 < l2 && (l2 = u2), r3 = 0 === l2 ? 0 : (a2.avail_in -= l2, c.arraySet(o2, a2.input, a2.next_in, l2, h2), 1 === a2.state.wrap ? a2.adler = d(a2.adler, o2, l2, h2) : 2 === a2.state.wrap && (a2.adler = p(a2.adler, o2, l2, h2)), a2.next_in += l2, a2.total_in += l2, l2), e2.lookahead += r3, e2.lookahead + e2.insert >= x) for (s3 = e2.strstart - e2.insert, e2.ins_h = e2.window[s3], e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[s3 + 1]) & e2.hash_mask; e2.insert && (e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[s3 + x - 1]) & e2.hash_mask, e2.prev[s3 & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = s3, s3++, e2.insert--, !(e2.lookahead + e2.insert < x)); ) ;\n        } while (e2.lookahead < z && 0 !== e2.strm.avail_in);\n      }\n      function Z(e2, t2) {\n        for (var r3, n2; ; ) {\n          if (e2.lookahead < z) {\n            if (j(e2), e2.lookahead < z && t2 === l) return A;\n            if (0 === e2.lookahead) break;\n          }\n          if (r3 = 0, e2.lookahead >= x && (e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + x - 1]) & e2.hash_mask, r3 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart), 0 !== r3 && e2.strstart - r3 <= e2.w_size - z && (e2.match_length = L(e2, r3)), e2.match_length >= x) if (n2 = u._tr_tally(e2, e2.strstart - e2.match_start, e2.match_length - x), e2.lookahead -= e2.match_length, e2.match_length <= e2.max_lazy_match && e2.lookahead >= x) {\n            for (e2.match_length--; e2.strstart++, e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + x - 1]) & e2.hash_mask, r3 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart, 0 != --e2.match_length; ) ;\n            e2.strstart++;\n          } else e2.strstart += e2.match_length, e2.match_length = 0, e2.ins_h = e2.window[e2.strstart], e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + 1]) & e2.hash_mask;\n          else n2 = u._tr_tally(e2, 0, e2.window[e2.strstart]), e2.lookahead--, e2.strstart++;\n          if (n2 && (N(e2, false), 0 === e2.strm.avail_out)) return A;\n        }\n        return e2.insert = e2.strstart < x - 1 ? e2.strstart : x - 1, t2 === f2 ? (N(e2, true), 0 === e2.strm.avail_out ? O : B) : e2.last_lit && (N(e2, false), 0 === e2.strm.avail_out) ? A : I;\n      }\n      function W(e2, t2) {\n        for (var r3, n2, i2; ; ) {\n          if (e2.lookahead < z) {\n            if (j(e2), e2.lookahead < z && t2 === l) return A;\n            if (0 === e2.lookahead) break;\n          }\n          if (r3 = 0, e2.lookahead >= x && (e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + x - 1]) & e2.hash_mask, r3 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart), e2.prev_length = e2.match_length, e2.prev_match = e2.match_start, e2.match_length = x - 1, 0 !== r3 && e2.prev_length < e2.max_lazy_match && e2.strstart - r3 <= e2.w_size - z && (e2.match_length = L(e2, r3), e2.match_length <= 5 && (1 === e2.strategy || e2.match_length === x && 4096 < e2.strstart - e2.match_start) && (e2.match_length = x - 1)), e2.prev_length >= x && e2.match_length <= e2.prev_length) {\n            for (i2 = e2.strstart + e2.lookahead - x, n2 = u._tr_tally(e2, e2.strstart - 1 - e2.prev_match, e2.prev_length - x), e2.lookahead -= e2.prev_length - 1, e2.prev_length -= 2; ++e2.strstart <= i2 && (e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + x - 1]) & e2.hash_mask, r3 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart), 0 != --e2.prev_length; ) ;\n            if (e2.match_available = 0, e2.match_length = x - 1, e2.strstart++, n2 && (N(e2, false), 0 === e2.strm.avail_out)) return A;\n          } else if (e2.match_available) {\n            if ((n2 = u._tr_tally(e2, 0, e2.window[e2.strstart - 1])) && N(e2, false), e2.strstart++, e2.lookahead--, 0 === e2.strm.avail_out) return A;\n          } else e2.match_available = 1, e2.strstart++, e2.lookahead--;\n        }\n        return e2.match_available && (n2 = u._tr_tally(e2, 0, e2.window[e2.strstart - 1]), e2.match_available = 0), e2.insert = e2.strstart < x - 1 ? e2.strstart : x - 1, t2 === f2 ? (N(e2, true), 0 === e2.strm.avail_out ? O : B) : e2.last_lit && (N(e2, false), 0 === e2.strm.avail_out) ? A : I;\n      }\n      function M(e2, t2, r3, n2, i2) {\n        this.good_length = e2, this.max_lazy = t2, this.nice_length = r3, this.max_chain = n2, this.func = i2;\n      }\n      function H() {\n        this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = v, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new c.Buf16(2 * w), this.dyn_dtree = new c.Buf16(2 * (2 * a + 1)), this.bl_tree = new c.Buf16(2 * (2 * o + 1)), D(this.dyn_ltree), D(this.dyn_dtree), D(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new c.Buf16(k + 1), this.heap = new c.Buf16(2 * s2 + 1), D(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new c.Buf16(2 * s2 + 1), D(this.depth), this.l_buf = 0, this.lit_bufsize = 0, this.last_lit = 0, this.d_buf = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;\n      }\n      function G(e2) {\n        var t2;\n        return e2 && e2.state ? (e2.total_in = e2.total_out = 0, e2.data_type = i, (t2 = e2.state).pending = 0, t2.pending_out = 0, t2.wrap < 0 && (t2.wrap = -t2.wrap), t2.status = t2.wrap ? C : E, e2.adler = 2 === t2.wrap ? 0 : 1, t2.last_flush = l, u._tr_init(t2), m) : R2(e2, _);\n      }\n      function K2(e2) {\n        var t2 = G(e2);\n        return t2 === m && function(e3) {\n          e3.window_size = 2 * e3.w_size, D(e3.head), e3.max_lazy_match = h[e3.level].max_lazy, e3.good_match = h[e3.level].good_length, e3.nice_match = h[e3.level].nice_length, e3.max_chain_length = h[e3.level].max_chain, e3.strstart = 0, e3.block_start = 0, e3.lookahead = 0, e3.insert = 0, e3.match_length = e3.prev_length = x - 1, e3.match_available = 0, e3.ins_h = 0;\n        }(e2.state), t2;\n      }\n      function Y(e2, t2, r3, n2, i2, s3) {\n        if (!e2) return _;\n        var a2 = 1;\n        if (t2 === g && (t2 = 6), n2 < 0 ? (a2 = 0, n2 = -n2) : 15 < n2 && (a2 = 2, n2 -= 16), i2 < 1 || y < i2 || r3 !== v || n2 < 8 || 15 < n2 || t2 < 0 || 9 < t2 || s3 < 0 || b < s3) return R2(e2, _);\n        8 === n2 && (n2 = 9);\n        var o2 = new H();\n        return (e2.state = o2).strm = e2, o2.wrap = a2, o2.gzhead = null, o2.w_bits = n2, o2.w_size = 1 << o2.w_bits, o2.w_mask = o2.w_size - 1, o2.hash_bits = i2 + 7, o2.hash_size = 1 << o2.hash_bits, o2.hash_mask = o2.hash_size - 1, o2.hash_shift = ~~((o2.hash_bits + x - 1) / x), o2.window = new c.Buf8(2 * o2.w_size), o2.head = new c.Buf16(o2.hash_size), o2.prev = new c.Buf16(o2.w_size), o2.lit_bufsize = 1 << i2 + 6, o2.pending_buf_size = 4 * o2.lit_bufsize, o2.pending_buf = new c.Buf8(o2.pending_buf_size), o2.d_buf = 1 * o2.lit_bufsize, o2.l_buf = 3 * o2.lit_bufsize, o2.level = t2, o2.strategy = s3, o2.method = r3, K2(e2);\n      }\n      h = [new M(0, 0, 0, 0, function(e2, t2) {\n        var r3 = 65535;\n        for (r3 > e2.pending_buf_size - 5 && (r3 = e2.pending_buf_size - 5); ; ) {\n          if (e2.lookahead <= 1) {\n            if (j(e2), 0 === e2.lookahead && t2 === l) return A;\n            if (0 === e2.lookahead) break;\n          }\n          e2.strstart += e2.lookahead, e2.lookahead = 0;\n          var n2 = e2.block_start + r3;\n          if ((0 === e2.strstart || e2.strstart >= n2) && (e2.lookahead = e2.strstart - n2, e2.strstart = n2, N(e2, false), 0 === e2.strm.avail_out)) return A;\n          if (e2.strstart - e2.block_start >= e2.w_size - z && (N(e2, false), 0 === e2.strm.avail_out)) return A;\n        }\n        return e2.insert = 0, t2 === f2 ? (N(e2, true), 0 === e2.strm.avail_out ? O : B) : (e2.strstart > e2.block_start && (N(e2, false), e2.strm.avail_out), A);\n      }), new M(4, 4, 8, 4, Z), new M(4, 5, 16, 8, Z), new M(4, 6, 32, 32, Z), new M(4, 4, 16, 16, W), new M(8, 16, 32, 32, W), new M(8, 16, 128, 128, W), new M(8, 32, 128, 256, W), new M(32, 128, 258, 1024, W), new M(32, 258, 258, 4096, W)], r2.deflateInit = function(e2, t2) {\n        return Y(e2, t2, v, 15, 8, 0);\n      }, r2.deflateInit2 = Y, r2.deflateReset = K2, r2.deflateResetKeep = G, r2.deflateSetHeader = function(e2, t2) {\n        return e2 && e2.state ? 2 !== e2.state.wrap ? _ : (e2.state.gzhead = t2, m) : _;\n      }, r2.deflate = function(e2, t2) {\n        var r3, n2, i2, s3;\n        if (!e2 || !e2.state || 5 < t2 || t2 < 0) return e2 ? R2(e2, _) : _;\n        if (n2 = e2.state, !e2.output || !e2.input && 0 !== e2.avail_in || 666 === n2.status && t2 !== f2) return R2(e2, 0 === e2.avail_out ? -5 : _);\n        if (n2.strm = e2, r3 = n2.last_flush, n2.last_flush = t2, n2.status === C) if (2 === n2.wrap) e2.adler = 0, U(n2, 31), U(n2, 139), U(n2, 8), n2.gzhead ? (U(n2, (n2.gzhead.text ? 1 : 0) + (n2.gzhead.hcrc ? 2 : 0) + (n2.gzhead.extra ? 4 : 0) + (n2.gzhead.name ? 8 : 0) + (n2.gzhead.comment ? 16 : 0)), U(n2, 255 & n2.gzhead.time), U(n2, n2.gzhead.time >> 8 & 255), U(n2, n2.gzhead.time >> 16 & 255), U(n2, n2.gzhead.time >> 24 & 255), U(n2, 9 === n2.level ? 2 : 2 <= n2.strategy || n2.level < 2 ? 4 : 0), U(n2, 255 & n2.gzhead.os), n2.gzhead.extra && n2.gzhead.extra.length && (U(n2, 255 & n2.gzhead.extra.length), U(n2, n2.gzhead.extra.length >> 8 & 255)), n2.gzhead.hcrc && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending, 0)), n2.gzindex = 0, n2.status = 69) : (U(n2, 0), U(n2, 0), U(n2, 0), U(n2, 0), U(n2, 0), U(n2, 9 === n2.level ? 2 : 2 <= n2.strategy || n2.level < 2 ? 4 : 0), U(n2, 3), n2.status = E);\n        else {\n          var a2 = v + (n2.w_bits - 8 << 4) << 8;\n          a2 |= (2 <= n2.strategy || n2.level < 2 ? 0 : n2.level < 6 ? 1 : 6 === n2.level ? 2 : 3) << 6, 0 !== n2.strstart && (a2 |= 32), a2 += 31 - a2 % 31, n2.status = E, P(n2, a2), 0 !== n2.strstart && (P(n2, e2.adler >>> 16), P(n2, 65535 & e2.adler)), e2.adler = 1;\n        }\n        if (69 === n2.status) if (n2.gzhead.extra) {\n          for (i2 = n2.pending; n2.gzindex < (65535 & n2.gzhead.extra.length) && (n2.pending !== n2.pending_buf_size || (n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), F(e2), i2 = n2.pending, n2.pending !== n2.pending_buf_size)); ) U(n2, 255 & n2.gzhead.extra[n2.gzindex]), n2.gzindex++;\n          n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), n2.gzindex === n2.gzhead.extra.length && (n2.gzindex = 0, n2.status = 73);\n        } else n2.status = 73;\n        if (73 === n2.status) if (n2.gzhead.name) {\n          i2 = n2.pending;\n          do {\n            if (n2.pending === n2.pending_buf_size && (n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), F(e2), i2 = n2.pending, n2.pending === n2.pending_buf_size)) {\n              s3 = 1;\n              break;\n            }\n            s3 = n2.gzindex < n2.gzhead.name.length ? 255 & n2.gzhead.name.charCodeAt(n2.gzindex++) : 0, U(n2, s3);\n          } while (0 !== s3);\n          n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), 0 === s3 && (n2.gzindex = 0, n2.status = 91);\n        } else n2.status = 91;\n        if (91 === n2.status) if (n2.gzhead.comment) {\n          i2 = n2.pending;\n          do {\n            if (n2.pending === n2.pending_buf_size && (n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), F(e2), i2 = n2.pending, n2.pending === n2.pending_buf_size)) {\n              s3 = 1;\n              break;\n            }\n            s3 = n2.gzindex < n2.gzhead.comment.length ? 255 & n2.gzhead.comment.charCodeAt(n2.gzindex++) : 0, U(n2, s3);\n          } while (0 !== s3);\n          n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), 0 === s3 && (n2.status = 103);\n        } else n2.status = 103;\n        if (103 === n2.status && (n2.gzhead.hcrc ? (n2.pending + 2 > n2.pending_buf_size && F(e2), n2.pending + 2 <= n2.pending_buf_size && (U(n2, 255 & e2.adler), U(n2, e2.adler >> 8 & 255), e2.adler = 0, n2.status = E)) : n2.status = E), 0 !== n2.pending) {\n          if (F(e2), 0 === e2.avail_out) return n2.last_flush = -1, m;\n        } else if (0 === e2.avail_in && T(t2) <= T(r3) && t2 !== f2) return R2(e2, -5);\n        if (666 === n2.status && 0 !== e2.avail_in) return R2(e2, -5);\n        if (0 !== e2.avail_in || 0 !== n2.lookahead || t2 !== l && 666 !== n2.status) {\n          var o2 = 2 === n2.strategy ? function(e3, t3) {\n            for (var r4; ; ) {\n              if (0 === e3.lookahead && (j(e3), 0 === e3.lookahead)) {\n                if (t3 === l) return A;\n                break;\n              }\n              if (e3.match_length = 0, r4 = u._tr_tally(e3, 0, e3.window[e3.strstart]), e3.lookahead--, e3.strstart++, r4 && (N(e3, false), 0 === e3.strm.avail_out)) return A;\n            }\n            return e3.insert = 0, t3 === f2 ? (N(e3, true), 0 === e3.strm.avail_out ? O : B) : e3.last_lit && (N(e3, false), 0 === e3.strm.avail_out) ? A : I;\n          }(n2, t2) : 3 === n2.strategy ? function(e3, t3) {\n            for (var r4, n3, i3, s4, a3 = e3.window; ; ) {\n              if (e3.lookahead <= S) {\n                if (j(e3), e3.lookahead <= S && t3 === l) return A;\n                if (0 === e3.lookahead) break;\n              }\n              if (e3.match_length = 0, e3.lookahead >= x && 0 < e3.strstart && (n3 = a3[i3 = e3.strstart - 1]) === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3]) {\n                s4 = e3.strstart + S;\n                do {\n                } while (n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && i3 < s4);\n                e3.match_length = S - (s4 - i3), e3.match_length > e3.lookahead && (e3.match_length = e3.lookahead);\n              }\n              if (e3.match_length >= x ? (r4 = u._tr_tally(e3, 1, e3.match_length - x), e3.lookahead -= e3.match_length, e3.strstart += e3.match_length, e3.match_length = 0) : (r4 = u._tr_tally(e3, 0, e3.window[e3.strstart]), e3.lookahead--, e3.strstart++), r4 && (N(e3, false), 0 === e3.strm.avail_out)) return A;\n            }\n            return e3.insert = 0, t3 === f2 ? (N(e3, true), 0 === e3.strm.avail_out ? O : B) : e3.last_lit && (N(e3, false), 0 === e3.strm.avail_out) ? A : I;\n          }(n2, t2) : h[n2.level].func(n2, t2);\n          if (o2 !== O && o2 !== B || (n2.status = 666), o2 === A || o2 === O) return 0 === e2.avail_out && (n2.last_flush = -1), m;\n          if (o2 === I && (1 === t2 ? u._tr_align(n2) : 5 !== t2 && (u._tr_stored_block(n2, 0, 0, false), 3 === t2 && (D(n2.head), 0 === n2.lookahead && (n2.strstart = 0, n2.block_start = 0, n2.insert = 0))), F(e2), 0 === e2.avail_out)) return n2.last_flush = -1, m;\n        }\n        return t2 !== f2 ? m : n2.wrap <= 0 ? 1 : (2 === n2.wrap ? (U(n2, 255 & e2.adler), U(n2, e2.adler >> 8 & 255), U(n2, e2.adler >> 16 & 255), U(n2, e2.adler >> 24 & 255), U(n2, 255 & e2.total_in), U(n2, e2.total_in >> 8 & 255), U(n2, e2.total_in >> 16 & 255), U(n2, e2.total_in >> 24 & 255)) : (P(n2, e2.adler >>> 16), P(n2, 65535 & e2.adler)), F(e2), 0 < n2.wrap && (n2.wrap = -n2.wrap), 0 !== n2.pending ? m : 1);\n      }, r2.deflateEnd = function(e2) {\n        var t2;\n        return e2 && e2.state ? (t2 = e2.state.status) !== C && 69 !== t2 && 73 !== t2 && 91 !== t2 && 103 !== t2 && t2 !== E && 666 !== t2 ? R2(e2, _) : (e2.state = null, t2 === E ? R2(e2, -3) : m) : _;\n      }, r2.deflateSetDictionary = function(e2, t2) {\n        var r3, n2, i2, s3, a2, o2, h2, u2, l2 = t2.length;\n        if (!e2 || !e2.state) return _;\n        if (2 === (s3 = (r3 = e2.state).wrap) || 1 === s3 && r3.status !== C || r3.lookahead) return _;\n        for (1 === s3 && (e2.adler = d(e2.adler, t2, l2, 0)), r3.wrap = 0, l2 >= r3.w_size && (0 === s3 && (D(r3.head), r3.strstart = 0, r3.block_start = 0, r3.insert = 0), u2 = new c.Buf8(r3.w_size), c.arraySet(u2, t2, l2 - r3.w_size, r3.w_size, 0), t2 = u2, l2 = r3.w_size), a2 = e2.avail_in, o2 = e2.next_in, h2 = e2.input, e2.avail_in = l2, e2.next_in = 0, e2.input = t2, j(r3); r3.lookahead >= x; ) {\n          for (n2 = r3.strstart, i2 = r3.lookahead - (x - 1); r3.ins_h = (r3.ins_h << r3.hash_shift ^ r3.window[n2 + x - 1]) & r3.hash_mask, r3.prev[n2 & r3.w_mask] = r3.head[r3.ins_h], r3.head[r3.ins_h] = n2, n2++, --i2; ) ;\n          r3.strstart = n2, r3.lookahead = x - 1, j(r3);\n        }\n        return r3.strstart += r3.lookahead, r3.block_start = r3.strstart, r3.insert = r3.lookahead, r3.lookahead = 0, r3.match_length = r3.prev_length = x - 1, r3.match_available = 0, e2.next_in = o2, e2.input = h2, e2.avail_in = a2, r3.wrap = s3, m;\n      }, r2.deflateInfo = \"pako deflate (from Nodeca project)\";\n    }, { \"../utils/common\": 41, \"./adler32\": 43, \"./crc32\": 45, \"./messages\": 51, \"./trees\": 52 }], 47: [function(e, t, r2) {\n      t.exports = function() {\n        this.text = 0, this.time = 0, this.xflags = 0, this.os = 0, this.extra = null, this.extra_len = 0, this.name = \"\", this.comment = \"\", this.hcrc = 0, this.done = false;\n      };\n    }, {}], 48: [function(e, t, r2) {\n      t.exports = function(e2, t2) {\n        var r3, n, i, s2, a, o, h, u, l, f2, c, d, p, m, _, g, b, v, y, w, k, x, S, z, C;\n        r3 = e2.state, n = e2.next_in, z = e2.input, i = n + (e2.avail_in - 5), s2 = e2.next_out, C = e2.output, a = s2 - (t2 - e2.avail_out), o = s2 + (e2.avail_out - 257), h = r3.dmax, u = r3.wsize, l = r3.whave, f2 = r3.wnext, c = r3.window, d = r3.hold, p = r3.bits, m = r3.lencode, _ = r3.distcode, g = (1 << r3.lenbits) - 1, b = (1 << r3.distbits) - 1;\n        e: do {\n          p < 15 && (d += z[n++] << p, p += 8, d += z[n++] << p, p += 8), v = m[d & g];\n          t: for (; ; ) {\n            if (d >>>= y = v >>> 24, p -= y, 0 === (y = v >>> 16 & 255)) C[s2++] = 65535 & v;\n            else {\n              if (!(16 & y)) {\n                if (0 == (64 & y)) {\n                  v = m[(65535 & v) + (d & (1 << y) - 1)];\n                  continue t;\n                }\n                if (32 & y) {\n                  r3.mode = 12;\n                  break e;\n                }\n                e2.msg = \"invalid literal/length code\", r3.mode = 30;\n                break e;\n              }\n              w = 65535 & v, (y &= 15) && (p < y && (d += z[n++] << p, p += 8), w += d & (1 << y) - 1, d >>>= y, p -= y), p < 15 && (d += z[n++] << p, p += 8, d += z[n++] << p, p += 8), v = _[d & b];\n              r: for (; ; ) {\n                if (d >>>= y = v >>> 24, p -= y, !(16 & (y = v >>> 16 & 255))) {\n                  if (0 == (64 & y)) {\n                    v = _[(65535 & v) + (d & (1 << y) - 1)];\n                    continue r;\n                  }\n                  e2.msg = \"invalid distance code\", r3.mode = 30;\n                  break e;\n                }\n                if (k = 65535 & v, p < (y &= 15) && (d += z[n++] << p, (p += 8) < y && (d += z[n++] << p, p += 8)), h < (k += d & (1 << y) - 1)) {\n                  e2.msg = \"invalid distance too far back\", r3.mode = 30;\n                  break e;\n                }\n                if (d >>>= y, p -= y, (y = s2 - a) < k) {\n                  if (l < (y = k - y) && r3.sane) {\n                    e2.msg = \"invalid distance too far back\", r3.mode = 30;\n                    break e;\n                  }\n                  if (S = c, (x = 0) === f2) {\n                    if (x += u - y, y < w) {\n                      for (w -= y; C[s2++] = c[x++], --y; ) ;\n                      x = s2 - k, S = C;\n                    }\n                  } else if (f2 < y) {\n                    if (x += u + f2 - y, (y -= f2) < w) {\n                      for (w -= y; C[s2++] = c[x++], --y; ) ;\n                      if (x = 0, f2 < w) {\n                        for (w -= y = f2; C[s2++] = c[x++], --y; ) ;\n                        x = s2 - k, S = C;\n                      }\n                    }\n                  } else if (x += f2 - y, y < w) {\n                    for (w -= y; C[s2++] = c[x++], --y; ) ;\n                    x = s2 - k, S = C;\n                  }\n                  for (; 2 < w; ) C[s2++] = S[x++], C[s2++] = S[x++], C[s2++] = S[x++], w -= 3;\n                  w && (C[s2++] = S[x++], 1 < w && (C[s2++] = S[x++]));\n                } else {\n                  for (x = s2 - k; C[s2++] = C[x++], C[s2++] = C[x++], C[s2++] = C[x++], 2 < (w -= 3); ) ;\n                  w && (C[s2++] = C[x++], 1 < w && (C[s2++] = C[x++]));\n                }\n                break;\n              }\n            }\n            break;\n          }\n        } while (n < i && s2 < o);\n        n -= w = p >> 3, d &= (1 << (p -= w << 3)) - 1, e2.next_in = n, e2.next_out = s2, e2.avail_in = n < i ? i - n + 5 : 5 - (n - i), e2.avail_out = s2 < o ? o - s2 + 257 : 257 - (s2 - o), r3.hold = d, r3.bits = p;\n      };\n    }, {}], 49: [function(e, t, r2) {\n      var I = e(\"../utils/common\"), O = e(\"./adler32\"), B = e(\"./crc32\"), R2 = e(\"./inffast\"), T = e(\"./inftrees\"), D = 1, F = 2, N = 0, U = -2, P = 1, n = 852, i = 592;\n      function L(e2) {\n        return (e2 >>> 24 & 255) + (e2 >>> 8 & 65280) + ((65280 & e2) << 8) + ((255 & e2) << 24);\n      }\n      function s2() {\n        this.mode = 0, this.last = false, this.wrap = 0, this.havedict = false, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new I.Buf16(320), this.work = new I.Buf16(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;\n      }\n      function a(e2) {\n        var t2;\n        return e2 && e2.state ? (t2 = e2.state, e2.total_in = e2.total_out = t2.total = 0, e2.msg = \"\", t2.wrap && (e2.adler = 1 & t2.wrap), t2.mode = P, t2.last = 0, t2.havedict = 0, t2.dmax = 32768, t2.head = null, t2.hold = 0, t2.bits = 0, t2.lencode = t2.lendyn = new I.Buf32(n), t2.distcode = t2.distdyn = new I.Buf32(i), t2.sane = 1, t2.back = -1, N) : U;\n      }\n      function o(e2) {\n        var t2;\n        return e2 && e2.state ? ((t2 = e2.state).wsize = 0, t2.whave = 0, t2.wnext = 0, a(e2)) : U;\n      }\n      function h(e2, t2) {\n        var r3, n2;\n        return e2 && e2.state ? (n2 = e2.state, t2 < 0 ? (r3 = 0, t2 = -t2) : (r3 = 1 + (t2 >> 4), t2 < 48 && (t2 &= 15)), t2 && (t2 < 8 || 15 < t2) ? U : (null !== n2.window && n2.wbits !== t2 && (n2.window = null), n2.wrap = r3, n2.wbits = t2, o(e2))) : U;\n      }\n      function u(e2, t2) {\n        var r3, n2;\n        return e2 ? (n2 = new s2(), (e2.state = n2).window = null, (r3 = h(e2, t2)) !== N && (e2.state = null), r3) : U;\n      }\n      var l, f2, c = true;\n      function j(e2) {\n        if (c) {\n          var t2;\n          for (l = new I.Buf32(512), f2 = new I.Buf32(32), t2 = 0; t2 < 144; ) e2.lens[t2++] = 8;\n          for (; t2 < 256; ) e2.lens[t2++] = 9;\n          for (; t2 < 280; ) e2.lens[t2++] = 7;\n          for (; t2 < 288; ) e2.lens[t2++] = 8;\n          for (T(D, e2.lens, 0, 288, l, 0, e2.work, { bits: 9 }), t2 = 0; t2 < 32; ) e2.lens[t2++] = 5;\n          T(F, e2.lens, 0, 32, f2, 0, e2.work, { bits: 5 }), c = false;\n        }\n        e2.lencode = l, e2.lenbits = 9, e2.distcode = f2, e2.distbits = 5;\n      }\n      function Z(e2, t2, r3, n2) {\n        var i2, s3 = e2.state;\n        return null === s3.window && (s3.wsize = 1 << s3.wbits, s3.wnext = 0, s3.whave = 0, s3.window = new I.Buf8(s3.wsize)), n2 >= s3.wsize ? (I.arraySet(s3.window, t2, r3 - s3.wsize, s3.wsize, 0), s3.wnext = 0, s3.whave = s3.wsize) : (n2 < (i2 = s3.wsize - s3.wnext) && (i2 = n2), I.arraySet(s3.window, t2, r3 - n2, i2, s3.wnext), (n2 -= i2) ? (I.arraySet(s3.window, t2, r3 - n2, n2, 0), s3.wnext = n2, s3.whave = s3.wsize) : (s3.wnext += i2, s3.wnext === s3.wsize && (s3.wnext = 0), s3.whave < s3.wsize && (s3.whave += i2))), 0;\n      }\n      r2.inflateReset = o, r2.inflateReset2 = h, r2.inflateResetKeep = a, r2.inflateInit = function(e2) {\n        return u(e2, 15);\n      }, r2.inflateInit2 = u, r2.inflate = function(e2, t2) {\n        var r3, n2, i2, s3, a2, o2, h2, u2, l2, f3, c2, d, p, m, _, g, b, v, y, w, k, x, S, z, C = 0, E = new I.Buf8(4), A = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n        if (!e2 || !e2.state || !e2.output || !e2.input && 0 !== e2.avail_in) return U;\n        12 === (r3 = e2.state).mode && (r3.mode = 13), a2 = e2.next_out, i2 = e2.output, h2 = e2.avail_out, s3 = e2.next_in, n2 = e2.input, o2 = e2.avail_in, u2 = r3.hold, l2 = r3.bits, f3 = o2, c2 = h2, x = N;\n        e: for (; ; ) switch (r3.mode) {\n          case P:\n            if (0 === r3.wrap) {\n              r3.mode = 13;\n              break;\n            }\n            for (; l2 < 16; ) {\n              if (0 === o2) break e;\n              o2--, u2 += n2[s3++] << l2, l2 += 8;\n            }\n            if (2 & r3.wrap && 35615 === u2) {\n              E[r3.check = 0] = 255 & u2, E[1] = u2 >>> 8 & 255, r3.check = B(r3.check, E, 2, 0), l2 = u2 = 0, r3.mode = 2;\n              break;\n            }\n            if (r3.flags = 0, r3.head && (r3.head.done = false), !(1 & r3.wrap) || (((255 & u2) << 8) + (u2 >> 8)) % 31) {\n              e2.msg = \"incorrect header check\", r3.mode = 30;\n              break;\n            }\n            if (8 != (15 & u2)) {\n              e2.msg = \"unknown compression method\", r3.mode = 30;\n              break;\n            }\n            if (l2 -= 4, k = 8 + (15 & (u2 >>>= 4)), 0 === r3.wbits) r3.wbits = k;\n            else if (k > r3.wbits) {\n              e2.msg = \"invalid window size\", r3.mode = 30;\n              break;\n            }\n            r3.dmax = 1 << k, e2.adler = r3.check = 1, r3.mode = 512 & u2 ? 10 : 12, l2 = u2 = 0;\n            break;\n          case 2:\n            for (; l2 < 16; ) {\n              if (0 === o2) break e;\n              o2--, u2 += n2[s3++] << l2, l2 += 8;\n            }\n            if (r3.flags = u2, 8 != (255 & r3.flags)) {\n              e2.msg = \"unknown compression method\", r3.mode = 30;\n              break;\n            }\n            if (57344 & r3.flags) {\n              e2.msg = \"unknown header flags set\", r3.mode = 30;\n              break;\n            }\n            r3.head && (r3.head.text = u2 >> 8 & 1), 512 & r3.flags && (E[0] = 255 & u2, E[1] = u2 >>> 8 & 255, r3.check = B(r3.check, E, 2, 0)), l2 = u2 = 0, r3.mode = 3;\n          case 3:\n            for (; l2 < 32; ) {\n              if (0 === o2) break e;\n              o2--, u2 += n2[s3++] << l2, l2 += 8;\n            }\n            r3.head && (r3.head.time = u2), 512 & r3.flags && (E[0] = 255 & u2, E[1] = u2 >>> 8 & 255, E[2] = u2 >>> 16 & 255, E[3] = u2 >>> 24 & 255, r3.check = B(r3.check, E, 4, 0)), l2 = u2 = 0, r3.mode = 4;\n          case 4:\n            for (; l2 < 16; ) {\n              if (0 === o2) break e;\n              o2--, u2 += n2[s3++] << l2, l2 += 8;\n            }\n            r3.head && (r3.head.xflags = 255 & u2, r3.head.os = u2 >> 8), 512 & r3.flags && (E[0] = 255 & u2, E[1] = u2 >>> 8 & 255, r3.check = B(r3.check, E, 2, 0)), l2 = u2 = 0, r3.mode = 5;\n          case 5:\n            if (1024 & r3.flags) {\n              for (; l2 < 16; ) {\n                if (0 === o2) break e;\n                o2--, u2 += n2[s3++] << l2, l2 += 8;\n              }\n              r3.length = u2, r3.head && (r3.head.extra_len = u2), 512 & r3.flags && (E[0] = 255 & u2, E[1] = u2 >>> 8 & 255, r3.check = B(r3.check, E, 2, 0)), l2 = u2 = 0;\n            } else r3.head && (r3.head.extra = null);\n            r3.mode = 6;\n          case 6:\n            if (1024 & r3.flags && (o2 < (d = r3.length) && (d = o2), d && (r3.head && (k = r3.head.extra_len - r3.length, r3.head.extra || (r3.head.extra = new Array(r3.head.extra_len)), I.arraySet(r3.head.extra, n2, s3, d, k)), 512 & r3.flags && (r3.check = B(r3.check, n2, d, s3)), o2 -= d, s3 += d, r3.length -= d), r3.length)) break e;\n            r3.length = 0, r3.mode = 7;\n          case 7:\n            if (2048 & r3.flags) {\n              if (0 === o2) break e;\n              for (d = 0; k = n2[s3 + d++], r3.head && k && r3.length < 65536 && (r3.head.name += String.fromCharCode(k)), k && d < o2; ) ;\n              if (512 & r3.flags && (r3.check = B(r3.check, n2, d, s3)), o2 -= d, s3 += d, k) break e;\n            } else r3.head && (r3.head.name = null);\n            r3.length = 0, r3.mode = 8;\n          case 8:\n            if (4096 & r3.flags) {\n              if (0 === o2) break e;\n              for (d = 0; k = n2[s3 + d++], r3.head && k && r3.length < 65536 && (r3.head.comment += String.fromCharCode(k)), k && d < o2; ) ;\n              if (512 & r3.flags && (r3.check = B(r3.check, n2, d, s3)), o2 -= d, s3 += d, k) break e;\n            } else r3.head && (r3.head.comment = null);\n            r3.mode = 9;\n          case 9:\n            if (512 & r3.flags) {\n              for (; l2 < 16; ) {\n                if (0 === o2) break e;\n                o2--, u2 += n2[s3++] << l2, l2 += 8;\n              }\n              if (u2 !== (65535 & r3.check)) {\n                e2.msg = \"header crc mismatch\", r3.mode = 30;\n                break;\n              }\n              l2 = u2 = 0;\n            }\n            r3.head && (r3.head.hcrc = r3.flags >> 9 & 1, r3.head.done = true), e2.adler = r3.check = 0, r3.mode = 12;\n            break;\n          case 10:\n            for (; l2 < 32; ) {\n              if (0 === o2) break e;\n              o2--, u2 += n2[s3++] << l2, l2 += 8;\n            }\n            e2.adler = r3.check = L(u2), l2 = u2 = 0, r3.mode = 11;\n          case 11:\n            if (0 === r3.havedict) return e2.next_out = a2, e2.avail_out = h2, e2.next_in = s3, e2.avail_in = o2, r3.hold = u2, r3.bits = l2, 2;\n            e2.adler = r3.check = 1, r3.mode = 12;\n          case 12:\n            if (5 === t2 || 6 === t2) break e;\n          case 13:\n            if (r3.last) {\n              u2 >>>= 7 & l2, l2 -= 7 & l2, r3.mode = 27;\n              break;\n            }\n            for (; l2 < 3; ) {\n              if (0 === o2) break e;\n              o2--, u2 += n2[s3++] << l2, l2 += 8;\n            }\n            switch (r3.last = 1 & u2, l2 -= 1, 3 & (u2 >>>= 1)) {\n              case 0:\n                r3.mode = 14;\n                break;\n              case 1:\n                if (j(r3), r3.mode = 20, 6 !== t2) break;\n                u2 >>>= 2, l2 -= 2;\n                break e;\n              case 2:\n                r3.mode = 17;\n                break;\n              case 3:\n                e2.msg = \"invalid block type\", r3.mode = 30;\n            }\n            u2 >>>= 2, l2 -= 2;\n            break;\n          case 14:\n            for (u2 >>>= 7 & l2, l2 -= 7 & l2; l2 < 32; ) {\n              if (0 === o2) break e;\n              o2--, u2 += n2[s3++] << l2, l2 += 8;\n            }\n            if ((65535 & u2) != (u2 >>> 16 ^ 65535)) {\n              e2.msg = \"invalid stored block lengths\", r3.mode = 30;\n              break;\n            }\n            if (r3.length = 65535 & u2, l2 = u2 = 0, r3.mode = 15, 6 === t2) break e;\n          case 15:\n            r3.mode = 16;\n          case 16:\n            if (d = r3.length) {\n              if (o2 < d && (d = o2), h2 < d && (d = h2), 0 === d) break e;\n              I.arraySet(i2, n2, s3, d, a2), o2 -= d, s3 += d, h2 -= d, a2 += d, r3.length -= d;\n              break;\n            }\n            r3.mode = 12;\n            break;\n          case 17:\n            for (; l2 < 14; ) {\n              if (0 === o2) break e;\n              o2--, u2 += n2[s3++] << l2, l2 += 8;\n            }\n            if (r3.nlen = 257 + (31 & u2), u2 >>>= 5, l2 -= 5, r3.ndist = 1 + (31 & u2), u2 >>>= 5, l2 -= 5, r3.ncode = 4 + (15 & u2), u2 >>>= 4, l2 -= 4, 286 < r3.nlen || 30 < r3.ndist) {\n              e2.msg = \"too many length or distance symbols\", r3.mode = 30;\n              break;\n            }\n            r3.have = 0, r3.mode = 18;\n          case 18:\n            for (; r3.have < r3.ncode; ) {\n              for (; l2 < 3; ) {\n                if (0 === o2) break e;\n                o2--, u2 += n2[s3++] << l2, l2 += 8;\n              }\n              r3.lens[A[r3.have++]] = 7 & u2, u2 >>>= 3, l2 -= 3;\n            }\n            for (; r3.have < 19; ) r3.lens[A[r3.have++]] = 0;\n            if (r3.lencode = r3.lendyn, r3.lenbits = 7, S = { bits: r3.lenbits }, x = T(0, r3.lens, 0, 19, r3.lencode, 0, r3.work, S), r3.lenbits = S.bits, x) {\n              e2.msg = \"invalid code lengths set\", r3.mode = 30;\n              break;\n            }\n            r3.have = 0, r3.mode = 19;\n          case 19:\n            for (; r3.have < r3.nlen + r3.ndist; ) {\n              for (; g = (C = r3.lencode[u2 & (1 << r3.lenbits) - 1]) >>> 16 & 255, b = 65535 & C, !((_ = C >>> 24) <= l2); ) {\n                if (0 === o2) break e;\n                o2--, u2 += n2[s3++] << l2, l2 += 8;\n              }\n              if (b < 16) u2 >>>= _, l2 -= _, r3.lens[r3.have++] = b;\n              else {\n                if (16 === b) {\n                  for (z = _ + 2; l2 < z; ) {\n                    if (0 === o2) break e;\n                    o2--, u2 += n2[s3++] << l2, l2 += 8;\n                  }\n                  if (u2 >>>= _, l2 -= _, 0 === r3.have) {\n                    e2.msg = \"invalid bit length repeat\", r3.mode = 30;\n                    break;\n                  }\n                  k = r3.lens[r3.have - 1], d = 3 + (3 & u2), u2 >>>= 2, l2 -= 2;\n                } else if (17 === b) {\n                  for (z = _ + 3; l2 < z; ) {\n                    if (0 === o2) break e;\n                    o2--, u2 += n2[s3++] << l2, l2 += 8;\n                  }\n                  l2 -= _, k = 0, d = 3 + (7 & (u2 >>>= _)), u2 >>>= 3, l2 -= 3;\n                } else {\n                  for (z = _ + 7; l2 < z; ) {\n                    if (0 === o2) break e;\n                    o2--, u2 += n2[s3++] << l2, l2 += 8;\n                  }\n                  l2 -= _, k = 0, d = 11 + (127 & (u2 >>>= _)), u2 >>>= 7, l2 -= 7;\n                }\n                if (r3.have + d > r3.nlen + r3.ndist) {\n                  e2.msg = \"invalid bit length repeat\", r3.mode = 30;\n                  break;\n                }\n                for (; d--; ) r3.lens[r3.have++] = k;\n              }\n            }\n            if (30 === r3.mode) break;\n            if (0 === r3.lens[256]) {\n              e2.msg = \"invalid code -- missing end-of-block\", r3.mode = 30;\n              break;\n            }\n            if (r3.lenbits = 9, S = { bits: r3.lenbits }, x = T(D, r3.lens, 0, r3.nlen, r3.lencode, 0, r3.work, S), r3.lenbits = S.bits, x) {\n              e2.msg = \"invalid literal/lengths set\", r3.mode = 30;\n              break;\n            }\n            if (r3.distbits = 6, r3.distcode = r3.distdyn, S = { bits: r3.distbits }, x = T(F, r3.lens, r3.nlen, r3.ndist, r3.distcode, 0, r3.work, S), r3.distbits = S.bits, x) {\n              e2.msg = \"invalid distances set\", r3.mode = 30;\n              break;\n            }\n            if (r3.mode = 20, 6 === t2) break e;\n          case 20:\n            r3.mode = 21;\n          case 21:\n            if (6 <= o2 && 258 <= h2) {\n              e2.next_out = a2, e2.avail_out = h2, e2.next_in = s3, e2.avail_in = o2, r3.hold = u2, r3.bits = l2, R2(e2, c2), a2 = e2.next_out, i2 = e2.output, h2 = e2.avail_out, s3 = e2.next_in, n2 = e2.input, o2 = e2.avail_in, u2 = r3.hold, l2 = r3.bits, 12 === r3.mode && (r3.back = -1);\n              break;\n            }\n            for (r3.back = 0; g = (C = r3.lencode[u2 & (1 << r3.lenbits) - 1]) >>> 16 & 255, b = 65535 & C, !((_ = C >>> 24) <= l2); ) {\n              if (0 === o2) break e;\n              o2--, u2 += n2[s3++] << l2, l2 += 8;\n            }\n            if (g && 0 == (240 & g)) {\n              for (v = _, y = g, w = b; g = (C = r3.lencode[w + ((u2 & (1 << v + y) - 1) >> v)]) >>> 16 & 255, b = 65535 & C, !(v + (_ = C >>> 24) <= l2); ) {\n                if (0 === o2) break e;\n                o2--, u2 += n2[s3++] << l2, l2 += 8;\n              }\n              u2 >>>= v, l2 -= v, r3.back += v;\n            }\n            if (u2 >>>= _, l2 -= _, r3.back += _, r3.length = b, 0 === g) {\n              r3.mode = 26;\n              break;\n            }\n            if (32 & g) {\n              r3.back = -1, r3.mode = 12;\n              break;\n            }\n            if (64 & g) {\n              e2.msg = \"invalid literal/length code\", r3.mode = 30;\n              break;\n            }\n            r3.extra = 15 & g, r3.mode = 22;\n          case 22:\n            if (r3.extra) {\n              for (z = r3.extra; l2 < z; ) {\n                if (0 === o2) break e;\n                o2--, u2 += n2[s3++] << l2, l2 += 8;\n              }\n              r3.length += u2 & (1 << r3.extra) - 1, u2 >>>= r3.extra, l2 -= r3.extra, r3.back += r3.extra;\n            }\n            r3.was = r3.length, r3.mode = 23;\n          case 23:\n            for (; g = (C = r3.distcode[u2 & (1 << r3.distbits) - 1]) >>> 16 & 255, b = 65535 & C, !((_ = C >>> 24) <= l2); ) {\n              if (0 === o2) break e;\n              o2--, u2 += n2[s3++] << l2, l2 += 8;\n            }\n            if (0 == (240 & g)) {\n              for (v = _, y = g, w = b; g = (C = r3.distcode[w + ((u2 & (1 << v + y) - 1) >> v)]) >>> 16 & 255, b = 65535 & C, !(v + (_ = C >>> 24) <= l2); ) {\n                if (0 === o2) break e;\n                o2--, u2 += n2[s3++] << l2, l2 += 8;\n              }\n              u2 >>>= v, l2 -= v, r3.back += v;\n            }\n            if (u2 >>>= _, l2 -= _, r3.back += _, 64 & g) {\n              e2.msg = \"invalid distance code\", r3.mode = 30;\n              break;\n            }\n            r3.offset = b, r3.extra = 15 & g, r3.mode = 24;\n          case 24:\n            if (r3.extra) {\n              for (z = r3.extra; l2 < z; ) {\n                if (0 === o2) break e;\n                o2--, u2 += n2[s3++] << l2, l2 += 8;\n              }\n              r3.offset += u2 & (1 << r3.extra) - 1, u2 >>>= r3.extra, l2 -= r3.extra, r3.back += r3.extra;\n            }\n            if (r3.offset > r3.dmax) {\n              e2.msg = \"invalid distance too far back\", r3.mode = 30;\n              break;\n            }\n            r3.mode = 25;\n          case 25:\n            if (0 === h2) break e;\n            if (d = c2 - h2, r3.offset > d) {\n              if ((d = r3.offset - d) > r3.whave && r3.sane) {\n                e2.msg = \"invalid distance too far back\", r3.mode = 30;\n                break;\n              }\n              p = d > r3.wnext ? (d -= r3.wnext, r3.wsize - d) : r3.wnext - d, d > r3.length && (d = r3.length), m = r3.window;\n            } else m = i2, p = a2 - r3.offset, d = r3.length;\n            for (h2 < d && (d = h2), h2 -= d, r3.length -= d; i2[a2++] = m[p++], --d; ) ;\n            0 === r3.length && (r3.mode = 21);\n            break;\n          case 26:\n            if (0 === h2) break e;\n            i2[a2++] = r3.length, h2--, r3.mode = 21;\n            break;\n          case 27:\n            if (r3.wrap) {\n              for (; l2 < 32; ) {\n                if (0 === o2) break e;\n                o2--, u2 |= n2[s3++] << l2, l2 += 8;\n              }\n              if (c2 -= h2, e2.total_out += c2, r3.total += c2, c2 && (e2.adler = r3.check = r3.flags ? B(r3.check, i2, c2, a2 - c2) : O(r3.check, i2, c2, a2 - c2)), c2 = h2, (r3.flags ? u2 : L(u2)) !== r3.check) {\n                e2.msg = \"incorrect data check\", r3.mode = 30;\n                break;\n              }\n              l2 = u2 = 0;\n            }\n            r3.mode = 28;\n          case 28:\n            if (r3.wrap && r3.flags) {\n              for (; l2 < 32; ) {\n                if (0 === o2) break e;\n                o2--, u2 += n2[s3++] << l2, l2 += 8;\n              }\n              if (u2 !== (4294967295 & r3.total)) {\n                e2.msg = \"incorrect length check\", r3.mode = 30;\n                break;\n              }\n              l2 = u2 = 0;\n            }\n            r3.mode = 29;\n          case 29:\n            x = 1;\n            break e;\n          case 30:\n            x = -3;\n            break e;\n          case 31:\n            return -4;\n          case 32:\n          default:\n            return U;\n        }\n        return e2.next_out = a2, e2.avail_out = h2, e2.next_in = s3, e2.avail_in = o2, r3.hold = u2, r3.bits = l2, (r3.wsize || c2 !== e2.avail_out && r3.mode < 30 && (r3.mode < 27 || 4 !== t2)) && Z(e2, e2.output, e2.next_out, c2 - e2.avail_out) ? (r3.mode = 31, -4) : (f3 -= e2.avail_in, c2 -= e2.avail_out, e2.total_in += f3, e2.total_out += c2, r3.total += c2, r3.wrap && c2 && (e2.adler = r3.check = r3.flags ? B(r3.check, i2, c2, e2.next_out - c2) : O(r3.check, i2, c2, e2.next_out - c2)), e2.data_type = r3.bits + (r3.last ? 64 : 0) + (12 === r3.mode ? 128 : 0) + (20 === r3.mode || 15 === r3.mode ? 256 : 0), (0 == f3 && 0 === c2 || 4 === t2) && x === N && (x = -5), x);\n      }, r2.inflateEnd = function(e2) {\n        if (!e2 || !e2.state) return U;\n        var t2 = e2.state;\n        return t2.window && (t2.window = null), e2.state = null, N;\n      }, r2.inflateGetHeader = function(e2, t2) {\n        var r3;\n        return e2 && e2.state ? 0 == (2 & (r3 = e2.state).wrap) ? U : ((r3.head = t2).done = false, N) : U;\n      }, r2.inflateSetDictionary = function(e2, t2) {\n        var r3, n2 = t2.length;\n        return e2 && e2.state ? 0 !== (r3 = e2.state).wrap && 11 !== r3.mode ? U : 11 === r3.mode && O(1, t2, n2, 0) !== r3.check ? -3 : Z(e2, t2, n2, n2) ? (r3.mode = 31, -4) : (r3.havedict = 1, N) : U;\n      }, r2.inflateInfo = \"pako inflate (from Nodeca project)\";\n    }, { \"../utils/common\": 41, \"./adler32\": 43, \"./crc32\": 45, \"./inffast\": 48, \"./inftrees\": 50 }], 50: [function(e, t, r2) {\n      var D = e(\"../utils/common\"), F = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0], N = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78], U = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0], P = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];\n      t.exports = function(e2, t2, r3, n, i, s2, a, o) {\n        var h, u, l, f2, c, d, p, m, _, g = o.bits, b = 0, v = 0, y = 0, w = 0, k = 0, x = 0, S = 0, z = 0, C = 0, E = 0, A = null, I = 0, O = new D.Buf16(16), B = new D.Buf16(16), R2 = null, T = 0;\n        for (b = 0; b <= 15; b++) O[b] = 0;\n        for (v = 0; v < n; v++) O[t2[r3 + v]]++;\n        for (k = g, w = 15; 1 <= w && 0 === O[w]; w--) ;\n        if (w < k && (k = w), 0 === w) return i[s2++] = 20971520, i[s2++] = 20971520, o.bits = 1, 0;\n        for (y = 1; y < w && 0 === O[y]; y++) ;\n        for (k < y && (k = y), b = z = 1; b <= 15; b++) if (z <<= 1, (z -= O[b]) < 0) return -1;\n        if (0 < z && (0 === e2 || 1 !== w)) return -1;\n        for (B[1] = 0, b = 1; b < 15; b++) B[b + 1] = B[b] + O[b];\n        for (v = 0; v < n; v++) 0 !== t2[r3 + v] && (a[B[t2[r3 + v]]++] = v);\n        if (d = 0 === e2 ? (A = R2 = a, 19) : 1 === e2 ? (A = F, I -= 257, R2 = N, T -= 257, 256) : (A = U, R2 = P, -1), b = y, c = s2, S = v = E = 0, l = -1, f2 = (C = 1 << (x = k)) - 1, 1 === e2 && 852 < C || 2 === e2 && 592 < C) return 1;\n        for (; ; ) {\n          for (p = b - S, _ = a[v] < d ? (m = 0, a[v]) : a[v] > d ? (m = R2[T + a[v]], A[I + a[v]]) : (m = 96, 0), h = 1 << b - S, y = u = 1 << x; i[c + (E >> S) + (u -= h)] = p << 24 | m << 16 | _ | 0, 0 !== u; ) ;\n          for (h = 1 << b - 1; E & h; ) h >>= 1;\n          if (0 !== h ? (E &= h - 1, E += h) : E = 0, v++, 0 == --O[b]) {\n            if (b === w) break;\n            b = t2[r3 + a[v]];\n          }\n          if (k < b && (E & f2) !== l) {\n            for (0 === S && (S = k), c += y, z = 1 << (x = b - S); x + S < w && !((z -= O[x + S]) <= 0); ) x++, z <<= 1;\n            if (C += 1 << x, 1 === e2 && 852 < C || 2 === e2 && 592 < C) return 1;\n            i[l = E & f2] = k << 24 | x << 16 | c - s2 | 0;\n          }\n        }\n        return 0 !== E && (i[c + E] = b - S << 24 | 64 << 16 | 0), o.bits = k, 0;\n      };\n    }, { \"../utils/common\": 41 }], 51: [function(e, t, r2) {\n      t.exports = { 2: \"need dictionary\", 1: \"stream end\", 0: \"\", \"-1\": \"file error\", \"-2\": \"stream error\", \"-3\": \"data error\", \"-4\": \"insufficient memory\", \"-5\": \"buffer error\", \"-6\": \"incompatible version\" };\n    }, {}], 52: [function(e, t, r2) {\n      var i = e(\"../utils/common\"), o = 0, h = 1;\n      function n(e2) {\n        for (var t2 = e2.length; 0 <= --t2; ) e2[t2] = 0;\n      }\n      var s2 = 0, a = 29, u = 256, l = u + 1 + a, f2 = 30, c = 19, _ = 2 * l + 1, g = 15, d = 16, p = 7, m = 256, b = 16, v = 17, y = 18, w = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0], k = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13], x = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7], S = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], z = new Array(2 * (l + 2));\n      n(z);\n      var C = new Array(2 * f2);\n      n(C);\n      var E = new Array(512);\n      n(E);\n      var A = new Array(256);\n      n(A);\n      var I = new Array(a);\n      n(I);\n      var O, B, R2, T = new Array(f2);\n      function D(e2, t2, r3, n2, i2) {\n        this.static_tree = e2, this.extra_bits = t2, this.extra_base = r3, this.elems = n2, this.max_length = i2, this.has_stree = e2 && e2.length;\n      }\n      function F(e2, t2) {\n        this.dyn_tree = e2, this.max_code = 0, this.stat_desc = t2;\n      }\n      function N(e2) {\n        return e2 < 256 ? E[e2] : E[256 + (e2 >>> 7)];\n      }\n      function U(e2, t2) {\n        e2.pending_buf[e2.pending++] = 255 & t2, e2.pending_buf[e2.pending++] = t2 >>> 8 & 255;\n      }\n      function P(e2, t2, r3) {\n        e2.bi_valid > d - r3 ? (e2.bi_buf |= t2 << e2.bi_valid & 65535, U(e2, e2.bi_buf), e2.bi_buf = t2 >> d - e2.bi_valid, e2.bi_valid += r3 - d) : (e2.bi_buf |= t2 << e2.bi_valid & 65535, e2.bi_valid += r3);\n      }\n      function L(e2, t2, r3) {\n        P(e2, r3[2 * t2], r3[2 * t2 + 1]);\n      }\n      function j(e2, t2) {\n        for (var r3 = 0; r3 |= 1 & e2, e2 >>>= 1, r3 <<= 1, 0 < --t2; ) ;\n        return r3 >>> 1;\n      }\n      function Z(e2, t2, r3) {\n        var n2, i2, s3 = new Array(g + 1), a2 = 0;\n        for (n2 = 1; n2 <= g; n2++) s3[n2] = a2 = a2 + r3[n2 - 1] << 1;\n        for (i2 = 0; i2 <= t2; i2++) {\n          var o2 = e2[2 * i2 + 1];\n          0 !== o2 && (e2[2 * i2] = j(s3[o2]++, o2));\n        }\n      }\n      function W(e2) {\n        var t2;\n        for (t2 = 0; t2 < l; t2++) e2.dyn_ltree[2 * t2] = 0;\n        for (t2 = 0; t2 < f2; t2++) e2.dyn_dtree[2 * t2] = 0;\n        for (t2 = 0; t2 < c; t2++) e2.bl_tree[2 * t2] = 0;\n        e2.dyn_ltree[2 * m] = 1, e2.opt_len = e2.static_len = 0, e2.last_lit = e2.matches = 0;\n      }\n      function M(e2) {\n        8 < e2.bi_valid ? U(e2, e2.bi_buf) : 0 < e2.bi_valid && (e2.pending_buf[e2.pending++] = e2.bi_buf), e2.bi_buf = 0, e2.bi_valid = 0;\n      }\n      function H(e2, t2, r3, n2) {\n        var i2 = 2 * t2, s3 = 2 * r3;\n        return e2[i2] < e2[s3] || e2[i2] === e2[s3] && n2[t2] <= n2[r3];\n      }\n      function G(e2, t2, r3) {\n        for (var n2 = e2.heap[r3], i2 = r3 << 1; i2 <= e2.heap_len && (i2 < e2.heap_len && H(t2, e2.heap[i2 + 1], e2.heap[i2], e2.depth) && i2++, !H(t2, n2, e2.heap[i2], e2.depth)); ) e2.heap[r3] = e2.heap[i2], r3 = i2, i2 <<= 1;\n        e2.heap[r3] = n2;\n      }\n      function K2(e2, t2, r3) {\n        var n2, i2, s3, a2, o2 = 0;\n        if (0 !== e2.last_lit) for (; n2 = e2.pending_buf[e2.d_buf + 2 * o2] << 8 | e2.pending_buf[e2.d_buf + 2 * o2 + 1], i2 = e2.pending_buf[e2.l_buf + o2], o2++, 0 === n2 ? L(e2, i2, t2) : (L(e2, (s3 = A[i2]) + u + 1, t2), 0 !== (a2 = w[s3]) && P(e2, i2 -= I[s3], a2), L(e2, s3 = N(--n2), r3), 0 !== (a2 = k[s3]) && P(e2, n2 -= T[s3], a2)), o2 < e2.last_lit; ) ;\n        L(e2, m, t2);\n      }\n      function Y(e2, t2) {\n        var r3, n2, i2, s3 = t2.dyn_tree, a2 = t2.stat_desc.static_tree, o2 = t2.stat_desc.has_stree, h2 = t2.stat_desc.elems, u2 = -1;\n        for (e2.heap_len = 0, e2.heap_max = _, r3 = 0; r3 < h2; r3++) 0 !== s3[2 * r3] ? (e2.heap[++e2.heap_len] = u2 = r3, e2.depth[r3] = 0) : s3[2 * r3 + 1] = 0;\n        for (; e2.heap_len < 2; ) s3[2 * (i2 = e2.heap[++e2.heap_len] = u2 < 2 ? ++u2 : 0)] = 1, e2.depth[i2] = 0, e2.opt_len--, o2 && (e2.static_len -= a2[2 * i2 + 1]);\n        for (t2.max_code = u2, r3 = e2.heap_len >> 1; 1 <= r3; r3--) G(e2, s3, r3);\n        for (i2 = h2; r3 = e2.heap[1], e2.heap[1] = e2.heap[e2.heap_len--], G(e2, s3, 1), n2 = e2.heap[1], e2.heap[--e2.heap_max] = r3, e2.heap[--e2.heap_max] = n2, s3[2 * i2] = s3[2 * r3] + s3[2 * n2], e2.depth[i2] = (e2.depth[r3] >= e2.depth[n2] ? e2.depth[r3] : e2.depth[n2]) + 1, s3[2 * r3 + 1] = s3[2 * n2 + 1] = i2, e2.heap[1] = i2++, G(e2, s3, 1), 2 <= e2.heap_len; ) ;\n        e2.heap[--e2.heap_max] = e2.heap[1], function(e3, t3) {\n          var r4, n3, i3, s4, a3, o3, h3 = t3.dyn_tree, u3 = t3.max_code, l2 = t3.stat_desc.static_tree, f3 = t3.stat_desc.has_stree, c2 = t3.stat_desc.extra_bits, d2 = t3.stat_desc.extra_base, p2 = t3.stat_desc.max_length, m2 = 0;\n          for (s4 = 0; s4 <= g; s4++) e3.bl_count[s4] = 0;\n          for (h3[2 * e3.heap[e3.heap_max] + 1] = 0, r4 = e3.heap_max + 1; r4 < _; r4++) p2 < (s4 = h3[2 * h3[2 * (n3 = e3.heap[r4]) + 1] + 1] + 1) && (s4 = p2, m2++), h3[2 * n3 + 1] = s4, u3 < n3 || (e3.bl_count[s4]++, a3 = 0, d2 <= n3 && (a3 = c2[n3 - d2]), o3 = h3[2 * n3], e3.opt_len += o3 * (s4 + a3), f3 && (e3.static_len += o3 * (l2[2 * n3 + 1] + a3)));\n          if (0 !== m2) {\n            do {\n              for (s4 = p2 - 1; 0 === e3.bl_count[s4]; ) s4--;\n              e3.bl_count[s4]--, e3.bl_count[s4 + 1] += 2, e3.bl_count[p2]--, m2 -= 2;\n            } while (0 < m2);\n            for (s4 = p2; 0 !== s4; s4--) for (n3 = e3.bl_count[s4]; 0 !== n3; ) u3 < (i3 = e3.heap[--r4]) || (h3[2 * i3 + 1] !== s4 && (e3.opt_len += (s4 - h3[2 * i3 + 1]) * h3[2 * i3], h3[2 * i3 + 1] = s4), n3--);\n          }\n        }(e2, t2), Z(s3, u2, e2.bl_count);\n      }\n      function X(e2, t2, r3) {\n        var n2, i2, s3 = -1, a2 = t2[1], o2 = 0, h2 = 7, u2 = 4;\n        for (0 === a2 && (h2 = 138, u2 = 3), t2[2 * (r3 + 1) + 1] = 65535, n2 = 0; n2 <= r3; n2++) i2 = a2, a2 = t2[2 * (n2 + 1) + 1], ++o2 < h2 && i2 === a2 || (o2 < u2 ? e2.bl_tree[2 * i2] += o2 : 0 !== i2 ? (i2 !== s3 && e2.bl_tree[2 * i2]++, e2.bl_tree[2 * b]++) : o2 <= 10 ? e2.bl_tree[2 * v]++ : e2.bl_tree[2 * y]++, s3 = i2, u2 = (o2 = 0) === a2 ? (h2 = 138, 3) : i2 === a2 ? (h2 = 6, 3) : (h2 = 7, 4));\n      }\n      function V(e2, t2, r3) {\n        var n2, i2, s3 = -1, a2 = t2[1], o2 = 0, h2 = 7, u2 = 4;\n        for (0 === a2 && (h2 = 138, u2 = 3), n2 = 0; n2 <= r3; n2++) if (i2 = a2, a2 = t2[2 * (n2 + 1) + 1], !(++o2 < h2 && i2 === a2)) {\n          if (o2 < u2) for (; L(e2, i2, e2.bl_tree), 0 != --o2; ) ;\n          else 0 !== i2 ? (i2 !== s3 && (L(e2, i2, e2.bl_tree), o2--), L(e2, b, e2.bl_tree), P(e2, o2 - 3, 2)) : o2 <= 10 ? (L(e2, v, e2.bl_tree), P(e2, o2 - 3, 3)) : (L(e2, y, e2.bl_tree), P(e2, o2 - 11, 7));\n          s3 = i2, u2 = (o2 = 0) === a2 ? (h2 = 138, 3) : i2 === a2 ? (h2 = 6, 3) : (h2 = 7, 4);\n        }\n      }\n      n(T);\n      var q = false;\n      function J(e2, t2, r3, n2) {\n        P(e2, (s2 << 1) + (n2 ? 1 : 0), 3), function(e3, t3, r4, n3) {\n          M(e3), U(e3, r4), U(e3, ~r4), i.arraySet(e3.pending_buf, e3.window, t3, r4, e3.pending), e3.pending += r4;\n        }(e2, t2, r3);\n      }\n      r2._tr_init = function(e2) {\n        q || (function() {\n          var e3, t2, r3, n2, i2, s3 = new Array(g + 1);\n          for (n2 = r3 = 0; n2 < a - 1; n2++) for (I[n2] = r3, e3 = 0; e3 < 1 << w[n2]; e3++) A[r3++] = n2;\n          for (A[r3 - 1] = n2, n2 = i2 = 0; n2 < 16; n2++) for (T[n2] = i2, e3 = 0; e3 < 1 << k[n2]; e3++) E[i2++] = n2;\n          for (i2 >>= 7; n2 < f2; n2++) for (T[n2] = i2 << 7, e3 = 0; e3 < 1 << k[n2] - 7; e3++) E[256 + i2++] = n2;\n          for (t2 = 0; t2 <= g; t2++) s3[t2] = 0;\n          for (e3 = 0; e3 <= 143; ) z[2 * e3 + 1] = 8, e3++, s3[8]++;\n          for (; e3 <= 255; ) z[2 * e3 + 1] = 9, e3++, s3[9]++;\n          for (; e3 <= 279; ) z[2 * e3 + 1] = 7, e3++, s3[7]++;\n          for (; e3 <= 287; ) z[2 * e3 + 1] = 8, e3++, s3[8]++;\n          for (Z(z, l + 1, s3), e3 = 0; e3 < f2; e3++) C[2 * e3 + 1] = 5, C[2 * e3] = j(e3, 5);\n          O = new D(z, w, u + 1, l, g), B = new D(C, k, 0, f2, g), R2 = new D(new Array(0), x, 0, c, p);\n        }(), q = true), e2.l_desc = new F(e2.dyn_ltree, O), e2.d_desc = new F(e2.dyn_dtree, B), e2.bl_desc = new F(e2.bl_tree, R2), e2.bi_buf = 0, e2.bi_valid = 0, W(e2);\n      }, r2._tr_stored_block = J, r2._tr_flush_block = function(e2, t2, r3, n2) {\n        var i2, s3, a2 = 0;\n        0 < e2.level ? (2 === e2.strm.data_type && (e2.strm.data_type = function(e3) {\n          var t3, r4 = 4093624447;\n          for (t3 = 0; t3 <= 31; t3++, r4 >>>= 1) if (1 & r4 && 0 !== e3.dyn_ltree[2 * t3]) return o;\n          if (0 !== e3.dyn_ltree[18] || 0 !== e3.dyn_ltree[20] || 0 !== e3.dyn_ltree[26]) return h;\n          for (t3 = 32; t3 < u; t3++) if (0 !== e3.dyn_ltree[2 * t3]) return h;\n          return o;\n        }(e2)), Y(e2, e2.l_desc), Y(e2, e2.d_desc), a2 = function(e3) {\n          var t3;\n          for (X(e3, e3.dyn_ltree, e3.l_desc.max_code), X(e3, e3.dyn_dtree, e3.d_desc.max_code), Y(e3, e3.bl_desc), t3 = c - 1; 3 <= t3 && 0 === e3.bl_tree[2 * S[t3] + 1]; t3--) ;\n          return e3.opt_len += 3 * (t3 + 1) + 5 + 5 + 4, t3;\n        }(e2), i2 = e2.opt_len + 3 + 7 >>> 3, (s3 = e2.static_len + 3 + 7 >>> 3) <= i2 && (i2 = s3)) : i2 = s3 = r3 + 5, r3 + 4 <= i2 && -1 !== t2 ? J(e2, t2, r3, n2) : 4 === e2.strategy || s3 === i2 ? (P(e2, 2 + (n2 ? 1 : 0), 3), K2(e2, z, C)) : (P(e2, 4 + (n2 ? 1 : 0), 3), function(e3, t3, r4, n3) {\n          var i3;\n          for (P(e3, t3 - 257, 5), P(e3, r4 - 1, 5), P(e3, n3 - 4, 4), i3 = 0; i3 < n3; i3++) P(e3, e3.bl_tree[2 * S[i3] + 1], 3);\n          V(e3, e3.dyn_ltree, t3 - 1), V(e3, e3.dyn_dtree, r4 - 1);\n        }(e2, e2.l_desc.max_code + 1, e2.d_desc.max_code + 1, a2 + 1), K2(e2, e2.dyn_ltree, e2.dyn_dtree)), W(e2), n2 && M(e2);\n      }, r2._tr_tally = function(e2, t2, r3) {\n        return e2.pending_buf[e2.d_buf + 2 * e2.last_lit] = t2 >>> 8 & 255, e2.pending_buf[e2.d_buf + 2 * e2.last_lit + 1] = 255 & t2, e2.pending_buf[e2.l_buf + e2.last_lit] = 255 & r3, e2.last_lit++, 0 === t2 ? e2.dyn_ltree[2 * r3]++ : (e2.matches++, t2--, e2.dyn_ltree[2 * (A[r3] + u + 1)]++, e2.dyn_dtree[2 * N(t2)]++), e2.last_lit === e2.lit_bufsize - 1;\n      }, r2._tr_align = function(e2) {\n        P(e2, 2, 3), L(e2, m, z), function(e3) {\n          16 === e3.bi_valid ? (U(e3, e3.bi_buf), e3.bi_buf = 0, e3.bi_valid = 0) : 8 <= e3.bi_valid && (e3.pending_buf[e3.pending++] = 255 & e3.bi_buf, e3.bi_buf >>= 8, e3.bi_valid -= 8);\n        }(e2);\n      };\n    }, { \"../utils/common\": 41 }], 53: [function(e, t, r2) {\n      t.exports = function() {\n        this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = \"\", this.state = null, this.data_type = 2, this.adler = 0;\n      };\n    }, {}], 54: [function(e, t, r2) {\n      (function(e2) {\n        !function(r3, n) {\n          if (!r3.setImmediate) {\n            var i, s2, t2, a, o = 1, h = {}, u = false, l = r3.document, e3 = Object.getPrototypeOf && Object.getPrototypeOf(r3);\n            e3 = e3 && e3.setTimeout ? e3 : r3, i = \"[object process]\" === {}.toString.call(r3.process) ? function(e4) {\n              process$1.nextTick(function() {\n                c(e4);\n              });\n            } : function() {\n              if (r3.postMessage && !r3.importScripts) {\n                var e4 = true, t3 = r3.onmessage;\n                return r3.onmessage = function() {\n                  e4 = false;\n                }, r3.postMessage(\"\", \"*\"), r3.onmessage = t3, e4;\n              }\n            }() ? (a = \"setImmediate$\" + Math.random() + \"$\", r3.addEventListener ? r3.addEventListener(\"message\", d, false) : r3.attachEvent(\"onmessage\", d), function(e4) {\n              r3.postMessage(a + e4, \"*\");\n            }) : r3.MessageChannel ? ((t2 = new MessageChannel()).port1.onmessage = function(e4) {\n              c(e4.data);\n            }, function(e4) {\n              t2.port2.postMessage(e4);\n            }) : l && \"onreadystatechange\" in l.createElement(\"script\") ? (s2 = l.documentElement, function(e4) {\n              var t3 = l.createElement(\"script\");\n              t3.onreadystatechange = function() {\n                c(e4), t3.onreadystatechange = null, s2.removeChild(t3), t3 = null;\n              }, s2.appendChild(t3);\n            }) : function(e4) {\n              setTimeout(c, 0, e4);\n            }, e3.setImmediate = function(e4) {\n              \"function\" != typeof e4 && (e4 = new Function(\"\" + e4));\n              for (var t3 = new Array(arguments.length - 1), r4 = 0; r4 < t3.length; r4++) t3[r4] = arguments[r4 + 1];\n              var n2 = { callback: e4, args: t3 };\n              return h[o] = n2, i(o), o++;\n            }, e3.clearImmediate = f2;\n          }\n          function f2(e4) {\n            delete h[e4];\n          }\n          function c(e4) {\n            if (u) setTimeout(c, 0, e4);\n            else {\n              var t3 = h[e4];\n              if (t3) {\n                u = true;\n                try {\n                  !function(e5) {\n                    var t4 = e5.callback, r4 = e5.args;\n                    switch (r4.length) {\n                      case 0:\n                        t4();\n                        break;\n                      case 1:\n                        t4(r4[0]);\n                        break;\n                      case 2:\n                        t4(r4[0], r4[1]);\n                        break;\n                      case 3:\n                        t4(r4[0], r4[1], r4[2]);\n                        break;\n                      default:\n                        t4.apply(n, r4);\n                    }\n                  }(t3);\n                } finally {\n                  f2(e4), u = false;\n                }\n              }\n            }\n          }\n          function d(e4) {\n            e4.source === r3 && \"string\" == typeof e4.data && 0 === e4.data.indexOf(a) && c(+e4.data.slice(a.length));\n          }\n        }(\"undefined\" == typeof self ? void 0 === e2 ? this : e2 : self);\n      }).call(this, \"undefined\" != typeof commonjsGlobal ? commonjsGlobal : \"undefined\" != typeof self ? self : \"undefined\" != typeof window ? window : {});\n    }, {}] }, {}, [10])(10);\n  });\n})(jszip_min);\nvar jszip_minExports = jszip_min.exports;\nconst JSZip = /* @__PURE__ */ getDefaultExportFromCjs$1(jszip_minExports);\nvar xml$2 = { exports: {} };\nvar XML_CHARACTER_MAP = {\n  \"&\": \"&amp;\",\n  '\"': \"&quot;\",\n  \"'\": \"&apos;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\"\n};\nfunction escapeForXML$1(string) {\n  return string && string.replace ? string.replace(/([&\"<>'])/g, function(str, item) {\n    return XML_CHARACTER_MAP[item];\n  }) : string;\n}\nvar escapeForXML_1 = escapeForXML$1;\nvar escapeForXML = escapeForXML_1;\nvar Stream = streamBrowserify.Stream;\nvar DEFAULT_INDENT = \"    \";\nfunction xml(input, options2) {\n  if (typeof options2 !== \"object\") {\n    options2 = {\n      indent: options2\n    };\n  }\n  var stream = options2.stream ? new Stream() : null, output = \"\", interrupted = false, indent = !options2.indent ? \"\" : options2.indent === true ? DEFAULT_INDENT : options2.indent, instant = true;\n  function delay(func) {\n    if (!instant) {\n      func();\n    } else {\n      process$1.nextTick(func);\n    }\n  }\n  function append(interrupt, out) {\n    if (out !== void 0) {\n      output += out;\n    }\n    if (interrupt && !interrupted) {\n      stream = stream || new Stream();\n      interrupted = true;\n    }\n    if (interrupt && interrupted) {\n      var data = output;\n      delay(function() {\n        stream.emit(\"data\", data);\n      });\n      output = \"\";\n    }\n  }\n  function add(value, last) {\n    format(append, resolve(value, indent, indent ? 1 : 0), last);\n  }\n  function end() {\n    if (stream) {\n      var data = output;\n      delay(function() {\n        stream.emit(\"data\", data);\n        stream.emit(\"end\");\n        stream.readable = false;\n        stream.emit(\"close\");\n      });\n    }\n  }\n  function addXmlDeclaration(declaration) {\n    var encoding = declaration.encoding || \"UTF-8\", attr = { version: \"1.0\", encoding };\n    if (declaration.standalone) {\n      attr.standalone = declaration.standalone;\n    }\n    add({ \"?xml\": { _attr: attr } });\n    output = output.replace(\"/>\", \"?>\");\n  }\n  delay(function() {\n    instant = false;\n  });\n  if (options2.declaration) {\n    addXmlDeclaration(options2.declaration);\n  }\n  if (input && input.forEach) {\n    input.forEach(function(value, i) {\n      var last;\n      if (i + 1 === input.length)\n        last = end;\n      add(value, last);\n    });\n  } else {\n    add(input, end);\n  }\n  if (stream) {\n    stream.readable = true;\n    return stream;\n  }\n  return output;\n}\nfunction element() {\n  var input = Array.prototype.slice.call(arguments), self2 = {\n    _elem: resolve(input)\n  };\n  self2.push = function(input2) {\n    if (!this.append) {\n      throw new Error(\"not assigned to a parent!\");\n    }\n    var that = this;\n    var indent = this._elem.indent;\n    format(\n      this.append,\n      resolve(\n        input2,\n        indent,\n        this._elem.icount + (indent ? 1 : 0)\n      ),\n      function() {\n        that.append(true);\n      }\n    );\n  };\n  self2.close = function(input2) {\n    if (input2 !== void 0) {\n      this.push(input2);\n    }\n    if (this.end) {\n      this.end();\n    }\n  };\n  return self2;\n}\nfunction create_indent(character, count) {\n  return new Array(count || 0).join(character || \"\");\n}\nfunction resolve(data, indent, indent_count) {\n  indent_count = indent_count || 0;\n  var indent_spaces = create_indent(indent, indent_count);\n  var name;\n  var values = data;\n  var interrupt = false;\n  if (typeof data === \"object\") {\n    var keys = Object.keys(data);\n    name = keys[0];\n    values = data[name];\n    if (values && values._elem) {\n      values._elem.name = name;\n      values._elem.icount = indent_count;\n      values._elem.indent = indent;\n      values._elem.indents = indent_spaces;\n      values._elem.interrupt = values;\n      return values._elem;\n    }\n  }\n  var attributes = [], content = [];\n  var isStringContent;\n  function get_attributes(obj) {\n    var keys2 = Object.keys(obj);\n    keys2.forEach(function(key) {\n      attributes.push(attribute(key, obj[key]));\n    });\n  }\n  switch (typeof values) {\n    case \"object\":\n      if (values === null) break;\n      if (values._attr) {\n        get_attributes(values._attr);\n      }\n      if (values._cdata) {\n        content.push(\n          (\"<![CDATA[\" + values._cdata).replace(/\\]\\]>/g, \"]]]]><![CDATA[>\") + \"]]>\"\n        );\n      }\n      if (values.forEach) {\n        isStringContent = false;\n        content.push(\"\");\n        values.forEach(function(value) {\n          if (typeof value == \"object\") {\n            var _name = Object.keys(value)[0];\n            if (_name == \"_attr\") {\n              get_attributes(value._attr);\n            } else {\n              content.push(resolve(\n                value,\n                indent,\n                indent_count + 1\n              ));\n            }\n          } else {\n            content.pop();\n            isStringContent = true;\n            content.push(escapeForXML(value));\n          }\n        });\n        if (!isStringContent) {\n          content.push(\"\");\n        }\n      }\n      break;\n    default:\n      content.push(escapeForXML(values));\n  }\n  return {\n    name,\n    interrupt,\n    attributes,\n    content,\n    icount: indent_count,\n    indents: indent_spaces,\n    indent\n  };\n}\nfunction format(append, elem, end) {\n  if (typeof elem != \"object\") {\n    return append(false, elem);\n  }\n  var len = elem.interrupt ? 1 : elem.content.length;\n  function proceed() {\n    while (elem.content.length) {\n      var value = elem.content.shift();\n      if (value === void 0) continue;\n      if (interrupt(value)) return;\n      format(append, value);\n    }\n    append(false, (len > 1 ? elem.indents : \"\") + (elem.name ? \"</\" + elem.name + \">\" : \"\") + (elem.indent && !end ? \"\\n\" : \"\"));\n    if (end) {\n      end();\n    }\n  }\n  function interrupt(value) {\n    if (value.interrupt) {\n      value.interrupt.append = append;\n      value.interrupt.end = proceed;\n      value.interrupt = false;\n      append(true);\n      return true;\n    }\n    return false;\n  }\n  append(false, elem.indents + (elem.name ? \"<\" + elem.name : \"\") + (elem.attributes.length ? \" \" + elem.attributes.join(\" \") : \"\") + (len ? elem.name ? \">\" : \"\" : elem.name ? \"/>\" : \"\") + (elem.indent && len > 1 ? \"\\n\" : \"\"));\n  if (!len) {\n    return append(false, elem.indent ? \"\\n\" : \"\");\n  }\n  if (!interrupt(elem)) {\n    proceed();\n  }\n}\nfunction attribute(key, value) {\n  return key + '=\"' + escapeForXML(value) + '\"';\n}\nxml$2.exports = xml;\nxml$2.exports.element = xml$2.exports.Element = element;\nvar xmlExports = xml$2.exports;\nconst xml$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(xmlExports);\nconst obfuscatedStartOffset = 0;\nconst obfuscatedEndOffset = 32;\nconst guidSize = 32;\nconst obfuscate = (buf, fontKey) => {\n  const guid = fontKey.replace(/-/g, \"\");\n  if (guid.length !== guidSize) {\n    throw new Error(`Error: Cannot extract GUID from font filename: ${fontKey}`);\n  }\n  const hexStrings = guid.replace(/(..)/g, \"$1 \").trim().split(\" \");\n  const hexNumbers = hexStrings.map((hexString) => parseInt(hexString, 16));\n  hexNumbers.reverse();\n  const bytesToObfuscate = buf.slice(obfuscatedStartOffset, obfuscatedEndOffset);\n  const obfuscatedBytes = bytesToObfuscate.map((byte, i) => byte ^ hexNumbers[i % hexNumbers.length]);\n  const out = Buffer.concat([buf.slice(0, obfuscatedStartOffset), obfuscatedBytes, buf.slice(obfuscatedEndOffset)]);\n  return out;\n};\nclass Formatter {\n  format(input, context = { stack: [] }) {\n    const output = input.prepForXml(context);\n    if (output) {\n      return output;\n    } else {\n      throw Error(\"XMLComponent did not format correctly\");\n    }\n  }\n}\nclass ImageReplacer {\n  replace(xmlData, mediaData, offset) {\n    let currentXmlData = xmlData;\n    mediaData.forEach((image, i) => {\n      currentXmlData = currentXmlData.replace(new RegExp(`{${image.fileName}}`, \"g\"), (offset + i).toString());\n    });\n    return currentXmlData;\n  }\n  getMediaData(xmlData, media) {\n    return media.Array.filter((image) => xmlData.search(`{${image.fileName}}`) > 0);\n  }\n}\nclass NumberingReplacer {\n  replace(xmlData, concreteNumberings) {\n    let currentXmlData = xmlData;\n    for (const concreteNumbering of concreteNumberings) {\n      currentXmlData = currentXmlData.replace(\n        new RegExp(`{${concreteNumbering.reference}-${concreteNumbering.instance}}`, \"g\"),\n        concreteNumbering.numId.toString()\n      );\n    }\n    return currentXmlData;\n  }\n}\nclass Compiler {\n  constructor() {\n    __publicField(this, \"formatter\");\n    __publicField(this, \"imageReplacer\");\n    __publicField(this, \"numberingReplacer\");\n    this.formatter = new Formatter();\n    this.imageReplacer = new ImageReplacer();\n    this.numberingReplacer = new NumberingReplacer();\n  }\n  compile(file, prettifyXml) {\n    const zip = new JSZip();\n    const xmlifiedFileMapping = this.xmlifyFile(file, prettifyXml);\n    const map = new Map(Object.entries(xmlifiedFileMapping));\n    for (const [, obj] of map) {\n      if (Array.isArray(obj)) {\n        for (const subFile of obj) {\n          zip.file(subFile.path, subFile.data);\n        }\n      } else {\n        zip.file(obj.path, obj.data);\n      }\n    }\n    for (const data of file.Media.Array) {\n      if (data.type !== \"svg\") {\n        zip.file(`word/media/${data.fileName}`, data.data);\n      } else {\n        zip.file(`word/media/${data.fileName}`, data.data);\n        zip.file(`word/media/${data.fallback.fileName}`, data.fallback.data);\n      }\n    }\n    for (const { data: buffer2, name, fontKey } of file.FontTable.fontOptionsWithKey) {\n      const [nameWithoutExtension] = name.split(\".\");\n      zip.file(`word/fonts/${nameWithoutExtension}.odttf`, obfuscate(buffer2, fontKey));\n    }\n    return zip;\n  }\n  xmlifyFile(file, prettify) {\n    const documentRelationshipCount = file.Document.Relationships.RelationshipCount + 1;\n    const documentXmlData = xml$1(\n      this.formatter.format(file.Document.View, {\n        viewWrapper: file.Document,\n        file,\n        stack: []\n      }),\n      {\n        indent: prettify,\n        declaration: {\n          standalone: \"yes\",\n          encoding: \"UTF-8\"\n        }\n      }\n    );\n    const documentMediaDatas = this.imageReplacer.getMediaData(documentXmlData, file.Media);\n    return {\n      Relationships: {\n        data: (() => {\n          documentMediaDatas.forEach((mediaData, i) => {\n            file.Document.Relationships.createRelationship(\n              documentRelationshipCount + i,\n              \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\n              `media/${mediaData.fileName}`\n            );\n          });\n          file.Document.Relationships.createRelationship(\n            file.Document.Relationships.RelationshipCount + 1,\n            \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\n            \"fontTable.xml\"\n          );\n          return xml$1(\n            this.formatter.format(file.Document.Relationships, {\n              viewWrapper: file.Document,\n              file,\n              stack: []\n            }),\n            {\n              indent: prettify,\n              declaration: {\n                encoding: \"UTF-8\"\n              }\n            }\n          );\n        })(),\n        path: \"word/_rels/document.xml.rels\"\n      },\n      Document: {\n        data: (() => {\n          const xmlData = this.imageReplacer.replace(documentXmlData, documentMediaDatas, documentRelationshipCount);\n          const referenedXmlData = this.numberingReplacer.replace(xmlData, file.Numbering.ConcreteNumbering);\n          return referenedXmlData;\n        })(),\n        path: \"word/document.xml\"\n      },\n      Styles: {\n        data: (() => {\n          const xmlStyles = xml$1(\n            this.formatter.format(file.Styles, {\n              viewWrapper: file.Document,\n              file,\n              stack: []\n            }),\n            {\n              indent: prettify,\n              declaration: {\n                standalone: \"yes\",\n                encoding: \"UTF-8\"\n              }\n            }\n          );\n          const referencedXmlStyles = this.numberingReplacer.replace(xmlStyles, file.Numbering.ConcreteNumbering);\n          return referencedXmlStyles;\n        })(),\n        path: \"word/styles.xml\"\n      },\n      Properties: {\n        data: xml$1(\n          this.formatter.format(file.CoreProperties, {\n            viewWrapper: file.Document,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              standalone: \"yes\",\n              encoding: \"UTF-8\"\n            }\n          }\n        ),\n        path: \"docProps/core.xml\"\n      },\n      Numbering: {\n        data: xml$1(\n          this.formatter.format(file.Numbering, {\n            viewWrapper: file.Document,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              standalone: \"yes\",\n              encoding: \"UTF-8\"\n            }\n          }\n        ),\n        path: \"word/numbering.xml\"\n      },\n      FileRelationships: {\n        data: xml$1(\n          this.formatter.format(file.FileRelationships, {\n            viewWrapper: file.Document,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              encoding: \"UTF-8\"\n            }\n          }\n        ),\n        path: \"_rels/.rels\"\n      },\n      HeaderRelationships: file.Headers.map((headerWrapper, index) => {\n        const xmlData = xml$1(\n          this.formatter.format(headerWrapper.View, {\n            viewWrapper: headerWrapper,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              encoding: \"UTF-8\"\n            }\n          }\n        );\n        const mediaDatas = this.imageReplacer.getMediaData(xmlData, file.Media);\n        mediaDatas.forEach((mediaData, i) => {\n          headerWrapper.Relationships.createRelationship(\n            i,\n            \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\n            `media/${mediaData.fileName}`\n          );\n        });\n        return {\n          data: xml$1(\n            this.formatter.format(headerWrapper.Relationships, {\n              viewWrapper: headerWrapper,\n              file,\n              stack: []\n            }),\n            {\n              indent: prettify,\n              declaration: {\n                encoding: \"UTF-8\"\n              }\n            }\n          ),\n          path: `word/_rels/header${index + 1}.xml.rels`\n        };\n      }),\n      FooterRelationships: file.Footers.map((footerWrapper, index) => {\n        const xmlData = xml$1(\n          this.formatter.format(footerWrapper.View, {\n            viewWrapper: footerWrapper,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              encoding: \"UTF-8\"\n            }\n          }\n        );\n        const mediaDatas = this.imageReplacer.getMediaData(xmlData, file.Media);\n        mediaDatas.forEach((mediaData, i) => {\n          footerWrapper.Relationships.createRelationship(\n            i,\n            \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\n            `media/${mediaData.fileName}`\n          );\n        });\n        return {\n          data: xml$1(\n            this.formatter.format(footerWrapper.Relationships, {\n              viewWrapper: footerWrapper,\n              file,\n              stack: []\n            }),\n            {\n              indent: prettify,\n              declaration: {\n                encoding: \"UTF-8\"\n              }\n            }\n          ),\n          path: `word/_rels/footer${index + 1}.xml.rels`\n        };\n      }),\n      Headers: file.Headers.map((headerWrapper, index) => {\n        const tempXmlData = xml$1(\n          this.formatter.format(headerWrapper.View, {\n            viewWrapper: headerWrapper,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              encoding: \"UTF-8\"\n            }\n          }\n        );\n        const mediaDatas = this.imageReplacer.getMediaData(tempXmlData, file.Media);\n        const xmlData = this.imageReplacer.replace(tempXmlData, mediaDatas, 0);\n        const referenedXmlData = this.numberingReplacer.replace(xmlData, file.Numbering.ConcreteNumbering);\n        return {\n          data: referenedXmlData,\n          path: `word/header${index + 1}.xml`\n        };\n      }),\n      Footers: file.Footers.map((footerWrapper, index) => {\n        const tempXmlData = xml$1(\n          this.formatter.format(footerWrapper.View, {\n            viewWrapper: footerWrapper,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              encoding: \"UTF-8\"\n            }\n          }\n        );\n        const mediaDatas = this.imageReplacer.getMediaData(tempXmlData, file.Media);\n        const xmlData = this.imageReplacer.replace(tempXmlData, mediaDatas, 0);\n        const referenedXmlData = this.numberingReplacer.replace(xmlData, file.Numbering.ConcreteNumbering);\n        return {\n          data: referenedXmlData,\n          path: `word/footer${index + 1}.xml`\n        };\n      }),\n      ContentTypes: {\n        data: xml$1(\n          this.formatter.format(file.ContentTypes, {\n            viewWrapper: file.Document,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              encoding: \"UTF-8\"\n            }\n          }\n        ),\n        path: \"[Content_Types].xml\"\n      },\n      CustomProperties: {\n        data: xml$1(\n          this.formatter.format(file.CustomProperties, {\n            viewWrapper: file.Document,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              standalone: \"yes\",\n              encoding: \"UTF-8\"\n            }\n          }\n        ),\n        path: \"docProps/custom.xml\"\n      },\n      AppProperties: {\n        data: xml$1(\n          this.formatter.format(file.AppProperties, {\n            viewWrapper: file.Document,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              standalone: \"yes\",\n              encoding: \"UTF-8\"\n            }\n          }\n        ),\n        path: \"docProps/app.xml\"\n      },\n      FootNotes: {\n        data: xml$1(\n          this.formatter.format(file.FootNotes.View, {\n            viewWrapper: file.FootNotes,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              encoding: \"UTF-8\"\n            }\n          }\n        ),\n        path: \"word/footnotes.xml\"\n      },\n      FootNotesRelationships: {\n        data: xml$1(\n          this.formatter.format(file.FootNotes.Relationships, {\n            viewWrapper: file.FootNotes,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              encoding: \"UTF-8\"\n            }\n          }\n        ),\n        path: \"word/_rels/footnotes.xml.rels\"\n      },\n      Settings: {\n        data: xml$1(\n          this.formatter.format(file.Settings, {\n            viewWrapper: file.Document,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              standalone: \"yes\",\n              encoding: \"UTF-8\"\n            }\n          }\n        ),\n        path: \"word/settings.xml\"\n      },\n      Comments: {\n        data: xml$1(\n          this.formatter.format(file.Comments, {\n            viewWrapper: file.Document,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              standalone: \"yes\",\n              encoding: \"UTF-8\"\n            }\n          }\n        ),\n        path: \"word/comments.xml\"\n      },\n      FontTable: {\n        data: xml$1(\n          this.formatter.format(file.FontTable.View, {\n            viewWrapper: file.Document,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              standalone: \"yes\",\n              encoding: \"UTF-8\"\n            }\n          }\n        ),\n        path: \"word/fontTable.xml\"\n      },\n      FontTableRelationships: {\n        data: (() => xml$1(\n          this.formatter.format(file.FontTable.Relationships, {\n            viewWrapper: file.Document,\n            file,\n            stack: []\n          }),\n          {\n            indent: prettify,\n            declaration: {\n              encoding: \"UTF-8\"\n            }\n          }\n        ))(),\n        path: \"word/_rels/fontTable.xml.rels\"\n      }\n    };\n  }\n}\nconst PrettifyType = {\n  NONE: \"\",\n  WITH_2_BLANKS: \"  \",\n  WITH_4_BLANKS: \"    \",\n  WITH_TAB: \"\t\"\n};\nconst convertPrettifyType = (prettify) => prettify === true ? PrettifyType.WITH_2_BLANKS : prettify === false ? void 0 : prettify;\nclass Packer {\n  static toString(file, prettify) {\n    return __async(this, null, function* () {\n      const zip = this.compiler.compile(file, convertPrettifyType(prettify));\n      const zipData = yield zip.generateAsync({\n        type: \"string\",\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n        compression: \"DEFLATE\"\n      });\n      return zipData;\n    });\n  }\n  static toBuffer(file, prettify) {\n    return __async(this, null, function* () {\n      const zip = this.compiler.compile(file, convertPrettifyType(prettify));\n      const zipData = yield zip.generateAsync({\n        type: \"nodebuffer\",\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n        compression: \"DEFLATE\"\n      });\n      return zipData;\n    });\n  }\n  static toBase64String(file, prettify) {\n    return __async(this, null, function* () {\n      const zip = this.compiler.compile(file, convertPrettifyType(prettify));\n      const zipData = yield zip.generateAsync({\n        type: \"base64\",\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n        compression: \"DEFLATE\"\n      });\n      return zipData;\n    });\n  }\n  static toBlob(file, prettify) {\n    return __async(this, null, function* () {\n      const zip = this.compiler.compile(file, convertPrettifyType(prettify));\n      const zipData = yield zip.generateAsync({\n        type: \"blob\",\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n        compression: \"DEFLATE\"\n      });\n      return zipData;\n    });\n  }\n  static toStream(file, prettify) {\n    const stream = new streamBrowserify.Stream();\n    const zip = this.compiler.compile(file, convertPrettifyType(prettify));\n    zip.generateAsync({\n      type: \"nodebuffer\",\n      mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n      compression: \"DEFLATE\"\n    }).then((z) => {\n      stream.emit(\"data\", z);\n      stream.emit(\"end\");\n    });\n    return stream;\n  }\n}\n__publicField(Packer, \"compiler\", new Compiler());\nconst formatter$1 = new Formatter();\nconst toJson = (xmlData) => {\n  const xmlObj = lib.xml2js(xmlData, { compact: false, captureSpacesBetweenElements: true });\n  return xmlObj;\n};\nconst createTextElementContents = (text) => {\n  var _a;\n  const textJson = toJson(xml$1(formatter$1.format(new Text({ text }))));\n  return (_a = textJson.elements[0].elements) != null ? _a : [];\n};\nconst patchSpaceAttribute = (element2) => __spreadProps(__spreadValues({}, element2), {\n  attributes: {\n    \"xml:space\": \"preserve\"\n  }\n});\nconst getFirstLevelElements = (relationships, id) => {\n  var _a, _b;\n  return (_b = (_a = relationships.elements) == null ? void 0 : _a.filter((e) => e.name === id)[0].elements) != null ? _b : [];\n};\nconst appendContentType = (element2, contentType, extension) => {\n  const relationshipElements = getFirstLevelElements(element2, \"Types\");\n  const exist = relationshipElements.some(\n    (el) => {\n      var _a, _b;\n      return el.type === \"element\" && el.name === \"Default\" && ((_a = el == null ? void 0 : el.attributes) == null ? void 0 : _a.ContentType) === contentType && ((_b = el == null ? void 0 : el.attributes) == null ? void 0 : _b.Extension) === extension;\n    }\n  );\n  if (exist) {\n    return;\n  }\n  relationshipElements.push({\n    attributes: {\n      ContentType: contentType,\n      Extension: extension\n    },\n    name: \"Default\",\n    type: \"element\"\n  });\n};\nconst getIdFromRelationshipId = (relationshipId) => {\n  const output = parseInt(relationshipId.substring(3), 10);\n  return isNaN(output) ? 0 : output;\n};\nconst getNextRelationshipIndex = (relationships) => {\n  const relationshipElements = getFirstLevelElements(relationships, \"Relationships\");\n  return relationshipElements.map((e) => {\n    var _a, _b, _c;\n    return getIdFromRelationshipId((_c = (_b = (_a = e.attributes) == null ? void 0 : _a.Id) == null ? void 0 : _b.toString()) != null ? _c : \"\");\n  }).reduce((acc, curr) => Math.max(acc, curr), 0) + 1;\n};\nconst appendRelationship = (relationships, id, type2, target, targetMode) => {\n  const relationshipElements = getFirstLevelElements(relationships, \"Relationships\");\n  relationshipElements.push({\n    attributes: {\n      Id: `rId${id}`,\n      Type: type2,\n      Target: target,\n      TargetMode: targetMode\n    },\n    name: \"Relationship\",\n    type: \"element\"\n  });\n  return relationshipElements;\n};\nconst findRunElementIndexWithToken = (paragraphElement, token) => {\n  var _a, _b, _c, _d;\n  for (let i = 0; i < ((_a = paragraphElement.elements) != null ? _a : []).length; i++) {\n    const element2 = paragraphElement.elements[i];\n    if (element2.type === \"element\" && element2.name === \"w:r\") {\n      const textElement = ((_b = element2.elements) != null ? _b : []).filter((e) => e.type === \"element\" && e.name === \"w:t\");\n      for (const text of textElement) {\n        if (!((_c = text.elements) == null ? void 0 : _c[0])) {\n          continue;\n        }\n        if ((_d = text.elements[0].text) == null ? void 0 : _d.includes(token)) {\n          return i;\n        }\n      }\n    }\n  }\n  throw new Error(\"Token not found\");\n};\nconst splitRunElement = (runElement, token) => {\n  var _a, _b;\n  let splitIndex = 0;\n  const splitElements = (_b = (_a = runElement.elements) == null ? void 0 : _a.map((e, i) => {\n    var _a2, _b2, _c;\n    if (e.type === \"element\" && e.name === \"w:t\") {\n      const text = (_c = (_b2 = (_a2 = e.elements) == null ? void 0 : _a2[0]) == null ? void 0 : _b2.text) != null ? _c : \"\";\n      const splitText = text.split(token);\n      const newElements = splitText.map((t) => __spreadProps(__spreadValues(__spreadValues({}, e), patchSpaceAttribute(e)), {\n        elements: createTextElementContents(t)\n      }));\n      splitIndex = i;\n      return newElements;\n    } else {\n      return e;\n    }\n  }).flat()) != null ? _b : [];\n  const leftRunElement = __spreadProps(__spreadValues({}, JSON.parse(JSON.stringify(runElement))), {\n    elements: splitElements.slice(0, splitIndex + 1)\n  });\n  const rightRunElement = __spreadProps(__spreadValues({}, JSON.parse(JSON.stringify(runElement))), {\n    elements: splitElements.slice(splitIndex + 1)\n  });\n  return { left: leftRunElement, right: rightRunElement };\n};\nconst ReplaceMode = {\n  START: 0,\n  MIDDLE: 1,\n  END: 2\n};\nconst replaceTokenInParagraphElement = ({\n  paragraphElement,\n  renderedParagraph,\n  originalText,\n  replacementText\n}) => {\n  const startIndex = renderedParagraph.text.indexOf(originalText);\n  const endIndex = startIndex + originalText.length - 1;\n  let replaceMode = ReplaceMode.START;\n  for (const run of renderedParagraph.runs) {\n    for (const { text, index, start, end } of run.parts) {\n      switch (replaceMode) {\n        case ReplaceMode.START:\n          if (startIndex >= start) {\n            const offsetStartIndex = startIndex - start;\n            const offsetEndIndex = Math.min(endIndex, end) - start;\n            const partToReplace = run.text.substring(offsetStartIndex, offsetEndIndex + 1);\n            if (partToReplace === \"\") {\n              continue;\n            }\n            const firstPart = text.replace(partToReplace, replacementText);\n            patchTextElement(paragraphElement.elements[run.index].elements[index], firstPart);\n            replaceMode = ReplaceMode.MIDDLE;\n            continue;\n          }\n          break;\n        case ReplaceMode.MIDDLE:\n          if (endIndex <= end) {\n            const lastPart = text.substring(endIndex - start + 1);\n            patchTextElement(paragraphElement.elements[run.index].elements[index], lastPart);\n            const currentElement2 = paragraphElement.elements[run.index].elements[index];\n            paragraphElement.elements[run.index].elements[index] = patchSpaceAttribute(currentElement2);\n            replaceMode = ReplaceMode.END;\n          } else {\n            patchTextElement(paragraphElement.elements[run.index].elements[index], \"\");\n          }\n          break;\n      }\n    }\n  }\n  return paragraphElement;\n};\nconst patchTextElement = (element2, text) => {\n  element2.elements = createTextElementContents(text);\n  return element2;\n};\nconst renderParagraphNode = (node) => {\n  if (node.element.name !== \"w:p\") {\n    throw new Error(`Invalid node type: ${node.element.name}`);\n  }\n  if (!node.element.elements) {\n    return {\n      text: \"\",\n      runs: [],\n      index: -1,\n      pathToParagraph: []\n    };\n  }\n  let currentRunStringLength = 0;\n  const runs = node.element.elements.map((element2, i) => ({ element: element2, i })).filter(({ element: element2 }) => element2.name === \"w:r\").map(({ element: element2, i }) => {\n    const renderedRunNode = renderRunNode(element2, i, currentRunStringLength);\n    currentRunStringLength += renderedRunNode.text.length;\n    return renderedRunNode;\n  }).filter((e) => !!e);\n  const text = runs.reduce((acc, curr) => acc + curr.text, \"\");\n  return {\n    text,\n    runs,\n    index: node.index,\n    pathToParagraph: buildNodePath(node)\n  };\n};\nconst renderRunNode = (node, index, currentRunStringIndex) => {\n  if (!node.elements) {\n    return {\n      text: \"\",\n      parts: [],\n      index: -1,\n      start: currentRunStringIndex,\n      end: currentRunStringIndex\n    };\n  }\n  let currentTextStringIndex = currentRunStringIndex;\n  const parts = node.elements.map(\n    (element2, i) => {\n      var _a, _b;\n      return element2.name === \"w:t\" && element2.elements && element2.elements.length > 0 ? {\n        text: (_b = (_a = element2.elements[0].text) == null ? void 0 : _a.toString()) != null ? _b : \"\",\n        index: i,\n        start: currentTextStringIndex,\n        end: (() => {\n          var _a2, _b2;\n          currentTextStringIndex += ((_b2 = (_a2 = element2.elements[0].text) == null ? void 0 : _a2.toString()) != null ? _b2 : \"\").length - 1;\n          return currentTextStringIndex;\n        })()\n      } : void 0;\n    }\n  ).filter((e) => !!e).map((e) => e);\n  const text = parts.reduce((acc, curr) => acc + curr.text, \"\");\n  return {\n    text,\n    parts,\n    index,\n    start: currentRunStringIndex,\n    end: currentTextStringIndex\n  };\n};\nconst buildNodePath = (node) => node.parent ? [...buildNodePath(node.parent), node.index] : [node.index];\nconst elementsToWrapper = (wrapper) => {\n  var _a, _b;\n  return (_b = (_a = wrapper.element.elements) == null ? void 0 : _a.map((e, i) => ({\n    element: e,\n    index: i,\n    parent: wrapper\n  }))) != null ? _b : [];\n};\nconst traverse = (node) => {\n  let renderedParagraphs = [];\n  const queue2 = [\n    ...elementsToWrapper({\n      element: node,\n      index: 0,\n      parent: void 0\n    })\n  ];\n  let currentNode;\n  while (queue2.length > 0) {\n    currentNode = queue2.shift();\n    if (currentNode.element.name === \"w:p\") {\n      renderedParagraphs = [...renderedParagraphs, renderParagraphNode(currentNode)];\n    } else {\n      queue2.push(...elementsToWrapper(currentNode));\n    }\n  }\n  return renderedParagraphs;\n};\nconst findLocationOfText = (node, text) => traverse(node).filter((p) => p.text.includes(text));\nconst formatter = new Formatter();\nconst SPLIT_TOKEN = \"ɵ\";\nconst replacer = ({\n  json,\n  patch,\n  patchText,\n  context,\n  keepOriginalStyles = true\n}) => {\n  const renderedParagraphs = findLocationOfText(json, patchText);\n  if (renderedParagraphs.length === 0) {\n    return { element: json, didFindOccurrence: false };\n  }\n  for (const renderedParagraph of renderedParagraphs) {\n    const textJson = patch.children.map((c) => toJson(xml$1(formatter.format(c, context)))).map((c) => c.elements[0]);\n    switch (patch.type) {\n      case PatchType.DOCUMENT: {\n        const parentElement = goToParentElementFromPath(json, renderedParagraph.pathToParagraph);\n        const elementIndex = getLastElementIndexFromPath(renderedParagraph.pathToParagraph);\n        parentElement.elements.splice(elementIndex, 1, ...textJson);\n        break;\n      }\n      case PatchType.PARAGRAPH:\n      default: {\n        const paragraphElement = goToElementFromPath(json, renderedParagraph.pathToParagraph);\n        replaceTokenInParagraphElement({\n          paragraphElement,\n          renderedParagraph,\n          originalText: patchText,\n          replacementText: SPLIT_TOKEN\n        });\n        const index = findRunElementIndexWithToken(paragraphElement, SPLIT_TOKEN);\n        const runElementToBeReplaced = paragraphElement.elements[index];\n        const { left, right } = splitRunElement(runElementToBeReplaced, SPLIT_TOKEN);\n        let newRunElements = textJson;\n        let patchedRightElement = right;\n        if (keepOriginalStyles) {\n          const runElementNonTextualElements = runElementToBeReplaced.elements.filter(\n            (e) => e.type === \"element\" && e.name === \"w:rPr\"\n          );\n          newRunElements = textJson.map((e) => __spreadProps(__spreadValues({}, e), {\n            elements: [...runElementNonTextualElements, ...e.elements]\n          }));\n          patchedRightElement = __spreadProps(__spreadValues({}, right), {\n            elements: [...runElementNonTextualElements, ...right.elements]\n          });\n        }\n        paragraphElement.elements.splice(index, 1, left, ...newRunElements, patchedRightElement);\n        break;\n      }\n    }\n  }\n  return { element: json, didFindOccurrence: true };\n};\nconst goToElementFromPath = (json, path) => {\n  let element2 = json;\n  for (let i = 1; i < path.length; i++) {\n    const index = path[i];\n    const nextElements = element2.elements;\n    element2 = nextElements[index];\n  }\n  return element2;\n};\nconst goToParentElementFromPath = (json, path) => goToElementFromPath(json, path.slice(0, path.length - 1));\nconst getLastElementIndexFromPath = (path) => path[path.length - 1];\nconst PatchType = {\n  DOCUMENT: \"file\",\n  PARAGRAPH: \"paragraph\"\n};\nconst imageReplacer = new ImageReplacer();\nconst patchDocument = (_0) => __async(void 0, [_0], function* ({\n  outputType,\n  data,\n  patches,\n  keepOriginalStyles\n}) {\n  var _a, _b;\n  const zipContent = yield JSZip.loadAsync(data);\n  const contexts = /* @__PURE__ */ new Map();\n  const file = {\n    Media: new Media()\n  };\n  const map = /* @__PURE__ */ new Map();\n  const imageRelationshipAdditions = [];\n  const hyperlinkRelationshipAdditions = [];\n  let hasMedia = false;\n  const binaryContentMap = /* @__PURE__ */ new Map();\n  for (const [key, value] of Object.entries(zipContent.files)) {\n    if (!key.endsWith(\".xml\") && !key.endsWith(\".rels\")) {\n      binaryContentMap.set(key, yield value.async(\"uint8array\"));\n      continue;\n    }\n    const json = toJson(yield value.async(\"text\"));\n    if (key.startsWith(\"word/\") && !key.endsWith(\".xml.rels\")) {\n      const context = {\n        file,\n        viewWrapper: {\n          Relationships: {\n            createRelationship: (linkId, _, target, __) => {\n              hyperlinkRelationshipAdditions.push({\n                key,\n                hyperlink: {\n                  id: linkId,\n                  link: target\n                }\n              });\n            }\n          }\n        },\n        stack: []\n      };\n      contexts.set(key, context);\n      for (const [patchKey, patchValue] of Object.entries(patches)) {\n        const patchText = `{{${patchKey}}}`;\n        while (true) {\n          const { didFindOccurrence } = replacer({\n            json,\n            patch: __spreadProps(__spreadValues({}, patchValue), {\n              children: patchValue.children.map((element2) => {\n                if (element2 instanceof ExternalHyperlink) {\n                  const concreteHyperlink = new ConcreteHyperlink(element2.options.children, uniqueId());\n                  hyperlinkRelationshipAdditions.push({\n                    key,\n                    hyperlink: {\n                      id: concreteHyperlink.linkId,\n                      link: element2.options.link\n                    }\n                  });\n                  return concreteHyperlink;\n                } else {\n                  return element2;\n                }\n              })\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            }),\n            patchText,\n            context,\n            keepOriginalStyles\n          });\n          if (!didFindOccurrence) {\n            break;\n          }\n        }\n      }\n      const mediaDatas = imageReplacer.getMediaData(JSON.stringify(json), context.file.Media);\n      if (mediaDatas.length > 0) {\n        hasMedia = true;\n        imageRelationshipAdditions.push({\n          key,\n          mediaDatas\n        });\n      }\n    }\n    map.set(key, json);\n  }\n  for (const { key, mediaDatas } of imageRelationshipAdditions) {\n    const relationshipKey = `word/_rels/${key.split(\"/\").pop()}.rels`;\n    const relationshipsJson = (_a = map.get(relationshipKey)) != null ? _a : createRelationshipFile();\n    map.set(relationshipKey, relationshipsJson);\n    const index = getNextRelationshipIndex(relationshipsJson);\n    const newJson = imageReplacer.replace(JSON.stringify(map.get(key)), mediaDatas, index);\n    map.set(key, JSON.parse(newJson));\n    for (let i = 0; i < mediaDatas.length; i++) {\n      const { fileName } = mediaDatas[i];\n      appendRelationship(\n        relationshipsJson,\n        index + i,\n        \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\n        `media/${fileName}`\n      );\n    }\n  }\n  for (const { key, hyperlink } of hyperlinkRelationshipAdditions) {\n    const relationshipKey = `word/_rels/${key.split(\"/\").pop()}.rels`;\n    const relationshipsJson = (_b = map.get(relationshipKey)) != null ? _b : createRelationshipFile();\n    map.set(relationshipKey, relationshipsJson);\n    appendRelationship(\n      relationshipsJson,\n      hyperlink.id,\n      \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\",\n      hyperlink.link,\n      TargetModeType.EXTERNAL\n    );\n  }\n  if (hasMedia) {\n    const contentTypesJson = map.get(\"[Content_Types].xml\");\n    if (!contentTypesJson) {\n      throw new Error(\"Could not find content types file\");\n    }\n    appendContentType(contentTypesJson, \"image/png\", \"png\");\n    appendContentType(contentTypesJson, \"image/jpeg\", \"jpeg\");\n    appendContentType(contentTypesJson, \"image/jpeg\", \"jpg\");\n    appendContentType(contentTypesJson, \"image/bmp\", \"bmp\");\n    appendContentType(contentTypesJson, \"image/gif\", \"gif\");\n    appendContentType(contentTypesJson, \"image/svg+xml\", \"svg\");\n  }\n  const zip = new JSZip();\n  for (const [key, value] of map) {\n    const output = toXml(value);\n    zip.file(key, output);\n  }\n  for (const [key, value] of binaryContentMap) {\n    zip.file(key, value);\n  }\n  for (const { data: stream, fileName } of file.Media.Array) {\n    zip.file(`word/media/${fileName}`, stream);\n  }\n  return zip.generateAsync({\n    type: outputType,\n    mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n    compression: \"DEFLATE\"\n  });\n});\nconst toXml = (jsonObj) => {\n  const output = lib.js2xml(jsonObj);\n  return output;\n};\nconst createRelationshipFile = () => ({\n  declaration: {\n    attributes: {\n      version: \"1.0\",\n      encoding: \"UTF-8\",\n      standalone: \"yes\"\n    }\n  },\n  elements: [\n    {\n      type: \"element\",\n      name: \"Relationships\",\n      attributes: {\n        xmlns: \"http://schemas.openxmlformats.org/package/2006/relationships\"\n      },\n      elements: []\n    }\n  ]\n});\nconst patchDetector = (_0) => __async(void 0, [_0], function* ({ data }) {\n  const zipContent = yield JSZip.loadAsync(data);\n  const patches = /* @__PURE__ */ new Set();\n  for (const [key, value] of Object.entries(zipContent.files)) {\n    if (!key.endsWith(\".xml\") && !key.endsWith(\".rels\")) {\n      continue;\n    }\n    if (key.startsWith(\"word/\") && !key.endsWith(\".xml.rels\")) {\n      const json = toJson(yield value.async(\"text\"));\n      traverse(json).forEach((p) => findPatchKeys(p.text).forEach((patch) => patches.add(patch)));\n    }\n  }\n  return Array.from(patches);\n});\nconst findPatchKeys = (text) => {\n  var _a;\n  const pattern = new RegExp(\"(?<=\\\\{\\\\{).+?(?=\\\\}\\\\})\", \"gs\");\n  return (_a = text.match(pattern)) != null ? _a : [];\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZG9jeC9idWlsZC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUsNkRBQTZEO0FBQzNJO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxPQUFPLHNDQUFzQyxZQUFZLG9DQUFvQyxVQUFVLGNBQWMsS0FBSztBQUMvSyxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHNCQUFzQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSw4QkFBOEIsUUFBUTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsaUJBQWlCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixvQ0FBb0MsUUFBUTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixPQUFPO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyx5QkFBeUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsWUFBWTtBQUMxRTtBQUNBLDhEQUE4RCxZQUFZO0FBQzFFO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixzQkFBc0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsU0FBUztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsV0FBVztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixVQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsWUFBWTtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsV0FBVztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsV0FBVztBQUN0QjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxXQUFXO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixZQUFZO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsU0FBUztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGlCQUFpQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGlCQUFpQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFNBQVM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFNBQVM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsU0FBUztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxFQUFFO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFNBQVM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsZUFBZTtBQUM1QztBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSw2QkFBNkIsUUFBUTtBQUNyQztBQUNBLDBCQUEwQixlQUFlO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsWUFBWTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixTQUFTO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLFNBQVM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLFNBQVM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0JBQXNCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixTQUFTO0FBQ2pDO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixpQkFBaUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFlBQVk7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsZ0JBQWdCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGdCQUFnQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixZQUFZO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsUUFBUTtBQUM5QjtBQUNBLHdCQUF3QixRQUFRO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxpQkFBaUI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixjQUFjO0FBQ2xDO0FBQ0E7QUFDQSxvQkFBb0IsY0FBYztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0Msb0JBQW9CO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixpQkFBaUI7QUFDckM7QUFDQTtBQUNBLGlGQUFpRixzQ0FBc0M7QUFDdkg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyw4Q0FBOEM7QUFDcEYsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RCxNQUFNO0FBQ04sb0RBQW9EO0FBQ3BELE1BQU07QUFDTiwwREFBMEQ7QUFDMUQsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0Msa0JBQWtCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFNBQVMsVUFBVTtBQUMzQyxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxVQUFVO0FBQ3ZELE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsdUJBQXVCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLHFCQUFxQix1QkFBdUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELGtCQUFrQjtBQUNuRSxNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLFNBQVM7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxTQUFTO0FBQ2xEO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDBCQUEwQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrQkFBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsWUFBWSxlQUFlLFlBQVk7QUFDeEQsaUJBQWlCLEtBQUs7QUFDdEI7QUFDQSxpQkFBaUIsNEJBQTRCLDJCQUEyQixZQUFZO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixZQUFZLGVBQWUsWUFBWTtBQUN4RCxpQkFBaUIsS0FBSztBQUN0QjtBQUNBLGlCQUFpQixrQ0FBa0MsMkJBQTJCLFlBQVk7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixzQkFBc0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsNEJBQTRCLFNBQVM7QUFDckM7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELEtBQUs7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsT0FBTztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RDtBQUM5RDtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixjQUFjO0FBQ2Q7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0Esd0JBQXdCLHNCQUFzQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHNCQUFzQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHNCQUFzQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsNkRBQTZEO0FBQ3JHLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrQkFBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEVBQTBFLGFBQWE7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3Qyw2REFBNkQ7QUFDckcsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0EsMkZBQTJGO0FBQzNGO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFNBQVM7QUFDL0I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0Esb0JBQW9CLHlCQUF5QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxPQUFPO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyRUFBMkUsYUFBYTtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLE9BQU87QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLE9BQU87QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixXQUFXO0FBQ1g7QUFDQSxzREFBc0QsT0FBTztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELG1CQUFtQjtBQUN0RSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsVUFBVTtBQUNWO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxzQkFBc0Isc0JBQXNCO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCLGtDQUFrQyxzQkFBc0Isc0JBQXNCO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsOEJBQThCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isa0JBQWtCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsZ0JBQWdCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsSUFBSTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsSUFBSTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELElBQUk7QUFDN0QsMENBQTBDLElBQUksY0FBYyxnQkFBZ0I7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxlQUFlLEVBQUUsS0FBSztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxNQUFNO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxnQkFBZ0I7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxLQUFLO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQywyQkFBMkI7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsS0FBSztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxLQUFLO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsS0FBSztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxjQUFjO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsWUFBWTtBQUN6RDtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsMkJBQTJCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw2Q0FBNkM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyx5Q0FBeUM7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyx1Q0FBdUM7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQywwQ0FBMEM7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxxQ0FBcUM7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsb0JBQW9CO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsMkJBQTJCO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QywyQkFBMkI7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLDJCQUEyQjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsMkJBQTJCO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwwQkFBMEI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLDJCQUEyQjtBQUNyRTtBQUNBLE1BQU07QUFDTiwwQ0FBMEMsK0RBQStEO0FBQ3pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isb0JBQW9CO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxrQkFBa0I7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsZ0JBQWdCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsZ0JBQWdCO0FBQ2xDO0FBQ0E7QUFDQSxJQUFJO0FBQ0osZ0JBQWdCLGdCQUFnQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixnQkFBZ0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGdCQUFnQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsZ0JBQWdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixPQUFPO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixvQkFBb0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isb0JBQW9CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsUUFBUTtBQUMxQjtBQUNBLFNBQVMsY0FBYztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGNBQWM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixRQUFRO0FBQzFCO0FBQ0EsU0FBUyxjQUFjO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxjQUFjO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFFBQVE7QUFDMUI7QUFDQSxTQUFTLGNBQWM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixjQUFjO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsUUFBUTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLG9CQUFvQjtBQUMvQztBQUNBLGNBQWMsZ0JBQWdCO0FBQzlCO0FBQ0E7QUFDQSxjQUFjLGdCQUFnQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLG9CQUFvQixHQUFHLG9CQUFvQixHQUFHLG9CQUFvQixHQUFHLG9CQUFvQixHQUFHLHFCQUFxQjtBQUM3STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0Esa0JBQWtCLEVBQUUsb0JBQW9CO0FBQ3hDO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUscUNBQXFDO0FBQ3BEO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLEVBQUUsNkVBQTZFO0FBQ2pHLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLElBQUk7QUFDUjtBQUNBO0FBQ0EsbUJBQW1CLE9BQU87QUFDMUI7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxRQUFRO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxrQkFBa0I7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixvQkFBb0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLG9CQUFvQjtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EseUJBQXlCLCtCQUErQjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxrQ0FBa0MsK0JBQStCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsMkJBQTJCLElBQUksc0NBQXNDO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLFFBQVE7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsMEJBQTBCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLHNDQUFzQztBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsdURBQXVEO0FBQ3hGO0FBQ0E7QUFDQSx3QkFBd0IsOENBQThDO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsSUFBSTtBQUNkO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiwrQkFBK0I7QUFDbkQ7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsTUFBTTtBQUNOLGtDQUFrQywyRUFBMkU7QUFDN0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLG1CQUFtQixNQUFNLEdBQUcsY0FBYztBQUMxQztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsdUNBQXVDO0FBQ3ZDO0FBQ0EsU0FBUztBQUNULFdBQVcsaUNBQWlDLEdBQUcsdUJBQXVCO0FBQ3RFO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLDJCQUEyQjtBQUNuRSwwQkFBMEIsV0FBVztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsa0JBQWtCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0Msb0JBQW9CO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLFdBQVcsT0FBTyxVQUFVO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsd0VBQXdFO0FBQzdHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsWUFBWTtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELElBQUk7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxJQUFJO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsSUFBSTtBQUNwRDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsbUVBQW1FO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFVBQVU7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsZ0RBQWdEO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwrQkFBK0I7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLEVBQUUsSUFBSTtBQUM5QyxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsWUFBWTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBLHdDQUF3QywyQkFBMkI7QUFDbkUsaUNBQWlDLFdBQVc7QUFDNUM7QUFDQSx1QkFBdUIsYUFBYTtBQUNwQztBQUNBO0FBQ0EsdUJBQXVCLGFBQWE7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELHNCQUFzQjtBQUN2RTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsOENBQThDO0FBQzlEO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiw2RUFBNkU7QUFDOUYsaUJBQWlCLHVFQUF1RTtBQUN4RixvQkFBb0IsK0JBQStCO0FBQ25ELHNCQUFzQjtBQUN0QixPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsWUFBWTtBQUM5QixPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxtQ0FBbUM7QUFDbkU7QUFDQTtBQUNBLGVBQWUsK0VBQStFO0FBQzlGLGFBQWEseUVBQXlFO0FBQ3RGLGVBQWUsa0NBQWtDO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsTUFBTTtBQUNOLGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtREFBbUQ7QUFDbEUsaUJBQWlCLGlEQUFpRDtBQUNsRSxrQkFBa0IseURBQXlEO0FBQzNFLGdCQUFnQiwrQ0FBK0M7QUFDL0Qsa0JBQWtCLG1EQUFtRDtBQUNyRSxrQkFBa0IsbURBQW1EO0FBQ3JFLGtCQUFrQjtBQUNsQixPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsOEJBQThCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsb0RBQW9EO0FBQ3JFLGtCQUFrQixvREFBb0Q7QUFDdEUsdUJBQXVCO0FBQ3ZCLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxjQUFjO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsWUFBWTtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxJQUFJO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsSUFBSTtBQUNaLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0EsTUFBTSxJQUFJO0FBQ1YsWUFBWSw2Q0FBNkMsSUFBSTtBQUM3RCwyQkFBMkI7QUFDM0IsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLElBQUk7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEMsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixjQUFjO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiw2Q0FBNkM7QUFDOUQsaUJBQWlCO0FBQ2pCLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELEdBQUc7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLGNBQWM7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCx3Q0FBd0MsNkJBQTZCLEdBQUcsb0RBQW9EO0FBQzVILE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsMERBQTBEO0FBQ3pHO0FBQ0EsOENBQThDLHdEQUF3RDtBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsaUJBQWlCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsUUFBUTtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxnQkFBZ0I7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCwwQkFBMEI7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxlQUFlO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsU0FBUztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLGVBQWU7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxTQUFTO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsZUFBZTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELFNBQVM7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLG9CQUFvQjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELFdBQVc7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxvQkFBb0I7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxXQUFXO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QiwyQkFBMkI7QUFDM0IsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsMERBQTBEO0FBQ2pGO0FBQ0E7QUFDQSxzREFBc0QsaUNBQWlDO0FBQ3ZGO0FBQ0E7QUFDQSx1REFBdUQsa0NBQWtDO0FBQ3pGO0FBQ0E7QUFDQSx5REFBeUQsb0NBQW9DO0FBQzdGO0FBQ0E7QUFDQSx3REFBd0QsbUNBQW1DO0FBQzNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isb0NBQW9DO0FBQzFEO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixLQUFLO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw2QkFBNkI7QUFDN0MsZ0JBQWdCO0FBQ2hCLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLGNBQWM7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxjQUFjO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxjQUFjO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxnQkFBZ0I7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxhQUFhO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0M7QUFDL0MseUNBQXlDLFdBQVc7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxpQ0FBaUM7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQscUJBQXFCO0FBQ25GO0FBQ0E7QUFDQSwwQkFBMEIscUJBQXFCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzRUFBc0UsV0FBVztBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrR0FBK0csTUFBTTtBQUNySDtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtHQUErRyxNQUFNO0FBQ3JIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLHFDQUFxQztBQUN0RDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLHdCQUF3QjtBQUMxRDtBQUNBO0FBQ0EsVUFBVTtBQUNWLEdBQUcsY0FBYyxXQUFXLDJCQUEyQixFQUFFLFNBQVMsTUFBTSxJQUFJO0FBQzVFO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGdDQUFnQztBQUNwRCxvQkFBb0IsZ0NBQWdDO0FBQ3BELG9CQUFvQixnQ0FBZ0M7QUFDcEQsb0JBQW9CLGdDQUFnQztBQUNwRCxvQkFBb0IsZ0NBQWdDO0FBQ3BELG9CQUFvQjtBQUNwQjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxNQUFNO0FBQ3BCO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksdUZBQXVGO0FBQ25HLFdBQVcsOEZBQThGO0FBQ3pHLFdBQVcsdUZBQXVGO0FBQ2xHLGFBQWEsaUZBQWlGO0FBQzlGLGFBQWEsaUZBQWlGO0FBQzlGLGdCQUFnQix3RkFBd0Y7QUFDeEcsZ0JBQWdCLHdGQUF3RjtBQUN4RyxhQUFhLGlGQUFpRjtBQUM5RixrQkFBa0Isa0dBQWtHO0FBQ3BILGVBQWUseUZBQXlGO0FBQ3hHLG1CQUFtQjtBQUNuQixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRixRQUFRLHVCQUF1QjtBQUNoSDtBQUNBO0FBQ0Esb0JBQW9CLHFCQUFxQjtBQUN6QztBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsaUJBQWlCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLG9CQUFvQiw4QkFBOEI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLGtCQUFrQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxnQkFBZ0I7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxnQkFBZ0I7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxjQUFjO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsWUFBWTtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixVQUFVLEdBQUcsU0FBUztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELGlEQUFpRDtBQUN4RztBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsY0FBYztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLFlBQVk7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QywyQkFBMkI7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHlDQUF5QztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSx5Q0FBeUM7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxnQkFBZ0I7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSx1RUFBdUU7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxzREFBc0Q7QUFDdEQsbURBQW1EO0FBQ25ELG1FQUFtRTtBQUNuRSxvREFBb0Q7QUFDcEQsNERBQTREO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0RUFBNEU7QUFDNUU7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLCtFQUErRSxZQUFZO0FBQzNGLDJFQUEyRSxjQUFjO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsaUNBQWlDO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSwrREFBK0Q7QUFDL0QsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFlBQVksY0FBYyx3QkFBd0I7QUFDakUsNkVBQTZFO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHFCQUFxQjtBQUM3QztBQUNBO0FBQ0E7QUFDQSxlQUFlLG9CQUFvQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixxQkFBcUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQkFBb0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QywyQkFBMkI7QUFDbkU7QUFDQTtBQUNBLHVCQUF1QixhQUFhLE9BQU8sNkJBQTZCO0FBQ3hFO0FBQ0E7QUFDQSx1QkFBdUIsYUFBYSxPQUFPLG9DQUFvQztBQUMvRTtBQUNBO0FBQ0EsdUJBQXVCLGFBQWEsT0FBTyw2Q0FBNkM7QUFDeEY7QUFDQTtBQUNBLHVCQUF1QixhQUFhLE9BQU8sZ0RBQWdEO0FBQzNGO0FBQ0E7QUFDQSx1QkFBdUIsYUFBYSxPQUFPLGtDQUFrQztBQUM3RTtBQUNBO0FBQ0EsdUJBQXVCLGFBQWE7QUFDcEM7QUFDQTtBQUNBLHVCQUF1QixhQUFhLE9BQU8sa0NBQWtDO0FBQzdFO0FBQ0E7QUFDQSx1QkFBdUIsYUFBYSxPQUFPLDRDQUE0QztBQUN2RjtBQUNBO0FBQ0EsdUJBQXVCLGFBQWEsT0FBTyxrQ0FBa0M7QUFDN0U7QUFDQTtBQUNBLHVCQUF1QixhQUFhLE9BQU8sNENBQTRDO0FBQ3ZGO0FBQ0E7QUFDQSx1QkFBdUIsYUFBYSxPQUFPLDRDQUE0QztBQUN2RjtBQUNBO0FBQ0EscUVBQXFFLGFBQWEsR0FBRyxTQUFTO0FBQzlGLHVCQUF1QixhQUFhLE9BQU8sT0FBTztBQUNsRDtBQUNBO0FBQ0EsdUJBQXVCLGFBQWE7QUFDcEM7QUFDQTtBQUNBLHVCQUF1QixhQUFhO0FBQ3BDO0FBQ0E7QUFDQSx1QkFBdUIsYUFBYTtBQUNwQztBQUNBO0FBQ0EsdUJBQXVCLGFBQWE7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGNBQWM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixjQUFjO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDRCQUE0QjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLDJCQUEyQjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsMkJBQTJCO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QywyQkFBMkI7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLDJCQUEyQjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixvQkFBb0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsNENBQTRDO0FBQ2hHLE1BQU07QUFDTixvREFBb0QsS0FBSztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsT0FBTztBQUNwQztBQUNBO0FBQ0EsQ0FBQztBQUNELGdDQUFnQyxlQUFlO0FBQy9DO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsNEJBQTRCLHdCQUF3QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0Esd0JBQXdCLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLGFBQWE7QUFDbEY7QUFDQSxHQUFHO0FBQ0gsb0NBQW9DLFVBQVU7QUFDOUMsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyRkFBMkYsbUJBQW1CLEdBQUcsTUFBTSxVQUFVO0FBQ2pJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsZ0NBQWdDLGdDQUFnQyxhQUFhO0FBQzdFLENBQUM7QUFDRDtBQUNBO0FBQ0EsbUJBQW1CLGtCQUFrQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxtRkFBbUYsY0FBYztBQUNqRztBQUNBLEtBQUssR0FBRztBQUNSO0FBQ0E7QUFDQSxrSEFBa0gsZUFBZTtBQUNqSTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRFQUE0RSxlQUFlO0FBQzNGO0FBQ0E7QUFDQSxLQUFLLElBQUksZ0NBQWdDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1AsS0FBSyxJQUFJLHVHQUF1RztBQUNoSDtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLE9BQU87QUFDUDtBQUNBLFNBQVM7QUFDVCxLQUFLLElBQUksNENBQTRDO0FBQ3JEO0FBQ0E7QUFDQSxzQ0FBc0MsVUFBVTtBQUNoRDtBQUNBLDJCQUEyQixRQUFRO0FBQ25DO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixRQUFRO0FBQ25DO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSwyQkFBMkIsUUFBUTtBQUNuQztBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUssSUFBSSxlQUFlO0FBQ3hCO0FBQ0EsS0FBSyxJQUFJO0FBQ1Q7QUFDQSw0RUFBNEU7QUFDNUUsS0FBSyxJQUFJLFNBQVM7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQLCtDQUErQyxpREFBaUQ7QUFDaEc7QUFDQTtBQUNBLG9CQUFvQix5QkFBeUI7QUFDN0M7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1Asa0NBQWtDO0FBQ2xDO0FBQ0EsS0FBSyxJQUFJLHVEQUF1RDtBQUNoRTtBQUNBO0FBQ0EscUJBQXFCLFNBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0EsMFhBQTBYO0FBQzFYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0EsaU5BQWlOO0FBQ2pOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEhBQTRILHVCQUF1QixzRkFBc0Y7QUFDek8sT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDZCQUE2QixjQUFjO0FBQ2pFLFVBQVU7QUFDVixPQUFPO0FBQ1A7QUFDQTtBQUNBLGdFQUFnRTtBQUNoRTtBQUNBLFNBQVMsY0FBYyxnQkFBZ0I7QUFDdkMsOEJBQThCLDZCQUE2QixjQUFjLEdBQUcsMkJBQTJCO0FBQ3ZHO0FBQ0EsT0FBTztBQUNQLGlEQUFpRCw2QkFBNkIsa0JBQWtCLG1DQUFtQyxnQkFBZ0I7QUFDbko7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULG9CQUFvQixrQkFBa0IsZ0JBQWdCO0FBQ3RELE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLHlCQUF5QixnQkFBZ0I7QUFDekM7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLDZDQUE2QyxnQkFBZ0I7QUFDN0QsT0FBTztBQUNQLEtBQUssSUFBSSxpR0FBaUc7QUFDMUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHlHQUF5RztBQUN0SCxnRUFBZ0UsK0hBQStIO0FBQy9MLFdBQVc7QUFDWCxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLElBQUksNENBQTRDO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSyxJQUFJLGlGQUFpRjtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxJQUFJLG9IQUFvSDtBQUMzSjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsNkNBQTZDLGdCQUFnQjtBQUM3RDtBQUNBLFNBQVM7QUFDVCwyREFBMkQsZ0JBQWdCO0FBQzNFO0FBQ0EsMENBQTBDLDZPQUE2TztBQUN2UjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSyxJQUFJLGtIQUFrSDtBQUMzSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrQkFBa0IsY0FBYztBQUNwRCxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQLEtBQUssSUFBSSwrQ0FBK0M7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLLElBQUksdUNBQXVDO0FBQ2hELG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLLElBQUk7QUFDVDtBQUNBLDREQUE0RDtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1AsbUhBQW1ILDhCQUE4QjtBQUNqSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsV0FBVyxnQkFBZ0I7QUFDcEM7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLHFDQUFxQyxJQUFJLHlLQUF5SztBQUNsTjtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0EsS0FBSyxJQUFJLG9PQUFvTztBQUM3TztBQUNBLEtBQUssSUFBSSxnQkFBZ0I7QUFDekI7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHVCQUF1QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsbUlBQW1JLFNBQVM7QUFDNUk7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSyxJQUFJLG9DQUFvQztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUCxPQUFPO0FBQ1A7QUFDQSw2REFBNkQsa0JBQWtCO0FBQy9FO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQLE9BQU87QUFDUCxPQUFPO0FBQ1AsT0FBTztBQUNQO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSyxJQUFJLGdCQUFnQjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUssSUFBSSwwQ0FBMEM7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLLElBQUksb0NBQW9DO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSyxJQUFJLHFDQUFxQztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxJQUFJLGlJQUFpSTtBQUMxSTtBQUNBLEtBQUssSUFBSTtBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsNERBQTREO0FBQ2hGLE9BQU87QUFDUCxLQUFLLElBQUksdUNBQXVDO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLLElBQUksc0RBQXNEO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUssSUFBSSx1Q0FBdUM7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLGtCQUFrQix1REFBdUQ7QUFDckgsT0FBTztBQUNQLEtBQUssSUFBSSx1Q0FBdUM7QUFDaEQ7QUFDQSx5REFBeUQsdURBQXVELDRGQUE0Riw4QkFBOEI7QUFDMU87QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQLGtEQUFrRCxpQ0FBaUM7QUFDbkYsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUssSUFBSTtBQUNUO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQSw2QkFBNkIsZ0JBQWdCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRCxnQkFBZ0I7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQSw2QkFBNkIsK0NBQStDO0FBQzVFLFNBQVM7QUFDVCxLQUFLLElBQUksNkpBQTZKO0FBQ3RLO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHlCQUF5QjtBQUNuRSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSyxJQUFJLHVCQUF1QjtBQUNoQywwSUFBMEksU0FBUztBQUNuSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixTQUFTO0FBQ2hDLG9GQUFvRixTQUFTO0FBQzdGO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0EsNEJBQTRCLFNBQVM7QUFDckM7QUFDQTtBQUNBLDBEQUEwRCxtQkFBbUI7QUFDN0U7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0ZBQW9GLGtDQUFrQztBQUN0SDtBQUNBLFNBQVM7QUFDVCxrTUFBa00sd0NBQXdDO0FBQzFPLE9BQU87QUFDUCw4REFBOEQsOENBQThDO0FBQzVHLE9BQU87QUFDUCxvQkFBb0IsNkNBQTZDO0FBQ2pFLE9BQU87QUFDUCxLQUFLLElBQUksbUZBQW1GO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsZ0JBQWdCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsVUFBVTtBQUM1QyxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxlQUFlLFNBQVM7QUFDeEI7QUFDQSxPQUFPO0FBQ1Asa0NBQWtDLGdCQUFnQjtBQUNsRDtBQUNBLE9BQU8sb0JBQW9CO0FBQzNCO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLDJJQUEySSxRQUFRO0FBQ25KO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsZ0JBQWdCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0EsU0FBUyxjQUFjO0FBQ3ZCO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0EsU0FBUyxvQkFBb0I7QUFDN0I7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQSxTQUFTLG1CQUFtQjtBQUM1QjtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBLFNBQVMsbUJBQW1CO0FBQzVCO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTyxpQkFBaUI7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1Asc0RBQXNELGdCQUFnQjtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBLHFCQUFxQix3QkFBd0I7QUFDN0M7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EscUJBQXFCLHVCQUF1QjtBQUM1QztBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBLEtBQUssSUFBSSx3RkFBd0Y7QUFDakc7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxtRUFBbUUsUUFBUSw0SEFBNEg7QUFDdk0sT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0EscUJBQXFCLHdCQUF3QjtBQUM3QyxPQUFPO0FBQ1A7QUFDQSwwREFBMEQsMkRBQTJELGdCQUFnQixtQkFBbUI7QUFDeEo7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBLFNBQVM7QUFDVCxLQUFLLElBQUksK0ZBQStGO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsdURBQXVELEdBQUcsbUJBQW1CLHlGQUF5RjtBQUN0SztBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUssSUFBSSxvSUFBb0k7QUFDN0k7QUFDQSwrT0FBK087QUFDL087QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxVQUFVLGVBQWU7QUFDaEM7QUFDQSxLQUFLLElBQUksNkhBQTZIO0FBQ3RJO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHFCQUFxQjtBQUMvQztBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLElBQUk7QUFDdEMsMENBQTBDLFdBQVc7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLG1KQUFtSjtBQUMxSixLQUFLLElBQUk7QUFDVDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxXQUFXO0FBQzdEO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxnREFBZ0QsV0FBVztBQUMzRDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsV0FBVztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLFdBQVc7QUFDWDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxXQUFXO0FBQzFCO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLEtBQUssSUFBSSxlQUFlO0FBQ3hCO0FBQ0E7QUFDQSxLQUFLLElBQUksZ0dBQWdHO0FBQ3pHO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQywwRkFBMEYsVUFBVTtBQUN0STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUCw2QkFBNkI7QUFDN0IsT0FBTztBQUNQLDZCQUE2QjtBQUM3QjtBQUNBLEtBQUssSUFBSSxnSEFBZ0g7QUFDekg7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLHlDQUF5QyxVQUFVO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUCw2QkFBNkI7QUFDN0IsT0FBTztBQUNQLEtBQUssSUFBSSwrSkFBK0o7QUFDeEs7QUFDQTtBQUNBLGdFQUFnRSxXQUFXO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSw4QkFBOEIsU0FBUztBQUN2QyxPQUFPO0FBQ1A7QUFDQSwwQ0FBMEMsU0FBUztBQUNuRCxrRUFBa0UsU0FBUztBQUMzRTtBQUNBLFNBQVMsU0FBUztBQUNsQix5QkFBeUIsU0FBUztBQUNsQyxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSyxJQUFJO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSwyQ0FBMkMsU0FBUztBQUNwRDtBQUNBO0FBQ0Esa0NBQWtDLFNBQVM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsUUFBUTtBQUM3Qiw4Q0FBOEMsUUFBUTtBQUN0RDtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUCxxRUFBcUUsU0FBUztBQUM5RTtBQUNBLE9BQU87QUFDUDtBQUNBLDBCQUEwQixRQUFRO0FBQ2xDO0FBQ0E7QUFDQSx3REFBd0Qsa0JBQWtCO0FBQzFFO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLGtGQUFrRixrQ0FBa0M7QUFDcEg7QUFDQTtBQUNBLEtBQUssSUFBSSxnQkFBZ0I7QUFDekI7QUFDQSx3RUFBd0UsVUFBVTtBQUNsRiw4Q0FBOEMsMENBQTBDO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxJQUFJO0FBQ1Qsb0JBQW9CO0FBQ3BCLEtBQUssSUFBSTtBQUNUO0FBQ0Esc0NBQXNDLFVBQVU7QUFDaEQ7QUFDQSwwQkFBMEIsT0FBTztBQUNqQztBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQTtBQUNBLEtBQUssSUFBSTtBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsV0FBVztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxSkFBcUosZ0VBQWdFO0FBQ3JOLCtCQUErQixnRUFBZ0U7QUFDL0Y7QUFDQTtBQUNBO0FBQ0EsOGpCQUE4akIsdU5BQXVOO0FBQ3J4QixVQUFVO0FBQ1Y7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDJOQUEyTjtBQUMvUDtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBMQUEwTCxvT0FBb087QUFDOVo7QUFDQSxZQUFZO0FBQ1o7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQywyUEFBMlA7QUFDM1I7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsK1hBQStYLG1CQUFtQjtBQUNsWiw4REFBOEQsZ0tBQWdLO0FBQzlOO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLLElBQUksd0ZBQXdGO0FBQ2pHO0FBQ0E7QUFDQTtBQUNBLEtBQUssSUFBSTtBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLHVCQUF1QjtBQUMxRDtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0EsbUNBQW1DLHVCQUF1QjtBQUMxRDtBQUNBLDBDQUEwQyx1QkFBdUI7QUFDakU7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCLGlDQUFpQyx1QkFBdUI7QUFDeEQ7QUFDQTtBQUNBLHlCQUF5QixPQUFPO0FBQ2hDO0FBQ0Esa0JBQWtCO0FBQ2xCLG1DQUFtQyxvRUFBb0U7QUFDdkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLEtBQUssSUFBSTtBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRSxVQUFVO0FBQzdFLGlCQUFpQixVQUFVO0FBQzNCLGlCQUFpQixVQUFVO0FBQzNCLGlCQUFpQixVQUFVO0FBQzNCLHNEQUFzRCxTQUFTLFdBQVcsU0FBUztBQUNuRixpREFBaUQsU0FBUztBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsU0FBUztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFNBQVM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsU0FBUztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFNBQVM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLFNBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsOEdBQThHO0FBQ3hJO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGlIQUFpSDtBQUMzSTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsU0FBUztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsU0FBUztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFFBQVE7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxTQUFTO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFNBQVM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG9CQUFvQjtBQUN2QyxxQkFBcUIsUUFBUTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGNBQWM7QUFDakMsOERBQThELGtCQUFrQjtBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDhCQUE4QjtBQUNqRCxxQkFBcUIsdUdBQXVHO0FBQzVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxRQUFRO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIsa0NBQWtDLFFBQVE7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIsa0NBQWtDLFFBQVE7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLEtBQUs7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0Msa0JBQWtCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRSxtQkFBbUI7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qix1R0FBdUc7QUFDckk7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsbUhBQW1IO0FBQzNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsUUFBUTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQix5R0FBeUc7QUFDNUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0Msb0hBQW9IO0FBQzVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxRQUFRO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZCw4REFBOEQsd0JBQXdCO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsU0FBUztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsU0FBUztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSyxJQUFJLDBGQUEwRjtBQUNuRztBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QixvQkFBb0IsT0FBTztBQUMzQiw0QkFBNEIsc0JBQXNCO0FBQ2xEO0FBQ0Esb0JBQW9CLHFCQUFxQjtBQUN6QywwQ0FBMEMsU0FBUztBQUNuRDtBQUNBLDhCQUE4QixRQUFRO0FBQ3RDLG9CQUFvQixPQUFPO0FBQzNCO0FBQ0EsaUJBQWlCO0FBQ2pCLG1KQUFtSixpRUFBaUU7QUFDcE4sK0JBQStCLE9BQU87QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRSxzQ0FBc0M7QUFDekc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxJQUFJLHVCQUF1QjtBQUNoQyxvQkFBb0I7QUFDcEIsS0FBSyxJQUFJO0FBQ1Q7QUFDQTtBQUNBLGlDQUFpQyxXQUFXO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLDZDQUE2QztBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixTQUFTO0FBQzlCLHFCQUFxQixVQUFVO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixRQUFRO0FBQzdCLHFCQUFxQixTQUFTO0FBQzlCLHFCQUFxQixRQUFRO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELHFJQUFxSTtBQUN0TDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxvVUFBb1U7QUFDMVc7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsU0FBUztBQUNoRSxlQUFlLGlCQUFpQjtBQUNoQyxzREFBc0QsU0FBUztBQUMvRCxzQkFBc0IsK1ZBQStWO0FBQ3JYO0FBQ0E7QUFDQSx1QkFBdUIsU0FBUztBQUNoQywyRUFBMkUsUUFBUTtBQUNuRjtBQUNBO0FBQ0EsZ0NBQWdDLHVCQUF1QjtBQUN2RDtBQUNBLGNBQWM7QUFDZCwwQkFBMEIsVUFBVSxpQ0FBaUMsVUFBVTtBQUMvRTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxtRkFBbUYsVUFBVTtBQUM3RjtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsVUFBVTtBQUMvRCw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixZQUFZLCtCQUErQixpQkFBaUI7QUFDeEYsNENBQTRDLFNBQVMsK0JBQStCLGlCQUFpQjtBQUNyRyx5QkFBeUIsU0FBUyxvQ0FBb0MscUJBQXFCO0FBQzNGLHVCQUF1QixTQUFTO0FBQ2hDLHVCQUF1QixXQUFXO0FBQ2xDLGlCQUFpQixXQUFXO0FBQzVCLGlCQUFpQixXQUFXO0FBQzVCLGlCQUFpQixXQUFXO0FBQzVCLHdDQUF3QyxTQUFTO0FBQ2pEO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsVUFBVTtBQUNqQztBQUNBLHdCQUF3QixRQUFRO0FBQ2hDO0FBQ0EsU0FBUztBQUNUO0FBQ0EsZ0lBQWdJLDRDQUE0QztBQUM1SztBQUNBLFNBQVM7QUFDVDtBQUNBLCtFQUErRSxTQUFTO0FBQ3hGO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSyxJQUFJLHVCQUF1QjtBQUNoQztBQUNBO0FBQ0E7QUFDQSxLQUFLLElBQUk7QUFDVDtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0MsNkVBQTZFO0FBQzdFO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixhQUFhO0FBQ2I7QUFDQSxhQUFhO0FBQ2I7QUFDQSxxRUFBcUUsZ0JBQWdCO0FBQ3JGLHlCQUF5QjtBQUN6QjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU8sbUpBQW1KO0FBQzFKLEtBQUssSUFBSSxHQUFHLElBQUk7QUFDaEIsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsYUFBYTtBQUNiLGNBQWM7QUFDZCxjQUFjO0FBQ2QsWUFBWTtBQUNaLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsNkRBQTZEO0FBQzdEO0FBQ0E7QUFDQTtBQUNBLFVBQVUsVUFBVSxlQUFlO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRUFBc0UsUUFBUTtBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixXQUFXO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELEVBQUUsZ0JBQWdCO0FBQzdFLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSwwREFBMEQsRUFBRSxnQkFBZ0I7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsRUFBRSw0QkFBNEIsR0FBRyw0QkFBNEI7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsY0FBYztBQUM3QyxRQUFRO0FBQ1IsK0JBQStCLGNBQWM7QUFDN0MsK0JBQStCLHVCQUF1QjtBQUN0RDtBQUNBO0FBQ0EsaUJBQWlCLCtCQUErQjtBQUNoRDtBQUNBLDZCQUE2QixxQkFBcUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsbUJBQW1CO0FBQzFDO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsbUJBQW1CO0FBQ3hDO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxVQUFVO0FBQzlDO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsbUJBQW1CO0FBQ3hDO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxVQUFVO0FBQzlDO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsVUFBVTtBQUN4QztBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFVBQVU7QUFDeEM7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxvREFBb0Q7QUFDM0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsTUFBTTtBQUNwRTtBQUNBO0FBQ0EseUVBQXlFO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsR0FBRztBQUNuQjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpRUFBaUU7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZGQUE2RjtBQUM3RjtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsd0RBQXdEO0FBQ3hEO0FBQ0EsR0FBRztBQUNILHlEQUF5RDtBQUN6RDtBQUNBLEdBQUc7QUFDSCxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiwwQkFBMEI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxrQkFBa0I7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQsc0JBQXNCLGFBQWEsbUJBQW1CLHFDQUFxQyxzQkFBc0I7QUFDOUs7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGdCQUFnQixjQUFjO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhFQUE4RTtBQUM5RTtBQUNBLFdBQVc7QUFDWCwrREFBK0Q7QUFDL0Q7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixFQUFFLFdBQVc7QUFDMUM7QUFDQSxrQkFBa0Isb0JBQW9CO0FBQ3RDO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxrQkFBa0I7QUFDakMsMENBQTBDLHFCQUFxQjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHVCQUF1QjtBQUMzQyxjQUFjLFdBQVc7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlCQUFpQjtBQUNoQywwQ0FBMEMscUJBQXFCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUseUJBQXlCO0FBQ3hDLDJCQUEyQixTQUFTO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxpRUFBaUUsTUFBTTtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLHFDQUFxQyxHQUFHLFVBQVUsR0FBRztBQUNyRDtBQUNBO0FBOFJFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVvdGllbnQvLi9ub2RlX21vZHVsZXMvZG9jeC9idWlsZC9pbmRleC5tanM/ZDBkMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZGVmUHJvcHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydGllcztcbnZhciBfX2dldE93blByb3BEZXNjcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzO1xudmFyIF9fZ2V0T3duUHJvcFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19wcm9wSXNFbnVtID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3NwcmVhZFZhbHVlcyA9IChhLCBiKSA9PiB7XG4gIGZvciAodmFyIHByb3AgaW4gYiB8fCAoYiA9IHt9KSlcbiAgICBpZiAoX19oYXNPd25Qcm9wLmNhbGwoYiwgcHJvcCkpXG4gICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gIGlmIChfX2dldE93blByb3BTeW1ib2xzKVxuICAgIGZvciAodmFyIHByb3Agb2YgX19nZXRPd25Qcm9wU3ltYm9scyhiKSkge1xuICAgICAgaWYgKF9fcHJvcElzRW51bS5jYWxsKGIsIHByb3ApKVxuICAgICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gICAgfVxuICByZXR1cm4gYTtcbn07XG52YXIgX19zcHJlYWRQcm9wcyA9IChhLCBiKSA9PiBfX2RlZlByb3BzKGEsIF9fZ2V0T3duUHJvcERlc2NzKGIpKTtcbnZhciBfX29ialJlc3QgPSAoc291cmNlLCBleGNsdWRlKSA9PiB7XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgZm9yICh2YXIgcHJvcCBpbiBzb3VyY2UpXG4gICAgaWYgKF9faGFzT3duUHJvcC5jYWxsKHNvdXJjZSwgcHJvcCkgJiYgZXhjbHVkZS5pbmRleE9mKHByb3ApIDwgMClcbiAgICAgIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgaWYgKHNvdXJjZSAhPSBudWxsICYmIF9fZ2V0T3duUHJvcFN5bWJvbHMpXG4gICAgZm9yICh2YXIgcHJvcCBvZiBfX2dldE93blByb3BTeW1ib2xzKHNvdXJjZSkpIHtcbiAgICAgIGlmIChleGNsdWRlLmluZGV4T2YocHJvcCkgPCAwICYmIF9fcHJvcElzRW51bS5jYWxsKHNvdXJjZSwgcHJvcCkpXG4gICAgICAgIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICB9XG4gIHJldHVybiB0YXJnZXQ7XG59O1xudmFyIF9fcHVibGljRmllbGQgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBfX2RlZk5vcm1hbFByb3Aob2JqLCB0eXBlb2Yga2V5ICE9PSBcInN5bWJvbFwiID8ga2V5ICsgXCJcIiA6IGtleSwgdmFsdWUpO1xudmFyIF9fYXN5bmMgPSAoX190aGlzLCBfX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZTIsIHJlamVjdCkgPT4ge1xuICAgIHZhciBmdWxmaWxsZWQgPSAodmFsdWUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHJlamVjdGVkID0gKHZhbHVlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvci50aHJvdyh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgc3RlcCA9ICh4KSA9PiB4LmRvbmUgPyByZXNvbHZlMih4LnZhbHVlKSA6IFByb21pc2UucmVzb2x2ZSh4LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpO1xuICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseShfX3RoaXMsIF9fYXJndW1lbnRzKSkubmV4dCgpKTtcbiAgfSk7XG59O1xuY2xhc3MgQmFzZVhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHJvb3RLZXkpIHtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwicm9vdEtleVwiKTtcbiAgICB0aGlzLnJvb3RLZXkgPSByb290S2V5O1xuICB9XG59XG5jb25zdCBFTVBUWV9PQkpFQ1QgPSBPYmplY3Quc2VhbCh7fSk7XG5jbGFzcyBYbWxDb21wb25lbnQgZXh0ZW5kcyBCYXNlWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iocm9vdEtleSkge1xuICAgIHN1cGVyKHJvb3RLZXkpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jdGlvbmFsL3ByZWZlci1yZWFkb25seS10eXBlLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInJvb3RcIik7XG4gICAgdGhpcy5yb290ID0gbmV3IEFycmF5KCk7XG4gIH1cbiAgLy8gVGhpcyBtZXRob2QgaXMgY2FsbGVkIGJ5IHRoZSBmb3JtYXR0ZXIgdG8gZ2V0IHRoZSBYTUwgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBjb21wb25lbnQuXG4gIC8vIEl0IGlzIGNhbGxlZCByZWN1cnNpdmVseSBmb3IgYWxsIGNoaWxkIGNvbXBvbmVudHMuXG4gIC8vIEl0IGlzIGEgc2VyaWFsaXplciB0byBiZSB1c2VkIGluIHRoZSB4bWwgbGlicmFyeS5cbiAgLy8gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UveG1sXG4gIC8vIENoaWxkIGNvbXBvbmVudHMgY2FuIG92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGN1c3RvbWl6ZSB0aGUgWE1MIHJlcHJlc2VudGF0aW9uLCBvciBleGVjdXRlIHNpZGUgZWZmZWN0cy5cbiAgcHJlcEZvclhtbChjb250ZXh0KSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnRleHQuc3RhY2sucHVzaCh0aGlzKTtcbiAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMucm9vdC5tYXAoKGNvbXApID0+IHtcbiAgICAgIGlmIChjb21wIGluc3RhbmNlb2YgQmFzZVhtbENvbXBvbmVudCkge1xuICAgICAgICByZXR1cm4gY29tcC5wcmVwRm9yWG1sKGNvbnRleHQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbXA7XG4gICAgfSkuZmlsdGVyKChjb21wKSA9PiBjb21wICE9PSB2b2lkIDApO1xuICAgIGNvbnRleHQuc3RhY2sucG9wKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIFt0aGlzLnJvb3RLZXldOiBjaGlsZHJlbi5sZW5ndGggPyBjaGlsZHJlbi5sZW5ndGggPT09IDEgJiYgKChfYSA9IGNoaWxkcmVuWzBdKSA9PSBudWxsID8gdm9pZCAwIDogX2EuX2F0dHIpID8gY2hpbGRyZW5bMF0gOiBjaGlsZHJlbiA6IEVNUFRZX09CSkVDVFxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIERvIG5vdCB1c2UgdGhpcyBtZXRob2QuIEl0IGlzIG9ubHkgdXNlZCBpbnRlcm5hbGx5IGJ5IHRoZSBsaWJyYXJ5LiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbi5cbiAgICovXG4gIGFkZENoaWxkRWxlbWVudChjaGlsZCkge1xuICAgIHRoaXMucm9vdC5wdXNoKGNoaWxkKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuY2xhc3MgSWdub3JlSWZFbXB0eVhtbENvbXBvbmVudCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIHByZXBGb3JYbWwoY29udGV4dCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLnByZXBGb3JYbWwoY29udGV4dCk7XG4gICAgaWYgKHJlc3VsdCAmJiAodHlwZW9mIHJlc3VsdFt0aGlzLnJvb3RLZXldICE9PSBcIm9iamVjdFwiIHx8IE9iamVjdC5rZXlzKHJlc3VsdFt0aGlzLnJvb3RLZXldKS5sZW5ndGgpKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG59XG5jbGFzcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQgZXh0ZW5kcyBCYXNlWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iocm9vdCkge1xuICAgIHN1cGVyKFwiX2F0dHJcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIik7XG4gICAgdGhpcy5yb290ID0gcm9vdDtcbiAgfVxuICBwcmVwRm9yWG1sKF8pIHtcbiAgICBjb25zdCBhdHRycyA9IHt9O1xuICAgIE9iamVjdC5lbnRyaWVzKHRoaXMucm9vdCkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICBpZiAodmFsdWUgIT09IHZvaWQgMCkge1xuICAgICAgICBjb25zdCBuZXdLZXkgPSB0aGlzLnhtbEtleXMgJiYgdGhpcy54bWxLZXlzW2tleV0gfHwga2V5O1xuICAgICAgICBhdHRyc1tuZXdLZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHsgX2F0dHI6IGF0dHJzIH07XG4gIH1cbn1cbmNsYXNzIE5leHRBdHRyaWJ1dGVDb21wb25lbnQgZXh0ZW5kcyBCYXNlWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iocm9vdCkge1xuICAgIHN1cGVyKFwiX2F0dHJcIik7XG4gICAgdGhpcy5yb290ID0gcm9vdDtcbiAgfVxuICBwcmVwRm9yWG1sKF8pIHtcbiAgICBjb25zdCBhdHRycyA9IE9iamVjdC52YWx1ZXModGhpcy5yb290KS5maWx0ZXIoKHsgdmFsdWUgfSkgPT4gdmFsdWUgIT09IHZvaWQgMCkucmVkdWNlKChhY2MsIHsga2V5LCB2YWx1ZSB9KSA9PiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBhY2MpLCB7IFtrZXldOiB2YWx1ZSB9KSwge30pO1xuICAgIHJldHVybiB7IF9hdHRyOiBhdHRycyB9O1xuICB9XG59XG5jbGFzcyBBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICB2YWw6IFwidzp2YWxcIixcbiAgICAgIGNvbG9yOiBcInc6Y29sb3JcIixcbiAgICAgIGZpbGw6IFwidzpmaWxsXCIsXG4gICAgICBzcGFjZTogXCJ3OnNwYWNlXCIsXG4gICAgICBzejogXCJ3OnN6XCIsXG4gICAgICB0eXBlOiBcInc6dHlwZVwiLFxuICAgICAgcnNpZFI6IFwidzpyc2lkUlwiLFxuICAgICAgcnNpZFJQcjogXCJ3OnJzaWRSUHJcIixcbiAgICAgIHJzaWRTZWN0OiBcInc6cnNpZFNlY3RcIixcbiAgICAgIHc6IFwidzp3XCIsXG4gICAgICBoOiBcInc6aFwiLFxuICAgICAgdG9wOiBcInc6dG9wXCIsXG4gICAgICByaWdodDogXCJ3OnJpZ2h0XCIsXG4gICAgICBib3R0b206IFwidzpib3R0b21cIixcbiAgICAgIGxlZnQ6IFwidzpsZWZ0XCIsXG4gICAgICBoZWFkZXI6IFwidzpoZWFkZXJcIixcbiAgICAgIGZvb3RlcjogXCJ3OmZvb3RlclwiLFxuICAgICAgZ3V0dGVyOiBcInc6Z3V0dGVyXCIsXG4gICAgICBsaW5lUGl0Y2g6IFwidzpsaW5lUGl0Y2hcIixcbiAgICAgIHBvczogXCJ3OnBvc1wiXG4gICAgfSk7XG4gIH1cbn1cbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDoge307XG5mdW5jdGlvbiBnZXREZWZhdWx0RXhwb3J0RnJvbUNqcyQxKHgpIHtcbiAgcmV0dXJuIHggJiYgeC5fX2VzTW9kdWxlICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4LCBcImRlZmF1bHRcIikgPyB4W1wiZGVmYXVsdFwiXSA6IHg7XG59XG52YXIgc2F4JDEgPSB7fTtcbnZhciBldmVudHMgPSB7IGV4cG9ydHM6IHt9IH07XG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiID8gUmVmbGVjdCA6IG51bGw7XG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gXCJmdW5jdGlvblwiID8gUi5hcHBseSA6IGZ1bmN0aW9uIFJlZmxlY3RBcHBseTIodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwodGFyZ2V0LCByZWNlaXZlciwgYXJncyk7XG59O1xudmFyIFJlZmxlY3RPd25LZXlzO1xuaWYgKFIgJiYgdHlwZW9mIFIub3duS2V5cyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gUi5vd25LZXlzO1xufSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXMyKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpO1xuICB9O1xufSBlbHNlIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5czIodGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldCk7XG4gIH07XG59XG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cbnZhciBOdW1iZXJJc05hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBOdW1iZXJJc05hTjIodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn07XG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIEV2ZW50RW1pdHRlci5pbml0LmNhbGwodGhpcyk7XG59XG5ldmVudHMuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcbmV2ZW50cy5leHBvcnRzLm9uY2UgPSBvbmNlMjtcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB2b2lkIDA7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHNDb3VudCA9IDA7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB2b2lkIDA7XG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuZnVuY3Rpb24gY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcikge1xuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlciwgXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gXCJudW1iZXJcIiB8fCBhcmcgPCAwIHx8IE51bWJlcklzTmFOKGFyZykpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIGFyZyArIFwiLlwiKTtcbiAgICB9XG4gICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZztcbiAgfVxufSk7XG5FdmVudEVtaXR0ZXIuaW5pdCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5fZXZlbnRzID09PSB2b2lkIDAgfHwgdGhpcy5fZXZlbnRzID09PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuX2V2ZW50cykge1xuICAgIHRoaXMuX2V2ZW50cyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdm9pZCAwO1xufTtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSBcIm51bWJlclwiIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArIFwiLlwiKTtcbiAgfVxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5mdW5jdGlvbiBfZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdm9pZCAwKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gX2dldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KHR5cGUyKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSB0eXBlMiA9PT0gXCJlcnJvclwiO1xuICB2YXIgZXZlbnRzMiA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50czIgIT09IHZvaWQgMClcbiAgICBkb0Vycm9yID0gZG9FcnJvciAmJiBldmVudHMyLmVycm9yID09PSB2b2lkIDA7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKGRvRXJyb3IpIHtcbiAgICB2YXIgZXI7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID4gMClcbiAgICAgIGVyID0gYXJnc1swXTtcbiAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgdGhyb3cgZXI7XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXCJVbmhhbmRsZWQgZXJyb3IuXCIgKyAoZXIgPyBcIiAoXCIgKyBlci5tZXNzYWdlICsgXCIpXCIgOiBcIlwiKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7XG4gIH1cbiAgdmFyIGhhbmRsZXIgPSBldmVudHMyW3R5cGUyXTtcbiAgaWYgKGhhbmRsZXIgPT09IHZvaWQgMClcbiAgICByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgUmVmbGVjdEFwcGx5KGhhbmRsZXIsIHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzMiA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgUmVmbGVjdEFwcGx5KGxpc3RlbmVyczJbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcbmZ1bmN0aW9uIF9hZGRMaXN0ZW5lcih0YXJnZXQsIHR5cGUyLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50czI7XG4gIHZhciBleGlzdGluZztcbiAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIGV2ZW50czIgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKGV2ZW50czIgPT09IHZvaWQgMCkge1xuICAgIGV2ZW50czIgPSB0YXJnZXQuX2V2ZW50cyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIGlmIChldmVudHMyLm5ld0xpc3RlbmVyICE9PSB2b2lkIDApIHtcbiAgICAgIHRhcmdldC5lbWl0KFxuICAgICAgICBcIm5ld0xpc3RlbmVyXCIsXG4gICAgICAgIHR5cGUyLFxuICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA/IGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXJcbiAgICAgICk7XG4gICAgICBldmVudHMyID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzMlt0eXBlMl07XG4gIH1cbiAgaWYgKGV4aXN0aW5nID09PSB2b2lkIDApIHtcbiAgICBleGlzdGluZyA9IGV2ZW50czJbdHlwZTJdID0gbGlzdGVuZXI7XG4gICAgKyt0YXJnZXQuX2V2ZW50c0NvdW50O1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgZXhpc3RpbmcgPSBldmVudHMyW3R5cGUyXSA9IHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6IFtleGlzdGluZywgbGlzdGVuZXJdO1xuICAgIH0gZWxzZSBpZiAocHJlcGVuZCkge1xuICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cbiAgICBtID0gX2dldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcihcIlBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gXCIgKyBleGlzdGluZy5sZW5ndGggKyBcIiBcIiArIFN0cmluZyh0eXBlMikgKyBcIiBsaXN0ZW5lcnMgYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvIGluY3JlYXNlIGxpbWl0XCIpO1xuICAgICAgdy5uYW1lID0gXCJNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmdcIjtcbiAgICAgIHcuZW1pdHRlciA9IHRhcmdldDtcbiAgICAgIHcudHlwZSA9IHR5cGUyO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRMaXN0ZW5lcih0eXBlMiwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlMiwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID0gZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUyLCBsaXN0ZW5lcikge1xuICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUyLCBsaXN0ZW5lciwgdHJ1ZSk7XG59O1xuZnVuY3Rpb24gb25jZVdyYXBwZXIoKSB7XG4gIGlmICghdGhpcy5maXJlZCkge1xuICAgIHRoaXMudGFyZ2V0LnJlbW92ZUxpc3RlbmVyKHRoaXMudHlwZSwgdGhpcy53cmFwRm4pO1xuICAgIHRoaXMuZmlyZWQgPSB0cnVlO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxuICAgICAgcmV0dXJuIHRoaXMubGlzdGVuZXIuY2FsbCh0aGlzLnRhcmdldCk7XG4gICAgcmV0dXJuIHRoaXMubGlzdGVuZXIuYXBwbHkodGhpcy50YXJnZXQsIGFyZ3VtZW50cyk7XG4gIH1cbn1cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUyLCBsaXN0ZW5lcikge1xuICB2YXIgc3RhdGUyID0geyBmaXJlZDogZmFsc2UsIHdyYXBGbjogdm9pZCAwLCB0YXJnZXQsIHR5cGU6IHR5cGUyLCBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUyKTtcbiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICBzdGF0ZTIud3JhcEZuID0gd3JhcHBlZDtcbiAgcmV0dXJuIHdyYXBwZWQ7XG59XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUyLCBsaXN0ZW5lcikge1xuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcbiAgdGhpcy5vbih0eXBlMiwgX29uY2VXcmFwKHRoaXMsIHR5cGUyLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBmdW5jdGlvbiBwcmVwZW5kT25jZUxpc3RlbmVyKHR5cGUyLCBsaXN0ZW5lcikge1xuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcbiAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZTIsIF9vbmNlV3JhcCh0aGlzLCB0eXBlMiwgbGlzdGVuZXIpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKHR5cGUyLCBsaXN0ZW5lcikge1xuICB2YXIgbGlzdCwgZXZlbnRzMiwgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICBldmVudHMyID0gdGhpcy5fZXZlbnRzO1xuICBpZiAoZXZlbnRzMiA9PT0gdm9pZCAwKVxuICAgIHJldHVybiB0aGlzO1xuICBsaXN0ID0gZXZlbnRzMlt0eXBlMl07XG4gIGlmIChsaXN0ID09PSB2b2lkIDApXG4gICAgcmV0dXJuIHRoaXM7XG4gIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgdGhpcy5fZXZlbnRzID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgZWxzZSB7XG4gICAgICBkZWxldGUgZXZlbnRzMlt0eXBlMl07XG4gICAgICBpZiAoZXZlbnRzMi5yZW1vdmVMaXN0ZW5lcilcbiAgICAgICAgdGhpcy5lbWl0KFwicmVtb3ZlTGlzdGVuZXJcIiwgdHlwZTIsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgbGlzdCAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcG9zaXRpb24gPSAtMTtcbiAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHwgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICByZXR1cm4gdGhpcztcbiAgICBpZiAocG9zaXRpb24gPT09IDApXG4gICAgICBsaXN0LnNoaWZ0KCk7XG4gICAgZWxzZSB7XG4gICAgICBzcGxpY2VPbmUobGlzdCwgcG9zaXRpb24pO1xuICAgIH1cbiAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpXG4gICAgICBldmVudHMyW3R5cGUyXSA9IGxpc3RbMF07XG4gICAgaWYgKGV2ZW50czIucmVtb3ZlTGlzdGVuZXIgIT09IHZvaWQgMClcbiAgICAgIHRoaXMuZW1pdChcInJlbW92ZUxpc3RlbmVyXCIsIHR5cGUyLCBvcmlnaW5hbExpc3RlbmVyIHx8IGxpc3RlbmVyKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlMikge1xuICB2YXIgbGlzdGVuZXJzMiwgZXZlbnRzMiwgaTtcbiAgZXZlbnRzMiA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50czIgPT09IHZvaWQgMClcbiAgICByZXR1cm4gdGhpcztcbiAgaWYgKGV2ZW50czIucmVtb3ZlTGlzdGVuZXIgPT09IHZvaWQgMCkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLl9ldmVudHMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICB9IGVsc2UgaWYgKGV2ZW50czJbdHlwZTJdICE9PSB2b2lkIDApIHtcbiAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICB0aGlzLl9ldmVudHMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIGVsc2VcbiAgICAgICAgZGVsZXRlIGV2ZW50czJbdHlwZTJdO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzMik7XG4gICAgdmFyIGtleTtcbiAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmIChrZXkgPT09IFwicmVtb3ZlTGlzdGVuZXJcIikgY29udGludWU7XG4gICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgIH1cbiAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhcInJlbW92ZUxpc3RlbmVyXCIpO1xuICAgIHRoaXMuX2V2ZW50cyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBsaXN0ZW5lcnMyID0gZXZlbnRzMlt0eXBlMl07XG4gIGlmICh0eXBlb2YgbGlzdGVuZXJzMiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlMiwgbGlzdGVuZXJzMik7XG4gIH0gZWxzZSBpZiAobGlzdGVuZXJzMiAhPT0gdm9pZCAwKSB7XG4gICAgZm9yIChpID0gbGlzdGVuZXJzMi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlMiwgbGlzdGVuZXJzMltpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufTtcbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlMiwgdW53cmFwKSB7XG4gIHZhciBldmVudHMyID0gdGFyZ2V0Ll9ldmVudHM7XG4gIGlmIChldmVudHMyID09PSB2b2lkIDApXG4gICAgcmV0dXJuIFtdO1xuICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50czJbdHlwZTJdO1xuICBpZiAoZXZsaXN0ZW5lciA9PT0gdm9pZCAwKVxuICAgIHJldHVybiBbXTtcbiAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpXG4gICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdO1xuICByZXR1cm4gdW53cmFwID8gdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlMikge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlMiwgdHJ1ZSk7XG59O1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnMgPSBmdW5jdGlvbiByYXdMaXN0ZW5lcnModHlwZTIpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZTIsIGZhbHNlKTtcbn07XG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUyKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5saXN0ZW5lckNvdW50ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUyKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbGlzdGVuZXJDb3VudC5jYWxsKGVtaXR0ZXIsIHR5cGUyKTtcbiAgfVxufTtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUyKSB7XG4gIHZhciBldmVudHMyID0gdGhpcy5fZXZlbnRzO1xuICBpZiAoZXZlbnRzMiAhPT0gdm9pZCAwKSB7XG4gICAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHMyW3R5cGUyXTtcbiAgICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyICE9PSB2b2lkIDApIHtcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBuKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICBjb3B5W2ldID0gYXJyW2ldO1xuICByZXR1cm4gY29weTtcbn1cbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKDsgaW5kZXggKyAxIDwgbGlzdC5sZW5ndGg7IGluZGV4KyspXG4gICAgbGlzdFtpbmRleF0gPSBsaXN0W2luZGV4ICsgMV07XG4gIGxpc3QucG9wKCk7XG59XG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuZnVuY3Rpb24gb25jZTIoZW1pdHRlciwgbmFtZSkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZTIsIHJlamVjdCkge1xuICAgIGZ1bmN0aW9uIGVycm9yTGlzdGVuZXIoZXJyKSB7XG4gICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKG5hbWUsIHJlc29sdmVyKTtcbiAgICAgIHJlamVjdChlcnIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZXNvbHZlcigpIHtcbiAgICAgIGlmICh0eXBlb2YgZW1pdHRlci5yZW1vdmVMaXN0ZW5lciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLCBlcnJvckxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUyKFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgfVxuICAgIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCBuYW1lLCByZXNvbHZlciwgeyBvbmNlOiB0cnVlIH0pO1xuICAgIGlmIChuYW1lICE9PSBcImVycm9yXCIpIHtcbiAgICAgIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGVycm9yTGlzdGVuZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXIoZW1pdHRlciwgaGFuZGxlciwgZmxhZ3MpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLm9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgXCJlcnJvclwiLCBoYW5kbGVyLCBmbGFncyk7XG4gIH1cbn1cbmZ1bmN0aW9uIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCBuYW1lLCBsaXN0ZW5lciwgZmxhZ3MpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLm9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgZW1pdHRlci5vbmNlKG5hbWUsIGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW1pdHRlci5vbihuYW1lLCBsaXN0ZW5lcik7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBlbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBmdW5jdGlvbiB3cmFwTGlzdGVuZXIoYXJnKSB7XG4gICAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgd3JhcExpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIGxpc3RlbmVyKGFyZyk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwiZW1pdHRlclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBFdmVudEVtaXR0ZXIuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBlbWl0dGVyKTtcbiAgfVxufVxudmFyIGV2ZW50c0V4cG9ydHMgPSBldmVudHMuZXhwb3J0cztcbnZhciBpbmhlcml0c19icm93c2VyID0geyBleHBvcnRzOiB7fSB9O1xuaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgaW5oZXJpdHNfYnJvd3Nlci5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMyKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yO1xuICAgICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xufSBlbHNlIHtcbiAgaW5oZXJpdHNfYnJvd3Nlci5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMyKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yO1xuICAgICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24oKSB7XG4gICAgICB9O1xuICAgICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZTtcbiAgICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKCk7XG4gICAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3I7XG4gICAgfVxuICB9O1xufVxudmFyIGluaGVyaXRzX2Jyb3dzZXJFeHBvcnRzID0gaW5oZXJpdHNfYnJvd3Nlci5leHBvcnRzO1xuZnVuY3Rpb24gZ2V0RGVmYXVsdEV4cG9ydEZyb21DanMoeCkge1xuICByZXR1cm4geCAmJiB4Ll9fZXNNb2R1bGUgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsIFwiZGVmYXVsdFwiKSA/IHhbXCJkZWZhdWx0XCJdIDogeDtcbn1cbnZhciBicm93c2VyJDEgPSB7IGV4cG9ydHM6IHt9IH07XG52YXIgcHJvY2VzcyA9IGJyb3dzZXIkMS5leHBvcnRzID0ge307XG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFwiY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpO1xufVxuKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gIH1cbiAgdHJ5IHtcbiAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgfVxufSkoKTtcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgfVxuICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgfSBjYXRjaCAoZTIpIHtcbiAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICB9XG4gIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZTIpIHtcbiAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgIH1cbiAgfVxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICB9IGVsc2Uge1xuICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgfVxuICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgZHJhaW5RdWV1ZSgpO1xuICB9XG59XG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICBpZiAoZHJhaW5pbmcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gIGRyYWluaW5nID0gdHJ1ZTtcbiAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgd2hpbGUgKGxlbikge1xuICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgIHF1ZXVlID0gW107XG4gICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gIH1cbiAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uKGZ1bikge1xuICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gIH1cbiAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICB9XG59O1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gIHRoaXMuZnVuID0gZnVuO1xuICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9IFwiYnJvd3NlclwiO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9IFwiXCI7XG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5mdW5jdGlvbiBub29wKCkge1xufVxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiBbXTtcbn07XG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHRocm93IG5ldyBFcnJvcihcInByb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkXCIpO1xufTtcbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBcIi9cIjtcbn07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24oZGlyKSB7XG4gIHRocm93IG5ldyBFcnJvcihcInByb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZFwiKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAwO1xufTtcbnZhciBicm93c2VyRXhwb3J0cyA9IGJyb3dzZXIkMS5leHBvcnRzO1xuY29uc3QgcHJvY2VzcyQxID0gLyogQF9fUFVSRV9fICovIGdldERlZmF1bHRFeHBvcnRGcm9tQ2pzKGJyb3dzZXJFeHBvcnRzKTtcbnZhciBzdHJlYW1Ccm93c2VyO1xudmFyIGhhc1JlcXVpcmVkU3RyZWFtQnJvd3NlcjtcbmZ1bmN0aW9uIHJlcXVpcmVTdHJlYW1Ccm93c2VyKCkge1xuICBpZiAoaGFzUmVxdWlyZWRTdHJlYW1Ccm93c2VyKSByZXR1cm4gc3RyZWFtQnJvd3NlcjtcbiAgaGFzUmVxdWlyZWRTdHJlYW1Ccm93c2VyID0gMTtcbiAgc3RyZWFtQnJvd3NlciA9IGV2ZW50c0V4cG9ydHMuRXZlbnRFbWl0dGVyO1xuICByZXR1cm4gc3RyZWFtQnJvd3Nlcjtcbn1cbnZhciBidWZmZXIgPSB7fTtcbnZhciBiYXNlNjRKcyA9IHt9O1xudmFyIGhhc1JlcXVpcmVkQmFzZTY0SnM7XG5mdW5jdGlvbiByZXF1aXJlQmFzZTY0SnMoKSB7XG4gIGlmIChoYXNSZXF1aXJlZEJhc2U2NEpzKSByZXR1cm4gYmFzZTY0SnM7XG4gIGhhc1JlcXVpcmVkQmFzZTY0SnMgPSAxO1xuICBiYXNlNjRKcy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aDtcbiAgYmFzZTY0SnMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheTtcbiAgYmFzZTY0SnMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXk7XG4gIHZhciBsb29rdXAgPSBbXTtcbiAgdmFyIHJldkxvb2t1cCA9IFtdO1xuICB2YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09IFwidW5kZWZpbmVkXCIgPyBVaW50OEFycmF5IDogQXJyYXk7XG4gIHZhciBjb2RlID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgbG9va3VwW2ldID0gY29kZVtpXTtcbiAgICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGk7XG4gIH1cbiAgcmV2TG9va3VwW1wiLVwiLmNoYXJDb2RlQXQoMCldID0gNjI7XG4gIHJldkxvb2t1cFtcIl9cIi5jaGFyQ29kZUF0KDApXSA9IDYzO1xuICBmdW5jdGlvbiBnZXRMZW5zKGI2NCkge1xuICAgIHZhciBsZW4yID0gYjY0Lmxlbmd0aDtcbiAgICBpZiAobGVuMiAlIDQgPiAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0XCIpO1xuICAgIH1cbiAgICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZihcIj1cIik7XG4gICAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW4yO1xuICAgIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuMiA/IDAgOiA0IC0gdmFsaWRMZW4gJSA0O1xuICAgIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl07XG4gIH1cbiAgZnVuY3Rpb24gYnl0ZUxlbmd0aChiNjQpIHtcbiAgICB2YXIgbGVucyA9IGdldExlbnMoYjY0KTtcbiAgICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdO1xuICAgIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdO1xuICAgIHJldHVybiAodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQgLSBwbGFjZUhvbGRlcnNMZW47XG4gIH1cbiAgZnVuY3Rpb24gX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gICAgcmV0dXJuICh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCAtIHBsYWNlSG9sZGVyc0xlbjtcbiAgfVxuICBmdW5jdGlvbiB0b0J5dGVBcnJheShiNjQpIHtcbiAgICB2YXIgdG1wO1xuICAgIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpO1xuICAgIHZhciB2YWxpZExlbiA9IGxlbnNbMF07XG4gICAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV07XG4gICAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSk7XG4gICAgdmFyIGN1ckJ5dGUgPSAwO1xuICAgIHZhciBsZW4yID0gcGxhY2VIb2xkZXJzTGVuID4gMCA/IHZhbGlkTGVuIC0gNCA6IHZhbGlkTGVuO1xuICAgIHZhciBpMjtcbiAgICBmb3IgKGkyID0gMDsgaTIgPCBsZW4yOyBpMiArPSA0KSB7XG4gICAgICB0bXAgPSByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaTIpXSA8PCAxOCB8IHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpMiArIDEpXSA8PCAxMiB8IHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpMiArIDIpXSA8PCA2IHwgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkyICsgMyldO1xuICAgICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgPj4gMTYgJiAyNTU7XG4gICAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCA+PiA4ICYgMjU1O1xuICAgICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAyNTU7XG4gICAgfVxuICAgIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICAgIHRtcCA9IHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpMildIDw8IDIgfCByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaTIgKyAxKV0gPj4gNDtcbiAgICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMjU1O1xuICAgIH1cbiAgICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgICB0bXAgPSByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaTIpXSA8PCAxMCB8IHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpMiArIDEpXSA8PCA0IHwgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkyICsgMildID4+IDI7XG4gICAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCA+PiA4ICYgMjU1O1xuICAgICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAyNTU7XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG4gIH1cbiAgZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0KG51bSkge1xuICAgIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgNjNdICsgbG9va3VwW251bSA+PiAxMiAmIDYzXSArIGxvb2t1cFtudW0gPj4gNiAmIDYzXSArIGxvb2t1cFtudW0gJiA2M107XG4gIH1cbiAgZnVuY3Rpb24gZW5jb2RlQ2h1bmsodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgdG1wO1xuICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICBmb3IgKHZhciBpMiA9IHN0YXJ0OyBpMiA8IGVuZDsgaTIgKz0gMykge1xuICAgICAgdG1wID0gKHVpbnQ4W2kyXSA8PCAxNiAmIDE2NzExNjgwKSArICh1aW50OFtpMiArIDFdIDw8IDggJiA2NTI4MCkgKyAodWludDhbaTIgKyAyXSAmIDI1NSk7XG4gICAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSk7XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQuam9pbihcIlwiKTtcbiAgfVxuICBmdW5jdGlvbiBmcm9tQnl0ZUFycmF5KHVpbnQ4KSB7XG4gICAgdmFyIHRtcDtcbiAgICB2YXIgbGVuMiA9IHVpbnQ4Lmxlbmd0aDtcbiAgICB2YXIgZXh0cmFCeXRlcyA9IGxlbjIgJSAzO1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuICAgIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzO1xuICAgIGZvciAodmFyIGkyID0gMCwgbGVuMjIgPSBsZW4yIC0gZXh0cmFCeXRlczsgaTIgPCBsZW4yMjsgaTIgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsodWludDgsIGkyLCBpMiArIG1heENodW5rTGVuZ3RoID4gbGVuMjIgPyBsZW4yMiA6IGkyICsgbWF4Q2h1bmtMZW5ndGgpKTtcbiAgICB9XG4gICAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICAgIHRtcCA9IHVpbnQ4W2xlbjIgLSAxXTtcbiAgICAgIHBhcnRzLnB1c2goXG4gICAgICAgIGxvb2t1cFt0bXAgPj4gMl0gKyBsb29rdXBbdG1wIDw8IDQgJiA2M10gKyBcIj09XCJcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgICB0bXAgPSAodWludDhbbGVuMiAtIDJdIDw8IDgpICsgdWludDhbbGVuMiAtIDFdO1xuICAgICAgcGFydHMucHVzaChcbiAgICAgICAgbG9va3VwW3RtcCA+PiAxMF0gKyBsb29rdXBbdG1wID4+IDQgJiA2M10gKyBsb29rdXBbdG1wIDw8IDIgJiA2M10gKyBcIj1cIlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnRzLmpvaW4oXCJcIik7XG4gIH1cbiAgcmV0dXJuIGJhc2U2NEpzO1xufVxudmFyIGllZWU3NTQgPSB7fTtcbi8qISBpZWVlNzU0LiBCU0QtMy1DbGF1c2UgTGljZW5zZS4gRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnL29wZW5zb3VyY2U+ICovXG52YXIgaGFzUmVxdWlyZWRJZWVlNzU0O1xuZnVuY3Rpb24gcmVxdWlyZUllZWU3NTQoKSB7XG4gIGlmIChoYXNSZXF1aXJlZEllZWU3NTQpIHJldHVybiBpZWVlNzU0O1xuICBoYXNSZXF1aXJlZEllZWU3NTQgPSAxO1xuICBpZWVlNzU0LnJlYWQgPSBmdW5jdGlvbihidWZmZXIyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICAgIHZhciBlLCBtO1xuICAgIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICAgIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICAgIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgICB2YXIgbkJpdHMgPSAtNztcbiAgICB2YXIgaSA9IGlzTEUgPyBuQnl0ZXMgLSAxIDogMDtcbiAgICB2YXIgZCA9IGlzTEUgPyAtMSA6IDE7XG4gICAgdmFyIHMyID0gYnVmZmVyMltvZmZzZXQgKyBpXTtcbiAgICBpICs9IGQ7XG4gICAgZSA9IHMyICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gICAgczIgPj49IC1uQml0cztcbiAgICBuQml0cyArPSBlTGVuO1xuICAgIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyMltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7XG4gICAgfVxuICAgIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gICAgZSA+Pj0gLW5CaXRzO1xuICAgIG5CaXRzICs9IG1MZW47XG4gICAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXIyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHtcbiAgICB9XG4gICAgaWYgKGUgPT09IDApIHtcbiAgICAgIGUgPSAxIC0gZUJpYXM7XG4gICAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgICByZXR1cm4gbSA/IE5hTiA6IChzMiA/IC0xIDogMSkgKiBJbmZpbml0eTtcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSBlIC0gZUJpYXM7XG4gICAgfVxuICAgIHJldHVybiAoczIgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKTtcbiAgfTtcbiAgaWVlZTc1NC53cml0ZSA9IGZ1bmN0aW9uKGJ1ZmZlcjIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICAgIHZhciBlLCBtLCBjO1xuICAgIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICAgIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICAgIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgICB2YXIgcnQgPSBtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMDtcbiAgICB2YXIgaSA9IGlzTEUgPyAwIDogbkJ5dGVzIC0gMTtcbiAgICB2YXIgZCA9IGlzTEUgPyAxIDogLTE7XG4gICAgdmFyIHMyID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMDtcbiAgICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKTtcbiAgICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwO1xuICAgICAgZSA9IGVNYXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKTtcbiAgICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgICAgZS0tO1xuICAgICAgICBjICo9IDI7XG4gICAgICB9XG4gICAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgICAgdmFsdWUgKz0gcnQgLyBjO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICAgIGUrKztcbiAgICAgICAgYyAvPSAyO1xuICAgICAgfVxuICAgICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICAgIG0gPSAwO1xuICAgICAgICBlID0gZU1heDtcbiAgICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pO1xuICAgICAgICBlID0gZSArIGVCaWFzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pO1xuICAgICAgICBlID0gMDtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyMltvZmZzZXQgKyBpXSA9IG0gJiAyNTUsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge1xuICAgIH1cbiAgICBlID0gZSA8PCBtTGVuIHwgbTtcbiAgICBlTGVuICs9IG1MZW47XG4gICAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXIyW29mZnNldCArIGldID0gZSAmIDI1NSwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7XG4gICAgfVxuICAgIGJ1ZmZlcjJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMyICogMTI4O1xuICB9O1xuICByZXR1cm4gaWVlZTc1NDtcbn1cbi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xudmFyIGhhc1JlcXVpcmVkQnVmZmVyO1xuZnVuY3Rpb24gcmVxdWlyZUJ1ZmZlcigpIHtcbiAgaWYgKGhhc1JlcXVpcmVkQnVmZmVyKSByZXR1cm4gYnVmZmVyO1xuICBoYXNSZXF1aXJlZEJ1ZmZlciA9IDE7XG4gIChmdW5jdGlvbihleHBvcnRzKSB7XG4gICAgdmFyIGJhc2U2NCA9IHJlcXVpcmVCYXNlNjRKcygpO1xuICAgIHZhciBpZWVlNzU0MiA9IHJlcXVpcmVJZWVlNzU0KCk7XG4gICAgdmFyIGN1c3RvbUluc3BlY3RTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbFtcImZvclwiXSA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sW1wiZm9yXCJdKFwibm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b21cIikgOiBudWxsO1xuICAgIGV4cG9ydHMuQnVmZmVyID0gQnVmZmVyMjtcbiAgICBleHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyO1xuICAgIGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MDtcbiAgICB2YXIgS19NQVhfTEVOR1RIID0gMjE0NzQ4MzY0NztcbiAgICBleHBvcnRzLmtNYXhMZW5ndGggPSBLX01BWF9MRU5HVEg7XG4gICAgQnVmZmVyMi5UWVBFRF9BUlJBWV9TVVBQT1JUID0gdHlwZWRBcnJheVN1cHBvcnQoKTtcbiAgICBpZiAoIUJ1ZmZlcjIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICBcIlRoaXMgYnJvd3NlciBsYWNrcyB0eXBlZCBhcnJheSAoVWludDhBcnJheSkgc3VwcG9ydCB3aGljaCBpcyByZXF1aXJlZCBieSBgYnVmZmVyYCB2NS54LiBVc2UgYGJ1ZmZlcmAgdjQueCBpZiB5b3UgcmVxdWlyZSBvbGQgYnJvd3NlciBzdXBwb3J0LlwiXG4gICAgICApO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKTtcbiAgICAgICAgdmFyIHByb3RvID0geyBmb286IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiA0MjtcbiAgICAgICAgfSB9O1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YocHJvdG8sIFVpbnQ4QXJyYXkucHJvdG90eXBlKTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGFyciwgcHJvdG8pO1xuICAgICAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MjtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyMi5wcm90b3R5cGUsIFwicGFyZW50XCIsIHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIUJ1ZmZlcjIuaXNCdWZmZXIodGhpcykpIHJldHVybiB2b2lkIDA7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlcjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyMi5wcm90b3R5cGUsIFwib2Zmc2V0XCIsIHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIUJ1ZmZlcjIuaXNCdWZmZXIodGhpcykpIHJldHVybiB2b2lkIDA7XG4gICAgICAgIHJldHVybiB0aGlzLmJ5dGVPZmZzZXQ7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gY3JlYXRlQnVmZmVyKGxlbmd0aCkge1xuICAgICAgaWYgKGxlbmd0aCA+IEtfTUFYX0xFTkdUSCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJyArIGxlbmd0aCArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKTtcbiAgICAgIH1cbiAgICAgIHZhciBidWYgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGJ1ZiwgQnVmZmVyMi5wcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG4gICAgZnVuY3Rpb24gQnVmZmVyMihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICAgICAgaWYgKHR5cGVvZiBhcmcgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nLiBSZWNlaXZlZCB0eXBlIG51bWJlcidcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbGxvY1Vuc2FmZShhcmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb20oYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpO1xuICAgIH1cbiAgICBCdWZmZXIyLnBvb2xTaXplID0gODE5MjtcbiAgICBmdW5jdGlvbiBmcm9tKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGZyb21TdHJpbmcodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpO1xuICAgICAgfVxuICAgICAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZyb21BcnJheVZpZXcodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIEFycmF5LWxpa2UgT2JqZWN0LiBSZWNlaXZlZCB0eXBlIFwiICsgdHlwZW9mIHZhbHVlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoaXNJbnN0YW5jZSh2YWx1ZSwgQXJyYXlCdWZmZXIpIHx8IHZhbHVlICYmIGlzSW5zdGFuY2UodmFsdWUuYnVmZmVyLCBBcnJheUJ1ZmZlcikpIHtcbiAgICAgICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgIT09IFwidW5kZWZpbmVkXCIgJiYgKGlzSW5zdGFuY2UodmFsdWUsIFNoYXJlZEFycmF5QnVmZmVyKSB8fCB2YWx1ZSAmJiBpc0luc3RhbmNlKHZhbHVlLmJ1ZmZlciwgU2hhcmVkQXJyYXlCdWZmZXIpKSkge1xuICAgICAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICdUaGUgXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG9mIHR5cGUgbnVtYmVyLiBSZWNlaXZlZCB0eXBlIG51bWJlcidcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZU9mID0gdmFsdWUudmFsdWVPZiAmJiB2YWx1ZS52YWx1ZU9mKCk7XG4gICAgICBpZiAodmFsdWVPZiAhPSBudWxsICYmIHZhbHVlT2YgIT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIyLmZyb20odmFsdWVPZiwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIHZhciBiID0gZnJvbU9iamVjdCh2YWx1ZSk7XG4gICAgICBpZiAoYikgcmV0dXJuIGI7XG4gICAgICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTeW1ib2wudG9QcmltaXRpdmUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWVbU3ltYm9sLnRvUHJpbWl0aXZlXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIyLmZyb20oXG4gICAgICAgICAgdmFsdWVbU3ltYm9sLnRvUHJpbWl0aXZlXShcInN0cmluZ1wiKSxcbiAgICAgICAgICBlbmNvZGluZ09yT2Zmc2V0LFxuICAgICAgICAgIGxlbmd0aFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgXCJUaGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSBcIiArIHR5cGVvZiB2YWx1ZVxuICAgICAgKTtcbiAgICB9XG4gICAgQnVmZmVyMi5mcm9tID0gZnVuY3Rpb24odmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZyb20odmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCk7XG4gICAgfTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoQnVmZmVyMi5wcm90b3R5cGUsIFVpbnQ4QXJyYXkucHJvdG90eXBlKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoQnVmZmVyMiwgVWludDhBcnJheSk7XG4gICAgZnVuY3Rpb24gYXNzZXJ0U2l6ZShzaXplKSB7XG4gICAgICBpZiAodHlwZW9mIHNpemUgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIG51bWJlcicpO1xuICAgICAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJyArIHNpemUgKyAnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwic2l6ZVwiJyk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFsbG9jKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gICAgICBhc3NlcnRTaXplKHNpemUpO1xuICAgICAgaWYgKHNpemUgPD0gMCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpO1xuICAgICAgfVxuICAgICAgaWYgKGZpbGwgIT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSBcInN0cmluZ1wiID8gY3JlYXRlQnVmZmVyKHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpIDogY3JlYXRlQnVmZmVyKHNpemUpLmZpbGwoZmlsbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpO1xuICAgIH1cbiAgICBCdWZmZXIyLmFsbG9jID0gZnVuY3Rpb24oc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgICAgIHJldHVybiBhbGxvYyhzaXplLCBmaWxsLCBlbmNvZGluZyk7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBhbGxvY1Vuc2FmZShzaXplKSB7XG4gICAgICBhc3NlcnRTaXplKHNpemUpO1xuICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMCk7XG4gICAgfVxuICAgIEJ1ZmZlcjIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbihzaXplKSB7XG4gICAgICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSk7XG4gICAgfTtcbiAgICBCdWZmZXIyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgICAgIHJldHVybiBhbGxvY1Vuc2FmZShzaXplKTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGZyb21TdHJpbmcoc3RyaW5nLCBlbmNvZGluZykge1xuICAgICAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gXCJzdHJpbmdcIiB8fCBlbmNvZGluZyA9PT0gXCJcIikge1xuICAgICAgICBlbmNvZGluZyA9IFwidXRmOFwiO1xuICAgICAgfVxuICAgICAgaWYgKCFCdWZmZXIyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIiArIGVuY29kaW5nKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMDtcbiAgICAgIHZhciBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKTtcbiAgICAgIHZhciBhY3R1YWwgPSBidWYud3JpdGUoc3RyaW5nLCBlbmNvZGluZyk7XG4gICAgICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAgICAgYnVmID0gYnVmLnNsaWNlKDAsIGFjdHVhbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYnVmO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmcm9tQXJyYXlMaWtlKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwO1xuICAgICAgdmFyIGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW5ndGgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBidWZbaV0gPSBhcnJheVtpXSAmIDI1NTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBidWY7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZyb21BcnJheVZpZXcoYXJyYXlWaWV3KSB7XG4gICAgICBpZiAoaXNJbnN0YW5jZShhcnJheVZpZXcsIFVpbnQ4QXJyYXkpKSB7XG4gICAgICAgIHZhciBjb3B5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlWaWV3KTtcbiAgICAgICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcihjb3B5LmJ1ZmZlciwgY29weS5ieXRlT2Zmc2V0LCBjb3B5LmJ5dGVMZW5ndGgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UoYXJyYXlWaWV3KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyKGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICAgIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJvZmZzZXRcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKTtcbiAgICAgIH1cbiAgICAgIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wibGVuZ3RoXCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJyk7XG4gICAgICB9XG4gICAgICB2YXIgYnVmO1xuICAgICAgaWYgKGJ5dGVPZmZzZXQgPT09IHZvaWQgMCAmJiBsZW5ndGggPT09IHZvaWQgMCkge1xuICAgICAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSk7XG4gICAgICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICAgICAgfVxuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGJ1ZiwgQnVmZmVyMi5wcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG4gICAgZnVuY3Rpb24gZnJvbU9iamVjdChvYmopIHtcbiAgICAgIGlmIChCdWZmZXIyLmlzQnVmZmVyKG9iaikpIHtcbiAgICAgICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwO1xuICAgICAgICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKGxlbik7XG4gICAgICAgIGlmIChidWYubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGJ1ZjtcbiAgICAgICAgfVxuICAgICAgICBvYmouY29weShidWYsIDAsIDAsIGxlbik7XG4gICAgICAgIHJldHVybiBidWY7XG4gICAgICB9XG4gICAgICBpZiAob2JqLmxlbmd0aCAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gXCJudW1iZXJcIiB8fCBudW1iZXJJc05hTihvYmoubGVuZ3RoKSkge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIoMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2Uob2JqKTtcbiAgICAgIH1cbiAgICAgIGlmIChvYmoudHlwZSA9PT0gXCJCdWZmZXJcIiAmJiBBcnJheS5pc0FycmF5KG9iai5kYXRhKSkge1xuICAgICAgICByZXR1cm4gZnJvbUFycmF5TGlrZShvYmouZGF0YSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNoZWNrZWQobGVuZ3RoKSB7XG4gICAgICBpZiAobGVuZ3RoID49IEtfTUFYX0xFTkdUSCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkF0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gc2l6ZTogMHhcIiArIEtfTUFYX0xFTkdUSC50b1N0cmluZygxNikgKyBcIiBieXRlc1wiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsZW5ndGggfCAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBTbG93QnVmZmVyKGxlbmd0aCkge1xuICAgICAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7XG4gICAgICAgIGxlbmd0aCA9IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gQnVmZmVyMi5hbGxvYygrbGVuZ3RoKTtcbiAgICB9XG4gICAgQnVmZmVyMi5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyKGIpIHtcbiAgICAgIHJldHVybiBiICE9IG51bGwgJiYgYi5faXNCdWZmZXIgPT09IHRydWUgJiYgYiAhPT0gQnVmZmVyMi5wcm90b3R5cGU7XG4gICAgfTtcbiAgICBCdWZmZXIyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgICAgIGlmIChpc0luc3RhbmNlKGEsIFVpbnQ4QXJyYXkpKSBhID0gQnVmZmVyMi5mcm9tKGEsIGEub2Zmc2V0LCBhLmJ5dGVMZW5ndGgpO1xuICAgICAgaWYgKGlzSW5zdGFuY2UoYiwgVWludDhBcnJheSkpIGIgPSBCdWZmZXIyLmZyb20oYiwgYi5vZmZzZXQsIGIuYnl0ZUxlbmd0aCk7XG4gICAgICBpZiAoIUJ1ZmZlcjIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlcjIuaXNCdWZmZXIoYikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAnVGhlIFwiYnVmMVwiLCBcImJ1ZjJcIiBhcmd1bWVudHMgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZXIgb3IgVWludDhBcnJheSdcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChhID09PSBiKSByZXR1cm4gMDtcbiAgICAgIHZhciB4ID0gYS5sZW5ndGg7XG4gICAgICB2YXIgeSA9IGIubGVuZ3RoO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgICAgICB4ID0gYVtpXTtcbiAgICAgICAgICB5ID0gYltpXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHggPCB5KSByZXR1cm4gLTE7XG4gICAgICBpZiAoeSA8IHgpIHJldHVybiAxO1xuICAgICAgcmV0dXJuIDA7XG4gICAgfTtcbiAgICBCdWZmZXIyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nKGVuY29kaW5nKSB7XG4gICAgICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICBjYXNlIFwiaGV4XCI6XG4gICAgICAgIGNhc2UgXCJ1dGY4XCI6XG4gICAgICAgIGNhc2UgXCJ1dGYtOFwiOlxuICAgICAgICBjYXNlIFwiYXNjaWlcIjpcbiAgICAgICAgY2FzZSBcImxhdGluMVwiOlxuICAgICAgICBjYXNlIFwiYmluYXJ5XCI6XG4gICAgICAgIGNhc2UgXCJiYXNlNjRcIjpcbiAgICAgICAgY2FzZSBcInVjczJcIjpcbiAgICAgICAgY2FzZSBcInVjcy0yXCI6XG4gICAgICAgIGNhc2UgXCJ1dGYxNmxlXCI6XG4gICAgICAgIGNhc2UgXCJ1dGYtMTZsZVwiOlxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlcjIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0KGxpc3QsIGxlbmd0aCkge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGxpc3QpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpO1xuICAgICAgfVxuICAgICAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIyLmFsbG9jKDApO1xuICAgICAgfVxuICAgICAgdmFyIGk7XG4gICAgICBpZiAobGVuZ3RoID09PSB2b2lkIDApIHtcbiAgICAgICAgbGVuZ3RoID0gMDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBidWZmZXIyID0gQnVmZmVyMi5hbGxvY1Vuc2FmZShsZW5ndGgpO1xuICAgICAgdmFyIHBvcyA9IDA7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgYnVmID0gbGlzdFtpXTtcbiAgICAgICAgaWYgKGlzSW5zdGFuY2UoYnVmLCBVaW50OEFycmF5KSkge1xuICAgICAgICAgIGlmIChwb3MgKyBidWYubGVuZ3RoID4gYnVmZmVyMi5sZW5ndGgpIHtcbiAgICAgICAgICAgIEJ1ZmZlcjIuZnJvbShidWYpLmNvcHkoYnVmZmVyMiwgcG9zKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICAgICAgICAgIGJ1ZmZlcjIsXG4gICAgICAgICAgICAgIGJ1ZixcbiAgICAgICAgICAgICAgcG9zXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghQnVmZmVyMi5pc0J1ZmZlcihidWYpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnVmLmNvcHkoYnVmZmVyMiwgcG9zKTtcbiAgICAgICAgfVxuICAgICAgICBwb3MgKz0gYnVmLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBidWZmZXIyO1xuICAgIH07XG4gICAgZnVuY3Rpb24gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB7XG4gICAgICBpZiAoQnVmZmVyMi5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcubGVuZ3RoO1xuICAgICAgfVxuICAgICAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IGlzSW5zdGFuY2Uoc3RyaW5nLCBBcnJheUJ1ZmZlcikpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBzdHJpbmcgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAnVGhlIFwic3RyaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgb3IgQXJyYXlCdWZmZXIuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBzdHJpbmdcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgdmFyIG11c3RNYXRjaCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSA9PT0gdHJ1ZTtcbiAgICAgIGlmICghbXVzdE1hdGNoICYmIGxlbiA9PT0gMCkgcmV0dXJuIDA7XG4gICAgICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZTtcbiAgICAgIGZvciAoOyA7ICkge1xuICAgICAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICAgICAgY2FzZSBcImFzY2lpXCI6XG4gICAgICAgICAgY2FzZSBcImxhdGluMVwiOlxuICAgICAgICAgIGNhc2UgXCJiaW5hcnlcIjpcbiAgICAgICAgICAgIHJldHVybiBsZW47XG4gICAgICAgICAgY2FzZSBcInV0ZjhcIjpcbiAgICAgICAgICBjYXNlIFwidXRmLThcIjpcbiAgICAgICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aDtcbiAgICAgICAgICBjYXNlIFwidWNzMlwiOlxuICAgICAgICAgIGNhc2UgXCJ1Y3MtMlwiOlxuICAgICAgICAgIGNhc2UgXCJ1dGYxNmxlXCI6XG4gICAgICAgICAgY2FzZSBcInV0Zi0xNmxlXCI6XG4gICAgICAgICAgICByZXR1cm4gbGVuICogMjtcbiAgICAgICAgICBjYXNlIFwiaGV4XCI6XG4gICAgICAgICAgICByZXR1cm4gbGVuID4+PiAxO1xuICAgICAgICAgIGNhc2UgXCJiYXNlNjRcIjpcbiAgICAgICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBpZiAobG93ZXJlZENhc2UpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG11c3RNYXRjaCA/IC0xIDogdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbmNvZGluZyA9IChcIlwiICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgQnVmZmVyMi5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aDtcbiAgICBmdW5jdGlvbiBzbG93VG9TdHJpbmcoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlO1xuICAgICAgaWYgKHN0YXJ0ID09PSB2b2lkIDAgfHwgc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCA9PT0gdm9pZCAwIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgICAgIGVuZCA9IHRoaXMubGVuZ3RoO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCA8PSAwKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgfVxuICAgICAgZW5kID4+Pj0gMDtcbiAgICAgIHN0YXJ0ID4+Pj0gMDtcbiAgICAgIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICB9XG4gICAgICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9IFwidXRmOFwiO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgICAgIGNhc2UgXCJoZXhcIjpcbiAgICAgICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKTtcbiAgICAgICAgICBjYXNlIFwidXRmOFwiOlxuICAgICAgICAgIGNhc2UgXCJ1dGYtOFwiOlxuICAgICAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKTtcbiAgICAgICAgICBjYXNlIFwiYXNjaWlcIjpcbiAgICAgICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpO1xuICAgICAgICAgIGNhc2UgXCJsYXRpbjFcIjpcbiAgICAgICAgICBjYXNlIFwiYmluYXJ5XCI6XG4gICAgICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZCk7XG4gICAgICAgICAgY2FzZSBcImJhc2U2NFwiOlxuICAgICAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpO1xuICAgICAgICAgIGNhc2UgXCJ1Y3MyXCI6XG4gICAgICAgICAgY2FzZSBcInVjcy0yXCI6XG4gICAgICAgICAgY2FzZSBcInV0ZjE2bGVcIjpcbiAgICAgICAgICBjYXNlIFwidXRmLTE2bGVcIjpcbiAgICAgICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZCk7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gZW5jb2Rpbmc6IFwiICsgZW5jb2RpbmcpO1xuICAgICAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyBcIlwiKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIEJ1ZmZlcjIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWU7XG4gICAgZnVuY3Rpb24gc3dhcChiLCBuLCBtKSB7XG4gICAgICB2YXIgaSA9IGJbbl07XG4gICAgICBiW25dID0gYlttXTtcbiAgICAgIGJbbV0gPSBpO1xuICAgIH1cbiAgICBCdWZmZXIyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYoKSB7XG4gICAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGg7XG4gICAgICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkJ1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzXCIpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgICAgICBzd2FwKHRoaXMsIGksIGkgKyAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyKCkge1xuICAgICAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0c1wiKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICAgICAgc3dhcCh0aGlzLCBpLCBpICsgMyk7XG4gICAgICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0KCkge1xuICAgICAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0c1wiKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICAgICAgc3dhcCh0aGlzLCBpLCBpICsgNyk7XG4gICAgICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KTtcbiAgICAgICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpO1xuICAgICAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gXCJcIjtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aCk7XG4gICAgICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgICBCdWZmZXIyLnByb3RvdHlwZS50b0xvY2FsZVN0cmluZyA9IEJ1ZmZlcjIucHJvdG90eXBlLnRvU3RyaW5nO1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyhiKSB7XG4gICAgICBpZiAoIUJ1ZmZlcjIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyXCIpO1xuICAgICAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlO1xuICAgICAgcmV0dXJuIEJ1ZmZlcjIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMDtcbiAgICB9O1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICAgICAgdmFyIHN0ciA9IFwiXCI7XG4gICAgICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUztcbiAgICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoXCJoZXhcIiwgMCwgbWF4KS5yZXBsYWNlKC8oLnsyfSkvZywgXCIkMSBcIikudHJpbSgpO1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gXCIgLi4uIFwiO1xuICAgICAgcmV0dXJuIFwiPEJ1ZmZlciBcIiArIHN0ciArIFwiPlwiO1xuICAgIH07XG4gICAgaWYgKGN1c3RvbUluc3BlY3RTeW1ib2wpIHtcbiAgICAgIEJ1ZmZlcjIucHJvdG90eXBlW2N1c3RvbUluc3BlY3RTeW1ib2xdID0gQnVmZmVyMi5wcm90b3R5cGUuaW5zcGVjdDtcbiAgICB9XG4gICAgQnVmZmVyMi5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgICAgIGlmIChpc0luc3RhbmNlKHRhcmdldCwgVWludDhBcnJheSkpIHtcbiAgICAgICAgdGFyZ2V0ID0gQnVmZmVyMi5mcm9tKHRhcmdldCwgdGFyZ2V0Lm9mZnNldCwgdGFyZ2V0LmJ5dGVMZW5ndGgpO1xuICAgICAgfVxuICAgICAgaWYgKCFCdWZmZXIyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAnVGhlIFwidGFyZ2V0XCIgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZXIgb3IgVWludDhBcnJheS4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIHRhcmdldFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0ID09PSB2b2lkIDApIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXNTdGFydCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHRoaXNTdGFydCA9IDA7XG4gICAgICB9XG4gICAgICBpZiAodGhpc0VuZCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIm91dCBvZiByYW5nZSBpbmRleFwiKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID4+Pj0gMDtcbiAgICAgIGVuZCA+Pj49IDA7XG4gICAgICB0aGlzU3RhcnQgPj4+PSAwO1xuICAgICAgdGhpc0VuZCA+Pj49IDA7XG4gICAgICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMDtcbiAgICAgIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydDtcbiAgICAgIHZhciB5ID0gZW5kIC0gc3RhcnQ7XG4gICAgICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSk7XG4gICAgICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZCk7XG4gICAgICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICAgICAgeCA9IHRoaXNDb3B5W2ldO1xuICAgICAgICAgIHkgPSB0YXJnZXRDb3B5W2ldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoeCA8IHkpIHJldHVybiAtMTtcbiAgICAgIGlmICh5IDwgeCkgcmV0dXJuIDE7XG4gICAgICByZXR1cm4gMDtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mKGJ1ZmZlcjIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAgICAgaWYgKGJ1ZmZlcjIubGVuZ3RoID09PSAwKSByZXR1cm4gLTE7XG4gICAgICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0O1xuICAgICAgICBieXRlT2Zmc2V0ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDIxNDc0ODM2NDcpIHtcbiAgICAgICAgYnl0ZU9mZnNldCA9IDIxNDc0ODM2NDc7XG4gICAgICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMjE0NzQ4MzY0OCkge1xuICAgICAgICBieXRlT2Zmc2V0ID0gLTIxNDc0ODM2NDg7XG4gICAgICB9XG4gICAgICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQ7XG4gICAgICBpZiAobnVtYmVySXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAgICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiBidWZmZXIyLmxlbmd0aCAtIDE7XG4gICAgICB9XG4gICAgICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIyLmxlbmd0aCArIGJ5dGVPZmZzZXQ7XG4gICAgICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIyLmxlbmd0aCkge1xuICAgICAgICBpZiAoZGlyKSByZXR1cm4gLTE7XG4gICAgICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlcjIubGVuZ3RoIC0gMTtcbiAgICAgIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICAgICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDA7XG4gICAgICAgIGVsc2UgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdmFsID0gQnVmZmVyMi5mcm9tKHZhbCwgZW5jb2RpbmcpO1xuICAgICAgfVxuICAgICAgaWYgKEJ1ZmZlcjIuaXNCdWZmZXIodmFsKSkge1xuICAgICAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlcjIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcik7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdmFsID0gdmFsICYgMjU1O1xuICAgICAgICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyMiwgdmFsLCBieXRlT2Zmc2V0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyMiwgdmFsLCBieXRlT2Zmc2V0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIyLCBbdmFsXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcik7XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwidmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyXCIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhcnJheUluZGV4T2YoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgICAgIHZhciBpbmRleFNpemUgPSAxO1xuICAgICAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGg7XG4gICAgICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aDtcbiAgICAgIGlmIChlbmNvZGluZyAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoZW5jb2RpbmcgPT09IFwidWNzMlwiIHx8IGVuY29kaW5nID09PSBcInVjcy0yXCIgfHwgZW5jb2RpbmcgPT09IFwidXRmMTZsZVwiIHx8IGVuY29kaW5nID09PSBcInV0Zi0xNmxlXCIpIHtcbiAgICAgICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaW5kZXhTaXplID0gMjtcbiAgICAgICAgICBhcnJMZW5ndGggLz0gMjtcbiAgICAgICAgICB2YWxMZW5ndGggLz0gMjtcbiAgICAgICAgICBieXRlT2Zmc2V0IC89IDI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHJlYWQoYnVmLCBpMikge1xuICAgICAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICAgICAgcmV0dXJuIGJ1ZltpMl07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaTIgKiBpbmRleFNpemUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgaTtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgdmFyIGZvdW5kSW5kZXggPSAtMTtcbiAgICAgICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaTtcbiAgICAgICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleDtcbiAgICAgICAgICAgIGZvdW5kSW5kZXggPSAtMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoO1xuICAgICAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHZhciBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgICAgICBmb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBCdWZmZXIyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgICAgIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICAgICAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gICAgICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gaGV4V3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXQ7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICBsZW5ndGggPSByZW1haW5pbmc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKTtcbiAgICAgICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgICAgIGxlbmd0aCA9IHJlbWFpbmluZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgICAgICBsZW5ndGggPSBzdHJMZW4gLyAyO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KTtcbiAgICAgICAgaWYgKG51bWJlcklzTmFOKHBhcnNlZCkpIHJldHVybiBpO1xuICAgICAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdXRmOFdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICAgICAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJhc2U2NFdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICAgICAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdWNzMldyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICAgICAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aCk7XG4gICAgfVxuICAgIEJ1ZmZlcjIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgICAgIGlmIChvZmZzZXQgPT09IHZvaWQgMCkge1xuICAgICAgICBlbmNvZGluZyA9IFwidXRmOFwiO1xuICAgICAgICBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAobGVuZ3RoID09PSB2b2lkIDAgJiYgdHlwZW9mIG9mZnNldCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBlbmNvZGluZyA9IG9mZnNldDtcbiAgICAgICAgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgICAgIG9mZnNldCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwO1xuICAgICAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgICAgIGxlbmd0aCA9IGxlbmd0aCA+Pj4gMDtcbiAgICAgICAgICBpZiAoZW5jb2RpbmcgPT09IHZvaWQgMCkgZW5jb2RpbmcgPSBcInV0ZjhcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbmNvZGluZyA9IGxlbmd0aDtcbiAgICAgICAgICBsZW5ndGggPSB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBcIkJ1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldDtcbiAgICAgIGlmIChsZW5ndGggPT09IHZvaWQgMCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZztcbiAgICAgIGlmIChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkF0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzXCIpO1xuICAgICAgfVxuICAgICAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSBcInV0ZjhcIjtcbiAgICAgIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlO1xuICAgICAgZm9yICg7IDsgKSB7XG4gICAgICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgICAgICBjYXNlIFwiaGV4XCI6XG4gICAgICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCk7XG4gICAgICAgICAgY2FzZSBcInV0ZjhcIjpcbiAgICAgICAgICBjYXNlIFwidXRmLThcIjpcbiAgICAgICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCk7XG4gICAgICAgICAgY2FzZSBcImFzY2lpXCI6XG4gICAgICAgICAgY2FzZSBcImxhdGluMVwiOlxuICAgICAgICAgIGNhc2UgXCJiaW5hcnlcIjpcbiAgICAgICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpO1xuICAgICAgICAgIGNhc2UgXCJiYXNlNjRcIjpcbiAgICAgICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKTtcbiAgICAgICAgICBjYXNlIFwidWNzMlwiOlxuICAgICAgICAgIGNhc2UgXCJ1Y3MtMlwiOlxuICAgICAgICAgIGNhc2UgXCJ1dGYxNmxlXCI6XG4gICAgICAgICAgY2FzZSBcInV0Zi0xNmxlXCI6XG4gICAgICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIiArIGVuY29kaW5nKTtcbiAgICAgICAgICAgIGVuY29kaW5nID0gKFwiXCIgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJCdWZmZXJcIixcbiAgICAgICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gICAgICB9O1xuICAgIH07XG4gICAgZnVuY3Rpb24gYmFzZTY0U2xpY2UoYnVmLCBzdGFydCwgZW5kKSB7XG4gICAgICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHV0ZjhTbGljZShidWYsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZCk7XG4gICAgICB2YXIgcmVzID0gW107XG4gICAgICB2YXIgaSA9IHN0YXJ0O1xuICAgICAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICAgICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXTtcbiAgICAgICAgdmFyIGNvZGVQb2ludCA9IG51bGw7XG4gICAgICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gZmlyc3RCeXRlID4gMjM5ID8gNCA6IGZpcnN0Qnl0ZSA+IDIyMyA/IDMgOiBmaXJzdEJ5dGUgPiAxOTEgPyAyIDogMTtcbiAgICAgICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnQ7XG4gICAgICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAxMjgpIHtcbiAgICAgICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdO1xuICAgICAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAxOTIpID09PSAxMjgpIHtcbiAgICAgICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDMxKSA8PCA2IHwgc2Vjb25kQnl0ZSAmIDYzO1xuICAgICAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMTI3KSB7XG4gICAgICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV07XG4gICAgICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl07XG4gICAgICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDE5MikgPT09IDEyOCAmJiAodGhpcmRCeXRlICYgMTkyKSA9PT0gMTI4KSB7XG4gICAgICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAxNSkgPDwgMTIgfCAoc2Vjb25kQnl0ZSAmIDYzKSA8PCA2IHwgdGhpcmRCeXRlICYgNjM7XG4gICAgICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAyMDQ3ICYmICh0ZW1wQ29kZVBvaW50IDwgNTUyOTYgfHwgdGVtcENvZGVQb2ludCA+IDU3MzQzKSkge1xuICAgICAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdO1xuICAgICAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdO1xuICAgICAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXTtcbiAgICAgICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMTkyKSA9PT0gMTI4ICYmICh0aGlyZEJ5dGUgJiAxOTIpID09PSAxMjggJiYgKGZvdXJ0aEJ5dGUgJiAxOTIpID09PSAxMjgpIHtcbiAgICAgICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDE1KSA8PCAxOCB8IChzZWNvbmRCeXRlICYgNjMpIDw8IDEyIHwgKHRoaXJkQnl0ZSAmIDYzKSA8PCA2IHwgZm91cnRoQnl0ZSAmIDYzO1xuICAgICAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gNjU1MzUgJiYgdGVtcENvZGVQb2ludCA8IDExMTQxMTIpIHtcbiAgICAgICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgICAgICBjb2RlUG9pbnQgPSA2NTUzMztcbiAgICAgICAgICBieXRlc1BlclNlcXVlbmNlID0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiA2NTUzNSkge1xuICAgICAgICAgIGNvZGVQb2ludCAtPSA2NTUzNjtcbiAgICAgICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMTAyMyB8IDU1Mjk2KTtcbiAgICAgICAgICBjb2RlUG9pbnQgPSA1NjMyMCB8IGNvZGVQb2ludCAmIDEwMjM7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2goY29kZVBvaW50KTtcbiAgICAgICAgaSArPSBieXRlc1BlclNlcXVlbmNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpO1xuICAgIH1cbiAgICB2YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSA0MDk2O1xuICAgIGZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheShjb2RlUG9pbnRzKSB7XG4gICAgICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGg7XG4gICAgICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cyk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzID0gXCJcIjtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgICAgIFN0cmluZyxcbiAgICAgICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhc2NpaVNsaWNlKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIHJldCA9IFwiXCI7XG4gICAgICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpO1xuICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMTI3KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxhdGluMVNsaWNlKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIHJldCA9IFwiXCI7XG4gICAgICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpO1xuICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhleFNsaWNlKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGg7XG4gICAgICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwO1xuICAgICAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlbjtcbiAgICAgIHZhciBvdXQgPSBcIlwiO1xuICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgICAgb3V0ICs9IGhleFNsaWNlTG9va3VwVGFibGVbYnVmW2ldXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHV0ZjE2bGVTbGljZShidWYsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKTtcbiAgICAgIHZhciByZXMgPSBcIlwiO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGggLSAxOyBpICs9IDIpIHtcbiAgICAgICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgQnVmZmVyMi5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGg7XG4gICAgICBzdGFydCA9IH5+c3RhcnQ7XG4gICAgICBlbmQgPSBlbmQgPT09IHZvaWQgMCA/IGxlbiA6IH5+ZW5kO1xuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICBzdGFydCArPSBsZW47XG4gICAgICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICAgICAgc3RhcnQgPSBsZW47XG4gICAgICB9XG4gICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICBlbmQgKz0gbGVuO1xuICAgICAgICBpZiAoZW5kIDwgMCkgZW5kID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgICAgIGVuZCA9IGxlbjtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnQ7XG4gICAgICB2YXIgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKTtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihuZXdCdWYsIEJ1ZmZlcjIucHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBuZXdCdWY7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBjaGVja09mZnNldChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gICAgICBpZiAob2Zmc2V0ICUgMSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIm9mZnNldCBpcyBub3QgdWludFwiKTtcbiAgICAgIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aFwiKTtcbiAgICB9XG4gICAgQnVmZmVyMi5wcm90b3R5cGUucmVhZFVpbnRMRSA9IEJ1ZmZlcjIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFKG9mZnNldCwgYnl0ZUxlbmd0aDIsIG5vQXNzZXJ0KSB7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7XG4gICAgICBieXRlTGVuZ3RoMiA9IGJ5dGVMZW5ndGgyID4+PiAwO1xuICAgICAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoMiwgdGhpcy5sZW5ndGgpO1xuICAgICAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XTtcbiAgICAgIHZhciBtdWwgPSAxO1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGgyICYmIChtdWwgKj0gMjU2KSkge1xuICAgICAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWw7XG4gICAgfTtcbiAgICBCdWZmZXIyLnByb3RvdHlwZS5yZWFkVWludEJFID0gQnVmZmVyMi5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUob2Zmc2V0LCBieXRlTGVuZ3RoMiwgbm9Bc3NlcnQpIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMDtcbiAgICAgIGJ5dGVMZW5ndGgyID0gYnl0ZUxlbmd0aDIgPj4+IDA7XG4gICAgICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aDIsIHRoaXMubGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aDJdO1xuICAgICAgdmFyIG11bCA9IDE7XG4gICAgICB3aGlsZSAoYnl0ZUxlbmd0aDIgPiAwICYmIChtdWwgKj0gMjU2KSkge1xuICAgICAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGgyXSAqIG11bDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWw7XG4gICAgfTtcbiAgICBCdWZmZXIyLnByb3RvdHlwZS5yZWFkVWludDggPSBCdWZmZXIyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDgob2Zmc2V0LCBub0Fzc2VydCkge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwO1xuICAgICAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aCk7XG4gICAgICByZXR1cm4gdGhpc1tvZmZzZXRdO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUucmVhZFVpbnQxNkxFID0gQnVmZmVyMi5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMDtcbiAgICAgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpO1xuICAgICAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8IHRoaXNbb2Zmc2V0ICsgMV0gPDwgODtcbiAgICB9O1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLnJlYWRVaW50MTZCRSA9IEJ1ZmZlcjIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRShvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7XG4gICAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKTtcbiAgICAgIHJldHVybiB0aGlzW29mZnNldF0gPDwgOCB8IHRoaXNbb2Zmc2V0ICsgMV07XG4gICAgfTtcbiAgICBCdWZmZXIyLnByb3RvdHlwZS5yZWFkVWludDMyTEUgPSBCdWZmZXIyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUob2Zmc2V0LCBub0Fzc2VydCkge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwO1xuICAgICAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aCk7XG4gICAgICByZXR1cm4gKHRoaXNbb2Zmc2V0XSB8IHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCB8IHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpICsgdGhpc1tvZmZzZXQgKyAzXSAqIDE2Nzc3MjE2O1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUucmVhZFVpbnQzMkJFID0gQnVmZmVyMi5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMDtcbiAgICAgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpO1xuICAgICAgcmV0dXJuIHRoaXNbb2Zmc2V0XSAqIDE2Nzc3MjE2ICsgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYgfCB0aGlzW29mZnNldCArIDJdIDw8IDggfCB0aGlzW29mZnNldCArIDNdKTtcbiAgICB9O1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRShvZmZzZXQsIGJ5dGVMZW5ndGgyLCBub0Fzc2VydCkge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwO1xuICAgICAgYnl0ZUxlbmd0aDIgPSBieXRlTGVuZ3RoMiA+Pj4gMDtcbiAgICAgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aDIsIHRoaXMubGVuZ3RoKTtcbiAgICAgIHZhciB2YWwgPSB0aGlzW29mZnNldF07XG4gICAgICB2YXIgbXVsID0gMTtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoMiAmJiAobXVsICo9IDI1NikpIHtcbiAgICAgICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWw7XG4gICAgICB9XG4gICAgICBtdWwgKj0gMTI4O1xuICAgICAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aDIpO1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9O1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRShvZmZzZXQsIGJ5dGVMZW5ndGgyLCBub0Fzc2VydCkge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwO1xuICAgICAgYnl0ZUxlbmd0aDIgPSBieXRlTGVuZ3RoMiA+Pj4gMDtcbiAgICAgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aDIsIHRoaXMubGVuZ3RoKTtcbiAgICAgIHZhciBpID0gYnl0ZUxlbmd0aDI7XG4gICAgICB2YXIgbXVsID0gMTtcbiAgICAgIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV07XG4gICAgICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAyNTYpKSB7XG4gICAgICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWw7XG4gICAgICB9XG4gICAgICBtdWwgKj0gMTI4O1xuICAgICAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aDIpO1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9O1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDgob2Zmc2V0LCBub0Fzc2VydCkge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwO1xuICAgICAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aCk7XG4gICAgICBpZiAoISh0aGlzW29mZnNldF0gJiAxMjgpKSByZXR1cm4gdGhpc1tvZmZzZXRdO1xuICAgICAgcmV0dXJuICgyNTUgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRShvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7XG4gICAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKTtcbiAgICAgIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCB0aGlzW29mZnNldCArIDFdIDw8IDg7XG4gICAgICByZXR1cm4gdmFsICYgMzI3NjggPyB2YWwgfCA0Mjk0OTAxNzYwIDogdmFsO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRShvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7XG4gICAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKTtcbiAgICAgIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgdGhpc1tvZmZzZXRdIDw8IDg7XG4gICAgICByZXR1cm4gdmFsICYgMzI3NjggPyB2YWwgfCA0Mjk0OTAxNzYwIDogdmFsO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRShvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7XG4gICAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKTtcbiAgICAgIHJldHVybiB0aGlzW29mZnNldF0gfCB0aGlzW29mZnNldCArIDFdIDw8IDggfCB0aGlzW29mZnNldCArIDJdIDw8IDE2IHwgdGhpc1tvZmZzZXQgKyAzXSA8PCAyNDtcbiAgICB9O1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUob2Zmc2V0LCBub0Fzc2VydCkge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwO1xuICAgICAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aCk7XG4gICAgICByZXR1cm4gdGhpc1tvZmZzZXRdIDw8IDI0IHwgdGhpc1tvZmZzZXQgKyAxXSA8PCAxNiB8IHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCB8IHRoaXNbb2Zmc2V0ICsgM107XG4gICAgfTtcbiAgICBCdWZmZXIyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMDtcbiAgICAgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpO1xuICAgICAgcmV0dXJuIGllZWU3NTQyLnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNCk7XG4gICAgfTtcbiAgICBCdWZmZXIyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMDtcbiAgICAgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpO1xuICAgICAgcmV0dXJuIGllZWU3NTQyLnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMDtcbiAgICAgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpO1xuICAgICAgcmV0dXJuIGllZWU3NTQyLnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOCk7XG4gICAgfTtcbiAgICBCdWZmZXIyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUob2Zmc2V0LCBub0Fzc2VydCkge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwO1xuICAgICAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aCk7XG4gICAgICByZXR1cm4gaWVlZTc1NDIucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOCk7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBjaGVja0ludChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgICAgIGlmICghQnVmZmVyMi5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKTtcbiAgICAgIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJyk7XG4gICAgICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbmRleCBvdXQgb2YgcmFuZ2VcIik7XG4gICAgfVxuICAgIEJ1ZmZlcjIucHJvdG90eXBlLndyaXRlVWludExFID0gQnVmZmVyMi5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoMiwgbm9Bc3NlcnQpIHtcbiAgICAgIHZhbHVlID0gK3ZhbHVlO1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwO1xuICAgICAgYnl0ZUxlbmd0aDIgPSBieXRlTGVuZ3RoMiA+Pj4gMDtcbiAgICAgIGlmICghbm9Bc3NlcnQpIHtcbiAgICAgICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgyKSAtIDE7XG4gICAgICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgyLCBtYXhCeXRlcywgMCk7XG4gICAgICB9XG4gICAgICB2YXIgbXVsID0gMTtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMjU1O1xuICAgICAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGgyICYmIChtdWwgKj0gMjU2KSkge1xuICAgICAgICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgLyBtdWwgJiAyNTU7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aDI7XG4gICAgfTtcbiAgICBCdWZmZXIyLnByb3RvdHlwZS53cml0ZVVpbnRCRSA9IEJ1ZmZlcjIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aDIsIG5vQXNzZXJ0KSB7XG4gICAgICB2YWx1ZSA9ICt2YWx1ZTtcbiAgICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMDtcbiAgICAgIGJ5dGVMZW5ndGgyID0gYnl0ZUxlbmd0aDIgPj4+IDA7XG4gICAgICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoMikgLSAxO1xuICAgICAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoMiwgbWF4Qnl0ZXMsIDApO1xuICAgICAgfVxuICAgICAgdmFyIGkgPSBieXRlTGVuZ3RoMiAtIDE7XG4gICAgICB2YXIgbXVsID0gMTtcbiAgICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDI1NTtcbiAgICAgIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDI1NikpIHtcbiAgICAgICAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlIC8gbXVsICYgMjU1O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGgyO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUud3JpdGVVaW50OCA9IEJ1ZmZlcjIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4KHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gICAgICB2YWx1ZSA9ICt2YWx1ZTtcbiAgICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMDtcbiAgICAgIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDI1NSwgMCk7XG4gICAgICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDI1NTtcbiAgICAgIHJldHVybiBvZmZzZXQgKyAxO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUud3JpdGVVaW50MTZMRSA9IEJ1ZmZlcjIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gICAgICB2YWx1ZSA9ICt2YWx1ZTtcbiAgICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMDtcbiAgICAgIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDY1NTM1LCAwKTtcbiAgICAgIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMjU1O1xuICAgICAgdGhpc1tvZmZzZXQgKyAxXSA9IHZhbHVlID4+PiA4O1xuICAgICAgcmV0dXJuIG9mZnNldCArIDI7XG4gICAgfTtcbiAgICBCdWZmZXIyLnByb3RvdHlwZS53cml0ZVVpbnQxNkJFID0gQnVmZmVyMi5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICAgIHZhbHVlID0gK3ZhbHVlO1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwO1xuICAgICAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgNjU1MzUsIDApO1xuICAgICAgdGhpc1tvZmZzZXRdID0gdmFsdWUgPj4+IDg7XG4gICAgICB0aGlzW29mZnNldCArIDFdID0gdmFsdWUgJiAyNTU7XG4gICAgICByZXR1cm4gb2Zmc2V0ICsgMjtcbiAgICB9O1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLndyaXRlVWludDMyTEUgPSBCdWZmZXIyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICAgICAgdmFsdWUgPSArdmFsdWU7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7XG4gICAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCA0Mjk0OTY3Mjk1LCAwKTtcbiAgICAgIHRoaXNbb2Zmc2V0ICsgM10gPSB2YWx1ZSA+Pj4gMjQ7XG4gICAgICB0aGlzW29mZnNldCArIDJdID0gdmFsdWUgPj4+IDE2O1xuICAgICAgdGhpc1tvZmZzZXQgKyAxXSA9IHZhbHVlID4+PiA4O1xuICAgICAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAyNTU7XG4gICAgICByZXR1cm4gb2Zmc2V0ICsgNDtcbiAgICB9O1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLndyaXRlVWludDMyQkUgPSBCdWZmZXIyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICAgICAgdmFsdWUgPSArdmFsdWU7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7XG4gICAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCA0Mjk0OTY3Mjk1LCAwKTtcbiAgICAgIHRoaXNbb2Zmc2V0XSA9IHZhbHVlID4+PiAyNDtcbiAgICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSB2YWx1ZSA+Pj4gMTY7XG4gICAgICB0aGlzW29mZnNldCArIDJdID0gdmFsdWUgPj4+IDg7XG4gICAgICB0aGlzW29mZnNldCArIDNdID0gdmFsdWUgJiAyNTU7XG4gICAgICByZXR1cm4gb2Zmc2V0ICsgNDtcbiAgICB9O1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgyLCBub0Fzc2VydCkge1xuICAgICAgdmFsdWUgPSArdmFsdWU7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7XG4gICAgICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoMiAtIDEpO1xuICAgICAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoMiwgbGltaXQgLSAxLCAtbGltaXQpO1xuICAgICAgfVxuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdmFyIG11bCA9IDE7XG4gICAgICB2YXIgc3ViID0gMDtcbiAgICAgIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMjU1O1xuICAgICAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGgyICYmIChtdWwgKj0gMjU2KSkge1xuICAgICAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgICAgIHN1YiA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCA+PiAwKSAtIHN1YiAmIDI1NTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoMjtcbiAgICB9O1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgyLCBub0Fzc2VydCkge1xuICAgICAgdmFsdWUgPSArdmFsdWU7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7XG4gICAgICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoMiAtIDEpO1xuICAgICAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoMiwgbGltaXQgLSAxLCAtbGltaXQpO1xuICAgICAgfVxuICAgICAgdmFyIGkgPSBieXRlTGVuZ3RoMiAtIDE7XG4gICAgICB2YXIgbXVsID0gMTtcbiAgICAgIHZhciBzdWIgPSAwO1xuICAgICAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMjU1O1xuICAgICAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMjU2KSkge1xuICAgICAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgICAgIHN1YiA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCA+PiAwKSAtIHN1YiAmIDI1NTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoMjtcbiAgICB9O1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICAgICAgdmFsdWUgPSArdmFsdWU7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7XG4gICAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAxMjcsIC0xMjgpO1xuICAgICAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAyNTUgKyB2YWx1ZSArIDE7XG4gICAgICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDI1NTtcbiAgICAgIHJldHVybiBvZmZzZXQgKyAxO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gICAgICB2YWx1ZSA9ICt2YWx1ZTtcbiAgICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMDtcbiAgICAgIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDMyNzY3LCAtMzI3NjgpO1xuICAgICAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAyNTU7XG4gICAgICB0aGlzW29mZnNldCArIDFdID0gdmFsdWUgPj4+IDg7XG4gICAgICByZXR1cm4gb2Zmc2V0ICsgMjtcbiAgICB9O1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICAgICAgdmFsdWUgPSArdmFsdWU7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7XG4gICAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAzMjc2NywgLTMyNzY4KTtcbiAgICAgIHRoaXNbb2Zmc2V0XSA9IHZhbHVlID4+PiA4O1xuICAgICAgdGhpc1tvZmZzZXQgKyAxXSA9IHZhbHVlICYgMjU1O1xuICAgICAgcmV0dXJuIG9mZnNldCArIDI7XG4gICAgfTtcbiAgICBCdWZmZXIyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICAgIHZhbHVlID0gK3ZhbHVlO1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwO1xuICAgICAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMjE0NzQ4MzY0NywgLTIxNDc0ODM2NDgpO1xuICAgICAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAyNTU7XG4gICAgICB0aGlzW29mZnNldCArIDFdID0gdmFsdWUgPj4+IDg7XG4gICAgICB0aGlzW29mZnNldCArIDJdID0gdmFsdWUgPj4+IDE2O1xuICAgICAgdGhpc1tvZmZzZXQgKyAzXSA9IHZhbHVlID4+PiAyNDtcbiAgICAgIHJldHVybiBvZmZzZXQgKyA0O1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gICAgICB2YWx1ZSA9ICt2YWx1ZTtcbiAgICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMDtcbiAgICAgIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDIxNDc0ODM2NDcsIC0yMTQ3NDgzNjQ4KTtcbiAgICAgIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gNDI5NDk2NzI5NSArIHZhbHVlICsgMTtcbiAgICAgIHRoaXNbb2Zmc2V0XSA9IHZhbHVlID4+PiAyNDtcbiAgICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSB2YWx1ZSA+Pj4gMTY7XG4gICAgICB0aGlzW29mZnNldCArIDJdID0gdmFsdWUgPj4+IDg7XG4gICAgICB0aGlzW29mZnNldCArIDNdID0gdmFsdWUgJiAyNTU7XG4gICAgICByZXR1cm4gb2Zmc2V0ICsgNDtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgICAgIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkluZGV4IG91dCBvZiByYW5nZVwiKTtcbiAgICAgIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkluZGV4IG91dCBvZiByYW5nZVwiKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gd3JpdGVGbG9hdChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgICAgIHZhbHVlID0gK3ZhbHVlO1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwO1xuICAgICAgaWYgKCFub0Fzc2VydCkge1xuICAgICAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0KTtcbiAgICAgIH1cbiAgICAgIGllZWU3NTQyLndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNCk7XG4gICAgICByZXR1cm4gb2Zmc2V0ICsgNDtcbiAgICB9XG4gICAgQnVmZmVyMi5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gICAgICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydCk7XG4gICAgfTtcbiAgICBCdWZmZXIyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICAgIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydCk7XG4gICAgfTtcbiAgICBmdW5jdGlvbiB3cml0ZURvdWJsZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgICAgIHZhbHVlID0gK3ZhbHVlO1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwO1xuICAgICAgaWYgKCFub0Fzc2VydCkge1xuICAgICAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4KTtcbiAgICAgIH1cbiAgICAgIGllZWU3NTQyLndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOCk7XG4gICAgICByZXR1cm4gb2Zmc2V0ICsgODtcbiAgICB9XG4gICAgQnVmZmVyMi5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICAgIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydCk7XG4gICAgfTtcbiAgICBCdWZmZXIyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICAgICAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydCk7XG4gICAgfTtcbiAgICBCdWZmZXIyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gICAgICBpZiAoIUJ1ZmZlcjIuaXNCdWZmZXIodGFyZ2V0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcImFyZ3VtZW50IHNob3VsZCBiZSBhIEJ1ZmZlclwiKTtcbiAgICAgIGlmICghc3RhcnQpIHN0YXJ0ID0gMDtcbiAgICAgIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGg7XG4gICAgICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoO1xuICAgICAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwO1xuICAgICAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0O1xuICAgICAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwO1xuICAgICAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwO1xuICAgICAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcInRhcmdldFN0YXJ0IG91dCBvZiBib3VuZHNcIik7XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkluZGV4IG91dCBvZiByYW5nZVwiKTtcbiAgICAgIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcInNvdXJjZUVuZCBvdXQgb2YgYm91bmRzXCIpO1xuICAgICAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aDtcbiAgICAgIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgICAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydDtcbiAgICAgIH1cbiAgICAgIHZhciBsZW4gPSBlbmQgLSBzdGFydDtcbiAgICAgIGlmICh0aGlzID09PSB0YXJnZXQgJiYgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aGlzLmNvcHlXaXRoaW4odGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZCksXG4gICAgICAgICAgdGFyZ2V0U3RhcnRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsZW47XG4gICAgfTtcbiAgICBCdWZmZXIyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgZW5jb2RpbmcgPSBzdGFydDtcbiAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgICAgZW5kID0gdGhpcy5sZW5ndGg7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIGVuY29kaW5nID0gZW5kO1xuICAgICAgICAgIGVuZCA9IHRoaXMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmNvZGluZyAhPT0gdm9pZCAwICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09IFwic3RyaW5nXCIgJiYgIUJ1ZmZlcjIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biBlbmNvZGluZzogXCIgKyBlbmNvZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgIGlmIChlbmNvZGluZyA9PT0gXCJ1dGY4XCIgJiYgY29kZSA8IDEyOCB8fCBlbmNvZGluZyA9PT0gXCJsYXRpbjFcIikge1xuICAgICAgICAgICAgdmFsID0gY29kZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICB2YWwgPSB2YWwgJiAyNTU7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgIHZhbCA9IE51bWJlcih2YWwpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiT3V0IG9mIHJhbmdlIGluZGV4XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gc3RhcnQgPj4+IDA7XG4gICAgICBlbmQgPSBlbmQgPT09IHZvaWQgMCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwO1xuICAgICAgaWYgKCF2YWwpIHZhbCA9IDA7XG4gICAgICB2YXIgaTtcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgICAgICB0aGlzW2ldID0gdmFsO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgYnl0ZXMgPSBCdWZmZXIyLmlzQnVmZmVyKHZhbCkgPyB2YWwgOiBCdWZmZXIyLmZyb20odmFsLCBlbmNvZGluZyk7XG4gICAgICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGg7XG4gICAgICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgdmFsdWUgXCInICsgdmFsICsgJ1wiIGlzIGludmFsaWQgZm9yIGFyZ3VtZW50IFwidmFsdWVcIicpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgdmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teKy8wLTlBLVphLXotX10vZztcbiAgICBmdW5jdGlvbiBiYXNlNjRjbGVhbihzdHIpIHtcbiAgICAgIHN0ciA9IHN0ci5zcGxpdChcIj1cIilbMF07XG4gICAgICBzdHIgPSBzdHIudHJpbSgpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsIFwiXCIpO1xuICAgICAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gXCJcIjtcbiAgICAgIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgICAgICBzdHIgPSBzdHIgKyBcIj1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHV0ZjhUb0J5dGVzKHN0cmluZywgdW5pdHMpIHtcbiAgICAgIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHk7XG4gICAgICB2YXIgY29kZVBvaW50O1xuICAgICAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gICAgICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGw7XG4gICAgICB2YXIgYnl0ZXMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiA1NTI5NSAmJiBjb2RlUG9pbnQgPCA1NzM0NCkge1xuICAgICAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAgICAgaWYgKGNvZGVQb2ludCA+IDU2MzE5KSB7XG4gICAgICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgyMzksIDE5MSwgMTg5KTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDIzOSwgMTkxLCAxODkpO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnQ7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvZGVQb2ludCA8IDU2MzIwKSB7XG4gICAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMjM5LCAxOTEsIDE4OSk7XG4gICAgICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50O1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gNTUyOTYgPDwgMTAgfCBjb2RlUG9pbnQgLSA1NjMyMCkgKyA2NTUzNjtcbiAgICAgICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDIzOSwgMTkxLCAxODkpO1xuICAgICAgICB9XG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsO1xuICAgICAgICBpZiAoY29kZVBvaW50IDwgMTI4KSB7XG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrO1xuICAgICAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAyMDQ4KSB7XG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrO1xuICAgICAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgICAgICBjb2RlUG9pbnQgPj4gNiB8IDE5MixcbiAgICAgICAgICAgIGNvZGVQb2ludCAmIDYzIHwgMTI4XG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCA2NTUzNikge1xuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVhaztcbiAgICAgICAgICBieXRlcy5wdXNoKFxuICAgICAgICAgICAgY29kZVBvaW50ID4+IDEyIHwgMjI0LFxuICAgICAgICAgICAgY29kZVBvaW50ID4+IDYgJiA2MyB8IDEyOCxcbiAgICAgICAgICAgIGNvZGVQb2ludCAmIDYzIHwgMTI4XG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAxMTE0MTEyKSB7XG4gICAgICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrO1xuICAgICAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgICAgICBjb2RlUG9pbnQgPj4gMTggfCAyNDAsXG4gICAgICAgICAgICBjb2RlUG9pbnQgPj4gMTIgJiA2MyB8IDEyOCxcbiAgICAgICAgICAgIGNvZGVQb2ludCA+PiA2ICYgNjMgfCAxMjgsXG4gICAgICAgICAgICBjb2RlUG9pbnQgJiA2MyB8IDEyOFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb2RlIHBvaW50XCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYnl0ZXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFzY2lpVG9CeXRlcyhzdHIpIHtcbiAgICAgIHZhciBieXRlQXJyYXkgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMjU1KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBieXRlQXJyYXk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzKHN0ciwgdW5pdHMpIHtcbiAgICAgIHZhciBjLCBoaSwgbG87XG4gICAgICB2YXIgYnl0ZUFycmF5ID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWs7XG4gICAgICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaGkgPSBjID4+IDg7XG4gICAgICAgIGxvID0gYyAlIDI1NjtcbiAgICAgICAgYnl0ZUFycmF5LnB1c2gobG8pO1xuICAgICAgICBieXRlQXJyYXkucHVzaChoaSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYnl0ZUFycmF5O1xuICAgIH1cbiAgICBmdW5jdGlvbiBiYXNlNjRUb0J5dGVzKHN0cikge1xuICAgICAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYmxpdEJ1ZmZlcihzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCB8fCBpID49IHNyYy5sZW5ndGgpIGJyZWFrO1xuICAgICAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV07XG4gICAgICB9XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNJbnN0YW5jZShvYmosIHR5cGUyKSB7XG4gICAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgdHlwZTIgfHwgb2JqICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yLm5hbWUgIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IubmFtZSA9PT0gdHlwZTIubmFtZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbnVtYmVySXNOYU4ob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICE9PSBvYmo7XG4gICAgfVxuICAgIHZhciBoZXhTbGljZUxvb2t1cFRhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYWxwaGFiZXQgPSBcIjAxMjM0NTY3ODlhYmNkZWZcIjtcbiAgICAgIHZhciB0YWJsZSA9IG5ldyBBcnJheSgyNTYpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICAgIHZhciBpMTYgPSBpICogMTY7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgMTY7ICsraikge1xuICAgICAgICAgIHRhYmxlW2kxNiArIGpdID0gYWxwaGFiZXRbaV0gKyBhbHBoYWJldFtqXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRhYmxlO1xuICAgIH0oKTtcbiAgfSkoYnVmZmVyKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cbnZhciB1dGlsID0ge307XG52YXIgdHlwZXMgPSB7fTtcbnZhciBzaGFtcyQxO1xudmFyIGhhc1JlcXVpcmVkU2hhbXMkMTtcbmZ1bmN0aW9uIHJlcXVpcmVTaGFtcyQxKCkge1xuICBpZiAoaGFzUmVxdWlyZWRTaGFtcyQxKSByZXR1cm4gc2hhbXMkMTtcbiAgaGFzUmVxdWlyZWRTaGFtcyQxID0gMTtcbiAgc2hhbXMkMSA9IGZ1bmN0aW9uIGhhc1N5bWJvbHMyKCkge1xuICAgIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcImZ1bmN0aW9uXCIgfHwgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBvYmogPSB7fTtcbiAgICB2YXIgc3ltID0gU3ltYm9sKFwidGVzdFwiKTtcbiAgICB2YXIgc3ltT2JqID0gT2JqZWN0KHN5bSk7XG4gICAgaWYgKHR5cGVvZiBzeW0gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW0pICE9PSBcIltvYmplY3QgU3ltYm9sXVwiKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltT2JqKSAhPT0gXCJbb2JqZWN0IFN5bWJvbF1cIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgc3ltVmFsID0gNDI7XG4gICAgb2JqW3N5bV0gPSBzeW1WYWw7XG4gICAgZm9yIChzeW0gaW4gb2JqKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgT2JqZWN0LmtleXMgPT09IFwiZnVuY3Rpb25cIiAmJiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCAhPT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzID09PSBcImZ1bmN0aW9uXCIgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5sZW5ndGggIT09IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIHN5bXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iaik7XG4gICAgaWYgKHN5bXMubGVuZ3RoICE9PSAxIHx8IHN5bXNbMF0gIT09IHN5bSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmosIHN5bSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIHN5bSk7XG4gICAgICBpZiAoZGVzY3JpcHRvci52YWx1ZSAhPT0gc3ltVmFsIHx8IGRlc2NyaXB0b3IuZW51bWVyYWJsZSAhPT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuICByZXR1cm4gc2hhbXMkMTtcbn1cbnZhciBzaGFtcztcbnZhciBoYXNSZXF1aXJlZFNoYW1zO1xuZnVuY3Rpb24gcmVxdWlyZVNoYW1zKCkge1xuICBpZiAoaGFzUmVxdWlyZWRTaGFtcykgcmV0dXJuIHNoYW1zO1xuICBoYXNSZXF1aXJlZFNoYW1zID0gMTtcbiAgdmFyIGhhc1N5bWJvbHMyID0gcmVxdWlyZVNoYW1zJDEoKTtcbiAgc2hhbXMgPSBmdW5jdGlvbiBoYXNUb1N0cmluZ1RhZ1NoYW1zKCkge1xuICAgIHJldHVybiBoYXNTeW1ib2xzMigpICYmICEhU3ltYm9sLnRvU3RyaW5nVGFnO1xuICB9O1xuICByZXR1cm4gc2hhbXM7XG59XG52YXIgZXNFcnJvcnM7XG52YXIgaGFzUmVxdWlyZWRFc0Vycm9ycztcbmZ1bmN0aW9uIHJlcXVpcmVFc0Vycm9ycygpIHtcbiAgaWYgKGhhc1JlcXVpcmVkRXNFcnJvcnMpIHJldHVybiBlc0Vycm9ycztcbiAgaGFzUmVxdWlyZWRFc0Vycm9ycyA9IDE7XG4gIGVzRXJyb3JzID0gRXJyb3I7XG4gIHJldHVybiBlc0Vycm9ycztcbn1cbnZhciBfZXZhbDtcbnZhciBoYXNSZXF1aXJlZF9ldmFsO1xuZnVuY3Rpb24gcmVxdWlyZV9ldmFsKCkge1xuICBpZiAoaGFzUmVxdWlyZWRfZXZhbCkgcmV0dXJuIF9ldmFsO1xuICBoYXNSZXF1aXJlZF9ldmFsID0gMTtcbiAgX2V2YWwgPSBFdmFsRXJyb3I7XG4gIHJldHVybiBfZXZhbDtcbn1cbnZhciByYW5nZTtcbnZhciBoYXNSZXF1aXJlZFJhbmdlO1xuZnVuY3Rpb24gcmVxdWlyZVJhbmdlKCkge1xuICBpZiAoaGFzUmVxdWlyZWRSYW5nZSkgcmV0dXJuIHJhbmdlO1xuICBoYXNSZXF1aXJlZFJhbmdlID0gMTtcbiAgcmFuZ2UgPSBSYW5nZUVycm9yO1xuICByZXR1cm4gcmFuZ2U7XG59XG52YXIgcmVmO1xudmFyIGhhc1JlcXVpcmVkUmVmO1xuZnVuY3Rpb24gcmVxdWlyZVJlZigpIHtcbiAgaWYgKGhhc1JlcXVpcmVkUmVmKSByZXR1cm4gcmVmO1xuICBoYXNSZXF1aXJlZFJlZiA9IDE7XG4gIHJlZiA9IFJlZmVyZW5jZUVycm9yO1xuICByZXR1cm4gcmVmO1xufVxudmFyIHN5bnRheDtcbnZhciBoYXNSZXF1aXJlZFN5bnRheDtcbmZ1bmN0aW9uIHJlcXVpcmVTeW50YXgoKSB7XG4gIGlmIChoYXNSZXF1aXJlZFN5bnRheCkgcmV0dXJuIHN5bnRheDtcbiAgaGFzUmVxdWlyZWRTeW50YXggPSAxO1xuICBzeW50YXggPSBTeW50YXhFcnJvcjtcbiAgcmV0dXJuIHN5bnRheDtcbn1cbnZhciB0eXBlO1xudmFyIGhhc1JlcXVpcmVkVHlwZTtcbmZ1bmN0aW9uIHJlcXVpcmVUeXBlKCkge1xuICBpZiAoaGFzUmVxdWlyZWRUeXBlKSByZXR1cm4gdHlwZTtcbiAgaGFzUmVxdWlyZWRUeXBlID0gMTtcbiAgdHlwZSA9IFR5cGVFcnJvcjtcbiAgcmV0dXJuIHR5cGU7XG59XG52YXIgdXJpO1xudmFyIGhhc1JlcXVpcmVkVXJpO1xuZnVuY3Rpb24gcmVxdWlyZVVyaSgpIHtcbiAgaWYgKGhhc1JlcXVpcmVkVXJpKSByZXR1cm4gdXJpO1xuICBoYXNSZXF1aXJlZFVyaSA9IDE7XG4gIHVyaSA9IFVSSUVycm9yO1xuICByZXR1cm4gdXJpO1xufVxudmFyIGhhc1N5bWJvbHM7XG52YXIgaGFzUmVxdWlyZWRIYXNTeW1ib2xzO1xuZnVuY3Rpb24gcmVxdWlyZUhhc1N5bWJvbHMoKSB7XG4gIGlmIChoYXNSZXF1aXJlZEhhc1N5bWJvbHMpIHJldHVybiBoYXNTeW1ib2xzO1xuICBoYXNSZXF1aXJlZEhhc1N5bWJvbHMgPSAxO1xuICB2YXIgb3JpZ1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgU3ltYm9sO1xuICB2YXIgaGFzU3ltYm9sU2hhbSA9IHJlcXVpcmVTaGFtcyQxKCk7XG4gIGhhc1N5bWJvbHMgPSBmdW5jdGlvbiBoYXNOYXRpdmVTeW1ib2xzKCkge1xuICAgIGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcmlnU3ltYm9sKFwiZm9vXCIpICE9PSBcInN5bWJvbFwiKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgU3ltYm9sKFwiYmFyXCIpICE9PSBcInN5bWJvbFwiKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBoYXNTeW1ib2xTaGFtKCk7XG4gIH07XG4gIHJldHVybiBoYXNTeW1ib2xzO1xufVxudmFyIGhhc1Byb3RvO1xudmFyIGhhc1JlcXVpcmVkSGFzUHJvdG87XG5mdW5jdGlvbiByZXF1aXJlSGFzUHJvdG8oKSB7XG4gIGlmIChoYXNSZXF1aXJlZEhhc1Byb3RvKSByZXR1cm4gaGFzUHJvdG87XG4gIGhhc1JlcXVpcmVkSGFzUHJvdG8gPSAxO1xuICB2YXIgdGVzdCA9IHtcbiAgICBfX3Byb3RvX186IG51bGwsXG4gICAgZm9vOiB7fVxuICB9O1xuICB2YXIgJE9iamVjdCA9IE9iamVjdDtcbiAgaGFzUHJvdG8gPSBmdW5jdGlvbiBoYXNQcm90bzIoKSB7XG4gICAgcmV0dXJuIHsgX19wcm90b19fOiB0ZXN0IH0uZm9vID09PSB0ZXN0LmZvbyAmJiAhKHRlc3QgaW5zdGFuY2VvZiAkT2JqZWN0KTtcbiAgfTtcbiAgcmV0dXJuIGhhc1Byb3RvO1xufVxudmFyIGltcGxlbWVudGF0aW9uO1xudmFyIGhhc1JlcXVpcmVkSW1wbGVtZW50YXRpb247XG5mdW5jdGlvbiByZXF1aXJlSW1wbGVtZW50YXRpb24oKSB7XG4gIGlmIChoYXNSZXF1aXJlZEltcGxlbWVudGF0aW9uKSByZXR1cm4gaW1wbGVtZW50YXRpb247XG4gIGhhc1JlcXVpcmVkSW1wbGVtZW50YXRpb24gPSAxO1xuICB2YXIgRVJST1JfTUVTU0FHRSA9IFwiRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgY2FsbGVkIG9uIGluY29tcGF0aWJsZSBcIjtcbiAgdmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbiAgdmFyIG1heCA9IE1hdGgubWF4O1xuICB2YXIgZnVuY1R5cGUgPSBcIltvYmplY3QgRnVuY3Rpb25dXCI7XG4gIHZhciBjb25jYXR0eSA9IGZ1bmN0aW9uIGNvbmNhdHR5MihhLCBiKSB7XG4gICAgdmFyIGFyciA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgYXJyW2ldID0gYVtpXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBiLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBhcnJbaiArIGEubGVuZ3RoXSA9IGJbal07XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG4gIH07XG4gIHZhciBzbGljeSA9IGZ1bmN0aW9uIHNsaWN5MihhcnJMaWtlLCBvZmZzZXQpIHtcbiAgICB2YXIgYXJyID0gW107XG4gICAgZm9yICh2YXIgaSA9IG9mZnNldCwgaiA9IDA7IGkgPCBhcnJMaWtlLmxlbmd0aDsgaSArPSAxLCBqICs9IDEpIHtcbiAgICAgIGFycltqXSA9IGFyckxpa2VbaV07XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG4gIH07XG4gIHZhciBqb2lueSA9IGZ1bmN0aW9uKGFyciwgam9pbmVyKSB7XG4gICAgdmFyIHN0ciA9IFwiXCI7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHN0ciArPSBhcnJbaV07XG4gICAgICBpZiAoaSArIDEgPCBhcnIubGVuZ3RoKSB7XG4gICAgICAgIHN0ciArPSBqb2luZXI7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG4gIH07XG4gIGltcGxlbWVudGF0aW9uID0gZnVuY3Rpb24gYmluZCh0aGF0KSB7XG4gICAgdmFyIHRhcmdldCA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09IFwiZnVuY3Rpb25cIiB8fCB0b1N0ci5hcHBseSh0YXJnZXQpICE9PSBmdW5jVHlwZSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihFUlJPUl9NRVNTQUdFICsgdGFyZ2V0KTtcbiAgICB9XG4gICAgdmFyIGFyZ3MgPSBzbGljeShhcmd1bWVudHMsIDEpO1xuICAgIHZhciBib3VuZDtcbiAgICB2YXIgYmluZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGJvdW5kKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICBjb25jYXR0eShhcmdzLCBhcmd1bWVudHMpXG4gICAgICAgICk7XG4gICAgICAgIGlmIChPYmplY3QocmVzdWx0KSA9PT0gcmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkoXG4gICAgICAgIHRoYXQsXG4gICAgICAgIGNvbmNhdHR5KGFyZ3MsIGFyZ3VtZW50cylcbiAgICAgICk7XG4gICAgfTtcbiAgICB2YXIgYm91bmRMZW5ndGggPSBtYXgoMCwgdGFyZ2V0Lmxlbmd0aCAtIGFyZ3MubGVuZ3RoKTtcbiAgICB2YXIgYm91bmRBcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib3VuZExlbmd0aDsgaSsrKSB7XG4gICAgICBib3VuZEFyZ3NbaV0gPSBcIiRcIiArIGk7XG4gICAgfVxuICAgIGJvdW5kID0gRnVuY3Rpb24oXCJiaW5kZXJcIiwgXCJyZXR1cm4gZnVuY3Rpb24gKFwiICsgam9pbnkoYm91bmRBcmdzLCBcIixcIikgKyBcIil7IHJldHVybiBiaW5kZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpOyB9XCIpKGJpbmRlcik7XG4gICAgaWYgKHRhcmdldC5wcm90b3R5cGUpIHtcbiAgICAgIHZhciBFbXB0eSA9IGZ1bmN0aW9uIEVtcHR5MigpIHtcbiAgICAgIH07XG4gICAgICBFbXB0eS5wcm90b3R5cGUgPSB0YXJnZXQucHJvdG90eXBlO1xuICAgICAgYm91bmQucHJvdG90eXBlID0gbmV3IEVtcHR5KCk7XG4gICAgICBFbXB0eS5wcm90b3R5cGUgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gYm91bmQ7XG4gIH07XG4gIHJldHVybiBpbXBsZW1lbnRhdGlvbjtcbn1cbnZhciBmdW5jdGlvbkJpbmQ7XG52YXIgaGFzUmVxdWlyZWRGdW5jdGlvbkJpbmQ7XG5mdW5jdGlvbiByZXF1aXJlRnVuY3Rpb25CaW5kKCkge1xuICBpZiAoaGFzUmVxdWlyZWRGdW5jdGlvbkJpbmQpIHJldHVybiBmdW5jdGlvbkJpbmQ7XG4gIGhhc1JlcXVpcmVkRnVuY3Rpb25CaW5kID0gMTtcbiAgdmFyIGltcGxlbWVudGF0aW9uMiA9IHJlcXVpcmVJbXBsZW1lbnRhdGlvbigpO1xuICBmdW5jdGlvbkJpbmQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCB8fCBpbXBsZW1lbnRhdGlvbjI7XG4gIHJldHVybiBmdW5jdGlvbkJpbmQ7XG59XG52YXIgaGFzb3duO1xudmFyIGhhc1JlcXVpcmVkSGFzb3duO1xuZnVuY3Rpb24gcmVxdWlyZUhhc293bigpIHtcbiAgaWYgKGhhc1JlcXVpcmVkSGFzb3duKSByZXR1cm4gaGFzb3duO1xuICBoYXNSZXF1aXJlZEhhc293biA9IDE7XG4gIHZhciBjYWxsID0gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGw7XG4gIHZhciAkaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIGJpbmQgPSByZXF1aXJlRnVuY3Rpb25CaW5kKCk7XG4gIGhhc293biA9IGJpbmQuY2FsbChjYWxsLCAkaGFzT3duKTtcbiAgcmV0dXJuIGhhc293bjtcbn1cbnZhciBnZXRJbnRyaW5zaWM7XG52YXIgaGFzUmVxdWlyZWRHZXRJbnRyaW5zaWM7XG5mdW5jdGlvbiByZXF1aXJlR2V0SW50cmluc2ljKCkge1xuICBpZiAoaGFzUmVxdWlyZWRHZXRJbnRyaW5zaWMpIHJldHVybiBnZXRJbnRyaW5zaWM7XG4gIGhhc1JlcXVpcmVkR2V0SW50cmluc2ljID0gMTtcbiAgdmFyIHVuZGVmaW5lZCQxO1xuICB2YXIgJEVycm9yID0gcmVxdWlyZUVzRXJyb3JzKCk7XG4gIHZhciAkRXZhbEVycm9yID0gcmVxdWlyZV9ldmFsKCk7XG4gIHZhciAkUmFuZ2VFcnJvciA9IHJlcXVpcmVSYW5nZSgpO1xuICB2YXIgJFJlZmVyZW5jZUVycm9yID0gcmVxdWlyZVJlZigpO1xuICB2YXIgJFN5bnRheEVycm9yID0gcmVxdWlyZVN5bnRheCgpO1xuICB2YXIgJFR5cGVFcnJvciA9IHJlcXVpcmVUeXBlKCk7XG4gIHZhciAkVVJJRXJyb3IgPSByZXF1aXJlVXJpKCk7XG4gIHZhciAkRnVuY3Rpb24gPSBGdW5jdGlvbjtcbiAgdmFyIGdldEV2YWxsZWRDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKGV4cHJlc3Npb25TeW50YXgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuICRGdW5jdGlvbignXCJ1c2Ugc3RyaWN0XCI7IHJldHVybiAoJyArIGV4cHJlc3Npb25TeW50YXggKyBcIikuY29uc3RydWN0b3I7XCIpKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgIH1cbiAgfTtcbiAgdmFyICRnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgaWYgKCRnT1BEKSB7XG4gICAgdHJ5IHtcbiAgICAgICRnT1BEKHt9LCBcIlwiKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAkZ09QRCA9IG51bGw7XG4gICAgfVxuICB9XG4gIHZhciB0aHJvd1R5cGVFcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgIHRocm93IG5ldyAkVHlwZUVycm9yKCk7XG4gIH07XG4gIHZhciBUaHJvd1R5cGVFcnJvciA9ICRnT1BEID8gZnVuY3Rpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgIGFyZ3VtZW50cy5jYWxsZWU7XG4gICAgICByZXR1cm4gdGhyb3dUeXBlRXJyb3I7XG4gICAgfSBjYXRjaCAoY2FsbGVlVGhyb3dzKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gJGdPUEQoYXJndW1lbnRzLCBcImNhbGxlZVwiKS5nZXQ7XG4gICAgICB9IGNhdGNoIChnT1BEdGhyb3dzKSB7XG4gICAgICAgIHJldHVybiB0aHJvd1R5cGVFcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH0oKSA6IHRocm93VHlwZUVycm9yO1xuICB2YXIgaGFzU3ltYm9sczIgPSByZXF1aXJlSGFzU3ltYm9scygpKCk7XG4gIHZhciBoYXNQcm90bzIgPSByZXF1aXJlSGFzUHJvdG8oKSgpO1xuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgKGhhc1Byb3RvMiA/IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4geC5fX3Byb3RvX187XG4gIH0gOiBudWxsKTtcbiAgdmFyIG5lZWRzRXZhbCA9IHt9O1xuICB2YXIgVHlwZWRBcnJheSA9IHR5cGVvZiBVaW50OEFycmF5ID09PSBcInVuZGVmaW5lZFwiIHx8ICFnZXRQcm90byA/IHVuZGVmaW5lZCQxIDogZ2V0UHJvdG8oVWludDhBcnJheSk7XG4gIHZhciBJTlRSSU5TSUNTID0ge1xuICAgIF9fcHJvdG9fXzogbnVsbCxcbiAgICBcIiVBZ2dyZWdhdGVFcnJvciVcIjogdHlwZW9mIEFnZ3JlZ2F0ZUVycm9yID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkJDEgOiBBZ2dyZWdhdGVFcnJvcixcbiAgICBcIiVBcnJheSVcIjogQXJyYXksXG4gICAgXCIlQXJyYXlCdWZmZXIlXCI6IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gXCJ1bmRlZmluZWRcIiA/IHVuZGVmaW5lZCQxIDogQXJyYXlCdWZmZXIsXG4gICAgXCIlQXJyYXlJdGVyYXRvclByb3RvdHlwZSVcIjogaGFzU3ltYm9sczIgJiYgZ2V0UHJvdG8gPyBnZXRQcm90byhbXVtTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkJDEsXG4gICAgXCIlQXN5bmNGcm9tU3luY0l0ZXJhdG9yUHJvdG90eXBlJVwiOiB1bmRlZmluZWQkMSxcbiAgICBcIiVBc3luY0Z1bmN0aW9uJVwiOiBuZWVkc0V2YWwsXG4gICAgXCIlQXN5bmNHZW5lcmF0b3IlXCI6IG5lZWRzRXZhbCxcbiAgICBcIiVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJVwiOiBuZWVkc0V2YWwsXG4gICAgXCIlQXN5bmNJdGVyYXRvclByb3RvdHlwZSVcIjogbmVlZHNFdmFsLFxuICAgIFwiJUF0b21pY3MlXCI6IHR5cGVvZiBBdG9taWNzID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkJDEgOiBBdG9taWNzLFxuICAgIFwiJUJpZ0ludCVcIjogdHlwZW9mIEJpZ0ludCA9PT0gXCJ1bmRlZmluZWRcIiA/IHVuZGVmaW5lZCQxIDogQmlnSW50LFxuICAgIFwiJUJpZ0ludDY0QXJyYXklXCI6IHR5cGVvZiBCaWdJbnQ2NEFycmF5ID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkJDEgOiBCaWdJbnQ2NEFycmF5LFxuICAgIFwiJUJpZ1VpbnQ2NEFycmF5JVwiOiB0eXBlb2YgQmlnVWludDY0QXJyYXkgPT09IFwidW5kZWZpbmVkXCIgPyB1bmRlZmluZWQkMSA6IEJpZ1VpbnQ2NEFycmF5LFxuICAgIFwiJUJvb2xlYW4lXCI6IEJvb2xlYW4sXG4gICAgXCIlRGF0YVZpZXclXCI6IHR5cGVvZiBEYXRhVmlldyA9PT0gXCJ1bmRlZmluZWRcIiA/IHVuZGVmaW5lZCQxIDogRGF0YVZpZXcsXG4gICAgXCIlRGF0ZSVcIjogRGF0ZSxcbiAgICBcIiVkZWNvZGVVUkklXCI6IGRlY29kZVVSSSxcbiAgICBcIiVkZWNvZGVVUklDb21wb25lbnQlXCI6IGRlY29kZVVSSUNvbXBvbmVudCxcbiAgICBcIiVlbmNvZGVVUkklXCI6IGVuY29kZVVSSSxcbiAgICBcIiVlbmNvZGVVUklDb21wb25lbnQlXCI6IGVuY29kZVVSSUNvbXBvbmVudCxcbiAgICBcIiVFcnJvciVcIjogJEVycm9yLFxuICAgIFwiJWV2YWwlXCI6IGV2YWwsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1ldmFsXG4gICAgXCIlRXZhbEVycm9yJVwiOiAkRXZhbEVycm9yLFxuICAgIFwiJUZsb2F0MzJBcnJheSVcIjogdHlwZW9mIEZsb2F0MzJBcnJheSA9PT0gXCJ1bmRlZmluZWRcIiA/IHVuZGVmaW5lZCQxIDogRmxvYXQzMkFycmF5LFxuICAgIFwiJUZsb2F0NjRBcnJheSVcIjogdHlwZW9mIEZsb2F0NjRBcnJheSA9PT0gXCJ1bmRlZmluZWRcIiA/IHVuZGVmaW5lZCQxIDogRmxvYXQ2NEFycmF5LFxuICAgIFwiJUZpbmFsaXphdGlvblJlZ2lzdHJ5JVwiOiB0eXBlb2YgRmluYWxpemF0aW9uUmVnaXN0cnkgPT09IFwidW5kZWZpbmVkXCIgPyB1bmRlZmluZWQkMSA6IEZpbmFsaXphdGlvblJlZ2lzdHJ5LFxuICAgIFwiJUZ1bmN0aW9uJVwiOiAkRnVuY3Rpb24sXG4gICAgXCIlR2VuZXJhdG9yRnVuY3Rpb24lXCI6IG5lZWRzRXZhbCxcbiAgICBcIiVJbnQ4QXJyYXklXCI6IHR5cGVvZiBJbnQ4QXJyYXkgPT09IFwidW5kZWZpbmVkXCIgPyB1bmRlZmluZWQkMSA6IEludDhBcnJheSxcbiAgICBcIiVJbnQxNkFycmF5JVwiOiB0eXBlb2YgSW50MTZBcnJheSA9PT0gXCJ1bmRlZmluZWRcIiA/IHVuZGVmaW5lZCQxIDogSW50MTZBcnJheSxcbiAgICBcIiVJbnQzMkFycmF5JVwiOiB0eXBlb2YgSW50MzJBcnJheSA9PT0gXCJ1bmRlZmluZWRcIiA/IHVuZGVmaW5lZCQxIDogSW50MzJBcnJheSxcbiAgICBcIiVpc0Zpbml0ZSVcIjogaXNGaW5pdGUsXG4gICAgXCIlaXNOYU4lXCI6IGlzTmFOLFxuICAgIFwiJUl0ZXJhdG9yUHJvdG90eXBlJVwiOiBoYXNTeW1ib2xzMiAmJiBnZXRQcm90byA/IGdldFByb3RvKGdldFByb3RvKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSkpIDogdW5kZWZpbmVkJDEsXG4gICAgXCIlSlNPTiVcIjogdHlwZW9mIEpTT04gPT09IFwib2JqZWN0XCIgPyBKU09OIDogdW5kZWZpbmVkJDEsXG4gICAgXCIlTWFwJVwiOiB0eXBlb2YgTWFwID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkJDEgOiBNYXAsXG4gICAgXCIlTWFwSXRlcmF0b3JQcm90b3R5cGUlXCI6IHR5cGVvZiBNYXAgPT09IFwidW5kZWZpbmVkXCIgfHwgIWhhc1N5bWJvbHMyIHx8ICFnZXRQcm90byA/IHVuZGVmaW5lZCQxIDogZ2V0UHJvdG8oKC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCkpW1N5bWJvbC5pdGVyYXRvcl0oKSksXG4gICAgXCIlTWF0aCVcIjogTWF0aCxcbiAgICBcIiVOdW1iZXIlXCI6IE51bWJlcixcbiAgICBcIiVPYmplY3QlXCI6IE9iamVjdCxcbiAgICBcIiVwYXJzZUZsb2F0JVwiOiBwYXJzZUZsb2F0LFxuICAgIFwiJXBhcnNlSW50JVwiOiBwYXJzZUludCxcbiAgICBcIiVQcm9taXNlJVwiOiB0eXBlb2YgUHJvbWlzZSA9PT0gXCJ1bmRlZmluZWRcIiA/IHVuZGVmaW5lZCQxIDogUHJvbWlzZSxcbiAgICBcIiVQcm94eSVcIjogdHlwZW9mIFByb3h5ID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkJDEgOiBQcm94eSxcbiAgICBcIiVSYW5nZUVycm9yJVwiOiAkUmFuZ2VFcnJvcixcbiAgICBcIiVSZWZlcmVuY2VFcnJvciVcIjogJFJlZmVyZW5jZUVycm9yLFxuICAgIFwiJVJlZmxlY3QlXCI6IHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkJDEgOiBSZWZsZWN0LFxuICAgIFwiJVJlZ0V4cCVcIjogUmVnRXhwLFxuICAgIFwiJVNldCVcIjogdHlwZW9mIFNldCA9PT0gXCJ1bmRlZmluZWRcIiA/IHVuZGVmaW5lZCQxIDogU2V0LFxuICAgIFwiJVNldEl0ZXJhdG9yUHJvdG90eXBlJVwiOiB0eXBlb2YgU2V0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFoYXNTeW1ib2xzMiB8fCAhZ2V0UHJvdG8gPyB1bmRlZmluZWQkMSA6IGdldFByb3RvKCgvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpKVtTeW1ib2wuaXRlcmF0b3JdKCkpLFxuICAgIFwiJVNoYXJlZEFycmF5QnVmZmVyJVwiOiB0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgPT09IFwidW5kZWZpbmVkXCIgPyB1bmRlZmluZWQkMSA6IFNoYXJlZEFycmF5QnVmZmVyLFxuICAgIFwiJVN0cmluZyVcIjogU3RyaW5nLFxuICAgIFwiJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJVwiOiBoYXNTeW1ib2xzMiAmJiBnZXRQcm90byA/IGdldFByb3RvKFwiXCJbU3ltYm9sLml0ZXJhdG9yXSgpKSA6IHVuZGVmaW5lZCQxLFxuICAgIFwiJVN5bWJvbCVcIjogaGFzU3ltYm9sczIgPyBTeW1ib2wgOiB1bmRlZmluZWQkMSxcbiAgICBcIiVTeW50YXhFcnJvciVcIjogJFN5bnRheEVycm9yLFxuICAgIFwiJVRocm93VHlwZUVycm9yJVwiOiBUaHJvd1R5cGVFcnJvcixcbiAgICBcIiVUeXBlZEFycmF5JVwiOiBUeXBlZEFycmF5LFxuICAgIFwiJVR5cGVFcnJvciVcIjogJFR5cGVFcnJvcixcbiAgICBcIiVVaW50OEFycmF5JVwiOiB0eXBlb2YgVWludDhBcnJheSA9PT0gXCJ1bmRlZmluZWRcIiA/IHVuZGVmaW5lZCQxIDogVWludDhBcnJheSxcbiAgICBcIiVVaW50OENsYW1wZWRBcnJheSVcIjogdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkJDEgOiBVaW50OENsYW1wZWRBcnJheSxcbiAgICBcIiVVaW50MTZBcnJheSVcIjogdHlwZW9mIFVpbnQxNkFycmF5ID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkJDEgOiBVaW50MTZBcnJheSxcbiAgICBcIiVVaW50MzJBcnJheSVcIjogdHlwZW9mIFVpbnQzMkFycmF5ID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkJDEgOiBVaW50MzJBcnJheSxcbiAgICBcIiVVUklFcnJvciVcIjogJFVSSUVycm9yLFxuICAgIFwiJVdlYWtNYXAlXCI6IHR5cGVvZiBXZWFrTWFwID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkJDEgOiBXZWFrTWFwLFxuICAgIFwiJVdlYWtSZWYlXCI6IHR5cGVvZiBXZWFrUmVmID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkJDEgOiBXZWFrUmVmLFxuICAgIFwiJVdlYWtTZXQlXCI6IHR5cGVvZiBXZWFrU2V0ID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkJDEgOiBXZWFrU2V0XG4gIH07XG4gIGlmIChnZXRQcm90bykge1xuICAgIHRyeSB7XG4gICAgICBudWxsLmVycm9yO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHZhciBlcnJvclByb3RvID0gZ2V0UHJvdG8oZ2V0UHJvdG8oZSkpO1xuICAgICAgSU5UUklOU0lDU1tcIiVFcnJvci5wcm90b3R5cGUlXCJdID0gZXJyb3JQcm90bztcbiAgICB9XG4gIH1cbiAgdmFyIGRvRXZhbCA9IGZ1bmN0aW9uIGRvRXZhbDIobmFtZSkge1xuICAgIHZhciB2YWx1ZTtcbiAgICBpZiAobmFtZSA9PT0gXCIlQXN5bmNGdW5jdGlvbiVcIikge1xuICAgICAgdmFsdWUgPSBnZXRFdmFsbGVkQ29uc3RydWN0b3IoXCJhc3luYyBmdW5jdGlvbiAoKSB7fVwiKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09IFwiJUdlbmVyYXRvckZ1bmN0aW9uJVwiKSB7XG4gICAgICB2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcihcImZ1bmN0aW9uKiAoKSB7fVwiKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09IFwiJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lXCIpIHtcbiAgICAgIHZhbHVlID0gZ2V0RXZhbGxlZENvbnN0cnVjdG9yKFwiYXN5bmMgZnVuY3Rpb24qICgpIHt9XCIpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gXCIlQXN5bmNHZW5lcmF0b3IlXCIpIHtcbiAgICAgIHZhciBmbiA9IGRvRXZhbDIoXCIlQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiVcIik7XG4gICAgICBpZiAoZm4pIHtcbiAgICAgICAgdmFsdWUgPSBmbi5wcm90b3R5cGU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSBcIiVBc3luY0l0ZXJhdG9yUHJvdG90eXBlJVwiKSB7XG4gICAgICB2YXIgZ2VuID0gZG9FdmFsMihcIiVBc3luY0dlbmVyYXRvciVcIik7XG4gICAgICBpZiAoZ2VuICYmIGdldFByb3RvKSB7XG4gICAgICAgIHZhbHVlID0gZ2V0UHJvdG8oZ2VuLnByb3RvdHlwZSk7XG4gICAgICB9XG4gICAgfVxuICAgIElOVFJJTlNJQ1NbbmFtZV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG4gIHZhciBMRUdBQ1lfQUxJQVNFUyA9IHtcbiAgICBfX3Byb3RvX186IG51bGwsXG4gICAgXCIlQXJyYXlCdWZmZXJQcm90b3R5cGUlXCI6IFtcIkFycmF5QnVmZmVyXCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJUFycmF5UHJvdG90eXBlJVwiOiBbXCJBcnJheVwiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVBcnJheVByb3RvX2VudHJpZXMlXCI6IFtcIkFycmF5XCIsIFwicHJvdG90eXBlXCIsIFwiZW50cmllc1wiXSxcbiAgICBcIiVBcnJheVByb3RvX2ZvckVhY2glXCI6IFtcIkFycmF5XCIsIFwicHJvdG90eXBlXCIsIFwiZm9yRWFjaFwiXSxcbiAgICBcIiVBcnJheVByb3RvX2tleXMlXCI6IFtcIkFycmF5XCIsIFwicHJvdG90eXBlXCIsIFwia2V5c1wiXSxcbiAgICBcIiVBcnJheVByb3RvX3ZhbHVlcyVcIjogW1wiQXJyYXlcIiwgXCJwcm90b3R5cGVcIiwgXCJ2YWx1ZXNcIl0sXG4gICAgXCIlQXN5bmNGdW5jdGlvblByb3RvdHlwZSVcIjogW1wiQXN5bmNGdW5jdGlvblwiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVBc3luY0dlbmVyYXRvciVcIjogW1wiQXN5bmNHZW5lcmF0b3JGdW5jdGlvblwiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVBc3luY0dlbmVyYXRvclByb3RvdHlwZSVcIjogW1wiQXN5bmNHZW5lcmF0b3JGdW5jdGlvblwiLCBcInByb3RvdHlwZVwiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVCb29sZWFuUHJvdG90eXBlJVwiOiBbXCJCb29sZWFuXCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJURhdGFWaWV3UHJvdG90eXBlJVwiOiBbXCJEYXRhVmlld1wiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVEYXRlUHJvdG90eXBlJVwiOiBbXCJEYXRlXCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJUVycm9yUHJvdG90eXBlJVwiOiBbXCJFcnJvclwiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVFdmFsRXJyb3JQcm90b3R5cGUlXCI6IFtcIkV2YWxFcnJvclwiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVGbG9hdDMyQXJyYXlQcm90b3R5cGUlXCI6IFtcIkZsb2F0MzJBcnJheVwiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVGbG9hdDY0QXJyYXlQcm90b3R5cGUlXCI6IFtcIkZsb2F0NjRBcnJheVwiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVGdW5jdGlvblByb3RvdHlwZSVcIjogW1wiRnVuY3Rpb25cIiwgXCJwcm90b3R5cGVcIl0sXG4gICAgXCIlR2VuZXJhdG9yJVwiOiBbXCJHZW5lcmF0b3JGdW5jdGlvblwiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVHZW5lcmF0b3JQcm90b3R5cGUlXCI6IFtcIkdlbmVyYXRvckZ1bmN0aW9uXCIsIFwicHJvdG90eXBlXCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJUludDhBcnJheVByb3RvdHlwZSVcIjogW1wiSW50OEFycmF5XCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJUludDE2QXJyYXlQcm90b3R5cGUlXCI6IFtcIkludDE2QXJyYXlcIiwgXCJwcm90b3R5cGVcIl0sXG4gICAgXCIlSW50MzJBcnJheVByb3RvdHlwZSVcIjogW1wiSW50MzJBcnJheVwiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVKU09OUGFyc2UlXCI6IFtcIkpTT05cIiwgXCJwYXJzZVwiXSxcbiAgICBcIiVKU09OU3RyaW5naWZ5JVwiOiBbXCJKU09OXCIsIFwic3RyaW5naWZ5XCJdLFxuICAgIFwiJU1hcFByb3RvdHlwZSVcIjogW1wiTWFwXCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJU51bWJlclByb3RvdHlwZSVcIjogW1wiTnVtYmVyXCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJU9iamVjdFByb3RvdHlwZSVcIjogW1wiT2JqZWN0XCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJU9ialByb3RvX3RvU3RyaW5nJVwiOiBbXCJPYmplY3RcIiwgXCJwcm90b3R5cGVcIiwgXCJ0b1N0cmluZ1wiXSxcbiAgICBcIiVPYmpQcm90b192YWx1ZU9mJVwiOiBbXCJPYmplY3RcIiwgXCJwcm90b3R5cGVcIiwgXCJ2YWx1ZU9mXCJdLFxuICAgIFwiJVByb21pc2VQcm90b3R5cGUlXCI6IFtcIlByb21pc2VcIiwgXCJwcm90b3R5cGVcIl0sXG4gICAgXCIlUHJvbWlzZVByb3RvX3RoZW4lXCI6IFtcIlByb21pc2VcIiwgXCJwcm90b3R5cGVcIiwgXCJ0aGVuXCJdLFxuICAgIFwiJVByb21pc2VfYWxsJVwiOiBbXCJQcm9taXNlXCIsIFwiYWxsXCJdLFxuICAgIFwiJVByb21pc2VfcmVqZWN0JVwiOiBbXCJQcm9taXNlXCIsIFwicmVqZWN0XCJdLFxuICAgIFwiJVByb21pc2VfcmVzb2x2ZSVcIjogW1wiUHJvbWlzZVwiLCBcInJlc29sdmVcIl0sXG4gICAgXCIlUmFuZ2VFcnJvclByb3RvdHlwZSVcIjogW1wiUmFuZ2VFcnJvclwiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVSZWZlcmVuY2VFcnJvclByb3RvdHlwZSVcIjogW1wiUmVmZXJlbmNlRXJyb3JcIiwgXCJwcm90b3R5cGVcIl0sXG4gICAgXCIlUmVnRXhwUHJvdG90eXBlJVwiOiBbXCJSZWdFeHBcIiwgXCJwcm90b3R5cGVcIl0sXG4gICAgXCIlU2V0UHJvdG90eXBlJVwiOiBbXCJTZXRcIiwgXCJwcm90b3R5cGVcIl0sXG4gICAgXCIlU2hhcmVkQXJyYXlCdWZmZXJQcm90b3R5cGUlXCI6IFtcIlNoYXJlZEFycmF5QnVmZmVyXCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJVN0cmluZ1Byb3RvdHlwZSVcIjogW1wiU3RyaW5nXCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJVN5bWJvbFByb3RvdHlwZSVcIjogW1wiU3ltYm9sXCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJVN5bnRheEVycm9yUHJvdG90eXBlJVwiOiBbXCJTeW50YXhFcnJvclwiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVUeXBlZEFycmF5UHJvdG90eXBlJVwiOiBbXCJUeXBlZEFycmF5XCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJVR5cGVFcnJvclByb3RvdHlwZSVcIjogW1wiVHlwZUVycm9yXCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJVVpbnQ4QXJyYXlQcm90b3R5cGUlXCI6IFtcIlVpbnQ4QXJyYXlcIiwgXCJwcm90b3R5cGVcIl0sXG4gICAgXCIlVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUlXCI6IFtcIlVpbnQ4Q2xhbXBlZEFycmF5XCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJVVpbnQxNkFycmF5UHJvdG90eXBlJVwiOiBbXCJVaW50MTZBcnJheVwiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVVaW50MzJBcnJheVByb3RvdHlwZSVcIjogW1wiVWludDMyQXJyYXlcIiwgXCJwcm90b3R5cGVcIl0sXG4gICAgXCIlVVJJRXJyb3JQcm90b3R5cGUlXCI6IFtcIlVSSUVycm9yXCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJVdlYWtNYXBQcm90b3R5cGUlXCI6IFtcIldlYWtNYXBcIiwgXCJwcm90b3R5cGVcIl0sXG4gICAgXCIlV2Vha1NldFByb3RvdHlwZSVcIjogW1wiV2Vha1NldFwiLCBcInByb3RvdHlwZVwiXVxuICB9O1xuICB2YXIgYmluZCA9IHJlcXVpcmVGdW5jdGlvbkJpbmQoKTtcbiAgdmFyIGhhc093biA9IHJlcXVpcmVIYXNvd24oKTtcbiAgdmFyICRjb25jYXQgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgQXJyYXkucHJvdG90eXBlLmNvbmNhdCk7XG4gIHZhciAkc3BsaWNlQXBwbHkgPSBiaW5kLmNhbGwoRnVuY3Rpb24uYXBwbHksIEFycmF5LnByb3RvdHlwZS5zcGxpY2UpO1xuICB2YXIgJHJlcGxhY2UgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKTtcbiAgdmFyICRzdHJTbGljZSA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBTdHJpbmcucHJvdG90eXBlLnNsaWNlKTtcbiAgdmFyICRleGVjID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFJlZ0V4cC5wcm90b3R5cGUuZXhlYyk7XG4gIHZhciByZVByb3BOYW1lID0gL1teJS5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwlJCkpL2c7XG4gIHZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcbiAgdmFyIHN0cmluZ1RvUGF0aCA9IGZ1bmN0aW9uIHN0cmluZ1RvUGF0aDIoc3RyaW5nKSB7XG4gICAgdmFyIGZpcnN0ID0gJHN0clNsaWNlKHN0cmluZywgMCwgMSk7XG4gICAgdmFyIGxhc3QgPSAkc3RyU2xpY2Uoc3RyaW5nLCAtMSk7XG4gICAgaWYgKGZpcnN0ID09PSBcIiVcIiAmJiBsYXN0ICE9PSBcIiVcIikge1xuICAgICAgdGhyb3cgbmV3ICRTeW50YXhFcnJvcihcImludmFsaWQgaW50cmluc2ljIHN5bnRheCwgZXhwZWN0ZWQgY2xvc2luZyBgJWBcIik7XG4gICAgfSBlbHNlIGlmIChsYXN0ID09PSBcIiVcIiAmJiBmaXJzdCAhPT0gXCIlXCIpIHtcbiAgICAgIHRocm93IG5ldyAkU3ludGF4RXJyb3IoXCJpbnZhbGlkIGludHJpbnNpYyBzeW50YXgsIGV4cGVjdGVkIG9wZW5pbmcgYCVgXCIpO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgJHJlcGxhY2Uoc3RyaW5nLCByZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSBxdW90ZSA/ICRyZXBsYWNlKHN1YlN0cmluZywgcmVFc2NhcGVDaGFyLCBcIiQxXCIpIDogbnVtYmVyIHx8IG1hdGNoO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHZhciBnZXRCYXNlSW50cmluc2ljID0gZnVuY3Rpb24gZ2V0QmFzZUludHJpbnNpYzIobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG4gICAgdmFyIGludHJpbnNpY05hbWUgPSBuYW1lO1xuICAgIHZhciBhbGlhcztcbiAgICBpZiAoaGFzT3duKExFR0FDWV9BTElBU0VTLCBpbnRyaW5zaWNOYW1lKSkge1xuICAgICAgYWxpYXMgPSBMRUdBQ1lfQUxJQVNFU1tpbnRyaW5zaWNOYW1lXTtcbiAgICAgIGludHJpbnNpY05hbWUgPSBcIiVcIiArIGFsaWFzWzBdICsgXCIlXCI7XG4gICAgfVxuICAgIGlmIChoYXNPd24oSU5UUklOU0lDUywgaW50cmluc2ljTmFtZSkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IElOVFJJTlNJQ1NbaW50cmluc2ljTmFtZV07XG4gICAgICBpZiAodmFsdWUgPT09IG5lZWRzRXZhbCkge1xuICAgICAgICB2YWx1ZSA9IGRvRXZhbChpbnRyaW5zaWNOYW1lKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIgJiYgIWFsbG93TWlzc2luZykge1xuICAgICAgICB0aHJvdyBuZXcgJFR5cGVFcnJvcihcImludHJpbnNpYyBcIiArIG5hbWUgKyBcIiBleGlzdHMsIGJ1dCBpcyBub3QgYXZhaWxhYmxlLiBQbGVhc2UgZmlsZSBhbiBpc3N1ZSFcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhbGlhcyxcbiAgICAgICAgbmFtZTogaW50cmluc2ljTmFtZSxcbiAgICAgICAgdmFsdWVcbiAgICAgIH07XG4gICAgfVxuICAgIHRocm93IG5ldyAkU3ludGF4RXJyb3IoXCJpbnRyaW5zaWMgXCIgKyBuYW1lICsgXCIgZG9lcyBub3QgZXhpc3QhXCIpO1xuICB9O1xuICBnZXRJbnRyaW5zaWMgPSBmdW5jdGlvbiBHZXRJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSBcInN0cmluZ1wiIHx8IG5hbWUubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgJFR5cGVFcnJvcihcImludHJpbnNpYyBuYW1lIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nXCIpO1xuICAgIH1cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIGFsbG93TWlzc2luZyAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgIHRocm93IG5ldyAkVHlwZUVycm9yKCdcImFsbG93TWlzc2luZ1wiIGFyZ3VtZW50IG11c3QgYmUgYSBib29sZWFuJyk7XG4gICAgfVxuICAgIGlmICgkZXhlYygvXiU/W14lXSolPyQvLCBuYW1lKSA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3ICRTeW50YXhFcnJvcihcImAlYCBtYXkgbm90IGJlIHByZXNlbnQgYW55d2hlcmUgYnV0IGF0IHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiB0aGUgaW50cmluc2ljIG5hbWVcIik7XG4gICAgfVxuICAgIHZhciBwYXJ0cyA9IHN0cmluZ1RvUGF0aChuYW1lKTtcbiAgICB2YXIgaW50cmluc2ljQmFzZU5hbWUgPSBwYXJ0cy5sZW5ndGggPiAwID8gcGFydHNbMF0gOiBcIlwiO1xuICAgIHZhciBpbnRyaW5zaWMgPSBnZXRCYXNlSW50cmluc2ljKFwiJVwiICsgaW50cmluc2ljQmFzZU5hbWUgKyBcIiVcIiwgYWxsb3dNaXNzaW5nKTtcbiAgICB2YXIgaW50cmluc2ljUmVhbE5hbWUgPSBpbnRyaW5zaWMubmFtZTtcbiAgICB2YXIgdmFsdWUgPSBpbnRyaW5zaWMudmFsdWU7XG4gICAgdmFyIHNraXBGdXJ0aGVyQ2FjaGluZyA9IGZhbHNlO1xuICAgIHZhciBhbGlhcyA9IGludHJpbnNpYy5hbGlhcztcbiAgICBpZiAoYWxpYXMpIHtcbiAgICAgIGludHJpbnNpY0Jhc2VOYW1lID0gYWxpYXNbMF07XG4gICAgICAkc3BsaWNlQXBwbHkocGFydHMsICRjb25jYXQoWzAsIDFdLCBhbGlhcykpO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMSwgaXNPd24gPSB0cnVlOyBpIDwgcGFydHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhciBwYXJ0ID0gcGFydHNbaV07XG4gICAgICB2YXIgZmlyc3QgPSAkc3RyU2xpY2UocGFydCwgMCwgMSk7XG4gICAgICB2YXIgbGFzdCA9ICRzdHJTbGljZShwYXJ0LCAtMSk7XG4gICAgICBpZiAoKGZpcnN0ID09PSAnXCInIHx8IGZpcnN0ID09PSBcIidcIiB8fCBmaXJzdCA9PT0gXCJgXCIgfHwgKGxhc3QgPT09ICdcIicgfHwgbGFzdCA9PT0gXCInXCIgfHwgbGFzdCA9PT0gXCJgXCIpKSAmJiBmaXJzdCAhPT0gbGFzdCkge1xuICAgICAgICB0aHJvdyBuZXcgJFN5bnRheEVycm9yKFwicHJvcGVydHkgbmFtZXMgd2l0aCBxdW90ZXMgbXVzdCBoYXZlIG1hdGNoaW5nIHF1b3Rlc1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJ0ID09PSBcImNvbnN0cnVjdG9yXCIgfHwgIWlzT3duKSB7XG4gICAgICAgIHNraXBGdXJ0aGVyQ2FjaGluZyA9IHRydWU7XG4gICAgICB9XG4gICAgICBpbnRyaW5zaWNCYXNlTmFtZSArPSBcIi5cIiArIHBhcnQ7XG4gICAgICBpbnRyaW5zaWNSZWFsTmFtZSA9IFwiJVwiICsgaW50cmluc2ljQmFzZU5hbWUgKyBcIiVcIjtcbiAgICAgIGlmIChoYXNPd24oSU5UUklOU0lDUywgaW50cmluc2ljUmVhbE5hbWUpKSB7XG4gICAgICAgIHZhbHVlID0gSU5UUklOU0lDU1tpbnRyaW5zaWNSZWFsTmFtZV07XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgaWYgKCEocGFydCBpbiB2YWx1ZSkpIHtcbiAgICAgICAgICBpZiAoIWFsbG93TWlzc2luZykge1xuICAgICAgICAgICAgdGhyb3cgbmV3ICRUeXBlRXJyb3IoXCJiYXNlIGludHJpbnNpYyBmb3IgXCIgKyBuYW1lICsgXCIgZXhpc3RzLCBidXQgdGhlIHByb3BlcnR5IGlzIG5vdCBhdmFpbGFibGUuXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkZ09QRCAmJiBpICsgMSA+PSBwYXJ0cy5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgZGVzYyA9ICRnT1BEKHZhbHVlLCBwYXJ0KTtcbiAgICAgICAgICBpc093biA9ICEhZGVzYztcbiAgICAgICAgICBpZiAoaXNPd24gJiYgXCJnZXRcIiBpbiBkZXNjICYmICEoXCJvcmlnaW5hbFZhbHVlXCIgaW4gZGVzYy5nZXQpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGRlc2MuZ2V0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlW3BhcnRdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpc093biA9IGhhc093bih2YWx1ZSwgcGFydCk7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZVtwYXJ0XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNPd24gJiYgIXNraXBGdXJ0aGVyQ2FjaGluZykge1xuICAgICAgICAgIElOVFJJTlNJQ1NbaW50cmluc2ljUmVhbE5hbWVdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuICByZXR1cm4gZ2V0SW50cmluc2ljO1xufVxudmFyIGNhbGxCaW5kID0geyBleHBvcnRzOiB7fSB9O1xudmFyIGVzRGVmaW5lUHJvcGVydHk7XG52YXIgaGFzUmVxdWlyZWRFc0RlZmluZVByb3BlcnR5O1xuZnVuY3Rpb24gcmVxdWlyZUVzRGVmaW5lUHJvcGVydHkoKSB7XG4gIGlmIChoYXNSZXF1aXJlZEVzRGVmaW5lUHJvcGVydHkpIHJldHVybiBlc0RlZmluZVByb3BlcnR5O1xuICBoYXNSZXF1aXJlZEVzRGVmaW5lUHJvcGVydHkgPSAxO1xuICB2YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZUdldEludHJpbnNpYygpO1xuICB2YXIgJGRlZmluZVByb3BlcnR5ID0gR2V0SW50cmluc2ljKFwiJU9iamVjdC5kZWZpbmVQcm9wZXJ0eSVcIiwgdHJ1ZSkgfHwgZmFsc2U7XG4gIGlmICgkZGVmaW5lUHJvcGVydHkpIHtcbiAgICB0cnkge1xuICAgICAgJGRlZmluZVByb3BlcnR5KHt9LCBcImFcIiwgeyB2YWx1ZTogMSB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAkZGVmaW5lUHJvcGVydHkgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgZXNEZWZpbmVQcm9wZXJ0eSA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmV0dXJuIGVzRGVmaW5lUHJvcGVydHk7XG59XG52YXIgZ29wZDtcbnZhciBoYXNSZXF1aXJlZEdvcGQ7XG5mdW5jdGlvbiByZXF1aXJlR29wZCgpIHtcbiAgaWYgKGhhc1JlcXVpcmVkR29wZCkgcmV0dXJuIGdvcGQ7XG4gIGhhc1JlcXVpcmVkR29wZCA9IDE7XG4gIHZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlR2V0SW50cmluc2ljKCk7XG4gIHZhciAkZ09QRCA9IEdldEludHJpbnNpYyhcIiVPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJVwiLCB0cnVlKTtcbiAgaWYgKCRnT1BEKSB7XG4gICAgdHJ5IHtcbiAgICAgICRnT1BEKFtdLCBcImxlbmd0aFwiKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAkZ09QRCA9IG51bGw7XG4gICAgfVxuICB9XG4gIGdvcGQgPSAkZ09QRDtcbiAgcmV0dXJuIGdvcGQ7XG59XG52YXIgZGVmaW5lRGF0YVByb3BlcnR5O1xudmFyIGhhc1JlcXVpcmVkRGVmaW5lRGF0YVByb3BlcnR5O1xuZnVuY3Rpb24gcmVxdWlyZURlZmluZURhdGFQcm9wZXJ0eSgpIHtcbiAgaWYgKGhhc1JlcXVpcmVkRGVmaW5lRGF0YVByb3BlcnR5KSByZXR1cm4gZGVmaW5lRGF0YVByb3BlcnR5O1xuICBoYXNSZXF1aXJlZERlZmluZURhdGFQcm9wZXJ0eSA9IDE7XG4gIHZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlRXNEZWZpbmVQcm9wZXJ0eSgpO1xuICB2YXIgJFN5bnRheEVycm9yID0gcmVxdWlyZVN5bnRheCgpO1xuICB2YXIgJFR5cGVFcnJvciA9IHJlcXVpcmVUeXBlKCk7XG4gIHZhciBnb3BkMiA9IHJlcXVpcmVHb3BkKCk7XG4gIGRlZmluZURhdGFQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZURhdGFQcm9wZXJ0eTIob2JqLCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhyb3cgbmV3ICRUeXBlRXJyb3IoXCJgb2JqYCBtdXN0IGJlIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uYFwiKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSAhPT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgcHJvcGVydHkgIT09IFwic3ltYm9sXCIpIHtcbiAgICAgIHRocm93IG5ldyAkVHlwZUVycm9yKFwiYHByb3BlcnR5YCBtdXN0IGJlIGEgc3RyaW5nIG9yIGEgc3ltYm9sYFwiKTtcbiAgICB9XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIHR5cGVvZiBhcmd1bWVudHNbM10gIT09IFwiYm9vbGVhblwiICYmIGFyZ3VtZW50c1szXSAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3ICRUeXBlRXJyb3IoXCJgbm9uRW51bWVyYWJsZWAsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGEgYm9vbGVhbiBvciBudWxsXCIpO1xuICAgIH1cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgdHlwZW9mIGFyZ3VtZW50c1s0XSAhPT0gXCJib29sZWFuXCIgJiYgYXJndW1lbnRzWzRdICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgJFR5cGVFcnJvcihcImBub25Xcml0YWJsZWAsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGEgYm9vbGVhbiBvciBudWxsXCIpO1xuICAgIH1cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgdHlwZW9mIGFyZ3VtZW50c1s1XSAhPT0gXCJib29sZWFuXCIgJiYgYXJndW1lbnRzWzVdICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgJFR5cGVFcnJvcihcImBub25Db25maWd1cmFibGVgLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBhIGJvb2xlYW4gb3IgbnVsbFwiKTtcbiAgICB9XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiA2ICYmIHR5cGVvZiBhcmd1bWVudHNbNl0gIT09IFwiYm9vbGVhblwiKSB7XG4gICAgICB0aHJvdyBuZXcgJFR5cGVFcnJvcihcImBsb29zZWAsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGEgYm9vbGVhblwiKTtcbiAgICB9XG4gICAgdmFyIG5vbkVudW1lcmFibGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMyA/IGFyZ3VtZW50c1szXSA6IG51bGw7XG4gICAgdmFyIG5vbldyaXRhYmxlID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgPyBhcmd1bWVudHNbNF0gOiBudWxsO1xuICAgIHZhciBub25Db25maWd1cmFibGUgPSBhcmd1bWVudHMubGVuZ3RoID4gNSA/IGFyZ3VtZW50c1s1XSA6IG51bGw7XG4gICAgdmFyIGxvb3NlID0gYXJndW1lbnRzLmxlbmd0aCA+IDYgPyBhcmd1bWVudHNbNl0gOiBmYWxzZTtcbiAgICB2YXIgZGVzYyA9ICEhZ29wZDIgJiYgZ29wZDIob2JqLCBwcm9wZXJ0eSk7XG4gICAgaWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgJGRlZmluZVByb3BlcnR5KG9iaiwgcHJvcGVydHksIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBub25Db25maWd1cmFibGUgPT09IG51bGwgJiYgZGVzYyA/IGRlc2MuY29uZmlndXJhYmxlIDogIW5vbkNvbmZpZ3VyYWJsZSxcbiAgICAgICAgZW51bWVyYWJsZTogbm9uRW51bWVyYWJsZSA9PT0gbnVsbCAmJiBkZXNjID8gZGVzYy5lbnVtZXJhYmxlIDogIW5vbkVudW1lcmFibGUsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICB3cml0YWJsZTogbm9uV3JpdGFibGUgPT09IG51bGwgJiYgZGVzYyA/IGRlc2Mud3JpdGFibGUgOiAhbm9uV3JpdGFibGVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAobG9vc2UgfHwgIW5vbkVudW1lcmFibGUgJiYgIW5vbldyaXRhYmxlICYmICFub25Db25maWd1cmFibGUpIHtcbiAgICAgIG9ialtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3ICRTeW50YXhFcnJvcihcIlRoaXMgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCBkZWZpbmluZyBhIHByb3BlcnR5IGFzIG5vbi1jb25maWd1cmFibGUsIG5vbi13cml0YWJsZSwgb3Igbm9uLWVudW1lcmFibGUuXCIpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGRlZmluZURhdGFQcm9wZXJ0eTtcbn1cbnZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzXzE7XG52YXIgaGFzUmVxdWlyZWRIYXNQcm9wZXJ0eURlc2NyaXB0b3JzO1xuZnVuY3Rpb24gcmVxdWlyZUhhc1Byb3BlcnR5RGVzY3JpcHRvcnMoKSB7XG4gIGlmIChoYXNSZXF1aXJlZEhhc1Byb3BlcnR5RGVzY3JpcHRvcnMpIHJldHVybiBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzXzE7XG4gIGhhc1JlcXVpcmVkSGFzUHJvcGVydHlEZXNjcmlwdG9ycyA9IDE7XG4gIHZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlRXNEZWZpbmVQcm9wZXJ0eSgpO1xuICB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9ycyA9IGZ1bmN0aW9uIGhhc1Byb3BlcnR5RGVzY3JpcHRvcnMyKCkge1xuICAgIHJldHVybiAhISRkZWZpbmVQcm9wZXJ0eTtcbiAgfTtcbiAgaGFzUHJvcGVydHlEZXNjcmlwdG9ycy5oYXNBcnJheUxlbmd0aERlZmluZUJ1ZyA9IGZ1bmN0aW9uIGhhc0FycmF5TGVuZ3RoRGVmaW5lQnVnKCkge1xuICAgIGlmICghJGRlZmluZVByb3BlcnR5KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAkZGVmaW5lUHJvcGVydHkoW10sIFwibGVuZ3RoXCIsIHsgdmFsdWU6IDEgfSkubGVuZ3RoICE9PSAxO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfTtcbiAgaGFzUHJvcGVydHlEZXNjcmlwdG9yc18xID0gaGFzUHJvcGVydHlEZXNjcmlwdG9ycztcbiAgcmV0dXJuIGhhc1Byb3BlcnR5RGVzY3JpcHRvcnNfMTtcbn1cbnZhciBzZXRGdW5jdGlvbkxlbmd0aDtcbnZhciBoYXNSZXF1aXJlZFNldEZ1bmN0aW9uTGVuZ3RoO1xuZnVuY3Rpb24gcmVxdWlyZVNldEZ1bmN0aW9uTGVuZ3RoKCkge1xuICBpZiAoaGFzUmVxdWlyZWRTZXRGdW5jdGlvbkxlbmd0aCkgcmV0dXJuIHNldEZ1bmN0aW9uTGVuZ3RoO1xuICBoYXNSZXF1aXJlZFNldEZ1bmN0aW9uTGVuZ3RoID0gMTtcbiAgdmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmVHZXRJbnRyaW5zaWMoKTtcbiAgdmFyIGRlZmluZSA9IHJlcXVpcmVEZWZpbmVEYXRhUHJvcGVydHkoKTtcbiAgdmFyIGhhc0Rlc2NyaXB0b3JzID0gcmVxdWlyZUhhc1Byb3BlcnR5RGVzY3JpcHRvcnMoKSgpO1xuICB2YXIgZ09QRCA9IHJlcXVpcmVHb3BkKCk7XG4gIHZhciAkVHlwZUVycm9yID0gcmVxdWlyZVR5cGUoKTtcbiAgdmFyICRmbG9vciA9IEdldEludHJpbnNpYyhcIiVNYXRoLmZsb29yJVwiKTtcbiAgc2V0RnVuY3Rpb25MZW5ndGggPSBmdW5jdGlvbiBzZXRGdW5jdGlvbkxlbmd0aDIoZm4sIGxlbmd0aCkge1xuICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhyb3cgbmV3ICRUeXBlRXJyb3IoXCJgZm5gIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGxlbmd0aCAhPT0gXCJudW1iZXJcIiB8fCBsZW5ndGggPCAwIHx8IGxlbmd0aCA+IDQyOTQ5NjcyOTUgfHwgJGZsb29yKGxlbmd0aCkgIT09IGxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3ICRUeXBlRXJyb3IoXCJgbGVuZ3RoYCBtdXN0IGJlIGEgcG9zaXRpdmUgMzItYml0IGludGVnZXJcIik7XG4gICAgfVxuICAgIHZhciBsb29zZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmICEhYXJndW1lbnRzWzJdO1xuICAgIHZhciBmdW5jdGlvbkxlbmd0aElzQ29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICB2YXIgZnVuY3Rpb25MZW5ndGhJc1dyaXRhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJsZW5ndGhcIiBpbiBmbiAmJiBnT1BEKSB7XG4gICAgICB2YXIgZGVzYyA9IGdPUEQoZm4sIFwibGVuZ3RoXCIpO1xuICAgICAgaWYgKGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlKSB7XG4gICAgICAgIGZ1bmN0aW9uTGVuZ3RoSXNDb25maWd1cmFibGUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChkZXNjICYmICFkZXNjLndyaXRhYmxlKSB7XG4gICAgICAgIGZ1bmN0aW9uTGVuZ3RoSXNXcml0YWJsZSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZnVuY3Rpb25MZW5ndGhJc0NvbmZpZ3VyYWJsZSB8fCBmdW5jdGlvbkxlbmd0aElzV3JpdGFibGUgfHwgIWxvb3NlKSB7XG4gICAgICBpZiAoaGFzRGVzY3JpcHRvcnMpIHtcbiAgICAgICAgZGVmaW5lKFxuICAgICAgICAgIC8qKiBAdHlwZSB7UGFyYW1ldGVyczxkZWZpbmU+WzBdfSAqL1xuICAgICAgICAgIGZuLFxuICAgICAgICAgIFwibGVuZ3RoXCIsXG4gICAgICAgICAgbGVuZ3RoLFxuICAgICAgICAgIHRydWUsXG4gICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmaW5lKFxuICAgICAgICAgIC8qKiBAdHlwZSB7UGFyYW1ldGVyczxkZWZpbmU+WzBdfSAqL1xuICAgICAgICAgIGZuLFxuICAgICAgICAgIFwibGVuZ3RoXCIsXG4gICAgICAgICAgbGVuZ3RoXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmbjtcbiAgfTtcbiAgcmV0dXJuIHNldEZ1bmN0aW9uTGVuZ3RoO1xufVxudmFyIGhhc1JlcXVpcmVkQ2FsbEJpbmQ7XG5mdW5jdGlvbiByZXF1aXJlQ2FsbEJpbmQoKSB7XG4gIGlmIChoYXNSZXF1aXJlZENhbGxCaW5kKSByZXR1cm4gY2FsbEJpbmQuZXhwb3J0cztcbiAgaGFzUmVxdWlyZWRDYWxsQmluZCA9IDE7XG4gIChmdW5jdGlvbihtb2R1bGUpIHtcbiAgICB2YXIgYmluZCA9IHJlcXVpcmVGdW5jdGlvbkJpbmQoKTtcbiAgICB2YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZUdldEludHJpbnNpYygpO1xuICAgIHZhciBzZXRGdW5jdGlvbkxlbmd0aDIgPSByZXF1aXJlU2V0RnVuY3Rpb25MZW5ndGgoKTtcbiAgICB2YXIgJFR5cGVFcnJvciA9IHJlcXVpcmVUeXBlKCk7XG4gICAgdmFyICRhcHBseSA9IEdldEludHJpbnNpYyhcIiVGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHklXCIpO1xuICAgIHZhciAkY2FsbCA9IEdldEludHJpbnNpYyhcIiVGdW5jdGlvbi5wcm90b3R5cGUuY2FsbCVcIik7XG4gICAgdmFyICRyZWZsZWN0QXBwbHkgPSBHZXRJbnRyaW5zaWMoXCIlUmVmbGVjdC5hcHBseSVcIiwgdHJ1ZSkgfHwgYmluZC5jYWxsKCRjYWxsLCAkYXBwbHkpO1xuICAgIHZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlRXNEZWZpbmVQcm9wZXJ0eSgpO1xuICAgIHZhciAkbWF4ID0gR2V0SW50cmluc2ljKFwiJU1hdGgubWF4JVwiKTtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCaW5kMihvcmlnaW5hbEZ1bmN0aW9uKSB7XG4gICAgICBpZiAodHlwZW9mIG9yaWdpbmFsRnVuY3Rpb24gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgJFR5cGVFcnJvcihcImEgZnVuY3Rpb24gaXMgcmVxdWlyZWRcIik7XG4gICAgICB9XG4gICAgICB2YXIgZnVuYyA9ICRyZWZsZWN0QXBwbHkoYmluZCwgJGNhbGwsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gc2V0RnVuY3Rpb25MZW5ndGgyKFxuICAgICAgICBmdW5jLFxuICAgICAgICAxICsgJG1heCgwLCBvcmlnaW5hbEZ1bmN0aW9uLmxlbmd0aCAtIChhcmd1bWVudHMubGVuZ3RoIC0gMSkpLFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgIH07XG4gICAgdmFyIGFwcGx5QmluZCA9IGZ1bmN0aW9uIGFwcGx5QmluZDIoKSB7XG4gICAgICByZXR1cm4gJHJlZmxlY3RBcHBseShiaW5kLCAkYXBwbHksIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgICBpZiAoJGRlZmluZVByb3BlcnR5KSB7XG4gICAgICAkZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsIFwiYXBwbHlcIiwgeyB2YWx1ZTogYXBwbHlCaW5kIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBtb2R1bGUuZXhwb3J0cy5hcHBseSA9IGFwcGx5QmluZDtcbiAgICB9XG4gIH0pKGNhbGxCaW5kKTtcbiAgcmV0dXJuIGNhbGxCaW5kLmV4cG9ydHM7XG59XG52YXIgY2FsbEJvdW5kO1xudmFyIGhhc1JlcXVpcmVkQ2FsbEJvdW5kO1xuZnVuY3Rpb24gcmVxdWlyZUNhbGxCb3VuZCgpIHtcbiAgaWYgKGhhc1JlcXVpcmVkQ2FsbEJvdW5kKSByZXR1cm4gY2FsbEJvdW5kO1xuICBoYXNSZXF1aXJlZENhbGxCb3VuZCA9IDE7XG4gIHZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlR2V0SW50cmluc2ljKCk7XG4gIHZhciBjYWxsQmluZDIgPSByZXF1aXJlQ2FsbEJpbmQoKTtcbiAgdmFyICRpbmRleE9mID0gY2FsbEJpbmQyKEdldEludHJpbnNpYyhcIlN0cmluZy5wcm90b3R5cGUuaW5kZXhPZlwiKSk7XG4gIGNhbGxCb3VuZCA9IGZ1bmN0aW9uIGNhbGxCb3VuZEludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcbiAgICB2YXIgaW50cmluc2ljID0gR2V0SW50cmluc2ljKG5hbWUsICEhYWxsb3dNaXNzaW5nKTtcbiAgICBpZiAodHlwZW9mIGludHJpbnNpYyA9PT0gXCJmdW5jdGlvblwiICYmICRpbmRleE9mKG5hbWUsIFwiLnByb3RvdHlwZS5cIikgPiAtMSkge1xuICAgICAgcmV0dXJuIGNhbGxCaW5kMihpbnRyaW5zaWMpO1xuICAgIH1cbiAgICByZXR1cm4gaW50cmluc2ljO1xuICB9O1xuICByZXR1cm4gY2FsbEJvdW5kO1xufVxudmFyIGlzQXJndW1lbnRzO1xudmFyIGhhc1JlcXVpcmVkSXNBcmd1bWVudHM7XG5mdW5jdGlvbiByZXF1aXJlSXNBcmd1bWVudHMoKSB7XG4gIGlmIChoYXNSZXF1aXJlZElzQXJndW1lbnRzKSByZXR1cm4gaXNBcmd1bWVudHM7XG4gIGhhc1JlcXVpcmVkSXNBcmd1bWVudHMgPSAxO1xuICB2YXIgaGFzVG9TdHJpbmdUYWcgPSByZXF1aXJlU2hhbXMoKSgpO1xuICB2YXIgY2FsbEJvdW5kMiA9IHJlcXVpcmVDYWxsQm91bmQoKTtcbiAgdmFyICR0b1N0cmluZyA9IGNhbGxCb3VuZDIoXCJPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nXCIpO1xuICB2YXIgaXNTdGFuZGFyZEFyZ3VtZW50cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzMih2YWx1ZSkge1xuICAgIGlmIChoYXNUb1N0cmluZ1RhZyAmJiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgU3ltYm9sLnRvU3RyaW5nVGFnIGluIHZhbHVlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiAkdG9TdHJpbmcodmFsdWUpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiO1xuICB9O1xuICB2YXIgaXNMZWdhY3lBcmd1bWVudHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50czIodmFsdWUpIHtcbiAgICBpZiAoaXNTdGFuZGFyZEFyZ3VtZW50cyh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09IFwibnVtYmVyXCIgJiYgdmFsdWUubGVuZ3RoID49IDAgJiYgJHRvU3RyaW5nKHZhbHVlKSAhPT0gXCJbb2JqZWN0IEFycmF5XVwiICYmICR0b1N0cmluZyh2YWx1ZS5jYWxsZWUpID09PSBcIltvYmplY3QgRnVuY3Rpb25dXCI7XG4gIH07XG4gIHZhciBzdXBwb3J0c1N0YW5kYXJkQXJndW1lbnRzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGlzU3RhbmRhcmRBcmd1bWVudHMoYXJndW1lbnRzKTtcbiAgfSgpO1xuICBpc1N0YW5kYXJkQXJndW1lbnRzLmlzTGVnYWN5QXJndW1lbnRzID0gaXNMZWdhY3lBcmd1bWVudHM7XG4gIGlzQXJndW1lbnRzID0gc3VwcG9ydHNTdGFuZGFyZEFyZ3VtZW50cyA/IGlzU3RhbmRhcmRBcmd1bWVudHMgOiBpc0xlZ2FjeUFyZ3VtZW50cztcbiAgcmV0dXJuIGlzQXJndW1lbnRzO1xufVxudmFyIGlzR2VuZXJhdG9yRnVuY3Rpb247XG52YXIgaGFzUmVxdWlyZWRJc0dlbmVyYXRvckZ1bmN0aW9uO1xuZnVuY3Rpb24gcmVxdWlyZUlzR2VuZXJhdG9yRnVuY3Rpb24oKSB7XG4gIGlmIChoYXNSZXF1aXJlZElzR2VuZXJhdG9yRnVuY3Rpb24pIHJldHVybiBpc0dlbmVyYXRvckZ1bmN0aW9uO1xuICBoYXNSZXF1aXJlZElzR2VuZXJhdG9yRnVuY3Rpb24gPSAxO1xuICB2YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuICB2YXIgZm5Ub1N0ciA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcbiAgdmFyIGlzRm5SZWdleCA9IC9eXFxzKig/OmZ1bmN0aW9uKT9cXCovO1xuICB2YXIgaGFzVG9TdHJpbmdUYWcgPSByZXF1aXJlU2hhbXMoKSgpO1xuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBnZXRHZW5lcmF0b3JGdW5jID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFoYXNUb1N0cmluZ1RhZykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEZ1bmN0aW9uKFwicmV0dXJuIGZ1bmN0aW9uKigpIHt9XCIpKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgIH1cbiAgfTtcbiAgdmFyIEdlbmVyYXRvckZ1bmN0aW9uO1xuICBpc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24gaXNHZW5lcmF0b3JGdW5jdGlvbjIoZm4pIHtcbiAgICBpZiAodHlwZW9mIGZuICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGlzRm5SZWdleC50ZXN0KGZuVG9TdHIuY2FsbChmbikpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFoYXNUb1N0cmluZ1RhZykge1xuICAgICAgdmFyIHN0ciA9IHRvU3RyLmNhbGwoZm4pO1xuICAgICAgcmV0dXJuIHN0ciA9PT0gXCJbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXVwiO1xuICAgIH1cbiAgICBpZiAoIWdldFByb3RvKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgR2VuZXJhdG9yRnVuY3Rpb24gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHZhciBnZW5lcmF0b3JGdW5jID0gZ2V0R2VuZXJhdG9yRnVuYygpO1xuICAgICAgR2VuZXJhdG9yRnVuY3Rpb24gPSBnZW5lcmF0b3JGdW5jID8gZ2V0UHJvdG8oZ2VuZXJhdG9yRnVuYykgOiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGdldFByb3RvKGZuKSA9PT0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIH07XG4gIHJldHVybiBpc0dlbmVyYXRvckZ1bmN0aW9uO1xufVxudmFyIGlzQ2FsbGFibGU7XG52YXIgaGFzUmVxdWlyZWRJc0NhbGxhYmxlO1xuZnVuY3Rpb24gcmVxdWlyZUlzQ2FsbGFibGUoKSB7XG4gIGlmIChoYXNSZXF1aXJlZElzQ2FsbGFibGUpIHJldHVybiBpc0NhbGxhYmxlO1xuICBoYXNSZXF1aXJlZElzQ2FsbGFibGUgPSAxO1xuICB2YXIgZm5Ub1N0ciA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcbiAgdmFyIHJlZmxlY3RBcHBseSA9IHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIFJlZmxlY3QgIT09IG51bGwgJiYgUmVmbGVjdC5hcHBseTtcbiAgdmFyIGJhZEFycmF5TGlrZTtcbiAgdmFyIGlzQ2FsbGFibGVNYXJrZXI7XG4gIGlmICh0eXBlb2YgcmVmbGVjdEFwcGx5ID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdHJ5IHtcbiAgICAgIGJhZEFycmF5TGlrZSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgXCJsZW5ndGhcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRocm93IGlzQ2FsbGFibGVNYXJrZXI7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaXNDYWxsYWJsZU1hcmtlciA9IHt9O1xuICAgICAgcmVmbGVjdEFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICB0aHJvdyA0MjtcbiAgICAgIH0sIG51bGwsIGJhZEFycmF5TGlrZSk7XG4gICAgfSBjYXRjaCAoXykge1xuICAgICAgaWYgKF8gIT09IGlzQ2FsbGFibGVNYXJrZXIpIHtcbiAgICAgICAgcmVmbGVjdEFwcGx5ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmVmbGVjdEFwcGx5ID0gbnVsbDtcbiAgfVxuICB2YXIgY29uc3RydWN0b3JSZWdleCA9IC9eXFxzKmNsYXNzXFxiLztcbiAgdmFyIGlzRVM2Q2xhc3NGbiA9IGZ1bmN0aW9uIGlzRVM2Q2xhc3NGdW5jdGlvbih2YWx1ZSkge1xuICAgIHRyeSB7XG4gICAgICB2YXIgZm5TdHIgPSBmblRvU3RyLmNhbGwodmFsdWUpO1xuICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yUmVnZXgudGVzdChmblN0cik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgdmFyIHRyeUZ1bmN0aW9uT2JqZWN0ID0gZnVuY3Rpb24gdHJ5RnVuY3Rpb25Ub1N0cih2YWx1ZSkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoaXNFUzZDbGFzc0ZuKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBmblRvU3RyLmNhbGwodmFsdWUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgdmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbiAgdmFyIG9iamVjdENsYXNzID0gXCJbb2JqZWN0IE9iamVjdF1cIjtcbiAgdmFyIGZuQ2xhc3MgPSBcIltvYmplY3QgRnVuY3Rpb25dXCI7XG4gIHZhciBnZW5DbGFzcyA9IFwiW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl1cIjtcbiAgdmFyIGRkYUNsYXNzID0gXCJbb2JqZWN0IEhUTUxBbGxDb2xsZWN0aW9uXVwiO1xuICB2YXIgZGRhQ2xhc3MyID0gXCJbb2JqZWN0IEhUTUwgZG9jdW1lbnQuYWxsIGNsYXNzXVwiO1xuICB2YXIgZGRhQ2xhc3MzID0gXCJbb2JqZWN0IEhUTUxDb2xsZWN0aW9uXVwiO1xuICB2YXIgaGFzVG9TdHJpbmdUYWcgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgISFTeW1ib2wudG9TdHJpbmdUYWc7XG4gIHZhciBpc0lFNjggPSAhKDAgaW4gWyxdKTtcbiAgdmFyIGlzRERBID0gZnVuY3Rpb24gaXNEb2N1bWVudERvdEFsbCgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwib2JqZWN0XCIpIHtcbiAgICB2YXIgYWxsID0gZG9jdW1lbnQuYWxsO1xuICAgIGlmICh0b1N0ci5jYWxsKGFsbCkgPT09IHRvU3RyLmNhbGwoZG9jdW1lbnQuYWxsKSkge1xuICAgICAgaXNEREEgPSBmdW5jdGlvbiBpc0RvY3VtZW50RG90QWxsKHZhbHVlKSB7XG4gICAgICAgIGlmICgoaXNJRTY4IHx8ICF2YWx1ZSkgJiYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiB8fCB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIpKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBzdHIgPSB0b1N0ci5jYWxsKHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiAoc3RyID09PSBkZGFDbGFzcyB8fCBzdHIgPT09IGRkYUNsYXNzMiB8fCBzdHIgPT09IGRkYUNsYXNzMyB8fCBzdHIgPT09IG9iamVjdENsYXNzKSAmJiB2YWx1ZShcIlwiKSA9PSBudWxsO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgaXNDYWxsYWJsZSA9IHJlZmxlY3RBcHBseSA/IGZ1bmN0aW9uIGlzQ2FsbGFibGUyKHZhbHVlKSB7XG4gICAgaWYgKGlzRERBKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgcmVmbGVjdEFwcGx5KHZhbHVlLCBudWxsLCBiYWRBcnJheUxpa2UpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlICE9PSBpc0NhbGxhYmxlTWFya2VyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICFpc0VTNkNsYXNzRm4odmFsdWUpICYmIHRyeUZ1bmN0aW9uT2JqZWN0KHZhbHVlKTtcbiAgfSA6IGZ1bmN0aW9uIGlzQ2FsbGFibGUyKHZhbHVlKSB7XG4gICAgaWYgKGlzRERBKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoaGFzVG9TdHJpbmdUYWcpIHtcbiAgICAgIHJldHVybiB0cnlGdW5jdGlvbk9iamVjdCh2YWx1ZSk7XG4gICAgfVxuICAgIGlmIChpc0VTNkNsYXNzRm4odmFsdWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBzdHJDbGFzcyA9IHRvU3RyLmNhbGwodmFsdWUpO1xuICAgIGlmIChzdHJDbGFzcyAhPT0gZm5DbGFzcyAmJiBzdHJDbGFzcyAhPT0gZ2VuQ2xhc3MgJiYgIS9eXFxbb2JqZWN0IEhUTUwvLnRlc3Qoc3RyQ2xhc3MpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnlGdW5jdGlvbk9iamVjdCh2YWx1ZSk7XG4gIH07XG4gIHJldHVybiBpc0NhbGxhYmxlO1xufVxudmFyIGZvckVhY2hfMTtcbnZhciBoYXNSZXF1aXJlZEZvckVhY2g7XG5mdW5jdGlvbiByZXF1aXJlRm9yRWFjaCgpIHtcbiAgaWYgKGhhc1JlcXVpcmVkRm9yRWFjaCkgcmV0dXJuIGZvckVhY2hfMTtcbiAgaGFzUmVxdWlyZWRGb3JFYWNoID0gMTtcbiAgdmFyIGlzQ2FsbGFibGUyID0gcmVxdWlyZUlzQ2FsbGFibGUoKTtcbiAgdmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbiAgdmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIGZvckVhY2hBcnJheSA9IGZ1bmN0aW9uIGZvckVhY2hBcnJheTIoYXJyYXksIGl0ZXJhdG9yLCByZWNlaXZlcikge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksIGkpKSB7XG4gICAgICAgIGlmIChyZWNlaXZlciA9PSBudWxsKSB7XG4gICAgICAgICAgaXRlcmF0b3IoYXJyYXlbaV0sIGksIGFycmF5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVyYXRvci5jYWxsKHJlY2VpdmVyLCBhcnJheVtpXSwgaSwgYXJyYXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuICB2YXIgZm9yRWFjaFN0cmluZyA9IGZ1bmN0aW9uIGZvckVhY2hTdHJpbmcyKHN0cmluZywgaXRlcmF0b3IsIHJlY2VpdmVyKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHN0cmluZy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKHJlY2VpdmVyID09IG51bGwpIHtcbiAgICAgICAgaXRlcmF0b3Ioc3RyaW5nLmNoYXJBdChpKSwgaSwgc3RyaW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZXJhdG9yLmNhbGwocmVjZWl2ZXIsIHN0cmluZy5jaGFyQXQoaSksIGksIHN0cmluZyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICB2YXIgZm9yRWFjaE9iamVjdCA9IGZ1bmN0aW9uIGZvckVhY2hPYmplY3QyKG9iamVjdCwgaXRlcmF0b3IsIHJlY2VpdmVyKSB7XG4gICAgZm9yICh2YXIgayBpbiBvYmplY3QpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgaykpIHtcbiAgICAgICAgaWYgKHJlY2VpdmVyID09IG51bGwpIHtcbiAgICAgICAgICBpdGVyYXRvcihvYmplY3Rba10sIGssIG9iamVjdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlcmF0b3IuY2FsbChyZWNlaXZlciwgb2JqZWN0W2tdLCBrLCBvYmplY3QpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuICB2YXIgZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2gyKGxpc3QsIGl0ZXJhdG9yLCB0aGlzQXJnKSB7XG4gICAgaWYgKCFpc0NhbGxhYmxlMihpdGVyYXRvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICAgIHZhciByZWNlaXZlcjtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAzKSB7XG4gICAgICByZWNlaXZlciA9IHRoaXNBcmc7XG4gICAgfVxuICAgIGlmICh0b1N0ci5jYWxsKGxpc3QpID09PSBcIltvYmplY3QgQXJyYXldXCIpIHtcbiAgICAgIGZvckVhY2hBcnJheShsaXN0LCBpdGVyYXRvciwgcmVjZWl2ZXIpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGZvckVhY2hTdHJpbmcobGlzdCwgaXRlcmF0b3IsIHJlY2VpdmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yRWFjaE9iamVjdChsaXN0LCBpdGVyYXRvciwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgfTtcbiAgZm9yRWFjaF8xID0gZm9yRWFjaDtcbiAgcmV0dXJuIGZvckVhY2hfMTtcbn1cbnZhciBwb3NzaWJsZVR5cGVkQXJyYXlOYW1lcztcbnZhciBoYXNSZXF1aXJlZFBvc3NpYmxlVHlwZWRBcnJheU5hbWVzO1xuZnVuY3Rpb24gcmVxdWlyZVBvc3NpYmxlVHlwZWRBcnJheU5hbWVzKCkge1xuICBpZiAoaGFzUmVxdWlyZWRQb3NzaWJsZVR5cGVkQXJyYXlOYW1lcykgcmV0dXJuIHBvc3NpYmxlVHlwZWRBcnJheU5hbWVzO1xuICBoYXNSZXF1aXJlZFBvc3NpYmxlVHlwZWRBcnJheU5hbWVzID0gMTtcbiAgcG9zc2libGVUeXBlZEFycmF5TmFtZXMgPSBbXG4gICAgXCJGbG9hdDMyQXJyYXlcIixcbiAgICBcIkZsb2F0NjRBcnJheVwiLFxuICAgIFwiSW50OEFycmF5XCIsXG4gICAgXCJJbnQxNkFycmF5XCIsXG4gICAgXCJJbnQzMkFycmF5XCIsXG4gICAgXCJVaW50OEFycmF5XCIsXG4gICAgXCJVaW50OENsYW1wZWRBcnJheVwiLFxuICAgIFwiVWludDE2QXJyYXlcIixcbiAgICBcIlVpbnQzMkFycmF5XCIsXG4gICAgXCJCaWdJbnQ2NEFycmF5XCIsXG4gICAgXCJCaWdVaW50NjRBcnJheVwiXG4gIF07XG4gIHJldHVybiBwb3NzaWJsZVR5cGVkQXJyYXlOYW1lcztcbn1cbnZhciBhdmFpbGFibGVUeXBlZEFycmF5cztcbnZhciBoYXNSZXF1aXJlZEF2YWlsYWJsZVR5cGVkQXJyYXlzO1xuZnVuY3Rpb24gcmVxdWlyZUF2YWlsYWJsZVR5cGVkQXJyYXlzKCkge1xuICBpZiAoaGFzUmVxdWlyZWRBdmFpbGFibGVUeXBlZEFycmF5cykgcmV0dXJuIGF2YWlsYWJsZVR5cGVkQXJyYXlzO1xuICBoYXNSZXF1aXJlZEF2YWlsYWJsZVR5cGVkQXJyYXlzID0gMTtcbiAgdmFyIHBvc3NpYmxlTmFtZXMgPSByZXF1aXJlUG9zc2libGVUeXBlZEFycmF5TmFtZXMoKTtcbiAgdmFyIGcgPSB0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gXCJ1bmRlZmluZWRcIiA/IGNvbW1vbmpzR2xvYmFsIDogZ2xvYmFsVGhpcztcbiAgYXZhaWxhYmxlVHlwZWRBcnJheXMgPSBmdW5jdGlvbiBhdmFpbGFibGVUeXBlZEFycmF5czIoKSB7XG4gICAgdmFyIG91dCA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9zc2libGVOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHR5cGVvZiBnW3Bvc3NpYmxlTmFtZXNbaV1dID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgb3V0W291dC5sZW5ndGhdID0gcG9zc2libGVOYW1lc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbiAgfTtcbiAgcmV0dXJuIGF2YWlsYWJsZVR5cGVkQXJyYXlzO1xufVxudmFyIHdoaWNoVHlwZWRBcnJheTtcbnZhciBoYXNSZXF1aXJlZFdoaWNoVHlwZWRBcnJheTtcbmZ1bmN0aW9uIHJlcXVpcmVXaGljaFR5cGVkQXJyYXkoKSB7XG4gIGlmIChoYXNSZXF1aXJlZFdoaWNoVHlwZWRBcnJheSkgcmV0dXJuIHdoaWNoVHlwZWRBcnJheTtcbiAgaGFzUmVxdWlyZWRXaGljaFR5cGVkQXJyYXkgPSAxO1xuICB2YXIgZm9yRWFjaCA9IHJlcXVpcmVGb3JFYWNoKCk7XG4gIHZhciBhdmFpbGFibGVUeXBlZEFycmF5czIgPSByZXF1aXJlQXZhaWxhYmxlVHlwZWRBcnJheXMoKTtcbiAgdmFyIGNhbGxCaW5kMiA9IHJlcXVpcmVDYWxsQmluZCgpO1xuICB2YXIgY2FsbEJvdW5kMiA9IHJlcXVpcmVDYWxsQm91bmQoKTtcbiAgdmFyIGdPUEQgPSByZXF1aXJlR29wZCgpO1xuICB2YXIgJHRvU3RyaW5nID0gY2FsbEJvdW5kMihcIk9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdcIik7XG4gIHZhciBoYXNUb1N0cmluZ1RhZyA9IHJlcXVpcmVTaGFtcygpKCk7XG4gIHZhciBnID0gdHlwZW9mIGdsb2JhbFRoaXMgPT09IFwidW5kZWZpbmVkXCIgPyBjb21tb25qc0dsb2JhbCA6IGdsb2JhbFRoaXM7XG4gIHZhciB0eXBlZEFycmF5cyA9IGF2YWlsYWJsZVR5cGVkQXJyYXlzMigpO1xuICB2YXIgJHNsaWNlID0gY2FsbEJvdW5kMihcIlN0cmluZy5wcm90b3R5cGUuc2xpY2VcIik7XG4gIHZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyICRpbmRleE9mID0gY2FsbEJvdW5kMihcIkFycmF5LnByb3RvdHlwZS5pbmRleE9mXCIsIHRydWUpIHx8IGZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGFycmF5W2ldID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9O1xuICB2YXIgY2FjaGUgPSB7IF9fcHJvdG9fXzogbnVsbCB9O1xuICBpZiAoaGFzVG9TdHJpbmdUYWcgJiYgZ09QRCAmJiBnZXRQcm90b3R5cGVPZikge1xuICAgIGZvckVhY2godHlwZWRBcnJheXMsIGZ1bmN0aW9uKHR5cGVkQXJyYXkpIHtcbiAgICAgIHZhciBhcnIgPSBuZXcgZ1t0eXBlZEFycmF5XSgpO1xuICAgICAgaWYgKFN5bWJvbC50b1N0cmluZ1RhZyBpbiBhcnIpIHtcbiAgICAgICAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlT2YoYXJyKTtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnT1BEKHByb3RvLCBTeW1ib2wudG9TdHJpbmdUYWcpO1xuICAgICAgICBpZiAoIWRlc2NyaXB0b3IpIHtcbiAgICAgICAgICB2YXIgc3VwZXJQcm90byA9IGdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgICAgICAgICBkZXNjcmlwdG9yID0gZ09QRChzdXBlclByb3RvLCBTeW1ib2wudG9TdHJpbmdUYWcpO1xuICAgICAgICB9XG4gICAgICAgIGNhY2hlW1wiJFwiICsgdHlwZWRBcnJheV0gPSBjYWxsQmluZDIoZGVzY3JpcHRvci5nZXQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGZvckVhY2godHlwZWRBcnJheXMsIGZ1bmN0aW9uKHR5cGVkQXJyYXkpIHtcbiAgICAgIHZhciBhcnIgPSBuZXcgZ1t0eXBlZEFycmF5XSgpO1xuICAgICAgdmFyIGZuID0gYXJyLnNsaWNlIHx8IGFyci5zZXQ7XG4gICAgICBpZiAoZm4pIHtcbiAgICAgICAgY2FjaGVbXCIkXCIgKyB0eXBlZEFycmF5XSA9IGNhbGxCaW5kMihmbik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgdmFyIHRyeVR5cGVkQXJyYXlzID0gZnVuY3Rpb24gdHJ5QWxsVHlwZWRBcnJheXModmFsdWUpIHtcbiAgICB2YXIgZm91bmQgPSBmYWxzZTtcbiAgICBmb3JFYWNoKFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV4dHJhLXBhcmVuc1xuICAgICAgLyoqIEB0eXBlIHtSZWNvcmQ8YFxcJCR7VHlwZWRBcnJheU5hbWV9YCwgR2V0dGVyPn0gKi9cbiAgICAgIC8qKiBAdHlwZSB7YW55fSAqL1xuICAgICAgY2FjaGUsXG4gICAgICAvKiogQHR5cGUgeyhnZXR0ZXI6IEdldHRlciwgbmFtZTogYFxcJCR7aW1wb3J0KCcuJykuVHlwZWRBcnJheU5hbWV9YCkgPT4gdm9pZH0gKi9cbiAgICAgIGZ1bmN0aW9uKGdldHRlciwgdHlwZWRBcnJheSkge1xuICAgICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChcIiRcIiArIGdldHRlcih2YWx1ZSkgPT09IHR5cGVkQXJyYXkpIHtcbiAgICAgICAgICAgICAgZm91bmQgPSAkc2xpY2UodHlwZWRBcnJheSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gICAgcmV0dXJuIGZvdW5kO1xuICB9O1xuICB2YXIgdHJ5U2xpY2VzID0gZnVuY3Rpb24gdHJ5QWxsU2xpY2VzKHZhbHVlKSB7XG4gICAgdmFyIGZvdW5kID0gZmFsc2U7XG4gICAgZm9yRWFjaChcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1leHRyYS1wYXJlbnNcbiAgICAgIC8qKiBAdHlwZSB7UmVjb3JkPGBcXCQke1R5cGVkQXJyYXlOYW1lfWAsIEdldHRlcj59ICovXG4gICAgICAvKiogQHR5cGUge2FueX0gKi9cbiAgICAgIGNhY2hlLFxuICAgICAgLyoqIEB0eXBlIHsoZ2V0dGVyOiB0eXBlb2YgY2FjaGUsIG5hbWU6IGBcXCQke2ltcG9ydCgnLicpLlR5cGVkQXJyYXlOYW1lfWApID0+IHZvaWR9ICovXG4gICAgICBmdW5jdGlvbihnZXR0ZXIsIG5hbWUpIHtcbiAgICAgICAgaWYgKCFmb3VuZCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBnZXR0ZXIodmFsdWUpO1xuICAgICAgICAgICAgZm91bmQgPSAkc2xpY2UobmFtZSwgMSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gICAgcmV0dXJuIGZvdW5kO1xuICB9O1xuICB3aGljaFR5cGVkQXJyYXkgPSBmdW5jdGlvbiB3aGljaFR5cGVkQXJyYXkyKHZhbHVlKSB7XG4gICAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFoYXNUb1N0cmluZ1RhZykge1xuICAgICAgdmFyIHRhZyA9ICRzbGljZSgkdG9TdHJpbmcodmFsdWUpLCA4LCAtMSk7XG4gICAgICBpZiAoJGluZGV4T2YodHlwZWRBcnJheXMsIHRhZykgPiAtMSkge1xuICAgICAgICByZXR1cm4gdGFnO1xuICAgICAgfVxuICAgICAgaWYgKHRhZyAhPT0gXCJPYmplY3RcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ5U2xpY2VzKHZhbHVlKTtcbiAgICB9XG4gICAgaWYgKCFnT1BEKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHRyeVR5cGVkQXJyYXlzKHZhbHVlKTtcbiAgfTtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheTtcbn1cbnZhciBpc1R5cGVkQXJyYXk7XG52YXIgaGFzUmVxdWlyZWRJc1R5cGVkQXJyYXk7XG5mdW5jdGlvbiByZXF1aXJlSXNUeXBlZEFycmF5KCkge1xuICBpZiAoaGFzUmVxdWlyZWRJc1R5cGVkQXJyYXkpIHJldHVybiBpc1R5cGVkQXJyYXk7XG4gIGhhc1JlcXVpcmVkSXNUeXBlZEFycmF5ID0gMTtcbiAgdmFyIHdoaWNoVHlwZWRBcnJheTIgPSByZXF1aXJlV2hpY2hUeXBlZEFycmF5KCk7XG4gIGlzVHlwZWRBcnJheSA9IGZ1bmN0aW9uIGlzVHlwZWRBcnJheTIodmFsdWUpIHtcbiAgICByZXR1cm4gISF3aGljaFR5cGVkQXJyYXkyKHZhbHVlKTtcbiAgfTtcbiAgcmV0dXJuIGlzVHlwZWRBcnJheTtcbn1cbnZhciBoYXNSZXF1aXJlZFR5cGVzO1xuZnVuY3Rpb24gcmVxdWlyZVR5cGVzKCkge1xuICBpZiAoaGFzUmVxdWlyZWRUeXBlcykgcmV0dXJuIHR5cGVzO1xuICBoYXNSZXF1aXJlZFR5cGVzID0gMTtcbiAgKGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiAgICB2YXIgaXNBcmd1bWVudHNPYmplY3QgPSByZXF1aXJlSXNBcmd1bWVudHMoKTtcbiAgICB2YXIgaXNHZW5lcmF0b3JGdW5jdGlvbjIgPSByZXF1aXJlSXNHZW5lcmF0b3JGdW5jdGlvbigpO1xuICAgIHZhciB3aGljaFR5cGVkQXJyYXkyID0gcmVxdWlyZVdoaWNoVHlwZWRBcnJheSgpO1xuICAgIHZhciBpc1R5cGVkQXJyYXkyID0gcmVxdWlyZUlzVHlwZWRBcnJheSgpO1xuICAgIGZ1bmN0aW9uIHVuY3VycnlUaGlzKGYyKSB7XG4gICAgICByZXR1cm4gZjIuY2FsbC5iaW5kKGYyKTtcbiAgICB9XG4gICAgdmFyIEJpZ0ludFN1cHBvcnRlZCA9IHR5cGVvZiBCaWdJbnQgIT09IFwidW5kZWZpbmVkXCI7XG4gICAgdmFyIFN5bWJvbFN1cHBvcnRlZCA9IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCI7XG4gICAgdmFyIE9iamVjdFRvU3RyaW5nID0gdW5jdXJyeVRoaXMoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyk7XG4gICAgdmFyIG51bWJlclZhbHVlID0gdW5jdXJyeVRoaXMoTnVtYmVyLnByb3RvdHlwZS52YWx1ZU9mKTtcbiAgICB2YXIgc3RyaW5nVmFsdWUgPSB1bmN1cnJ5VGhpcyhTdHJpbmcucHJvdG90eXBlLnZhbHVlT2YpO1xuICAgIHZhciBib29sZWFuVmFsdWUgPSB1bmN1cnJ5VGhpcyhCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mKTtcbiAgICBpZiAoQmlnSW50U3VwcG9ydGVkKSB7XG4gICAgICB2YXIgYmlnSW50VmFsdWUgPSB1bmN1cnJ5VGhpcyhCaWdJbnQucHJvdG90eXBlLnZhbHVlT2YpO1xuICAgIH1cbiAgICBpZiAoU3ltYm9sU3VwcG9ydGVkKSB7XG4gICAgICB2YXIgc3ltYm9sVmFsdWUgPSB1bmN1cnJ5VGhpcyhTeW1ib2wucHJvdG90eXBlLnZhbHVlT2YpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjaGVja0JveGVkUHJpbWl0aXZlKHZhbHVlLCBwcm90b3R5cGVWYWx1ZU9mKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIHByb3RvdHlwZVZhbHVlT2YodmFsdWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBleHBvcnRzLmlzQXJndW1lbnRzT2JqZWN0ID0gaXNBcmd1bWVudHNPYmplY3Q7XG4gICAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gaXNHZW5lcmF0b3JGdW5jdGlvbjI7XG4gICAgZXhwb3J0cy5pc1R5cGVkQXJyYXkgPSBpc1R5cGVkQXJyYXkyO1xuICAgIGZ1bmN0aW9uIGlzUHJvbWlzZShpbnB1dCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBQcm9taXNlICE9PSBcInVuZGVmaW5lZFwiICYmIGlucHV0IGluc3RhbmNlb2YgUHJvbWlzZSB8fCBpbnB1dCAhPT0gbnVsbCAmJiB0eXBlb2YgaW5wdXQgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGlucHV0LnRoZW4gPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgaW5wdXQuY2F0Y2ggPT09IFwiZnVuY3Rpb25cIjtcbiAgICB9XG4gICAgZXhwb3J0cy5pc1Byb21pc2UgPSBpc1Byb21pc2U7XG4gICAgZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09IFwidW5kZWZpbmVkXCIgJiYgQXJyYXlCdWZmZXIuaXNWaWV3KSB7XG4gICAgICAgIHJldHVybiBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzVHlwZWRBcnJheTIodmFsdWUpIHx8IGlzRGF0YVZpZXcodmFsdWUpO1xuICAgIH1cbiAgICBleHBvcnRzLmlzQXJyYXlCdWZmZXJWaWV3ID0gaXNBcnJheUJ1ZmZlclZpZXc7XG4gICAgZnVuY3Rpb24gaXNVaW50OEFycmF5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gd2hpY2hUeXBlZEFycmF5Mih2YWx1ZSkgPT09IFwiVWludDhBcnJheVwiO1xuICAgIH1cbiAgICBleHBvcnRzLmlzVWludDhBcnJheSA9IGlzVWludDhBcnJheTtcbiAgICBmdW5jdGlvbiBpc1VpbnQ4Q2xhbXBlZEFycmF5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gd2hpY2hUeXBlZEFycmF5Mih2YWx1ZSkgPT09IFwiVWludDhDbGFtcGVkQXJyYXlcIjtcbiAgICB9XG4gICAgZXhwb3J0cy5pc1VpbnQ4Q2xhbXBlZEFycmF5ID0gaXNVaW50OENsYW1wZWRBcnJheTtcbiAgICBmdW5jdGlvbiBpc1VpbnQxNkFycmF5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gd2hpY2hUeXBlZEFycmF5Mih2YWx1ZSkgPT09IFwiVWludDE2QXJyYXlcIjtcbiAgICB9XG4gICAgZXhwb3J0cy5pc1VpbnQxNkFycmF5ID0gaXNVaW50MTZBcnJheTtcbiAgICBmdW5jdGlvbiBpc1VpbnQzMkFycmF5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gd2hpY2hUeXBlZEFycmF5Mih2YWx1ZSkgPT09IFwiVWludDMyQXJyYXlcIjtcbiAgICB9XG4gICAgZXhwb3J0cy5pc1VpbnQzMkFycmF5ID0gaXNVaW50MzJBcnJheTtcbiAgICBmdW5jdGlvbiBpc0ludDhBcnJheSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheTIodmFsdWUpID09PSBcIkludDhBcnJheVwiO1xuICAgIH1cbiAgICBleHBvcnRzLmlzSW50OEFycmF5ID0gaXNJbnQ4QXJyYXk7XG4gICAgZnVuY3Rpb24gaXNJbnQxNkFycmF5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gd2hpY2hUeXBlZEFycmF5Mih2YWx1ZSkgPT09IFwiSW50MTZBcnJheVwiO1xuICAgIH1cbiAgICBleHBvcnRzLmlzSW50MTZBcnJheSA9IGlzSW50MTZBcnJheTtcbiAgICBmdW5jdGlvbiBpc0ludDMyQXJyYXkodmFsdWUpIHtcbiAgICAgIHJldHVybiB3aGljaFR5cGVkQXJyYXkyKHZhbHVlKSA9PT0gXCJJbnQzMkFycmF5XCI7XG4gICAgfVxuICAgIGV4cG9ydHMuaXNJbnQzMkFycmF5ID0gaXNJbnQzMkFycmF5O1xuICAgIGZ1bmN0aW9uIGlzRmxvYXQzMkFycmF5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gd2hpY2hUeXBlZEFycmF5Mih2YWx1ZSkgPT09IFwiRmxvYXQzMkFycmF5XCI7XG4gICAgfVxuICAgIGV4cG9ydHMuaXNGbG9hdDMyQXJyYXkgPSBpc0Zsb2F0MzJBcnJheTtcbiAgICBmdW5jdGlvbiBpc0Zsb2F0NjRBcnJheSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheTIodmFsdWUpID09PSBcIkZsb2F0NjRBcnJheVwiO1xuICAgIH1cbiAgICBleHBvcnRzLmlzRmxvYXQ2NEFycmF5ID0gaXNGbG9hdDY0QXJyYXk7XG4gICAgZnVuY3Rpb24gaXNCaWdJbnQ2NEFycmF5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gd2hpY2hUeXBlZEFycmF5Mih2YWx1ZSkgPT09IFwiQmlnSW50NjRBcnJheVwiO1xuICAgIH1cbiAgICBleHBvcnRzLmlzQmlnSW50NjRBcnJheSA9IGlzQmlnSW50NjRBcnJheTtcbiAgICBmdW5jdGlvbiBpc0JpZ1VpbnQ2NEFycmF5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gd2hpY2hUeXBlZEFycmF5Mih2YWx1ZSkgPT09IFwiQmlnVWludDY0QXJyYXlcIjtcbiAgICB9XG4gICAgZXhwb3J0cy5pc0JpZ1VpbnQ2NEFycmF5ID0gaXNCaWdVaW50NjRBcnJheTtcbiAgICBmdW5jdGlvbiBpc01hcFRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSBcIltvYmplY3QgTWFwXVwiO1xuICAgIH1cbiAgICBpc01hcFRvU3RyaW5nLndvcmtpbmcgPSB0eXBlb2YgTWFwICE9PSBcInVuZGVmaW5lZFwiICYmIGlzTWFwVG9TdHJpbmcoLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSk7XG4gICAgZnVuY3Rpb24gaXNNYXAodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgTWFwID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc01hcFRvU3RyaW5nLndvcmtpbmcgPyBpc01hcFRvU3RyaW5nKHZhbHVlKSA6IHZhbHVlIGluc3RhbmNlb2YgTWFwO1xuICAgIH1cbiAgICBleHBvcnRzLmlzTWFwID0gaXNNYXA7XG4gICAgZnVuY3Rpb24gaXNTZXRUb1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gXCJbb2JqZWN0IFNldF1cIjtcbiAgICB9XG4gICAgaXNTZXRUb1N0cmluZy53b3JraW5nID0gdHlwZW9mIFNldCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpc1NldFRvU3RyaW5nKC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCkpO1xuICAgIGZ1bmN0aW9uIGlzU2V0KHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIFNldCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTZXRUb1N0cmluZy53b3JraW5nID8gaXNTZXRUb1N0cmluZyh2YWx1ZSkgOiB2YWx1ZSBpbnN0YW5jZW9mIFNldDtcbiAgICB9XG4gICAgZXhwb3J0cy5pc1NldCA9IGlzU2V0O1xuICAgIGZ1bmN0aW9uIGlzV2Vha01hcFRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSBcIltvYmplY3QgV2Vha01hcF1cIjtcbiAgICB9XG4gICAgaXNXZWFrTWFwVG9TdHJpbmcud29ya2luZyA9IHR5cGVvZiBXZWFrTWFwICE9PSBcInVuZGVmaW5lZFwiICYmIGlzV2Vha01hcFRvU3RyaW5nKC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpKTtcbiAgICBmdW5jdGlvbiBpc1dlYWtNYXAodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgV2Vha01hcCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNXZWFrTWFwVG9TdHJpbmcud29ya2luZyA/IGlzV2Vha01hcFRvU3RyaW5nKHZhbHVlKSA6IHZhbHVlIGluc3RhbmNlb2YgV2Vha01hcDtcbiAgICB9XG4gICAgZXhwb3J0cy5pc1dlYWtNYXAgPSBpc1dlYWtNYXA7XG4gICAgZnVuY3Rpb24gaXNXZWFrU2V0VG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09IFwiW29iamVjdCBXZWFrU2V0XVwiO1xuICAgIH1cbiAgICBpc1dlYWtTZXRUb1N0cmluZy53b3JraW5nID0gdHlwZW9mIFdlYWtTZXQgIT09IFwidW5kZWZpbmVkXCIgJiYgaXNXZWFrU2V0VG9TdHJpbmcoLyogQF9fUFVSRV9fICovIG5ldyBXZWFrU2V0KCkpO1xuICAgIGZ1bmN0aW9uIGlzV2Vha1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzV2Vha1NldFRvU3RyaW5nKHZhbHVlKTtcbiAgICB9XG4gICAgZXhwb3J0cy5pc1dlYWtTZXQgPSBpc1dlYWtTZXQ7XG4gICAgZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSBcIltvYmplY3QgQXJyYXlCdWZmZXJdXCI7XG4gICAgfVxuICAgIGlzQXJyYXlCdWZmZXJUb1N0cmluZy53b3JraW5nID0gdHlwZW9mIEFycmF5QnVmZmVyICE9PSBcInVuZGVmaW5lZFwiICYmIGlzQXJyYXlCdWZmZXJUb1N0cmluZyhuZXcgQXJyYXlCdWZmZXIoKSk7XG4gICAgZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNBcnJheUJ1ZmZlclRvU3RyaW5nLndvcmtpbmcgPyBpc0FycmF5QnVmZmVyVG9TdHJpbmcodmFsdWUpIDogdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcjtcbiAgICB9XG4gICAgZXhwb3J0cy5pc0FycmF5QnVmZmVyID0gaXNBcnJheUJ1ZmZlcjtcbiAgICBmdW5jdGlvbiBpc0RhdGFWaWV3VG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09IFwiW29iamVjdCBEYXRhVmlld11cIjtcbiAgICB9XG4gICAgaXNEYXRhVmlld1RvU3RyaW5nLndvcmtpbmcgPSB0eXBlb2YgQXJyYXlCdWZmZXIgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIERhdGFWaWV3ICE9PSBcInVuZGVmaW5lZFwiICYmIGlzRGF0YVZpZXdUb1N0cmluZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpLCAwLCAxKSk7XG4gICAgZnVuY3Rpb24gaXNEYXRhVmlldyh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiBEYXRhVmlldyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNEYXRhVmlld1RvU3RyaW5nLndvcmtpbmcgPyBpc0RhdGFWaWV3VG9TdHJpbmcodmFsdWUpIDogdmFsdWUgaW5zdGFuY2VvZiBEYXRhVmlldztcbiAgICB9XG4gICAgZXhwb3J0cy5pc0RhdGFWaWV3ID0gaXNEYXRhVmlldztcbiAgICB2YXIgU2hhcmVkQXJyYXlCdWZmZXJDb3B5ID0gdHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyICE9PSBcInVuZGVmaW5lZFwiID8gU2hhcmVkQXJyYXlCdWZmZXIgOiB2b2lkIDA7XG4gICAgZnVuY3Rpb24gaXNTaGFyZWRBcnJheUJ1ZmZlclRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSBcIltvYmplY3QgU2hhcmVkQXJyYXlCdWZmZXJdXCI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzU2hhcmVkQXJyYXlCdWZmZXIodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXJDb3B5ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgaXNTaGFyZWRBcnJheUJ1ZmZlclRvU3RyaW5nLndvcmtpbmcgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaXNTaGFyZWRBcnJheUJ1ZmZlclRvU3RyaW5nLndvcmtpbmcgPSBpc1NoYXJlZEFycmF5QnVmZmVyVG9TdHJpbmcobmV3IFNoYXJlZEFycmF5QnVmZmVyQ29weSgpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc1NoYXJlZEFycmF5QnVmZmVyVG9TdHJpbmcud29ya2luZyA/IGlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZyh2YWx1ZSkgOiB2YWx1ZSBpbnN0YW5jZW9mIFNoYXJlZEFycmF5QnVmZmVyQ29weTtcbiAgICB9XG4gICAgZXhwb3J0cy5pc1NoYXJlZEFycmF5QnVmZmVyID0gaXNTaGFyZWRBcnJheUJ1ZmZlcjtcbiAgICBmdW5jdGlvbiBpc0FzeW5jRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09IFwiW29iamVjdCBBc3luY0Z1bmN0aW9uXVwiO1xuICAgIH1cbiAgICBleHBvcnRzLmlzQXN5bmNGdW5jdGlvbiA9IGlzQXN5bmNGdW5jdGlvbjtcbiAgICBmdW5jdGlvbiBpc01hcEl0ZXJhdG9yKHZhbHVlKSB7XG4gICAgICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSBcIltvYmplY3QgTWFwIEl0ZXJhdG9yXVwiO1xuICAgIH1cbiAgICBleHBvcnRzLmlzTWFwSXRlcmF0b3IgPSBpc01hcEl0ZXJhdG9yO1xuICAgIGZ1bmN0aW9uIGlzU2V0SXRlcmF0b3IodmFsdWUpIHtcbiAgICAgIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09IFwiW29iamVjdCBTZXQgSXRlcmF0b3JdXCI7XG4gICAgfVxuICAgIGV4cG9ydHMuaXNTZXRJdGVyYXRvciA9IGlzU2V0SXRlcmF0b3I7XG4gICAgZnVuY3Rpb24gaXNHZW5lcmF0b3JPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09IFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gICAgfVxuICAgIGV4cG9ydHMuaXNHZW5lcmF0b3JPYmplY3QgPSBpc0dlbmVyYXRvck9iamVjdDtcbiAgICBmdW5jdGlvbiBpc1dlYkFzc2VtYmx5Q29tcGlsZWRNb2R1bGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09IFwiW29iamVjdCBXZWJBc3NlbWJseS5Nb2R1bGVdXCI7XG4gICAgfVxuICAgIGV4cG9ydHMuaXNXZWJBc3NlbWJseUNvbXBpbGVkTW9kdWxlID0gaXNXZWJBc3NlbWJseUNvbXBpbGVkTW9kdWxlO1xuICAgIGZ1bmN0aW9uIGlzTnVtYmVyT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gY2hlY2tCb3hlZFByaW1pdGl2ZSh2YWx1ZSwgbnVtYmVyVmFsdWUpO1xuICAgIH1cbiAgICBleHBvcnRzLmlzTnVtYmVyT2JqZWN0ID0gaXNOdW1iZXJPYmplY3Q7XG4gICAgZnVuY3Rpb24gaXNTdHJpbmdPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBjaGVja0JveGVkUHJpbWl0aXZlKHZhbHVlLCBzdHJpbmdWYWx1ZSk7XG4gICAgfVxuICAgIGV4cG9ydHMuaXNTdHJpbmdPYmplY3QgPSBpc1N0cmluZ09iamVjdDtcbiAgICBmdW5jdGlvbiBpc0Jvb2xlYW5PYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBjaGVja0JveGVkUHJpbWl0aXZlKHZhbHVlLCBib29sZWFuVmFsdWUpO1xuICAgIH1cbiAgICBleHBvcnRzLmlzQm9vbGVhbk9iamVjdCA9IGlzQm9vbGVhbk9iamVjdDtcbiAgICBmdW5jdGlvbiBpc0JpZ0ludE9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIEJpZ0ludFN1cHBvcnRlZCAmJiBjaGVja0JveGVkUHJpbWl0aXZlKHZhbHVlLCBiaWdJbnRWYWx1ZSk7XG4gICAgfVxuICAgIGV4cG9ydHMuaXNCaWdJbnRPYmplY3QgPSBpc0JpZ0ludE9iamVjdDtcbiAgICBmdW5jdGlvbiBpc1N5bWJvbE9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIFN5bWJvbFN1cHBvcnRlZCAmJiBjaGVja0JveGVkUHJpbWl0aXZlKHZhbHVlLCBzeW1ib2xWYWx1ZSk7XG4gICAgfVxuICAgIGV4cG9ydHMuaXNTeW1ib2xPYmplY3QgPSBpc1N5bWJvbE9iamVjdDtcbiAgICBmdW5jdGlvbiBpc0JveGVkUHJpbWl0aXZlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNOdW1iZXJPYmplY3QodmFsdWUpIHx8IGlzU3RyaW5nT2JqZWN0KHZhbHVlKSB8fCBpc0Jvb2xlYW5PYmplY3QodmFsdWUpIHx8IGlzQmlnSW50T2JqZWN0KHZhbHVlKSB8fCBpc1N5bWJvbE9iamVjdCh2YWx1ZSk7XG4gICAgfVxuICAgIGV4cG9ydHMuaXNCb3hlZFByaW1pdGl2ZSA9IGlzQm94ZWRQcmltaXRpdmU7XG4gICAgZnVuY3Rpb24gaXNBbnlBcnJheUJ1ZmZlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBVaW50OEFycmF5ICE9PSBcInVuZGVmaW5lZFwiICYmIChpc0FycmF5QnVmZmVyKHZhbHVlKSB8fCBpc1NoYXJlZEFycmF5QnVmZmVyKHZhbHVlKSk7XG4gICAgfVxuICAgIGV4cG9ydHMuaXNBbnlBcnJheUJ1ZmZlciA9IGlzQW55QXJyYXlCdWZmZXI7XG4gICAgW1wiaXNQcm94eVwiLCBcImlzRXh0ZXJuYWxcIiwgXCJpc01vZHVsZU5hbWVzcGFjZU9iamVjdFwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG1ldGhvZCwge1xuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXRob2QgKyBcIiBpcyBub3Qgc3VwcG9ydGVkIGluIHVzZXJsYW5kXCIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSkodHlwZXMpO1xuICByZXR1cm4gdHlwZXM7XG59XG52YXIgaXNCdWZmZXJCcm93c2VyO1xudmFyIGhhc1JlcXVpcmVkSXNCdWZmZXJCcm93c2VyO1xuZnVuY3Rpb24gcmVxdWlyZUlzQnVmZmVyQnJvd3NlcigpIHtcbiAgaWYgKGhhc1JlcXVpcmVkSXNCdWZmZXJCcm93c2VyKSByZXR1cm4gaXNCdWZmZXJCcm93c2VyO1xuICBoYXNSZXF1aXJlZElzQnVmZmVyQnJvd3NlciA9IDE7XG4gIGlzQnVmZmVyQnJvd3NlciA9IGZ1bmN0aW9uIGlzQnVmZmVyKGFyZykge1xuICAgIHJldHVybiBhcmcgJiYgdHlwZW9mIGFyZyA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgYXJnLmNvcHkgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgYXJnLmZpbGwgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgYXJnLnJlYWRVSW50OCA9PT0gXCJmdW5jdGlvblwiO1xuICB9O1xuICByZXR1cm4gaXNCdWZmZXJCcm93c2VyO1xufVxudmFyIGhhc1JlcXVpcmVkVXRpbDtcbmZ1bmN0aW9uIHJlcXVpcmVVdGlsKCkge1xuICBpZiAoaGFzUmVxdWlyZWRVdGlsKSByZXR1cm4gdXRpbDtcbiAgaGFzUmVxdWlyZWRVdGlsID0gMTtcbiAgKGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMyKG9iaikge1xuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgICAgdmFyIGRlc2NyaXB0b3JzID0ge307XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZGVzY3JpcHRvcnNba2V5c1tpXV0gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5c1tpXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVzY3JpcHRvcnM7XG4gICAgfTtcbiAgICB2YXIgZm9ybWF0UmVnRXhwID0gLyVbc2RqJV0vZztcbiAgICBleHBvcnRzLmZvcm1hdCA9IGZ1bmN0aW9uKGYyKSB7XG4gICAgICBpZiAoIWlzU3RyaW5nKGYyKSkge1xuICAgICAgICB2YXIgb2JqZWN0cyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIG9iamVjdHMucHVzaChpbnNwZWN0KGFyZ3VtZW50c1tpXSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3RzLmpvaW4oXCIgXCIpO1xuICAgICAgfVxuICAgICAgdmFyIGkgPSAxO1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gICAgICB2YXIgc3RyID0gU3RyaW5nKGYyKS5yZXBsYWNlKGZvcm1hdFJlZ0V4cCwgZnVuY3Rpb24oeDIpIHtcbiAgICAgICAgaWYgKHgyID09PSBcIiUlXCIpIHJldHVybiBcIiVcIjtcbiAgICAgICAgaWYgKGkgPj0gbGVuKSByZXR1cm4geDI7XG4gICAgICAgIHN3aXRjaCAoeDIpIHtcbiAgICAgICAgICBjYXNlIFwiJXNcIjpcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcoYXJnc1tpKytdKTtcbiAgICAgICAgICBjYXNlIFwiJWRcIjpcbiAgICAgICAgICAgIHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcbiAgICAgICAgICBjYXNlIFwiJWpcIjpcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmdzW2krK10pO1xuICAgICAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgICAgICByZXR1cm4gXCJbQ2lyY3VsYXJdXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiB4MjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBmb3IgKHZhciB4ID0gYXJnc1tpXTsgaSA8IGxlbjsgeCA9IGFyZ3NbKytpXSkge1xuICAgICAgICBpZiAoaXNOdWxsKHgpIHx8ICFpc09iamVjdCh4KSkge1xuICAgICAgICAgIHN0ciArPSBcIiBcIiArIHg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyICs9IFwiIFwiICsgaW5zcGVjdCh4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9O1xuICAgIGV4cG9ydHMuZGVwcmVjYXRlID0gZnVuY3Rpb24oZm4sIG1zZykge1xuICAgICAgaWYgKHR5cGVvZiBwcm9jZXNzJDEgIT09IFwidW5kZWZpbmVkXCIgJiYgcHJvY2VzcyQxLm5vRGVwcmVjYXRpb24gPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIGZuO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBwcm9jZXNzJDEgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBleHBvcnRzLmRlcHJlY2F0ZShmbiwgbXNnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICAgICAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHtcbiAgICAgICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgICAgICBpZiAocHJvY2VzcyQxLnRocm93RGVwcmVjYXRpb24pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgICAgIH0gZWxzZSBpZiAocHJvY2VzcyQxLnRyYWNlRGVwcmVjYXRpb24pIHtcbiAgICAgICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihtc2cpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB3YXJuZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlcHJlY2F0ZWQ7XG4gICAgfTtcbiAgICB2YXIgZGVidWdzID0ge307XG4gICAgdmFyIGRlYnVnRW52UmVnZXggPSAvXiQvO1xuICAgIGlmIChwcm9jZXNzJDEuZW52Lk5PREVfREVCVUcpIHtcbiAgICAgIHZhciBkZWJ1Z0VudiA9IHByb2Nlc3MkMS5lbnYuTk9ERV9ERUJVRztcbiAgICAgIGRlYnVnRW52ID0gZGVidWdFbnYucmVwbGFjZSgvW3xcXFxce30oKVtcXF1eJCs/Ll0vZywgXCJcXFxcJCZcIikucmVwbGFjZSgvXFwqL2csIFwiLipcIikucmVwbGFjZSgvLC9nLCBcIiR8XlwiKS50b1VwcGVyQ2FzZSgpO1xuICAgICAgZGVidWdFbnZSZWdleCA9IG5ldyBSZWdFeHAoXCJeXCIgKyBkZWJ1Z0VudiArIFwiJFwiLCBcImlcIik7XG4gICAgfVxuICAgIGV4cG9ydHMuZGVidWdsb2cgPSBmdW5jdGlvbihzZXQpIHtcbiAgICAgIHNldCA9IHNldC50b1VwcGVyQ2FzZSgpO1xuICAgICAgaWYgKCFkZWJ1Z3Nbc2V0XSkge1xuICAgICAgICBpZiAoZGVidWdFbnZSZWdleC50ZXN0KHNldCkpIHtcbiAgICAgICAgICB2YXIgcGlkID0gcHJvY2VzcyQxLnBpZDtcbiAgICAgICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIG1zZyA9IGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiJXMgJWQ6ICVzXCIsIHNldCwgcGlkLCBtc2cpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVidWdzW3NldF07XG4gICAgfTtcbiAgICBmdW5jdGlvbiBpbnNwZWN0KG9iaiwgb3B0cykge1xuICAgICAgdmFyIGN0eCA9IHtcbiAgICAgICAgc2VlbjogW10sXG4gICAgICAgIHN0eWxpemU6IHN0eWxpemVOb0NvbG9yXG4gICAgICB9O1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgY3R4LmRlcHRoID0gYXJndW1lbnRzWzJdO1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gNCkgY3R4LmNvbG9ycyA9IGFyZ3VtZW50c1szXTtcbiAgICAgIGlmIChpc0Jvb2xlYW4ob3B0cykpIHtcbiAgICAgICAgY3R4LnNob3dIaWRkZW4gPSBvcHRzO1xuICAgICAgfSBlbHNlIGlmIChvcHRzKSB7XG4gICAgICAgIGV4cG9ydHMuX2V4dGVuZChjdHgsIG9wdHMpO1xuICAgICAgfVxuICAgICAgaWYgKGlzVW5kZWZpbmVkKGN0eC5zaG93SGlkZGVuKSkgY3R4LnNob3dIaWRkZW4gPSBmYWxzZTtcbiAgICAgIGlmIChpc1VuZGVmaW5lZChjdHguZGVwdGgpKSBjdHguZGVwdGggPSAyO1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jb2xvcnMpKSBjdHguY29sb3JzID0gZmFsc2U7XG4gICAgICBpZiAoaXNVbmRlZmluZWQoY3R4LmN1c3RvbUluc3BlY3QpKSBjdHguY3VzdG9tSW5zcGVjdCA9IHRydWU7XG4gICAgICBpZiAoY3R4LmNvbG9ycykgY3R4LnN0eWxpemUgPSBzdHlsaXplV2l0aENvbG9yO1xuICAgICAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCBjdHguZGVwdGgpO1xuICAgIH1cbiAgICBleHBvcnRzLmluc3BlY3QgPSBpbnNwZWN0O1xuICAgIGluc3BlY3QuY29sb3JzID0ge1xuICAgICAgXCJib2xkXCI6IFsxLCAyMl0sXG4gICAgICBcIml0YWxpY1wiOiBbMywgMjNdLFxuICAgICAgXCJ1bmRlcmxpbmVcIjogWzQsIDI0XSxcbiAgICAgIFwiaW52ZXJzZVwiOiBbNywgMjddLFxuICAgICAgXCJ3aGl0ZVwiOiBbMzcsIDM5XSxcbiAgICAgIFwiZ3JleVwiOiBbOTAsIDM5XSxcbiAgICAgIFwiYmxhY2tcIjogWzMwLCAzOV0sXG4gICAgICBcImJsdWVcIjogWzM0LCAzOV0sXG4gICAgICBcImN5YW5cIjogWzM2LCAzOV0sXG4gICAgICBcImdyZWVuXCI6IFszMiwgMzldLFxuICAgICAgXCJtYWdlbnRhXCI6IFszNSwgMzldLFxuICAgICAgXCJyZWRcIjogWzMxLCAzOV0sXG4gICAgICBcInllbGxvd1wiOiBbMzMsIDM5XVxuICAgIH07XG4gICAgaW5zcGVjdC5zdHlsZXMgPSB7XG4gICAgICBcInNwZWNpYWxcIjogXCJjeWFuXCIsXG4gICAgICBcIm51bWJlclwiOiBcInllbGxvd1wiLFxuICAgICAgXCJib29sZWFuXCI6IFwieWVsbG93XCIsXG4gICAgICBcInVuZGVmaW5lZFwiOiBcImdyZXlcIixcbiAgICAgIFwibnVsbFwiOiBcImJvbGRcIixcbiAgICAgIFwic3RyaW5nXCI6IFwiZ3JlZW5cIixcbiAgICAgIFwiZGF0ZVwiOiBcIm1hZ2VudGFcIixcbiAgICAgIC8vIFwibmFtZVwiOiBpbnRlbnRpb25hbGx5IG5vdCBzdHlsaW5nXG4gICAgICBcInJlZ2V4cFwiOiBcInJlZFwiXG4gICAgfTtcbiAgICBmdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gICAgICB2YXIgc3R5bGUgPSBpbnNwZWN0LnN0eWxlc1tzdHlsZVR5cGVdO1xuICAgICAgaWYgKHN0eWxlKSB7XG4gICAgICAgIHJldHVybiBcIlxceDFCW1wiICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzBdICsgXCJtXCIgKyBzdHIgKyBcIlxceDFCW1wiICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgXCJtXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzdHlsaXplTm9Db2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgZnVuY3Rpb24gYXJyYXlUb0hhc2goYXJyYXkpIHtcbiAgICAgIHZhciBoYXNoMiA9IHt9O1xuICAgICAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbih2YWwsIGlkeCkge1xuICAgICAgICBoYXNoMlt2YWxdID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGhhc2gyO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb3JtYXRWYWx1ZShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMpIHtcbiAgICAgIGlmIChjdHguY3VzdG9tSW5zcGVjdCAmJiB2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmluc3BlY3QpICYmIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbFxuICAgICAgdmFsdWUuaW5zcGVjdCAhPT0gZXhwb3J0cy5pbnNwZWN0ICYmIC8vIEFsc28gZmlsdGVyIG91dCBhbnkgcHJvdG90eXBlIG9iamVjdHMgdXNpbmcgdGhlIGNpcmN1bGFyIGNoZWNrLlxuICAgICAgISh2YWx1ZS5jb25zdHJ1Y3RvciAmJiB2YWx1ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgPT09IHZhbHVlKSkge1xuICAgICAgICB2YXIgcmV0ID0gdmFsdWUuaW5zcGVjdChyZWN1cnNlVGltZXMsIGN0eCk7XG4gICAgICAgIGlmICghaXNTdHJpbmcocmV0KSkge1xuICAgICAgICAgIHJldCA9IGZvcm1hdFZhbHVlKGN0eCwgcmV0LCByZWN1cnNlVGltZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG4gICAgICB2YXIgcHJpbWl0aXZlID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpO1xuICAgICAgaWYgKHByaW1pdGl2ZSkge1xuICAgICAgICByZXR1cm4gcHJpbWl0aXZlO1xuICAgICAgfVxuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gICAgICB2YXIgdmlzaWJsZUtleXMgPSBhcnJheVRvSGFzaChrZXlzKTtcbiAgICAgIGlmIChjdHguc2hvd0hpZGRlbikge1xuICAgICAgICBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKGlzRXJyb3IodmFsdWUpICYmIChrZXlzLmluZGV4T2YoXCJtZXNzYWdlXCIpID49IDAgfHwga2V5cy5pbmRleE9mKFwiZGVzY3JpcHRpb25cIikgPj0gMCkpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgICAgICB2YXIgbmFtZSA9IHZhbHVlLm5hbWUgPyBcIjogXCIgKyB2YWx1ZS5uYW1lIDogXCJcIjtcbiAgICAgICAgICByZXR1cm4gY3R4LnN0eWxpemUoXCJbRnVuY3Rpb25cIiArIG5hbWUgKyBcIl1cIiwgXCJzcGVjaWFsXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgXCJyZWdleHBcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gY3R4LnN0eWxpemUoRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksIFwiZGF0ZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgYmFzZSA9IFwiXCIsIGFycmF5ID0gZmFsc2UsIGJyYWNlcyA9IFtcIntcIiwgXCJ9XCJdO1xuICAgICAgaWYgKGlzQXJyYXkyKHZhbHVlKSkge1xuICAgICAgICBhcnJheSA9IHRydWU7XG4gICAgICAgIGJyYWNlcyA9IFtcIltcIiwgXCJdXCJdO1xuICAgICAgfVxuICAgICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgIHZhciBuID0gdmFsdWUubmFtZSA/IFwiOiBcIiArIHZhbHVlLm5hbWUgOiBcIlwiO1xuICAgICAgICBiYXNlID0gXCIgW0Z1bmN0aW9uXCIgKyBuICsgXCJdXCI7XG4gICAgICB9XG4gICAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICAgIGJhc2UgPSBcIiBcIiArIFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgICAgICBiYXNlID0gXCIgXCIgKyBEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgICAgICBiYXNlID0gXCIgXCIgKyBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoa2V5cy5sZW5ndGggPT09IDAgJiYgKCFhcnJheSB8fCB2YWx1ZS5sZW5ndGggPT0gMCkpIHtcbiAgICAgICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gICAgICB9XG4gICAgICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuICAgICAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksIFwicmVnZXhwXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBjdHguc3R5bGl6ZShcIltPYmplY3RdXCIsIFwic3BlY2lhbFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY3R4LnNlZW4ucHVzaCh2YWx1ZSk7XG4gICAgICB2YXIgb3V0cHV0O1xuICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0ID0ga2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGN0eC5zZWVuLnBvcCgpO1xuICAgICAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpIHtcbiAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpXG4gICAgICAgIHJldHVybiBjdHguc3R5bGl6ZShcInVuZGVmaW5lZFwiLCBcInVuZGVmaW5lZFwiKTtcbiAgICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIHNpbXBsZSA9IFwiJ1wiICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpLnJlcGxhY2UoL15cInxcIiQvZywgXCJcIikucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKSArIFwiJ1wiO1xuICAgICAgICByZXR1cm4gY3R4LnN0eWxpemUoc2ltcGxlLCBcInN0cmluZ1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc051bWJlcih2YWx1ZSkpXG4gICAgICAgIHJldHVybiBjdHguc3R5bGl6ZShcIlwiICsgdmFsdWUsIFwibnVtYmVyXCIpO1xuICAgICAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpXG4gICAgICAgIHJldHVybiBjdHguc3R5bGl6ZShcIlwiICsgdmFsdWUsIFwiYm9vbGVhblwiKTtcbiAgICAgIGlmIChpc051bGwodmFsdWUpKVxuICAgICAgICByZXR1cm4gY3R4LnN0eWxpemUoXCJudWxsXCIsIFwibnVsbFwiKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZm9ybWF0RXJyb3IodmFsdWUpIHtcbiAgICAgIHJldHVybiBcIltcIiArIEVycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSArIFwiXVwiO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKSB7XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkodmFsdWUsIFN0cmluZyhpKSkpIHtcbiAgICAgICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShcbiAgICAgICAgICAgIGN0eCxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgcmVjdXJzZVRpbWVzLFxuICAgICAgICAgICAgdmlzaWJsZUtleXMsXG4gICAgICAgICAgICBTdHJpbmcoaSksXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICAgKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2goXCJcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKCFrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoXG4gICAgICAgICAgICBjdHgsXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIHJlY3Vyc2VUaW1lcyxcbiAgICAgICAgICAgIHZpc2libGVLZXlzLFxuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpIHtcbiAgICAgIHZhciBuYW1lLCBzdHIsIGRlc2M7XG4gICAgICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCB7IHZhbHVlOiB2YWx1ZVtrZXldIH07XG4gICAgICBpZiAoZGVzYy5nZXQpIHtcbiAgICAgICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICAgICAgc3RyID0gY3R4LnN0eWxpemUoXCJbR2V0dGVyL1NldHRlcl1cIiwgXCJzcGVjaWFsXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciA9IGN0eC5zdHlsaXplKFwiW0dldHRlcl1cIiwgXCJzcGVjaWFsXCIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgICAgICBzdHIgPSBjdHguc3R5bGl6ZShcIltTZXR0ZXJdXCIsIFwic3BlY2lhbFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2aXNpYmxlS2V5cywga2V5KSkge1xuICAgICAgICBuYW1lID0gXCJbXCIgKyBrZXkgKyBcIl1cIjtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyKSB7XG4gICAgICAgIGlmIChjdHguc2Vlbi5pbmRleE9mKGRlc2MudmFsdWUpIDwgMCkge1xuICAgICAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkge1xuICAgICAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCBudWxsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCByZWN1cnNlVGltZXMgLSAxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN0ci5pbmRleE9mKFwiXFxuXCIpID4gLTEpIHtcbiAgICAgICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgICAgICBzdHIgPSBzdHIuc3BsaXQoXCJcXG5cIikubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCIgIFwiICsgbGluZTtcbiAgICAgICAgICAgICAgfSkuam9pbihcIlxcblwiKS5zbGljZSgyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN0ciA9IFwiXFxuXCIgKyBzdHIuc3BsaXQoXCJcXG5cIikubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCIgICBcIiArIGxpbmU7XG4gICAgICAgICAgICAgIH0pLmpvaW4oXCJcXG5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciA9IGN0eC5zdHlsaXplKFwiW0NpcmN1bGFyXVwiLCBcInNwZWNpYWxcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc1VuZGVmaW5lZChuYW1lKSkge1xuICAgICAgICBpZiAoYXJyYXkgJiYga2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgICAgIHJldHVybiBzdHI7XG4gICAgICAgIH1cbiAgICAgICAgbmFtZSA9IEpTT04uc3RyaW5naWZ5KFwiXCIgKyBrZXkpO1xuICAgICAgICBpZiAobmFtZS5tYXRjaCgvXlwiKFthLXpBLVpfXVthLXpBLVpfMC05XSopXCIkLykpIHtcbiAgICAgICAgICBuYW1lID0gbmFtZS5zbGljZSgxLCAtMSk7XG4gICAgICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsIFwibmFtZVwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIikucmVwbGFjZSgvXFxcXFwiL2csICdcIicpLnJlcGxhY2UoLyheXCJ8XCIkKS9nLCBcIidcIik7XG4gICAgICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsIFwic3RyaW5nXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmFtZSArIFwiOiBcIiArIHN0cjtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBvdXRwdXQucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cikge1xuICAgICAgICBpZiAoY3VyLmluZGV4T2YoXCJcXG5cIikgPj0gMCkgO1xuICAgICAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXHUwMDFiXFxbXFxkXFxkP20vZywgXCJcIikubGVuZ3RoICsgMTtcbiAgICAgIH0sIDApO1xuICAgICAgaWYgKGxlbmd0aCA+IDYwKSB7XG4gICAgICAgIHJldHVybiBicmFjZXNbMF0gKyAoYmFzZSA9PT0gXCJcIiA/IFwiXCIgOiBiYXNlICsgXCJcXG4gXCIpICsgXCIgXCIgKyBvdXRwdXQuam9pbihcIixcXG4gIFwiKSArIFwiIFwiICsgYnJhY2VzWzFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBcIiBcIiArIG91dHB1dC5qb2luKFwiLCBcIikgKyBcIiBcIiArIGJyYWNlc1sxXTtcbiAgICB9XG4gICAgZXhwb3J0cy50eXBlcyA9IHJlcXVpcmVUeXBlcygpO1xuICAgIGZ1bmN0aW9uIGlzQXJyYXkyKGFyKSB7XG4gICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhcik7XG4gICAgfVxuICAgIGV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXkyO1xuICAgIGZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgYXJnID09PSBcImJvb2xlYW5cIjtcbiAgICB9XG4gICAgZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG4gICAgZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICAgICAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbiAgICB9XG4gICAgZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG4gICAgZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gICAgICByZXR1cm4gYXJnID09IG51bGw7XG4gICAgfVxuICAgIGV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcbiAgICBmdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgYXJnID09PSBcIm51bWJlclwiO1xuICAgIH1cbiAgICBleHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG4gICAgZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gXCJzdHJpbmdcIjtcbiAgICB9XG4gICAgZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuICAgIGZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICAgICAgcmV0dXJuIHR5cGVvZiBhcmcgPT09IFwic3ltYm9sXCI7XG4gICAgfVxuICAgIGV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcbiAgICBmdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgICAgIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbiAgICB9XG4gICAgZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuICAgIGZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3QocmUpICYmIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gXCJbb2JqZWN0IFJlZ0V4cF1cIjtcbiAgICB9XG4gICAgZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuICAgIGV4cG9ydHMudHlwZXMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcbiAgICBmdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgYXJnID09PSBcIm9iamVjdFwiICYmIGFyZyAhPT0gbnVsbDtcbiAgICB9XG4gICAgZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuICAgIGZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3QoZCkgJiYgb2JqZWN0VG9TdHJpbmcoZCkgPT09IFwiW29iamVjdCBEYXRlXVwiO1xuICAgIH1cbiAgICBleHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcbiAgICBleHBvcnRzLnR5cGVzLmlzRGF0ZSA9IGlzRGF0ZTtcbiAgICBmdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdChlKSAmJiAob2JqZWN0VG9TdHJpbmcoZSkgPT09IFwiW29iamVjdCBFcnJvcl1cIiB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xuICAgIH1cbiAgICBleHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuICAgIGV4cG9ydHMudHlwZXMuaXNOYXRpdmVFcnJvciA9IGlzRXJyb3I7XG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgYXJnID09PSBcImZ1bmN0aW9uXCI7XG4gICAgfVxuICAgIGV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG4gICAgZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gICAgICByZXR1cm4gYXJnID09PSBudWxsIHx8IHR5cGVvZiBhcmcgPT09IFwiYm9vbGVhblwiIHx8IHR5cGVvZiBhcmcgPT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIGFyZyA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgYXJnID09PSBcInN5bWJvbFwiIHx8IC8vIEVTNiBzeW1ib2xcbiAgICAgIHR5cGVvZiBhcmcgPT09IFwidW5kZWZpbmVkXCI7XG4gICAgfVxuICAgIGV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcbiAgICBleHBvcnRzLmlzQnVmZmVyID0gcmVxdWlyZUlzQnVmZmVyQnJvd3NlcigpO1xuICAgIGZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhZDIobikge1xuICAgICAgcmV0dXJuIG4gPCAxMCA/IFwiMFwiICsgbi50b1N0cmluZygxMCkgOiBuLnRvU3RyaW5nKDEwKTtcbiAgICB9XG4gICAgdmFyIG1vbnRocyA9IFtcbiAgICAgIFwiSmFuXCIsXG4gICAgICBcIkZlYlwiLFxuICAgICAgXCJNYXJcIixcbiAgICAgIFwiQXByXCIsXG4gICAgICBcIk1heVwiLFxuICAgICAgXCJKdW5cIixcbiAgICAgIFwiSnVsXCIsXG4gICAgICBcIkF1Z1wiLFxuICAgICAgXCJTZXBcIixcbiAgICAgIFwiT2N0XCIsXG4gICAgICBcIk5vdlwiLFxuICAgICAgXCJEZWNcIlxuICAgIF07XG4gICAgZnVuY3Rpb24gdGltZXN0YW1wKCkge1xuICAgICAgdmFyIGQgPSAvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKTtcbiAgICAgIHZhciB0aW1lID0gW1xuICAgICAgICBwYWQyKGQuZ2V0SG91cnMoKSksXG4gICAgICAgIHBhZDIoZC5nZXRNaW51dGVzKCkpLFxuICAgICAgICBwYWQyKGQuZ2V0U2Vjb25kcygpKVxuICAgICAgXS5qb2luKFwiOlwiKTtcbiAgICAgIHJldHVybiBbZC5nZXREYXRlKCksIG1vbnRoc1tkLmdldE1vbnRoKCldLCB0aW1lXS5qb2luKFwiIFwiKTtcbiAgICB9XG4gICAgZXhwb3J0cy5sb2cgPSBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiJXMgLSAlc1wiLCB0aW1lc3RhbXAoKSwgZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgICBleHBvcnRzLmluaGVyaXRzID0gaW5oZXJpdHNfYnJvd3NlckV4cG9ydHM7XG4gICAgZXhwb3J0cy5fZXh0ZW5kID0gZnVuY3Rpb24ob3JpZ2luLCBhZGQpIHtcbiAgICAgIGlmICghYWRkIHx8ICFpc09iamVjdChhZGQpKSByZXR1cm4gb3JpZ2luO1xuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhZGQpO1xuICAgICAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgb3JpZ2luW2tleXNbaV1dID0gYWRkW2tleXNbaV1dO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9yaWdpbjtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xuICAgIH1cbiAgICB2YXIga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbChcInV0aWwucHJvbWlzaWZ5LmN1c3RvbVwiKSA6IHZvaWQgMDtcbiAgICBleHBvcnRzLnByb21pc2lmeSA9IGZ1bmN0aW9uIHByb21pc2lmeShvcmlnaW5hbCkge1xuICAgICAgaWYgKHR5cGVvZiBvcmlnaW5hbCAhPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJvcmlnaW5hbFwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbicpO1xuICAgICAgaWYgKGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCAmJiBvcmlnaW5hbFtrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2xdKSB7XG4gICAgICAgIHZhciBmbiA9IG9yaWdpbmFsW2tDdXN0b21Qcm9taXNpZmllZFN5bWJvbF07XG4gICAgICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcInV0aWwucHJvbWlzaWZ5LmN1c3RvbVwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sLCB7XG4gICAgICAgICAgdmFsdWU6IGZuLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmbjtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGZuKCkge1xuICAgICAgICB2YXIgcHJvbWlzZVJlc29sdmUsIHByb21pc2VSZWplY3Q7XG4gICAgICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZTIsIHJlamVjdCkge1xuICAgICAgICAgIHByb21pc2VSZXNvbHZlID0gcmVzb2x2ZTI7XG4gICAgICAgICAgcHJvbWlzZVJlamVjdCA9IHJlamVjdDtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgYXJncy5wdXNoKGZ1bmN0aW9uKGVyciwgdmFsdWUpIHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBwcm9taXNlUmVqZWN0KGVycik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb21pc2VSZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBwcm9taXNlUmVqZWN0KGVycik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICB9XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZm4sIE9iamVjdC5nZXRQcm90b3R5cGVPZihvcmlnaW5hbCkpO1xuICAgICAgaWYgKGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCkgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wsIHtcbiAgICAgICAgdmFsdWU6IGZuLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFxuICAgICAgICBmbixcbiAgICAgICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvcmlnaW5hbClcbiAgICAgICk7XG4gICAgfTtcbiAgICBleHBvcnRzLnByb21pc2lmeS5jdXN0b20gPSBrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2w7XG4gICAgZnVuY3Rpb24gY2FsbGJhY2tpZnlPblJlamVjdGVkKHJlYXNvbiwgY2IpIHtcbiAgICAgIGlmICghcmVhc29uKSB7XG4gICAgICAgIHZhciBuZXdSZWFzb24gPSBuZXcgRXJyb3IoXCJQcm9taXNlIHdhcyByZWplY3RlZCB3aXRoIGEgZmFsc3kgdmFsdWVcIik7XG4gICAgICAgIG5ld1JlYXNvbi5yZWFzb24gPSByZWFzb247XG4gICAgICAgIHJlYXNvbiA9IG5ld1JlYXNvbjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjYihyZWFzb24pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjYWxsYmFja2lmeShvcmlnaW5hbCkge1xuICAgICAgaWYgKHR5cGVvZiBvcmlnaW5hbCAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcIm9yaWdpbmFsXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBjYWxsYmFja2lmaWVkKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtYXliZUNiID0gYXJncy5wb3AoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBtYXliZUNiICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlIGxhc3QgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzZWxmMiA9IHRoaXM7XG4gICAgICAgIHZhciBjYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBtYXliZUNiLmFwcGx5KHNlbGYyLCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgICAgICBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKS50aGVuKFxuICAgICAgICAgIGZ1bmN0aW9uKHJldCkge1xuICAgICAgICAgICAgcHJvY2VzcyQxLm5leHRUaWNrKGNiLmJpbmQobnVsbCwgbnVsbCwgcmV0KSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBmdW5jdGlvbihyZWopIHtcbiAgICAgICAgICAgIHByb2Nlc3MkMS5uZXh0VGljayhjYWxsYmFja2lmeU9uUmVqZWN0ZWQuYmluZChudWxsLCByZWosIGNiKSk7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGNhbGxiYWNraWZpZWQsIE9iamVjdC5nZXRQcm90b3R5cGVPZihvcmlnaW5hbCkpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoXG4gICAgICAgIGNhbGxiYWNraWZpZWQsXG4gICAgICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob3JpZ2luYWwpXG4gICAgICApO1xuICAgICAgcmV0dXJuIGNhbGxiYWNraWZpZWQ7XG4gICAgfVxuICAgIGV4cG9ydHMuY2FsbGJhY2tpZnkgPSBjYWxsYmFja2lmeTtcbiAgfSkodXRpbCk7XG4gIHJldHVybiB1dGlsO1xufVxudmFyIGJ1ZmZlcl9saXN0O1xudmFyIGhhc1JlcXVpcmVkQnVmZmVyX2xpc3Q7XG5mdW5jdGlvbiByZXF1aXJlQnVmZmVyX2xpc3QoKSB7XG4gIGlmIChoYXNSZXF1aXJlZEJ1ZmZlcl9saXN0KSByZXR1cm4gYnVmZmVyX2xpc3Q7XG4gIGhhc1JlcXVpcmVkQnVmZmVyX2xpc3QgPSAxO1xuICBmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG4gICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO1xuICAgICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24oc3ltKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgfSk7XG4gICAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gICAgfVxuICAgIHJldHVybiBrZXlzO1xuICB9XG4gIGZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgICAgaWYgKGkgJSAyKSB7XG4gICAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH1cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH1cbiAgdmFyIF9yZXF1aXJlID0gcmVxdWlyZUJ1ZmZlcigpLCBCdWZmZXIyID0gX3JlcXVpcmUuQnVmZmVyO1xuICB2YXIgX3JlcXVpcmUyID0gcmVxdWlyZVV0aWwoKSwgaW5zcGVjdCA9IF9yZXF1aXJlMi5pbnNwZWN0O1xuICB2YXIgY3VzdG9tID0gaW5zcGVjdCAmJiBpbnNwZWN0LmN1c3RvbSB8fCBcImluc3BlY3RcIjtcbiAgZnVuY3Rpb24gY29weUJ1ZmZlcihzcmMsIHRhcmdldCwgb2Zmc2V0KSB7XG4gICAgQnVmZmVyMi5wcm90b3R5cGUuY29weS5jYWxsKHNyYywgdGFyZ2V0LCBvZmZzZXQpO1xuICB9XG4gIGJ1ZmZlcl9saXN0ID0gLyogQF9fUFVSRV9fICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIEJ1ZmZlckxpc3QoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnVmZmVyTGlzdCk7XG4gICAgICB0aGlzLmhlYWQgPSBudWxsO1xuICAgICAgdGhpcy50YWlsID0gbnVsbDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICB9XG4gICAgX2NyZWF0ZUNsYXNzKEJ1ZmZlckxpc3QsIFt7XG4gICAgICBrZXk6IFwicHVzaFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHB1c2godikge1xuICAgICAgICB2YXIgZW50cnkgPSB7XG4gICAgICAgICAgZGF0YTogdixcbiAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHRoaXMudGFpbC5uZXh0ID0gZW50cnk7XG4gICAgICAgIGVsc2UgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgICAgIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgICAgICArK3RoaXMubGVuZ3RoO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ1bnNoaWZ0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdW5zaGlmdCh2KSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHtcbiAgICAgICAgICBkYXRhOiB2LFxuICAgICAgICAgIG5leHQ6IHRoaXMuaGVhZFxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgICAgICB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICAgICAgKyt0aGlzLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2hpZnRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzaGlmdCgpIHtcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICAgIHZhciByZXQgPSB0aGlzLmhlYWQuZGF0YTtcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgICAgICBlbHNlIHRoaXMuaGVhZCA9IHRoaXMuaGVhZC5uZXh0O1xuICAgICAgICAtLXRoaXMubGVuZ3RoO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjbGVhclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImpvaW5cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBqb2luKHMyKSB7XG4gICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIFwiXCI7XG4gICAgICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgICAgICB2YXIgcmV0ID0gXCJcIiArIHAuZGF0YTtcbiAgICAgICAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICAgICAgICByZXQgKz0gczIgKyBwLmRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY29uY2F0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY29uY2F0KG4pIHtcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gQnVmZmVyMi5hbGxvYygwKTtcbiAgICAgICAgdmFyIHJldCA9IEJ1ZmZlcjIuYWxsb2NVbnNhZmUobiA+Pj4gMCk7XG4gICAgICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChwKSB7XG4gICAgICAgICAgY29weUJ1ZmZlcihwLmRhdGEsIHJldCwgaSk7XG4gICAgICAgICAgaSArPSBwLmRhdGEubGVuZ3RoO1xuICAgICAgICAgIHAgPSBwLm5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cbiAgICAgIC8vIENvbnN1bWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBieXRlcyBvciBjaGFyYWN0ZXJzIGZyb20gdGhlIGJ1ZmZlcmVkIGRhdGEuXG4gICAgfSwge1xuICAgICAga2V5OiBcImNvbnN1bWVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb25zdW1lKG4sIGhhc1N0cmluZ3MpIHtcbiAgICAgICAgdmFyIHJldDtcbiAgICAgICAgaWYgKG4gPCB0aGlzLmhlYWQuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICByZXQgPSB0aGlzLmhlYWQuZGF0YS5zbGljZSgwLCBuKTtcbiAgICAgICAgICB0aGlzLmhlYWQuZGF0YSA9IHRoaXMuaGVhZC5kYXRhLnNsaWNlKG4pO1xuICAgICAgICB9IGVsc2UgaWYgKG4gPT09IHRoaXMuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgICAgICAgIHJldCA9IHRoaXMuc2hpZnQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXQgPSBoYXNTdHJpbmdzID8gdGhpcy5fZ2V0U3RyaW5nKG4pIDogdGhpcy5fZ2V0QnVmZmVyKG4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImZpcnN0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZmlyc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhlYWQuZGF0YTtcbiAgICAgIH1cbiAgICAgIC8vIENvbnN1bWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBjaGFyYWN0ZXJzIGZyb20gdGhlIGJ1ZmZlcmVkIGRhdGEuXG4gICAgfSwge1xuICAgICAga2V5OiBcIl9nZXRTdHJpbmdcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0U3RyaW5nKG4pIHtcbiAgICAgICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgICAgIHZhciBjID0gMTtcbiAgICAgICAgdmFyIHJldCA9IHAuZGF0YTtcbiAgICAgICAgbiAtPSByZXQubGVuZ3RoO1xuICAgICAgICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgICAgICAgIHZhciBzdHIgPSBwLmRhdGE7XG4gICAgICAgICAgdmFyIG5iID0gbiA+IHN0ci5sZW5ndGggPyBzdHIubGVuZ3RoIDogbjtcbiAgICAgICAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHJldCArPSBzdHI7XG4gICAgICAgICAgZWxzZSByZXQgKz0gc3RyLnNsaWNlKDAsIG4pO1xuICAgICAgICAgIG4gLT0gbmI7XG4gICAgICAgICAgaWYgKG4gPT09IDApIHtcbiAgICAgICAgICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgICArK2M7XG4gICAgICAgICAgICAgIGlmIChwLm5leHQpIHRoaXMuaGVhZCA9IHAubmV4dDtcbiAgICAgICAgICAgICAgZWxzZSB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5oZWFkID0gcDtcbiAgICAgICAgICAgICAgcC5kYXRhID0gc3RyLnNsaWNlKG5iKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICArK2M7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sZW5ndGggLT0gYztcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cbiAgICAgIC8vIENvbnN1bWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBieXRlcyBmcm9tIHRoZSBidWZmZXJlZCBkYXRhLlxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfZ2V0QnVmZmVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2dldEJ1ZmZlcihuKSB7XG4gICAgICAgIHZhciByZXQgPSBCdWZmZXIyLmFsbG9jVW5zYWZlKG4pO1xuICAgICAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICAgICAgdmFyIGMgPSAxO1xuICAgICAgICBwLmRhdGEuY29weShyZXQpO1xuICAgICAgICBuIC09IHAuZGF0YS5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgICAgICAgdmFyIGJ1ZiA9IHAuZGF0YTtcbiAgICAgICAgICB2YXIgbmIgPSBuID4gYnVmLmxlbmd0aCA/IGJ1Zi5sZW5ndGggOiBuO1xuICAgICAgICAgIGJ1Zi5jb3B5KHJldCwgcmV0Lmxlbmd0aCAtIG4sIDAsIG5iKTtcbiAgICAgICAgICBuIC09IG5iO1xuICAgICAgICAgIGlmIChuID09PSAwKSB7XG4gICAgICAgICAgICBpZiAobmIgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgKytjO1xuICAgICAgICAgICAgICBpZiAocC5uZXh0KSB0aGlzLmhlYWQgPSBwLm5leHQ7XG4gICAgICAgICAgICAgIGVsc2UgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuaGVhZCA9IHA7XG4gICAgICAgICAgICAgIHAuZGF0YSA9IGJ1Zi5zbGljZShuYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgKytjO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGVuZ3RoIC09IGM7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG4gICAgICAvLyBNYWtlIHN1cmUgdGhlIGxpbmtlZCBsaXN0IG9ubHkgc2hvd3MgdGhlIG1pbmltYWwgbmVjZXNzYXJ5IGluZm9ybWF0aW9uLlxuICAgIH0sIHtcbiAgICAgIGtleTogY3VzdG9tLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKF8sIG9wdGlvbnMyKSB7XG4gICAgICAgIHJldHVybiBpbnNwZWN0KHRoaXMsIF9vYmplY3RTcHJlYWQoe30sIG9wdGlvbnMyLCB7XG4gICAgICAgICAgLy8gT25seSBpbnNwZWN0IG9uZSBsZXZlbC5cbiAgICAgICAgICBkZXB0aDogMCxcbiAgICAgICAgICAvLyBJdCBzaG91bGQgbm90IHJlY3Vyc2UuXG4gICAgICAgICAgY3VzdG9tSW5zcGVjdDogZmFsc2VcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gQnVmZmVyTGlzdDtcbiAgfSgpO1xuICByZXR1cm4gYnVmZmVyX2xpc3Q7XG59XG52YXIgZGVzdHJveV8xO1xudmFyIGhhc1JlcXVpcmVkRGVzdHJveTtcbmZ1bmN0aW9uIHJlcXVpcmVEZXN0cm95KCkge1xuICBpZiAoaGFzUmVxdWlyZWREZXN0cm95KSByZXR1cm4gZGVzdHJveV8xO1xuICBoYXNSZXF1aXJlZERlc3Ryb3kgPSAxO1xuICBmdW5jdGlvbiBkZXN0cm95KGVyciwgY2IpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciByZWFkYWJsZURlc3Ryb3llZCA9IHRoaXMuX3JlYWRhYmxlU3RhdGUgJiYgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gICAgdmFyIHdyaXRhYmxlRGVzdHJveWVkID0gdGhpcy5fd3JpdGFibGVTdGF0ZSAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgICBpZiAocmVhZGFibGVEZXN0cm95ZWQgfHwgd3JpdGFibGVEZXN0cm95ZWQpIHtcbiAgICAgIGlmIChjYikge1xuICAgICAgICBjYihlcnIpO1xuICAgICAgfSBlbHNlIGlmIChlcnIpIHtcbiAgICAgICAgaWYgKCF0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICAgICAgcHJvY2VzcyQxLm5leHRUaWNrKGVtaXRFcnJvck5ULCB0aGlzLCBlcnIpO1xuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCkge1xuICAgICAgICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICAgICAgICBwcm9jZXNzJDEubmV4dFRpY2soZW1pdEVycm9yTlQsIHRoaXMsIGVycik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICAgIH1cbiAgICB0aGlzLl9kZXN0cm95KGVyciB8fCBudWxsLCBmdW5jdGlvbihlcnIyKSB7XG4gICAgICBpZiAoIWNiICYmIGVycjIpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgICAgIHByb2Nlc3MkMS5uZXh0VGljayhlbWl0RXJyb3JBbmRDbG9zZU5ULCBfdGhpcywgZXJyMik7XG4gICAgICAgIH0gZWxzZSBpZiAoIV90aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCkge1xuICAgICAgICAgIF90aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgICAgICAgcHJvY2VzcyQxLm5leHRUaWNrKGVtaXRFcnJvckFuZENsb3NlTlQsIF90aGlzLCBlcnIyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzJDEubmV4dFRpY2soZW1pdENsb3NlTlQsIF90aGlzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjYikge1xuICAgICAgICBwcm9jZXNzJDEubmV4dFRpY2soZW1pdENsb3NlTlQsIF90aGlzKTtcbiAgICAgICAgY2IoZXJyMik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzJDEubmV4dFRpY2soZW1pdENsb3NlTlQsIF90aGlzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBmdW5jdGlvbiBlbWl0RXJyb3JBbmRDbG9zZU5UKHNlbGYyLCBlcnIpIHtcbiAgICBlbWl0RXJyb3JOVChzZWxmMiwgZXJyKTtcbiAgICBlbWl0Q2xvc2VOVChzZWxmMik7XG4gIH1cbiAgZnVuY3Rpb24gZW1pdENsb3NlTlQoc2VsZjIpIHtcbiAgICBpZiAoc2VsZjIuX3dyaXRhYmxlU3RhdGUgJiYgIXNlbGYyLl93cml0YWJsZVN0YXRlLmVtaXRDbG9zZSkgcmV0dXJuO1xuICAgIGlmIChzZWxmMi5fcmVhZGFibGVTdGF0ZSAmJiAhc2VsZjIuX3JlYWRhYmxlU3RhdGUuZW1pdENsb3NlKSByZXR1cm47XG4gICAgc2VsZjIuZW1pdChcImNsb3NlXCIpO1xuICB9XG4gIGZ1bmN0aW9uIHVuZGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkID0gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZmluYWxDYWxsZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUucHJlZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGVtaXRFcnJvck5UKHNlbGYyLCBlcnIpIHtcbiAgICBzZWxmMi5lbWl0KFwiZXJyb3JcIiwgZXJyKTtcbiAgfVxuICBmdW5jdGlvbiBlcnJvck9yRGVzdHJveShzdHJlYW0sIGVycikge1xuICAgIHZhciByU3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gICAgdmFyIHdTdGF0ZSA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTtcbiAgICBpZiAoclN0YXRlICYmIHJTdGF0ZS5hdXRvRGVzdHJveSB8fCB3U3RhdGUgJiYgd1N0YXRlLmF1dG9EZXN0cm95KSBzdHJlYW0uZGVzdHJveShlcnIpO1xuICAgIGVsc2Ugc3RyZWFtLmVtaXQoXCJlcnJvclwiLCBlcnIpO1xuICB9XG4gIGRlc3Ryb3lfMSA9IHtcbiAgICBkZXN0cm95LFxuICAgIHVuZGVzdHJveSxcbiAgICBlcnJvck9yRGVzdHJveVxuICB9O1xuICByZXR1cm4gZGVzdHJveV8xO1xufVxudmFyIGVycm9yc0Jyb3dzZXIgPSB7fTtcbnZhciBoYXNSZXF1aXJlZEVycm9yc0Jyb3dzZXI7XG5mdW5jdGlvbiByZXF1aXJlRXJyb3JzQnJvd3NlcigpIHtcbiAgaWYgKGhhc1JlcXVpcmVkRXJyb3JzQnJvd3NlcikgcmV0dXJuIGVycm9yc0Jyb3dzZXI7XG4gIGhhc1JlcXVpcmVkRXJyb3JzQnJvd3NlciA9IDE7XG4gIGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gICAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gICAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuICB2YXIgY29kZXMgPSB7fTtcbiAgZnVuY3Rpb24gY3JlYXRlRXJyb3JUeXBlKGNvZGUsIG1lc3NhZ2UsIEJhc2UpIHtcbiAgICBpZiAoIUJhc2UpIHtcbiAgICAgIEJhc2UgPSBFcnJvcjtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0TWVzc2FnZShhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbWVzc2FnZShhcmcxLCBhcmcyLCBhcmczKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIE5vZGVFcnJvciA9IC8qIEBfX1BVUkVfXyAqLyBmdW5jdGlvbihfQmFzZSkge1xuICAgICAgX2luaGVyaXRzTG9vc2UoTm9kZUVycm9yMiwgX0Jhc2UpO1xuICAgICAgZnVuY3Rpb24gTm9kZUVycm9yMihhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgICAgIHJldHVybiBfQmFzZS5jYWxsKHRoaXMsIGdldE1lc3NhZ2UoYXJnMSwgYXJnMiwgYXJnMykpIHx8IHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gTm9kZUVycm9yMjtcbiAgICB9KEJhc2UpO1xuICAgIE5vZGVFcnJvci5wcm90b3R5cGUubmFtZSA9IEJhc2UubmFtZTtcbiAgICBOb2RlRXJyb3IucHJvdG90eXBlLmNvZGUgPSBjb2RlO1xuICAgIGNvZGVzW2NvZGVdID0gTm9kZUVycm9yO1xuICB9XG4gIGZ1bmN0aW9uIG9uZU9mKGV4cGVjdGVkLCB0aGluZykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdGVkKSkge1xuICAgICAgdmFyIGxlbiA9IGV4cGVjdGVkLmxlbmd0aDtcbiAgICAgIGV4cGVjdGVkID0gZXhwZWN0ZWQubWFwKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyhpKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGxlbiA+IDIpIHtcbiAgICAgICAgcmV0dXJuIFwib25lIG9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChleHBlY3RlZC5zbGljZSgwLCBsZW4gLSAxKS5qb2luKFwiLCBcIiksIFwiLCBvciBcIikgKyBleHBlY3RlZFtsZW4gLSAxXTtcbiAgICAgIH0gZWxzZSBpZiAobGVuID09PSAyKSB7XG4gICAgICAgIHJldHVybiBcIm9uZSBvZiBcIi5jb25jYXQodGhpbmcsIFwiIFwiKS5jb25jYXQoZXhwZWN0ZWRbMF0sIFwiIG9yIFwiKS5jb25jYXQoZXhwZWN0ZWRbMV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwib2YgXCIuY29uY2F0KHRoaW5nLCBcIiBcIikuY29uY2F0KGV4cGVjdGVkWzBdKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwib2YgXCIuY29uY2F0KHRoaW5nLCBcIiBcIikuY29uY2F0KFN0cmluZyhleHBlY3RlZCkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBzdGFydHNXaXRoKHN0ciwgc2VhcmNoLCBwb3MpIHtcbiAgICByZXR1cm4gc3RyLnN1YnN0cigwLCBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG4gIGZ1bmN0aW9uIGVuZHNXaXRoKHN0ciwgc2VhcmNoLCB0aGlzX2xlbikge1xuICAgIGlmICh0aGlzX2xlbiA9PT0gdm9pZCAwIHx8IHRoaXNfbGVuID4gc3RyLmxlbmd0aCkge1xuICAgICAgdGhpc19sZW4gPSBzdHIubGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gc3RyLnN1YnN0cmluZyh0aGlzX2xlbiAtIHNlYXJjaC5sZW5ndGgsIHRoaXNfbGVuKSA9PT0gc2VhcmNoO1xuICB9XG4gIGZ1bmN0aW9uIGluY2x1ZGVzKHN0ciwgc2VhcmNoLCBzdGFydCkge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHN0YXJ0ID0gMDtcbiAgICB9XG4gICAgaWYgKHN0YXJ0ICsgc2VhcmNoLmxlbmd0aCA+IHN0ci5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN0ci5pbmRleE9mKHNlYXJjaCwgc3RhcnQpICE9PSAtMTtcbiAgICB9XG4gIH1cbiAgY3JlYXRlRXJyb3JUeXBlKFwiRVJSX0lOVkFMSURfT1BUX1ZBTFVFXCIsIGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgcmV0dXJuICdUaGUgdmFsdWUgXCInICsgdmFsdWUgKyAnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwiJyArIG5hbWUgKyAnXCInO1xuICB9LCBUeXBlRXJyb3IpO1xuICBjcmVhdGVFcnJvclR5cGUoXCJFUlJfSU5WQUxJRF9BUkdfVFlQRVwiLCBmdW5jdGlvbihuYW1lLCBleHBlY3RlZCwgYWN0dWFsKSB7XG4gICAgdmFyIGRldGVybWluZXI7XG4gICAgaWYgKHR5cGVvZiBleHBlY3RlZCA9PT0gXCJzdHJpbmdcIiAmJiBzdGFydHNXaXRoKGV4cGVjdGVkLCBcIm5vdCBcIikpIHtcbiAgICAgIGRldGVybWluZXIgPSBcIm11c3Qgbm90IGJlXCI7XG4gICAgICBleHBlY3RlZCA9IGV4cGVjdGVkLnJlcGxhY2UoL15ub3QgLywgXCJcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRldGVybWluZXIgPSBcIm11c3QgYmVcIjtcbiAgICB9XG4gICAgdmFyIG1zZztcbiAgICBpZiAoZW5kc1dpdGgobmFtZSwgXCIgYXJndW1lbnRcIikpIHtcbiAgICAgIG1zZyA9IFwiVGhlIFwiLmNvbmNhdChuYW1lLCBcIiBcIikuY29uY2F0KGRldGVybWluZXIsIFwiIFwiKS5jb25jYXQob25lT2YoZXhwZWN0ZWQsIFwidHlwZVwiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB0eXBlMiA9IGluY2x1ZGVzKG5hbWUsIFwiLlwiKSA/IFwicHJvcGVydHlcIiA6IFwiYXJndW1lbnRcIjtcbiAgICAgIG1zZyA9ICdUaGUgXCInLmNvbmNhdChuYW1lLCAnXCIgJykuY29uY2F0KHR5cGUyLCBcIiBcIikuY29uY2F0KGRldGVybWluZXIsIFwiIFwiKS5jb25jYXQob25lT2YoZXhwZWN0ZWQsIFwidHlwZVwiKSk7XG4gICAgfVxuICAgIG1zZyArPSBcIi4gUmVjZWl2ZWQgdHlwZSBcIi5jb25jYXQodHlwZW9mIGFjdHVhbCk7XG4gICAgcmV0dXJuIG1zZztcbiAgfSwgVHlwZUVycm9yKTtcbiAgY3JlYXRlRXJyb3JUeXBlKFwiRVJSX1NUUkVBTV9QVVNIX0FGVEVSX0VPRlwiLCBcInN0cmVhbS5wdXNoKCkgYWZ0ZXIgRU9GXCIpO1xuICBjcmVhdGVFcnJvclR5cGUoXCJFUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRFwiLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIFwiVGhlIFwiICsgbmFtZSArIFwiIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWRcIjtcbiAgfSk7XG4gIGNyZWF0ZUVycm9yVHlwZShcIkVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFXCIsIFwiUHJlbWF0dXJlIGNsb3NlXCIpO1xuICBjcmVhdGVFcnJvclR5cGUoXCJFUlJfU1RSRUFNX0RFU1RST1lFRFwiLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIFwiQ2Fubm90IGNhbGwgXCIgKyBuYW1lICsgXCIgYWZ0ZXIgYSBzdHJlYW0gd2FzIGRlc3Ryb3llZFwiO1xuICB9KTtcbiAgY3JlYXRlRXJyb3JUeXBlKFwiRVJSX01VTFRJUExFX0NBTExCQUNLXCIsIFwiQ2FsbGJhY2sgY2FsbGVkIG11bHRpcGxlIHRpbWVzXCIpO1xuICBjcmVhdGVFcnJvclR5cGUoXCJFUlJfU1RSRUFNX0NBTk5PVF9QSVBFXCIsIFwiQ2Fubm90IHBpcGUsIG5vdCByZWFkYWJsZVwiKTtcbiAgY3JlYXRlRXJyb3JUeXBlKFwiRVJSX1NUUkVBTV9XUklURV9BRlRFUl9FTkRcIiwgXCJ3cml0ZSBhZnRlciBlbmRcIik7XG4gIGNyZWF0ZUVycm9yVHlwZShcIkVSUl9TVFJFQU1fTlVMTF9WQUxVRVNcIiwgXCJNYXkgbm90IHdyaXRlIG51bGwgdmFsdWVzIHRvIHN0cmVhbVwiLCBUeXBlRXJyb3IpO1xuICBjcmVhdGVFcnJvclR5cGUoXCJFUlJfVU5LTk9XTl9FTkNPRElOR1wiLCBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gXCJVbmtub3duIGVuY29kaW5nOiBcIiArIGFyZztcbiAgfSwgVHlwZUVycm9yKTtcbiAgY3JlYXRlRXJyb3JUeXBlKFwiRVJSX1NUUkVBTV9VTlNISUZUX0FGVEVSX0VORF9FVkVOVFwiLCBcInN0cmVhbS51bnNoaWZ0KCkgYWZ0ZXIgZW5kIGV2ZW50XCIpO1xuICBlcnJvcnNCcm93c2VyLmNvZGVzID0gY29kZXM7XG4gIHJldHVybiBlcnJvcnNCcm93c2VyO1xufVxudmFyIHN0YXRlO1xudmFyIGhhc1JlcXVpcmVkU3RhdGU7XG5mdW5jdGlvbiByZXF1aXJlU3RhdGUoKSB7XG4gIGlmIChoYXNSZXF1aXJlZFN0YXRlKSByZXR1cm4gc3RhdGU7XG4gIGhhc1JlcXVpcmVkU3RhdGUgPSAxO1xuICB2YXIgRVJSX0lOVkFMSURfT1BUX1ZBTFVFID0gcmVxdWlyZUVycm9yc0Jyb3dzZXIoKS5jb2Rlcy5FUlJfSU5WQUxJRF9PUFRfVkFMVUU7XG4gIGZ1bmN0aW9uIGhpZ2hXYXRlck1hcmtGcm9tKG9wdGlvbnMyLCBpc0R1cGxleCwgZHVwbGV4S2V5KSB7XG4gICAgcmV0dXJuIG9wdGlvbnMyLmhpZ2hXYXRlck1hcmsgIT0gbnVsbCA/IG9wdGlvbnMyLmhpZ2hXYXRlck1hcmsgOiBpc0R1cGxleCA/IG9wdGlvbnMyW2R1cGxleEtleV0gOiBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIGdldEhpZ2hXYXRlck1hcmsoc3RhdGUyLCBvcHRpb25zMiwgZHVwbGV4S2V5LCBpc0R1cGxleCkge1xuICAgIHZhciBod20gPSBoaWdoV2F0ZXJNYXJrRnJvbShvcHRpb25zMiwgaXNEdXBsZXgsIGR1cGxleEtleSk7XG4gICAgaWYgKGh3bSAhPSBudWxsKSB7XG4gICAgICBpZiAoIShpc0Zpbml0ZShod20pICYmIE1hdGguZmxvb3IoaHdtKSA9PT0gaHdtKSB8fCBod20gPCAwKSB7XG4gICAgICAgIHZhciBuYW1lID0gaXNEdXBsZXggPyBkdXBsZXhLZXkgOiBcImhpZ2hXYXRlck1hcmtcIjtcbiAgICAgICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX09QVF9WQUxVRShuYW1lLCBod20pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoaHdtKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXRlMi5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG4gIH1cbiAgc3RhdGUgPSB7XG4gICAgZ2V0SGlnaFdhdGVyTWFya1xuICB9O1xuICByZXR1cm4gc3RhdGU7XG59XG52YXIgYnJvd3NlcjtcbnZhciBoYXNSZXF1aXJlZEJyb3dzZXI7XG5mdW5jdGlvbiByZXF1aXJlQnJvd3NlcigpIHtcbiAgaWYgKGhhc1JlcXVpcmVkQnJvd3NlcikgcmV0dXJuIGJyb3dzZXI7XG4gIGhhc1JlcXVpcmVkQnJvd3NlciA9IDE7XG4gIGJyb3dzZXIgPSBkZXByZWNhdGU7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZShmbiwgbXNnKSB7XG4gICAgaWYgKGNvbmZpZyhcIm5vRGVwcmVjYXRpb25cIikpIHtcbiAgICAgIHJldHVybiBmbjtcbiAgICB9XG4gICAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICAgIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgICBpZiAoY29uZmlnKFwidGhyb3dEZXByZWNhdGlvblwiKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbmZpZyhcInRyYWNlRGVwcmVjYXRpb25cIikpIHtcbiAgICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKG1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICByZXR1cm4gZGVwcmVjYXRlZDtcbiAgfVxuICBmdW5jdGlvbiBjb25maWcobmFtZSkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIWNvbW1vbmpzR2xvYmFsLmxvY2FsU3RvcmFnZSkgcmV0dXJuIGZhbHNlO1xuICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIHZhbCA9IGNvbW1vbmpzR2xvYmFsLmxvY2FsU3RvcmFnZVtuYW1lXTtcbiAgICBpZiAobnVsbCA9PSB2YWwpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gU3RyaW5nKHZhbCkudG9Mb3dlckNhc2UoKSA9PT0gXCJ0cnVlXCI7XG4gIH1cbiAgcmV0dXJuIGJyb3dzZXI7XG59XG52YXIgX3N0cmVhbV93cml0YWJsZTtcbnZhciBoYXNSZXF1aXJlZF9zdHJlYW1fd3JpdGFibGU7XG5mdW5jdGlvbiByZXF1aXJlX3N0cmVhbV93cml0YWJsZSgpIHtcbiAgaWYgKGhhc1JlcXVpcmVkX3N0cmVhbV93cml0YWJsZSkgcmV0dXJuIF9zdHJlYW1fd3JpdGFibGU7XG4gIGhhc1JlcXVpcmVkX3N0cmVhbV93cml0YWJsZSA9IDE7XG4gIF9zdHJlYW1fd3JpdGFibGUgPSBXcml0YWJsZTtcbiAgZnVuY3Rpb24gQ29ya2VkUmVxdWVzdChzdGF0ZTIpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMubmV4dCA9IG51bGw7XG4gICAgdGhpcy5lbnRyeSA9IG51bGw7XG4gICAgdGhpcy5maW5pc2ggPSBmdW5jdGlvbigpIHtcbiAgICAgIG9uQ29ya2VkRmluaXNoKF90aGlzLCBzdGF0ZTIpO1xuICAgIH07XG4gIH1cbiAgdmFyIER1cGxleDtcbiAgV3JpdGFibGUuV3JpdGFibGVTdGF0ZSA9IFdyaXRhYmxlU3RhdGU7XG4gIHZhciBpbnRlcm5hbFV0aWwgPSB7XG4gICAgZGVwcmVjYXRlOiByZXF1aXJlQnJvd3NlcigpXG4gIH07XG4gIHZhciBTdHJlYW0yID0gcmVxdWlyZVN0cmVhbUJyb3dzZXIoKTtcbiAgdmFyIEJ1ZmZlcjIgPSByZXF1aXJlQnVmZmVyKCkuQnVmZmVyO1xuICB2YXIgT3VyVWludDhBcnJheSA9IGNvbW1vbmpzR2xvYmFsLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24oKSB7XG4gIH07XG4gIGZ1bmN0aW9uIF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspIHtcbiAgICByZXR1cm4gQnVmZmVyMi5mcm9tKGNodW5rKTtcbiAgfVxuICBmdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICAgIHJldHVybiBCdWZmZXIyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbiAgfVxuICB2YXIgZGVzdHJveUltcGwgPSByZXF1aXJlRGVzdHJveSgpO1xuICB2YXIgX3JlcXVpcmUgPSByZXF1aXJlU3RhdGUoKSwgZ2V0SGlnaFdhdGVyTWFyayA9IF9yZXF1aXJlLmdldEhpZ2hXYXRlck1hcms7XG4gIHZhciBfcmVxdWlyZSRjb2RlcyA9IHJlcXVpcmVFcnJvcnNCcm93c2VyKCkuY29kZXMsIEVSUl9JTlZBTElEX0FSR19UWVBFID0gX3JlcXVpcmUkY29kZXMuRVJSX0lOVkFMSURfQVJHX1RZUEUsIEVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVEID0gX3JlcXVpcmUkY29kZXMuRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQsIEVSUl9NVUxUSVBMRV9DQUxMQkFDSyA9IF9yZXF1aXJlJGNvZGVzLkVSUl9NVUxUSVBMRV9DQUxMQkFDSywgRVJSX1NUUkVBTV9DQU5OT1RfUElQRSA9IF9yZXF1aXJlJGNvZGVzLkVSUl9TVFJFQU1fQ0FOTk9UX1BJUEUsIEVSUl9TVFJFQU1fREVTVFJPWUVEID0gX3JlcXVpcmUkY29kZXMuRVJSX1NUUkVBTV9ERVNUUk9ZRUQsIEVSUl9TVFJFQU1fTlVMTF9WQUxVRVMgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfU1RSRUFNX05VTExfVkFMVUVTLCBFUlJfU1RSRUFNX1dSSVRFX0FGVEVSX0VORCA9IF9yZXF1aXJlJGNvZGVzLkVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5ELCBFUlJfVU5LTk9XTl9FTkNPRElORyA9IF9yZXF1aXJlJGNvZGVzLkVSUl9VTktOT1dOX0VOQ09ESU5HO1xuICB2YXIgZXJyb3JPckRlc3Ryb3kgPSBkZXN0cm95SW1wbC5lcnJvck9yRGVzdHJveTtcbiAgaW5oZXJpdHNfYnJvd3NlckV4cG9ydHMoV3JpdGFibGUsIFN0cmVhbTIpO1xuICBmdW5jdGlvbiBub3AoKSB7XG4gIH1cbiAgZnVuY3Rpb24gV3JpdGFibGVTdGF0ZShvcHRpb25zMiwgc3RyZWFtLCBpc0R1cGxleCkge1xuICAgIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlX3N0cmVhbV9kdXBsZXgoKTtcbiAgICBvcHRpb25zMiA9IG9wdGlvbnMyIHx8IHt9O1xuICAgIGlmICh0eXBlb2YgaXNEdXBsZXggIT09IFwiYm9vbGVhblwiKSBpc0R1cGxleCA9IHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleDtcbiAgICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMyLm9iamVjdE1vZGU7XG4gICAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zMi53cml0YWJsZU9iamVjdE1vZGU7XG4gICAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gZ2V0SGlnaFdhdGVyTWFyayh0aGlzLCBvcHRpb25zMiwgXCJ3cml0YWJsZUhpZ2hXYXRlck1hcmtcIiwgaXNEdXBsZXgpO1xuICAgIHRoaXMuZmluYWxDYWxsZWQgPSBmYWxzZTtcbiAgICB0aGlzLm5lZWREcmFpbiA9IGZhbHNlO1xuICAgIHRoaXMuZW5kaW5nID0gZmFsc2U7XG4gICAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHZhciBub0RlY29kZSA9IG9wdGlvbnMyLmRlY29kZVN0cmluZ3MgPT09IGZhbHNlO1xuICAgIHRoaXMuZGVjb2RlU3RyaW5ncyA9ICFub0RlY29kZTtcbiAgICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMyLmRlZmF1bHRFbmNvZGluZyB8fCBcInV0ZjhcIjtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy53cml0aW5nID0gZmFsc2U7XG4gICAgdGhpcy5jb3JrZWQgPSAwO1xuICAgIHRoaXMuc3luYyA9IHRydWU7XG4gICAgdGhpcy5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgdGhpcy5vbndyaXRlID0gZnVuY3Rpb24oZXIpIHtcbiAgICAgIG9ud3JpdGUoc3RyZWFtLCBlcik7XG4gICAgfTtcbiAgICB0aGlzLndyaXRlY2IgPSBudWxsO1xuICAgIHRoaXMud3JpdGVsZW4gPSAwO1xuICAgIHRoaXMuYnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgICB0aGlzLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICAgIHRoaXMucGVuZGluZ2NiID0gMDtcbiAgICB0aGlzLnByZWZpbmlzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5lcnJvckVtaXR0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXRDbG9zZSA9IG9wdGlvbnMyLmVtaXRDbG9zZSAhPT0gZmFsc2U7XG4gICAgdGhpcy5hdXRvRGVzdHJveSA9ICEhb3B0aW9uczIuYXV0b0Rlc3Ryb3k7XG4gICAgdGhpcy5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7XG4gICAgdGhpcy5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdCh0aGlzKTtcbiAgfVxuICBXcml0YWJsZVN0YXRlLnByb3RvdHlwZS5nZXRCdWZmZXIgPSBmdW5jdGlvbiBnZXRCdWZmZXIoKSB7XG4gICAgdmFyIGN1cnJlbnQgPSB0aGlzLmJ1ZmZlcmVkUmVxdWVzdDtcbiAgICB2YXIgb3V0ID0gW107XG4gICAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICAgIG91dC5wdXNoKGN1cnJlbnQpO1xuICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbiAgfTtcbiAgKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGVTdGF0ZS5wcm90b3R5cGUsIFwiYnVmZmVyXCIsIHtcbiAgICAgICAgZ2V0OiBpbnRlcm5hbFV0aWwuZGVwcmVjYXRlKGZ1bmN0aW9uIHdyaXRhYmxlU3RhdGVCdWZmZXJHZXR0ZXIoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QnVmZmVyKCk7XG4gICAgICAgIH0sIFwiX3dyaXRhYmxlU3RhdGUuYnVmZmVyIGlzIGRlcHJlY2F0ZWQuIFVzZSBfd3JpdGFibGVTdGF0ZS5nZXRCdWZmZXIgaW5zdGVhZC5cIiwgXCJERVAwMDAzXCIpXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChfKSB7XG4gICAgfVxuICB9KSgpO1xuICB2YXIgcmVhbEhhc0luc3RhbmNlO1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5oYXNJbnN0YW5jZSAmJiB0eXBlb2YgRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJlYWxIYXNJbnN0YW5jZSA9IEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZSwgU3ltYm9sLmhhc0luc3RhbmNlLCB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUob2JqZWN0KSB7XG4gICAgICAgIGlmIChyZWFsSGFzSW5zdGFuY2UuY2FsbCh0aGlzLCBvYmplY3QpKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMgIT09IFdyaXRhYmxlKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiBvYmplY3QgJiYgb2JqZWN0Ll93cml0YWJsZVN0YXRlIGluc3RhbmNlb2YgV3JpdGFibGVTdGF0ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZWFsSGFzSW5zdGFuY2UgPSBmdW5jdGlvbiByZWFsSGFzSW5zdGFuY2UyKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIHRoaXM7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBXcml0YWJsZShvcHRpb25zMikge1xuICAgIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlX3N0cmVhbV9kdXBsZXgoKTtcbiAgICB2YXIgaXNEdXBsZXggPSB0aGlzIGluc3RhbmNlb2YgRHVwbGV4O1xuICAgIGlmICghaXNEdXBsZXggJiYgIXJlYWxIYXNJbnN0YW5jZS5jYWxsKFdyaXRhYmxlLCB0aGlzKSkgcmV0dXJuIG5ldyBXcml0YWJsZShvcHRpb25zMik7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZSA9IG5ldyBXcml0YWJsZVN0YXRlKG9wdGlvbnMyLCB0aGlzLCBpc0R1cGxleCk7XG4gICAgdGhpcy53cml0YWJsZSA9IHRydWU7XG4gICAgaWYgKG9wdGlvbnMyKSB7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMyLndyaXRlID09PSBcImZ1bmN0aW9uXCIpIHRoaXMuX3dyaXRlID0gb3B0aW9uczIud3JpdGU7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMyLndyaXRldiA9PT0gXCJmdW5jdGlvblwiKSB0aGlzLl93cml0ZXYgPSBvcHRpb25zMi53cml0ZXY7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMyLmRlc3Ryb3kgPT09IFwiZnVuY3Rpb25cIikgdGhpcy5fZGVzdHJveSA9IG9wdGlvbnMyLmRlc3Ryb3k7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMyLmZpbmFsID09PSBcImZ1bmN0aW9uXCIpIHRoaXMuX2ZpbmFsID0gb3B0aW9uczIuZmluYWw7XG4gICAgfVxuICAgIFN0cmVhbTIuY2FsbCh0aGlzKTtcbiAgfVxuICBXcml0YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uKCkge1xuICAgIGVycm9yT3JEZXN0cm95KHRoaXMsIG5ldyBFUlJfU1RSRUFNX0NBTk5PVF9QSVBFKCkpO1xuICB9O1xuICBmdW5jdGlvbiB3cml0ZUFmdGVyRW5kKHN0cmVhbSwgY2IpIHtcbiAgICB2YXIgZXIgPSBuZXcgRVJSX1NUUkVBTV9XUklURV9BRlRFUl9FTkQoKTtcbiAgICBlcnJvck9yRGVzdHJveShzdHJlYW0sIGVyKTtcbiAgICBwcm9jZXNzJDEubmV4dFRpY2soY2IsIGVyKTtcbiAgfVxuICBmdW5jdGlvbiB2YWxpZENodW5rKHN0cmVhbSwgc3RhdGUyLCBjaHVuaywgY2IpIHtcbiAgICB2YXIgZXI7XG4gICAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgICBlciA9IG5ldyBFUlJfU1RSRUFNX05VTExfVkFMVUVTKCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY2h1bmsgIT09IFwic3RyaW5nXCIgJiYgIXN0YXRlMi5vYmplY3RNb2RlKSB7XG4gICAgICBlciA9IG5ldyBFUlJfSU5WQUxJRF9BUkdfVFlQRShcImNodW5rXCIsIFtcInN0cmluZ1wiLCBcIkJ1ZmZlclwiXSwgY2h1bmspO1xuICAgIH1cbiAgICBpZiAoZXIpIHtcbiAgICAgIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXIpO1xuICAgICAgcHJvY2VzcyQxLm5leHRUaWNrKGNiLCBlcik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIFdyaXRhYmxlLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgICB2YXIgc3RhdGUyID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcbiAgICB2YXIgcmV0ID0gZmFsc2U7XG4gICAgdmFyIGlzQnVmID0gIXN0YXRlMi5vYmplY3RNb2RlICYmIF9pc1VpbnQ4QXJyYXkoY2h1bmspO1xuICAgIGlmIChpc0J1ZiAmJiAhQnVmZmVyMi5pc0J1ZmZlcihjaHVuaykpIHtcbiAgICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY2IgPSBlbmNvZGluZztcbiAgICAgIGVuY29kaW5nID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGlzQnVmKSBlbmNvZGluZyA9IFwiYnVmZmVyXCI7XG4gICAgZWxzZSBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9IHN0YXRlMi5kZWZhdWx0RW5jb2Rpbmc7XG4gICAgaWYgKHR5cGVvZiBjYiAhPT0gXCJmdW5jdGlvblwiKSBjYiA9IG5vcDtcbiAgICBpZiAoc3RhdGUyLmVuZGluZykgd3JpdGVBZnRlckVuZCh0aGlzLCBjYik7XG4gICAgZWxzZSBpZiAoaXNCdWYgfHwgdmFsaWRDaHVuayh0aGlzLCBzdGF0ZTIsIGNodW5rLCBjYikpIHtcbiAgICAgIHN0YXRlMi5wZW5kaW5nY2IrKztcbiAgICAgIHJldCA9IHdyaXRlT3JCdWZmZXIodGhpcywgc3RhdGUyLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH07XG4gIFdyaXRhYmxlLnByb3RvdHlwZS5jb3JrID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5jb3JrZWQrKztcbiAgfTtcbiAgV3JpdGFibGUucHJvdG90eXBlLnVuY29yayA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdGF0ZTIgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuICAgIGlmIChzdGF0ZTIuY29ya2VkKSB7XG4gICAgICBzdGF0ZTIuY29ya2VkLS07XG4gICAgICBpZiAoIXN0YXRlMi53cml0aW5nICYmICFzdGF0ZTIuY29ya2VkICYmICFzdGF0ZTIuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZTIuYnVmZmVyZWRSZXF1ZXN0KSBjbGVhckJ1ZmZlcih0aGlzLCBzdGF0ZTIpO1xuICAgIH1cbiAgfTtcbiAgV3JpdGFibGUucHJvdG90eXBlLnNldERlZmF1bHRFbmNvZGluZyA9IGZ1bmN0aW9uIHNldERlZmF1bHRFbmNvZGluZyhlbmNvZGluZykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09IFwic3RyaW5nXCIpIGVuY29kaW5nID0gZW5jb2RpbmcudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoIShbXCJoZXhcIiwgXCJ1dGY4XCIsIFwidXRmLThcIiwgXCJhc2NpaVwiLCBcImJpbmFyeVwiLCBcImJhc2U2NFwiLCBcInVjczJcIiwgXCJ1Y3MtMlwiLCBcInV0ZjE2bGVcIiwgXCJ1dGYtMTZsZVwiLCBcInJhd1wiXS5pbmRleE9mKChlbmNvZGluZyArIFwiXCIpLnRvTG93ZXJDYXNlKCkpID4gLTEpKSB0aHJvdyBuZXcgRVJSX1VOS05PV05fRU5DT0RJTkcoZW5jb2RpbmcpO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVmYXVsdEVuY29kaW5nID0gZW5jb2Rpbmc7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsIFwid3JpdGFibGVCdWZmZXJcIiwge1xuICAgIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gICAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gICAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZSAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmdldEJ1ZmZlcigpO1xuICAgIH1cbiAgfSk7XG4gIGZ1bmN0aW9uIGRlY29kZUNodW5rKHN0YXRlMiwgY2h1bmssIGVuY29kaW5nKSB7XG4gICAgaWYgKCFzdGF0ZTIub2JqZWN0TW9kZSAmJiBzdGF0ZTIuZGVjb2RlU3RyaW5ncyAhPT0gZmFsc2UgJiYgdHlwZW9mIGNodW5rID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBjaHVuayA9IEJ1ZmZlcjIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY2h1bms7XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgXCJ3cml0YWJsZUhpZ2hXYXRlck1hcmtcIiwge1xuICAgIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gICAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gICAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICAgIH1cbiAgfSk7XG4gIGZ1bmN0aW9uIHdyaXRlT3JCdWZmZXIoc3RyZWFtLCBzdGF0ZTIsIGlzQnVmLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gICAgaWYgKCFpc0J1Zikge1xuICAgICAgdmFyIG5ld0NodW5rID0gZGVjb2RlQ2h1bmsoc3RhdGUyLCBjaHVuaywgZW5jb2RpbmcpO1xuICAgICAgaWYgKGNodW5rICE9PSBuZXdDaHVuaykge1xuICAgICAgICBpc0J1ZiA9IHRydWU7XG4gICAgICAgIGVuY29kaW5nID0gXCJidWZmZXJcIjtcbiAgICAgICAgY2h1bmsgPSBuZXdDaHVuaztcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGxlbiA9IHN0YXRlMi5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICBzdGF0ZTIubGVuZ3RoICs9IGxlbjtcbiAgICB2YXIgcmV0ID0gc3RhdGUyLmxlbmd0aCA8IHN0YXRlMi5oaWdoV2F0ZXJNYXJrO1xuICAgIGlmICghcmV0KSBzdGF0ZTIubmVlZERyYWluID0gdHJ1ZTtcbiAgICBpZiAoc3RhdGUyLndyaXRpbmcgfHwgc3RhdGUyLmNvcmtlZCkge1xuICAgICAgdmFyIGxhc3QgPSBzdGF0ZTIubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICAgIHN0YXRlMi5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0ge1xuICAgICAgICBjaHVuayxcbiAgICAgICAgZW5jb2RpbmcsXG4gICAgICAgIGlzQnVmLFxuICAgICAgICBjYWxsYmFjazogY2IsXG4gICAgICAgIG5leHQ6IG51bGxcbiAgICAgIH07XG4gICAgICBpZiAobGFzdCkge1xuICAgICAgICBsYXN0Lm5leHQgPSBzdGF0ZTIubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlMi5idWZmZXJlZFJlcXVlc3QgPSBzdGF0ZTIubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICAgIH1cbiAgICAgIHN0YXRlMi5idWZmZXJlZFJlcXVlc3RDb3VudCArPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUyLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuICBmdW5jdGlvbiBkb1dyaXRlKHN0cmVhbSwgc3RhdGUyLCB3cml0ZXYsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICAgIHN0YXRlMi53cml0ZWxlbiA9IGxlbjtcbiAgICBzdGF0ZTIud3JpdGVjYiA9IGNiO1xuICAgIHN0YXRlMi53cml0aW5nID0gdHJ1ZTtcbiAgICBzdGF0ZTIuc3luYyA9IHRydWU7XG4gICAgaWYgKHN0YXRlMi5kZXN0cm95ZWQpIHN0YXRlMi5vbndyaXRlKG5ldyBFUlJfU1RSRUFNX0RFU1RST1lFRChcIndyaXRlXCIpKTtcbiAgICBlbHNlIGlmICh3cml0ZXYpIHN0cmVhbS5fd3JpdGV2KGNodW5rLCBzdGF0ZTIub253cml0ZSk7XG4gICAgZWxzZSBzdHJlYW0uX3dyaXRlKGNodW5rLCBlbmNvZGluZywgc3RhdGUyLm9ud3JpdGUpO1xuICAgIHN0YXRlMi5zeW5jID0gZmFsc2U7XG4gIH1cbiAgZnVuY3Rpb24gb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUyLCBzeW5jLCBlciwgY2IpIHtcbiAgICAtLXN0YXRlMi5wZW5kaW5nY2I7XG4gICAgaWYgKHN5bmMpIHtcbiAgICAgIHByb2Nlc3MkMS5uZXh0VGljayhjYiwgZXIpO1xuICAgICAgcHJvY2VzcyQxLm5leHRUaWNrKGZpbmlzaE1heWJlLCBzdHJlYW0sIHN0YXRlMik7XG4gICAgICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICAgIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYihlcik7XG4gICAgICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICAgIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXIpO1xuICAgICAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZTIpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUyKSB7XG4gICAgc3RhdGUyLndyaXRpbmcgPSBmYWxzZTtcbiAgICBzdGF0ZTIud3JpdGVjYiA9IG51bGw7XG4gICAgc3RhdGUyLmxlbmd0aCAtPSBzdGF0ZTIud3JpdGVsZW47XG4gICAgc3RhdGUyLndyaXRlbGVuID0gMDtcbiAgfVxuICBmdW5jdGlvbiBvbndyaXRlKHN0cmVhbSwgZXIpIHtcbiAgICB2YXIgc3RhdGUyID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuICAgIHZhciBzeW5jID0gc3RhdGUyLnN5bmM7XG4gICAgdmFyIGNiID0gc3RhdGUyLndyaXRlY2I7XG4gICAgaWYgKHR5cGVvZiBjYiAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRVJSX01VTFRJUExFX0NBTExCQUNLKCk7XG4gICAgb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlMik7XG4gICAgaWYgKGVyKSBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZTIsIHN5bmMsIGVyLCBjYik7XG4gICAgZWxzZSB7XG4gICAgICB2YXIgZmluaXNoZWQgPSBuZWVkRmluaXNoKHN0YXRlMikgfHwgc3RyZWFtLmRlc3Ryb3llZDtcbiAgICAgIGlmICghZmluaXNoZWQgJiYgIXN0YXRlMi5jb3JrZWQgJiYgIXN0YXRlMi5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlMi5idWZmZXJlZFJlcXVlc3QpIHtcbiAgICAgICAgY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZTIpO1xuICAgICAgfVxuICAgICAgaWYgKHN5bmMpIHtcbiAgICAgICAgcHJvY2VzcyQxLm5leHRUaWNrKGFmdGVyV3JpdGUsIHN0cmVhbSwgc3RhdGUyLCBmaW5pc2hlZCwgY2IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlMiwgZmluaXNoZWQsIGNiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlMiwgZmluaXNoZWQsIGNiKSB7XG4gICAgaWYgKCFmaW5pc2hlZCkgb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUyKTtcbiAgICBzdGF0ZTIucGVuZGluZ2NiLS07XG4gICAgY2IoKTtcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlMik7XG4gIH1cbiAgZnVuY3Rpb24gb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUyKSB7XG4gICAgaWYgKHN0YXRlMi5sZW5ndGggPT09IDAgJiYgc3RhdGUyLm5lZWREcmFpbikge1xuICAgICAgc3RhdGUyLm5lZWREcmFpbiA9IGZhbHNlO1xuICAgICAgc3RyZWFtLmVtaXQoXCJkcmFpblwiKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZTIpIHtcbiAgICBzdGF0ZTIuYnVmZmVyUHJvY2Vzc2luZyA9IHRydWU7XG4gICAgdmFyIGVudHJ5ID0gc3RhdGUyLmJ1ZmZlcmVkUmVxdWVzdDtcbiAgICBpZiAoc3RyZWFtLl93cml0ZXYgJiYgZW50cnkgJiYgZW50cnkubmV4dCkge1xuICAgICAgdmFyIGwgPSBzdGF0ZTIuYnVmZmVyZWRSZXF1ZXN0Q291bnQ7XG4gICAgICB2YXIgYnVmZmVyMiA9IG5ldyBBcnJheShsKTtcbiAgICAgIHZhciBob2xkZXIgPSBzdGF0ZTIuY29ya2VkUmVxdWVzdHNGcmVlO1xuICAgICAgaG9sZGVyLmVudHJ5ID0gZW50cnk7XG4gICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgdmFyIGFsbEJ1ZmZlcnMgPSB0cnVlO1xuICAgICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICAgIGJ1ZmZlcjJbY291bnRdID0gZW50cnk7XG4gICAgICAgIGlmICghZW50cnkuaXNCdWYpIGFsbEJ1ZmZlcnMgPSBmYWxzZTtcbiAgICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgICBjb3VudCArPSAxO1xuICAgICAgfVxuICAgICAgYnVmZmVyMi5hbGxCdWZmZXJzID0gYWxsQnVmZmVycztcbiAgICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZTIsIHRydWUsIHN0YXRlMi5sZW5ndGgsIGJ1ZmZlcjIsIFwiXCIsIGhvbGRlci5maW5pc2gpO1xuICAgICAgc3RhdGUyLnBlbmRpbmdjYisrO1xuICAgICAgc3RhdGUyLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICAgICAgaWYgKGhvbGRlci5uZXh0KSB7XG4gICAgICAgIHN0YXRlMi5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBob2xkZXIubmV4dDtcbiAgICAgICAgaG9sZGVyLm5leHQgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUyLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHN0YXRlMik7XG4gICAgICB9XG4gICAgICBzdGF0ZTIuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgICAgdmFyIGNodW5rID0gZW50cnkuY2h1bms7XG4gICAgICAgIHZhciBlbmNvZGluZyA9IGVudHJ5LmVuY29kaW5nO1xuICAgICAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICAgICAgdmFyIGxlbiA9IHN0YXRlMi5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICAgICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlMiwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gICAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgICAgc3RhdGUyLmJ1ZmZlcmVkUmVxdWVzdENvdW50LS07XG4gICAgICAgIGlmIChzdGF0ZTIud3JpdGluZykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZW50cnkgPT09IG51bGwpIHN0YXRlMi5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgICB9XG4gICAgc3RhdGUyLmJ1ZmZlcmVkUmVxdWVzdCA9IGVudHJ5O1xuICAgIHN0YXRlMi5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG4gIH1cbiAgV3JpdGFibGUucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgICBjYihuZXcgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQoXCJfd3JpdGUoKVwiKSk7XG4gIH07XG4gIFdyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGV2ID0gbnVsbDtcbiAgV3JpdGFibGUucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgICB2YXIgc3RhdGUyID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcbiAgICBpZiAodHlwZW9mIGNodW5rID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGNiID0gY2h1bms7XG4gICAgICBjaHVuayA9IG51bGw7XG4gICAgICBlbmNvZGluZyA9IG51bGw7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY2IgPSBlbmNvZGluZztcbiAgICAgIGVuY29kaW5nID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSB2b2lkIDApIHRoaXMud3JpdGUoY2h1bmssIGVuY29kaW5nKTtcbiAgICBpZiAoc3RhdGUyLmNvcmtlZCkge1xuICAgICAgc3RhdGUyLmNvcmtlZCA9IDE7XG4gICAgICB0aGlzLnVuY29yaygpO1xuICAgIH1cbiAgICBpZiAoIXN0YXRlMi5lbmRpbmcpIGVuZFdyaXRhYmxlKHRoaXMsIHN0YXRlMiwgY2IpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCBcIndyaXRhYmxlTGVuZ3RoXCIsIHtcbiAgICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAgIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAgIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUubGVuZ3RoO1xuICAgIH1cbiAgfSk7XG4gIGZ1bmN0aW9uIG5lZWRGaW5pc2goc3RhdGUyKSB7XG4gICAgcmV0dXJuIHN0YXRlMi5lbmRpbmcgJiYgc3RhdGUyLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZTIuYnVmZmVyZWRSZXF1ZXN0ID09PSBudWxsICYmICFzdGF0ZTIuZmluaXNoZWQgJiYgIXN0YXRlMi53cml0aW5nO1xuICB9XG4gIGZ1bmN0aW9uIGNhbGxGaW5hbChzdHJlYW0sIHN0YXRlMikge1xuICAgIHN0cmVhbS5fZmluYWwoZnVuY3Rpb24oZXJyKSB7XG4gICAgICBzdGF0ZTIucGVuZGluZ2NiLS07XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXJyKTtcbiAgICAgIH1cbiAgICAgIHN0YXRlMi5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgICBzdHJlYW0uZW1pdChcInByZWZpbmlzaFwiKTtcbiAgICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUyKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZTIpIHtcbiAgICBpZiAoIXN0YXRlMi5wcmVmaW5pc2hlZCAmJiAhc3RhdGUyLmZpbmFsQ2FsbGVkKSB7XG4gICAgICBpZiAodHlwZW9mIHN0cmVhbS5fZmluYWwgPT09IFwiZnVuY3Rpb25cIiAmJiAhc3RhdGUyLmRlc3Ryb3llZCkge1xuICAgICAgICBzdGF0ZTIucGVuZGluZ2NiKys7XG4gICAgICAgIHN0YXRlMi5maW5hbENhbGxlZCA9IHRydWU7XG4gICAgICAgIHByb2Nlc3MkMS5uZXh0VGljayhjYWxsRmluYWwsIHN0cmVhbSwgc3RhdGUyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlMi5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgICAgIHN0cmVhbS5lbWl0KFwicHJlZmluaXNoXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlMikge1xuICAgIHZhciBuZWVkID0gbmVlZEZpbmlzaChzdGF0ZTIpO1xuICAgIGlmIChuZWVkKSB7XG4gICAgICBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZTIpO1xuICAgICAgaWYgKHN0YXRlMi5wZW5kaW5nY2IgPT09IDApIHtcbiAgICAgICAgc3RhdGUyLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgc3RyZWFtLmVtaXQoXCJmaW5pc2hcIik7XG4gICAgICAgIGlmIChzdGF0ZTIuYXV0b0Rlc3Ryb3kpIHtcbiAgICAgICAgICB2YXIgclN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICAgICAgICAgIGlmICghclN0YXRlIHx8IHJTdGF0ZS5hdXRvRGVzdHJveSAmJiByU3RhdGUuZW5kRW1pdHRlZCkge1xuICAgICAgICAgICAgc3RyZWFtLmRlc3Ryb3koKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5lZWQ7XG4gIH1cbiAgZnVuY3Rpb24gZW5kV3JpdGFibGUoc3RyZWFtLCBzdGF0ZTIsIGNiKSB7XG4gICAgc3RhdGUyLmVuZGluZyA9IHRydWU7XG4gICAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZTIpO1xuICAgIGlmIChjYikge1xuICAgICAgaWYgKHN0YXRlMi5maW5pc2hlZCkgcHJvY2VzcyQxLm5leHRUaWNrKGNiKTtcbiAgICAgIGVsc2Ugc3RyZWFtLm9uY2UoXCJmaW5pc2hcIiwgY2IpO1xuICAgIH1cbiAgICBzdGF0ZTIuZW5kZWQgPSB0cnVlO1xuICAgIHN0cmVhbS53cml0YWJsZSA9IGZhbHNlO1xuICB9XG4gIGZ1bmN0aW9uIG9uQ29ya2VkRmluaXNoKGNvcmtSZXEsIHN0YXRlMiwgZXJyKSB7XG4gICAgdmFyIGVudHJ5ID0gY29ya1JlcS5lbnRyeTtcbiAgICBjb3JrUmVxLmVudHJ5ID0gbnVsbDtcbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgICAgc3RhdGUyLnBlbmRpbmdjYi0tO1xuICAgICAgY2IoZXJyKTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICB9XG4gICAgc3RhdGUyLmNvcmtlZFJlcXVlc3RzRnJlZS5uZXh0ID0gY29ya1JlcTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCBcImRlc3Ryb3llZFwiLCB7XG4gICAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIGlmICh0aGlzLl93cml0YWJsZVN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgIGlmICghdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICAgIH1cbiAgfSk7XG4gIFdyaXRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcbiAgV3JpdGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3kgPSBkZXN0cm95SW1wbC51bmRlc3Ryb3k7XG4gIFdyaXRhYmxlLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uKGVyciwgY2IpIHtcbiAgICBjYihlcnIpO1xuICB9O1xuICByZXR1cm4gX3N0cmVhbV93cml0YWJsZTtcbn1cbnZhciBfc3RyZWFtX2R1cGxleDtcbnZhciBoYXNSZXF1aXJlZF9zdHJlYW1fZHVwbGV4O1xuZnVuY3Rpb24gcmVxdWlyZV9zdHJlYW1fZHVwbGV4KCkge1xuICBpZiAoaGFzUmVxdWlyZWRfc3RyZWFtX2R1cGxleCkgcmV0dXJuIF9zdHJlYW1fZHVwbGV4O1xuICBoYXNSZXF1aXJlZF9zdHJlYW1fZHVwbGV4ID0gMTtcbiAgdmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIga2V5czIgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBrZXlzMi5wdXNoKGtleSk7XG4gICAgfVxuICAgIHJldHVybiBrZXlzMjtcbiAgfTtcbiAgX3N0cmVhbV9kdXBsZXggPSBEdXBsZXg7XG4gIHZhciBSZWFkYWJsZSA9IHJlcXVpcmVfc3RyZWFtX3JlYWRhYmxlKCk7XG4gIHZhciBXcml0YWJsZSA9IHJlcXVpcmVfc3RyZWFtX3dyaXRhYmxlKCk7XG4gIGluaGVyaXRzX2Jyb3dzZXJFeHBvcnRzKER1cGxleCwgUmVhZGFibGUpO1xuICB7XG4gICAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFdyaXRhYmxlLnByb3RvdHlwZSk7XG4gICAgZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7XG4gICAgICB2YXIgbWV0aG9kID0ga2V5c1t2XTtcbiAgICAgIGlmICghRHVwbGV4LnByb3RvdHlwZVttZXRob2RdKSBEdXBsZXgucHJvdG90eXBlW21ldGhvZF0gPSBXcml0YWJsZS5wcm90b3R5cGVbbWV0aG9kXTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gRHVwbGV4KG9wdGlvbnMyKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHJldHVybiBuZXcgRHVwbGV4KG9wdGlvbnMyKTtcbiAgICBSZWFkYWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMyKTtcbiAgICBXcml0YWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMyKTtcbiAgICB0aGlzLmFsbG93SGFsZk9wZW4gPSB0cnVlO1xuICAgIGlmIChvcHRpb25zMikge1xuICAgICAgaWYgKG9wdGlvbnMyLnJlYWRhYmxlID09PSBmYWxzZSkgdGhpcy5yZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKG9wdGlvbnMyLndyaXRhYmxlID09PSBmYWxzZSkgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKG9wdGlvbnMyLmFsbG93SGFsZk9wZW4gPT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuYWxsb3dIYWxmT3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLm9uY2UoXCJlbmRcIiwgb25lbmQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgXCJ3cml0YWJsZUhpZ2hXYXRlck1hcmtcIiwge1xuICAgIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gICAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gICAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICAgIH1cbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCBcIndyaXRhYmxlQnVmZmVyXCIsIHtcbiAgICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAgIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAgIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5nZXRCdWZmZXIoKTtcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgXCJ3cml0YWJsZUxlbmd0aFwiLCB7XG4gICAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmxlbmd0aDtcbiAgICB9XG4gIH0pO1xuICBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCkgcmV0dXJuO1xuICAgIHByb2Nlc3MkMS5uZXh0VGljayhvbkVuZE5ULCB0aGlzKTtcbiAgfVxuICBmdW5jdGlvbiBvbkVuZE5UKHNlbGYyKSB7XG4gICAgc2VsZjIuZW5kKCk7XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsIFwiZGVzdHJveWVkXCIsIHtcbiAgICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAgIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAgIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHZvaWQgMCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB2b2lkIDAgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gICAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBfc3RyZWFtX2R1cGxleDtcbn1cbnZhciBzdHJpbmdfZGVjb2RlciA9IHt9O1xudmFyIHNhZmVCdWZmZXIgPSB7IGV4cG9ydHM6IHt9IH07XG52YXIgaGFzUmVxdWlyZWRTYWZlQnVmZmVyO1xuZnVuY3Rpb24gcmVxdWlyZVNhZmVCdWZmZXIoKSB7XG4gIGlmIChoYXNSZXF1aXJlZFNhZmVCdWZmZXIpIHJldHVybiBzYWZlQnVmZmVyLmV4cG9ydHM7XG4gIGhhc1JlcXVpcmVkU2FmZUJ1ZmZlciA9IDE7XG4gIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcbiAgICB2YXIgYnVmZmVyMiA9IHJlcXVpcmVCdWZmZXIoKTtcbiAgICB2YXIgQnVmZmVyMiA9IGJ1ZmZlcjIuQnVmZmVyO1xuICAgIGZ1bmN0aW9uIGNvcHlQcm9wcyhzcmMsIGRzdCkge1xuICAgICAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgICAgICBkc3Rba2V5XSA9IHNyY1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoQnVmZmVyMi5mcm9tICYmIEJ1ZmZlcjIuYWxsb2MgJiYgQnVmZmVyMi5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIyLmFsbG9jVW5zYWZlU2xvdykge1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBidWZmZXIyO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb3B5UHJvcHMoYnVmZmVyMiwgZXhwb3J0cyk7XG4gICAgICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIFNhZmVCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICAgIHJldHVybiBCdWZmZXIyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKTtcbiAgICB9XG4gICAgY29weVByb3BzKEJ1ZmZlcjIsIFNhZmVCdWZmZXIpO1xuICAgIFNhZmVCdWZmZXIuZnJvbSA9IGZ1bmN0aW9uKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICBpZiAodHlwZW9mIGFyZyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXJcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gQnVmZmVyMihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCk7XG4gICAgfTtcbiAgICBTYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24oc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2l6ZSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlclwiKTtcbiAgICAgIH1cbiAgICAgIHZhciBidWYgPSBCdWZmZXIyKHNpemUpO1xuICAgICAgaWYgKGZpbGwgIT09IHZvaWQgMCkge1xuICAgICAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJ1Zi5maWxsKGZpbGwpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBidWYuZmlsbCgwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBidWY7XG4gICAgfTtcbiAgICBTYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24oc2l6ZSkge1xuICAgICAgaWYgKHR5cGVvZiBzaXplICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIEJ1ZmZlcjIoc2l6ZSk7XG4gICAgfTtcbiAgICBTYWZlQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2l6ZSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlclwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBidWZmZXIyLlNsb3dCdWZmZXIoc2l6ZSk7XG4gICAgfTtcbiAgfSkoc2FmZUJ1ZmZlciwgc2FmZUJ1ZmZlci5leHBvcnRzKTtcbiAgcmV0dXJuIHNhZmVCdWZmZXIuZXhwb3J0cztcbn1cbnZhciBoYXNSZXF1aXJlZFN0cmluZ19kZWNvZGVyO1xuZnVuY3Rpb24gcmVxdWlyZVN0cmluZ19kZWNvZGVyKCkge1xuICBpZiAoaGFzUmVxdWlyZWRTdHJpbmdfZGVjb2RlcikgcmV0dXJuIHN0cmluZ19kZWNvZGVyO1xuICBoYXNSZXF1aXJlZFN0cmluZ19kZWNvZGVyID0gMTtcbiAgdmFyIEJ1ZmZlcjIgPSByZXF1aXJlU2FmZUJ1ZmZlcigpLkJ1ZmZlcjtcbiAgdmFyIGlzRW5jb2RpbmcgPSBCdWZmZXIyLmlzRW5jb2RpbmcgfHwgZnVuY3Rpb24oZW5jb2RpbmcpIHtcbiAgICBlbmNvZGluZyA9IFwiXCIgKyBlbmNvZGluZztcbiAgICBzd2l0Y2ggKGVuY29kaW5nICYmIGVuY29kaW5nLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIGNhc2UgXCJoZXhcIjpcbiAgICAgIGNhc2UgXCJ1dGY4XCI6XG4gICAgICBjYXNlIFwidXRmLThcIjpcbiAgICAgIGNhc2UgXCJhc2NpaVwiOlxuICAgICAgY2FzZSBcImJpbmFyeVwiOlxuICAgICAgY2FzZSBcImJhc2U2NFwiOlxuICAgICAgY2FzZSBcInVjczJcIjpcbiAgICAgIGNhc2UgXCJ1Y3MtMlwiOlxuICAgICAgY2FzZSBcInV0ZjE2bGVcIjpcbiAgICAgIGNhc2UgXCJ1dGYtMTZsZVwiOlxuICAgICAgY2FzZSBcInJhd1wiOlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIF9ub3JtYWxpemVFbmNvZGluZyhlbmMpIHtcbiAgICBpZiAoIWVuYykgcmV0dXJuIFwidXRmOFwiO1xuICAgIHZhciByZXRyaWVkO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBzd2l0Y2ggKGVuYykge1xuICAgICAgICBjYXNlIFwidXRmOFwiOlxuICAgICAgICBjYXNlIFwidXRmLThcIjpcbiAgICAgICAgICByZXR1cm4gXCJ1dGY4XCI7XG4gICAgICAgIGNhc2UgXCJ1Y3MyXCI6XG4gICAgICAgIGNhc2UgXCJ1Y3MtMlwiOlxuICAgICAgICBjYXNlIFwidXRmMTZsZVwiOlxuICAgICAgICBjYXNlIFwidXRmLTE2bGVcIjpcbiAgICAgICAgICByZXR1cm4gXCJ1dGYxNmxlXCI7XG4gICAgICAgIGNhc2UgXCJsYXRpbjFcIjpcbiAgICAgICAgY2FzZSBcImJpbmFyeVwiOlxuICAgICAgICAgIHJldHVybiBcImxhdGluMVwiO1xuICAgICAgICBjYXNlIFwiYmFzZTY0XCI6XG4gICAgICAgIGNhc2UgXCJhc2NpaVwiOlxuICAgICAgICBjYXNlIFwiaGV4XCI6XG4gICAgICAgICAgcmV0dXJuIGVuYztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAocmV0cmllZCkgcmV0dXJuO1xuICAgICAgICAgIGVuYyA9IChcIlwiICsgZW5jKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIHJldHJpZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBub3JtYWxpemVFbmNvZGluZyhlbmMpIHtcbiAgICB2YXIgbmVuYyA9IF9ub3JtYWxpemVFbmNvZGluZyhlbmMpO1xuICAgIGlmICh0eXBlb2YgbmVuYyAhPT0gXCJzdHJpbmdcIiAmJiAoQnVmZmVyMi5pc0VuY29kaW5nID09PSBpc0VuY29kaW5nIHx8ICFpc0VuY29kaW5nKGVuYykpKSB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIiArIGVuYyk7XG4gICAgcmV0dXJuIG5lbmMgfHwgZW5jO1xuICB9XG4gIHN0cmluZ19kZWNvZGVyLlN0cmluZ0RlY29kZXIgPSBTdHJpbmdEZWNvZGVyO1xuICBmdW5jdGlvbiBTdHJpbmdEZWNvZGVyKGVuY29kaW5nKSB7XG4gICAgdGhpcy5lbmNvZGluZyA9IG5vcm1hbGl6ZUVuY29kaW5nKGVuY29kaW5nKTtcbiAgICB2YXIgbmI7XG4gICAgc3dpdGNoICh0aGlzLmVuY29kaW5nKSB7XG4gICAgICBjYXNlIFwidXRmMTZsZVwiOlxuICAgICAgICB0aGlzLnRleHQgPSB1dGYxNlRleHQ7XG4gICAgICAgIHRoaXMuZW5kID0gdXRmMTZFbmQ7XG4gICAgICAgIG5iID0gNDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwidXRmOFwiOlxuICAgICAgICB0aGlzLmZpbGxMYXN0ID0gdXRmOEZpbGxMYXN0O1xuICAgICAgICBuYiA9IDQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImJhc2U2NFwiOlxuICAgICAgICB0aGlzLnRleHQgPSBiYXNlNjRUZXh0O1xuICAgICAgICB0aGlzLmVuZCA9IGJhc2U2NEVuZDtcbiAgICAgICAgbmIgPSAzO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRoaXMud3JpdGUgPSBzaW1wbGVXcml0ZTtcbiAgICAgICAgdGhpcy5lbmQgPSBzaW1wbGVFbmQ7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5sYXN0TmVlZCA9IDA7XG4gICAgdGhpcy5sYXN0VG90YWwgPSAwO1xuICAgIHRoaXMubGFzdENoYXIgPSBCdWZmZXIyLmFsbG9jVW5zYWZlKG5iKTtcbiAgfVxuICBTdHJpbmdEZWNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGJ1Zikge1xuICAgIGlmIChidWYubGVuZ3RoID09PSAwKSByZXR1cm4gXCJcIjtcbiAgICB2YXIgcjI7XG4gICAgdmFyIGk7XG4gICAgaWYgKHRoaXMubGFzdE5lZWQpIHtcbiAgICAgIHIyID0gdGhpcy5maWxsTGFzdChidWYpO1xuICAgICAgaWYgKHIyID09PSB2b2lkIDApIHJldHVybiBcIlwiO1xuICAgICAgaSA9IHRoaXMubGFzdE5lZWQ7XG4gICAgICB0aGlzLmxhc3ROZWVkID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaSA9IDA7XG4gICAgfVxuICAgIGlmIChpIDwgYnVmLmxlbmd0aCkgcmV0dXJuIHIyID8gcjIgKyB0aGlzLnRleHQoYnVmLCBpKSA6IHRoaXMudGV4dChidWYsIGkpO1xuICAgIHJldHVybiByMiB8fCBcIlwiO1xuICB9O1xuICBTdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5lbmQgPSB1dGY4RW5kO1xuICBTdHJpbmdEZWNvZGVyLnByb3RvdHlwZS50ZXh0ID0gdXRmOFRleHQ7XG4gIFN0cmluZ0RlY29kZXIucHJvdG90eXBlLmZpbGxMYXN0ID0gZnVuY3Rpb24oYnVmKSB7XG4gICAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgICAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkLCAwLCB0aGlzLmxhc3ROZWVkKTtcbiAgICAgIHJldHVybiB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIHRoaXMubGFzdFRvdGFsKTtcbiAgICB9XG4gICAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkLCAwLCBidWYubGVuZ3RoKTtcbiAgICB0aGlzLmxhc3ROZWVkIC09IGJ1Zi5sZW5ndGg7XG4gIH07XG4gIGZ1bmN0aW9uIHV0ZjhDaGVja0J5dGUoYnl0ZSkge1xuICAgIGlmIChieXRlIDw9IDEyNykgcmV0dXJuIDA7XG4gICAgZWxzZSBpZiAoYnl0ZSA+PiA1ID09PSA2KSByZXR1cm4gMjtcbiAgICBlbHNlIGlmIChieXRlID4+IDQgPT09IDE0KSByZXR1cm4gMztcbiAgICBlbHNlIGlmIChieXRlID4+IDMgPT09IDMwKSByZXR1cm4gNDtcbiAgICByZXR1cm4gYnl0ZSA+PiA2ID09PSAyID8gLTEgOiAtMjtcbiAgfVxuICBmdW5jdGlvbiB1dGY4Q2hlY2tJbmNvbXBsZXRlKHNlbGYyLCBidWYsIGkpIHtcbiAgICB2YXIgaiA9IGJ1Zi5sZW5ndGggLSAxO1xuICAgIGlmIChqIDwgaSkgcmV0dXJuIDA7XG4gICAgdmFyIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICAgIGlmIChuYiA+PSAwKSB7XG4gICAgICBpZiAobmIgPiAwKSBzZWxmMi5sYXN0TmVlZCA9IG5iIC0gMTtcbiAgICAgIHJldHVybiBuYjtcbiAgICB9XG4gICAgaWYgKC0taiA8IGkgfHwgbmIgPT09IC0yKSByZXR1cm4gMDtcbiAgICBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgICBpZiAobmIgPj0gMCkge1xuICAgICAgaWYgKG5iID4gMCkgc2VsZjIubGFzdE5lZWQgPSBuYiAtIDI7XG4gICAgICByZXR1cm4gbmI7XG4gICAgfVxuICAgIGlmICgtLWogPCBpIHx8IG5iID09PSAtMikgcmV0dXJuIDA7XG4gICAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gICAgaWYgKG5iID49IDApIHtcbiAgICAgIGlmIChuYiA+IDApIHtcbiAgICAgICAgaWYgKG5iID09PSAyKSBuYiA9IDA7XG4gICAgICAgIGVsc2Ugc2VsZjIubGFzdE5lZWQgPSBuYiAtIDM7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmI7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9XG4gIGZ1bmN0aW9uIHV0ZjhDaGVja0V4dHJhQnl0ZXMoc2VsZjIsIGJ1ZiwgcCkge1xuICAgIGlmICgoYnVmWzBdICYgMTkyKSAhPT0gMTI4KSB7XG4gICAgICBzZWxmMi5sYXN0TmVlZCA9IDA7XG4gICAgICByZXR1cm4gXCLvv71cIjtcbiAgICB9XG4gICAgaWYgKHNlbGYyLmxhc3ROZWVkID4gMSAmJiBidWYubGVuZ3RoID4gMSkge1xuICAgICAgaWYgKChidWZbMV0gJiAxOTIpICE9PSAxMjgpIHtcbiAgICAgICAgc2VsZjIubGFzdE5lZWQgPSAxO1xuICAgICAgICByZXR1cm4gXCLvv71cIjtcbiAgICAgIH1cbiAgICAgIGlmIChzZWxmMi5sYXN0TmVlZCA+IDIgJiYgYnVmLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgaWYgKChidWZbMl0gJiAxOTIpICE9PSAxMjgpIHtcbiAgICAgICAgICBzZWxmMi5sYXN0TmVlZCA9IDI7XG4gICAgICAgICAgcmV0dXJuIFwi77+9XCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gdXRmOEZpbGxMYXN0KGJ1Zikge1xuICAgIHZhciBwID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICAgIHZhciByMiA9IHV0ZjhDaGVja0V4dHJhQnl0ZXModGhpcywgYnVmKTtcbiAgICBpZiAocjIgIT09IHZvaWQgMCkgcmV0dXJuIHIyO1xuICAgIGlmICh0aGlzLmxhc3ROZWVkIDw9IGJ1Zi5sZW5ndGgpIHtcbiAgICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHAsIDAsIHRoaXMubGFzdE5lZWQpO1xuICAgICAgcmV0dXJuIHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgdGhpcy5sYXN0VG90YWwpO1xuICAgIH1cbiAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCBidWYubGVuZ3RoKTtcbiAgICB0aGlzLmxhc3ROZWVkIC09IGJ1Zi5sZW5ndGg7XG4gIH1cbiAgZnVuY3Rpb24gdXRmOFRleHQoYnVmLCBpKSB7XG4gICAgdmFyIHRvdGFsID0gdXRmOENoZWNrSW5jb21wbGV0ZSh0aGlzLCBidWYsIGkpO1xuICAgIGlmICghdGhpcy5sYXN0TmVlZCkgcmV0dXJuIGJ1Zi50b1N0cmluZyhcInV0ZjhcIiwgaSk7XG4gICAgdGhpcy5sYXN0VG90YWwgPSB0b3RhbDtcbiAgICB2YXIgZW5kID0gYnVmLmxlbmd0aCAtICh0b3RhbCAtIHRoaXMubGFzdE5lZWQpO1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIDAsIGVuZCk7XG4gICAgcmV0dXJuIGJ1Zi50b1N0cmluZyhcInV0ZjhcIiwgaSwgZW5kKTtcbiAgfVxuICBmdW5jdGlvbiB1dGY4RW5kKGJ1Zikge1xuICAgIHZhciByMiA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogXCJcIjtcbiAgICBpZiAodGhpcy5sYXN0TmVlZCkgcmV0dXJuIHIyICsgXCLvv71cIjtcbiAgICByZXR1cm4gcjI7XG4gIH1cbiAgZnVuY3Rpb24gdXRmMTZUZXh0KGJ1ZiwgaSkge1xuICAgIGlmICgoYnVmLmxlbmd0aCAtIGkpICUgMiA9PT0gMCkge1xuICAgICAgdmFyIHIyID0gYnVmLnRvU3RyaW5nKFwidXRmMTZsZVwiLCBpKTtcbiAgICAgIGlmIChyMikge1xuICAgICAgICB2YXIgYyA9IHIyLmNoYXJDb2RlQXQocjIubGVuZ3RoIC0gMSk7XG4gICAgICAgIGlmIChjID49IDU1Mjk2ICYmIGMgPD0gNTYzMTkpIHtcbiAgICAgICAgICB0aGlzLmxhc3ROZWVkID0gMjtcbiAgICAgICAgICB0aGlzLmxhc3RUb3RhbCA9IDQ7XG4gICAgICAgICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMl07XG4gICAgICAgICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gICAgICAgICAgcmV0dXJuIHIyLnNsaWNlKDAsIC0xKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHIyO1xuICAgIH1cbiAgICB0aGlzLmxhc3ROZWVkID0gMTtcbiAgICB0aGlzLmxhc3RUb3RhbCA9IDI7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuIGJ1Zi50b1N0cmluZyhcInV0ZjE2bGVcIiwgaSwgYnVmLmxlbmd0aCAtIDEpO1xuICB9XG4gIGZ1bmN0aW9uIHV0ZjE2RW5kKGJ1Zikge1xuICAgIHZhciByMiA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogXCJcIjtcbiAgICBpZiAodGhpcy5sYXN0TmVlZCkge1xuICAgICAgdmFyIGVuZCA9IHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZDtcbiAgICAgIHJldHVybiByMiArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoXCJ1dGYxNmxlXCIsIDAsIGVuZCk7XG4gICAgfVxuICAgIHJldHVybiByMjtcbiAgfVxuICBmdW5jdGlvbiBiYXNlNjRUZXh0KGJ1ZiwgaSkge1xuICAgIHZhciBuID0gKGJ1Zi5sZW5ndGggLSBpKSAlIDM7XG4gICAgaWYgKG4gPT09IDApIHJldHVybiBidWYudG9TdHJpbmcoXCJiYXNlNjRcIiwgaSk7XG4gICAgdGhpcy5sYXN0TmVlZCA9IDMgLSBuO1xuICAgIHRoaXMubGFzdFRvdGFsID0gMztcbiAgICBpZiAobiA9PT0gMSkge1xuICAgICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gICAgfVxuICAgIHJldHVybiBidWYudG9TdHJpbmcoXCJiYXNlNjRcIiwgaSwgYnVmLmxlbmd0aCAtIG4pO1xuICB9XG4gIGZ1bmN0aW9uIGJhc2U2NEVuZChidWYpIHtcbiAgICB2YXIgcjIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6IFwiXCI7XG4gICAgaWYgKHRoaXMubGFzdE5lZWQpIHJldHVybiByMiArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoXCJiYXNlNjRcIiwgMCwgMyAtIHRoaXMubGFzdE5lZWQpO1xuICAgIHJldHVybiByMjtcbiAgfVxuICBmdW5jdGlvbiBzaW1wbGVXcml0ZShidWYpIHtcbiAgICByZXR1cm4gYnVmLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpO1xuICB9XG4gIGZ1bmN0aW9uIHNpbXBsZUVuZChidWYpIHtcbiAgICByZXR1cm4gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiBcIlwiO1xuICB9XG4gIHJldHVybiBzdHJpbmdfZGVjb2Rlcjtcbn1cbnZhciBlbmRPZlN0cmVhbTtcbnZhciBoYXNSZXF1aXJlZEVuZE9mU3RyZWFtO1xuZnVuY3Rpb24gcmVxdWlyZUVuZE9mU3RyZWFtKCkge1xuICBpZiAoaGFzUmVxdWlyZWRFbmRPZlN0cmVhbSkgcmV0dXJuIGVuZE9mU3RyZWFtO1xuICBoYXNSZXF1aXJlZEVuZE9mU3RyZWFtID0gMTtcbiAgdmFyIEVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFID0gcmVxdWlyZUVycm9yc0Jyb3dzZXIoKS5jb2Rlcy5FUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRTtcbiAgZnVuY3Rpb24gb25jZTMoY2FsbGJhY2spIHtcbiAgICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKGNhbGxlZCkgcmV0dXJuO1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuICAgICAgY2FsbGJhY2suYXBwbHkodGhpcywgYXJncyk7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBub29wMigpIHtcbiAgfVxuICBmdW5jdGlvbiBpc1JlcXVlc3Qoc3RyZWFtKSB7XG4gICAgcmV0dXJuIHN0cmVhbS5zZXRIZWFkZXIgJiYgdHlwZW9mIHN0cmVhbS5hYm9ydCA9PT0gXCJmdW5jdGlvblwiO1xuICB9XG4gIGZ1bmN0aW9uIGVvcyhzdHJlYW0sIG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBlb3Moc3RyZWFtLCBudWxsLCBvcHRzKTtcbiAgICBpZiAoIW9wdHMpIG9wdHMgPSB7fTtcbiAgICBjYWxsYmFjayA9IG9uY2UzKGNhbGxiYWNrIHx8IG5vb3AyKTtcbiAgICB2YXIgcmVhZGFibGUgPSBvcHRzLnJlYWRhYmxlIHx8IG9wdHMucmVhZGFibGUgIT09IGZhbHNlICYmIHN0cmVhbS5yZWFkYWJsZTtcbiAgICB2YXIgd3JpdGFibGUgPSBvcHRzLndyaXRhYmxlIHx8IG9wdHMud3JpdGFibGUgIT09IGZhbHNlICYmIHN0cmVhbS53cml0YWJsZTtcbiAgICB2YXIgb25sZWdhY3lmaW5pc2ggPSBmdW5jdGlvbiBvbmxlZ2FjeWZpbmlzaDIoKSB7XG4gICAgICBpZiAoIXN0cmVhbS53cml0YWJsZSkgb25maW5pc2goKTtcbiAgICB9O1xuICAgIHZhciB3cml0YWJsZUVuZGVkID0gc3RyZWFtLl93cml0YWJsZVN0YXRlICYmIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZDtcbiAgICB2YXIgb25maW5pc2ggPSBmdW5jdGlvbiBvbmZpbmlzaDIoKSB7XG4gICAgICB3cml0YWJsZSA9IGZhbHNlO1xuICAgICAgd3JpdGFibGVFbmRlZCA9IHRydWU7XG4gICAgICBpZiAoIXJlYWRhYmxlKSBjYWxsYmFjay5jYWxsKHN0cmVhbSk7XG4gICAgfTtcbiAgICB2YXIgcmVhZGFibGVFbmRlZCA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZSAmJiBzdHJlYW0uX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZDtcbiAgICB2YXIgb25lbmQgPSBmdW5jdGlvbiBvbmVuZDIoKSB7XG4gICAgICByZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgcmVhZGFibGVFbmRlZCA9IHRydWU7XG4gICAgICBpZiAoIXdyaXRhYmxlKSBjYWxsYmFjay5jYWxsKHN0cmVhbSk7XG4gICAgfTtcbiAgICB2YXIgb25lcnJvciA9IGZ1bmN0aW9uIG9uZXJyb3IyKGVycikge1xuICAgICAgY2FsbGJhY2suY2FsbChzdHJlYW0sIGVycik7XG4gICAgfTtcbiAgICB2YXIgb25jbG9zZSA9IGZ1bmN0aW9uIG9uY2xvc2UyKCkge1xuICAgICAgdmFyIGVycjtcbiAgICAgIGlmIChyZWFkYWJsZSAmJiAhcmVhZGFibGVFbmRlZCkge1xuICAgICAgICBpZiAoIXN0cmVhbS5fcmVhZGFibGVTdGF0ZSB8fCAhc3RyZWFtLl9yZWFkYWJsZVN0YXRlLmVuZGVkKSBlcnIgPSBuZXcgRVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0UoKTtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwoc3RyZWFtLCBlcnIpO1xuICAgICAgfVxuICAgICAgaWYgKHdyaXRhYmxlICYmICF3cml0YWJsZUVuZGVkKSB7XG4gICAgICAgIGlmICghc3RyZWFtLl93cml0YWJsZVN0YXRlIHx8ICFzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZW5kZWQpIGVyciA9IG5ldyBFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRSgpO1xuICAgICAgICByZXR1cm4gY2FsbGJhY2suY2FsbChzdHJlYW0sIGVycik7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgb25yZXF1ZXN0ID0gZnVuY3Rpb24gb25yZXF1ZXN0MigpIHtcbiAgICAgIHN0cmVhbS5yZXEub24oXCJmaW5pc2hcIiwgb25maW5pc2gpO1xuICAgIH07XG4gICAgaWYgKGlzUmVxdWVzdChzdHJlYW0pKSB7XG4gICAgICBzdHJlYW0ub24oXCJjb21wbGV0ZVwiLCBvbmZpbmlzaCk7XG4gICAgICBzdHJlYW0ub24oXCJhYm9ydFwiLCBvbmNsb3NlKTtcbiAgICAgIGlmIChzdHJlYW0ucmVxKSBvbnJlcXVlc3QoKTtcbiAgICAgIGVsc2Ugc3RyZWFtLm9uKFwicmVxdWVzdFwiLCBvbnJlcXVlc3QpO1xuICAgIH0gZWxzZSBpZiAod3JpdGFibGUgJiYgIXN0cmVhbS5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgc3RyZWFtLm9uKFwiZW5kXCIsIG9ubGVnYWN5ZmluaXNoKTtcbiAgICAgIHN0cmVhbS5vbihcImNsb3NlXCIsIG9ubGVnYWN5ZmluaXNoKTtcbiAgICB9XG4gICAgc3RyZWFtLm9uKFwiZW5kXCIsIG9uZW5kKTtcbiAgICBzdHJlYW0ub24oXCJmaW5pc2hcIiwgb25maW5pc2gpO1xuICAgIGlmIChvcHRzLmVycm9yICE9PSBmYWxzZSkgc3RyZWFtLm9uKFwiZXJyb3JcIiwgb25lcnJvcik7XG4gICAgc3RyZWFtLm9uKFwiY2xvc2VcIiwgb25jbG9zZSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiY29tcGxldGVcIiwgb25maW5pc2gpO1xuICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiYWJvcnRcIiwgb25jbG9zZSk7XG4gICAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoXCJyZXF1ZXN0XCIsIG9ucmVxdWVzdCk7XG4gICAgICBpZiAoc3RyZWFtLnJlcSkgc3RyZWFtLnJlcS5yZW1vdmVMaXN0ZW5lcihcImZpbmlzaFwiLCBvbmZpbmlzaCk7XG4gICAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIiwgb25sZWdhY3lmaW5pc2gpO1xuICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIiwgb25sZWdhY3lmaW5pc2gpO1xuICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiZmluaXNoXCIsIG9uZmluaXNoKTtcbiAgICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcihcImVuZFwiLCBvbmVuZCk7XG4gICAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLCBvbmVycm9yKTtcbiAgICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsIG9uY2xvc2UpO1xuICAgIH07XG4gIH1cbiAgZW5kT2ZTdHJlYW0gPSBlb3M7XG4gIHJldHVybiBlbmRPZlN0cmVhbTtcbn1cbnZhciBhc3luY19pdGVyYXRvcjtcbnZhciBoYXNSZXF1aXJlZEFzeW5jX2l0ZXJhdG9yO1xuZnVuY3Rpb24gcmVxdWlyZUFzeW5jX2l0ZXJhdG9yKCkge1xuICBpZiAoaGFzUmVxdWlyZWRBc3luY19pdGVyYXRvcikgcmV0dXJuIGFzeW5jX2l0ZXJhdG9yO1xuICBoYXNSZXF1aXJlZEFzeW5jX2l0ZXJhdG9yID0gMTtcbiAgdmFyIF9PYmplY3Qkc2V0UHJvdG90eXBlTztcbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH1cbiAgdmFyIGZpbmlzaGVkID0gcmVxdWlyZUVuZE9mU3RyZWFtKCk7XG4gIHZhciBrTGFzdFJlc29sdmUgPSBTeW1ib2woXCJsYXN0UmVzb2x2ZVwiKTtcbiAgdmFyIGtMYXN0UmVqZWN0ID0gU3ltYm9sKFwibGFzdFJlamVjdFwiKTtcbiAgdmFyIGtFcnJvciA9IFN5bWJvbChcImVycm9yXCIpO1xuICB2YXIga0VuZGVkID0gU3ltYm9sKFwiZW5kZWRcIik7XG4gIHZhciBrTGFzdFByb21pc2UgPSBTeW1ib2woXCJsYXN0UHJvbWlzZVwiKTtcbiAgdmFyIGtIYW5kbGVQcm9taXNlID0gU3ltYm9sKFwiaGFuZGxlUHJvbWlzZVwiKTtcbiAgdmFyIGtTdHJlYW0gPSBTeW1ib2woXCJzdHJlYW1cIik7XG4gIGZ1bmN0aW9uIGNyZWF0ZUl0ZXJSZXN1bHQodmFsdWUsIGRvbmUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWUsXG4gICAgICBkb25lXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiByZWFkQW5kUmVzb2x2ZShpdGVyKSB7XG4gICAgdmFyIHJlc29sdmUyID0gaXRlcltrTGFzdFJlc29sdmVdO1xuICAgIGlmIChyZXNvbHZlMiAhPT0gbnVsbCkge1xuICAgICAgdmFyIGRhdGEgPSBpdGVyW2tTdHJlYW1dLnJlYWQoKTtcbiAgICAgIGlmIChkYXRhICE9PSBudWxsKSB7XG4gICAgICAgIGl0ZXJba0xhc3RQcm9taXNlXSA9IG51bGw7XG4gICAgICAgIGl0ZXJba0xhc3RSZXNvbHZlXSA9IG51bGw7XG4gICAgICAgIGl0ZXJba0xhc3RSZWplY3RdID0gbnVsbDtcbiAgICAgICAgcmVzb2x2ZTIoY3JlYXRlSXRlclJlc3VsdChkYXRhLCBmYWxzZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBvblJlYWRhYmxlKGl0ZXIpIHtcbiAgICBwcm9jZXNzJDEubmV4dFRpY2socmVhZEFuZFJlc29sdmUsIGl0ZXIpO1xuICB9XG4gIGZ1bmN0aW9uIHdyYXBGb3JOZXh0KGxhc3RQcm9taXNlLCBpdGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHJlc29sdmUyLCByZWplY3QpIHtcbiAgICAgIGxhc3RQcm9taXNlLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChpdGVyW2tFbmRlZF0pIHtcbiAgICAgICAgICByZXNvbHZlMihjcmVhdGVJdGVyUmVzdWx0KHZvaWQgMCwgdHJ1ZSkpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpdGVyW2tIYW5kbGVQcm9taXNlXShyZXNvbHZlMiwgcmVqZWN0KTtcbiAgICAgIH0sIHJlamVjdCk7XG4gICAgfTtcbiAgfVxuICB2YXIgQXN5bmNJdGVyYXRvclByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihmdW5jdGlvbigpIHtcbiAgfSk7XG4gIHZhciBSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3JQcm90b3R5cGUgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YoKF9PYmplY3Qkc2V0UHJvdG90eXBlTyA9IHtcbiAgICBnZXQgc3RyZWFtKCkge1xuICAgICAgcmV0dXJuIHRoaXNba1N0cmVhbV07XG4gICAgfSxcbiAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHZhciBlcnJvciA9IHRoaXNba0Vycm9yXTtcbiAgICAgIGlmIChlcnJvciAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXNba0VuZGVkXSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNyZWF0ZUl0ZXJSZXN1bHQodm9pZCAwLCB0cnVlKSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpc1trU3RyZWFtXS5kZXN0cm95ZWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUyLCByZWplY3QpIHtcbiAgICAgICAgICBwcm9jZXNzJDEubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXNba0Vycm9yXSkge1xuICAgICAgICAgICAgICByZWplY3QoX3RoaXNba0Vycm9yXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXNvbHZlMihjcmVhdGVJdGVyUmVzdWx0KHZvaWQgMCwgdHJ1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHZhciBsYXN0UHJvbWlzZSA9IHRoaXNba0xhc3RQcm9taXNlXTtcbiAgICAgIHZhciBwcm9taXNlO1xuICAgICAgaWYgKGxhc3RQcm9taXNlKSB7XG4gICAgICAgIHByb21pc2UgPSBuZXcgUHJvbWlzZSh3cmFwRm9yTmV4dChsYXN0UHJvbWlzZSwgdGhpcykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGRhdGEgPSB0aGlzW2tTdHJlYW1dLnJlYWQoKTtcbiAgICAgICAgaWYgKGRhdGEgIT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNyZWF0ZUl0ZXJSZXN1bHQoZGF0YSwgZmFsc2UpKTtcbiAgICAgICAgfVxuICAgICAgICBwcm9taXNlID0gbmV3IFByb21pc2UodGhpc1trSGFuZGxlUHJvbWlzZV0pO1xuICAgICAgfVxuICAgICAgdGhpc1trTGFzdFByb21pc2VdID0gcHJvbWlzZTtcbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbiAgfSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3Qkc2V0UHJvdG90eXBlTywgU3ltYm9sLmFzeW5jSXRlcmF0b3IsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3Qkc2V0UHJvdG90eXBlTywgXCJyZXR1cm5cIiwgZnVuY3Rpb24gX3JldHVybigpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZTIsIHJlamVjdCkge1xuICAgICAgX3RoaXMyW2tTdHJlYW1dLmRlc3Ryb3kobnVsbCwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZTIoY3JlYXRlSXRlclJlc3VsdCh2b2lkIDAsIHRydWUpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KSwgX09iamVjdCRzZXRQcm90b3R5cGVPKSwgQXN5bmNJdGVyYXRvclByb3RvdHlwZSk7XG4gIHZhciBjcmVhdGVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3IgPSBmdW5jdGlvbiBjcmVhdGVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3IyKHN0cmVhbSkge1xuICAgIHZhciBfT2JqZWN0JGNyZWF0ZTtcbiAgICB2YXIgaXRlcmF0b3IgPSBPYmplY3QuY3JlYXRlKFJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvclByb3RvdHlwZSwgKF9PYmplY3QkY3JlYXRlID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGNyZWF0ZSwga1N0cmVhbSwge1xuICAgICAgdmFsdWU6IHN0cmVhbSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSksIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGNyZWF0ZSwga0xhc3RSZXNvbHZlLCB7XG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSksIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGNyZWF0ZSwga0xhc3RSZWplY3QsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkY3JlYXRlLCBrRXJyb3IsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkY3JlYXRlLCBrRW5kZWQsIHtcbiAgICAgIHZhbHVlOiBzdHJlYW0uX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZCxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSksIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGNyZWF0ZSwga0hhbmRsZVByb21pc2UsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShyZXNvbHZlMiwgcmVqZWN0KSB7XG4gICAgICAgIHZhciBkYXRhID0gaXRlcmF0b3Jba1N0cmVhbV0ucmVhZCgpO1xuICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgIGl0ZXJhdG9yW2tMYXN0UHJvbWlzZV0gPSBudWxsO1xuICAgICAgICAgIGl0ZXJhdG9yW2tMYXN0UmVzb2x2ZV0gPSBudWxsO1xuICAgICAgICAgIGl0ZXJhdG9yW2tMYXN0UmVqZWN0XSA9IG51bGw7XG4gICAgICAgICAgcmVzb2x2ZTIoY3JlYXRlSXRlclJlc3VsdChkYXRhLCBmYWxzZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZXJhdG9yW2tMYXN0UmVzb2x2ZV0gPSByZXNvbHZlMjtcbiAgICAgICAgICBpdGVyYXRvcltrTGFzdFJlamVjdF0gPSByZWplY3Q7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pLCBfT2JqZWN0JGNyZWF0ZSkpO1xuICAgIGl0ZXJhdG9yW2tMYXN0UHJvbWlzZV0gPSBudWxsO1xuICAgIGZpbmlzaGVkKHN0cmVhbSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICBpZiAoZXJyICYmIGVyci5jb2RlICE9PSBcIkVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFXCIpIHtcbiAgICAgICAgdmFyIHJlamVjdCA9IGl0ZXJhdG9yW2tMYXN0UmVqZWN0XTtcbiAgICAgICAgaWYgKHJlamVjdCAhPT0gbnVsbCkge1xuICAgICAgICAgIGl0ZXJhdG9yW2tMYXN0UHJvbWlzZV0gPSBudWxsO1xuICAgICAgICAgIGl0ZXJhdG9yW2tMYXN0UmVzb2x2ZV0gPSBudWxsO1xuICAgICAgICAgIGl0ZXJhdG9yW2tMYXN0UmVqZWN0XSA9IG51bGw7XG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH1cbiAgICAgICAgaXRlcmF0b3Jba0Vycm9yXSA9IGVycjtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHJlc29sdmUyID0gaXRlcmF0b3Jba0xhc3RSZXNvbHZlXTtcbiAgICAgIGlmIChyZXNvbHZlMiAhPT0gbnVsbCkge1xuICAgICAgICBpdGVyYXRvcltrTGFzdFByb21pc2VdID0gbnVsbDtcbiAgICAgICAgaXRlcmF0b3Jba0xhc3RSZXNvbHZlXSA9IG51bGw7XG4gICAgICAgIGl0ZXJhdG9yW2tMYXN0UmVqZWN0XSA9IG51bGw7XG4gICAgICAgIHJlc29sdmUyKGNyZWF0ZUl0ZXJSZXN1bHQodm9pZCAwLCB0cnVlKSk7XG4gICAgICB9XG4gICAgICBpdGVyYXRvcltrRW5kZWRdID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBzdHJlYW0ub24oXCJyZWFkYWJsZVwiLCBvblJlYWRhYmxlLmJpbmQobnVsbCwgaXRlcmF0b3IpKTtcbiAgICByZXR1cm4gaXRlcmF0b3I7XG4gIH07XG4gIGFzeW5jX2l0ZXJhdG9yID0gY3JlYXRlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yO1xuICByZXR1cm4gYXN5bmNfaXRlcmF0b3I7XG59XG52YXIgZnJvbUJyb3dzZXI7XG52YXIgaGFzUmVxdWlyZWRGcm9tQnJvd3NlcjtcbmZ1bmN0aW9uIHJlcXVpcmVGcm9tQnJvd3NlcigpIHtcbiAgaWYgKGhhc1JlcXVpcmVkRnJvbUJyb3dzZXIpIHJldHVybiBmcm9tQnJvd3NlcjtcbiAgaGFzUmVxdWlyZWRGcm9tQnJvd3NlciA9IDE7XG4gIGZyb21Ccm93c2VyID0gZnVuY3Rpb24oKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiUmVhZGFibGUuZnJvbSBpcyBub3QgYXZhaWxhYmxlIGluIHRoZSBicm93c2VyXCIpO1xuICB9O1xuICByZXR1cm4gZnJvbUJyb3dzZXI7XG59XG52YXIgX3N0cmVhbV9yZWFkYWJsZTtcbnZhciBoYXNSZXF1aXJlZF9zdHJlYW1fcmVhZGFibGU7XG5mdW5jdGlvbiByZXF1aXJlX3N0cmVhbV9yZWFkYWJsZSgpIHtcbiAgaWYgKGhhc1JlcXVpcmVkX3N0cmVhbV9yZWFkYWJsZSkgcmV0dXJuIF9zdHJlYW1fcmVhZGFibGU7XG4gIGhhc1JlcXVpcmVkX3N0cmVhbV9yZWFkYWJsZSA9IDE7XG4gIF9zdHJlYW1fcmVhZGFibGUgPSBSZWFkYWJsZTtcbiAgdmFyIER1cGxleDtcbiAgUmVhZGFibGUuUmVhZGFibGVTdGF0ZSA9IFJlYWRhYmxlU3RhdGU7XG4gIGV2ZW50c0V4cG9ydHMuRXZlbnRFbWl0dGVyO1xuICB2YXIgRUVsaXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gRUVsaXN0ZW5lckNvdW50MihlbWl0dGVyLCB0eXBlMikge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVycyh0eXBlMikubGVuZ3RoO1xuICB9O1xuICB2YXIgU3RyZWFtMiA9IHJlcXVpcmVTdHJlYW1Ccm93c2VyKCk7XG4gIHZhciBCdWZmZXIyID0gcmVxdWlyZUJ1ZmZlcigpLkJ1ZmZlcjtcbiAgdmFyIE91clVpbnQ4QXJyYXkgPSBjb21tb25qc0dsb2JhbC5VaW50OEFycmF5IHx8IGZ1bmN0aW9uKCkge1xuICB9O1xuICBmdW5jdGlvbiBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKSB7XG4gICAgcmV0dXJuIEJ1ZmZlcjIuZnJvbShjaHVuayk7XG4gIH1cbiAgZnVuY3Rpb24gX2lzVWludDhBcnJheShvYmopIHtcbiAgICByZXR1cm4gQnVmZmVyMi5pc0J1ZmZlcihvYmopIHx8IG9iaiBpbnN0YW5jZW9mIE91clVpbnQ4QXJyYXk7XG4gIH1cbiAgdmFyIGRlYnVnVXRpbCA9IHJlcXVpcmVVdGlsKCk7XG4gIHZhciBkZWJ1ZztcbiAgaWYgKGRlYnVnVXRpbCAmJiBkZWJ1Z1V0aWwuZGVidWdsb2cpIHtcbiAgICBkZWJ1ZyA9IGRlYnVnVXRpbC5kZWJ1Z2xvZyhcInN0cmVhbVwiKTtcbiAgfSBlbHNlIHtcbiAgICBkZWJ1ZyA9IGZ1bmN0aW9uIGRlYnVnMigpIHtcbiAgICB9O1xuICB9XG4gIHZhciBCdWZmZXJMaXN0ID0gcmVxdWlyZUJ1ZmZlcl9saXN0KCk7XG4gIHZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmVEZXN0cm95KCk7XG4gIHZhciBfcmVxdWlyZSA9IHJlcXVpcmVTdGF0ZSgpLCBnZXRIaWdoV2F0ZXJNYXJrID0gX3JlcXVpcmUuZ2V0SGlnaFdhdGVyTWFyaztcbiAgdmFyIF9yZXF1aXJlJGNvZGVzID0gcmVxdWlyZUVycm9yc0Jyb3dzZXIoKS5jb2RlcywgRVJSX0lOVkFMSURfQVJHX1RZUEUgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfSU5WQUxJRF9BUkdfVFlQRSwgRVJSX1NUUkVBTV9QVVNIX0FGVEVSX0VPRiA9IF9yZXF1aXJlJGNvZGVzLkVSUl9TVFJFQU1fUFVTSF9BRlRFUl9FT0YsIEVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVEID0gX3JlcXVpcmUkY29kZXMuRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQsIEVSUl9TVFJFQU1fVU5TSElGVF9BRlRFUl9FTkRfRVZFTlQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfU1RSRUFNX1VOU0hJRlRfQUZURVJfRU5EX0VWRU5UO1xuICB2YXIgU3RyaW5nRGVjb2RlcjtcbiAgdmFyIGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvcjtcbiAgdmFyIGZyb207XG4gIGluaGVyaXRzX2Jyb3dzZXJFeHBvcnRzKFJlYWRhYmxlLCBTdHJlYW0yKTtcbiAgdmFyIGVycm9yT3JEZXN0cm95ID0gZGVzdHJveUltcGwuZXJyb3JPckRlc3Ryb3k7XG4gIHZhciBrUHJveHlFdmVudHMgPSBbXCJlcnJvclwiLCBcImNsb3NlXCIsIFwiZGVzdHJveVwiLCBcInBhdXNlXCIsIFwicmVzdW1lXCJdO1xuICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIyKGVtaXR0ZXIsIGV2ZW50LCBmbikge1xuICAgIGlmICh0eXBlb2YgZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyKGV2ZW50LCBmbik7XG4gICAgaWYgKCFlbWl0dGVyLl9ldmVudHMgfHwgIWVtaXR0ZXIuX2V2ZW50c1tldmVudF0pIGVtaXR0ZXIub24oZXZlbnQsIGZuKTtcbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGVtaXR0ZXIuX2V2ZW50c1tldmVudF0pKSBlbWl0dGVyLl9ldmVudHNbZXZlbnRdLnVuc2hpZnQoZm4pO1xuICAgIGVsc2UgZW1pdHRlci5fZXZlbnRzW2V2ZW50XSA9IFtmbiwgZW1pdHRlci5fZXZlbnRzW2V2ZW50XV07XG4gIH1cbiAgZnVuY3Rpb24gUmVhZGFibGVTdGF0ZShvcHRpb25zMiwgc3RyZWFtLCBpc0R1cGxleCkge1xuICAgIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlX3N0cmVhbV9kdXBsZXgoKTtcbiAgICBvcHRpb25zMiA9IG9wdGlvbnMyIHx8IHt9O1xuICAgIGlmICh0eXBlb2YgaXNEdXBsZXggIT09IFwiYm9vbGVhblwiKSBpc0R1cGxleCA9IHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleDtcbiAgICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMyLm9iamVjdE1vZGU7XG4gICAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zMi5yZWFkYWJsZU9iamVjdE1vZGU7XG4gICAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gZ2V0SGlnaFdhdGVyTWFyayh0aGlzLCBvcHRpb25zMiwgXCJyZWFkYWJsZUhpZ2hXYXRlck1hcmtcIiwgaXNEdXBsZXgpO1xuICAgIHRoaXMuYnVmZmVyID0gbmV3IEJ1ZmZlckxpc3QoKTtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5waXBlcyA9IG51bGw7XG4gICAgdGhpcy5waXBlc0NvdW50ID0gMDtcbiAgICB0aGlzLmZsb3dpbmcgPSBudWxsO1xuICAgIHRoaXMuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLnN5bmMgPSB0cnVlO1xuICAgIHRoaXMubmVlZFJlYWRhYmxlID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgICB0aGlzLnJlYWRhYmxlTGlzdGVuaW5nID0gZmFsc2U7XG4gICAgdGhpcy5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgICB0aGlzLnBhdXNlZCA9IHRydWU7XG4gICAgdGhpcy5lbWl0Q2xvc2UgPSBvcHRpb25zMi5lbWl0Q2xvc2UgIT09IGZhbHNlO1xuICAgIHRoaXMuYXV0b0Rlc3Ryb3kgPSAhIW9wdGlvbnMyLmF1dG9EZXN0cm95O1xuICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zMi5kZWZhdWx0RW5jb2RpbmcgfHwgXCJ1dGY4XCI7XG4gICAgdGhpcy5hd2FpdERyYWluID0gMDtcbiAgICB0aGlzLnJlYWRpbmdNb3JlID0gZmFsc2U7XG4gICAgdGhpcy5kZWNvZGVyID0gbnVsbDtcbiAgICB0aGlzLmVuY29kaW5nID0gbnVsbDtcbiAgICBpZiAob3B0aW9uczIuZW5jb2RpbmcpIHtcbiAgICAgIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmVTdHJpbmdfZGVjb2RlcigpLlN0cmluZ0RlY29kZXI7XG4gICAgICB0aGlzLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihvcHRpb25zMi5lbmNvZGluZyk7XG4gICAgICB0aGlzLmVuY29kaW5nID0gb3B0aW9uczIuZW5jb2Rpbmc7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIFJlYWRhYmxlKG9wdGlvbnMyKSB7XG4gICAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmVfc3RyZWFtX2R1cGxleCgpO1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZWFkYWJsZSkpIHJldHVybiBuZXcgUmVhZGFibGUob3B0aW9uczIpO1xuICAgIHZhciBpc0R1cGxleCA9IHRoaXMgaW5zdGFuY2VvZiBEdXBsZXg7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZSA9IG5ldyBSZWFkYWJsZVN0YXRlKG9wdGlvbnMyLCB0aGlzLCBpc0R1cGxleCk7XG4gICAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG4gICAgaWYgKG9wdGlvbnMyKSB7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMyLnJlYWQgPT09IFwiZnVuY3Rpb25cIikgdGhpcy5fcmVhZCA9IG9wdGlvbnMyLnJlYWQ7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMyLmRlc3Ryb3kgPT09IFwiZnVuY3Rpb25cIikgdGhpcy5fZGVzdHJveSA9IG9wdGlvbnMyLmRlc3Ryb3k7XG4gICAgfVxuICAgIFN0cmVhbTIuY2FsbCh0aGlzKTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCBcImRlc3Ryb3llZFwiLCB7XG4gICAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgIGlmICghdGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICAgIH1cbiAgfSk7XG4gIFJlYWRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcbiAgUmVhZGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3kgPSBkZXN0cm95SW1wbC51bmRlc3Ryb3k7XG4gIFJlYWRhYmxlLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uKGVyciwgY2IpIHtcbiAgICBjYihlcnIpO1xuICB9O1xuICBSZWFkYWJsZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZykge1xuICAgIHZhciBzdGF0ZTIgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIHZhciBza2lwQ2h1bmtDaGVjaztcbiAgICBpZiAoIXN0YXRlMi5vYmplY3RNb2RlKSB7XG4gICAgICBpZiAodHlwZW9mIGNodW5rID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGVuY29kaW5nID0gZW5jb2RpbmcgfHwgc3RhdGUyLmRlZmF1bHRFbmNvZGluZztcbiAgICAgICAgaWYgKGVuY29kaW5nICE9PSBzdGF0ZTIuZW5jb2RpbmcpIHtcbiAgICAgICAgICBjaHVuayA9IEJ1ZmZlcjIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICAgICAgICAgIGVuY29kaW5nID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBza2lwQ2h1bmtDaGVjayA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIGVuY29kaW5nLCBmYWxzZSwgc2tpcENodW5rQ2hlY2spO1xuICB9O1xuICBSZWFkYWJsZS5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uKGNodW5rKSB7XG4gICAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIG51bGwsIHRydWUsIGZhbHNlKTtcbiAgfTtcbiAgZnVuY3Rpb24gcmVhZGFibGVBZGRDaHVuayhzdHJlYW0sIGNodW5rLCBlbmNvZGluZywgYWRkVG9Gcm9udCwgc2tpcENodW5rQ2hlY2spIHtcbiAgICBkZWJ1ZyhcInJlYWRhYmxlQWRkQ2h1bmtcIiwgY2h1bmspO1xuICAgIHZhciBzdGF0ZTIgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgICBzdGF0ZTIucmVhZGluZyA9IGZhbHNlO1xuICAgICAgb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBlcjtcbiAgICAgIGlmICghc2tpcENodW5rQ2hlY2spIGVyID0gY2h1bmtJbnZhbGlkKHN0YXRlMiwgY2h1bmspO1xuICAgICAgaWYgKGVyKSB7XG4gICAgICAgIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXIpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZTIub2JqZWN0TW9kZSB8fCBjaHVuayAmJiBjaHVuay5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2h1bmsgIT09IFwic3RyaW5nXCIgJiYgIXN0YXRlMi5vYmplY3RNb2RlICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihjaHVuaykgIT09IEJ1ZmZlcjIucHJvdG90eXBlKSB7XG4gICAgICAgICAgY2h1bmsgPSBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWRkVG9Gcm9udCkge1xuICAgICAgICAgIGlmIChzdGF0ZTIuZW5kRW1pdHRlZCkgZXJyb3JPckRlc3Ryb3koc3RyZWFtLCBuZXcgRVJSX1NUUkVBTV9VTlNISUZUX0FGVEVSX0VORF9FVkVOVCgpKTtcbiAgICAgICAgICBlbHNlIGFkZENodW5rKHN0cmVhbSwgc3RhdGUyLCBjaHVuaywgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhdGUyLmVuZGVkKSB7XG4gICAgICAgICAgZXJyb3JPckRlc3Ryb3koc3RyZWFtLCBuZXcgRVJSX1NUUkVBTV9QVVNIX0FGVEVSX0VPRigpKTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZTIuZGVzdHJveWVkKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXRlMi5yZWFkaW5nID0gZmFsc2U7XG4gICAgICAgICAgaWYgKHN0YXRlMi5kZWNvZGVyICYmICFlbmNvZGluZykge1xuICAgICAgICAgICAgY2h1bmsgPSBzdGF0ZTIuZGVjb2Rlci53cml0ZShjaHVuayk7XG4gICAgICAgICAgICBpZiAoc3RhdGUyLm9iamVjdE1vZGUgfHwgY2h1bmsubGVuZ3RoICE9PSAwKSBhZGRDaHVuayhzdHJlYW0sIHN0YXRlMiwgY2h1bmssIGZhbHNlKTtcbiAgICAgICAgICAgIGVsc2UgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlMik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFkZENodW5rKHN0cmVhbSwgc3RhdGUyLCBjaHVuaywgZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghYWRkVG9Gcm9udCkge1xuICAgICAgICBzdGF0ZTIucmVhZGluZyA9IGZhbHNlO1xuICAgICAgICBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICFzdGF0ZTIuZW5kZWQgJiYgKHN0YXRlMi5sZW5ndGggPCBzdGF0ZTIuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZTIubGVuZ3RoID09PSAwKTtcbiAgfVxuICBmdW5jdGlvbiBhZGRDaHVuayhzdHJlYW0sIHN0YXRlMiwgY2h1bmssIGFkZFRvRnJvbnQpIHtcbiAgICBpZiAoc3RhdGUyLmZsb3dpbmcgJiYgc3RhdGUyLmxlbmd0aCA9PT0gMCAmJiAhc3RhdGUyLnN5bmMpIHtcbiAgICAgIHN0YXRlMi5hd2FpdERyYWluID0gMDtcbiAgICAgIHN0cmVhbS5lbWl0KFwiZGF0YVwiLCBjaHVuayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlMi5sZW5ndGggKz0gc3RhdGUyLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgICAgaWYgKGFkZFRvRnJvbnQpIHN0YXRlMi5idWZmZXIudW5zaGlmdChjaHVuayk7XG4gICAgICBlbHNlIHN0YXRlMi5idWZmZXIucHVzaChjaHVuayk7XG4gICAgICBpZiAoc3RhdGUyLm5lZWRSZWFkYWJsZSkgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG4gICAgfVxuICAgIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZTIpO1xuICB9XG4gIGZ1bmN0aW9uIGNodW5rSW52YWxpZChzdGF0ZTIsIGNodW5rKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmICghX2lzVWludDhBcnJheShjaHVuaykgJiYgdHlwZW9mIGNodW5rICE9PSBcInN0cmluZ1wiICYmIGNodW5rICE9PSB2b2lkIDAgJiYgIXN0YXRlMi5vYmplY3RNb2RlKSB7XG4gICAgICBlciA9IG5ldyBFUlJfSU5WQUxJRF9BUkdfVFlQRShcImNodW5rXCIsIFtcInN0cmluZ1wiLCBcIkJ1ZmZlclwiLCBcIlVpbnQ4QXJyYXlcIl0sIGNodW5rKTtcbiAgICB9XG4gICAgcmV0dXJuIGVyO1xuICB9XG4gIFJlYWRhYmxlLnByb3RvdHlwZS5pc1BhdXNlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPT09IGZhbHNlO1xuICB9O1xuICBSZWFkYWJsZS5wcm90b3R5cGUuc2V0RW5jb2RpbmcgPSBmdW5jdGlvbihlbmMpIHtcbiAgICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlU3RyaW5nX2RlY29kZXIoKS5TdHJpbmdEZWNvZGVyO1xuICAgIHZhciBkZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlY29kZXIgPSBkZWNvZGVyO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5jb2RpbmcgPSB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlY29kZXIuZW5jb2Rpbmc7XG4gICAgdmFyIHAgPSB0aGlzLl9yZWFkYWJsZVN0YXRlLmJ1ZmZlci5oZWFkO1xuICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICB3aGlsZSAocCAhPT0gbnVsbCkge1xuICAgICAgY29udGVudCArPSBkZWNvZGVyLndyaXRlKHAuZGF0YSk7XG4gICAgICBwID0gcC5uZXh0O1xuICAgIH1cbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmJ1ZmZlci5jbGVhcigpO1xuICAgIGlmIChjb250ZW50ICE9PSBcIlwiKSB0aGlzLl9yZWFkYWJsZVN0YXRlLmJ1ZmZlci5wdXNoKGNvbnRlbnQpO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUubGVuZ3RoID0gY29udGVudC5sZW5ndGg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHZhciBNQVhfSFdNID0gMTA3Mzc0MTgyNDtcbiAgZnVuY3Rpb24gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobikge1xuICAgIGlmIChuID49IE1BWF9IV00pIHtcbiAgICAgIG4gPSBNQVhfSFdNO1xuICAgIH0gZWxzZSB7XG4gICAgICBuLS07XG4gICAgICBuIHw9IG4gPj4+IDE7XG4gICAgICBuIHw9IG4gPj4+IDI7XG4gICAgICBuIHw9IG4gPj4+IDQ7XG4gICAgICBuIHw9IG4gPj4+IDg7XG4gICAgICBuIHw9IG4gPj4+IDE2O1xuICAgICAgbisrO1xuICAgIH1cbiAgICByZXR1cm4gbjtcbiAgfVxuICBmdW5jdGlvbiBob3dNdWNoVG9SZWFkKG4sIHN0YXRlMikge1xuICAgIGlmIChuIDw9IDAgfHwgc3RhdGUyLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZTIuZW5kZWQpIHJldHVybiAwO1xuICAgIGlmIChzdGF0ZTIub2JqZWN0TW9kZSkgcmV0dXJuIDE7XG4gICAgaWYgKG4gIT09IG4pIHtcbiAgICAgIGlmIChzdGF0ZTIuZmxvd2luZyAmJiBzdGF0ZTIubGVuZ3RoKSByZXR1cm4gc3RhdGUyLmJ1ZmZlci5oZWFkLmRhdGEubGVuZ3RoO1xuICAgICAgZWxzZSByZXR1cm4gc3RhdGUyLmxlbmd0aDtcbiAgICB9XG4gICAgaWYgKG4gPiBzdGF0ZTIuaGlnaFdhdGVyTWFyaykgc3RhdGUyLmhpZ2hXYXRlck1hcmsgPSBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKTtcbiAgICBpZiAobiA8PSBzdGF0ZTIubGVuZ3RoKSByZXR1cm4gbjtcbiAgICBpZiAoIXN0YXRlMi5lbmRlZCkge1xuICAgICAgc3RhdGUyLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXRlMi5sZW5ndGg7XG4gIH1cbiAgUmVhZGFibGUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbihuKSB7XG4gICAgZGVidWcoXCJyZWFkXCIsIG4pO1xuICAgIG4gPSBwYXJzZUludChuLCAxMCk7XG4gICAgdmFyIHN0YXRlMiA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgdmFyIG5PcmlnID0gbjtcbiAgICBpZiAobiAhPT0gMCkgc3RhdGUyLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICAgIGlmIChuID09PSAwICYmIHN0YXRlMi5uZWVkUmVhZGFibGUgJiYgKChzdGF0ZTIuaGlnaFdhdGVyTWFyayAhPT0gMCA/IHN0YXRlMi5sZW5ndGggPj0gc3RhdGUyLmhpZ2hXYXRlck1hcmsgOiBzdGF0ZTIubGVuZ3RoID4gMCkgfHwgc3RhdGUyLmVuZGVkKSkge1xuICAgICAgZGVidWcoXCJyZWFkOiBlbWl0UmVhZGFibGVcIiwgc3RhdGUyLmxlbmd0aCwgc3RhdGUyLmVuZGVkKTtcbiAgICAgIGlmIChzdGF0ZTIubGVuZ3RoID09PSAwICYmIHN0YXRlMi5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7XG4gICAgICBlbHNlIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBuID0gaG93TXVjaFRvUmVhZChuLCBzdGF0ZTIpO1xuICAgIGlmIChuID09PSAwICYmIHN0YXRlMi5lbmRlZCkge1xuICAgICAgaWYgKHN0YXRlMi5sZW5ndGggPT09IDApIGVuZFJlYWRhYmxlKHRoaXMpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBkb1JlYWQgPSBzdGF0ZTIubmVlZFJlYWRhYmxlO1xuICAgIGRlYnVnKFwibmVlZCByZWFkYWJsZVwiLCBkb1JlYWQpO1xuICAgIGlmIChzdGF0ZTIubGVuZ3RoID09PSAwIHx8IHN0YXRlMi5sZW5ndGggLSBuIDwgc3RhdGUyLmhpZ2hXYXRlck1hcmspIHtcbiAgICAgIGRvUmVhZCA9IHRydWU7XG4gICAgICBkZWJ1ZyhcImxlbmd0aCBsZXNzIHRoYW4gd2F0ZXJtYXJrXCIsIGRvUmVhZCk7XG4gICAgfVxuICAgIGlmIChzdGF0ZTIuZW5kZWQgfHwgc3RhdGUyLnJlYWRpbmcpIHtcbiAgICAgIGRvUmVhZCA9IGZhbHNlO1xuICAgICAgZGVidWcoXCJyZWFkaW5nIG9yIGVuZGVkXCIsIGRvUmVhZCk7XG4gICAgfSBlbHNlIGlmIChkb1JlYWQpIHtcbiAgICAgIGRlYnVnKFwiZG8gcmVhZFwiKTtcbiAgICAgIHN0YXRlMi5yZWFkaW5nID0gdHJ1ZTtcbiAgICAgIHN0YXRlMi5zeW5jID0gdHJ1ZTtcbiAgICAgIGlmIChzdGF0ZTIubGVuZ3RoID09PSAwKSBzdGF0ZTIubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIHRoaXMuX3JlYWQoc3RhdGUyLmhpZ2hXYXRlck1hcmspO1xuICAgICAgc3RhdGUyLnN5bmMgPSBmYWxzZTtcbiAgICAgIGlmICghc3RhdGUyLnJlYWRpbmcpIG4gPSBob3dNdWNoVG9SZWFkKG5PcmlnLCBzdGF0ZTIpO1xuICAgIH1cbiAgICB2YXIgcmV0O1xuICAgIGlmIChuID4gMCkgcmV0ID0gZnJvbUxpc3Qobiwgc3RhdGUyKTtcbiAgICBlbHNlIHJldCA9IG51bGw7XG4gICAgaWYgKHJldCA9PT0gbnVsbCkge1xuICAgICAgc3RhdGUyLm5lZWRSZWFkYWJsZSA9IHN0YXRlMi5sZW5ndGggPD0gc3RhdGUyLmhpZ2hXYXRlck1hcms7XG4gICAgICBuID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUyLmxlbmd0aCAtPSBuO1xuICAgICAgc3RhdGUyLmF3YWl0RHJhaW4gPSAwO1xuICAgIH1cbiAgICBpZiAoc3RhdGUyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgaWYgKCFzdGF0ZTIuZW5kZWQpIHN0YXRlMi5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgICAgaWYgKG5PcmlnICE9PSBuICYmIHN0YXRlMi5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7XG4gICAgfVxuICAgIGlmIChyZXQgIT09IG51bGwpIHRoaXMuZW1pdChcImRhdGFcIiwgcmV0KTtcbiAgICByZXR1cm4gcmV0O1xuICB9O1xuICBmdW5jdGlvbiBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUyKSB7XG4gICAgZGVidWcoXCJvbkVvZkNodW5rXCIpO1xuICAgIGlmIChzdGF0ZTIuZW5kZWQpIHJldHVybjtcbiAgICBpZiAoc3RhdGUyLmRlY29kZXIpIHtcbiAgICAgIHZhciBjaHVuayA9IHN0YXRlMi5kZWNvZGVyLmVuZCgpO1xuICAgICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkge1xuICAgICAgICBzdGF0ZTIuYnVmZmVyLnB1c2goY2h1bmspO1xuICAgICAgICBzdGF0ZTIubGVuZ3RoICs9IHN0YXRlMi5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9XG4gICAgc3RhdGUyLmVuZGVkID0gdHJ1ZTtcbiAgICBpZiAoc3RhdGUyLnN5bmMpIHtcbiAgICAgIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZTIubmVlZFJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoIXN0YXRlMi5lbWl0dGVkUmVhZGFibGUpIHtcbiAgICAgICAgc3RhdGUyLmVtaXR0ZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgICAgIGVtaXRSZWFkYWJsZV8oc3RyZWFtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZW1pdFJlYWRhYmxlKHN0cmVhbSkge1xuICAgIHZhciBzdGF0ZTIgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gICAgZGVidWcoXCJlbWl0UmVhZGFibGVcIiwgc3RhdGUyLm5lZWRSZWFkYWJsZSwgc3RhdGUyLmVtaXR0ZWRSZWFkYWJsZSk7XG4gICAgc3RhdGUyLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICAgIGlmICghc3RhdGUyLmVtaXR0ZWRSZWFkYWJsZSkge1xuICAgICAgZGVidWcoXCJlbWl0UmVhZGFibGVcIiwgc3RhdGUyLmZsb3dpbmcpO1xuICAgICAgc3RhdGUyLmVtaXR0ZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgICBwcm9jZXNzJDEubmV4dFRpY2soZW1pdFJlYWRhYmxlXywgc3RyZWFtKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZW1pdFJlYWRhYmxlXyhzdHJlYW0pIHtcbiAgICB2YXIgc3RhdGUyID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICAgIGRlYnVnKFwiZW1pdFJlYWRhYmxlX1wiLCBzdGF0ZTIuZGVzdHJveWVkLCBzdGF0ZTIubGVuZ3RoLCBzdGF0ZTIuZW5kZWQpO1xuICAgIGlmICghc3RhdGUyLmRlc3Ryb3llZCAmJiAoc3RhdGUyLmxlbmd0aCB8fCBzdGF0ZTIuZW5kZWQpKSB7XG4gICAgICBzdHJlYW0uZW1pdChcInJlYWRhYmxlXCIpO1xuICAgICAgc3RhdGUyLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICAgIH1cbiAgICBzdGF0ZTIubmVlZFJlYWRhYmxlID0gIXN0YXRlMi5mbG93aW5nICYmICFzdGF0ZTIuZW5kZWQgJiYgc3RhdGUyLmxlbmd0aCA8PSBzdGF0ZTIuaGlnaFdhdGVyTWFyaztcbiAgICBmbG93KHN0cmVhbSk7XG4gIH1cbiAgZnVuY3Rpb24gbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlMikge1xuICAgIGlmICghc3RhdGUyLnJlYWRpbmdNb3JlKSB7XG4gICAgICBzdGF0ZTIucmVhZGluZ01vcmUgPSB0cnVlO1xuICAgICAgcHJvY2VzcyQxLm5leHRUaWNrKG1heWJlUmVhZE1vcmVfLCBzdHJlYW0sIHN0YXRlMik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1heWJlUmVhZE1vcmVfKHN0cmVhbSwgc3RhdGUyKSB7XG4gICAgd2hpbGUgKCFzdGF0ZTIucmVhZGluZyAmJiAhc3RhdGUyLmVuZGVkICYmIChzdGF0ZTIubGVuZ3RoIDwgc3RhdGUyLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUyLmZsb3dpbmcgJiYgc3RhdGUyLmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgIHZhciBsZW4gPSBzdGF0ZTIubGVuZ3RoO1xuICAgICAgZGVidWcoXCJtYXliZVJlYWRNb3JlIHJlYWQgMFwiKTtcbiAgICAgIHN0cmVhbS5yZWFkKDApO1xuICAgICAgaWYgKGxlbiA9PT0gc3RhdGUyLmxlbmd0aClcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHN0YXRlMi5yZWFkaW5nTW9yZSA9IGZhbHNlO1xuICB9XG4gIFJlYWRhYmxlLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uKG4pIHtcbiAgICBlcnJvck9yRGVzdHJveSh0aGlzLCBuZXcgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQoXCJfcmVhZCgpXCIpKTtcbiAgfTtcbiAgUmVhZGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbihkZXN0LCBwaXBlT3B0cykge1xuICAgIHZhciBzcmMgPSB0aGlzO1xuICAgIHZhciBzdGF0ZTIgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIHN3aXRjaCAoc3RhdGUyLnBpcGVzQ291bnQpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgc3RhdGUyLnBpcGVzID0gZGVzdDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHN0YXRlMi5waXBlcyA9IFtzdGF0ZTIucGlwZXMsIGRlc3RdO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHN0YXRlMi5waXBlcy5wdXNoKGRlc3QpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgc3RhdGUyLnBpcGVzQ291bnQgKz0gMTtcbiAgICBkZWJ1ZyhcInBpcGUgY291bnQ9JWQgb3B0cz0lalwiLCBzdGF0ZTIucGlwZXNDb3VudCwgcGlwZU9wdHMpO1xuICAgIHZhciBkb0VuZCA9ICghcGlwZU9wdHMgfHwgcGlwZU9wdHMuZW5kICE9PSBmYWxzZSkgJiYgZGVzdCAhPT0gcHJvY2VzcyQxLnN0ZG91dCAmJiBkZXN0ICE9PSBwcm9jZXNzJDEuc3RkZXJyO1xuICAgIHZhciBlbmRGbiA9IGRvRW5kID8gb25lbmQgOiB1bnBpcGU7XG4gICAgaWYgKHN0YXRlMi5lbmRFbWl0dGVkKSBwcm9jZXNzJDEubmV4dFRpY2soZW5kRm4pO1xuICAgIGVsc2Ugc3JjLm9uY2UoXCJlbmRcIiwgZW5kRm4pO1xuICAgIGRlc3Qub24oXCJ1bnBpcGVcIiwgb251bnBpcGUpO1xuICAgIGZ1bmN0aW9uIG9udW5waXBlKHJlYWRhYmxlLCB1bnBpcGVJbmZvKSB7XG4gICAgICBkZWJ1ZyhcIm9udW5waXBlXCIpO1xuICAgICAgaWYgKHJlYWRhYmxlID09PSBzcmMpIHtcbiAgICAgICAgaWYgKHVucGlwZUluZm8gJiYgdW5waXBlSW5mby5oYXNVbnBpcGVkID09PSBmYWxzZSkge1xuICAgICAgICAgIHVucGlwZUluZm8uaGFzVW5waXBlZCA9IHRydWU7XG4gICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgICAgZGVidWcoXCJvbmVuZFwiKTtcbiAgICAgIGRlc3QuZW5kKCk7XG4gICAgfVxuICAgIHZhciBvbmRyYWluID0gcGlwZU9uRHJhaW4oc3JjKTtcbiAgICBkZXN0Lm9uKFwiZHJhaW5cIiwgb25kcmFpbik7XG4gICAgdmFyIGNsZWFuZWRVcCA9IGZhbHNlO1xuICAgIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgICBkZWJ1ZyhcImNsZWFudXBcIik7XG4gICAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIiwgb25jbG9zZSk7XG4gICAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKFwiZmluaXNoXCIsIG9uZmluaXNoKTtcbiAgICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoXCJkcmFpblwiLCBvbmRyYWluKTtcbiAgICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLCBvbmVycm9yKTtcbiAgICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoXCJ1bnBpcGVcIiwgb251bnBpcGUpO1xuICAgICAgc3JjLnJlbW92ZUxpc3RlbmVyKFwiZW5kXCIsIG9uZW5kKTtcbiAgICAgIHNyYy5yZW1vdmVMaXN0ZW5lcihcImVuZFwiLCB1bnBpcGUpO1xuICAgICAgc3JjLnJlbW92ZUxpc3RlbmVyKFwiZGF0YVwiLCBvbmRhdGEpO1xuICAgICAgY2xlYW5lZFVwID0gdHJ1ZTtcbiAgICAgIGlmIChzdGF0ZTIuYXdhaXREcmFpbiAmJiAoIWRlc3QuX3dyaXRhYmxlU3RhdGUgfHwgZGVzdC5fd3JpdGFibGVTdGF0ZS5uZWVkRHJhaW4pKSBvbmRyYWluKCk7XG4gICAgfVxuICAgIHNyYy5vbihcImRhdGFcIiwgb25kYXRhKTtcbiAgICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcbiAgICAgIGRlYnVnKFwib25kYXRhXCIpO1xuICAgICAgdmFyIHJldCA9IGRlc3Qud3JpdGUoY2h1bmspO1xuICAgICAgZGVidWcoXCJkZXN0LndyaXRlXCIsIHJldCk7XG4gICAgICBpZiAocmV0ID09PSBmYWxzZSkge1xuICAgICAgICBpZiAoKHN0YXRlMi5waXBlc0NvdW50ID09PSAxICYmIHN0YXRlMi5waXBlcyA9PT0gZGVzdCB8fCBzdGF0ZTIucGlwZXNDb3VudCA+IDEgJiYgaW5kZXhPZihzdGF0ZTIucGlwZXMsIGRlc3QpICE9PSAtMSkgJiYgIWNsZWFuZWRVcCkge1xuICAgICAgICAgIGRlYnVnKFwiZmFsc2Ugd3JpdGUgcmVzcG9uc2UsIHBhdXNlXCIsIHN0YXRlMi5hd2FpdERyYWluKTtcbiAgICAgICAgICBzdGF0ZTIuYXdhaXREcmFpbisrO1xuICAgICAgICB9XG4gICAgICAgIHNyYy5wYXVzZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7XG4gICAgICBkZWJ1ZyhcIm9uZXJyb3JcIiwgZXIpO1xuICAgICAgdW5waXBlKCk7XG4gICAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIiwgb25lcnJvcik7XG4gICAgICBpZiAoRUVsaXN0ZW5lckNvdW50KGRlc3QsIFwiZXJyb3JcIikgPT09IDApIGVycm9yT3JEZXN0cm95KGRlc3QsIGVyKTtcbiAgICB9XG4gICAgcHJlcGVuZExpc3RlbmVyMihkZXN0LCBcImVycm9yXCIsIG9uZXJyb3IpO1xuICAgIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKFwiZmluaXNoXCIsIG9uZmluaXNoKTtcbiAgICAgIHVucGlwZSgpO1xuICAgIH1cbiAgICBkZXN0Lm9uY2UoXCJjbG9zZVwiLCBvbmNsb3NlKTtcbiAgICBmdW5jdGlvbiBvbmZpbmlzaCgpIHtcbiAgICAgIGRlYnVnKFwib25maW5pc2hcIik7XG4gICAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIiwgb25jbG9zZSk7XG4gICAgICB1bnBpcGUoKTtcbiAgICB9XG4gICAgZGVzdC5vbmNlKFwiZmluaXNoXCIsIG9uZmluaXNoKTtcbiAgICBmdW5jdGlvbiB1bnBpcGUoKSB7XG4gICAgICBkZWJ1ZyhcInVucGlwZVwiKTtcbiAgICAgIHNyYy51bnBpcGUoZGVzdCk7XG4gICAgfVxuICAgIGRlc3QuZW1pdChcInBpcGVcIiwgc3JjKTtcbiAgICBpZiAoIXN0YXRlMi5mbG93aW5nKSB7XG4gICAgICBkZWJ1ZyhcInBpcGUgcmVzdW1lXCIpO1xuICAgICAgc3JjLnJlc3VtZSgpO1xuICAgIH1cbiAgICByZXR1cm4gZGVzdDtcbiAgfTtcbiAgZnVuY3Rpb24gcGlwZU9uRHJhaW4oc3JjKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBpcGVPbkRyYWluRnVuY3Rpb25SZXN1bHQoKSB7XG4gICAgICB2YXIgc3RhdGUyID0gc3JjLl9yZWFkYWJsZVN0YXRlO1xuICAgICAgZGVidWcoXCJwaXBlT25EcmFpblwiLCBzdGF0ZTIuYXdhaXREcmFpbik7XG4gICAgICBpZiAoc3RhdGUyLmF3YWl0RHJhaW4pIHN0YXRlMi5hd2FpdERyYWluLS07XG4gICAgICBpZiAoc3RhdGUyLmF3YWl0RHJhaW4gPT09IDAgJiYgRUVsaXN0ZW5lckNvdW50KHNyYywgXCJkYXRhXCIpKSB7XG4gICAgICAgIHN0YXRlMi5mbG93aW5nID0gdHJ1ZTtcbiAgICAgICAgZmxvdyhzcmMpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgUmVhZGFibGUucHJvdG90eXBlLnVucGlwZSA9IGZ1bmN0aW9uKGRlc3QpIHtcbiAgICB2YXIgc3RhdGUyID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICB2YXIgdW5waXBlSW5mbyA9IHtcbiAgICAgIGhhc1VucGlwZWQ6IGZhbHNlXG4gICAgfTtcbiAgICBpZiAoc3RhdGUyLnBpcGVzQ291bnQgPT09IDApIHJldHVybiB0aGlzO1xuICAgIGlmIChzdGF0ZTIucGlwZXNDb3VudCA9PT0gMSkge1xuICAgICAgaWYgKGRlc3QgJiYgZGVzdCAhPT0gc3RhdGUyLnBpcGVzKSByZXR1cm4gdGhpcztcbiAgICAgIGlmICghZGVzdCkgZGVzdCA9IHN0YXRlMi5waXBlcztcbiAgICAgIHN0YXRlMi5waXBlcyA9IG51bGw7XG4gICAgICBzdGF0ZTIucGlwZXNDb3VudCA9IDA7XG4gICAgICBzdGF0ZTIuZmxvd2luZyA9IGZhbHNlO1xuICAgICAgaWYgKGRlc3QpIGRlc3QuZW1pdChcInVucGlwZVwiLCB0aGlzLCB1bnBpcGVJbmZvKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBpZiAoIWRlc3QpIHtcbiAgICAgIHZhciBkZXN0cyA9IHN0YXRlMi5waXBlcztcbiAgICAgIHZhciBsZW4gPSBzdGF0ZTIucGlwZXNDb3VudDtcbiAgICAgIHN0YXRlMi5waXBlcyA9IG51bGw7XG4gICAgICBzdGF0ZTIucGlwZXNDb3VudCA9IDA7XG4gICAgICBzdGF0ZTIuZmxvd2luZyA9IGZhbHNlO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBkZXN0c1tpXS5lbWl0KFwidW5waXBlXCIsIHRoaXMsIHtcbiAgICAgICAgICBoYXNVbnBpcGVkOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB2YXIgaW5kZXggPSBpbmRleE9mKHN0YXRlMi5waXBlcywgZGVzdCk7XG4gICAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIHRoaXM7XG4gICAgc3RhdGUyLnBpcGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgc3RhdGUyLnBpcGVzQ291bnQgLT0gMTtcbiAgICBpZiAoc3RhdGUyLnBpcGVzQ291bnQgPT09IDEpIHN0YXRlMi5waXBlcyA9IHN0YXRlMi5waXBlc1swXTtcbiAgICBkZXN0LmVtaXQoXCJ1bnBpcGVcIiwgdGhpcywgdW5waXBlSW5mbyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIFJlYWRhYmxlLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKGV2LCBmbikge1xuICAgIHZhciByZXMgPSBTdHJlYW0yLnByb3RvdHlwZS5vbi5jYWxsKHRoaXMsIGV2LCBmbik7XG4gICAgdmFyIHN0YXRlMiA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKGV2ID09PSBcImRhdGFcIikge1xuICAgICAgc3RhdGUyLnJlYWRhYmxlTGlzdGVuaW5nID0gdGhpcy5saXN0ZW5lckNvdW50KFwicmVhZGFibGVcIikgPiAwO1xuICAgICAgaWYgKHN0YXRlMi5mbG93aW5nICE9PSBmYWxzZSkgdGhpcy5yZXN1bWUoKTtcbiAgICB9IGVsc2UgaWYgKGV2ID09PSBcInJlYWRhYmxlXCIpIHtcbiAgICAgIGlmICghc3RhdGUyLmVuZEVtaXR0ZWQgJiYgIXN0YXRlMi5yZWFkYWJsZUxpc3RlbmluZykge1xuICAgICAgICBzdGF0ZTIucmVhZGFibGVMaXN0ZW5pbmcgPSBzdGF0ZTIubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgICAgc3RhdGUyLmZsb3dpbmcgPSBmYWxzZTtcbiAgICAgICAgc3RhdGUyLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgICBkZWJ1ZyhcIm9uIHJlYWRhYmxlXCIsIHN0YXRlMi5sZW5ndGgsIHN0YXRlMi5yZWFkaW5nKTtcbiAgICAgICAgaWYgKHN0YXRlMi5sZW5ndGgpIHtcbiAgICAgICAgICBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN0YXRlMi5yZWFkaW5nKSB7XG4gICAgICAgICAgcHJvY2VzcyQxLm5leHRUaWNrKG5SZWFkaW5nTmV4dFRpY2ssIHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG4gIFJlYWRhYmxlLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IFJlYWRhYmxlLnByb3RvdHlwZS5vbjtcbiAgUmVhZGFibGUucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24oZXYsIGZuKSB7XG4gICAgdmFyIHJlcyA9IFN0cmVhbTIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyLmNhbGwodGhpcywgZXYsIGZuKTtcbiAgICBpZiAoZXYgPT09IFwicmVhZGFibGVcIikge1xuICAgICAgcHJvY2VzcyQxLm5leHRUaWNrKHVwZGF0ZVJlYWRhYmxlTGlzdGVuaW5nLCB0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcbiAgUmVhZGFibGUucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgdmFyIHJlcyA9IFN0cmVhbTIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChldiA9PT0gXCJyZWFkYWJsZVwiIHx8IGV2ID09PSB2b2lkIDApIHtcbiAgICAgIHByb2Nlc3MkMS5uZXh0VGljayh1cGRhdGVSZWFkYWJsZUxpc3RlbmluZywgdGhpcyk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG4gIGZ1bmN0aW9uIHVwZGF0ZVJlYWRhYmxlTGlzdGVuaW5nKHNlbGYyKSB7XG4gICAgdmFyIHN0YXRlMiA9IHNlbGYyLl9yZWFkYWJsZVN0YXRlO1xuICAgIHN0YXRlMi5yZWFkYWJsZUxpc3RlbmluZyA9IHNlbGYyLmxpc3RlbmVyQ291bnQoXCJyZWFkYWJsZVwiKSA+IDA7XG4gICAgaWYgKHN0YXRlMi5yZXN1bWVTY2hlZHVsZWQgJiYgIXN0YXRlMi5wYXVzZWQpIHtcbiAgICAgIHN0YXRlMi5mbG93aW5nID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHNlbGYyLmxpc3RlbmVyQ291bnQoXCJkYXRhXCIpID4gMCkge1xuICAgICAgc2VsZjIucmVzdW1lKCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG5SZWFkaW5nTmV4dFRpY2soc2VsZjIpIHtcbiAgICBkZWJ1ZyhcInJlYWRhYmxlIG5leHR0aWNrIHJlYWQgMFwiKTtcbiAgICBzZWxmMi5yZWFkKDApO1xuICB9XG4gIFJlYWRhYmxlLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RhdGUyID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAoIXN0YXRlMi5mbG93aW5nKSB7XG4gICAgICBkZWJ1ZyhcInJlc3VtZVwiKTtcbiAgICAgIHN0YXRlMi5mbG93aW5nID0gIXN0YXRlMi5yZWFkYWJsZUxpc3RlbmluZztcbiAgICAgIHJlc3VtZSh0aGlzLCBzdGF0ZTIpO1xuICAgIH1cbiAgICBzdGF0ZTIucGF1c2VkID0gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGZ1bmN0aW9uIHJlc3VtZShzdHJlYW0sIHN0YXRlMikge1xuICAgIGlmICghc3RhdGUyLnJlc3VtZVNjaGVkdWxlZCkge1xuICAgICAgc3RhdGUyLnJlc3VtZVNjaGVkdWxlZCA9IHRydWU7XG4gICAgICBwcm9jZXNzJDEubmV4dFRpY2socmVzdW1lXywgc3RyZWFtLCBzdGF0ZTIpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiByZXN1bWVfKHN0cmVhbSwgc3RhdGUyKSB7XG4gICAgZGVidWcoXCJyZXN1bWVcIiwgc3RhdGUyLnJlYWRpbmcpO1xuICAgIGlmICghc3RhdGUyLnJlYWRpbmcpIHtcbiAgICAgIHN0cmVhbS5yZWFkKDApO1xuICAgIH1cbiAgICBzdGF0ZTIucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoXCJyZXN1bWVcIik7XG4gICAgZmxvdyhzdHJlYW0pO1xuICAgIGlmIChzdGF0ZTIuZmxvd2luZyAmJiAhc3RhdGUyLnJlYWRpbmcpIHN0cmVhbS5yZWFkKDApO1xuICB9XG4gIFJlYWRhYmxlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKFwiY2FsbCBwYXVzZSBmbG93aW5nPSVqXCIsIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyk7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyAhPT0gZmFsc2UpIHtcbiAgICAgIGRlYnVnKFwicGF1c2VcIik7XG4gICAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuZW1pdChcInBhdXNlXCIpO1xuICAgIH1cbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLnBhdXNlZCA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGZ1bmN0aW9uIGZsb3coc3RyZWFtKSB7XG4gICAgdmFyIHN0YXRlMiA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgICBkZWJ1ZyhcImZsb3dcIiwgc3RhdGUyLmZsb3dpbmcpO1xuICAgIHdoaWxlIChzdGF0ZTIuZmxvd2luZyAmJiBzdHJlYW0ucmVhZCgpICE9PSBudWxsKSB7XG4gICAgfVxuICB9XG4gIFJlYWRhYmxlLnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgc3RhdGUyID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICB2YXIgcGF1c2VkID0gZmFsc2U7XG4gICAgc3RyZWFtLm9uKFwiZW5kXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgZGVidWcoXCJ3cmFwcGVkIGVuZFwiKTtcbiAgICAgIGlmIChzdGF0ZTIuZGVjb2RlciAmJiAhc3RhdGUyLmVuZGVkKSB7XG4gICAgICAgIHZhciBjaHVuayA9IHN0YXRlMi5kZWNvZGVyLmVuZCgpO1xuICAgICAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSBfdGhpcy5wdXNoKGNodW5rKTtcbiAgICAgIH1cbiAgICAgIF90aGlzLnB1c2gobnVsbCk7XG4gICAgfSk7XG4gICAgc3RyZWFtLm9uKFwiZGF0YVwiLCBmdW5jdGlvbihjaHVuaykge1xuICAgICAgZGVidWcoXCJ3cmFwcGVkIGRhdGFcIik7XG4gICAgICBpZiAoc3RhdGUyLmRlY29kZXIpIGNodW5rID0gc3RhdGUyLmRlY29kZXIud3JpdGUoY2h1bmspO1xuICAgICAgaWYgKHN0YXRlMi5vYmplY3RNb2RlICYmIChjaHVuayA9PT0gbnVsbCB8fCBjaHVuayA9PT0gdm9pZCAwKSkgcmV0dXJuO1xuICAgICAgZWxzZSBpZiAoIXN0YXRlMi5vYmplY3RNb2RlICYmICghY2h1bmsgfHwgIWNodW5rLmxlbmd0aCkpIHJldHVybjtcbiAgICAgIHZhciByZXQgPSBfdGhpcy5wdXNoKGNodW5rKTtcbiAgICAgIGlmICghcmV0KSB7XG4gICAgICAgIHBhdXNlZCA9IHRydWU7XG4gICAgICAgIHN0cmVhbS5wYXVzZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGZvciAodmFyIGkgaW4gc3RyZWFtKSB7XG4gICAgICBpZiAodGhpc1tpXSA9PT0gdm9pZCAwICYmIHR5cGVvZiBzdHJlYW1baV0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aGlzW2ldID0gLyogQF9fUFVSRV9fICovIGZ1bmN0aW9uIG1ldGhvZFdyYXAobWV0aG9kKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG1ldGhvZFdyYXBSZXR1cm5GdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJlYW1bbWV0aG9kXS5hcHBseShzdHJlYW0sIGFyZ3VtZW50cyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfShpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgbiA9IDA7IG4gPCBrUHJveHlFdmVudHMubGVuZ3RoOyBuKyspIHtcbiAgICAgIHN0cmVhbS5vbihrUHJveHlFdmVudHNbbl0sIHRoaXMuZW1pdC5iaW5kKHRoaXMsIGtQcm94eUV2ZW50c1tuXSkpO1xuICAgIH1cbiAgICB0aGlzLl9yZWFkID0gZnVuY3Rpb24objIpIHtcbiAgICAgIGRlYnVnKFwid3JhcHBlZCBfcmVhZFwiLCBuMik7XG4gICAgICBpZiAocGF1c2VkKSB7XG4gICAgICAgIHBhdXNlZCA9IGZhbHNlO1xuICAgICAgICBzdHJlYW0ucmVzdW1lKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIFJlYWRhYmxlLnByb3RvdHlwZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChjcmVhdGVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3IgPT09IHZvaWQgMCkge1xuICAgICAgICBjcmVhdGVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3IgPSByZXF1aXJlQXN5bmNfaXRlcmF0b3IoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3IodGhpcyk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCBcInJlYWRhYmxlSGlnaFdhdGVyTWFya1wiLCB7XG4gICAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gICAgfVxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgXCJyZWFkYWJsZUJ1ZmZlclwiLCB7XG4gICAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlICYmIHRoaXMuX3JlYWRhYmxlU3RhdGUuYnVmZmVyO1xuICAgIH1cbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsIFwicmVhZGFibGVGbG93aW5nXCIsIHtcbiAgICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAgIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAgIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZztcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHN0YXRlMikge1xuICAgICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICAgICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID0gc3RhdGUyO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIFJlYWRhYmxlLl9mcm9tTGlzdCA9IGZyb21MaXN0O1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCBcInJlYWRhYmxlTGVuZ3RoXCIsIHtcbiAgICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAgIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAgIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUubGVuZ3RoO1xuICAgIH1cbiAgfSk7XG4gIGZ1bmN0aW9uIGZyb21MaXN0KG4sIHN0YXRlMikge1xuICAgIGlmIChzdGF0ZTIubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcbiAgICB2YXIgcmV0O1xuICAgIGlmIChzdGF0ZTIub2JqZWN0TW9kZSkgcmV0ID0gc3RhdGUyLmJ1ZmZlci5zaGlmdCgpO1xuICAgIGVsc2UgaWYgKCFuIHx8IG4gPj0gc3RhdGUyLmxlbmd0aCkge1xuICAgICAgaWYgKHN0YXRlMi5kZWNvZGVyKSByZXQgPSBzdGF0ZTIuYnVmZmVyLmpvaW4oXCJcIik7XG4gICAgICBlbHNlIGlmIChzdGF0ZTIuYnVmZmVyLmxlbmd0aCA9PT0gMSkgcmV0ID0gc3RhdGUyLmJ1ZmZlci5maXJzdCgpO1xuICAgICAgZWxzZSByZXQgPSBzdGF0ZTIuYnVmZmVyLmNvbmNhdChzdGF0ZTIubGVuZ3RoKTtcbiAgICAgIHN0YXRlMi5idWZmZXIuY2xlYXIoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0ID0gc3RhdGUyLmJ1ZmZlci5jb25zdW1lKG4sIHN0YXRlMi5kZWNvZGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuICBmdW5jdGlvbiBlbmRSZWFkYWJsZShzdHJlYW0pIHtcbiAgICB2YXIgc3RhdGUyID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICAgIGRlYnVnKFwiZW5kUmVhZGFibGVcIiwgc3RhdGUyLmVuZEVtaXR0ZWQpO1xuICAgIGlmICghc3RhdGUyLmVuZEVtaXR0ZWQpIHtcbiAgICAgIHN0YXRlMi5lbmRlZCA9IHRydWU7XG4gICAgICBwcm9jZXNzJDEubmV4dFRpY2soZW5kUmVhZGFibGVOVCwgc3RhdGUyLCBzdHJlYW0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBlbmRSZWFkYWJsZU5UKHN0YXRlMiwgc3RyZWFtKSB7XG4gICAgZGVidWcoXCJlbmRSZWFkYWJsZU5UXCIsIHN0YXRlMi5lbmRFbWl0dGVkLCBzdGF0ZTIubGVuZ3RoKTtcbiAgICBpZiAoIXN0YXRlMi5lbmRFbWl0dGVkICYmIHN0YXRlMi5sZW5ndGggPT09IDApIHtcbiAgICAgIHN0YXRlMi5lbmRFbWl0dGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5yZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgc3RyZWFtLmVtaXQoXCJlbmRcIik7XG4gICAgICBpZiAoc3RhdGUyLmF1dG9EZXN0cm95KSB7XG4gICAgICAgIHZhciB3U3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG4gICAgICAgIGlmICghd1N0YXRlIHx8IHdTdGF0ZS5hdXRvRGVzdHJveSAmJiB3U3RhdGUuZmluaXNoZWQpIHtcbiAgICAgICAgICBzdHJlYW0uZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBSZWFkYWJsZS5mcm9tID0gZnVuY3Rpb24oaXRlcmFibGUsIG9wdHMpIHtcbiAgICAgIGlmIChmcm9tID09PSB2b2lkIDApIHtcbiAgICAgICAgZnJvbSA9IHJlcXVpcmVGcm9tQnJvd3NlcigpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb20oUmVhZGFibGUsIGl0ZXJhYmxlLCBvcHRzKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGluZGV4T2YoeHMsIHgpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKHhzW2ldID09PSB4KSByZXR1cm4gaTtcbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIHJldHVybiBfc3RyZWFtX3JlYWRhYmxlO1xufVxudmFyIF9zdHJlYW1fdHJhbnNmb3JtO1xudmFyIGhhc1JlcXVpcmVkX3N0cmVhbV90cmFuc2Zvcm07XG5mdW5jdGlvbiByZXF1aXJlX3N0cmVhbV90cmFuc2Zvcm0oKSB7XG4gIGlmIChoYXNSZXF1aXJlZF9zdHJlYW1fdHJhbnNmb3JtKSByZXR1cm4gX3N0cmVhbV90cmFuc2Zvcm07XG4gIGhhc1JlcXVpcmVkX3N0cmVhbV90cmFuc2Zvcm0gPSAxO1xuICBfc3RyZWFtX3RyYW5zZm9ybSA9IFRyYW5zZm9ybTtcbiAgdmFyIF9yZXF1aXJlJGNvZGVzID0gcmVxdWlyZUVycm9yc0Jyb3dzZXIoKS5jb2RlcywgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCwgRVJSX01VTFRJUExFX0NBTExCQUNLID0gX3JlcXVpcmUkY29kZXMuRVJSX01VTFRJUExFX0NBTExCQUNLLCBFUlJfVFJBTlNGT1JNX0FMUkVBRFlfVFJBTlNGT1JNSU5HID0gX3JlcXVpcmUkY29kZXMuRVJSX1RSQU5TRk9STV9BTFJFQURZX1RSQU5TRk9STUlORywgRVJSX1RSQU5TRk9STV9XSVRIX0xFTkdUSF8wID0gX3JlcXVpcmUkY29kZXMuRVJSX1RSQU5TRk9STV9XSVRIX0xFTkdUSF8wO1xuICB2YXIgRHVwbGV4ID0gcmVxdWlyZV9zdHJlYW1fZHVwbGV4KCk7XG4gIGluaGVyaXRzX2Jyb3dzZXJFeHBvcnRzKFRyYW5zZm9ybSwgRHVwbGV4KTtcbiAgZnVuY3Rpb24gYWZ0ZXJUcmFuc2Zvcm0oZXIsIGRhdGEpIHtcbiAgICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgICB0cy50cmFuc2Zvcm1pbmcgPSBmYWxzZTtcbiAgICB2YXIgY2IgPSB0cy53cml0ZWNiO1xuICAgIGlmIChjYiA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXMuZW1pdChcImVycm9yXCIsIG5ldyBFUlJfTVVMVElQTEVfQ0FMTEJBQ0soKSk7XG4gICAgfVxuICAgIHRzLndyaXRlY2h1bmsgPSBudWxsO1xuICAgIHRzLndyaXRlY2IgPSBudWxsO1xuICAgIGlmIChkYXRhICE9IG51bGwpXG4gICAgICB0aGlzLnB1c2goZGF0YSk7XG4gICAgY2IoZXIpO1xuICAgIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgcnMucmVhZGluZyA9IGZhbHNlO1xuICAgIGlmIChycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykge1xuICAgICAgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gVHJhbnNmb3JtKG9wdGlvbnMyKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFRyYW5zZm9ybSkpIHJldHVybiBuZXcgVHJhbnNmb3JtKG9wdGlvbnMyKTtcbiAgICBEdXBsZXguY2FsbCh0aGlzLCBvcHRpb25zMik7XG4gICAgdGhpcy5fdHJhbnNmb3JtU3RhdGUgPSB7XG4gICAgICBhZnRlclRyYW5zZm9ybTogYWZ0ZXJUcmFuc2Zvcm0uYmluZCh0aGlzKSxcbiAgICAgIG5lZWRUcmFuc2Zvcm06IGZhbHNlLFxuICAgICAgdHJhbnNmb3JtaW5nOiBmYWxzZSxcbiAgICAgIHdyaXRlY2I6IG51bGwsXG4gICAgICB3cml0ZWNodW5rOiBudWxsLFxuICAgICAgd3JpdGVlbmNvZGluZzogbnVsbFxuICAgIH07XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuc3luYyA9IGZhbHNlO1xuICAgIGlmIChvcHRpb25zMikge1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zMi50cmFuc2Zvcm0gPT09IFwiZnVuY3Rpb25cIikgdGhpcy5fdHJhbnNmb3JtID0gb3B0aW9uczIudHJhbnNmb3JtO1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zMi5mbHVzaCA9PT0gXCJmdW5jdGlvblwiKSB0aGlzLl9mbHVzaCA9IG9wdGlvbnMyLmZsdXNoO1xuICAgIH1cbiAgICB0aGlzLm9uKFwicHJlZmluaXNoXCIsIHByZWZpbmlzaCk7XG4gIH1cbiAgZnVuY3Rpb24gcHJlZmluaXNoKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl9mbHVzaCA9PT0gXCJmdW5jdGlvblwiICYmICF0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCkge1xuICAgICAgdGhpcy5fZmx1c2goZnVuY3Rpb24oZXIsIGRhdGEpIHtcbiAgICAgICAgZG9uZShfdGhpcywgZXIsIGRhdGEpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRvbmUodGhpcywgbnVsbCwgbnVsbCk7XG4gICAgfVxuICB9XG4gIFRyYW5zZm9ybS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZykge1xuICAgIHRoaXMuX3RyYW5zZm9ybVN0YXRlLm5lZWRUcmFuc2Zvcm0gPSBmYWxzZTtcbiAgICByZXR1cm4gRHVwbGV4LnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcywgY2h1bmssIGVuY29kaW5nKTtcbiAgfTtcbiAgVHJhbnNmb3JtLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24oY2h1bmssIGVuY29kaW5nLCBjYikge1xuICAgIGNiKG5ldyBFUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRChcIl90cmFuc2Zvcm0oKVwiKSk7XG4gIH07XG4gIFRyYW5zZm9ybS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24oY2h1bmssIGVuY29kaW5nLCBjYikge1xuICAgIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICAgIHRzLndyaXRlY2IgPSBjYjtcbiAgICB0cy53cml0ZWNodW5rID0gY2h1bms7XG4gICAgdHMud3JpdGVlbmNvZGluZyA9IGVuY29kaW5nO1xuICAgIGlmICghdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgICB2YXIgcnMgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgICAgaWYgKHRzLm5lZWRUcmFuc2Zvcm0gfHwgcnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gICAgfVxuICB9O1xuICBUcmFuc2Zvcm0ucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24obikge1xuICAgIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICAgIGlmICh0cy53cml0ZWNodW5rICE9PSBudWxsICYmICF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICAgIHRzLnRyYW5zZm9ybWluZyA9IHRydWU7XG4gICAgICB0aGlzLl90cmFuc2Zvcm0odHMud3JpdGVjaHVuaywgdHMud3JpdGVlbmNvZGluZywgdHMuYWZ0ZXJUcmFuc2Zvcm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cy5uZWVkVHJhbnNmb3JtID0gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIFRyYW5zZm9ybS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbihlcnIsIGNiKSB7XG4gICAgRHVwbGV4LnByb3RvdHlwZS5fZGVzdHJveS5jYWxsKHRoaXMsIGVyciwgZnVuY3Rpb24oZXJyMikge1xuICAgICAgY2IoZXJyMik7XG4gICAgfSk7XG4gIH07XG4gIGZ1bmN0aW9uIGRvbmUoc3RyZWFtLCBlciwgZGF0YSkge1xuICAgIGlmIChlcikgcmV0dXJuIHN0cmVhbS5lbWl0KFwiZXJyb3JcIiwgZXIpO1xuICAgIGlmIChkYXRhICE9IG51bGwpXG4gICAgICBzdHJlYW0ucHVzaChkYXRhKTtcbiAgICBpZiAoc3RyZWFtLl93cml0YWJsZVN0YXRlLmxlbmd0aCkgdGhyb3cgbmV3IEVSUl9UUkFOU0ZPUk1fV0lUSF9MRU5HVEhfMCgpO1xuICAgIGlmIChzdHJlYW0uX3RyYW5zZm9ybVN0YXRlLnRyYW5zZm9ybWluZykgdGhyb3cgbmV3IEVSUl9UUkFOU0ZPUk1fQUxSRUFEWV9UUkFOU0ZPUk1JTkcoKTtcbiAgICByZXR1cm4gc3RyZWFtLnB1c2gobnVsbCk7XG4gIH1cbiAgcmV0dXJuIF9zdHJlYW1fdHJhbnNmb3JtO1xufVxudmFyIF9zdHJlYW1fcGFzc3Rocm91Z2g7XG52YXIgaGFzUmVxdWlyZWRfc3RyZWFtX3Bhc3N0aHJvdWdoO1xuZnVuY3Rpb24gcmVxdWlyZV9zdHJlYW1fcGFzc3Rocm91Z2goKSB7XG4gIGlmIChoYXNSZXF1aXJlZF9zdHJlYW1fcGFzc3Rocm91Z2gpIHJldHVybiBfc3RyZWFtX3Bhc3N0aHJvdWdoO1xuICBoYXNSZXF1aXJlZF9zdHJlYW1fcGFzc3Rocm91Z2ggPSAxO1xuICBfc3RyZWFtX3Bhc3N0aHJvdWdoID0gUGFzc1Rocm91Z2g7XG4gIHZhciBUcmFuc2Zvcm0gPSByZXF1aXJlX3N0cmVhbV90cmFuc2Zvcm0oKTtcbiAgaW5oZXJpdHNfYnJvd3NlckV4cG9ydHMoUGFzc1Rocm91Z2gsIFRyYW5zZm9ybSk7XG4gIGZ1bmN0aW9uIFBhc3NUaHJvdWdoKG9wdGlvbnMyKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFBhc3NUaHJvdWdoKSkgcmV0dXJuIG5ldyBQYXNzVGhyb3VnaChvcHRpb25zMik7XG4gICAgVHJhbnNmb3JtLmNhbGwodGhpcywgb3B0aW9uczIpO1xuICB9XG4gIFBhc3NUaHJvdWdoLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24oY2h1bmssIGVuY29kaW5nLCBjYikge1xuICAgIGNiKG51bGwsIGNodW5rKTtcbiAgfTtcbiAgcmV0dXJuIF9zdHJlYW1fcGFzc3Rocm91Z2g7XG59XG52YXIgcGlwZWxpbmVfMTtcbnZhciBoYXNSZXF1aXJlZFBpcGVsaW5lO1xuZnVuY3Rpb24gcmVxdWlyZVBpcGVsaW5lKCkge1xuICBpZiAoaGFzUmVxdWlyZWRQaXBlbGluZSkgcmV0dXJuIHBpcGVsaW5lXzE7XG4gIGhhc1JlcXVpcmVkUGlwZWxpbmUgPSAxO1xuICB2YXIgZW9zO1xuICBmdW5jdGlvbiBvbmNlMyhjYWxsYmFjaykge1xuICAgIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoY2FsbGVkKSByZXR1cm47XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgY2FsbGJhY2suYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cbiAgdmFyIF9yZXF1aXJlJGNvZGVzID0gcmVxdWlyZUVycm9yc0Jyb3dzZXIoKS5jb2RlcywgRVJSX01JU1NJTkdfQVJHUyA9IF9yZXF1aXJlJGNvZGVzLkVSUl9NSVNTSU5HX0FSR1MsIEVSUl9TVFJFQU1fREVTVFJPWUVEID0gX3JlcXVpcmUkY29kZXMuRVJSX1NUUkVBTV9ERVNUUk9ZRUQ7XG4gIGZ1bmN0aW9uIG5vb3AyKGVycikge1xuICAgIGlmIChlcnIpIHRocm93IGVycjtcbiAgfVxuICBmdW5jdGlvbiBpc1JlcXVlc3Qoc3RyZWFtKSB7XG4gICAgcmV0dXJuIHN0cmVhbS5zZXRIZWFkZXIgJiYgdHlwZW9mIHN0cmVhbS5hYm9ydCA9PT0gXCJmdW5jdGlvblwiO1xuICB9XG4gIGZ1bmN0aW9uIGRlc3Ryb3llcihzdHJlYW0sIHJlYWRpbmcsIHdyaXRpbmcsIGNhbGxiYWNrKSB7XG4gICAgY2FsbGJhY2sgPSBvbmNlMyhjYWxsYmFjayk7XG4gICAgdmFyIGNsb3NlZCA9IGZhbHNlO1xuICAgIHN0cmVhbS5vbihcImNsb3NlXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgY2xvc2VkID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBpZiAoZW9zID09PSB2b2lkIDApIGVvcyA9IHJlcXVpcmVFbmRPZlN0cmVhbSgpO1xuICAgIGVvcyhzdHJlYW0sIHtcbiAgICAgIHJlYWRhYmxlOiByZWFkaW5nLFxuICAgICAgd3JpdGFibGU6IHdyaXRpbmdcbiAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgY2xvc2VkID0gdHJ1ZTtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSk7XG4gICAgdmFyIGRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHJldHVybiBmdW5jdGlvbihlcnIpIHtcbiAgICAgIGlmIChjbG9zZWQpIHJldHVybjtcbiAgICAgIGlmIChkZXN0cm95ZWQpIHJldHVybjtcbiAgICAgIGRlc3Ryb3llZCA9IHRydWU7XG4gICAgICBpZiAoaXNSZXF1ZXN0KHN0cmVhbSkpIHJldHVybiBzdHJlYW0uYWJvcnQoKTtcbiAgICAgIGlmICh0eXBlb2Ygc3RyZWFtLmRlc3Ryb3kgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHN0cmVhbS5kZXN0cm95KCk7XG4gICAgICBjYWxsYmFjayhlcnIgfHwgbmV3IEVSUl9TVFJFQU1fREVTVFJPWUVEKFwicGlwZVwiKSk7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBjYWxsKGZuKSB7XG4gICAgZm4oKTtcbiAgfVxuICBmdW5jdGlvbiBwaXBlKGZyb20sIHRvKSB7XG4gICAgcmV0dXJuIGZyb20ucGlwZSh0byk7XG4gIH1cbiAgZnVuY3Rpb24gcG9wQ2FsbGJhY2soc3RyZWFtcykge1xuICAgIGlmICghc3RyZWFtcy5sZW5ndGgpIHJldHVybiBub29wMjtcbiAgICBpZiAodHlwZW9mIHN0cmVhbXNbc3RyZWFtcy5sZW5ndGggLSAxXSAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbm9vcDI7XG4gICAgcmV0dXJuIHN0cmVhbXMucG9wKCk7XG4gIH1cbiAgZnVuY3Rpb24gcGlwZWxpbmUoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHN0cmVhbXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBzdHJlYW1zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICB2YXIgY2FsbGJhY2sgPSBwb3BDYWxsYmFjayhzdHJlYW1zKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdHJlYW1zWzBdKSkgc3RyZWFtcyA9IHN0cmVhbXNbMF07XG4gICAgaWYgKHN0cmVhbXMubGVuZ3RoIDwgMikge1xuICAgICAgdGhyb3cgbmV3IEVSUl9NSVNTSU5HX0FSR1MoXCJzdHJlYW1zXCIpO1xuICAgIH1cbiAgICB2YXIgZXJyb3I7XG4gICAgdmFyIGRlc3Ryb3lzID0gc3RyZWFtcy5tYXAoZnVuY3Rpb24oc3RyZWFtLCBpKSB7XG4gICAgICB2YXIgcmVhZGluZyA9IGkgPCBzdHJlYW1zLmxlbmd0aCAtIDE7XG4gICAgICB2YXIgd3JpdGluZyA9IGkgPiAwO1xuICAgICAgcmV0dXJuIGRlc3Ryb3llcihzdHJlYW0sIHJlYWRpbmcsIHdyaXRpbmcsIGZ1bmN0aW9uKGVycikge1xuICAgICAgICBpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiAgICAgICAgaWYgKGVycikgZGVzdHJveXMuZm9yRWFjaChjYWxsKTtcbiAgICAgICAgaWYgKHJlYWRpbmcpIHJldHVybjtcbiAgICAgICAgZGVzdHJveXMuZm9yRWFjaChjYWxsKTtcbiAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHN0cmVhbXMucmVkdWNlKHBpcGUpO1xuICB9XG4gIHBpcGVsaW5lXzEgPSBwaXBlbGluZTtcbiAgcmV0dXJuIHBpcGVsaW5lXzE7XG59XG52YXIgc3RyZWFtQnJvd3NlcmlmeSA9IFN0cmVhbSQxO1xudmFyIEVFID0gZXZlbnRzRXhwb3J0cy5FdmVudEVtaXR0ZXI7XG52YXIgaW5oZXJpdHMkMSA9IGluaGVyaXRzX2Jyb3dzZXJFeHBvcnRzO1xuaW5oZXJpdHMkMShTdHJlYW0kMSwgRUUpO1xuU3RyZWFtJDEuUmVhZGFibGUgPSByZXF1aXJlX3N0cmVhbV9yZWFkYWJsZSgpO1xuU3RyZWFtJDEuV3JpdGFibGUgPSByZXF1aXJlX3N0cmVhbV93cml0YWJsZSgpO1xuU3RyZWFtJDEuRHVwbGV4ID0gcmVxdWlyZV9zdHJlYW1fZHVwbGV4KCk7XG5TdHJlYW0kMS5UcmFuc2Zvcm0gPSByZXF1aXJlX3N0cmVhbV90cmFuc2Zvcm0oKTtcblN0cmVhbSQxLlBhc3NUaHJvdWdoID0gcmVxdWlyZV9zdHJlYW1fcGFzc3Rocm91Z2goKTtcblN0cmVhbSQxLmZpbmlzaGVkID0gcmVxdWlyZUVuZE9mU3RyZWFtKCk7XG5TdHJlYW0kMS5waXBlbGluZSA9IHJlcXVpcmVQaXBlbGluZSgpO1xuU3RyZWFtJDEuU3RyZWFtID0gU3RyZWFtJDE7XG5mdW5jdGlvbiBTdHJlYW0kMSgpIHtcbiAgRUUuY2FsbCh0aGlzKTtcbn1cblN0cmVhbSQxLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24oZGVzdCwgb3B0aW9uczIpIHtcbiAgdmFyIHNvdXJjZSA9IHRoaXM7XG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGlmIChkZXN0LndyaXRhYmxlKSB7XG4gICAgICBpZiAoZmFsc2UgPT09IGRlc3Qud3JpdGUoY2h1bmspICYmIHNvdXJjZS5wYXVzZSkge1xuICAgICAgICBzb3VyY2UucGF1c2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgc291cmNlLm9uKFwiZGF0YVwiLCBvbmRhdGEpO1xuICBmdW5jdGlvbiBvbmRyYWluKCkge1xuICAgIGlmIChzb3VyY2UucmVhZGFibGUgJiYgc291cmNlLnJlc3VtZSkge1xuICAgICAgc291cmNlLnJlc3VtZSgpO1xuICAgIH1cbiAgfVxuICBkZXN0Lm9uKFwiZHJhaW5cIiwgb25kcmFpbik7XG4gIGlmICghZGVzdC5faXNTdGRpbyAmJiAoIW9wdGlvbnMyIHx8IG9wdGlvbnMyLmVuZCAhPT0gZmFsc2UpKSB7XG4gICAgc291cmNlLm9uKFwiZW5kXCIsIG9uZW5kKTtcbiAgICBzb3VyY2Uub24oXCJjbG9zZVwiLCBvbmNsb3NlKTtcbiAgfVxuICB2YXIgZGlkT25FbmQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgaWYgKGRpZE9uRW5kKSByZXR1cm47XG4gICAgZGlkT25FbmQgPSB0cnVlO1xuICAgIGRlc3QuZW5kKCk7XG4gIH1cbiAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICBpZiAoZGlkT25FbmQpIHJldHVybjtcbiAgICBkaWRPbkVuZCA9IHRydWU7XG4gICAgaWYgKHR5cGVvZiBkZXN0LmRlc3Ryb3kgPT09IFwiZnVuY3Rpb25cIikgZGVzdC5kZXN0cm95KCk7XG4gIH1cbiAgZnVuY3Rpb24gb25lcnJvcihlcikge1xuICAgIGNsZWFudXAoKTtcbiAgICBpZiAoRUUubGlzdGVuZXJDb3VudCh0aGlzLCBcImVycm9yXCIpID09PSAwKSB7XG4gICAgICB0aHJvdyBlcjtcbiAgICB9XG4gIH1cbiAgc291cmNlLm9uKFwiZXJyb3JcIiwgb25lcnJvcik7XG4gIGRlc3Qub24oXCJlcnJvclwiLCBvbmVycm9yKTtcbiAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoXCJkYXRhXCIsIG9uZGF0YSk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcihcImRyYWluXCIsIG9uZHJhaW4pO1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcihcImVuZFwiLCBvbmVuZCk7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIiwgb25jbG9zZSk7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIiwgb25lcnJvcik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsIG9uZXJyb3IpO1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcihcImVuZFwiLCBjbGVhbnVwKTtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoXCJjbG9zZVwiLCBjbGVhbnVwKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIiwgY2xlYW51cCk7XG4gIH1cbiAgc291cmNlLm9uKFwiZW5kXCIsIGNsZWFudXApO1xuICBzb3VyY2Uub24oXCJjbG9zZVwiLCBjbGVhbnVwKTtcbiAgZGVzdC5vbihcImNsb3NlXCIsIGNsZWFudXApO1xuICBkZXN0LmVtaXQoXCJwaXBlXCIsIHNvdXJjZSk7XG4gIHJldHVybiBkZXN0O1xufTtcbihmdW5jdGlvbihleHBvcnRzKSB7XG4gIChmdW5jdGlvbihzYXgyKSB7XG4gICAgc2F4Mi5wYXJzZXIgPSBmdW5jdGlvbihzdHJpY3QsIG9wdCkge1xuICAgICAgcmV0dXJuIG5ldyBTQVhQYXJzZXIoc3RyaWN0LCBvcHQpO1xuICAgIH07XG4gICAgc2F4Mi5TQVhQYXJzZXIgPSBTQVhQYXJzZXI7XG4gICAgc2F4Mi5TQVhTdHJlYW0gPSBTQVhTdHJlYW07XG4gICAgc2F4Mi5jcmVhdGVTdHJlYW0gPSBjcmVhdGVTdHJlYW07XG4gICAgc2F4Mi5NQVhfQlVGRkVSX0xFTkdUSCA9IDY0ICogMTAyNDtcbiAgICB2YXIgYnVmZmVycyA9IFtcbiAgICAgIFwiY29tbWVudFwiLFxuICAgICAgXCJzZ21sRGVjbFwiLFxuICAgICAgXCJ0ZXh0Tm9kZVwiLFxuICAgICAgXCJ0YWdOYW1lXCIsXG4gICAgICBcImRvY3R5cGVcIixcbiAgICAgIFwicHJvY0luc3ROYW1lXCIsXG4gICAgICBcInByb2NJbnN0Qm9keVwiLFxuICAgICAgXCJlbnRpdHlcIixcbiAgICAgIFwiYXR0cmliTmFtZVwiLFxuICAgICAgXCJhdHRyaWJWYWx1ZVwiLFxuICAgICAgXCJjZGF0YVwiLFxuICAgICAgXCJzY3JpcHRcIlxuICAgIF07XG4gICAgc2F4Mi5FVkVOVFMgPSBbXG4gICAgICBcInRleHRcIixcbiAgICAgIFwicHJvY2Vzc2luZ2luc3RydWN0aW9uXCIsXG4gICAgICBcInNnbWxkZWNsYXJhdGlvblwiLFxuICAgICAgXCJkb2N0eXBlXCIsXG4gICAgICBcImNvbW1lbnRcIixcbiAgICAgIFwib3BlbnRhZ3N0YXJ0XCIsXG4gICAgICBcImF0dHJpYnV0ZVwiLFxuICAgICAgXCJvcGVudGFnXCIsXG4gICAgICBcImNsb3NldGFnXCIsXG4gICAgICBcIm9wZW5jZGF0YVwiLFxuICAgICAgXCJjZGF0YVwiLFxuICAgICAgXCJjbG9zZWNkYXRhXCIsXG4gICAgICBcImVycm9yXCIsXG4gICAgICBcImVuZFwiLFxuICAgICAgXCJyZWFkeVwiLFxuICAgICAgXCJzY3JpcHRcIixcbiAgICAgIFwib3Blbm5hbWVzcGFjZVwiLFxuICAgICAgXCJjbG9zZW5hbWVzcGFjZVwiXG4gICAgXTtcbiAgICBmdW5jdGlvbiBTQVhQYXJzZXIoc3RyaWN0LCBvcHQpIHtcbiAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTQVhQYXJzZXIpKSB7XG4gICAgICAgIHJldHVybiBuZXcgU0FYUGFyc2VyKHN0cmljdCwgb3B0KTtcbiAgICAgIH1cbiAgICAgIHZhciBwYXJzZXIgPSB0aGlzO1xuICAgICAgY2xlYXJCdWZmZXJzKHBhcnNlcik7XG4gICAgICBwYXJzZXIucSA9IHBhcnNlci5jID0gXCJcIjtcbiAgICAgIHBhcnNlci5idWZmZXJDaGVja1Bvc2l0aW9uID0gc2F4Mi5NQVhfQlVGRkVSX0xFTkdUSDtcbiAgICAgIHBhcnNlci5vcHQgPSBvcHQgfHwge307XG4gICAgICBwYXJzZXIub3B0Lmxvd2VyY2FzZSA9IHBhcnNlci5vcHQubG93ZXJjYXNlIHx8IHBhcnNlci5vcHQubG93ZXJjYXNldGFncztcbiAgICAgIHBhcnNlci5sb29zZUNhc2UgPSBwYXJzZXIub3B0Lmxvd2VyY2FzZSA/IFwidG9Mb3dlckNhc2VcIiA6IFwidG9VcHBlckNhc2VcIjtcbiAgICAgIHBhcnNlci50YWdzID0gW107XG4gICAgICBwYXJzZXIuY2xvc2VkID0gcGFyc2VyLmNsb3NlZFJvb3QgPSBwYXJzZXIuc2F3Um9vdCA9IGZhbHNlO1xuICAgICAgcGFyc2VyLnRhZyA9IHBhcnNlci5lcnJvciA9IG51bGw7XG4gICAgICBwYXJzZXIuc3RyaWN0ID0gISFzdHJpY3Q7XG4gICAgICBwYXJzZXIubm9zY3JpcHQgPSAhIShzdHJpY3QgfHwgcGFyc2VyLm9wdC5ub3NjcmlwdCk7XG4gICAgICBwYXJzZXIuc3RhdGUgPSBTLkJFR0lOO1xuICAgICAgcGFyc2VyLnN0cmljdEVudGl0aWVzID0gcGFyc2VyLm9wdC5zdHJpY3RFbnRpdGllcztcbiAgICAgIHBhcnNlci5FTlRJVElFUyA9IHBhcnNlci5zdHJpY3RFbnRpdGllcyA/IE9iamVjdC5jcmVhdGUoc2F4Mi5YTUxfRU5USVRJRVMpIDogT2JqZWN0LmNyZWF0ZShzYXgyLkVOVElUSUVTKTtcbiAgICAgIHBhcnNlci5hdHRyaWJMaXN0ID0gW107XG4gICAgICBpZiAocGFyc2VyLm9wdC54bWxucykge1xuICAgICAgICBwYXJzZXIubnMgPSBPYmplY3QuY3JlYXRlKHJvb3ROUyk7XG4gICAgICB9XG4gICAgICBwYXJzZXIudHJhY2tQb3NpdGlvbiA9IHBhcnNlci5vcHQucG9zaXRpb24gIT09IGZhbHNlO1xuICAgICAgaWYgKHBhcnNlci50cmFja1Bvc2l0aW9uKSB7XG4gICAgICAgIHBhcnNlci5wb3NpdGlvbiA9IHBhcnNlci5saW5lID0gcGFyc2VyLmNvbHVtbiA9IDA7XG4gICAgICB9XG4gICAgICBlbWl0MihwYXJzZXIsIFwib25yZWFkeVwiKTtcbiAgICB9XG4gICAgaWYgKCFPYmplY3QuY3JlYXRlKSB7XG4gICAgICBPYmplY3QuY3JlYXRlID0gZnVuY3Rpb24obykge1xuICAgICAgICBmdW5jdGlvbiBGKCkge1xuICAgICAgICB9XG4gICAgICAgIEYucHJvdG90eXBlID0gbztcbiAgICAgICAgdmFyIG5ld2YgPSBuZXcgRigpO1xuICAgICAgICByZXR1cm4gbmV3ZjtcbiAgICAgIH07XG4gICAgfVxuICAgIGlmICghT2JqZWN0LmtleXMpIHtcbiAgICAgIE9iamVjdC5rZXlzID0gZnVuY3Rpb24obykge1xuICAgICAgICB2YXIgYSA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpIGluIG8pIGlmIChvLmhhc093blByb3BlcnR5KGkpKSBhLnB1c2goaSk7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2hlY2tCdWZmZXJMZW5ndGgocGFyc2VyKSB7XG4gICAgICB2YXIgbWF4QWxsb3dlZCA9IE1hdGgubWF4KHNheDIuTUFYX0JVRkZFUl9MRU5HVEgsIDEwKTtcbiAgICAgIHZhciBtYXhBY3R1YWwgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBidWZmZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgbGVuID0gcGFyc2VyW2J1ZmZlcnNbaV1dLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbiA+IG1heEFsbG93ZWQpIHtcbiAgICAgICAgICBzd2l0Y2ggKGJ1ZmZlcnNbaV0pIHtcbiAgICAgICAgICAgIGNhc2UgXCJ0ZXh0Tm9kZVwiOlxuICAgICAgICAgICAgICBjbG9zZVRleHQocGFyc2VyKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiY2RhdGFcIjpcbiAgICAgICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCBcIm9uY2RhdGFcIiwgcGFyc2VyLmNkYXRhKTtcbiAgICAgICAgICAgICAgcGFyc2VyLmNkYXRhID0gXCJcIjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwic2NyaXB0XCI6XG4gICAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgXCJvbnNjcmlwdFwiLCBwYXJzZXIuc2NyaXB0KTtcbiAgICAgICAgICAgICAgcGFyc2VyLnNjcmlwdCA9IFwiXCI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgZXJyb3IocGFyc2VyLCBcIk1heCBidWZmZXIgbGVuZ3RoIGV4Y2VlZGVkOiBcIiArIGJ1ZmZlcnNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBtYXhBY3R1YWwgPSBNYXRoLm1heChtYXhBY3R1YWwsIGxlbik7XG4gICAgICB9XG4gICAgICB2YXIgbSA9IHNheDIuTUFYX0JVRkZFUl9MRU5HVEggLSBtYXhBY3R1YWw7XG4gICAgICBwYXJzZXIuYnVmZmVyQ2hlY2tQb3NpdGlvbiA9IG0gKyBwYXJzZXIucG9zaXRpb247XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNsZWFyQnVmZmVycyhwYXJzZXIpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gYnVmZmVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcGFyc2VyW2J1ZmZlcnNbaV1dID0gXCJcIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZmx1c2hCdWZmZXJzKHBhcnNlcikge1xuICAgICAgY2xvc2VUZXh0KHBhcnNlcik7XG4gICAgICBpZiAocGFyc2VyLmNkYXRhICE9PSBcIlwiKSB7XG4gICAgICAgIGVtaXROb2RlKHBhcnNlciwgXCJvbmNkYXRhXCIsIHBhcnNlci5jZGF0YSk7XG4gICAgICAgIHBhcnNlci5jZGF0YSA9IFwiXCI7XG4gICAgICB9XG4gICAgICBpZiAocGFyc2VyLnNjcmlwdCAhPT0gXCJcIikge1xuICAgICAgICBlbWl0Tm9kZShwYXJzZXIsIFwib25zY3JpcHRcIiwgcGFyc2VyLnNjcmlwdCk7XG4gICAgICAgIHBhcnNlci5zY3JpcHQgPSBcIlwiO1xuICAgICAgfVxuICAgIH1cbiAgICBTQVhQYXJzZXIucHJvdG90eXBlID0ge1xuICAgICAgZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgZW5kKHRoaXMpO1xuICAgICAgfSxcbiAgICAgIHdyaXRlLFxuICAgICAgcmVzdW1lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5lcnJvciA9IG51bGw7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcbiAgICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud3JpdGUobnVsbCk7XG4gICAgICB9LFxuICAgICAgZmx1c2g6IGZ1bmN0aW9uKCkge1xuICAgICAgICBmbHVzaEJ1ZmZlcnModGhpcyk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgU3RyZWFtMjtcbiAgICB0cnkge1xuICAgICAgU3RyZWFtMiA9IHN0cmVhbUJyb3dzZXJpZnkuU3RyZWFtO1xuICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICBTdHJlYW0yID0gZnVuY3Rpb24oKSB7XG4gICAgICB9O1xuICAgIH1cbiAgICB2YXIgc3RyZWFtV3JhcHMgPSBzYXgyLkVWRU5UUy5maWx0ZXIoZnVuY3Rpb24oZXYpIHtcbiAgICAgIHJldHVybiBldiAhPT0gXCJlcnJvclwiICYmIGV2ICE9PSBcImVuZFwiO1xuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVN0cmVhbShzdHJpY3QsIG9wdCkge1xuICAgICAgcmV0dXJuIG5ldyBTQVhTdHJlYW0oc3RyaWN0LCBvcHQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBTQVhTdHJlYW0oc3RyaWN0LCBvcHQpIHtcbiAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTQVhTdHJlYW0pKSB7XG4gICAgICAgIHJldHVybiBuZXcgU0FYU3RyZWFtKHN0cmljdCwgb3B0KTtcbiAgICAgIH1cbiAgICAgIFN0cmVhbTIuYXBwbHkodGhpcyk7XG4gICAgICB0aGlzLl9wYXJzZXIgPSBuZXcgU0FYUGFyc2VyKHN0cmljdCwgb3B0KTtcbiAgICAgIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuICAgICAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG4gICAgICB2YXIgbWUgPSB0aGlzO1xuICAgICAgdGhpcy5fcGFyc2VyLm9uZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIG1lLmVtaXQoXCJlbmRcIik7XG4gICAgICB9O1xuICAgICAgdGhpcy5fcGFyc2VyLm9uZXJyb3IgPSBmdW5jdGlvbihlcikge1xuICAgICAgICBtZS5lbWl0KFwiZXJyb3JcIiwgZXIpO1xuICAgICAgICBtZS5fcGFyc2VyLmVycm9yID0gbnVsbDtcbiAgICAgIH07XG4gICAgICB0aGlzLl9kZWNvZGVyID0gbnVsbDtcbiAgICAgIHN0cmVhbVdyYXBzLmZvckVhY2goZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1lLCBcIm9uXCIgKyBldiwge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbWUuX3BhcnNlcltcIm9uXCIgKyBldl07XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKGgpIHtcbiAgICAgICAgICAgIGlmICghaCkge1xuICAgICAgICAgICAgICBtZS5yZW1vdmVBbGxMaXN0ZW5lcnMoZXYpO1xuICAgICAgICAgICAgICBtZS5fcGFyc2VyW1wib25cIiArIGV2XSA9IGg7XG4gICAgICAgICAgICAgIHJldHVybiBoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWUub24oZXYsIGgpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIFNBWFN0cmVhbS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN0cmVhbTIucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogU0FYU3RyZWFtXG4gICAgICB9XG4gICAgfSk7XG4gICAgU0FYU3RyZWFtLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIGlmICh0eXBlb2YgQnVmZmVyID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIEJ1ZmZlci5pc0J1ZmZlciA9PT0gXCJmdW5jdGlvblwiICYmIEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkge1xuICAgICAgICBpZiAoIXRoaXMuX2RlY29kZXIpIHtcbiAgICAgICAgICB2YXIgU0QgPSByZXF1aXJlU3RyaW5nX2RlY29kZXIoKS5TdHJpbmdEZWNvZGVyO1xuICAgICAgICAgIHRoaXMuX2RlY29kZXIgPSBuZXcgU0QoXCJ1dGY4XCIpO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEgPSB0aGlzLl9kZWNvZGVyLndyaXRlKGRhdGEpO1xuICAgICAgfVxuICAgICAgdGhpcy5fcGFyc2VyLndyaXRlKGRhdGEudG9TdHJpbmcoKSk7XG4gICAgICB0aGlzLmVtaXQoXCJkYXRhXCIsIGRhdGEpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBTQVhTdHJlYW0ucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKGNodW5rKSB7XG4gICAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMud3JpdGUoY2h1bmspO1xuICAgICAgfVxuICAgICAgdGhpcy5fcGFyc2VyLmVuZCgpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBTQVhTdHJlYW0ucHJvdG90eXBlLm9uID0gZnVuY3Rpb24oZXYsIGhhbmRsZXIpIHtcbiAgICAgIHZhciBtZSA9IHRoaXM7XG4gICAgICBpZiAoIW1lLl9wYXJzZXJbXCJvblwiICsgZXZdICYmIHN0cmVhbVdyYXBzLmluZGV4T2YoZXYpICE9PSAtMSkge1xuICAgICAgICBtZS5fcGFyc2VyW1wib25cIiArIGV2XSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IFthcmd1bWVudHNbMF1dIDogQXJyYXkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgICBhcmdzLnNwbGljZSgwLCAwLCBldik7XG4gICAgICAgICAgbWUuZW1pdC5hcHBseShtZSwgYXJncyk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gU3RyZWFtMi5wcm90b3R5cGUub24uY2FsbChtZSwgZXYsIGhhbmRsZXIpO1xuICAgIH07XG4gICAgdmFyIENEQVRBID0gXCJbQ0RBVEFbXCI7XG4gICAgdmFyIERPQ1RZUEUgPSBcIkRPQ1RZUEVcIjtcbiAgICB2YXIgWE1MX05BTUVTUEFDRSA9IFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCI7XG4gICAgdmFyIFhNTE5TX05BTUVTUEFDRSA9IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy9cIjtcbiAgICB2YXIgcm9vdE5TID0geyB4bWw6IFhNTF9OQU1FU1BBQ0UsIHhtbG5zOiBYTUxOU19OQU1FU1BBQ0UgfTtcbiAgICB2YXIgbmFtZVN0YXJ0ID0gL1s6X0EtWmEtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF0vO1xuICAgIHZhciBuYW1lQm9keSA9IC9bOl9BLVphLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwLlxcZC1dLztcbiAgICB2YXIgZW50aXR5U3RhcnQgPSAvWyM6X0EtWmEtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF0vO1xuICAgIHZhciBlbnRpdHlCb2R5ID0gL1sjOl9BLVphLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwLlxcZC1dLztcbiAgICBmdW5jdGlvbiBpc1doaXRlc3BhY2UoYykge1xuICAgICAgcmV0dXJuIGMgPT09IFwiIFwiIHx8IGMgPT09IFwiXFxuXCIgfHwgYyA9PT0gXCJcXHJcIiB8fCBjID09PSBcIlx0XCI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzUXVvdGUoYykge1xuICAgICAgcmV0dXJuIGMgPT09ICdcIicgfHwgYyA9PT0gXCInXCI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzQXR0cmliRW5kKGMpIHtcbiAgICAgIHJldHVybiBjID09PSBcIj5cIiB8fCBpc1doaXRlc3BhY2UoYyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzTWF0Y2gocmVnZXgsIGMpIHtcbiAgICAgIHJldHVybiByZWdleC50ZXN0KGMpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBub3RNYXRjaChyZWdleCwgYykge1xuICAgICAgcmV0dXJuICFpc01hdGNoKHJlZ2V4LCBjKTtcbiAgICB9XG4gICAgdmFyIFMgPSAwO1xuICAgIHNheDIuU1RBVEUgPSB7XG4gICAgICBCRUdJTjogUysrLFxuICAgICAgLy8gbGVhZGluZyBieXRlIG9yZGVyIG1hcmsgb3Igd2hpdGVzcGFjZVxuICAgICAgQkVHSU5fV0hJVEVTUEFDRTogUysrLFxuICAgICAgLy8gbGVhZGluZyB3aGl0ZXNwYWNlXG4gICAgICBURVhUOiBTKyssXG4gICAgICAvLyBnZW5lcmFsIHN0dWZmXG4gICAgICBURVhUX0VOVElUWTogUysrLFxuICAgICAgLy8gJmFtcCBhbmQgc3VjaC5cbiAgICAgIE9QRU5fV0FLQTogUysrLFxuICAgICAgLy8gPFxuICAgICAgU0dNTF9ERUNMOiBTKyssXG4gICAgICAvLyA8IUJMQVJHXG4gICAgICBTR01MX0RFQ0xfUVVPVEVEOiBTKyssXG4gICAgICAvLyA8IUJMQVJHIGZvbyBcImJhclxuICAgICAgRE9DVFlQRTogUysrLFxuICAgICAgLy8gPCFET0NUWVBFXG4gICAgICBET0NUWVBFX1FVT1RFRDogUysrLFxuICAgICAgLy8gPCFET0NUWVBFIFwiLy9ibGFoXG4gICAgICBET0NUWVBFX0RURDogUysrLFxuICAgICAgLy8gPCFET0NUWVBFIFwiLy9ibGFoXCIgWyAuLi5cbiAgICAgIERPQ1RZUEVfRFREX1FVT1RFRDogUysrLFxuICAgICAgLy8gPCFET0NUWVBFIFwiLy9ibGFoXCIgWyBcImZvb1xuICAgICAgQ09NTUVOVF9TVEFSVElORzogUysrLFxuICAgICAgLy8gPCEtXG4gICAgICBDT01NRU5UOiBTKyssXG4gICAgICAvLyA8IS0tXG4gICAgICBDT01NRU5UX0VORElORzogUysrLFxuICAgICAgLy8gPCEtLSBibGFoIC1cbiAgICAgIENPTU1FTlRfRU5ERUQ6IFMrKyxcbiAgICAgIC8vIDwhLS0gYmxhaCAtLVxuICAgICAgQ0RBVEE6IFMrKyxcbiAgICAgIC8vIDwhW0NEQVRBWyBzb21ldGhpbmdcbiAgICAgIENEQVRBX0VORElORzogUysrLFxuICAgICAgLy8gXVxuICAgICAgQ0RBVEFfRU5ESU5HXzI6IFMrKyxcbiAgICAgIC8vIF1dXG4gICAgICBQUk9DX0lOU1Q6IFMrKyxcbiAgICAgIC8vIDw/aGlcbiAgICAgIFBST0NfSU5TVF9CT0RZOiBTKyssXG4gICAgICAvLyA8P2hpIHRoZXJlXG4gICAgICBQUk9DX0lOU1RfRU5ESU5HOiBTKyssXG4gICAgICAvLyA8P2hpIFwidGhlcmVcIiA/XG4gICAgICBPUEVOX1RBRzogUysrLFxuICAgICAgLy8gPHN0cm9uZ1xuICAgICAgT1BFTl9UQUdfU0xBU0g6IFMrKyxcbiAgICAgIC8vIDxzdHJvbmcgL1xuICAgICAgQVRUUklCOiBTKyssXG4gICAgICAvLyA8YVxuICAgICAgQVRUUklCX05BTUU6IFMrKyxcbiAgICAgIC8vIDxhIGZvb1xuICAgICAgQVRUUklCX05BTUVfU0FXX1dISVRFOiBTKyssXG4gICAgICAvLyA8YSBmb28gX1xuICAgICAgQVRUUklCX1ZBTFVFOiBTKyssXG4gICAgICAvLyA8YSBmb289XG4gICAgICBBVFRSSUJfVkFMVUVfUVVPVEVEOiBTKyssXG4gICAgICAvLyA8YSBmb289XCJiYXJcbiAgICAgIEFUVFJJQl9WQUxVRV9DTE9TRUQ6IFMrKyxcbiAgICAgIC8vIDxhIGZvbz1cImJhclwiXG4gICAgICBBVFRSSUJfVkFMVUVfVU5RVU9URUQ6IFMrKyxcbiAgICAgIC8vIDxhIGZvbz1iYXJcbiAgICAgIEFUVFJJQl9WQUxVRV9FTlRJVFlfUTogUysrLFxuICAgICAgLy8gPGZvbyBiYXI9XCImcXVvdDtcIlxuICAgICAgQVRUUklCX1ZBTFVFX0VOVElUWV9VOiBTKyssXG4gICAgICAvLyA8Zm9vIGJhcj0mcXVvdFxuICAgICAgQ0xPU0VfVEFHOiBTKyssXG4gICAgICAvLyA8L2FcbiAgICAgIENMT1NFX1RBR19TQVdfV0hJVEU6IFMrKyxcbiAgICAgIC8vIDwvYSAgID5cbiAgICAgIFNDUklQVDogUysrLFxuICAgICAgLy8gPHNjcmlwdD4gLi4uXG4gICAgICBTQ1JJUFRfRU5ESU5HOiBTKytcbiAgICAgIC8vIDxzY3JpcHQ+IC4uLiA8XG4gICAgfTtcbiAgICBzYXgyLlhNTF9FTlRJVElFUyA9IHtcbiAgICAgIFwiYW1wXCI6IFwiJlwiLFxuICAgICAgXCJndFwiOiBcIj5cIixcbiAgICAgIFwibHRcIjogXCI8XCIsXG4gICAgICBcInF1b3RcIjogJ1wiJyxcbiAgICAgIFwiYXBvc1wiOiBcIidcIlxuICAgIH07XG4gICAgc2F4Mi5FTlRJVElFUyA9IHtcbiAgICAgIFwiYW1wXCI6IFwiJlwiLFxuICAgICAgXCJndFwiOiBcIj5cIixcbiAgICAgIFwibHRcIjogXCI8XCIsXG4gICAgICBcInF1b3RcIjogJ1wiJyxcbiAgICAgIFwiYXBvc1wiOiBcIidcIixcbiAgICAgIFwiQUVsaWdcIjogMTk4LFxuICAgICAgXCJBYWN1dGVcIjogMTkzLFxuICAgICAgXCJBY2lyY1wiOiAxOTQsXG4gICAgICBcIkFncmF2ZVwiOiAxOTIsXG4gICAgICBcIkFyaW5nXCI6IDE5NyxcbiAgICAgIFwiQXRpbGRlXCI6IDE5NSxcbiAgICAgIFwiQXVtbFwiOiAxOTYsXG4gICAgICBcIkNjZWRpbFwiOiAxOTksXG4gICAgICBcIkVUSFwiOiAyMDgsXG4gICAgICBcIkVhY3V0ZVwiOiAyMDEsXG4gICAgICBcIkVjaXJjXCI6IDIwMixcbiAgICAgIFwiRWdyYXZlXCI6IDIwMCxcbiAgICAgIFwiRXVtbFwiOiAyMDMsXG4gICAgICBcIklhY3V0ZVwiOiAyMDUsXG4gICAgICBcIkljaXJjXCI6IDIwNixcbiAgICAgIFwiSWdyYXZlXCI6IDIwNCxcbiAgICAgIFwiSXVtbFwiOiAyMDcsXG4gICAgICBcIk50aWxkZVwiOiAyMDksXG4gICAgICBcIk9hY3V0ZVwiOiAyMTEsXG4gICAgICBcIk9jaXJjXCI6IDIxMixcbiAgICAgIFwiT2dyYXZlXCI6IDIxMCxcbiAgICAgIFwiT3NsYXNoXCI6IDIxNixcbiAgICAgIFwiT3RpbGRlXCI6IDIxMyxcbiAgICAgIFwiT3VtbFwiOiAyMTQsXG4gICAgICBcIlRIT1JOXCI6IDIyMixcbiAgICAgIFwiVWFjdXRlXCI6IDIxOCxcbiAgICAgIFwiVWNpcmNcIjogMjE5LFxuICAgICAgXCJVZ3JhdmVcIjogMjE3LFxuICAgICAgXCJVdW1sXCI6IDIyMCxcbiAgICAgIFwiWWFjdXRlXCI6IDIyMSxcbiAgICAgIFwiYWFjdXRlXCI6IDIyNSxcbiAgICAgIFwiYWNpcmNcIjogMjI2LFxuICAgICAgXCJhZWxpZ1wiOiAyMzAsXG4gICAgICBcImFncmF2ZVwiOiAyMjQsXG4gICAgICBcImFyaW5nXCI6IDIyOSxcbiAgICAgIFwiYXRpbGRlXCI6IDIyNyxcbiAgICAgIFwiYXVtbFwiOiAyMjgsXG4gICAgICBcImNjZWRpbFwiOiAyMzEsXG4gICAgICBcImVhY3V0ZVwiOiAyMzMsXG4gICAgICBcImVjaXJjXCI6IDIzNCxcbiAgICAgIFwiZWdyYXZlXCI6IDIzMixcbiAgICAgIFwiZXRoXCI6IDI0MCxcbiAgICAgIFwiZXVtbFwiOiAyMzUsXG4gICAgICBcImlhY3V0ZVwiOiAyMzcsXG4gICAgICBcImljaXJjXCI6IDIzOCxcbiAgICAgIFwiaWdyYXZlXCI6IDIzNixcbiAgICAgIFwiaXVtbFwiOiAyMzksXG4gICAgICBcIm50aWxkZVwiOiAyNDEsXG4gICAgICBcIm9hY3V0ZVwiOiAyNDMsXG4gICAgICBcIm9jaXJjXCI6IDI0NCxcbiAgICAgIFwib2dyYXZlXCI6IDI0MixcbiAgICAgIFwib3NsYXNoXCI6IDI0OCxcbiAgICAgIFwib3RpbGRlXCI6IDI0NSxcbiAgICAgIFwib3VtbFwiOiAyNDYsXG4gICAgICBcInN6bGlnXCI6IDIyMyxcbiAgICAgIFwidGhvcm5cIjogMjU0LFxuICAgICAgXCJ1YWN1dGVcIjogMjUwLFxuICAgICAgXCJ1Y2lyY1wiOiAyNTEsXG4gICAgICBcInVncmF2ZVwiOiAyNDksXG4gICAgICBcInV1bWxcIjogMjUyLFxuICAgICAgXCJ5YWN1dGVcIjogMjUzLFxuICAgICAgXCJ5dW1sXCI6IDI1NSxcbiAgICAgIFwiY29weVwiOiAxNjksXG4gICAgICBcInJlZ1wiOiAxNzQsXG4gICAgICBcIm5ic3BcIjogMTYwLFxuICAgICAgXCJpZXhjbFwiOiAxNjEsXG4gICAgICBcImNlbnRcIjogMTYyLFxuICAgICAgXCJwb3VuZFwiOiAxNjMsXG4gICAgICBcImN1cnJlblwiOiAxNjQsXG4gICAgICBcInllblwiOiAxNjUsXG4gICAgICBcImJydmJhclwiOiAxNjYsXG4gICAgICBcInNlY3RcIjogMTY3LFxuICAgICAgXCJ1bWxcIjogMTY4LFxuICAgICAgXCJvcmRmXCI6IDE3MCxcbiAgICAgIFwibGFxdW9cIjogMTcxLFxuICAgICAgXCJub3RcIjogMTcyLFxuICAgICAgXCJzaHlcIjogMTczLFxuICAgICAgXCJtYWNyXCI6IDE3NSxcbiAgICAgIFwiZGVnXCI6IDE3NixcbiAgICAgIFwicGx1c21uXCI6IDE3NyxcbiAgICAgIFwic3VwMVwiOiAxODUsXG4gICAgICBcInN1cDJcIjogMTc4LFxuICAgICAgXCJzdXAzXCI6IDE3OSxcbiAgICAgIFwiYWN1dGVcIjogMTgwLFxuICAgICAgXCJtaWNyb1wiOiAxODEsXG4gICAgICBcInBhcmFcIjogMTgyLFxuICAgICAgXCJtaWRkb3RcIjogMTgzLFxuICAgICAgXCJjZWRpbFwiOiAxODQsXG4gICAgICBcIm9yZG1cIjogMTg2LFxuICAgICAgXCJyYXF1b1wiOiAxODcsXG4gICAgICBcImZyYWMxNFwiOiAxODgsXG4gICAgICBcImZyYWMxMlwiOiAxODksXG4gICAgICBcImZyYWMzNFwiOiAxOTAsXG4gICAgICBcImlxdWVzdFwiOiAxOTEsXG4gICAgICBcInRpbWVzXCI6IDIxNSxcbiAgICAgIFwiZGl2aWRlXCI6IDI0NyxcbiAgICAgIFwiT0VsaWdcIjogMzM4LFxuICAgICAgXCJvZWxpZ1wiOiAzMzksXG4gICAgICBcIlNjYXJvblwiOiAzNTIsXG4gICAgICBcInNjYXJvblwiOiAzNTMsXG4gICAgICBcIll1bWxcIjogMzc2LFxuICAgICAgXCJmbm9mXCI6IDQwMixcbiAgICAgIFwiY2lyY1wiOiA3MTAsXG4gICAgICBcInRpbGRlXCI6IDczMixcbiAgICAgIFwiQWxwaGFcIjogOTEzLFxuICAgICAgXCJCZXRhXCI6IDkxNCxcbiAgICAgIFwiR2FtbWFcIjogOTE1LFxuICAgICAgXCJEZWx0YVwiOiA5MTYsXG4gICAgICBcIkVwc2lsb25cIjogOTE3LFxuICAgICAgXCJaZXRhXCI6IDkxOCxcbiAgICAgIFwiRXRhXCI6IDkxOSxcbiAgICAgIFwiVGhldGFcIjogOTIwLFxuICAgICAgXCJJb3RhXCI6IDkyMSxcbiAgICAgIFwiS2FwcGFcIjogOTIyLFxuICAgICAgXCJMYW1iZGFcIjogOTIzLFxuICAgICAgXCJNdVwiOiA5MjQsXG4gICAgICBcIk51XCI6IDkyNSxcbiAgICAgIFwiWGlcIjogOTI2LFxuICAgICAgXCJPbWljcm9uXCI6IDkyNyxcbiAgICAgIFwiUGlcIjogOTI4LFxuICAgICAgXCJSaG9cIjogOTI5LFxuICAgICAgXCJTaWdtYVwiOiA5MzEsXG4gICAgICBcIlRhdVwiOiA5MzIsXG4gICAgICBcIlVwc2lsb25cIjogOTMzLFxuICAgICAgXCJQaGlcIjogOTM0LFxuICAgICAgXCJDaGlcIjogOTM1LFxuICAgICAgXCJQc2lcIjogOTM2LFxuICAgICAgXCJPbWVnYVwiOiA5MzcsXG4gICAgICBcImFscGhhXCI6IDk0NSxcbiAgICAgIFwiYmV0YVwiOiA5NDYsXG4gICAgICBcImdhbW1hXCI6IDk0NyxcbiAgICAgIFwiZGVsdGFcIjogOTQ4LFxuICAgICAgXCJlcHNpbG9uXCI6IDk0OSxcbiAgICAgIFwiemV0YVwiOiA5NTAsXG4gICAgICBcImV0YVwiOiA5NTEsXG4gICAgICBcInRoZXRhXCI6IDk1MixcbiAgICAgIFwiaW90YVwiOiA5NTMsXG4gICAgICBcImthcHBhXCI6IDk1NCxcbiAgICAgIFwibGFtYmRhXCI6IDk1NSxcbiAgICAgIFwibXVcIjogOTU2LFxuICAgICAgXCJudVwiOiA5NTcsXG4gICAgICBcInhpXCI6IDk1OCxcbiAgICAgIFwib21pY3JvblwiOiA5NTksXG4gICAgICBcInBpXCI6IDk2MCxcbiAgICAgIFwicmhvXCI6IDk2MSxcbiAgICAgIFwic2lnbWFmXCI6IDk2MixcbiAgICAgIFwic2lnbWFcIjogOTYzLFxuICAgICAgXCJ0YXVcIjogOTY0LFxuICAgICAgXCJ1cHNpbG9uXCI6IDk2NSxcbiAgICAgIFwicGhpXCI6IDk2NixcbiAgICAgIFwiY2hpXCI6IDk2NyxcbiAgICAgIFwicHNpXCI6IDk2OCxcbiAgICAgIFwib21lZ2FcIjogOTY5LFxuICAgICAgXCJ0aGV0YXN5bVwiOiA5NzcsXG4gICAgICBcInVwc2loXCI6IDk3OCxcbiAgICAgIFwicGl2XCI6IDk4MixcbiAgICAgIFwiZW5zcFwiOiA4MTk0LFxuICAgICAgXCJlbXNwXCI6IDgxOTUsXG4gICAgICBcInRoaW5zcFwiOiA4MjAxLFxuICAgICAgXCJ6d25qXCI6IDgyMDQsXG4gICAgICBcInp3alwiOiA4MjA1LFxuICAgICAgXCJscm1cIjogODIwNixcbiAgICAgIFwicmxtXCI6IDgyMDcsXG4gICAgICBcIm5kYXNoXCI6IDgyMTEsXG4gICAgICBcIm1kYXNoXCI6IDgyMTIsXG4gICAgICBcImxzcXVvXCI6IDgyMTYsXG4gICAgICBcInJzcXVvXCI6IDgyMTcsXG4gICAgICBcInNicXVvXCI6IDgyMTgsXG4gICAgICBcImxkcXVvXCI6IDgyMjAsXG4gICAgICBcInJkcXVvXCI6IDgyMjEsXG4gICAgICBcImJkcXVvXCI6IDgyMjIsXG4gICAgICBcImRhZ2dlclwiOiA4MjI0LFxuICAgICAgXCJEYWdnZXJcIjogODIyNSxcbiAgICAgIFwiYnVsbFwiOiA4MjI2LFxuICAgICAgXCJoZWxsaXBcIjogODIzMCxcbiAgICAgIFwicGVybWlsXCI6IDgyNDAsXG4gICAgICBcInByaW1lXCI6IDgyNDIsXG4gICAgICBcIlByaW1lXCI6IDgyNDMsXG4gICAgICBcImxzYXF1b1wiOiA4MjQ5LFxuICAgICAgXCJyc2FxdW9cIjogODI1MCxcbiAgICAgIFwib2xpbmVcIjogODI1NCxcbiAgICAgIFwiZnJhc2xcIjogODI2MCxcbiAgICAgIFwiZXVyb1wiOiA4MzY0LFxuICAgICAgXCJpbWFnZVwiOiA4NDY1LFxuICAgICAgXCJ3ZWllcnBcIjogODQ3MixcbiAgICAgIFwicmVhbFwiOiA4NDc2LFxuICAgICAgXCJ0cmFkZVwiOiA4NDgyLFxuICAgICAgXCJhbGVmc3ltXCI6IDg1MDEsXG4gICAgICBcImxhcnJcIjogODU5MixcbiAgICAgIFwidWFyclwiOiA4NTkzLFxuICAgICAgXCJyYXJyXCI6IDg1OTQsXG4gICAgICBcImRhcnJcIjogODU5NSxcbiAgICAgIFwiaGFyclwiOiA4NTk2LFxuICAgICAgXCJjcmFyclwiOiA4NjI5LFxuICAgICAgXCJsQXJyXCI6IDg2NTYsXG4gICAgICBcInVBcnJcIjogODY1NyxcbiAgICAgIFwickFyclwiOiA4NjU4LFxuICAgICAgXCJkQXJyXCI6IDg2NTksXG4gICAgICBcImhBcnJcIjogODY2MCxcbiAgICAgIFwiZm9yYWxsXCI6IDg3MDQsXG4gICAgICBcInBhcnRcIjogODcwNixcbiAgICAgIFwiZXhpc3RcIjogODcwNyxcbiAgICAgIFwiZW1wdHlcIjogODcwOSxcbiAgICAgIFwibmFibGFcIjogODcxMSxcbiAgICAgIFwiaXNpblwiOiA4NzEyLFxuICAgICAgXCJub3RpblwiOiA4NzEzLFxuICAgICAgXCJuaVwiOiA4NzE1LFxuICAgICAgXCJwcm9kXCI6IDg3MTksXG4gICAgICBcInN1bVwiOiA4NzIxLFxuICAgICAgXCJtaW51c1wiOiA4NzIyLFxuICAgICAgXCJsb3dhc3RcIjogODcyNyxcbiAgICAgIFwicmFkaWNcIjogODczMCxcbiAgICAgIFwicHJvcFwiOiA4NzMzLFxuICAgICAgXCJpbmZpblwiOiA4NzM0LFxuICAgICAgXCJhbmdcIjogODczNixcbiAgICAgIFwiYW5kXCI6IDg3NDMsXG4gICAgICBcIm9yXCI6IDg3NDQsXG4gICAgICBcImNhcFwiOiA4NzQ1LFxuICAgICAgXCJjdXBcIjogODc0NixcbiAgICAgIFwiaW50XCI6IDg3NDcsXG4gICAgICBcInRoZXJlNFwiOiA4NzU2LFxuICAgICAgXCJzaW1cIjogODc2NCxcbiAgICAgIFwiY29uZ1wiOiA4NzczLFxuICAgICAgXCJhc3ltcFwiOiA4Nzc2LFxuICAgICAgXCJuZVwiOiA4ODAwLFxuICAgICAgXCJlcXVpdlwiOiA4ODAxLFxuICAgICAgXCJsZVwiOiA4ODA0LFxuICAgICAgXCJnZVwiOiA4ODA1LFxuICAgICAgXCJzdWJcIjogODgzNCxcbiAgICAgIFwic3VwXCI6IDg4MzUsXG4gICAgICBcIm5zdWJcIjogODgzNixcbiAgICAgIFwic3ViZVwiOiA4ODM4LFxuICAgICAgXCJzdXBlXCI6IDg4MzksXG4gICAgICBcIm9wbHVzXCI6IDg4NTMsXG4gICAgICBcIm90aW1lc1wiOiA4ODU1LFxuICAgICAgXCJwZXJwXCI6IDg4NjksXG4gICAgICBcInNkb3RcIjogODkwMSxcbiAgICAgIFwibGNlaWxcIjogODk2OCxcbiAgICAgIFwicmNlaWxcIjogODk2OSxcbiAgICAgIFwibGZsb29yXCI6IDg5NzAsXG4gICAgICBcInJmbG9vclwiOiA4OTcxLFxuICAgICAgXCJsYW5nXCI6IDkwMDEsXG4gICAgICBcInJhbmdcIjogOTAwMixcbiAgICAgIFwibG96XCI6IDk2NzQsXG4gICAgICBcInNwYWRlc1wiOiA5ODI0LFxuICAgICAgXCJjbHVic1wiOiA5ODI3LFxuICAgICAgXCJoZWFydHNcIjogOTgyOSxcbiAgICAgIFwiZGlhbXNcIjogOTgzMFxuICAgIH07XG4gICAgT2JqZWN0LmtleXMoc2F4Mi5FTlRJVElFUykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgIHZhciBlID0gc2F4Mi5FTlRJVElFU1trZXldO1xuICAgICAgdmFyIHMzID0gdHlwZW9mIGUgPT09IFwibnVtYmVyXCIgPyBTdHJpbmcuZnJvbUNoYXJDb2RlKGUpIDogZTtcbiAgICAgIHNheDIuRU5USVRJRVNba2V5XSA9IHMzO1xuICAgIH0pO1xuICAgIGZvciAodmFyIHMyIGluIHNheDIuU1RBVEUpIHtcbiAgICAgIHNheDIuU1RBVEVbc2F4Mi5TVEFURVtzMl1dID0gczI7XG4gICAgfVxuICAgIFMgPSBzYXgyLlNUQVRFO1xuICAgIGZ1bmN0aW9uIGVtaXQyKHBhcnNlciwgZXZlbnQsIGRhdGEpIHtcbiAgICAgIHBhcnNlcltldmVudF0gJiYgcGFyc2VyW2V2ZW50XShkYXRhKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZW1pdE5vZGUocGFyc2VyLCBub2RlVHlwZSwgZGF0YSkge1xuICAgICAgaWYgKHBhcnNlci50ZXh0Tm9kZSkgY2xvc2VUZXh0KHBhcnNlcik7XG4gICAgICBlbWl0MihwYXJzZXIsIG5vZGVUeXBlLCBkYXRhKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2xvc2VUZXh0KHBhcnNlcikge1xuICAgICAgcGFyc2VyLnRleHROb2RlID0gdGV4dG9wdHMocGFyc2VyLm9wdCwgcGFyc2VyLnRleHROb2RlKTtcbiAgICAgIGlmIChwYXJzZXIudGV4dE5vZGUpIGVtaXQyKHBhcnNlciwgXCJvbnRleHRcIiwgcGFyc2VyLnRleHROb2RlKTtcbiAgICAgIHBhcnNlci50ZXh0Tm9kZSA9IFwiXCI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRleHRvcHRzKG9wdCwgdGV4dCkge1xuICAgICAgaWYgKG9wdC50cmltKSB0ZXh0ID0gdGV4dC50cmltKCk7XG4gICAgICBpZiAob3B0Lm5vcm1hbGl6ZSkgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxzKy9nLCBcIiBcIik7XG4gICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZXJyb3IocGFyc2VyLCBlcikge1xuICAgICAgY2xvc2VUZXh0KHBhcnNlcik7XG4gICAgICBpZiAocGFyc2VyLnRyYWNrUG9zaXRpb24pIHtcbiAgICAgICAgZXIgKz0gXCJcXG5MaW5lOiBcIiArIHBhcnNlci5saW5lICsgXCJcXG5Db2x1bW46IFwiICsgcGFyc2VyLmNvbHVtbiArIFwiXFxuQ2hhcjogXCIgKyBwYXJzZXIuYztcbiAgICAgIH1cbiAgICAgIGVyID0gbmV3IEVycm9yKGVyKTtcbiAgICAgIHBhcnNlci5lcnJvciA9IGVyO1xuICAgICAgZW1pdDIocGFyc2VyLCBcIm9uZXJyb3JcIiwgZXIpO1xuICAgICAgcmV0dXJuIHBhcnNlcjtcbiAgICB9XG4gICAgZnVuY3Rpb24gZW5kKHBhcnNlcikge1xuICAgICAgaWYgKHBhcnNlci5zYXdSb290ICYmICFwYXJzZXIuY2xvc2VkUm9vdCkgc3RyaWN0RmFpbChwYXJzZXIsIFwiVW5jbG9zZWQgcm9vdCB0YWdcIik7XG4gICAgICBpZiAocGFyc2VyLnN0YXRlICE9PSBTLkJFR0lOICYmIHBhcnNlci5zdGF0ZSAhPT0gUy5CRUdJTl9XSElURVNQQUNFICYmIHBhcnNlci5zdGF0ZSAhPT0gUy5URVhUKSB7XG4gICAgICAgIGVycm9yKHBhcnNlciwgXCJVbmV4cGVjdGVkIGVuZFwiKTtcbiAgICAgIH1cbiAgICAgIGNsb3NlVGV4dChwYXJzZXIpO1xuICAgICAgcGFyc2VyLmMgPSBcIlwiO1xuICAgICAgcGFyc2VyLmNsb3NlZCA9IHRydWU7XG4gICAgICBlbWl0MihwYXJzZXIsIFwib25lbmRcIik7XG4gICAgICBTQVhQYXJzZXIuY2FsbChwYXJzZXIsIHBhcnNlci5zdHJpY3QsIHBhcnNlci5vcHQpO1xuICAgICAgcmV0dXJuIHBhcnNlcjtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3RyaWN0RmFpbChwYXJzZXIsIG1lc3NhZ2UpIHtcbiAgICAgIGlmICh0eXBlb2YgcGFyc2VyICE9PSBcIm9iamVjdFwiIHx8ICEocGFyc2VyIGluc3RhbmNlb2YgU0FYUGFyc2VyKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJiYWQgY2FsbCB0byBzdHJpY3RGYWlsXCIpO1xuICAgICAgfVxuICAgICAgaWYgKHBhcnNlci5zdHJpY3QpIHtcbiAgICAgICAgZXJyb3IocGFyc2VyLCBtZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gbmV3VGFnKHBhcnNlcikge1xuICAgICAgaWYgKCFwYXJzZXIuc3RyaWN0KSBwYXJzZXIudGFnTmFtZSA9IHBhcnNlci50YWdOYW1lW3BhcnNlci5sb29zZUNhc2VdKCk7XG4gICAgICB2YXIgcGFyZW50ID0gcGFyc2VyLnRhZ3NbcGFyc2VyLnRhZ3MubGVuZ3RoIC0gMV0gfHwgcGFyc2VyO1xuICAgICAgdmFyIHRhZyA9IHBhcnNlci50YWcgPSB7IG5hbWU6IHBhcnNlci50YWdOYW1lLCBhdHRyaWJ1dGVzOiB7fSB9O1xuICAgICAgaWYgKHBhcnNlci5vcHQueG1sbnMpIHtcbiAgICAgICAgdGFnLm5zID0gcGFyZW50Lm5zO1xuICAgICAgfVxuICAgICAgcGFyc2VyLmF0dHJpYkxpc3QubGVuZ3RoID0gMDtcbiAgICAgIGVtaXROb2RlKHBhcnNlciwgXCJvbm9wZW50YWdzdGFydFwiLCB0YWcpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBxbmFtZShuYW1lLCBhdHRyaWJ1dGUyKSB7XG4gICAgICB2YXIgaSA9IG5hbWUuaW5kZXhPZihcIjpcIik7XG4gICAgICB2YXIgcXVhbE5hbWUgPSBpIDwgMCA/IFtcIlwiLCBuYW1lXSA6IG5hbWUuc3BsaXQoXCI6XCIpO1xuICAgICAgdmFyIHByZWZpeCA9IHF1YWxOYW1lWzBdO1xuICAgICAgdmFyIGxvY2FsID0gcXVhbE5hbWVbMV07XG4gICAgICBpZiAoYXR0cmlidXRlMiAmJiBuYW1lID09PSBcInhtbG5zXCIpIHtcbiAgICAgICAgcHJlZml4ID0gXCJ4bWxuc1wiO1xuICAgICAgICBsb2NhbCA9IFwiXCI7XG4gICAgICB9XG4gICAgICByZXR1cm4geyBwcmVmaXgsIGxvY2FsIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0dHJpYihwYXJzZXIpIHtcbiAgICAgIGlmICghcGFyc2VyLnN0cmljdCkge1xuICAgICAgICBwYXJzZXIuYXR0cmliTmFtZSA9IHBhcnNlci5hdHRyaWJOYW1lW3BhcnNlci5sb29zZUNhc2VdKCk7XG4gICAgICB9XG4gICAgICBpZiAocGFyc2VyLmF0dHJpYkxpc3QuaW5kZXhPZihwYXJzZXIuYXR0cmliTmFtZSkgIT09IC0xIHx8IHBhcnNlci50YWcuYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShwYXJzZXIuYXR0cmliTmFtZSkpIHtcbiAgICAgICAgcGFyc2VyLmF0dHJpYk5hbWUgPSBwYXJzZXIuYXR0cmliVmFsdWUgPSBcIlwiO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAocGFyc2VyLm9wdC54bWxucykge1xuICAgICAgICB2YXIgcW4gPSBxbmFtZShwYXJzZXIuYXR0cmliTmFtZSwgdHJ1ZSk7XG4gICAgICAgIHZhciBwcmVmaXggPSBxbi5wcmVmaXg7XG4gICAgICAgIHZhciBsb2NhbCA9IHFuLmxvY2FsO1xuICAgICAgICBpZiAocHJlZml4ID09PSBcInhtbG5zXCIpIHtcbiAgICAgICAgICBpZiAobG9jYWwgPT09IFwieG1sXCIgJiYgcGFyc2VyLmF0dHJpYlZhbHVlICE9PSBYTUxfTkFNRVNQQUNFKSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKFxuICAgICAgICAgICAgICBwYXJzZXIsXG4gICAgICAgICAgICAgIFwieG1sOiBwcmVmaXggbXVzdCBiZSBib3VuZCB0byBcIiArIFhNTF9OQU1FU1BBQ0UgKyBcIlxcbkFjdHVhbDogXCIgKyBwYXJzZXIuYXR0cmliVmFsdWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIGlmIChsb2NhbCA9PT0gXCJ4bWxuc1wiICYmIHBhcnNlci5hdHRyaWJWYWx1ZSAhPT0gWE1MTlNfTkFNRVNQQUNFKSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKFxuICAgICAgICAgICAgICBwYXJzZXIsXG4gICAgICAgICAgICAgIFwieG1sbnM6IHByZWZpeCBtdXN0IGJlIGJvdW5kIHRvIFwiICsgWE1MTlNfTkFNRVNQQUNFICsgXCJcXG5BY3R1YWw6IFwiICsgcGFyc2VyLmF0dHJpYlZhbHVlXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFnID0gcGFyc2VyLnRhZztcbiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBwYXJzZXIudGFnc1twYXJzZXIudGFncy5sZW5ndGggLSAxXSB8fCBwYXJzZXI7XG4gICAgICAgICAgICBpZiAodGFnLm5zID09PSBwYXJlbnQubnMpIHtcbiAgICAgICAgICAgICAgdGFnLm5zID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQubnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGFnLm5zW2xvY2FsXSA9IHBhcnNlci5hdHRyaWJWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcGFyc2VyLmF0dHJpYkxpc3QucHVzaChbcGFyc2VyLmF0dHJpYk5hbWUsIHBhcnNlci5hdHRyaWJWYWx1ZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VyLnRhZy5hdHRyaWJ1dGVzW3BhcnNlci5hdHRyaWJOYW1lXSA9IHBhcnNlci5hdHRyaWJWYWx1ZTtcbiAgICAgICAgZW1pdE5vZGUocGFyc2VyLCBcIm9uYXR0cmlidXRlXCIsIHtcbiAgICAgICAgICBuYW1lOiBwYXJzZXIuYXR0cmliTmFtZSxcbiAgICAgICAgICB2YWx1ZTogcGFyc2VyLmF0dHJpYlZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcGFyc2VyLmF0dHJpYk5hbWUgPSBwYXJzZXIuYXR0cmliVmFsdWUgPSBcIlwiO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvcGVuVGFnKHBhcnNlciwgc2VsZkNsb3NpbmcpIHtcbiAgICAgIGlmIChwYXJzZXIub3B0LnhtbG5zKSB7XG4gICAgICAgIHZhciB0YWcgPSBwYXJzZXIudGFnO1xuICAgICAgICB2YXIgcW4gPSBxbmFtZShwYXJzZXIudGFnTmFtZSk7XG4gICAgICAgIHRhZy5wcmVmaXggPSBxbi5wcmVmaXg7XG4gICAgICAgIHRhZy5sb2NhbCA9IHFuLmxvY2FsO1xuICAgICAgICB0YWcudXJpID0gdGFnLm5zW3FuLnByZWZpeF0gfHwgXCJcIjtcbiAgICAgICAgaWYgKHRhZy5wcmVmaXggJiYgIXRhZy51cmkpIHtcbiAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgXCJVbmJvdW5kIG5hbWVzcGFjZSBwcmVmaXg6IFwiICsgSlNPTi5zdHJpbmdpZnkocGFyc2VyLnRhZ05hbWUpKTtcbiAgICAgICAgICB0YWcudXJpID0gcW4ucHJlZml4O1xuICAgICAgICB9XG4gICAgICAgIHZhciBwYXJlbnQgPSBwYXJzZXIudGFnc1twYXJzZXIudGFncy5sZW5ndGggLSAxXSB8fCBwYXJzZXI7XG4gICAgICAgIGlmICh0YWcubnMgJiYgcGFyZW50Lm5zICE9PSB0YWcubnMpIHtcbiAgICAgICAgICBPYmplY3Qua2V5cyh0YWcubnMpLmZvckVhY2goZnVuY3Rpb24ocCkge1xuICAgICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCBcIm9ub3Blbm5hbWVzcGFjZVwiLCB7XG4gICAgICAgICAgICAgIHByZWZpeDogcCxcbiAgICAgICAgICAgICAgdXJpOiB0YWcubnNbcF1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gcGFyc2VyLmF0dHJpYkxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgdmFyIG52ID0gcGFyc2VyLmF0dHJpYkxpc3RbaV07XG4gICAgICAgICAgdmFyIG5hbWUgPSBudlswXTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBudlsxXTtcbiAgICAgICAgICB2YXIgcXVhbE5hbWUgPSBxbmFtZShuYW1lLCB0cnVlKTtcbiAgICAgICAgICB2YXIgcHJlZml4ID0gcXVhbE5hbWUucHJlZml4O1xuICAgICAgICAgIHZhciBsb2NhbCA9IHF1YWxOYW1lLmxvY2FsO1xuICAgICAgICAgIHZhciB1cmkyID0gcHJlZml4ID09PSBcIlwiID8gXCJcIiA6IHRhZy5uc1twcmVmaXhdIHx8IFwiXCI7XG4gICAgICAgICAgdmFyIGEgPSB7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBwcmVmaXgsXG4gICAgICAgICAgICBsb2NhbCxcbiAgICAgICAgICAgIHVyaTogdXJpMlxuICAgICAgICAgIH07XG4gICAgICAgICAgaWYgKHByZWZpeCAmJiBwcmVmaXggIT09IFwieG1sbnNcIiAmJiAhdXJpMikge1xuICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsIFwiVW5ib3VuZCBuYW1lc3BhY2UgcHJlZml4OiBcIiArIEpTT04uc3RyaW5naWZ5KHByZWZpeCkpO1xuICAgICAgICAgICAgYS51cmkgPSBwcmVmaXg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcnNlci50YWcuYXR0cmlidXRlc1tuYW1lXSA9IGE7XG4gICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCBcIm9uYXR0cmlidXRlXCIsIGEpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnNlci5hdHRyaWJMaXN0Lmxlbmd0aCA9IDA7XG4gICAgICB9XG4gICAgICBwYXJzZXIudGFnLmlzU2VsZkNsb3NpbmcgPSAhIXNlbGZDbG9zaW5nO1xuICAgICAgcGFyc2VyLnNhd1Jvb3QgPSB0cnVlO1xuICAgICAgcGFyc2VyLnRhZ3MucHVzaChwYXJzZXIudGFnKTtcbiAgICAgIGVtaXROb2RlKHBhcnNlciwgXCJvbm9wZW50YWdcIiwgcGFyc2VyLnRhZyk7XG4gICAgICBpZiAoIXNlbGZDbG9zaW5nKSB7XG4gICAgICAgIGlmICghcGFyc2VyLm5vc2NyaXB0ICYmIHBhcnNlci50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwic2NyaXB0XCIpIHtcbiAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlNDUklQVDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFQ7XG4gICAgICAgIH1cbiAgICAgICAgcGFyc2VyLnRhZyA9IG51bGw7XG4gICAgICAgIHBhcnNlci50YWdOYW1lID0gXCJcIjtcbiAgICAgIH1cbiAgICAgIHBhcnNlci5hdHRyaWJOYW1lID0gcGFyc2VyLmF0dHJpYlZhbHVlID0gXCJcIjtcbiAgICAgIHBhcnNlci5hdHRyaWJMaXN0Lmxlbmd0aCA9IDA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNsb3NlVGFnKHBhcnNlcikge1xuICAgICAgaWYgKCFwYXJzZXIudGFnTmFtZSkge1xuICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgXCJXZWlyZCBlbXB0eSBjbG9zZSB0YWcuXCIpO1xuICAgICAgICBwYXJzZXIudGV4dE5vZGUgKz0gXCI8Lz5cIjtcbiAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5URVhUO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAocGFyc2VyLnNjcmlwdCkge1xuICAgICAgICBpZiAocGFyc2VyLnRhZ05hbWUgIT09IFwic2NyaXB0XCIpIHtcbiAgICAgICAgICBwYXJzZXIuc2NyaXB0ICs9IFwiPC9cIiArIHBhcnNlci50YWdOYW1lICsgXCI+XCI7XG4gICAgICAgICAgcGFyc2VyLnRhZ05hbWUgPSBcIlwiO1xuICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuU0NSSVBUO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbWl0Tm9kZShwYXJzZXIsIFwib25zY3JpcHRcIiwgcGFyc2VyLnNjcmlwdCk7XG4gICAgICAgIHBhcnNlci5zY3JpcHQgPSBcIlwiO1xuICAgICAgfVxuICAgICAgdmFyIHQgPSBwYXJzZXIudGFncy5sZW5ndGg7XG4gICAgICB2YXIgdGFnTmFtZSA9IHBhcnNlci50YWdOYW1lO1xuICAgICAgaWYgKCFwYXJzZXIuc3RyaWN0KSB7XG4gICAgICAgIHRhZ05hbWUgPSB0YWdOYW1lW3BhcnNlci5sb29zZUNhc2VdKCk7XG4gICAgICB9XG4gICAgICB2YXIgY2xvc2VUbyA9IHRhZ05hbWU7XG4gICAgICB3aGlsZSAodC0tKSB7XG4gICAgICAgIHZhciBjbG9zZSA9IHBhcnNlci50YWdzW3RdO1xuICAgICAgICBpZiAoY2xvc2UubmFtZSAhPT0gY2xvc2VUbykge1xuICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCBcIlVuZXhwZWN0ZWQgY2xvc2UgdGFnXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodCA8IDApIHtcbiAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsIFwiVW5tYXRjaGVkIGNsb3NpbmcgdGFnOiBcIiArIHBhcnNlci50YWdOYW1lKTtcbiAgICAgICAgcGFyc2VyLnRleHROb2RlICs9IFwiPC9cIiArIHBhcnNlci50YWdOYW1lICsgXCI+XCI7XG4gICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcGFyc2VyLnRhZ05hbWUgPSB0YWdOYW1lO1xuICAgICAgdmFyIHMzID0gcGFyc2VyLnRhZ3MubGVuZ3RoO1xuICAgICAgd2hpbGUgKHMzLS0gPiB0KSB7XG4gICAgICAgIHZhciB0YWcgPSBwYXJzZXIudGFnID0gcGFyc2VyLnRhZ3MucG9wKCk7XG4gICAgICAgIHBhcnNlci50YWdOYW1lID0gcGFyc2VyLnRhZy5uYW1lO1xuICAgICAgICBlbWl0Tm9kZShwYXJzZXIsIFwib25jbG9zZXRhZ1wiLCBwYXJzZXIudGFnTmFtZSk7XG4gICAgICAgIHZhciB4ID0ge307XG4gICAgICAgIGZvciAodmFyIGkgaW4gdGFnLm5zKSB7XG4gICAgICAgICAgeFtpXSA9IHRhZy5uc1tpXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGFyZW50ID0gcGFyc2VyLnRhZ3NbcGFyc2VyLnRhZ3MubGVuZ3RoIC0gMV0gfHwgcGFyc2VyO1xuICAgICAgICBpZiAocGFyc2VyLm9wdC54bWxucyAmJiB0YWcubnMgIT09IHBhcmVudC5ucykge1xuICAgICAgICAgIE9iamVjdC5rZXlzKHRhZy5ucykuZm9yRWFjaChmdW5jdGlvbihwKSB7XG4gICAgICAgICAgICB2YXIgbiA9IHRhZy5uc1twXTtcbiAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgXCJvbmNsb3NlbmFtZXNwYWNlXCIsIHsgcHJlZml4OiBwLCB1cmk6IG4gfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0ID09PSAwKSBwYXJzZXIuY2xvc2VkUm9vdCA9IHRydWU7XG4gICAgICBwYXJzZXIudGFnTmFtZSA9IHBhcnNlci5hdHRyaWJWYWx1ZSA9IHBhcnNlci5hdHRyaWJOYW1lID0gXCJcIjtcbiAgICAgIHBhcnNlci5hdHRyaWJMaXN0Lmxlbmd0aCA9IDA7XG4gICAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnNlRW50aXR5KHBhcnNlcikge1xuICAgICAgdmFyIGVudGl0eSA9IHBhcnNlci5lbnRpdHk7XG4gICAgICB2YXIgZW50aXR5TEMgPSBlbnRpdHkudG9Mb3dlckNhc2UoKTtcbiAgICAgIHZhciBudW07XG4gICAgICB2YXIgbnVtU3RyID0gXCJcIjtcbiAgICAgIGlmIChwYXJzZXIuRU5USVRJRVNbZW50aXR5XSkge1xuICAgICAgICByZXR1cm4gcGFyc2VyLkVOVElUSUVTW2VudGl0eV07XG4gICAgICB9XG4gICAgICBpZiAocGFyc2VyLkVOVElUSUVTW2VudGl0eUxDXSkge1xuICAgICAgICByZXR1cm4gcGFyc2VyLkVOVElUSUVTW2VudGl0eUxDXTtcbiAgICAgIH1cbiAgICAgIGVudGl0eSA9IGVudGl0eUxDO1xuICAgICAgaWYgKGVudGl0eS5jaGFyQXQoMCkgPT09IFwiI1wiKSB7XG4gICAgICAgIGlmIChlbnRpdHkuY2hhckF0KDEpID09PSBcInhcIikge1xuICAgICAgICAgIGVudGl0eSA9IGVudGl0eS5zbGljZSgyKTtcbiAgICAgICAgICBudW0gPSBwYXJzZUludChlbnRpdHksIDE2KTtcbiAgICAgICAgICBudW1TdHIgPSBudW0udG9TdHJpbmcoMTYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVudGl0eSA9IGVudGl0eS5zbGljZSgxKTtcbiAgICAgICAgICBudW0gPSBwYXJzZUludChlbnRpdHksIDEwKTtcbiAgICAgICAgICBudW1TdHIgPSBudW0udG9TdHJpbmcoMTApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbnRpdHkgPSBlbnRpdHkucmVwbGFjZSgvXjArLywgXCJcIik7XG4gICAgICBpZiAoaXNOYU4obnVtKSB8fCBudW1TdHIudG9Mb3dlckNhc2UoKSAhPT0gZW50aXR5KSB7XG4gICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCBcIkludmFsaWQgY2hhcmFjdGVyIGVudGl0eVwiKTtcbiAgICAgICAgcmV0dXJuIFwiJlwiICsgcGFyc2VyLmVudGl0eSArIFwiO1wiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50KG51bSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJlZ2luV2hpdGVTcGFjZShwYXJzZXIsIGMpIHtcbiAgICAgIGlmIChjID09PSBcIjxcIikge1xuICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLk9QRU5fV0FLQTtcbiAgICAgICAgcGFyc2VyLnN0YXJ0VGFnUG9zaXRpb24gPSBwYXJzZXIucG9zaXRpb247XG4gICAgICB9IGVsc2UgaWYgKCFpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsIFwiTm9uLXdoaXRlc3BhY2UgYmVmb3JlIGZpcnN0IHRhZy5cIik7XG4gICAgICAgIHBhcnNlci50ZXh0Tm9kZSA9IGM7XG4gICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVDtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gY2hhckF0KGNodW5rLCBpKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gXCJcIjtcbiAgICAgIGlmIChpIDwgY2h1bmsubGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdCA9IGNodW5rLmNoYXJBdChpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdyaXRlKGNodW5rKSB7XG4gICAgICB2YXIgcGFyc2VyID0gdGhpcztcbiAgICAgIGlmICh0aGlzLmVycm9yKSB7XG4gICAgICAgIHRocm93IHRoaXMuZXJyb3I7XG4gICAgICB9XG4gICAgICBpZiAocGFyc2VyLmNsb3NlZCkge1xuICAgICAgICByZXR1cm4gZXJyb3IoXG4gICAgICAgICAgcGFyc2VyLFxuICAgICAgICAgIFwiQ2Fubm90IHdyaXRlIGFmdGVyIGNsb3NlLiBBc3NpZ24gYW4gb25yZWFkeSBoYW5kbGVyLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGVuZChwYXJzZXIpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBjaHVuayA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBjaHVuayA9IGNodW5rLnRvU3RyaW5nKCk7XG4gICAgICB9XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB2YXIgYyA9IFwiXCI7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBjID0gY2hhckF0KGNodW5rLCBpKyspO1xuICAgICAgICBwYXJzZXIuYyA9IGM7XG4gICAgICAgIGlmICghYykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJzZXIudHJhY2tQb3NpdGlvbikge1xuICAgICAgICAgIHBhcnNlci5wb3NpdGlvbisrO1xuICAgICAgICAgIGlmIChjID09PSBcIlxcblwiKSB7XG4gICAgICAgICAgICBwYXJzZXIubGluZSsrO1xuICAgICAgICAgICAgcGFyc2VyLmNvbHVtbiA9IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5jb2x1bW4rKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChwYXJzZXIuc3RhdGUpIHtcbiAgICAgICAgICBjYXNlIFMuQkVHSU46XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkJFR0lOX1dISVRFU1BBQ0U7XG4gICAgICAgICAgICBpZiAoYyA9PT0gXCJcXHVGRUZGXCIpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBiZWdpbldoaXRlU3BhY2UocGFyc2VyLCBjKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGNhc2UgUy5CRUdJTl9XSElURVNQQUNFOlxuICAgICAgICAgICAgYmVnaW5XaGl0ZVNwYWNlKHBhcnNlciwgYyk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBjYXNlIFMuVEVYVDpcbiAgICAgICAgICAgIGlmIChwYXJzZXIuc2F3Um9vdCAmJiAhcGFyc2VyLmNsb3NlZFJvb3QpIHtcbiAgICAgICAgICAgICAgdmFyIHN0YXJ0aSA9IGkgLSAxO1xuICAgICAgICAgICAgICB3aGlsZSAoYyAmJiBjICE9PSBcIjxcIiAmJiBjICE9PSBcIiZcIikge1xuICAgICAgICAgICAgICAgIGMgPSBjaGFyQXQoY2h1bmssIGkrKyk7XG4gICAgICAgICAgICAgICAgaWYgKGMgJiYgcGFyc2VyLnRyYWNrUG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgIHBhcnNlci5wb3NpdGlvbisrO1xuICAgICAgICAgICAgICAgICAgaWYgKGMgPT09IFwiXFxuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VyLmxpbmUrKztcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VyLmNvbHVtbiA9IDA7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwYXJzZXIuY29sdW1uKys7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHBhcnNlci50ZXh0Tm9kZSArPSBjaHVuay5zdWJzdHJpbmcoc3RhcnRpLCBpIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYyA9PT0gXCI8XCIgJiYgIShwYXJzZXIuc2F3Um9vdCAmJiBwYXJzZXIuY2xvc2VkUm9vdCAmJiAhcGFyc2VyLnN0cmljdCkpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5PUEVOX1dBS0E7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGFydFRhZ1Bvc2l0aW9uID0gcGFyc2VyLnBvc2l0aW9uO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKCFpc1doaXRlc3BhY2UoYykgJiYgKCFwYXJzZXIuc2F3Um9vdCB8fCBwYXJzZXIuY2xvc2VkUm9vdCkpIHtcbiAgICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgXCJUZXh0IGRhdGEgb3V0c2lkZSBvZiByb290IG5vZGUuXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChjID09PSBcIiZcIikge1xuICAgICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVF9FTlRJVFk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyc2VyLnRleHROb2RlICs9IGM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGNhc2UgUy5TQ1JJUFQ6XG4gICAgICAgICAgICBpZiAoYyA9PT0gXCI8XCIpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5TQ1JJUFRfRU5ESU5HO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnNjcmlwdCArPSBjO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSBTLlNDUklQVF9FTkRJTkc6XG4gICAgICAgICAgICBpZiAoYyA9PT0gXCIvXCIpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DTE9TRV9UQUc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYXJzZXIuc2NyaXB0ICs9IFwiPFwiICsgYztcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5TQ1JJUFQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBjYXNlIFMuT1BFTl9XQUtBOlxuICAgICAgICAgICAgaWYgKGMgPT09IFwiIVwiKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuU0dNTF9ERUNMO1xuICAgICAgICAgICAgICBwYXJzZXIuc2dtbERlY2wgPSBcIlwiO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1doaXRlc3BhY2UoYykpIDtcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzTWF0Y2gobmFtZVN0YXJ0LCBjKSkge1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLk9QRU5fVEFHO1xuICAgICAgICAgICAgICBwYXJzZXIudGFnTmFtZSA9IGM7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09IFwiL1wiKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQ0xPU0VfVEFHO1xuICAgICAgICAgICAgICBwYXJzZXIudGFnTmFtZSA9IFwiXCI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09IFwiP1wiKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuUFJPQ19JTlNUO1xuICAgICAgICAgICAgICBwYXJzZXIucHJvY0luc3ROYW1lID0gcGFyc2VyLnByb2NJbnN0Qm9keSA9IFwiXCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgXCJVbmVuY29kZWQgPFwiKTtcbiAgICAgICAgICAgICAgaWYgKHBhcnNlci5zdGFydFRhZ1Bvc2l0aW9uICsgMSA8IHBhcnNlci5wb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciBwYWQyID0gcGFyc2VyLnBvc2l0aW9uIC0gcGFyc2VyLnN0YXJ0VGFnUG9zaXRpb247XG4gICAgICAgICAgICAgICAgYyA9IG5ldyBBcnJheShwYWQyKS5qb2luKFwiIFwiKSArIGM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcGFyc2VyLnRleHROb2RlICs9IFwiPFwiICsgYztcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5URVhUO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSBTLlNHTUxfREVDTDpcbiAgICAgICAgICAgIGlmICgocGFyc2VyLnNnbWxEZWNsICsgYykudG9VcHBlckNhc2UoKSA9PT0gQ0RBVEEpIHtcbiAgICAgICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCBcIm9ub3BlbmNkYXRhXCIpO1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNEQVRBO1xuICAgICAgICAgICAgICBwYXJzZXIuc2dtbERlY2wgPSBcIlwiO1xuICAgICAgICAgICAgICBwYXJzZXIuY2RhdGEgPSBcIlwiO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJzZXIuc2dtbERlY2wgKyBjID09PSBcIi0tXCIpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DT01NRU5UO1xuICAgICAgICAgICAgICBwYXJzZXIuY29tbWVudCA9IFwiXCI7XG4gICAgICAgICAgICAgIHBhcnNlci5zZ21sRGVjbCA9IFwiXCI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKChwYXJzZXIuc2dtbERlY2wgKyBjKS50b1VwcGVyQ2FzZSgpID09PSBET0NUWVBFKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuRE9DVFlQRTtcbiAgICAgICAgICAgICAgaWYgKHBhcnNlci5kb2N0eXBlIHx8IHBhcnNlci5zYXdSb290KSB7XG4gICAgICAgICAgICAgICAgc3RyaWN0RmFpbChcbiAgICAgICAgICAgICAgICAgIHBhcnNlcixcbiAgICAgICAgICAgICAgICAgIFwiSW5hcHByb3ByaWF0ZWx5IGxvY2F0ZWQgZG9jdHlwZSBkZWNsYXJhdGlvblwiXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwYXJzZXIuZG9jdHlwZSA9IFwiXCI7XG4gICAgICAgICAgICAgIHBhcnNlci5zZ21sRGVjbCA9IFwiXCI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgXCJvbnNnbWxkZWNsYXJhdGlvblwiLCBwYXJzZXIuc2dtbERlY2wpO1xuICAgICAgICAgICAgICBwYXJzZXIuc2dtbERlY2wgPSBcIlwiO1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzUXVvdGUoYykpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5TR01MX0RFQ0xfUVVPVEVEO1xuICAgICAgICAgICAgICBwYXJzZXIuc2dtbERlY2wgKz0gYztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zZ21sRGVjbCArPSBjO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSBTLlNHTUxfREVDTF9RVU9URUQ6XG4gICAgICAgICAgICBpZiAoYyA9PT0gcGFyc2VyLnEpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5TR01MX0RFQ0w7XG4gICAgICAgICAgICAgIHBhcnNlci5xID0gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcnNlci5zZ21sRGVjbCArPSBjO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSBTLkRPQ1RZUEU6XG4gICAgICAgICAgICBpZiAoYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5URVhUO1xuICAgICAgICAgICAgICBlbWl0Tm9kZShwYXJzZXIsIFwib25kb2N0eXBlXCIsIHBhcnNlci5kb2N0eXBlKTtcbiAgICAgICAgICAgICAgcGFyc2VyLmRvY3R5cGUgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGFyc2VyLmRvY3R5cGUgKz0gYztcbiAgICAgICAgICAgICAgaWYgKGMgPT09IFwiW1wiKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5ET0NUWVBFX0RURDtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc1F1b3RlKGMpKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5ET0NUWVBFX1FVT1RFRDtcbiAgICAgICAgICAgICAgICBwYXJzZXIucSA9IGM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGNhc2UgUy5ET0NUWVBFX1FVT1RFRDpcbiAgICAgICAgICAgIHBhcnNlci5kb2N0eXBlICs9IGM7XG4gICAgICAgICAgICBpZiAoYyA9PT0gcGFyc2VyLnEpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnEgPSBcIlwiO1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkRPQ1RZUEU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBjYXNlIFMuRE9DVFlQRV9EVEQ6XG4gICAgICAgICAgICBwYXJzZXIuZG9jdHlwZSArPSBjO1xuICAgICAgICAgICAgaWYgKGMgPT09IFwiXVwiKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuRE9DVFlQRTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNRdW90ZShjKSkge1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkRPQ1RZUEVfRFREX1FVT1RFRDtcbiAgICAgICAgICAgICAgcGFyc2VyLnEgPSBjO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSBTLkRPQ1RZUEVfRFREX1FVT1RFRDpcbiAgICAgICAgICAgIHBhcnNlci5kb2N0eXBlICs9IGM7XG4gICAgICAgICAgICBpZiAoYyA9PT0gcGFyc2VyLnEpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5ET0NUWVBFX0RURDtcbiAgICAgICAgICAgICAgcGFyc2VyLnEgPSBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSBTLkNPTU1FTlQ6XG4gICAgICAgICAgICBpZiAoYyA9PT0gXCItXCIpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DT01NRU5UX0VORElORztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhcnNlci5jb21tZW50ICs9IGM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBjYXNlIFMuQ09NTUVOVF9FTkRJTkc6XG4gICAgICAgICAgICBpZiAoYyA9PT0gXCItXCIpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DT01NRU5UX0VOREVEO1xuICAgICAgICAgICAgICBwYXJzZXIuY29tbWVudCA9IHRleHRvcHRzKHBhcnNlci5vcHQsIHBhcnNlci5jb21tZW50KTtcbiAgICAgICAgICAgICAgaWYgKHBhcnNlci5jb21tZW50KSB7XG4gICAgICAgICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCBcIm9uY29tbWVudFwiLCBwYXJzZXIuY29tbWVudCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcGFyc2VyLmNvbW1lbnQgPSBcIlwiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGFyc2VyLmNvbW1lbnQgKz0gXCItXCIgKyBjO1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNPTU1FTlQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBjYXNlIFMuQ09NTUVOVF9FTkRFRDpcbiAgICAgICAgICAgIGlmIChjICE9PSBcIj5cIikge1xuICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgXCJNYWxmb3JtZWQgY29tbWVudFwiKTtcbiAgICAgICAgICAgICAgcGFyc2VyLmNvbW1lbnQgKz0gXCItLVwiICsgYztcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DT01NRU5UO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5URVhUO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSBTLkNEQVRBOlxuICAgICAgICAgICAgaWYgKGMgPT09IFwiXVwiKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQ0RBVEFfRU5ESU5HO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGFyc2VyLmNkYXRhICs9IGM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBjYXNlIFMuQ0RBVEFfRU5ESU5HOlxuICAgICAgICAgICAgaWYgKGMgPT09IFwiXVwiKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQ0RBVEFfRU5ESU5HXzI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYXJzZXIuY2RhdGEgKz0gXCJdXCIgKyBjO1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNEQVRBO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSBTLkNEQVRBX0VORElOR18yOlxuICAgICAgICAgICAgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgICAgICAgIGlmIChwYXJzZXIuY2RhdGEpIHtcbiAgICAgICAgICAgICAgICBlbWl0Tm9kZShwYXJzZXIsIFwib25jZGF0YVwiLCBwYXJzZXIuY2RhdGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgXCJvbmNsb3NlY2RhdGFcIik7XG4gICAgICAgICAgICAgIHBhcnNlci5jZGF0YSA9IFwiXCI7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gXCJdXCIpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLmNkYXRhICs9IFwiXVwiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGFyc2VyLmNkYXRhICs9IFwiXV1cIiArIGM7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQ0RBVEE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBjYXNlIFMuUFJPQ19JTlNUOlxuICAgICAgICAgICAgaWYgKGMgPT09IFwiP1wiKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuUFJPQ19JTlNUX0VORElORztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuUFJPQ19JTlNUX0JPRFk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYXJzZXIucHJvY0luc3ROYW1lICs9IGM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBjYXNlIFMuUFJPQ19JTlNUX0JPRFk6XG4gICAgICAgICAgICBpZiAoIXBhcnNlci5wcm9jSW5zdEJvZHkgJiYgaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjID09PSBcIj9cIikge1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlBST0NfSU5TVF9FTkRJTkc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYXJzZXIucHJvY0luc3RCb2R5ICs9IGM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBjYXNlIFMuUFJPQ19JTlNUX0VORElORzpcbiAgICAgICAgICAgIGlmIChjID09PSBcIj5cIikge1xuICAgICAgICAgICAgICBlbWl0Tm9kZShwYXJzZXIsIFwib25wcm9jZXNzaW5naW5zdHJ1Y3Rpb25cIiwge1xuICAgICAgICAgICAgICAgIG5hbWU6IHBhcnNlci5wcm9jSW5zdE5hbWUsXG4gICAgICAgICAgICAgICAgYm9keTogcGFyc2VyLnByb2NJbnN0Qm9keVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcGFyc2VyLnByb2NJbnN0TmFtZSA9IHBhcnNlci5wcm9jSW5zdEJvZHkgPSBcIlwiO1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYXJzZXIucHJvY0luc3RCb2R5ICs9IFwiP1wiICsgYztcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5QUk9DX0lOU1RfQk9EWTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGNhc2UgUy5PUEVOX1RBRzpcbiAgICAgICAgICAgIGlmIChpc01hdGNoKG5hbWVCb2R5LCBjKSkge1xuICAgICAgICAgICAgICBwYXJzZXIudGFnTmFtZSArPSBjO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbmV3VGFnKHBhcnNlcik7XG4gICAgICAgICAgICAgIGlmIChjID09PSBcIj5cIikge1xuICAgICAgICAgICAgICAgIG9wZW5UYWcocGFyc2VyKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChjID09PSBcIi9cIikge1xuICAgICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuT1BFTl9UQUdfU0xBU0g7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCBcIkludmFsaWQgY2hhcmFjdGVyIGluIHRhZyBuYW1lXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSBTLk9QRU5fVEFHX1NMQVNIOlxuICAgICAgICAgICAgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgICAgICAgIG9wZW5UYWcocGFyc2VyLCB0cnVlKTtcbiAgICAgICAgICAgICAgY2xvc2VUYWcocGFyc2VyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCBcIkZvcndhcmQtc2xhc2ggaW4gb3BlbmluZyB0YWcgbm90IGZvbGxvd2VkIGJ5ID5cIik7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSBTLkFUVFJJQjpcbiAgICAgICAgICAgIGlmIChpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgICAgICAgIG9wZW5UYWcocGFyc2VyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gXCIvXCIpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5PUEVOX1RBR19TTEFTSDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNNYXRjaChuYW1lU3RhcnQsIGMpKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5hdHRyaWJOYW1lID0gYztcbiAgICAgICAgICAgICAgcGFyc2VyLmF0dHJpYlZhbHVlID0gXCJcIjtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfTkFNRTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCBcIkludmFsaWQgYXR0cmlidXRlIG5hbWVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBjYXNlIFMuQVRUUklCX05BTUU6XG4gICAgICAgICAgICBpZiAoYyA9PT0gXCI9XCIpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfVkFMVUU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCBcIkF0dHJpYnV0ZSB3aXRob3V0IHZhbHVlXCIpO1xuICAgICAgICAgICAgICBwYXJzZXIuYXR0cmliVmFsdWUgPSBwYXJzZXIuYXR0cmliTmFtZTtcbiAgICAgICAgICAgICAgYXR0cmliKHBhcnNlcik7XG4gICAgICAgICAgICAgIG9wZW5UYWcocGFyc2VyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCX05BTUVfU0FXX1dISVRFO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc01hdGNoKG5hbWVCb2R5LCBjKSkge1xuICAgICAgICAgICAgICBwYXJzZXIuYXR0cmliTmFtZSArPSBjO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsIFwiSW52YWxpZCBhdHRyaWJ1dGUgbmFtZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGNhc2UgUy5BVFRSSUJfTkFNRV9TQVdfV0hJVEU6XG4gICAgICAgICAgICBpZiAoYyA9PT0gXCI9XCIpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfVkFMVUU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCBcIkF0dHJpYnV0ZSB3aXRob3V0IHZhbHVlXCIpO1xuICAgICAgICAgICAgICBwYXJzZXIudGFnLmF0dHJpYnV0ZXNbcGFyc2VyLmF0dHJpYk5hbWVdID0gXCJcIjtcbiAgICAgICAgICAgICAgcGFyc2VyLmF0dHJpYlZhbHVlID0gXCJcIjtcbiAgICAgICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCBcIm9uYXR0cmlidXRlXCIsIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBwYXJzZXIuYXR0cmliTmFtZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogXCJcIlxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcGFyc2VyLmF0dHJpYk5hbWUgPSBcIlwiO1xuICAgICAgICAgICAgICBpZiAoYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgICAgICAgICBvcGVuVGFnKHBhcnNlcik7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNNYXRjaChuYW1lU3RhcnQsIGMpKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VyLmF0dHJpYk5hbWUgPSBjO1xuICAgICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCX05BTUU7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsIFwiSW52YWxpZCBhdHRyaWJ1dGUgbmFtZVwiKTtcbiAgICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSBTLkFUVFJJQl9WQUxVRTpcbiAgICAgICAgICAgIGlmIChpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzUXVvdGUoYykpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnEgPSBjO1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQl9WQUxVRV9RVU9URUQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgXCJVbnF1b3RlZCBhdHRyaWJ1dGUgdmFsdWVcIik7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCX1ZBTFVFX1VOUVVPVEVEO1xuICAgICAgICAgICAgICBwYXJzZXIuYXR0cmliVmFsdWUgPSBjO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSBTLkFUVFJJQl9WQUxVRV9RVU9URUQ6XG4gICAgICAgICAgICBpZiAoYyAhPT0gcGFyc2VyLnEpIHtcbiAgICAgICAgICAgICAgaWYgKGMgPT09IFwiJlwiKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfVkFMVUVfRU5USVRZX1E7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyc2VyLmF0dHJpYlZhbHVlICs9IGM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhdHRyaWIocGFyc2VyKTtcbiAgICAgICAgICAgIHBhcnNlci5xID0gXCJcIjtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCX1ZBTFVFX0NMT1NFRDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGNhc2UgUy5BVFRSSUJfVkFMVUVfQ0xPU0VEOlxuICAgICAgICAgICAgaWYgKGlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgICAgICAgb3BlblRhZyhwYXJzZXIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjID09PSBcIi9cIikge1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLk9QRU5fVEFHX1NMQVNIO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc01hdGNoKG5hbWVTdGFydCwgYykpIHtcbiAgICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsIFwiTm8gd2hpdGVzcGFjZSBiZXR3ZWVuIGF0dHJpYnV0ZXNcIik7XG4gICAgICAgICAgICAgIHBhcnNlci5hdHRyaWJOYW1lID0gYztcbiAgICAgICAgICAgICAgcGFyc2VyLmF0dHJpYlZhbHVlID0gXCJcIjtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfTkFNRTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCBcIkludmFsaWQgYXR0cmlidXRlIG5hbWVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBjYXNlIFMuQVRUUklCX1ZBTFVFX1VOUVVPVEVEOlxuICAgICAgICAgICAgaWYgKCFpc0F0dHJpYkVuZChjKSkge1xuICAgICAgICAgICAgICBpZiAoYyA9PT0gXCImXCIpIHtcbiAgICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQl9WQUxVRV9FTlRJVFlfVTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJzZXIuYXR0cmliVmFsdWUgKz0gYztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF0dHJpYihwYXJzZXIpO1xuICAgICAgICAgICAgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgICAgICAgIG9wZW5UYWcocGFyc2VyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSBTLkNMT1NFX1RBRzpcbiAgICAgICAgICAgIGlmICghcGFyc2VyLnRhZ05hbWUpIHtcbiAgICAgICAgICAgICAgaWYgKGlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vdE1hdGNoKG5hbWVTdGFydCwgYykpIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VyLnNjcmlwdCkge1xuICAgICAgICAgICAgICAgICAgcGFyc2VyLnNjcmlwdCArPSBcIjwvXCIgKyBjO1xuICAgICAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5TQ1JJUFQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCBcIkludmFsaWQgdGFnbmFtZSBpbiBjbG9zaW5nIHRhZy5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcnNlci50YWdOYW1lID0gYztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChjID09PSBcIj5cIikge1xuICAgICAgICAgICAgICBjbG9zZVRhZyhwYXJzZXIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc01hdGNoKG5hbWVCb2R5LCBjKSkge1xuICAgICAgICAgICAgICBwYXJzZXIudGFnTmFtZSArPSBjO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJzZXIuc2NyaXB0KSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zY3JpcHQgKz0gXCI8L1wiICsgcGFyc2VyLnRhZ05hbWU7XG4gICAgICAgICAgICAgIHBhcnNlci50YWdOYW1lID0gXCJcIjtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5TQ1JJUFQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoIWlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCBcIkludmFsaWQgdGFnbmFtZSBpbiBjbG9zaW5nIHRhZ1wiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNMT1NFX1RBR19TQVdfV0hJVEU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBjYXNlIFMuQ0xPU0VfVEFHX1NBV19XSElURTpcbiAgICAgICAgICAgIGlmIChpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgICAgICAgY2xvc2VUYWcocGFyc2VyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCBcIkludmFsaWQgY2hhcmFjdGVycyBpbiBjbG9zaW5nIHRhZ1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGNhc2UgUy5URVhUX0VOVElUWTpcbiAgICAgICAgICBjYXNlIFMuQVRUUklCX1ZBTFVFX0VOVElUWV9ROlxuICAgICAgICAgIGNhc2UgUy5BVFRSSUJfVkFMVUVfRU5USVRZX1U6XG4gICAgICAgICAgICB2YXIgcmV0dXJuU3RhdGU7XG4gICAgICAgICAgICB2YXIgYnVmZmVyMjtcbiAgICAgICAgICAgIHN3aXRjaCAocGFyc2VyLnN0YXRlKSB7XG4gICAgICAgICAgICAgIGNhc2UgUy5URVhUX0VOVElUWTpcbiAgICAgICAgICAgICAgICByZXR1cm5TdGF0ZSA9IFMuVEVYVDtcbiAgICAgICAgICAgICAgICBidWZmZXIyID0gXCJ0ZXh0Tm9kZVwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFMuQVRUUklCX1ZBTFVFX0VOVElUWV9ROlxuICAgICAgICAgICAgICAgIHJldHVyblN0YXRlID0gUy5BVFRSSUJfVkFMVUVfUVVPVEVEO1xuICAgICAgICAgICAgICAgIGJ1ZmZlcjIgPSBcImF0dHJpYlZhbHVlXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgUy5BVFRSSUJfVkFMVUVfRU5USVRZX1U6XG4gICAgICAgICAgICAgICAgcmV0dXJuU3RhdGUgPSBTLkFUVFJJQl9WQUxVRV9VTlFVT1RFRDtcbiAgICAgICAgICAgICAgICBidWZmZXIyID0gXCJhdHRyaWJWYWx1ZVwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGMgPT09IFwiO1wiKSB7XG4gICAgICAgICAgICAgIHBhcnNlcltidWZmZXIyXSArPSBwYXJzZUVudGl0eShwYXJzZXIpO1xuICAgICAgICAgICAgICBwYXJzZXIuZW50aXR5ID0gXCJcIjtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gcmV0dXJuU3RhdGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzTWF0Y2gocGFyc2VyLmVudGl0eS5sZW5ndGggPyBlbnRpdHlCb2R5IDogZW50aXR5U3RhcnQsIGMpKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5lbnRpdHkgKz0gYztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCBcIkludmFsaWQgY2hhcmFjdGVyIGluIGVudGl0eSBuYW1lXCIpO1xuICAgICAgICAgICAgICBwYXJzZXJbYnVmZmVyMl0gKz0gXCImXCIgKyBwYXJzZXIuZW50aXR5ICsgYztcbiAgICAgICAgICAgICAgcGFyc2VyLmVudGl0eSA9IFwiXCI7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IHJldHVyblN0YXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihwYXJzZXIsIFwiVW5rbm93biBzdGF0ZTogXCIgKyBwYXJzZXIuc3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGFyc2VyLnBvc2l0aW9uID49IHBhcnNlci5idWZmZXJDaGVja1Bvc2l0aW9uKSB7XG4gICAgICAgIGNoZWNrQnVmZmVyTGVuZ3RoKHBhcnNlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyc2VyO1xuICAgIH1cbiAgICAvKiEgaHR0cDovL210aHMuYmUvZnJvbWNvZGVwb2ludCB2MC4xLjAgYnkgQG1hdGhpYXMgKi9cbiAgICBpZiAoIVN0cmluZy5mcm9tQ29kZVBvaW50KSB7XG4gICAgICAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuICAgICAgICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuICAgICAgICB2YXIgZnJvbUNvZGVQb2ludCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBNQVhfU0laRSA9IDE2Mzg0O1xuICAgICAgICAgIHZhciBjb2RlVW5pdHMgPSBbXTtcbiAgICAgICAgICB2YXIgaGlnaFN1cnJvZ2F0ZTtcbiAgICAgICAgICB2YXIgbG93U3Vycm9nYXRlO1xuICAgICAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IFwiXCI7XG4gICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBjb2RlUG9pbnQgPSBOdW1iZXIoYXJndW1lbnRzW2luZGV4XSk7XG4gICAgICAgICAgICBpZiAoIWlzRmluaXRlKGNvZGVQb2ludCkgfHwgLy8gYE5hTmAsIGArSW5maW5pdHlgLCBvciBgLUluZmluaXR5YFxuICAgICAgICAgICAgY29kZVBvaW50IDwgMCB8fCAvLyBub3QgYSB2YWxpZCBVbmljb2RlIGNvZGUgcG9pbnRcbiAgICAgICAgICAgIGNvZGVQb2ludCA+IDExMTQxMTEgfHwgLy8gbm90IGEgdmFsaWQgVW5pY29kZSBjb2RlIHBvaW50XG4gICAgICAgICAgICBmbG9vcihjb2RlUG9pbnQpICE9PSBjb2RlUG9pbnQpIHtcbiAgICAgICAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIkludmFsaWQgY29kZSBwb2ludDogXCIgKyBjb2RlUG9pbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvZGVQb2ludCA8PSA2NTUzNSkge1xuICAgICAgICAgICAgICBjb2RlVW5pdHMucHVzaChjb2RlUG9pbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50IC09IDY1NTM2O1xuICAgICAgICAgICAgICBoaWdoU3Vycm9nYXRlID0gKGNvZGVQb2ludCA+PiAxMCkgKyA1NTI5NjtcbiAgICAgICAgICAgICAgbG93U3Vycm9nYXRlID0gY29kZVBvaW50ICUgMTAyNCArIDU2MzIwO1xuICAgICAgICAgICAgICBjb2RlVW5pdHMucHVzaChoaWdoU3Vycm9nYXRlLCBsb3dTdXJyb2dhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluZGV4ICsgMSA9PT0gbGVuZ3RoIHx8IGNvZGVVbml0cy5sZW5ndGggPiBNQVhfU0laRSkge1xuICAgICAgICAgICAgICByZXN1bHQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNvZGVVbml0cyk7XG4gICAgICAgICAgICAgIGNvZGVVbml0cy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0cmluZywgXCJmcm9tQ29kZVBvaW50XCIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBmcm9tQ29kZVBvaW50LFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBTdHJpbmcuZnJvbUNvZGVQb2ludCA9IGZyb21Db2RlUG9pbnQ7XG4gICAgICAgIH1cbiAgICAgIH0pKCk7XG4gICAgfVxuICB9KShleHBvcnRzKTtcbn0pKHNheCQxKTtcbnZhciBhcnJheUhlbHBlciA9IHtcbiAgaXNBcnJheTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSkge1xuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gXCJbb2JqZWN0IEFycmF5XVwiO1xuICB9XG59O1xudmFyIGlzQXJyYXkkMiA9IGFycmF5SGVscGVyLmlzQXJyYXk7XG52YXIgb3B0aW9uc0hlbHBlciA9IHtcbiAgY29weU9wdGlvbnM6IGZ1bmN0aW9uKG9wdGlvbnMyKSB7XG4gICAgdmFyIGtleSwgY29weSA9IHt9O1xuICAgIGZvciAoa2V5IGluIG9wdGlvbnMyKSB7XG4gICAgICBpZiAob3B0aW9uczIuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBjb3B5W2tleV0gPSBvcHRpb25zMltrZXldO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29weTtcbiAgfSxcbiAgZW5zdXJlRmxhZ0V4aXN0czogZnVuY3Rpb24oaXRlbSwgb3B0aW9uczIpIHtcbiAgICBpZiAoIShpdGVtIGluIG9wdGlvbnMyKSB8fCB0eXBlb2Ygb3B0aW9uczJbaXRlbV0gIT09IFwiYm9vbGVhblwiKSB7XG4gICAgICBvcHRpb25zMltpdGVtXSA9IGZhbHNlO1xuICAgIH1cbiAgfSxcbiAgZW5zdXJlU3BhY2VzRXhpc3RzOiBmdW5jdGlvbihvcHRpb25zMikge1xuICAgIGlmICghKFwic3BhY2VzXCIgaW4gb3B0aW9uczIpIHx8IHR5cGVvZiBvcHRpb25zMi5zcGFjZXMgIT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIG9wdGlvbnMyLnNwYWNlcyAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgb3B0aW9uczIuc3BhY2VzID0gMDtcbiAgICB9XG4gIH0sXG4gIGVuc3VyZUFsd2F5c0FycmF5RXhpc3RzOiBmdW5jdGlvbihvcHRpb25zMikge1xuICAgIGlmICghKFwiYWx3YXlzQXJyYXlcIiBpbiBvcHRpb25zMikgfHwgdHlwZW9mIG9wdGlvbnMyLmFsd2F5c0FycmF5ICE9PSBcImJvb2xlYW5cIiAmJiAhaXNBcnJheSQyKG9wdGlvbnMyLmFsd2F5c0FycmF5KSkge1xuICAgICAgb3B0aW9uczIuYWx3YXlzQXJyYXkgPSBmYWxzZTtcbiAgICB9XG4gIH0sXG4gIGVuc3VyZUtleUV4aXN0czogZnVuY3Rpb24oa2V5LCBvcHRpb25zMikge1xuICAgIGlmICghKGtleSArIFwiS2V5XCIgaW4gb3B0aW9uczIpIHx8IHR5cGVvZiBvcHRpb25zMltrZXkgKyBcIktleVwiXSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgb3B0aW9uczJba2V5ICsgXCJLZXlcIl0gPSBvcHRpb25zMi5jb21wYWN0ID8gXCJfXCIgKyBrZXkgOiBrZXk7XG4gICAgfVxuICB9LFxuICBjaGVja0ZuRXhpc3RzOiBmdW5jdGlvbihrZXksIG9wdGlvbnMyKSB7XG4gICAgcmV0dXJuIGtleSArIFwiRm5cIiBpbiBvcHRpb25zMjtcbiAgfVxufTtcbnZhciBzYXggPSBzYXgkMTtcbnZhciBoZWxwZXIkMiA9IG9wdGlvbnNIZWxwZXI7XG52YXIgaXNBcnJheSQxID0gYXJyYXlIZWxwZXIuaXNBcnJheTtcbnZhciBvcHRpb25zO1xudmFyIGN1cnJlbnRFbGVtZW50JDE7XG5mdW5jdGlvbiB2YWxpZGF0ZU9wdGlvbnMkMih1c2VyT3B0aW9ucykge1xuICBvcHRpb25zID0gaGVscGVyJDIuY29weU9wdGlvbnModXNlck9wdGlvbnMpO1xuICBoZWxwZXIkMi5lbnN1cmVGbGFnRXhpc3RzKFwiaWdub3JlRGVjbGFyYXRpb25cIiwgb3B0aW9ucyk7XG4gIGhlbHBlciQyLmVuc3VyZUZsYWdFeGlzdHMoXCJpZ25vcmVJbnN0cnVjdGlvblwiLCBvcHRpb25zKTtcbiAgaGVscGVyJDIuZW5zdXJlRmxhZ0V4aXN0cyhcImlnbm9yZUF0dHJpYnV0ZXNcIiwgb3B0aW9ucyk7XG4gIGhlbHBlciQyLmVuc3VyZUZsYWdFeGlzdHMoXCJpZ25vcmVUZXh0XCIsIG9wdGlvbnMpO1xuICBoZWxwZXIkMi5lbnN1cmVGbGFnRXhpc3RzKFwiaWdub3JlQ29tbWVudFwiLCBvcHRpb25zKTtcbiAgaGVscGVyJDIuZW5zdXJlRmxhZ0V4aXN0cyhcImlnbm9yZUNkYXRhXCIsIG9wdGlvbnMpO1xuICBoZWxwZXIkMi5lbnN1cmVGbGFnRXhpc3RzKFwiaWdub3JlRG9jdHlwZVwiLCBvcHRpb25zKTtcbiAgaGVscGVyJDIuZW5zdXJlRmxhZ0V4aXN0cyhcImNvbXBhY3RcIiwgb3B0aW9ucyk7XG4gIGhlbHBlciQyLmVuc3VyZUZsYWdFeGlzdHMoXCJhbHdheXNDaGlsZHJlblwiLCBvcHRpb25zKTtcbiAgaGVscGVyJDIuZW5zdXJlRmxhZ0V4aXN0cyhcImFkZFBhcmVudFwiLCBvcHRpb25zKTtcbiAgaGVscGVyJDIuZW5zdXJlRmxhZ0V4aXN0cyhcInRyaW1cIiwgb3B0aW9ucyk7XG4gIGhlbHBlciQyLmVuc3VyZUZsYWdFeGlzdHMoXCJuYXRpdmVUeXBlXCIsIG9wdGlvbnMpO1xuICBoZWxwZXIkMi5lbnN1cmVGbGFnRXhpc3RzKFwibmF0aXZlVHlwZUF0dHJpYnV0ZXNcIiwgb3B0aW9ucyk7XG4gIGhlbHBlciQyLmVuc3VyZUZsYWdFeGlzdHMoXCJzYW5pdGl6ZVwiLCBvcHRpb25zKTtcbiAgaGVscGVyJDIuZW5zdXJlRmxhZ0V4aXN0cyhcImluc3RydWN0aW9uSGFzQXR0cmlidXRlc1wiLCBvcHRpb25zKTtcbiAgaGVscGVyJDIuZW5zdXJlRmxhZ0V4aXN0cyhcImNhcHR1cmVTcGFjZXNCZXR3ZWVuRWxlbWVudHNcIiwgb3B0aW9ucyk7XG4gIGhlbHBlciQyLmVuc3VyZUFsd2F5c0FycmF5RXhpc3RzKG9wdGlvbnMpO1xuICBoZWxwZXIkMi5lbnN1cmVLZXlFeGlzdHMoXCJkZWNsYXJhdGlvblwiLCBvcHRpb25zKTtcbiAgaGVscGVyJDIuZW5zdXJlS2V5RXhpc3RzKFwiaW5zdHJ1Y3Rpb25cIiwgb3B0aW9ucyk7XG4gIGhlbHBlciQyLmVuc3VyZUtleUV4aXN0cyhcImF0dHJpYnV0ZXNcIiwgb3B0aW9ucyk7XG4gIGhlbHBlciQyLmVuc3VyZUtleUV4aXN0cyhcInRleHRcIiwgb3B0aW9ucyk7XG4gIGhlbHBlciQyLmVuc3VyZUtleUV4aXN0cyhcImNvbW1lbnRcIiwgb3B0aW9ucyk7XG4gIGhlbHBlciQyLmVuc3VyZUtleUV4aXN0cyhcImNkYXRhXCIsIG9wdGlvbnMpO1xuICBoZWxwZXIkMi5lbnN1cmVLZXlFeGlzdHMoXCJkb2N0eXBlXCIsIG9wdGlvbnMpO1xuICBoZWxwZXIkMi5lbnN1cmVLZXlFeGlzdHMoXCJ0eXBlXCIsIG9wdGlvbnMpO1xuICBoZWxwZXIkMi5lbnN1cmVLZXlFeGlzdHMoXCJuYW1lXCIsIG9wdGlvbnMpO1xuICBoZWxwZXIkMi5lbnN1cmVLZXlFeGlzdHMoXCJlbGVtZW50c1wiLCBvcHRpb25zKTtcbiAgaGVscGVyJDIuZW5zdXJlS2V5RXhpc3RzKFwicGFyZW50XCIsIG9wdGlvbnMpO1xuICBoZWxwZXIkMi5jaGVja0ZuRXhpc3RzKFwiZG9jdHlwZVwiLCBvcHRpb25zKTtcbiAgaGVscGVyJDIuY2hlY2tGbkV4aXN0cyhcImluc3RydWN0aW9uXCIsIG9wdGlvbnMpO1xuICBoZWxwZXIkMi5jaGVja0ZuRXhpc3RzKFwiY2RhdGFcIiwgb3B0aW9ucyk7XG4gIGhlbHBlciQyLmNoZWNrRm5FeGlzdHMoXCJjb21tZW50XCIsIG9wdGlvbnMpO1xuICBoZWxwZXIkMi5jaGVja0ZuRXhpc3RzKFwidGV4dFwiLCBvcHRpb25zKTtcbiAgaGVscGVyJDIuY2hlY2tGbkV4aXN0cyhcImluc3RydWN0aW9uTmFtZVwiLCBvcHRpb25zKTtcbiAgaGVscGVyJDIuY2hlY2tGbkV4aXN0cyhcImVsZW1lbnROYW1lXCIsIG9wdGlvbnMpO1xuICBoZWxwZXIkMi5jaGVja0ZuRXhpc3RzKFwiYXR0cmlidXRlTmFtZVwiLCBvcHRpb25zKTtcbiAgaGVscGVyJDIuY2hlY2tGbkV4aXN0cyhcImF0dHJpYnV0ZVZhbHVlXCIsIG9wdGlvbnMpO1xuICBoZWxwZXIkMi5jaGVja0ZuRXhpc3RzKFwiYXR0cmlidXRlc1wiLCBvcHRpb25zKTtcbiAgcmV0dXJuIG9wdGlvbnM7XG59XG5mdW5jdGlvbiBuYXRpdmVUeXBlKHZhbHVlKSB7XG4gIHZhciBuVmFsdWUgPSBOdW1iZXIodmFsdWUpO1xuICBpZiAoIWlzTmFOKG5WYWx1ZSkpIHtcbiAgICByZXR1cm4gblZhbHVlO1xuICB9XG4gIHZhciBiVmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICBpZiAoYlZhbHVlID09PSBcInRydWVcIikge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGJWYWx1ZSA9PT0gXCJmYWxzZVwiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGFkZEZpZWxkKHR5cGUyLCB2YWx1ZSkge1xuICB2YXIga2V5O1xuICBpZiAob3B0aW9ucy5jb21wYWN0KSB7XG4gICAgaWYgKCFjdXJyZW50RWxlbWVudCQxW29wdGlvbnNbdHlwZTIgKyBcIktleVwiXV0gJiYgKGlzQXJyYXkkMShvcHRpb25zLmFsd2F5c0FycmF5KSA/IG9wdGlvbnMuYWx3YXlzQXJyYXkuaW5kZXhPZihvcHRpb25zW3R5cGUyICsgXCJLZXlcIl0pICE9PSAtMSA6IG9wdGlvbnMuYWx3YXlzQXJyYXkpKSB7XG4gICAgICBjdXJyZW50RWxlbWVudCQxW29wdGlvbnNbdHlwZTIgKyBcIktleVwiXV0gPSBbXTtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnRFbGVtZW50JDFbb3B0aW9uc1t0eXBlMiArIFwiS2V5XCJdXSAmJiAhaXNBcnJheSQxKGN1cnJlbnRFbGVtZW50JDFbb3B0aW9uc1t0eXBlMiArIFwiS2V5XCJdXSkpIHtcbiAgICAgIGN1cnJlbnRFbGVtZW50JDFbb3B0aW9uc1t0eXBlMiArIFwiS2V5XCJdXSA9IFtjdXJyZW50RWxlbWVudCQxW29wdGlvbnNbdHlwZTIgKyBcIktleVwiXV1dO1xuICAgIH1cbiAgICBpZiAodHlwZTIgKyBcIkZuXCIgaW4gb3B0aW9ucyAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHZhbHVlID0gb3B0aW9uc1t0eXBlMiArIFwiRm5cIl0odmFsdWUsIGN1cnJlbnRFbGVtZW50JDEpO1xuICAgIH1cbiAgICBpZiAodHlwZTIgPT09IFwiaW5zdHJ1Y3Rpb25cIiAmJiAoXCJpbnN0cnVjdGlvbkZuXCIgaW4gb3B0aW9ucyB8fCBcImluc3RydWN0aW9uTmFtZUZuXCIgaW4gb3B0aW9ucykpIHtcbiAgICAgIGZvciAoa2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgaWYgKFwiaW5zdHJ1Y3Rpb25GblwiIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHZhbHVlW2tleV0gPSBvcHRpb25zLmluc3RydWN0aW9uRm4odmFsdWVba2V5XSwga2V5LCBjdXJyZW50RWxlbWVudCQxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRlbXAgPSB2YWx1ZVtrZXldO1xuICAgICAgICAgICAgZGVsZXRlIHZhbHVlW2tleV07XG4gICAgICAgICAgICB2YWx1ZVtvcHRpb25zLmluc3RydWN0aW9uTmFtZUZuKGtleSwgdGVtcCwgY3VycmVudEVsZW1lbnQkMSldID0gdGVtcDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzQXJyYXkkMShjdXJyZW50RWxlbWVudCQxW29wdGlvbnNbdHlwZTIgKyBcIktleVwiXV0pKSB7XG4gICAgICBjdXJyZW50RWxlbWVudCQxW29wdGlvbnNbdHlwZTIgKyBcIktleVwiXV0ucHVzaCh2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnRFbGVtZW50JDFbb3B0aW9uc1t0eXBlMiArIFwiS2V5XCJdXSA9IHZhbHVlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoIWN1cnJlbnRFbGVtZW50JDFbb3B0aW9ucy5lbGVtZW50c0tleV0pIHtcbiAgICAgIGN1cnJlbnRFbGVtZW50JDFbb3B0aW9ucy5lbGVtZW50c0tleV0gPSBbXTtcbiAgICB9XG4gICAgdmFyIGVsZW1lbnQyID0ge307XG4gICAgZWxlbWVudDJbb3B0aW9ucy50eXBlS2V5XSA9IHR5cGUyO1xuICAgIGlmICh0eXBlMiA9PT0gXCJpbnN0cnVjdGlvblwiKSB7XG4gICAgICBmb3IgKGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbGVtZW50MltvcHRpb25zLm5hbWVLZXldID0gXCJpbnN0cnVjdGlvbk5hbWVGblwiIGluIG9wdGlvbnMgPyBvcHRpb25zLmluc3RydWN0aW9uTmFtZUZuKGtleSwgdmFsdWUsIGN1cnJlbnRFbGVtZW50JDEpIDoga2V5O1xuICAgICAgaWYgKG9wdGlvbnMuaW5zdHJ1Y3Rpb25IYXNBdHRyaWJ1dGVzKSB7XG4gICAgICAgIGVsZW1lbnQyW29wdGlvbnMuYXR0cmlidXRlc0tleV0gPSB2YWx1ZVtrZXldW29wdGlvbnMuYXR0cmlidXRlc0tleV07XG4gICAgICAgIGlmIChcImluc3RydWN0aW9uRm5cIiBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgZWxlbWVudDJbb3B0aW9ucy5hdHRyaWJ1dGVzS2V5XSA9IG9wdGlvbnMuaW5zdHJ1Y3Rpb25GbihlbGVtZW50MltvcHRpb25zLmF0dHJpYnV0ZXNLZXldLCBrZXksIGN1cnJlbnRFbGVtZW50JDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoXCJpbnN0cnVjdGlvbkZuXCIgaW4gb3B0aW9ucykge1xuICAgICAgICAgIHZhbHVlW2tleV0gPSBvcHRpb25zLmluc3RydWN0aW9uRm4odmFsdWVba2V5XSwga2V5LCBjdXJyZW50RWxlbWVudCQxKTtcbiAgICAgICAgfVxuICAgICAgICBlbGVtZW50MltvcHRpb25zLmluc3RydWN0aW9uS2V5XSA9IHZhbHVlW2tleV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlMiArIFwiRm5cIiBpbiBvcHRpb25zKSB7XG4gICAgICAgIHZhbHVlID0gb3B0aW9uc1t0eXBlMiArIFwiRm5cIl0odmFsdWUsIGN1cnJlbnRFbGVtZW50JDEpO1xuICAgICAgfVxuICAgICAgZWxlbWVudDJbb3B0aW9uc1t0eXBlMiArIFwiS2V5XCJdXSA9IHZhbHVlO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5hZGRQYXJlbnQpIHtcbiAgICAgIGVsZW1lbnQyW29wdGlvbnMucGFyZW50S2V5XSA9IGN1cnJlbnRFbGVtZW50JDE7XG4gICAgfVxuICAgIGN1cnJlbnRFbGVtZW50JDFbb3B0aW9ucy5lbGVtZW50c0tleV0ucHVzaChlbGVtZW50Mik7XG4gIH1cbn1cbmZ1bmN0aW9uIG1hbmlwdWxhdGVBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpIHtcbiAgaWYgKFwiYXR0cmlidXRlc0ZuXCIgaW4gb3B0aW9ucyAmJiBhdHRyaWJ1dGVzKSB7XG4gICAgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlc0ZuKGF0dHJpYnV0ZXMsIGN1cnJlbnRFbGVtZW50JDEpO1xuICB9XG4gIGlmICgob3B0aW9ucy50cmltIHx8IFwiYXR0cmlidXRlVmFsdWVGblwiIGluIG9wdGlvbnMgfHwgXCJhdHRyaWJ1dGVOYW1lRm5cIiBpbiBvcHRpb25zIHx8IG9wdGlvbnMubmF0aXZlVHlwZUF0dHJpYnV0ZXMpICYmIGF0dHJpYnV0ZXMpIHtcbiAgICB2YXIga2V5O1xuICAgIGZvciAoa2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgIGlmIChhdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMudHJpbSkgYXR0cmlidXRlc1trZXldID0gYXR0cmlidXRlc1trZXldLnRyaW0oKTtcbiAgICAgICAgaWYgKG9wdGlvbnMubmF0aXZlVHlwZUF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICBhdHRyaWJ1dGVzW2tleV0gPSBuYXRpdmVUeXBlKGF0dHJpYnV0ZXNba2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFwiYXR0cmlidXRlVmFsdWVGblwiIGluIG9wdGlvbnMpIGF0dHJpYnV0ZXNba2V5XSA9IG9wdGlvbnMuYXR0cmlidXRlVmFsdWVGbihhdHRyaWJ1dGVzW2tleV0sIGtleSwgY3VycmVudEVsZW1lbnQkMSk7XG4gICAgICAgIGlmIChcImF0dHJpYnV0ZU5hbWVGblwiIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICB2YXIgdGVtcCA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgICBkZWxldGUgYXR0cmlidXRlc1trZXldO1xuICAgICAgICAgIGF0dHJpYnV0ZXNbb3B0aW9ucy5hdHRyaWJ1dGVOYW1lRm4oa2V5LCBhdHRyaWJ1dGVzW2tleV0sIGN1cnJlbnRFbGVtZW50JDEpXSA9IHRlbXA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGF0dHJpYnV0ZXM7XG59XG5mdW5jdGlvbiBvbkluc3RydWN0aW9uKGluc3RydWN0aW9uKSB7XG4gIHZhciBhdHRyaWJ1dGVzID0ge307XG4gIGlmIChpbnN0cnVjdGlvbi5ib2R5ICYmIChpbnN0cnVjdGlvbi5uYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwieG1sXCIgfHwgb3B0aW9ucy5pbnN0cnVjdGlvbkhhc0F0dHJpYnV0ZXMpKSB7XG4gICAgdmFyIGF0dHJzUmVnRXhwID0gLyhbXFx3Oi1dKylcXHMqPVxccyooPzpcIihbXlwiXSopXCJ8JyhbXiddKiknfChcXHcrKSlcXHMqL2c7XG4gICAgdmFyIG1hdGNoO1xuICAgIHdoaWxlICgobWF0Y2ggPSBhdHRyc1JlZ0V4cC5leGVjKGluc3RydWN0aW9uLmJvZHkpKSAhPT0gbnVsbCkge1xuICAgICAgYXR0cmlidXRlc1ttYXRjaFsxXV0gPSBtYXRjaFsyXSB8fCBtYXRjaFszXSB8fCBtYXRjaFs0XTtcbiAgICB9XG4gICAgYXR0cmlidXRlcyA9IG1hbmlwdWxhdGVBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpO1xuICB9XG4gIGlmIChpbnN0cnVjdGlvbi5uYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwieG1sXCIpIHtcbiAgICBpZiAob3B0aW9ucy5pZ25vcmVEZWNsYXJhdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdXJyZW50RWxlbWVudCQxW29wdGlvbnMuZGVjbGFyYXRpb25LZXldID0ge307XG4gICAgaWYgKE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmxlbmd0aCkge1xuICAgICAgY3VycmVudEVsZW1lbnQkMVtvcHRpb25zLmRlY2xhcmF0aW9uS2V5XVtvcHRpb25zLmF0dHJpYnV0ZXNLZXldID0gYXR0cmlidXRlcztcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuYWRkUGFyZW50KSB7XG4gICAgICBjdXJyZW50RWxlbWVudCQxW29wdGlvbnMuZGVjbGFyYXRpb25LZXldW29wdGlvbnMucGFyZW50S2V5XSA9IGN1cnJlbnRFbGVtZW50JDE7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChvcHRpb25zLmlnbm9yZUluc3RydWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnRyaW0pIHtcbiAgICAgIGluc3RydWN0aW9uLmJvZHkgPSBpbnN0cnVjdGlvbi5ib2R5LnRyaW0oKTtcbiAgICB9XG4gICAgdmFyIHZhbHVlID0ge307XG4gICAgaWYgKG9wdGlvbnMuaW5zdHJ1Y3Rpb25IYXNBdHRyaWJ1dGVzICYmIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmxlbmd0aCkge1xuICAgICAgdmFsdWVbaW5zdHJ1Y3Rpb24ubmFtZV0gPSB7fTtcbiAgICAgIHZhbHVlW2luc3RydWN0aW9uLm5hbWVdW29wdGlvbnMuYXR0cmlidXRlc0tleV0gPSBhdHRyaWJ1dGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZVtpbnN0cnVjdGlvbi5uYW1lXSA9IGluc3RydWN0aW9uLmJvZHk7XG4gICAgfVxuICAgIGFkZEZpZWxkKFwiaW5zdHJ1Y3Rpb25cIiwgdmFsdWUpO1xuICB9XG59XG5mdW5jdGlvbiBvblN0YXJ0RWxlbWVudChuYW1lLCBhdHRyaWJ1dGVzKSB7XG4gIHZhciBlbGVtZW50MjtcbiAgaWYgKHR5cGVvZiBuYW1lID09PSBcIm9iamVjdFwiKSB7XG4gICAgYXR0cmlidXRlcyA9IG5hbWUuYXR0cmlidXRlcztcbiAgICBuYW1lID0gbmFtZS5uYW1lO1xuICB9XG4gIGF0dHJpYnV0ZXMgPSBtYW5pcHVsYXRlQXR0cmlidXRlcyhhdHRyaWJ1dGVzKTtcbiAgaWYgKFwiZWxlbWVudE5hbWVGblwiIGluIG9wdGlvbnMpIHtcbiAgICBuYW1lID0gb3B0aW9ucy5lbGVtZW50TmFtZUZuKG5hbWUsIGN1cnJlbnRFbGVtZW50JDEpO1xuICB9XG4gIGlmIChvcHRpb25zLmNvbXBhY3QpIHtcbiAgICBlbGVtZW50MiA9IHt9O1xuICAgIGlmICghb3B0aW9ucy5pZ25vcmVBdHRyaWJ1dGVzICYmIGF0dHJpYnV0ZXMgJiYgT2JqZWN0LmtleXMoYXR0cmlidXRlcykubGVuZ3RoKSB7XG4gICAgICBlbGVtZW50MltvcHRpb25zLmF0dHJpYnV0ZXNLZXldID0ge307XG4gICAgICB2YXIga2V5O1xuICAgICAgZm9yIChrZXkgaW4gYXR0cmlidXRlcykge1xuICAgICAgICBpZiAoYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgZWxlbWVudDJbb3B0aW9ucy5hdHRyaWJ1dGVzS2V5XVtrZXldID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghKG5hbWUgaW4gY3VycmVudEVsZW1lbnQkMSkgJiYgKGlzQXJyYXkkMShvcHRpb25zLmFsd2F5c0FycmF5KSA/IG9wdGlvbnMuYWx3YXlzQXJyYXkuaW5kZXhPZihuYW1lKSAhPT0gLTEgOiBvcHRpb25zLmFsd2F5c0FycmF5KSkge1xuICAgICAgY3VycmVudEVsZW1lbnQkMVtuYW1lXSA9IFtdO1xuICAgIH1cbiAgICBpZiAoY3VycmVudEVsZW1lbnQkMVtuYW1lXSAmJiAhaXNBcnJheSQxKGN1cnJlbnRFbGVtZW50JDFbbmFtZV0pKSB7XG4gICAgICBjdXJyZW50RWxlbWVudCQxW25hbWVdID0gW2N1cnJlbnRFbGVtZW50JDFbbmFtZV1dO1xuICAgIH1cbiAgICBpZiAoaXNBcnJheSQxKGN1cnJlbnRFbGVtZW50JDFbbmFtZV0pKSB7XG4gICAgICBjdXJyZW50RWxlbWVudCQxW25hbWVdLnB1c2goZWxlbWVudDIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50RWxlbWVudCQxW25hbWVdID0gZWxlbWVudDI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICghY3VycmVudEVsZW1lbnQkMVtvcHRpb25zLmVsZW1lbnRzS2V5XSkge1xuICAgICAgY3VycmVudEVsZW1lbnQkMVtvcHRpb25zLmVsZW1lbnRzS2V5XSA9IFtdO1xuICAgIH1cbiAgICBlbGVtZW50MiA9IHt9O1xuICAgIGVsZW1lbnQyW29wdGlvbnMudHlwZUtleV0gPSBcImVsZW1lbnRcIjtcbiAgICBlbGVtZW50MltvcHRpb25zLm5hbWVLZXldID0gbmFtZTtcbiAgICBpZiAoIW9wdGlvbnMuaWdub3JlQXR0cmlidXRlcyAmJiBhdHRyaWJ1dGVzICYmIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmxlbmd0aCkge1xuICAgICAgZWxlbWVudDJbb3B0aW9ucy5hdHRyaWJ1dGVzS2V5XSA9IGF0dHJpYnV0ZXM7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmFsd2F5c0NoaWxkcmVuKSB7XG4gICAgICBlbGVtZW50MltvcHRpb25zLmVsZW1lbnRzS2V5XSA9IFtdO1xuICAgIH1cbiAgICBjdXJyZW50RWxlbWVudCQxW29wdGlvbnMuZWxlbWVudHNLZXldLnB1c2goZWxlbWVudDIpO1xuICB9XG4gIGVsZW1lbnQyW29wdGlvbnMucGFyZW50S2V5XSA9IGN1cnJlbnRFbGVtZW50JDE7XG4gIGN1cnJlbnRFbGVtZW50JDEgPSBlbGVtZW50Mjtcbn1cbmZ1bmN0aW9uIG9uVGV4dCh0ZXh0KSB7XG4gIGlmIChvcHRpb25zLmlnbm9yZVRleHQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCF0ZXh0LnRyaW0oKSAmJiAhb3B0aW9ucy5jYXB0dXJlU3BhY2VzQmV0d2VlbkVsZW1lbnRzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChvcHRpb25zLnRyaW0pIHtcbiAgICB0ZXh0ID0gdGV4dC50cmltKCk7XG4gIH1cbiAgaWYgKG9wdGlvbnMubmF0aXZlVHlwZSkge1xuICAgIHRleHQgPSBuYXRpdmVUeXBlKHRleHQpO1xuICB9XG4gIGlmIChvcHRpb25zLnNhbml0aXplKSB7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvJi9nLCBcIiZhbXA7XCIpLnJlcGxhY2UoLzwvZywgXCImbHQ7XCIpLnJlcGxhY2UoLz4vZywgXCImZ3Q7XCIpO1xuICB9XG4gIGFkZEZpZWxkKFwidGV4dFwiLCB0ZXh0KTtcbn1cbmZ1bmN0aW9uIG9uQ29tbWVudChjb21tZW50KSB7XG4gIGlmIChvcHRpb25zLmlnbm9yZUNvbW1lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG9wdGlvbnMudHJpbSkge1xuICAgIGNvbW1lbnQgPSBjb21tZW50LnRyaW0oKTtcbiAgfVxuICBhZGRGaWVsZChcImNvbW1lbnRcIiwgY29tbWVudCk7XG59XG5mdW5jdGlvbiBvbkVuZEVsZW1lbnQobmFtZSkge1xuICB2YXIgcGFyZW50RWxlbWVudCA9IGN1cnJlbnRFbGVtZW50JDFbb3B0aW9ucy5wYXJlbnRLZXldO1xuICBpZiAoIW9wdGlvbnMuYWRkUGFyZW50KSB7XG4gICAgZGVsZXRlIGN1cnJlbnRFbGVtZW50JDFbb3B0aW9ucy5wYXJlbnRLZXldO1xuICB9XG4gIGN1cnJlbnRFbGVtZW50JDEgPSBwYXJlbnRFbGVtZW50O1xufVxuZnVuY3Rpb24gb25DZGF0YShjZGF0YSkge1xuICBpZiAob3B0aW9ucy5pZ25vcmVDZGF0YSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAob3B0aW9ucy50cmltKSB7XG4gICAgY2RhdGEgPSBjZGF0YS50cmltKCk7XG4gIH1cbiAgYWRkRmllbGQoXCJjZGF0YVwiLCBjZGF0YSk7XG59XG5mdW5jdGlvbiBvbkRvY3R5cGUoZG9jdHlwZSkge1xuICBpZiAob3B0aW9ucy5pZ25vcmVEb2N0eXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGRvY3R5cGUgPSBkb2N0eXBlLnJlcGxhY2UoL14gLywgXCJcIik7XG4gIGlmIChvcHRpb25zLnRyaW0pIHtcbiAgICBkb2N0eXBlID0gZG9jdHlwZS50cmltKCk7XG4gIH1cbiAgYWRkRmllbGQoXCJkb2N0eXBlXCIsIGRvY3R5cGUpO1xufVxuZnVuY3Rpb24gb25FcnJvcihlcnJvcikge1xuICBlcnJvci5ub3RlID0gZXJyb3I7XG59XG52YXIgeG1sMmpzJDIgPSBmdW5jdGlvbih4bWwyLCB1c2VyT3B0aW9ucykge1xuICB2YXIgcGFyc2VyID0gc2F4LnBhcnNlcih0cnVlLCB7fSk7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgY3VycmVudEVsZW1lbnQkMSA9IHJlc3VsdDtcbiAgb3B0aW9ucyA9IHZhbGlkYXRlT3B0aW9ucyQyKHVzZXJPcHRpb25zKTtcbiAge1xuICAgIHBhcnNlci5vcHQgPSB7IHN0cmljdEVudGl0aWVzOiB0cnVlIH07XG4gICAgcGFyc2VyLm9ub3BlbnRhZyA9IG9uU3RhcnRFbGVtZW50O1xuICAgIHBhcnNlci5vbnRleHQgPSBvblRleHQ7XG4gICAgcGFyc2VyLm9uY29tbWVudCA9IG9uQ29tbWVudDtcbiAgICBwYXJzZXIub25jbG9zZXRhZyA9IG9uRW5kRWxlbWVudDtcbiAgICBwYXJzZXIub25lcnJvciA9IG9uRXJyb3I7XG4gICAgcGFyc2VyLm9uY2RhdGEgPSBvbkNkYXRhO1xuICAgIHBhcnNlci5vbmRvY3R5cGUgPSBvbkRvY3R5cGU7XG4gICAgcGFyc2VyLm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uID0gb25JbnN0cnVjdGlvbjtcbiAgfVxuICB7XG4gICAgcGFyc2VyLndyaXRlKHhtbDIpLmNsb3NlKCk7XG4gIH1cbiAgaWYgKHJlc3VsdFtvcHRpb25zLmVsZW1lbnRzS2V5XSkge1xuICAgIHZhciB0ZW1wID0gcmVzdWx0W29wdGlvbnMuZWxlbWVudHNLZXldO1xuICAgIGRlbGV0ZSByZXN1bHRbb3B0aW9ucy5lbGVtZW50c0tleV07XG4gICAgcmVzdWx0W29wdGlvbnMuZWxlbWVudHNLZXldID0gdGVtcDtcbiAgICBkZWxldGUgcmVzdWx0LnRleHQ7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgaGVscGVyJDEgPSBvcHRpb25zSGVscGVyO1xudmFyIHhtbDJqcyQxID0geG1sMmpzJDI7XG5mdW5jdGlvbiB2YWxpZGF0ZU9wdGlvbnMkMSh1c2VyT3B0aW9ucykge1xuICB2YXIgb3B0aW9uczIgPSBoZWxwZXIkMS5jb3B5T3B0aW9ucyh1c2VyT3B0aW9ucyk7XG4gIGhlbHBlciQxLmVuc3VyZVNwYWNlc0V4aXN0cyhvcHRpb25zMik7XG4gIHJldHVybiBvcHRpb25zMjtcbn1cbnZhciB4bWwyanNvbiQxID0gZnVuY3Rpb24oeG1sMiwgdXNlck9wdGlvbnMpIHtcbiAgdmFyIG9wdGlvbnMyLCBqcywganNvbiwgcGFyZW50S2V5O1xuICBvcHRpb25zMiA9IHZhbGlkYXRlT3B0aW9ucyQxKHVzZXJPcHRpb25zKTtcbiAganMgPSB4bWwyanMkMSh4bWwyLCBvcHRpb25zMik7XG4gIHBhcmVudEtleSA9IFwiY29tcGFjdFwiIGluIG9wdGlvbnMyICYmIG9wdGlvbnMyLmNvbXBhY3QgPyBcIl9wYXJlbnRcIiA6IFwicGFyZW50XCI7XG4gIGlmIChcImFkZFBhcmVudFwiIGluIG9wdGlvbnMyICYmIG9wdGlvbnMyLmFkZFBhcmVudCkge1xuICAgIGpzb24gPSBKU09OLnN0cmluZ2lmeShqcywgZnVuY3Rpb24oaywgdikge1xuICAgICAgcmV0dXJuIGsgPT09IHBhcmVudEtleSA/IFwiX1wiIDogdjtcbiAgICB9LCBvcHRpb25zMi5zcGFjZXMpO1xuICB9IGVsc2Uge1xuICAgIGpzb24gPSBKU09OLnN0cmluZ2lmeShqcywgbnVsbCwgb3B0aW9uczIuc3BhY2VzKTtcbiAgfVxuICByZXR1cm4ganNvbi5yZXBsYWNlKC9cXHUyMDI4L2csIFwiXFxcXHUyMDI4XCIpLnJlcGxhY2UoL1xcdTIwMjkvZywgXCJcXFxcdTIwMjlcIik7XG59O1xudmFyIGhlbHBlciA9IG9wdGlvbnNIZWxwZXI7XG52YXIgaXNBcnJheSA9IGFycmF5SGVscGVyLmlzQXJyYXk7XG52YXIgY3VycmVudEVsZW1lbnQsIGN1cnJlbnRFbGVtZW50TmFtZTtcbmZ1bmN0aW9uIHZhbGlkYXRlT3B0aW9ucyh1c2VyT3B0aW9ucykge1xuICB2YXIgb3B0aW9uczIgPSBoZWxwZXIuY29weU9wdGlvbnModXNlck9wdGlvbnMpO1xuICBoZWxwZXIuZW5zdXJlRmxhZ0V4aXN0cyhcImlnbm9yZURlY2xhcmF0aW9uXCIsIG9wdGlvbnMyKTtcbiAgaGVscGVyLmVuc3VyZUZsYWdFeGlzdHMoXCJpZ25vcmVJbnN0cnVjdGlvblwiLCBvcHRpb25zMik7XG4gIGhlbHBlci5lbnN1cmVGbGFnRXhpc3RzKFwiaWdub3JlQXR0cmlidXRlc1wiLCBvcHRpb25zMik7XG4gIGhlbHBlci5lbnN1cmVGbGFnRXhpc3RzKFwiaWdub3JlVGV4dFwiLCBvcHRpb25zMik7XG4gIGhlbHBlci5lbnN1cmVGbGFnRXhpc3RzKFwiaWdub3JlQ29tbWVudFwiLCBvcHRpb25zMik7XG4gIGhlbHBlci5lbnN1cmVGbGFnRXhpc3RzKFwiaWdub3JlQ2RhdGFcIiwgb3B0aW9uczIpO1xuICBoZWxwZXIuZW5zdXJlRmxhZ0V4aXN0cyhcImlnbm9yZURvY3R5cGVcIiwgb3B0aW9uczIpO1xuICBoZWxwZXIuZW5zdXJlRmxhZ0V4aXN0cyhcImNvbXBhY3RcIiwgb3B0aW9uczIpO1xuICBoZWxwZXIuZW5zdXJlRmxhZ0V4aXN0cyhcImluZGVudFRleHRcIiwgb3B0aW9uczIpO1xuICBoZWxwZXIuZW5zdXJlRmxhZ0V4aXN0cyhcImluZGVudENkYXRhXCIsIG9wdGlvbnMyKTtcbiAgaGVscGVyLmVuc3VyZUZsYWdFeGlzdHMoXCJpbmRlbnRBdHRyaWJ1dGVzXCIsIG9wdGlvbnMyKTtcbiAgaGVscGVyLmVuc3VyZUZsYWdFeGlzdHMoXCJpbmRlbnRJbnN0cnVjdGlvblwiLCBvcHRpb25zMik7XG4gIGhlbHBlci5lbnN1cmVGbGFnRXhpc3RzKFwiZnVsbFRhZ0VtcHR5RWxlbWVudFwiLCBvcHRpb25zMik7XG4gIGhlbHBlci5lbnN1cmVGbGFnRXhpc3RzKFwibm9RdW90ZXNGb3JOYXRpdmVBdHRyaWJ1dGVzXCIsIG9wdGlvbnMyKTtcbiAgaGVscGVyLmVuc3VyZVNwYWNlc0V4aXN0cyhvcHRpb25zMik7XG4gIGlmICh0eXBlb2Ygb3B0aW9uczIuc3BhY2VzID09PSBcIm51bWJlclwiKSB7XG4gICAgb3B0aW9uczIuc3BhY2VzID0gQXJyYXkob3B0aW9uczIuc3BhY2VzICsgMSkuam9pbihcIiBcIik7XG4gIH1cbiAgaGVscGVyLmVuc3VyZUtleUV4aXN0cyhcImRlY2xhcmF0aW9uXCIsIG9wdGlvbnMyKTtcbiAgaGVscGVyLmVuc3VyZUtleUV4aXN0cyhcImluc3RydWN0aW9uXCIsIG9wdGlvbnMyKTtcbiAgaGVscGVyLmVuc3VyZUtleUV4aXN0cyhcImF0dHJpYnV0ZXNcIiwgb3B0aW9uczIpO1xuICBoZWxwZXIuZW5zdXJlS2V5RXhpc3RzKFwidGV4dFwiLCBvcHRpb25zMik7XG4gIGhlbHBlci5lbnN1cmVLZXlFeGlzdHMoXCJjb21tZW50XCIsIG9wdGlvbnMyKTtcbiAgaGVscGVyLmVuc3VyZUtleUV4aXN0cyhcImNkYXRhXCIsIG9wdGlvbnMyKTtcbiAgaGVscGVyLmVuc3VyZUtleUV4aXN0cyhcImRvY3R5cGVcIiwgb3B0aW9uczIpO1xuICBoZWxwZXIuZW5zdXJlS2V5RXhpc3RzKFwidHlwZVwiLCBvcHRpb25zMik7XG4gIGhlbHBlci5lbnN1cmVLZXlFeGlzdHMoXCJuYW1lXCIsIG9wdGlvbnMyKTtcbiAgaGVscGVyLmVuc3VyZUtleUV4aXN0cyhcImVsZW1lbnRzXCIsIG9wdGlvbnMyKTtcbiAgaGVscGVyLmNoZWNrRm5FeGlzdHMoXCJkb2N0eXBlXCIsIG9wdGlvbnMyKTtcbiAgaGVscGVyLmNoZWNrRm5FeGlzdHMoXCJpbnN0cnVjdGlvblwiLCBvcHRpb25zMik7XG4gIGhlbHBlci5jaGVja0ZuRXhpc3RzKFwiY2RhdGFcIiwgb3B0aW9uczIpO1xuICBoZWxwZXIuY2hlY2tGbkV4aXN0cyhcImNvbW1lbnRcIiwgb3B0aW9uczIpO1xuICBoZWxwZXIuY2hlY2tGbkV4aXN0cyhcInRleHRcIiwgb3B0aW9uczIpO1xuICBoZWxwZXIuY2hlY2tGbkV4aXN0cyhcImluc3RydWN0aW9uTmFtZVwiLCBvcHRpb25zMik7XG4gIGhlbHBlci5jaGVja0ZuRXhpc3RzKFwiZWxlbWVudE5hbWVcIiwgb3B0aW9uczIpO1xuICBoZWxwZXIuY2hlY2tGbkV4aXN0cyhcImF0dHJpYnV0ZU5hbWVcIiwgb3B0aW9uczIpO1xuICBoZWxwZXIuY2hlY2tGbkV4aXN0cyhcImF0dHJpYnV0ZVZhbHVlXCIsIG9wdGlvbnMyKTtcbiAgaGVscGVyLmNoZWNrRm5FeGlzdHMoXCJhdHRyaWJ1dGVzXCIsIG9wdGlvbnMyKTtcbiAgaGVscGVyLmNoZWNrRm5FeGlzdHMoXCJmdWxsVGFnRW1wdHlFbGVtZW50XCIsIG9wdGlvbnMyKTtcbiAgcmV0dXJuIG9wdGlvbnMyO1xufVxuZnVuY3Rpb24gd3JpdGVJbmRlbnRhdGlvbihvcHRpb25zMiwgZGVwdGgsIGZpcnN0TGluZSkge1xuICByZXR1cm4gKCFmaXJzdExpbmUgJiYgb3B0aW9uczIuc3BhY2VzID8gXCJcXG5cIiA6IFwiXCIpICsgQXJyYXkoZGVwdGggKyAxKS5qb2luKG9wdGlvbnMyLnNwYWNlcyk7XG59XG5mdW5jdGlvbiB3cml0ZUF0dHJpYnV0ZXMoYXR0cmlidXRlcywgb3B0aW9uczIsIGRlcHRoKSB7XG4gIGlmIChvcHRpb25zMi5pZ25vcmVBdHRyaWJ1dGVzKSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbiAgaWYgKFwiYXR0cmlidXRlc0ZuXCIgaW4gb3B0aW9uczIpIHtcbiAgICBhdHRyaWJ1dGVzID0gb3B0aW9uczIuYXR0cmlidXRlc0ZuKGF0dHJpYnV0ZXMsIGN1cnJlbnRFbGVtZW50TmFtZSwgY3VycmVudEVsZW1lbnQpO1xuICB9XG4gIHZhciBrZXksIGF0dHIsIGF0dHJOYW1lLCBxdW90ZSwgcmVzdWx0ID0gW107XG4gIGZvciAoa2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICBpZiAoYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIGF0dHJpYnV0ZXNba2V5XSAhPT0gbnVsbCAmJiBhdHRyaWJ1dGVzW2tleV0gIT09IHZvaWQgMCkge1xuICAgICAgcXVvdGUgPSBvcHRpb25zMi5ub1F1b3Rlc0Zvck5hdGl2ZUF0dHJpYnV0ZXMgJiYgdHlwZW9mIGF0dHJpYnV0ZXNba2V5XSAhPT0gXCJzdHJpbmdcIiA/IFwiXCIgOiAnXCInO1xuICAgICAgYXR0ciA9IFwiXCIgKyBhdHRyaWJ1dGVzW2tleV07XG4gICAgICBhdHRyID0gYXR0ci5yZXBsYWNlKC9cIi9nLCBcIiZxdW90O1wiKTtcbiAgICAgIGF0dHJOYW1lID0gXCJhdHRyaWJ1dGVOYW1lRm5cIiBpbiBvcHRpb25zMiA/IG9wdGlvbnMyLmF0dHJpYnV0ZU5hbWVGbihrZXksIGF0dHIsIGN1cnJlbnRFbGVtZW50TmFtZSwgY3VycmVudEVsZW1lbnQpIDoga2V5O1xuICAgICAgcmVzdWx0LnB1c2gob3B0aW9uczIuc3BhY2VzICYmIG9wdGlvbnMyLmluZGVudEF0dHJpYnV0ZXMgPyB3cml0ZUluZGVudGF0aW9uKG9wdGlvbnMyLCBkZXB0aCArIDEsIGZhbHNlKSA6IFwiIFwiKTtcbiAgICAgIHJlc3VsdC5wdXNoKGF0dHJOYW1lICsgXCI9XCIgKyBxdW90ZSArIChcImF0dHJpYnV0ZVZhbHVlRm5cIiBpbiBvcHRpb25zMiA/IG9wdGlvbnMyLmF0dHJpYnV0ZVZhbHVlRm4oYXR0ciwga2V5LCBjdXJyZW50RWxlbWVudE5hbWUsIGN1cnJlbnRFbGVtZW50KSA6IGF0dHIpICsgcXVvdGUpO1xuICAgIH1cbiAgfVxuICBpZiAoYXR0cmlidXRlcyAmJiBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5sZW5ndGggJiYgb3B0aW9uczIuc3BhY2VzICYmIG9wdGlvbnMyLmluZGVudEF0dHJpYnV0ZXMpIHtcbiAgICByZXN1bHQucHVzaCh3cml0ZUluZGVudGF0aW9uKG9wdGlvbnMyLCBkZXB0aCwgZmFsc2UpKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0LmpvaW4oXCJcIik7XG59XG5mdW5jdGlvbiB3cml0ZURlY2xhcmF0aW9uKGRlY2xhcmF0aW9uLCBvcHRpb25zMiwgZGVwdGgpIHtcbiAgY3VycmVudEVsZW1lbnQgPSBkZWNsYXJhdGlvbjtcbiAgY3VycmVudEVsZW1lbnROYW1lID0gXCJ4bWxcIjtcbiAgcmV0dXJuIG9wdGlvbnMyLmlnbm9yZURlY2xhcmF0aW9uID8gXCJcIiA6IFwiPD94bWxcIiArIHdyaXRlQXR0cmlidXRlcyhkZWNsYXJhdGlvbltvcHRpb25zMi5hdHRyaWJ1dGVzS2V5XSwgb3B0aW9uczIsIGRlcHRoKSArIFwiPz5cIjtcbn1cbmZ1bmN0aW9uIHdyaXRlSW5zdHJ1Y3Rpb24oaW5zdHJ1Y3Rpb24sIG9wdGlvbnMyLCBkZXB0aCkge1xuICBpZiAob3B0aW9uczIuaWdub3JlSW5zdHJ1Y3Rpb24pIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBpbnN0cnVjdGlvbikge1xuICAgIGlmIChpbnN0cnVjdGlvbi5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgdmFyIGluc3RydWN0aW9uTmFtZSA9IFwiaW5zdHJ1Y3Rpb25OYW1lRm5cIiBpbiBvcHRpb25zMiA/IG9wdGlvbnMyLmluc3RydWN0aW9uTmFtZUZuKGtleSwgaW5zdHJ1Y3Rpb25ba2V5XSwgY3VycmVudEVsZW1lbnROYW1lLCBjdXJyZW50RWxlbWVudCkgOiBrZXk7XG4gIGlmICh0eXBlb2YgaW5zdHJ1Y3Rpb25ba2V5XSA9PT0gXCJvYmplY3RcIikge1xuICAgIGN1cnJlbnRFbGVtZW50ID0gaW5zdHJ1Y3Rpb247XG4gICAgY3VycmVudEVsZW1lbnROYW1lID0gaW5zdHJ1Y3Rpb25OYW1lO1xuICAgIHJldHVybiBcIjw/XCIgKyBpbnN0cnVjdGlvbk5hbWUgKyB3cml0ZUF0dHJpYnV0ZXMoaW5zdHJ1Y3Rpb25ba2V5XVtvcHRpb25zMi5hdHRyaWJ1dGVzS2V5XSwgb3B0aW9uczIsIGRlcHRoKSArIFwiPz5cIjtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zdHJ1Y3Rpb25WYWx1ZSA9IGluc3RydWN0aW9uW2tleV0gPyBpbnN0cnVjdGlvbltrZXldIDogXCJcIjtcbiAgICBpZiAoXCJpbnN0cnVjdGlvbkZuXCIgaW4gb3B0aW9uczIpIGluc3RydWN0aW9uVmFsdWUgPSBvcHRpb25zMi5pbnN0cnVjdGlvbkZuKGluc3RydWN0aW9uVmFsdWUsIGtleSwgY3VycmVudEVsZW1lbnROYW1lLCBjdXJyZW50RWxlbWVudCk7XG4gICAgcmV0dXJuIFwiPD9cIiArIGluc3RydWN0aW9uTmFtZSArIChpbnN0cnVjdGlvblZhbHVlID8gXCIgXCIgKyBpbnN0cnVjdGlvblZhbHVlIDogXCJcIikgKyBcIj8+XCI7XG4gIH1cbn1cbmZ1bmN0aW9uIHdyaXRlQ29tbWVudChjb21tZW50LCBvcHRpb25zMikge1xuICByZXR1cm4gb3B0aW9uczIuaWdub3JlQ29tbWVudCA/IFwiXCIgOiBcIjwhLS1cIiArIChcImNvbW1lbnRGblwiIGluIG9wdGlvbnMyID8gb3B0aW9uczIuY29tbWVudEZuKGNvbW1lbnQsIGN1cnJlbnRFbGVtZW50TmFtZSwgY3VycmVudEVsZW1lbnQpIDogY29tbWVudCkgKyBcIi0tPlwiO1xufVxuZnVuY3Rpb24gd3JpdGVDZGF0YShjZGF0YSwgb3B0aW9uczIpIHtcbiAgcmV0dXJuIG9wdGlvbnMyLmlnbm9yZUNkYXRhID8gXCJcIiA6IFwiPCFbQ0RBVEFbXCIgKyAoXCJjZGF0YUZuXCIgaW4gb3B0aW9uczIgPyBvcHRpb25zMi5jZGF0YUZuKGNkYXRhLCBjdXJyZW50RWxlbWVudE5hbWUsIGN1cnJlbnRFbGVtZW50KSA6IGNkYXRhLnJlcGxhY2UoXCJdXT5cIiwgXCJdXV1dPjwhW0NEQVRBWz5cIikpICsgXCJdXT5cIjtcbn1cbmZ1bmN0aW9uIHdyaXRlRG9jdHlwZShkb2N0eXBlLCBvcHRpb25zMikge1xuICByZXR1cm4gb3B0aW9uczIuaWdub3JlRG9jdHlwZSA/IFwiXCIgOiBcIjwhRE9DVFlQRSBcIiArIChcImRvY3R5cGVGblwiIGluIG9wdGlvbnMyID8gb3B0aW9uczIuZG9jdHlwZUZuKGRvY3R5cGUsIGN1cnJlbnRFbGVtZW50TmFtZSwgY3VycmVudEVsZW1lbnQpIDogZG9jdHlwZSkgKyBcIj5cIjtcbn1cbmZ1bmN0aW9uIHdyaXRlVGV4dCh0ZXh0LCBvcHRpb25zMikge1xuICBpZiAob3B0aW9uczIuaWdub3JlVGV4dCkgcmV0dXJuIFwiXCI7XG4gIHRleHQgPSBcIlwiICsgdGV4dDtcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvJmFtcDsvZywgXCImXCIpO1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8mL2csIFwiJmFtcDtcIikucmVwbGFjZSgvPC9nLCBcIiZsdDtcIikucmVwbGFjZSgvPi9nLCBcIiZndDtcIik7XG4gIHJldHVybiBcInRleHRGblwiIGluIG9wdGlvbnMyID8gb3B0aW9uczIudGV4dEZuKHRleHQsIGN1cnJlbnRFbGVtZW50TmFtZSwgY3VycmVudEVsZW1lbnQpIDogdGV4dDtcbn1cbmZ1bmN0aW9uIGhhc0NvbnRlbnQoZWxlbWVudDIsIG9wdGlvbnMyKSB7XG4gIHZhciBpO1xuICBpZiAoZWxlbWVudDIuZWxlbWVudHMgJiYgZWxlbWVudDIuZWxlbWVudHMubGVuZ3RoKSB7XG4gICAgZm9yIChpID0gMDsgaSA8IGVsZW1lbnQyLmVsZW1lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICBzd2l0Y2ggKGVsZW1lbnQyLmVsZW1lbnRzW2ldW29wdGlvbnMyLnR5cGVLZXldKSB7XG4gICAgICAgIGNhc2UgXCJ0ZXh0XCI6XG4gICAgICAgICAgaWYgKG9wdGlvbnMyLmluZGVudFRleHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImNkYXRhXCI6XG4gICAgICAgICAgaWYgKG9wdGlvbnMyLmluZGVudENkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJpbnN0cnVjdGlvblwiOlxuICAgICAgICAgIGlmIChvcHRpb25zMi5pbmRlbnRJbnN0cnVjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZG9jdHlwZVwiOlxuICAgICAgICBjYXNlIFwiY29tbWVudFwiOlxuICAgICAgICBjYXNlIFwiZWxlbWVudFwiOlxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiB3cml0ZUVsZW1lbnQoZWxlbWVudDIsIG9wdGlvbnMyLCBkZXB0aCkge1xuICBjdXJyZW50RWxlbWVudCA9IGVsZW1lbnQyO1xuICBjdXJyZW50RWxlbWVudE5hbWUgPSBlbGVtZW50Mi5uYW1lO1xuICB2YXIgeG1sMiA9IFtdLCBlbGVtZW50TmFtZSA9IFwiZWxlbWVudE5hbWVGblwiIGluIG9wdGlvbnMyID8gb3B0aW9uczIuZWxlbWVudE5hbWVGbihlbGVtZW50Mi5uYW1lLCBlbGVtZW50MikgOiBlbGVtZW50Mi5uYW1lO1xuICB4bWwyLnB1c2goXCI8XCIgKyBlbGVtZW50TmFtZSk7XG4gIGlmIChlbGVtZW50MltvcHRpb25zMi5hdHRyaWJ1dGVzS2V5XSkge1xuICAgIHhtbDIucHVzaCh3cml0ZUF0dHJpYnV0ZXMoZWxlbWVudDJbb3B0aW9uczIuYXR0cmlidXRlc0tleV0sIG9wdGlvbnMyLCBkZXB0aCkpO1xuICB9XG4gIHZhciB3aXRoQ2xvc2luZ1RhZyA9IGVsZW1lbnQyW29wdGlvbnMyLmVsZW1lbnRzS2V5XSAmJiBlbGVtZW50MltvcHRpb25zMi5lbGVtZW50c0tleV0ubGVuZ3RoIHx8IGVsZW1lbnQyW29wdGlvbnMyLmF0dHJpYnV0ZXNLZXldICYmIGVsZW1lbnQyW29wdGlvbnMyLmF0dHJpYnV0ZXNLZXldW1wieG1sOnNwYWNlXCJdID09PSBcInByZXNlcnZlXCI7XG4gIGlmICghd2l0aENsb3NpbmdUYWcpIHtcbiAgICBpZiAoXCJmdWxsVGFnRW1wdHlFbGVtZW50Rm5cIiBpbiBvcHRpb25zMikge1xuICAgICAgd2l0aENsb3NpbmdUYWcgPSBvcHRpb25zMi5mdWxsVGFnRW1wdHlFbGVtZW50Rm4oZWxlbWVudDIubmFtZSwgZWxlbWVudDIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aXRoQ2xvc2luZ1RhZyA9IG9wdGlvbnMyLmZ1bGxUYWdFbXB0eUVsZW1lbnQ7XG4gICAgfVxuICB9XG4gIGlmICh3aXRoQ2xvc2luZ1RhZykge1xuICAgIHhtbDIucHVzaChcIj5cIik7XG4gICAgaWYgKGVsZW1lbnQyW29wdGlvbnMyLmVsZW1lbnRzS2V5XSAmJiBlbGVtZW50MltvcHRpb25zMi5lbGVtZW50c0tleV0ubGVuZ3RoKSB7XG4gICAgICB4bWwyLnB1c2god3JpdGVFbGVtZW50cyhlbGVtZW50MltvcHRpb25zMi5lbGVtZW50c0tleV0sIG9wdGlvbnMyLCBkZXB0aCArIDEpKTtcbiAgICAgIGN1cnJlbnRFbGVtZW50ID0gZWxlbWVudDI7XG4gICAgICBjdXJyZW50RWxlbWVudE5hbWUgPSBlbGVtZW50Mi5uYW1lO1xuICAgIH1cbiAgICB4bWwyLnB1c2gob3B0aW9uczIuc3BhY2VzICYmIGhhc0NvbnRlbnQoZWxlbWVudDIsIG9wdGlvbnMyKSA/IFwiXFxuXCIgKyBBcnJheShkZXB0aCArIDEpLmpvaW4ob3B0aW9uczIuc3BhY2VzKSA6IFwiXCIpO1xuICAgIHhtbDIucHVzaChcIjwvXCIgKyBlbGVtZW50TmFtZSArIFwiPlwiKTtcbiAgfSBlbHNlIHtcbiAgICB4bWwyLnB1c2goXCIvPlwiKTtcbiAgfVxuICByZXR1cm4geG1sMi5qb2luKFwiXCIpO1xufVxuZnVuY3Rpb24gd3JpdGVFbGVtZW50cyhlbGVtZW50cywgb3B0aW9uczIsIGRlcHRoLCBmaXJzdExpbmUpIHtcbiAgcmV0dXJuIGVsZW1lbnRzLnJlZHVjZShmdW5jdGlvbih4bWwyLCBlbGVtZW50Mikge1xuICAgIHZhciBpbmRlbnQgPSB3cml0ZUluZGVudGF0aW9uKG9wdGlvbnMyLCBkZXB0aCwgZmlyc3RMaW5lICYmICF4bWwyKTtcbiAgICBzd2l0Y2ggKGVsZW1lbnQyLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJlbGVtZW50XCI6XG4gICAgICAgIHJldHVybiB4bWwyICsgaW5kZW50ICsgd3JpdGVFbGVtZW50KGVsZW1lbnQyLCBvcHRpb25zMiwgZGVwdGgpO1xuICAgICAgY2FzZSBcImNvbW1lbnRcIjpcbiAgICAgICAgcmV0dXJuIHhtbDIgKyBpbmRlbnQgKyB3cml0ZUNvbW1lbnQoZWxlbWVudDJbb3B0aW9uczIuY29tbWVudEtleV0sIG9wdGlvbnMyKTtcbiAgICAgIGNhc2UgXCJkb2N0eXBlXCI6XG4gICAgICAgIHJldHVybiB4bWwyICsgaW5kZW50ICsgd3JpdGVEb2N0eXBlKGVsZW1lbnQyW29wdGlvbnMyLmRvY3R5cGVLZXldLCBvcHRpb25zMik7XG4gICAgICBjYXNlIFwiY2RhdGFcIjpcbiAgICAgICAgcmV0dXJuIHhtbDIgKyAob3B0aW9uczIuaW5kZW50Q2RhdGEgPyBpbmRlbnQgOiBcIlwiKSArIHdyaXRlQ2RhdGEoZWxlbWVudDJbb3B0aW9uczIuY2RhdGFLZXldLCBvcHRpb25zMik7XG4gICAgICBjYXNlIFwidGV4dFwiOlxuICAgICAgICByZXR1cm4geG1sMiArIChvcHRpb25zMi5pbmRlbnRUZXh0ID8gaW5kZW50IDogXCJcIikgKyB3cml0ZVRleHQoZWxlbWVudDJbb3B0aW9uczIudGV4dEtleV0sIG9wdGlvbnMyKTtcbiAgICAgIGNhc2UgXCJpbnN0cnVjdGlvblwiOlxuICAgICAgICB2YXIgaW5zdHJ1Y3Rpb24gPSB7fTtcbiAgICAgICAgaW5zdHJ1Y3Rpb25bZWxlbWVudDJbb3B0aW9uczIubmFtZUtleV1dID0gZWxlbWVudDJbb3B0aW9uczIuYXR0cmlidXRlc0tleV0gPyBlbGVtZW50MiA6IGVsZW1lbnQyW29wdGlvbnMyLmluc3RydWN0aW9uS2V5XTtcbiAgICAgICAgcmV0dXJuIHhtbDIgKyAob3B0aW9uczIuaW5kZW50SW5zdHJ1Y3Rpb24gPyBpbmRlbnQgOiBcIlwiKSArIHdyaXRlSW5zdHJ1Y3Rpb24oaW5zdHJ1Y3Rpb24sIG9wdGlvbnMyLCBkZXB0aCk7XG4gICAgfVxuICB9LCBcIlwiKTtcbn1cbmZ1bmN0aW9uIGhhc0NvbnRlbnRDb21wYWN0KGVsZW1lbnQyLCBvcHRpb25zMiwgYW55Q29udGVudCkge1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBlbGVtZW50Mikge1xuICAgIGlmIChlbGVtZW50Mi5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICBjYXNlIG9wdGlvbnMyLnBhcmVudEtleTpcbiAgICAgICAgY2FzZSBvcHRpb25zMi5hdHRyaWJ1dGVzS2V5OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIG9wdGlvbnMyLnRleHRLZXk6XG4gICAgICAgICAgaWYgKG9wdGlvbnMyLmluZGVudFRleHQgfHwgYW55Q29udGVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIG9wdGlvbnMyLmNkYXRhS2V5OlxuICAgICAgICAgIGlmIChvcHRpb25zMi5pbmRlbnRDZGF0YSB8fCBhbnlDb250ZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2Ugb3B0aW9uczIuaW5zdHJ1Y3Rpb25LZXk6XG4gICAgICAgICAgaWYgKG9wdGlvbnMyLmluZGVudEluc3RydWN0aW9uIHx8IGFueUNvbnRlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBvcHRpb25zMi5kb2N0eXBlS2V5OlxuICAgICAgICBjYXNlIG9wdGlvbnMyLmNvbW1lbnRLZXk6XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIHdyaXRlRWxlbWVudENvbXBhY3QoZWxlbWVudDIsIG5hbWUsIG9wdGlvbnMyLCBkZXB0aCwgaW5kZW50KSB7XG4gIGN1cnJlbnRFbGVtZW50ID0gZWxlbWVudDI7XG4gIGN1cnJlbnRFbGVtZW50TmFtZSA9IG5hbWU7XG4gIHZhciBlbGVtZW50TmFtZSA9IFwiZWxlbWVudE5hbWVGblwiIGluIG9wdGlvbnMyID8gb3B0aW9uczIuZWxlbWVudE5hbWVGbihuYW1lLCBlbGVtZW50MikgOiBuYW1lO1xuICBpZiAodHlwZW9mIGVsZW1lbnQyID09PSBcInVuZGVmaW5lZFwiIHx8IGVsZW1lbnQyID09PSBudWxsIHx8IGVsZW1lbnQyID09PSBcIlwiKSB7XG4gICAgcmV0dXJuIFwiZnVsbFRhZ0VtcHR5RWxlbWVudEZuXCIgaW4gb3B0aW9uczIgJiYgb3B0aW9uczIuZnVsbFRhZ0VtcHR5RWxlbWVudEZuKG5hbWUsIGVsZW1lbnQyKSB8fCBvcHRpb25zMi5mdWxsVGFnRW1wdHlFbGVtZW50ID8gXCI8XCIgKyBlbGVtZW50TmFtZSArIFwiPjwvXCIgKyBlbGVtZW50TmFtZSArIFwiPlwiIDogXCI8XCIgKyBlbGVtZW50TmFtZSArIFwiLz5cIjtcbiAgfVxuICB2YXIgeG1sMiA9IFtdO1xuICBpZiAobmFtZSkge1xuICAgIHhtbDIucHVzaChcIjxcIiArIGVsZW1lbnROYW1lKTtcbiAgICBpZiAodHlwZW9mIGVsZW1lbnQyICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICB4bWwyLnB1c2goXCI+XCIgKyB3cml0ZVRleHQoZWxlbWVudDIsIG9wdGlvbnMyKSArIFwiPC9cIiArIGVsZW1lbnROYW1lICsgXCI+XCIpO1xuICAgICAgcmV0dXJuIHhtbDIuam9pbihcIlwiKTtcbiAgICB9XG4gICAgaWYgKGVsZW1lbnQyW29wdGlvbnMyLmF0dHJpYnV0ZXNLZXldKSB7XG4gICAgICB4bWwyLnB1c2god3JpdGVBdHRyaWJ1dGVzKGVsZW1lbnQyW29wdGlvbnMyLmF0dHJpYnV0ZXNLZXldLCBvcHRpb25zMiwgZGVwdGgpKTtcbiAgICB9XG4gICAgdmFyIHdpdGhDbG9zaW5nVGFnID0gaGFzQ29udGVudENvbXBhY3QoZWxlbWVudDIsIG9wdGlvbnMyLCB0cnVlKSB8fCBlbGVtZW50MltvcHRpb25zMi5hdHRyaWJ1dGVzS2V5XSAmJiBlbGVtZW50MltvcHRpb25zMi5hdHRyaWJ1dGVzS2V5XVtcInhtbDpzcGFjZVwiXSA9PT0gXCJwcmVzZXJ2ZVwiO1xuICAgIGlmICghd2l0aENsb3NpbmdUYWcpIHtcbiAgICAgIGlmIChcImZ1bGxUYWdFbXB0eUVsZW1lbnRGblwiIGluIG9wdGlvbnMyKSB7XG4gICAgICAgIHdpdGhDbG9zaW5nVGFnID0gb3B0aW9uczIuZnVsbFRhZ0VtcHR5RWxlbWVudEZuKG5hbWUsIGVsZW1lbnQyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpdGhDbG9zaW5nVGFnID0gb3B0aW9uczIuZnVsbFRhZ0VtcHR5RWxlbWVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHdpdGhDbG9zaW5nVGFnKSB7XG4gICAgICB4bWwyLnB1c2goXCI+XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB4bWwyLnB1c2goXCIvPlwiKTtcbiAgICAgIHJldHVybiB4bWwyLmpvaW4oXCJcIik7XG4gICAgfVxuICB9XG4gIHhtbDIucHVzaCh3cml0ZUVsZW1lbnRzQ29tcGFjdChlbGVtZW50Miwgb3B0aW9uczIsIGRlcHRoICsgMSwgZmFsc2UpKTtcbiAgY3VycmVudEVsZW1lbnQgPSBlbGVtZW50MjtcbiAgY3VycmVudEVsZW1lbnROYW1lID0gbmFtZTtcbiAgaWYgKG5hbWUpIHtcbiAgICB4bWwyLnB1c2goKGluZGVudCA/IHdyaXRlSW5kZW50YXRpb24ob3B0aW9uczIsIGRlcHRoLCBmYWxzZSkgOiBcIlwiKSArIFwiPC9cIiArIGVsZW1lbnROYW1lICsgXCI+XCIpO1xuICB9XG4gIHJldHVybiB4bWwyLmpvaW4oXCJcIik7XG59XG5mdW5jdGlvbiB3cml0ZUVsZW1lbnRzQ29tcGFjdChlbGVtZW50Miwgb3B0aW9uczIsIGRlcHRoLCBmaXJzdExpbmUpIHtcbiAgdmFyIGksIGtleSwgbm9kZXMsIHhtbDIgPSBbXTtcbiAgZm9yIChrZXkgaW4gZWxlbWVudDIpIHtcbiAgICBpZiAoZWxlbWVudDIuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgbm9kZXMgPSBpc0FycmF5KGVsZW1lbnQyW2tleV0pID8gZWxlbWVudDJba2V5XSA6IFtlbGVtZW50MltrZXldXTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgIGNhc2Ugb3B0aW9uczIuZGVjbGFyYXRpb25LZXk6XG4gICAgICAgICAgICB4bWwyLnB1c2god3JpdGVEZWNsYXJhdGlvbihub2Rlc1tpXSwgb3B0aW9uczIsIGRlcHRoKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIG9wdGlvbnMyLmluc3RydWN0aW9uS2V5OlxuICAgICAgICAgICAgeG1sMi5wdXNoKChvcHRpb25zMi5pbmRlbnRJbnN0cnVjdGlvbiA/IHdyaXRlSW5kZW50YXRpb24ob3B0aW9uczIsIGRlcHRoLCBmaXJzdExpbmUpIDogXCJcIikgKyB3cml0ZUluc3RydWN0aW9uKG5vZGVzW2ldLCBvcHRpb25zMiwgZGVwdGgpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2Ugb3B0aW9uczIuYXR0cmlidXRlc0tleTpcbiAgICAgICAgICBjYXNlIG9wdGlvbnMyLnBhcmVudEtleTpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2Ugb3B0aW9uczIudGV4dEtleTpcbiAgICAgICAgICAgIHhtbDIucHVzaCgob3B0aW9uczIuaW5kZW50VGV4dCA/IHdyaXRlSW5kZW50YXRpb24ob3B0aW9uczIsIGRlcHRoLCBmaXJzdExpbmUpIDogXCJcIikgKyB3cml0ZVRleHQobm9kZXNbaV0sIG9wdGlvbnMyKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIG9wdGlvbnMyLmNkYXRhS2V5OlxuICAgICAgICAgICAgeG1sMi5wdXNoKChvcHRpb25zMi5pbmRlbnRDZGF0YSA/IHdyaXRlSW5kZW50YXRpb24ob3B0aW9uczIsIGRlcHRoLCBmaXJzdExpbmUpIDogXCJcIikgKyB3cml0ZUNkYXRhKG5vZGVzW2ldLCBvcHRpb25zMikpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBvcHRpb25zMi5kb2N0eXBlS2V5OlxuICAgICAgICAgICAgeG1sMi5wdXNoKHdyaXRlSW5kZW50YXRpb24ob3B0aW9uczIsIGRlcHRoLCBmaXJzdExpbmUpICsgd3JpdGVEb2N0eXBlKG5vZGVzW2ldLCBvcHRpb25zMikpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBvcHRpb25zMi5jb21tZW50S2V5OlxuICAgICAgICAgICAgeG1sMi5wdXNoKHdyaXRlSW5kZW50YXRpb24ob3B0aW9uczIsIGRlcHRoLCBmaXJzdExpbmUpICsgd3JpdGVDb21tZW50KG5vZGVzW2ldLCBvcHRpb25zMikpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHhtbDIucHVzaCh3cml0ZUluZGVudGF0aW9uKG9wdGlvbnMyLCBkZXB0aCwgZmlyc3RMaW5lKSArIHdyaXRlRWxlbWVudENvbXBhY3Qobm9kZXNbaV0sIGtleSwgb3B0aW9uczIsIGRlcHRoLCBoYXNDb250ZW50Q29tcGFjdChub2Rlc1tpXSwgb3B0aW9uczIpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZmlyc3RMaW5lID0gZmlyc3RMaW5lICYmICF4bWwyLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHhtbDIuam9pbihcIlwiKTtcbn1cbnZhciBqczJ4bWwkMiA9IGZ1bmN0aW9uKGpzLCBvcHRpb25zMikge1xuICBvcHRpb25zMiA9IHZhbGlkYXRlT3B0aW9ucyhvcHRpb25zMik7XG4gIHZhciB4bWwyID0gW107XG4gIGN1cnJlbnRFbGVtZW50ID0ganM7XG4gIGN1cnJlbnRFbGVtZW50TmFtZSA9IFwiX3Jvb3RfXCI7XG4gIGlmIChvcHRpb25zMi5jb21wYWN0KSB7XG4gICAgeG1sMi5wdXNoKHdyaXRlRWxlbWVudHNDb21wYWN0KGpzLCBvcHRpb25zMiwgMCwgdHJ1ZSkpO1xuICB9IGVsc2Uge1xuICAgIGlmIChqc1tvcHRpb25zMi5kZWNsYXJhdGlvbktleV0pIHtcbiAgICAgIHhtbDIucHVzaCh3cml0ZURlY2xhcmF0aW9uKGpzW29wdGlvbnMyLmRlY2xhcmF0aW9uS2V5XSwgb3B0aW9uczIsIDApKTtcbiAgICB9XG4gICAgaWYgKGpzW29wdGlvbnMyLmVsZW1lbnRzS2V5XSAmJiBqc1tvcHRpb25zMi5lbGVtZW50c0tleV0ubGVuZ3RoKSB7XG4gICAgICB4bWwyLnB1c2god3JpdGVFbGVtZW50cyhqc1tvcHRpb25zMi5lbGVtZW50c0tleV0sIG9wdGlvbnMyLCAwLCAheG1sMi5sZW5ndGgpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHhtbDIuam9pbihcIlwiKTtcbn07XG52YXIganMyeG1sJDEgPSBqczJ4bWwkMjtcbnZhciBqc29uMnhtbCQxID0gZnVuY3Rpb24oanNvbiwgb3B0aW9uczIpIHtcbiAgaWYgKGpzb24gaW5zdGFuY2VvZiBCdWZmZXIpIHtcbiAgICBqc29uID0ganNvbi50b1N0cmluZygpO1xuICB9XG4gIHZhciBqcyA9IG51bGw7XG4gIGlmICh0eXBlb2YganNvbiA9PT0gXCJzdHJpbmdcIikge1xuICAgIHRyeSB7XG4gICAgICBqcyA9IEpTT04ucGFyc2UoanNvbik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIEpTT04gc3RydWN0dXJlIGlzIGludmFsaWRcIik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGpzID0ganNvbjtcbiAgfVxuICByZXR1cm4ganMyeG1sJDEoanMsIG9wdGlvbnMyKTtcbn07XG52YXIgeG1sMmpzID0geG1sMmpzJDI7XG52YXIgeG1sMmpzb24gPSB4bWwyanNvbiQxO1xudmFyIGpzMnhtbCA9IGpzMnhtbCQyO1xudmFyIGpzb24yeG1sID0ganNvbjJ4bWwkMTtcbnZhciBsaWIgPSB7XG4gIHhtbDJqcyxcbiAgeG1sMmpzb24sXG4gIGpzMnhtbCxcbiAganNvbjJ4bWxcbn07XG5jb25zdCBjb252ZXJ0VG9YbWxDb21wb25lbnQgPSAoZWxlbWVudDIpID0+IHtcbiAgc3dpdGNoIChlbGVtZW50Mi50eXBlKSB7XG4gICAgY2FzZSB2b2lkIDA6XG4gICAgY2FzZSBcImVsZW1lbnRcIjpcbiAgICAgIGNvbnN0IHhtbENvbXBvbmVudCA9IG5ldyBJbXBvcnRlZFhtbENvbXBvbmVudChlbGVtZW50Mi5uYW1lLCBlbGVtZW50Mi5hdHRyaWJ1dGVzKTtcbiAgICAgIGNvbnN0IGNoaWxkRWxlbWVudHMgPSBlbGVtZW50Mi5lbGVtZW50cyB8fCBbXTtcbiAgICAgIGZvciAoY29uc3QgY2hpbGRFbG0gb2YgY2hpbGRFbGVtZW50cykge1xuICAgICAgICBjb25zdCBjaGlsZCA9IGNvbnZlcnRUb1htbENvbXBvbmVudChjaGlsZEVsbSk7XG4gICAgICAgIGlmIChjaGlsZCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgeG1sQ29tcG9uZW50LnB1c2goY2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4geG1sQ29tcG9uZW50O1xuICAgIGNhc2UgXCJ0ZXh0XCI6XG4gICAgICByZXR1cm4gZWxlbWVudDIudGV4dDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxufTtcbmNsYXNzIEltcG9ydGVkWG1sQ29tcG9uZW50QXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIC8vIG5vb3Bcbn1cbmNsYXNzIEltcG9ydGVkWG1sQ29tcG9uZW50IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoZSB4bWwgc3RyaW5nIHRvIGEgWG1sQ29tcG9uZW50IHRyZWUuXG4gICAqXG4gICAqIEBwYXJhbSBpbXBvcnRlZENvbnRlbnQgeG1sIGNvbnRlbnQgb2YgdGhlIGltcG9ydGVkIGNvbXBvbmVudFxuICAgKi9cbiAgc3RhdGljIGZyb21YbWxTdHJpbmcoaW1wb3J0ZWRDb250ZW50KSB7XG4gICAgY29uc3QgeG1sT2JqID0gbGliLnhtbDJqcyhpbXBvcnRlZENvbnRlbnQsIHsgY29tcGFjdDogZmFsc2UgfSk7XG4gICAgcmV0dXJuIGNvbnZlcnRUb1htbENvbXBvbmVudCh4bWxPYmopO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0aGUgeG1sIHN0cmluZyB0byBhIFhtbENvbXBvbmVudCB0cmVlLlxuICAgKlxuICAgKiBAcGFyYW0gaW1wb3J0ZWRDb250ZW50IHhtbCBjb250ZW50IG9mIHRoZSBpbXBvcnRlZCBjb21wb25lbnRcbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIGNvbnN0cnVjdG9yKHJvb3RLZXksIF9hdHRyKSB7XG4gICAgc3VwZXIocm9vdEtleSk7XG4gICAgaWYgKF9hdHRyKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgSW1wb3J0ZWRYbWxDb21wb25lbnRBdHRyaWJ1dGVzKF9hdHRyKSk7XG4gICAgfVxuICB9XG4gIHB1c2goeG1sQ29tcG9uZW50KSB7XG4gICAgdGhpcy5yb290LnB1c2goeG1sQ29tcG9uZW50KTtcbiAgfVxufVxuY2xhc3MgSW1wb3J0ZWRSb290RWxlbWVudEF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBjb25zdHJ1Y3RvcihfYXR0cikge1xuICAgIHN1cGVyKFwiXCIpO1xuICAgIHRoaXMuX2F0dHIgPSBfYXR0cjtcbiAgfVxuICBwcmVwRm9yWG1sKF8pIHtcbiAgICByZXR1cm4ge1xuICAgICAgX2F0dHI6IHRoaXMuX2F0dHJcbiAgICB9O1xuICB9XG59XG5jb25zdCBXT1JLQVJPVU5EMyA9IFwiXCI7XG5jbGFzcyBJbml0aWFsaXphYmxlWG1sQ29tcG9uZW50IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iocm9vdEtleSwgaW5pdENvbXBvbmVudCkge1xuICAgIHN1cGVyKHJvb3RLZXkpO1xuICAgIGlmIChpbml0Q29tcG9uZW50KSB7XG4gICAgICB0aGlzLnJvb3QgPSBpbml0Q29tcG9uZW50LnJvb3Q7XG4gICAgfVxuICB9XG59XG5jb25zdCBkZWNpbWFsTnVtYmVyID0gKHZhbCkgPT4ge1xuICBpZiAoaXNOYU4odmFsKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB2YWx1ZSAnJHt2YWx9JyBzcGVjaWZpZWQuIE11c3QgYmUgYW4gaW50ZWdlci5gKTtcbiAgfVxuICByZXR1cm4gTWF0aC5mbG9vcih2YWwpO1xufTtcbmNvbnN0IHVuc2lnbmVkRGVjaW1hbE51bWJlciA9ICh2YWwpID0+IHtcbiAgY29uc3QgdmFsdWUgPSBkZWNpbWFsTnVtYmVyKHZhbCk7XG4gIGlmICh2YWx1ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdmFsdWUgJyR7dmFsfScgc3BlY2lmaWVkLiBNdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlci5gKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59O1xuY29uc3QgaGV4QmluYXJ5ID0gKHZhbCwgbGVuZ3RoKSA9PiB7XG4gIGNvbnN0IGV4cGVjdGVkTGVuZ3RoID0gbGVuZ3RoICogMjtcbiAgaWYgKHZhbC5sZW5ndGggIT09IGV4cGVjdGVkTGVuZ3RoIHx8IGlzTmFOKE51bWJlcihgMHgke3ZhbH1gKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgaGV4IHZhbHVlICcke3ZhbH0nLiBFeHBlY3RlZCAke2V4cGVjdGVkTGVuZ3RofSBkaWdpdCBoZXggdmFsdWVgKTtcbiAgfVxuICByZXR1cm4gdmFsO1xufTtcbmNvbnN0IGxvbmdIZXhOdW1iZXIgPSAodmFsKSA9PiBoZXhCaW5hcnkodmFsLCA0KTtcbmNvbnN0IHNob3J0SGV4TnVtYmVyID0gKHZhbCkgPT4gaGV4QmluYXJ5KHZhbCwgMik7XG5jb25zdCB1Q2hhckhleE51bWJlciA9ICh2YWwpID0+IGhleEJpbmFyeSh2YWwsIDEpO1xuY29uc3QgdW5pdmVyc2FsTWVhc3VyZVZhbHVlID0gKHZhbCkgPT4ge1xuICBjb25zdCB1bml0ID0gdmFsLnNsaWNlKC0yKTtcbiAgY29uc3QgYW1vdW50ID0gdmFsLnN1YnN0cmluZygwLCB2YWwubGVuZ3RoIC0gMik7XG4gIHJldHVybiBgJHtOdW1iZXIoYW1vdW50KX0ke3VuaXR9YDtcbn07XG5jb25zdCBwb3NpdGl2ZVVuaXZlcnNhbE1lYXN1cmVWYWx1ZSA9ICh2YWwpID0+IHtcbiAgY29uc3QgdmFsdWUgPSB1bml2ZXJzYWxNZWFzdXJlVmFsdWUodmFsKTtcbiAgaWYgKHBhcnNlRmxvYXQodmFsdWUpIDwgMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB2YWx1ZSAnJHt2YWx1ZX0nIHNwZWNpZmllZC4gRXhwZWN0ZWQgYSBwb3NpdGl2ZSBudW1iZXIuYCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufTtcbmNvbnN0IGhleENvbG9yVmFsdWUgPSAodmFsKSA9PiB7XG4gIGlmICh2YWwgPT09IFwiYXV0b1wiKSB7XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuICBjb25zdCBjb2xvciA9IHZhbC5jaGFyQXQoMCkgPT09IFwiI1wiID8gdmFsLnN1YnN0cmluZygxKSA6IHZhbDtcbiAgcmV0dXJuIGhleEJpbmFyeShjb2xvciwgMyk7XG59O1xuY29uc3Qgc2lnbmVkVHdpcHNNZWFzdXJlVmFsdWUgPSAodmFsKSA9PiB0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiID8gdW5pdmVyc2FsTWVhc3VyZVZhbHVlKHZhbCkgOiBkZWNpbWFsTnVtYmVyKHZhbCk7XG5jb25zdCBocHNNZWFzdXJlVmFsdWUgPSAodmFsKSA9PiB0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiID8gcG9zaXRpdmVVbml2ZXJzYWxNZWFzdXJlVmFsdWUodmFsKSA6IHVuc2lnbmVkRGVjaW1hbE51bWJlcih2YWwpO1xuY29uc3Qgc2lnbmVkSHBzTWVhc3VyZVZhbHVlID0gKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIiA/IHVuaXZlcnNhbE1lYXN1cmVWYWx1ZSh2YWwpIDogZGVjaW1hbE51bWJlcih2YWwpO1xuY29uc3QgdHdpcHNNZWFzdXJlVmFsdWUgPSAodmFsKSA9PiB0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiID8gcG9zaXRpdmVVbml2ZXJzYWxNZWFzdXJlVmFsdWUodmFsKSA6IHVuc2lnbmVkRGVjaW1hbE51bWJlcih2YWwpO1xuY29uc3QgcGVyY2VudGFnZVZhbHVlID0gKHZhbCkgPT4ge1xuICBjb25zdCBwZXJjZW50ID0gdmFsLnN1YnN0cmluZygwLCB2YWwubGVuZ3RoIC0gMSk7XG4gIHJldHVybiBgJHtOdW1iZXIocGVyY2VudCl9JWA7XG59O1xuY29uc3QgbWVhc3VyZW1lbnRPclBlcmNlbnRWYWx1ZSA9ICh2YWwpID0+IHtcbiAgaWYgKHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gZGVjaW1hbE51bWJlcih2YWwpO1xuICB9XG4gIGlmICh2YWwuc2xpY2UoLTEpID09PSBcIiVcIikge1xuICAgIHJldHVybiBwZXJjZW50YWdlVmFsdWUodmFsKTtcbiAgfVxuICByZXR1cm4gdW5pdmVyc2FsTWVhc3VyZVZhbHVlKHZhbCk7XG59O1xuY29uc3QgZWlnaHRoUG9pbnRNZWFzdXJlVmFsdWUgPSB1bnNpZ25lZERlY2ltYWxOdW1iZXI7XG5jb25zdCBwb2ludE1lYXN1cmVWYWx1ZSA9IHVuc2lnbmVkRGVjaW1hbE51bWJlcjtcbmNvbnN0IGRhdGVUaW1lVmFsdWUgPSAodmFsKSA9PiB2YWwudG9JU09TdHJpbmcoKTtcbmNsYXNzIE9uT2ZmRWxlbWVudCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIHZhbCA9IHRydWUpIHtcbiAgICBzdXBlcihuYW1lKTtcbiAgICBpZiAodmFsICE9PSB0cnVlKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgQXR0cmlidXRlcyh7IHZhbCB9KSk7XG4gICAgfVxuICB9XG59XG5jbGFzcyBIcHNNZWFzdXJlRWxlbWVudCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIHZhbCkge1xuICAgIHN1cGVyKG5hbWUpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBBdHRyaWJ1dGVzKHsgdmFsOiBocHNNZWFzdXJlVmFsdWUodmFsKSB9KSk7XG4gIH1cbn1cbmNsYXNzIEVtcHR5RWxlbWVudCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG59XG5jbGFzcyBTdHJpbmdWYWx1ZUVsZW1lbnQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihuYW1lLCB2YWwpIHtcbiAgICBzdXBlcihuYW1lKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgQXR0cmlidXRlcyh7IHZhbCB9KSk7XG4gIH1cbn1cbmNvbnN0IGNyZWF0ZVN0cmluZ0VsZW1lbnQgPSAobmFtZSwgdmFsdWUpID0+IG5ldyBCdWlsZGVyRWxlbWVudCh7XG4gIG5hbWUsXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICB2YWx1ZTogeyBrZXk6IFwidzp2YWxcIiwgdmFsdWUgfVxuICB9XG59KTtcbmNsYXNzIE51bWJlclZhbHVlRWxlbWVudCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIHZhbCkge1xuICAgIHN1cGVyKG5hbWUpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBBdHRyaWJ1dGVzKHsgdmFsIH0pKTtcbiAgfVxufVxuY2xhc3MgU3RyaW5nRW51bVZhbHVlRWxlbWVudCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIHZhbCkge1xuICAgIHN1cGVyKG5hbWUpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBBdHRyaWJ1dGVzKHsgdmFsIH0pKTtcbiAgfVxufVxuY2xhc3MgU3RyaW5nQ29udGFpbmVyIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IobmFtZSwgdmFsKSB7XG4gICAgc3VwZXIobmFtZSk7XG4gICAgdGhpcy5yb290LnB1c2godmFsKTtcbiAgfVxufVxuY2xhc3MgQnVpbGRlckVsZW1lbnQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgbmFtZSxcbiAgICBhdHRyaWJ1dGVzLFxuICAgIGNoaWxkcmVuXG4gIH0pIHtcbiAgICBzdXBlcihuYW1lKTtcbiAgICBpZiAoYXR0cmlidXRlcykge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE5leHRBdHRyaWJ1dGVDb21wb25lbnQoYXR0cmlidXRlcykpO1xuICAgIH1cbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKC4uLmNoaWxkcmVuKTtcbiAgICB9XG4gIH1cbn1cbmNvbnN0IEFsaWdubWVudFR5cGUgPSB7XG4gIC8qKiBBbGlnbiBTdGFydCAqL1xuICBTVEFSVDogXCJzdGFydFwiLFxuICAvKiogQWxpZ24gQ2VudGVyICovXG4gIENFTlRFUjogXCJjZW50ZXJcIixcbiAgLyoqIEVuZCAqL1xuICBFTkQ6IFwiZW5kXCIsXG4gIC8qKiBKdXN0aWZpZWQgKi9cbiAgQk9USDogXCJib3RoXCIsXG4gIC8qKiBNZWRpdW0gS2FzaGlkYSBMZW5ndGggKi9cbiAgTUVESVVNX0tBU0hJREE6IFwibWVkaXVtS2FzaGlkYVwiLFxuICAvKiogRGlzdHJpYnV0ZSBBbGwgQ2hhcmFjdGVycyBFcXVhbGx5ICovXG4gIERJU1RSSUJVVEU6IFwiZGlzdHJpYnV0ZVwiLFxuICAvKiogQWxpZ24gdG8gTGlzdCBUYWIgKi9cbiAgTlVNX1RBQjogXCJudW1UYWJcIixcbiAgLyoqIFdpZGVzdCBLYXNoaWRhIExlbmd0aCAqL1xuICBISUdIX0tBU0hJREE6IFwiaGlnaEthc2hpZGFcIixcbiAgLyoqIExvdyBLYXNoaWRhIExlbmd0aCAqL1xuICBMT1dfS0FTSElEQTogXCJsb3dLYXNoaWRhXCIsXG4gIC8qKiBUaGFpIExhbmd1YWdlIEp1c3RpZmljYXRpb24gKi9cbiAgVEhBSV9ESVNUUklCVVRFOiBcInRoYWlEaXN0cmlidXRlXCIsXG4gIC8qKiBBbGlnbiBMZWZ0ICovXG4gIExFRlQ6IFwibGVmdFwiLFxuICAvKiogQWxpZ24gUmlnaHQgKi9cbiAgUklHSFQ6IFwicmlnaHRcIixcbiAgLyoqIEp1c3RpZmllZCAqL1xuICBKVVNUSUZJRUQ6IFwiYm90aFwiXG59O1xuY2xhc3MgQWxpZ25tZW50QXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwgeyB2YWw6IFwidzp2YWxcIiB9KTtcbiAgfVxufVxuY2xhc3MgQWxpZ25tZW50IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodHlwZTIpIHtcbiAgICBzdXBlcihcInc6amNcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IEFsaWdubWVudEF0dHJpYnV0ZXMoeyB2YWw6IHR5cGUyIH0pKTtcbiAgfVxufVxuY2xhc3MgQm9yZGVyRWxlbWVudCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnROYW1lLCB7IGNvbG9yLCBzaXplLCBzcGFjZSwgc3R5bGUgfSkge1xuICAgIHN1cGVyKGVsZW1lbnROYW1lKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBCb3JkZXJzQXR0cmlidXRlcyh7XG4gICAgICAgIHN0eWxlLFxuICAgICAgICBjb2xvcjogY29sb3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGhleENvbG9yVmFsdWUoY29sb3IpLFxuICAgICAgICBzaXplOiBzaXplID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlaWdodGhQb2ludE1lYXN1cmVWYWx1ZShzaXplKSxcbiAgICAgICAgc3BhY2U6IHNwYWNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwb2ludE1lYXN1cmVWYWx1ZShzcGFjZSlcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgQm9yZGVyc0F0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIHN0eWxlOiBcInc6dmFsXCIsXG4gICAgICBjb2xvcjogXCJ3OmNvbG9yXCIsXG4gICAgICBzaXplOiBcInc6c3pcIixcbiAgICAgIHNwYWNlOiBcInc6c3BhY2VcIlxuICAgIH0pO1xuICB9XG59XG5jb25zdCBCb3JkZXJTdHlsZSA9IHtcbiAgU0lOR0xFOiBcInNpbmdsZVwiLFxuICBEQVNIX0RPVF9TVFJPS0VEOiBcImRhc2hEb3RTdHJva2VkXCIsXG4gIERBU0hFRDogXCJkYXNoZWRcIixcbiAgREFTSF9TTUFMTF9HQVA6IFwiZGFzaFNtYWxsR2FwXCIsXG4gIERPVF9EQVNIOiBcImRvdERhc2hcIixcbiAgRE9UX0RPVF9EQVNIOiBcImRvdERvdERhc2hcIixcbiAgRE9UVEVEOiBcImRvdHRlZFwiLFxuICBET1VCTEU6IFwiZG91YmxlXCIsXG4gIERPVUJMRV9XQVZFOiBcImRvdWJsZVdhdmVcIixcbiAgSU5TRVQ6IFwiaW5zZXRcIixcbiAgTklMOiBcIm5pbFwiLFxuICBOT05FOiBcIm5vbmVcIixcbiAgT1VUU0VUOiBcIm91dHNldFwiLFxuICBUSElDSzogXCJ0aGlja1wiLFxuICBUSElDS19USElOX0xBUkdFX0dBUDogXCJ0aGlja1RoaW5MYXJnZUdhcFwiLFxuICBUSElDS19USElOX01FRElVTV9HQVA6IFwidGhpY2tUaGluTWVkaXVtR2FwXCIsXG4gIFRISUNLX1RISU5fU01BTExfR0FQOiBcInRoaWNrVGhpblNtYWxsR2FwXCIsXG4gIFRISU5fVEhJQ0tfTEFSR0VfR0FQOiBcInRoaW5UaGlja0xhcmdlR2FwXCIsXG4gIFRISU5fVEhJQ0tfTUVESVVNX0dBUDogXCJ0aGluVGhpY2tNZWRpdW1HYXBcIixcbiAgVEhJTl9USElDS19TTUFMTF9HQVA6IFwidGhpblRoaWNrU21hbGxHYXBcIixcbiAgVEhJTl9USElDS19USElOX0xBUkdFX0dBUDogXCJ0aGluVGhpY2tUaGluTGFyZ2VHYXBcIixcbiAgVEhJTl9USElDS19USElOX01FRElVTV9HQVA6IFwidGhpblRoaWNrVGhpbk1lZGl1bUdhcFwiLFxuICBUSElOX1RISUNLX1RISU5fU01BTExfR0FQOiBcInRoaW5UaGlja1RoaW5TbWFsbEdhcFwiLFxuICBUSFJFRV9EX0VNQk9TUzogXCJ0aHJlZURFbWJvc3NcIixcbiAgVEhSRUVfRF9FTkdSQVZFOiBcInRocmVlREVuZ3JhdmVcIixcbiAgVFJJUExFOiBcInRyaXBsZVwiLFxuICBXQVZFOiBcIndhdmVcIlxufTtcbmNsYXNzIEJvcmRlciBleHRlbmRzIElnbm9yZUlmRW1wdHlYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwidzpwQmRyXCIpO1xuICAgIGlmIChvcHRpb25zMi50b3ApIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCb3JkZXJFbGVtZW50KFwidzp0b3BcIiwgb3B0aW9uczIudG9wKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5ib3R0b20pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCb3JkZXJFbGVtZW50KFwidzpib3R0b21cIiwgb3B0aW9uczIuYm90dG9tKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5sZWZ0KSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgQm9yZGVyRWxlbWVudChcInc6bGVmdFwiLCBvcHRpb25zMi5sZWZ0KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5yaWdodCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IEJvcmRlckVsZW1lbnQoXCJ3OnJpZ2h0XCIsIG9wdGlvbnMyLnJpZ2h0KSk7XG4gICAgfVxuICB9XG59XG5jbGFzcyBUaGVtYXRpY0JyZWFrIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJ3OnBCZHJcIik7XG4gICAgY29uc3QgYm90dG9tID0gbmV3IEJvcmRlckVsZW1lbnQoXCJ3OmJvdHRvbVwiLCB7XG4gICAgICBjb2xvcjogXCJhdXRvXCIsXG4gICAgICBzcGFjZTogMSxcbiAgICAgIHN0eWxlOiBCb3JkZXJTdHlsZS5TSU5HTEUsXG4gICAgICBzaXplOiA2XG4gICAgfSk7XG4gICAgdGhpcy5yb290LnB1c2goYm90dG9tKTtcbiAgfVxufVxuY2xhc3MgSW5kZW50IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoeyBzdGFydCwgZW5kLCBsZWZ0LCByaWdodCwgaGFuZ2luZywgZmlyc3RMaW5lIH0pIHtcbiAgICBzdXBlcihcInc6aW5kXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IE5leHRBdHRyaWJ1dGVDb21wb25lbnQoe1xuICAgICAgICBzdGFydDoge1xuICAgICAgICAgIGtleTogXCJ3OnN0YXJ0XCIsXG4gICAgICAgICAgdmFsdWU6IHN0YXJ0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzaWduZWRUd2lwc01lYXN1cmVWYWx1ZShzdGFydClcbiAgICAgICAgfSxcbiAgICAgICAgZW5kOiB7XG4gICAgICAgICAga2V5OiBcInc6ZW5kXCIsXG4gICAgICAgICAgdmFsdWU6IGVuZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2lnbmVkVHdpcHNNZWFzdXJlVmFsdWUoZW5kKVxuICAgICAgICB9LFxuICAgICAgICBsZWZ0OiB7XG4gICAgICAgICAga2V5OiBcInc6bGVmdFwiLFxuICAgICAgICAgIHZhbHVlOiBsZWZ0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzaWduZWRUd2lwc01lYXN1cmVWYWx1ZShsZWZ0KVxuICAgICAgICB9LFxuICAgICAgICByaWdodDoge1xuICAgICAgICAgIGtleTogXCJ3OnJpZ2h0XCIsXG4gICAgICAgICAgdmFsdWU6IHJpZ2h0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzaWduZWRUd2lwc01lYXN1cmVWYWx1ZShyaWdodClcbiAgICAgICAgfSxcbiAgICAgICAgaGFuZ2luZzoge1xuICAgICAgICAgIGtleTogXCJ3OmhhbmdpbmdcIixcbiAgICAgICAgICB2YWx1ZTogaGFuZ2luZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogdHdpcHNNZWFzdXJlVmFsdWUoaGFuZ2luZylcbiAgICAgICAgfSxcbiAgICAgICAgZmlyc3RMaW5lOiB7XG4gICAgICAgICAga2V5OiBcInc6Zmlyc3RMaW5lXCIsXG4gICAgICAgICAgdmFsdWU6IGZpcnN0TGluZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdHdpcHNNZWFzdXJlVmFsdWUoZmlyc3RMaW5lKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmxldCBCcmVhayQxID0gY2xhc3MgQnJlYWsgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6YnJcIik7XG4gIH1cbn07XG5jb25zdCBGaWVsZENoYXJhY3RlclR5cGUgPSB7XG4gIEJFR0lOOiBcImJlZ2luXCIsXG4gIEVORDogXCJlbmRcIixcbiAgU0VQQVJBVEU6IFwic2VwYXJhdGVcIlxufTtcbmNsYXNzIEZpZENoYXJBdHRycyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwgeyB0eXBlOiBcInc6ZmxkQ2hhclR5cGVcIiwgZGlydHk6IFwidzpkaXJ0eVwiIH0pO1xuICB9XG59XG5jbGFzcyBCZWdpbiBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGRpcnR5KSB7XG4gICAgc3VwZXIoXCJ3OmZsZENoYXJcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IEZpZENoYXJBdHRycyh7IHR5cGU6IEZpZWxkQ2hhcmFjdGVyVHlwZS5CRUdJTiwgZGlydHkgfSkpO1xuICB9XG59XG5jbGFzcyBTZXBhcmF0ZSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGRpcnR5KSB7XG4gICAgc3VwZXIoXCJ3OmZsZENoYXJcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IEZpZENoYXJBdHRycyh7IHR5cGU6IEZpZWxkQ2hhcmFjdGVyVHlwZS5TRVBBUkFURSwgZGlydHkgfSkpO1xuICB9XG59XG5jbGFzcyBFbmQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihkaXJ0eSkge1xuICAgIHN1cGVyKFwidzpmbGRDaGFyXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBGaWRDaGFyQXR0cnMoeyB0eXBlOiBGaWVsZENoYXJhY3RlclR5cGUuRU5ELCBkaXJ0eSB9KSk7XG4gIH1cbn1cbmNvbnN0IEhvcml6b250YWxQb3NpdGlvbkFsaWduID0ge1xuICBDRU5URVI6IFwiY2VudGVyXCIsXG4gIElOU0lERTogXCJpbnNpZGVcIixcbiAgTEVGVDogXCJsZWZ0XCIsXG4gIE9VVFNJREU6IFwib3V0c2lkZVwiLFxuICBSSUdIVDogXCJyaWdodFwiXG59O1xuY29uc3QgVmVydGljYWxQb3NpdGlvbkFsaWduID0ge1xuICBCT1RUT006IFwiYm90dG9tXCIsXG4gIENFTlRFUjogXCJjZW50ZXJcIixcbiAgSU5TSURFOiBcImluc2lkZVwiLFxuICBPVVRTSURFOiBcIm91dHNpZGVcIixcbiAgVE9QOiBcInRvcFwiXG59O1xuY29uc3QgTnVtYmVyRm9ybWF0JDEgPSB7XG4gIERFQ0lNQUw6IFwiZGVjaW1hbFwiLFxuICBVUFBFUl9ST01BTjogXCJ1cHBlclJvbWFuXCIsXG4gIExPV0VSX1JPTUFOOiBcImxvd2VyUm9tYW5cIixcbiAgVVBQRVJfTEVUVEVSOiBcInVwcGVyTGV0dGVyXCIsXG4gIExPV0VSX0xFVFRFUjogXCJsb3dlckxldHRlclwiLFxuICBPUkRJTkFMOiBcIm9yZGluYWxcIixcbiAgQ0FSRElOQUxfVEVYVDogXCJjYXJkaW5hbFRleHRcIixcbiAgT1JESU5BTF9URVhUOiBcIm9yZGluYWxUZXh0XCIsXG4gIEhFWDogXCJoZXhcIixcbiAgQ0hJQ0FHTzogXCJjaGljYWdvXCIsXG4gIElERU9HUkFQSF9ESUdJVEFMOiBcImlkZW9ncmFwaERpZ2l0YWxcIixcbiAgSkFQQU5FU0VfQ09VTlRJTkc6IFwiamFwYW5lc2VDb3VudGluZ1wiLFxuICBBSVVFTzogXCJhaXVlb1wiLFxuICBJUk9IQTogXCJpcm9oYVwiLFxuICBERUNJTUFMX0ZVTExfV0lEVEg6IFwiZGVjaW1hbEZ1bGxXaWR0aFwiLFxuICBERUNJTUFMX0hBTEZfV0lEVEg6IFwiZGVjaW1hbEhhbGZXaWR0aFwiLFxuICBKQVBBTkVTRV9MRUdBTDogXCJqYXBhbmVzZUxlZ2FsXCIsXG4gIEpBUEFORVNFX0RJR0lUQUxfVEVOX1RIT1VTQU5EOiBcImphcGFuZXNlRGlnaXRhbFRlblRob3VzYW5kXCIsXG4gIERFQ0lNQUxfRU5DTE9TRURfQ0lSQ0xFOiBcImRlY2ltYWxFbmNsb3NlZENpcmNsZVwiLFxuICBERUNJTUFMX0ZVTExfV0lEVEhfMjogXCJkZWNpbWFsRnVsbFdpZHRoMlwiLFxuICBBSVVFT19GVUxMX1dJRFRIOiBcImFpdWVvRnVsbFdpZHRoXCIsXG4gIElST0hBX0ZVTExfV0lEVEg6IFwiaXJvaGFGdWxsV2lkdGhcIixcbiAgREVDSU1BTF9aRVJPOiBcImRlY2ltYWxaZXJvXCIsXG4gIEJVTExFVDogXCJidWxsZXRcIixcbiAgR0FOQURBOiBcImdhbmFkYVwiLFxuICBDSE9TVU5HOiBcImNob3N1bmdcIixcbiAgREVDSU1BTF9FTkNMT1NFRF9GVUxMX1NUT1A6IFwiZGVjaW1hbEVuY2xvc2VkRnVsbHN0b3BcIixcbiAgREVDSU1BTF9FTkNMT1NFRF9QQVJFTjogXCJkZWNpbWFsRW5jbG9zZWRQYXJlblwiLFxuICBERUNJTUFMX0VOQ0xPU0VEX0NJUkNMRV9DSElORVNFOiBcImRlY2ltYWxFbmNsb3NlZENpcmNsZUNoaW5lc2VcIixcbiAgSURFT0dSQVBIX0VOQ0xPU0VEX0NJUkNMRTogXCJpZGVvZ3JhcGhFbmNsb3NlZENpcmNsZVwiLFxuICBJREVPR1JBUEhfVFJBRElUSU9OQUw6IFwiaWRlb2dyYXBoVHJhZGl0aW9uYWxcIixcbiAgSURFT0dSQVBIX1pPRElBQzogXCJpZGVvZ3JhcGhab2RpYWNcIixcbiAgSURFT0dSQVBIX1pPRElBQ19UUkFESVRJT05BTDogXCJpZGVvZ3JhcGhab2RpYWNUcmFkaXRpb25hbFwiLFxuICBUQUlXQU5FU0VfQ09VTlRJTkc6IFwidGFpd2FuZXNlQ291bnRpbmdcIixcbiAgSURFT0dSQVBIX0xFR0FMX1RSQURJVElPTkFMOiBcImlkZW9ncmFwaExlZ2FsVHJhZGl0aW9uYWxcIixcbiAgVEFJV0FORVNFX0NPVU5USU5HX1RIT1VTQU5EOiBcInRhaXdhbmVzZUNvdW50aW5nVGhvdXNhbmRcIixcbiAgVEFJV0FORVNFX0RJR0lUQUw6IFwidGFpd2FuZXNlRGlnaXRhbFwiLFxuICBDSElORVNFX0NPVU5USU5HOiBcImNoaW5lc2VDb3VudGluZ1wiLFxuICBDSElORVNFX0xFR0FMX1NJTVBMSUZJRUQ6IFwiY2hpbmVzZUxlZ2FsU2ltcGxpZmllZFwiLFxuICBDSElORVNFX0NPVU5USU5HX1RFTl9USE9VU0FORDogXCJjaGluZXNlQ291bnRpbmdUaG91c2FuZFwiLFxuICBLT1JFQU5fRElHSVRBTDogXCJrb3JlYW5EaWdpdGFsXCIsXG4gIEtPUkVBTl9DT1VOVElORzogXCJrb3JlYW5Db3VudGluZ1wiLFxuICBLT1JFQU5fTEVHQUw6IFwia29yZWFuTGVnYWxcIixcbiAgS09SRUFOX0RJR0lUQUxfMjogXCJrb3JlYW5EaWdpdGFsMlwiLFxuICBWSUVUTkFNRVNFX0NPVU5USU5HOiBcInZpZXRuYW1lc2VDb3VudGluZ1wiLFxuICBSVVNTSUFOX0xPV0VSOiBcInJ1c3NpYW5Mb3dlclwiLFxuICBSVVNTSUFOX1VQUEVSOiBcInJ1c3NpYW5VcHBlclwiLFxuICBOT05FOiBcIm5vbmVcIixcbiAgTlVNQkVSX0lOX0RBU0g6IFwibnVtYmVySW5EYXNoXCIsXG4gIEhFQlJFV18xOiBcImhlYnJldzFcIixcbiAgSEVCUkVXXzI6IFwiaGVicmV3MlwiLFxuICBBUkFCSUNfQUxQSEE6IFwiYXJhYmljQWxwaGFcIixcbiAgQVJBQklDX0FCSkFEOiBcImFyYWJpY0FiamFkXCIsXG4gIEhJTkRJX1ZPV0VMUzogXCJoaW5kaVZvd2Vsc1wiLFxuICBISU5ESV9DT05TT05BTlRTOiBcImhpbmRpQ29uc29uYW50c1wiLFxuICBISU5ESV9OVU1CRVJTOiBcImhpbmRpTnVtYmVyc1wiLFxuICBISU5ESV9DT1VOVElORzogXCJoaW5kaUNvdW50aW5nXCIsXG4gIFRIQUlfTEVUVEVSUzogXCJ0aGFpTGV0dGVyc1wiLFxuICBUSEFJX05VTUJFUlM6IFwidGhhaU51bWJlcnNcIixcbiAgVEhBSV9DT1VOVElORzogXCJ0aGFpQ291bnRpbmdcIixcbiAgQkFIVF9URVhUOiBcImJhaHRUZXh0XCIsXG4gIERPTExBUl9URVhUOiBcImRvbGxhclRleHRcIlxuICAvLyAgIDx4c2Q6ZW51bWVyYXRpb24gdmFsdWU9XCJjdXN0b21cIi8+XG59O1xuY29uc3QgU3BhY2VUeXBlID0ge1xuICBERUZBVUxUOiBcImRlZmF1bHRcIixcbiAgUFJFU0VSVkU6IFwicHJlc2VydmVcIlxufTtcbmNsYXNzIFRleHRBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7IHNwYWNlOiBcInhtbDpzcGFjZVwiIH0pO1xuICB9XG59XG5jbGFzcyBQYWdlIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJ3Omluc3RyVGV4dFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgVGV4dEF0dHJpYnV0ZXMoeyBzcGFjZTogU3BhY2VUeXBlLlBSRVNFUlZFIH0pKTtcbiAgICB0aGlzLnJvb3QucHVzaChcIlBBR0VcIik7XG4gIH1cbn1cbmNsYXNzIE51bWJlck9mUGFnZXMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6aW5zdHJUZXh0XCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUZXh0QXR0cmlidXRlcyh7IHNwYWNlOiBTcGFjZVR5cGUuUFJFU0VSVkUgfSkpO1xuICAgIHRoaXMucm9vdC5wdXNoKFwiTlVNUEFHRVNcIik7XG4gIH1cbn1cbmNsYXNzIE51bWJlck9mUGFnZXNTZWN0aW9uIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJ3Omluc3RyVGV4dFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgVGV4dEF0dHJpYnV0ZXMoeyBzcGFjZTogU3BhY2VUeXBlLlBSRVNFUlZFIH0pKTtcbiAgICB0aGlzLnJvb3QucHVzaChcIlNFQ1RJT05QQUdFU1wiKTtcbiAgfVxufVxuY2xhc3MgQ3VycmVudFNlY3Rpb24gZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6aW5zdHJUZXh0XCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUZXh0QXR0cmlidXRlcyh7IHNwYWNlOiBTcGFjZVR5cGUuUFJFU0VSVkUgfSkpO1xuICAgIHRoaXMucm9vdC5wdXNoKFwiU0VDVElPTlwiKTtcbiAgfVxufVxuY2xhc3MgU2hhZGluZ0F0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIGZpbGw6IFwidzpmaWxsXCIsXG4gICAgICBjb2xvcjogXCJ3OmNvbG9yXCIsXG4gICAgICB0eXBlOiBcInc6dmFsXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgU2hhZGluZyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHsgZmlsbCwgY29sb3IsIHR5cGU6IHR5cGUyIH0pIHtcbiAgICBzdXBlcihcInc6c2hkXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IFNoYWRpbmdBdHRyaWJ1dGVzKHtcbiAgICAgICAgZmlsbDogZmlsbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaGV4Q29sb3JWYWx1ZShmaWxsKSxcbiAgICAgICAgY29sb3I6IGNvbG9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBoZXhDb2xvclZhbHVlKGNvbG9yKSxcbiAgICAgICAgdHlwZTogdHlwZTJcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY29uc3QgU2hhZGluZ1R5cGUgPSB7XG4gIENMRUFSOiBcImNsZWFyXCIsXG4gIERJQUdPTkFMX0NST1NTOiBcImRpYWdDcm9zc1wiLFxuICBESUFHT05BTF9TVFJJUEU6IFwiZGlhZ1N0cmlwZVwiLFxuICBIT1JJWk9OVEFMX0NST1NTOiBcImhvcnpDcm9zc1wiLFxuICBIT1JJWk9OVEFMX1NUUklQRTogXCJob3J6U3RyaXBlXCIsXG4gIE5JTDogXCJuaWxcIixcbiAgUEVSQ0VOVF81OiBcInBjdDVcIixcbiAgUEVSQ0VOVF8xMDogXCJwY3QxMFwiLFxuICBQRVJDRU5UXzEyOiBcInBjdDEyXCIsXG4gIFBFUkNFTlRfMTU6IFwicGN0MTVcIixcbiAgUEVSQ0VOVF8yMDogXCJwY3QyMFwiLFxuICBQRVJDRU5UXzI1OiBcInBjdDI1XCIsXG4gIFBFUkNFTlRfMzA6IFwicGN0MzBcIixcbiAgUEVSQ0VOVF8zNTogXCJwY3QzNVwiLFxuICBQRVJDRU5UXzM3OiBcInBjdDM3XCIsXG4gIFBFUkNFTlRfNDA6IFwicGN0NDBcIixcbiAgUEVSQ0VOVF80NTogXCJwY3Q0NVwiLFxuICBQRVJDRU5UXzUwOiBcInBjdDUwXCIsXG4gIFBFUkNFTlRfNTU6IFwicGN0NTVcIixcbiAgUEVSQ0VOVF82MDogXCJwY3Q2MFwiLFxuICBQRVJDRU5UXzYyOiBcInBjdDYyXCIsXG4gIFBFUkNFTlRfNjU6IFwicGN0NjVcIixcbiAgUEVSQ0VOVF83MDogXCJwY3Q3MFwiLFxuICBQRVJDRU5UXzc1OiBcInBjdDc1XCIsXG4gIFBFUkNFTlRfODA6IFwicGN0ODBcIixcbiAgUEVSQ0VOVF84NTogXCJwY3Q4NVwiLFxuICBQRVJDRU5UXzg3OiBcInBjdDg3XCIsXG4gIFBFUkNFTlRfOTA6IFwicGN0OTBcIixcbiAgUEVSQ0VOVF85NTogXCJwY3Q5NVwiLFxuICBSRVZFUlNFX0RJQUdPTkFMX1NUUklQRTogXCJyZXZlcnNlRGlhZ1N0cmlwZVwiLFxuICBTT0xJRDogXCJzb2xpZFwiLFxuICBUSElOX0RJQUdPTkFMX0NST1NTOiBcInRoaW5EaWFnQ3Jvc3NcIixcbiAgVEhJTl9ESUFHT05BTF9TVFJJUEU6IFwidGhpbkRpYWdTdHJpcGVcIixcbiAgVEhJTl9IT1JJWk9OVEFMX0NST1NTOiBcInRoaW5Ib3J6Q3Jvc3NcIixcbiAgVEhJTl9SRVZFUlNFX0RJQUdPTkFMX1NUUklQRTogXCJ0aGluUmV2ZXJzZURpYWdTdHJpcGVcIixcbiAgVEhJTl9WRVJUSUNBTF9TVFJJUEU6IFwidGhpblZlcnRTdHJpcGVcIixcbiAgVkVSVElDQUxfU1RSSVBFOiBcInZlcnRTdHJpcGVcIlxufTtcbmNsYXNzIENoYW5nZUF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIGlkOiBcInc6aWRcIixcbiAgICAgIGF1dGhvcjogXCJ3OmF1dGhvclwiLFxuICAgICAgZGF0ZTogXCJ3OmRhdGVcIlxuICAgIH0pO1xuICB9XG59XG5jb25zdCBFbXBoYXNpc01hcmtUeXBlID0ge1xuICBET1Q6IFwiZG90XCJcbn07XG5jbGFzcyBCYXNlRW1waGFzaXNNYXJrIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoZW1waGFzaXNNYXJrVHlwZSkge1xuICAgIHN1cGVyKFwidzplbVwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBBdHRyaWJ1dGVzKHtcbiAgICAgICAgdmFsOiBlbXBoYXNpc01hcmtUeXBlXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNsYXNzIEVtcGhhc2lzTWFyayBleHRlbmRzIEJhc2VFbXBoYXNpc01hcmsge1xuICBjb25zdHJ1Y3RvcihlbXBoYXNpc01hcmtUeXBlID0gRW1waGFzaXNNYXJrVHlwZS5ET1QpIHtcbiAgICBzdXBlcihlbXBoYXNpc01hcmtUeXBlKTtcbiAgfVxufVxuY2xhc3MgRG90RW1waGFzaXNNYXJrIGV4dGVuZHMgQmFzZUVtcGhhc2lzTWFyayB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKEVtcGhhc2lzTWFya1R5cGUuRE9UKTtcbiAgfVxufVxuY2xhc3MgQ2hhcmFjdGVyU3BhY2luZyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgc3VwZXIoXCJ3OnNwYWNpbmdcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgQXR0cmlidXRlcyh7XG4gICAgICAgIHZhbDogc2lnbmVkVHdpcHNNZWFzdXJlVmFsdWUodmFsdWUpXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNsYXNzIENvbG9yIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoY29sb3IpIHtcbiAgICBzdXBlcihcInc6Y29sb3JcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgQXR0cmlidXRlcyh7XG4gICAgICAgIHZhbDogaGV4Q29sb3JWYWx1ZShjb2xvcilcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgSGlnaGxpZ2h0IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoY29sb3IpIHtcbiAgICBzdXBlcihcInc6aGlnaGxpZ2h0XCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IEF0dHJpYnV0ZXMoe1xuICAgICAgICB2YWw6IGNvbG9yXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNsYXNzIEhpZ2hsaWdodENvbXBsZXhTY3JpcHQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihjb2xvcikge1xuICAgIHN1cGVyKFwidzpoaWdobGlnaHRDc1wiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBBdHRyaWJ1dGVzKHtcbiAgICAgICAgdmFsOiBjb2xvclxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jb25zdCBjcmVhdGVMYW5ndWFnZUNvbXBvbmVudCA9IChvcHRpb25zMikgPT4gbmV3IEJ1aWxkZXJFbGVtZW50KHtcbiAgbmFtZTogXCJ3OmxhbmdcIixcbiAgYXR0cmlidXRlczoge1xuICAgIHZhbHVlOiB7XG4gICAgICBrZXk6IFwidzp2YWxcIixcbiAgICAgIHZhbHVlOiBvcHRpb25zMi52YWx1ZVxuICAgIH0sXG4gICAgZWFzdEFzaWE6IHtcbiAgICAgIGtleTogXCJ3OmVhc3RBc2lhXCIsXG4gICAgICB2YWx1ZTogb3B0aW9uczIuZWFzdEFzaWFcbiAgICB9LFxuICAgIGJpZGlyZWN0aW9uYWw6IHtcbiAgICAgIGtleTogXCJ3OmJpZGlcIixcbiAgICAgIHZhbHVlOiBvcHRpb25zMi5iaWRpcmVjdGlvbmFsXG4gICAgfVxuICB9XG59KTtcbmNsYXNzIFJ1bkZvbnRBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICBhc2NpaTogXCJ3OmFzY2lpXCIsXG4gICAgICBjczogXCJ3OmNzXCIsXG4gICAgICBlYXN0QXNpYTogXCJ3OmVhc3RBc2lhXCIsXG4gICAgICBoQW5zaTogXCJ3OmhBbnNpXCIsXG4gICAgICBoaW50OiBcInc6aGludFwiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIFJ1bkZvbnRzIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IobmFtZU9yQXR0cnMsIGhpbnQpIHtcbiAgICBzdXBlcihcInc6ckZvbnRzXCIpO1xuICAgIGlmICh0eXBlb2YgbmFtZU9yQXR0cnMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSBuYW1lT3JBdHRycztcbiAgICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgICBuZXcgUnVuRm9udEF0dHJpYnV0ZXMoe1xuICAgICAgICAgIGFzY2lpOiBuYW1lLFxuICAgICAgICAgIGNzOiBuYW1lLFxuICAgICAgICAgIGVhc3RBc2lhOiBuYW1lLFxuICAgICAgICAgIGhBbnNpOiBuYW1lLFxuICAgICAgICAgIGhpbnRcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGF0dHJzID0gbmFtZU9yQXR0cnM7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgUnVuRm9udEF0dHJpYnV0ZXMoYXR0cnMpKTtcbiAgICB9XG4gIH1cbn1cbmxldCBWZXJ0aWNhbEFsaWduJDEgPSBjbGFzcyBWZXJ0aWNhbEFsaWduIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodHlwZTIpIHtcbiAgICBzdXBlcihcInc6dmVydEFsaWduXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IEF0dHJpYnV0ZXMoe1xuICAgICAgICB2YWw6IHR5cGUyXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn07XG5jbGFzcyBTdXBlclNjcmlwdCBleHRlbmRzIFZlcnRpY2FsQWxpZ24kMSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwic3VwZXJzY3JpcHRcIik7XG4gIH1cbn1cbmNsYXNzIFN1YlNjcmlwdCBleHRlbmRzIFZlcnRpY2FsQWxpZ24kMSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwic3Vic2NyaXB0XCIpO1xuICB9XG59XG5jb25zdCBVbmRlcmxpbmVUeXBlID0ge1xuICBTSU5HTEU6IFwic2luZ2xlXCIsXG4gIFdPUkRTOiBcIndvcmRzXCIsXG4gIERPVUJMRTogXCJkb3VibGVcIixcbiAgVEhJQ0s6IFwidGhpY2tcIixcbiAgRE9UVEVEOiBcImRvdHRlZFwiLFxuICBET1RURURIRUFWWTogXCJkb3R0ZWRIZWF2eVwiLFxuICBEQVNIOiBcImRhc2hcIixcbiAgREFTSEVESEVBVlk6IFwiZGFzaGVkSGVhdnlcIixcbiAgREFTSExPTkc6IFwiZGFzaExvbmdcIixcbiAgREFTSExPTkdIRUFWWTogXCJkYXNoTG9uZ0hlYXZ5XCIsXG4gIERPVERBU0g6IFwiZG90RGFzaFwiLFxuICBEQVNIRE9USEVBVlk6IFwiZGFzaERvdEhlYXZ5XCIsXG4gIERPVERPVERBU0g6IFwiZG90RG90RGFzaFwiLFxuICBEQVNIRE9URE9USEVBVlk6IFwiZGFzaERvdERvdEhlYXZ5XCIsXG4gIFdBVkU6IFwid2F2ZVwiLFxuICBXQVZZSEVBVlk6IFwid2F2eUhlYXZ5XCIsXG4gIFdBVllET1VCTEU6IFwid2F2eURvdWJsZVwiLFxuICBOT05FOiBcIm5vbmVcIlxufTtcbmNsYXNzIFVuZGVybGluZSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHVuZGVybGluZVR5cGUgPSBVbmRlcmxpbmVUeXBlLlNJTkdMRSwgY29sb3IpIHtcbiAgICBzdXBlcihcInc6dVwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBBdHRyaWJ1dGVzKHtcbiAgICAgICAgdmFsOiB1bmRlcmxpbmVUeXBlLFxuICAgICAgICBjb2xvcjogY29sb3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGhleENvbG9yVmFsdWUoY29sb3IpXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNvbnN0IFRleHRFZmZlY3QgPSB7XG4gIEJMSU5LX0JBQ0tHUk9VTkQ6IFwiYmxpbmtCYWNrZ3JvdW5kXCIsXG4gIExJR0hUUzogXCJsaWdodHNcIixcbiAgQU5UU19CTEFDSzogXCJhbnRzQmxhY2tcIixcbiAgQU5UU19SRUQ6IFwiYW50c1JlZFwiLFxuICBTSElNTUVSOiBcInNoaW1tZXJcIixcbiAgU1BBUktMRTogXCJzcGFya2xlXCIsXG4gIE5PTkU6IFwibm9uZVwiXG59O1xuY29uc3QgSGlnaGxpZ2h0Q29sb3IgPSB7XG4gIEJMQUNLOiBcImJsYWNrXCIsXG4gIEJMVUU6IFwiYmx1ZVwiLFxuICBDWUFOOiBcImN5YW5cIixcbiAgREFSS19CTFVFOiBcImRhcmtCbHVlXCIsXG4gIERBUktfQ1lBTjogXCJkYXJrQ3lhblwiLFxuICBEQVJLX0dSQVk6IFwiZGFya0dyYXlcIixcbiAgREFSS19HUkVFTjogXCJkYXJrR3JlZW5cIixcbiAgREFSS19NQUdFTlRBOiBcImRhcmtNYWdlbnRhXCIsXG4gIERBUktfUkVEOiBcImRhcmtSZWRcIixcbiAgREFSS19ZRUxMT1c6IFwiZGFya1llbGxvd1wiLFxuICBHUkVFTjogXCJncmVlblwiLFxuICBMSUdIVF9HUkFZOiBcImxpZ2h0R3JheVwiLFxuICBNQUdFTlRBOiBcIm1hZ2VudGFcIixcbiAgTk9ORTogXCJub25lXCIsXG4gIFJFRDogXCJyZWRcIixcbiAgV0hJVEU6IFwid2hpdGVcIixcbiAgWUVMTE9XOiBcInllbGxvd1wiXG59O1xuY2xhc3MgUnVuUHJvcGVydGllcyBleHRlbmRzIElnbm9yZUlmRW1wdHlYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHZhciBfYSwgX2I7XG4gICAgc3VwZXIoXCJ3OnJQclwiKTtcbiAgICBpZiAoIW9wdGlvbnMyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5ub1Byb29mICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpub1Byb29mXCIsIG9wdGlvbnMyLm5vUHJvb2YpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmJvbGQgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmJcIiwgb3B0aW9uczIuYm9sZCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuYm9sZENvbXBsZXhTY3JpcHQgPT09IHZvaWQgMCAmJiBvcHRpb25zMi5ib2xkICE9PSB2b2lkIDAgfHwgb3B0aW9uczIuYm9sZENvbXBsZXhTY3JpcHQpIHtcbiAgICAgIHRoaXMucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpiQ3NcIiwgKF9hID0gb3B0aW9uczIuYm9sZENvbXBsZXhTY3JpcHQpICE9IG51bGwgPyBfYSA6IG9wdGlvbnMyLmJvbGQpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLml0YWxpY3MgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmlcIiwgb3B0aW9uczIuaXRhbGljcykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuaXRhbGljc0NvbXBsZXhTY3JpcHQgPT09IHZvaWQgMCAmJiBvcHRpb25zMi5pdGFsaWNzICE9PSB2b2lkIDAgfHwgb3B0aW9uczIuaXRhbGljc0NvbXBsZXhTY3JpcHQpIHtcbiAgICAgIHRoaXMucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzppQ3NcIiwgKF9iID0gb3B0aW9uczIuaXRhbGljc0NvbXBsZXhTY3JpcHQpICE9IG51bGwgPyBfYiA6IG9wdGlvbnMyLml0YWxpY3MpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnVuZGVybGluZSkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBVbmRlcmxpbmUob3B0aW9uczIudW5kZXJsaW5lLnR5cGUsIG9wdGlvbnMyLnVuZGVybGluZS5jb2xvcikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuZWZmZWN0KSB7XG4gICAgICB0aGlzLnB1c2gobmV3IFN0cmluZ1ZhbHVlRWxlbWVudChcInc6ZWZmZWN0XCIsIG9wdGlvbnMyLmVmZmVjdCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuZW1waGFzaXNNYXJrKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IEVtcGhhc2lzTWFyayhvcHRpb25zMi5lbXBoYXNpc01hcmsudHlwZSkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuY29sb3IpIHtcbiAgICAgIHRoaXMucHVzaChuZXcgQ29sb3Iob3B0aW9uczIuY29sb3IpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmtlcm4pIHtcbiAgICAgIHRoaXMucHVzaChuZXcgSHBzTWVhc3VyZUVsZW1lbnQoXCJ3Omtlcm5cIiwgb3B0aW9uczIua2VybikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIucG9zaXRpb24pIHtcbiAgICAgIHRoaXMucHVzaChuZXcgU3RyaW5nVmFsdWVFbGVtZW50KFwidzpwb3NpdGlvblwiLCBvcHRpb25zMi5wb3NpdGlvbikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuc2l6ZSAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IEhwc01lYXN1cmVFbGVtZW50KFwidzpzelwiLCBvcHRpb25zMi5zaXplKSk7XG4gICAgfVxuICAgIGNvbnN0IHN6Q3MgPSBvcHRpb25zMi5zaXplQ29tcGxleFNjcmlwdCA9PT0gdm9pZCAwIHx8IG9wdGlvbnMyLnNpemVDb21wbGV4U2NyaXB0ID09PSB0cnVlID8gb3B0aW9uczIuc2l6ZSA6IG9wdGlvbnMyLnNpemVDb21wbGV4U2NyaXB0O1xuICAgIGlmIChzekNzKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IEhwc01lYXN1cmVFbGVtZW50KFwidzpzekNzXCIsIHN6Q3MpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnJpZ2h0VG9MZWZ0ICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpydGxcIiwgb3B0aW9uczIucmlnaHRUb0xlZnQpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnNtYWxsQ2FwcyAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6c21hbGxDYXBzXCIsIG9wdGlvbnMyLnNtYWxsQ2FwcykpO1xuICAgIH0gZWxzZSBpZiAob3B0aW9uczIuYWxsQ2FwcyAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6Y2Fwc1wiLCBvcHRpb25zMi5hbGxDYXBzKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5zdHJpa2UgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OnN0cmlrZVwiLCBvcHRpb25zMi5zdHJpa2UpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmRvdWJsZVN0cmlrZSAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6ZHN0cmlrZVwiLCBvcHRpb25zMi5kb3VibGVTdHJpa2UpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnN1YlNjcmlwdCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBTdWJTY3JpcHQoKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5zdXBlclNjcmlwdCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBTdXBlclNjcmlwdCgpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnN0eWxlKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IFN0cmluZ1ZhbHVlRWxlbWVudChcInc6clN0eWxlXCIsIG9wdGlvbnMyLnN0eWxlKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5mb250KSB7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMyLmZvbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdGhpcy5wdXNoKG5ldyBSdW5Gb250cyhvcHRpb25zMi5mb250KSk7XG4gICAgICB9IGVsc2UgaWYgKFwibmFtZVwiIGluIG9wdGlvbnMyLmZvbnQpIHtcbiAgICAgICAgdGhpcy5wdXNoKG5ldyBSdW5Gb250cyhvcHRpb25zMi5mb250Lm5hbWUsIG9wdGlvbnMyLmZvbnQuaGludCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wdXNoKG5ldyBSdW5Gb250cyhvcHRpb25zMi5mb250KSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5oaWdobGlnaHQpIHtcbiAgICAgIHRoaXMucHVzaChuZXcgSGlnaGxpZ2h0KG9wdGlvbnMyLmhpZ2hsaWdodCkpO1xuICAgIH1cbiAgICBjb25zdCBoaWdobGlnaHRDcyA9IG9wdGlvbnMyLmhpZ2hsaWdodENvbXBsZXhTY3JpcHQgPT09IHZvaWQgMCB8fCBvcHRpb25zMi5oaWdobGlnaHRDb21wbGV4U2NyaXB0ID09PSB0cnVlID8gb3B0aW9uczIuaGlnaGxpZ2h0IDogb3B0aW9uczIuaGlnaGxpZ2h0Q29tcGxleFNjcmlwdDtcbiAgICBpZiAoaGlnaGxpZ2h0Q3MpIHtcbiAgICAgIHRoaXMucHVzaChuZXcgSGlnaGxpZ2h0Q29tcGxleFNjcmlwdChoaWdobGlnaHRDcykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuY2hhcmFjdGVyU3BhY2luZykge1xuICAgICAgdGhpcy5wdXNoKG5ldyBDaGFyYWN0ZXJTcGFjaW5nKG9wdGlvbnMyLmNoYXJhY3RlclNwYWNpbmcpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmVtYm9zcyAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6ZW1ib3NzXCIsIG9wdGlvbnMyLmVtYm9zcykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuaW1wcmludCAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6aW1wcmludFwiLCBvcHRpb25zMi5pbXByaW50KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5zaGFkaW5nKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IFNoYWRpbmcob3B0aW9uczIuc2hhZGluZykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIucmV2aXNpb24pIHtcbiAgICAgIHRoaXMucHVzaChuZXcgUnVuUHJvcGVydGllc0NoYW5nZShvcHRpb25zMi5yZXZpc2lvbikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuYm9yZGVyKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IEJvcmRlckVsZW1lbnQoXCJ3OmJkclwiLCBvcHRpb25zMi5ib3JkZXIpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnNuYXBUb0dyaWQgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OnNuYXBUb0dyaWRcIiwgb3B0aW9uczIuc25hcFRvR3JpZCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIudmFuaXNoKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6dmFuaXNoXCIsIG9wdGlvbnMyLnZhbmlzaCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuc3BlY1ZhbmlzaCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OnNwZWNWYW5pc2hcIiwgb3B0aW9uczIudmFuaXNoKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5zY2FsZSAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IE51bWJlclZhbHVlRWxlbWVudChcInc6d1wiLCBvcHRpb25zMi5zY2FsZSkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIubGFuZ3VhZ2UpIHtcbiAgICAgIHRoaXMucHVzaChjcmVhdGVMYW5ndWFnZUNvbXBvbmVudChvcHRpb25zMi5sYW5ndWFnZSkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIubWF0aCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3Om9NYXRoXCIsIG9wdGlvbnMyLm1hdGgpKTtcbiAgICB9XG4gIH1cbiAgcHVzaChpdGVtKSB7XG4gICAgdGhpcy5yb290LnB1c2goaXRlbSk7XG4gIH1cbn1cbmNsYXNzIFJ1blByb3BlcnRpZXNDaGFuZ2UgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwidzpyUHJDaGFuZ2VcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgQ2hhbmdlQXR0cmlidXRlcyh7XG4gICAgICAgIGlkOiBvcHRpb25zMi5pZCxcbiAgICAgICAgYXV0aG9yOiBvcHRpb25zMi5hdXRob3IsXG4gICAgICAgIGRhdGU6IG9wdGlvbnMyLmRhdGVcbiAgICAgIH0pXG4gICAgKTtcbiAgICB0aGlzLmFkZENoaWxkRWxlbWVudChuZXcgUnVuUHJvcGVydGllcyhvcHRpb25zMikpO1xuICB9XG59XG5jbGFzcyBUZXh0IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICB2YXIgX2E7XG4gICAgc3VwZXIoXCJ3OnRcIik7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zMiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRleHRBdHRyaWJ1dGVzKHsgc3BhY2U6IFNwYWNlVHlwZS5QUkVTRVJWRSB9KSk7XG4gICAgICB0aGlzLnJvb3QucHVzaChvcHRpb25zMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUZXh0QXR0cmlidXRlcyh7IHNwYWNlOiAoX2EgPSBvcHRpb25zMi5zcGFjZSkgIT0gbnVsbCA/IF9hIDogU3BhY2VUeXBlLkRFRkFVTFQgfSkpO1xuICAgICAgdGhpcy5yb290LnB1c2gob3B0aW9uczIudGV4dCk7XG4gICAgfVxuICB9XG59XG5jb25zdCBQYWdlTnVtYmVyID0ge1xuICBDVVJSRU5UOiBcIkNVUlJFTlRcIixcbiAgVE9UQUxfUEFHRVM6IFwiVE9UQUxfUEFHRVNcIixcbiAgVE9UQUxfUEFHRVNfSU5fU0VDVElPTjogXCJUT1RBTF9QQUdFU19JTl9TRUNUSU9OXCIsXG4gIENVUlJFTlRfU0VDVElPTjogXCJTRUNUSU9OXCJcbn07XG5jbGFzcyBSdW4gZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwidzpyXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJwcm9wZXJ0aWVzXCIpO1xuICAgIHRoaXMucHJvcGVydGllcyA9IG5ldyBSdW5Qcm9wZXJ0aWVzKG9wdGlvbnMyKTtcbiAgICB0aGlzLnJvb3QucHVzaCh0aGlzLnByb3BlcnRpZXMpO1xuICAgIGlmIChvcHRpb25zMi5icmVhaykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHRpb25zMi5icmVhazsgaSsrKSB7XG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCcmVhayQxKCkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob3B0aW9uczIuY2hpbGRyZW4pIHtcbiAgICAgIGZvciAoY29uc3QgY2hpbGQgb2Ygb3B0aW9uczIuY2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHN3aXRjaCAoY2hpbGQpIHtcbiAgICAgICAgICAgIGNhc2UgUGFnZU51bWJlci5DVVJSRU5UOlxuICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgQmVnaW4oKSk7XG4gICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBQYWdlKCkpO1xuICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgU2VwYXJhdGUoKSk7XG4gICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBFbmQoKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBQYWdlTnVtYmVyLlRPVEFMX1BBR0VTOlxuICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgQmVnaW4oKSk7XG4gICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBOdW1iZXJPZlBhZ2VzKCkpO1xuICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgU2VwYXJhdGUoKSk7XG4gICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBFbmQoKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBQYWdlTnVtYmVyLlRPVEFMX1BBR0VTX0lOX1NFQ1RJT046XG4gICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCZWdpbigpKTtcbiAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IE51bWJlck9mUGFnZXNTZWN0aW9uKCkpO1xuICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgU2VwYXJhdGUoKSk7XG4gICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBFbmQoKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBQYWdlTnVtYmVyLkNVUlJFTlRfU0VDVElPTjpcbiAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IEJlZ2luKCkpO1xuICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgQ3VycmVudFNlY3Rpb24oKSk7XG4gICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTZXBhcmF0ZSgpKTtcbiAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IEVuZCgpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGV4dChjaGlsZCkpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yb290LnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3B0aW9uczIudGV4dCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRleHQob3B0aW9uczIudGV4dCkpO1xuICAgIH1cbiAgfVxufVxuY2xhc3MgVGV4dFJ1biBleHRlbmRzIFJ1biB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zMiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgc3VwZXIoe30pO1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRleHQob3B0aW9uczIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzdXBlcihvcHRpb25zMik7XG4gIH1cbn1cbmNsYXNzIFN5bWJvbEF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIGNoYXI6IFwidzpjaGFyXCIsXG4gICAgICBzeW1ib2xmb250OiBcInc6Zm9udFwiXG4gICAgfSk7XG4gIH1cbn1cbmxldCBTeW1ib2wkMSA9IGNsYXNzIFN5bWJvbDIgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihjaGFyID0gXCJcIiwgc3ltYm9sZm9udCA9IFwiV2luZ2RpbmdzXCIpIHtcbiAgICBzdXBlcihcInc6c3ltXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTeW1ib2xBdHRyaWJ1dGVzKHsgY2hhciwgc3ltYm9sZm9udCB9KSk7XG4gIH1cbn07XG5jbGFzcyBTeW1ib2xSdW4gZXh0ZW5kcyBSdW4ge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9uczIgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHN1cGVyKHt9KTtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTeW1ib2wkMShvcHRpb25zMikpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHN1cGVyKG9wdGlvbnMyKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgU3ltYm9sJDEob3B0aW9uczIuY2hhciwgb3B0aW9uczIuc3ltYm9sZm9udCkpO1xuICB9XG59XG52YXIgaGFzaCQxID0ge307XG52YXIgdXRpbHMkOSA9IHt9O1xudmFyIG1pbmltYWxpc3RpY0Fzc2VydCA9IGFzc2VydCQ1O1xuZnVuY3Rpb24gYXNzZXJ0JDUodmFsLCBtc2cpIHtcbiAgaWYgKCF2YWwpXG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCBcIkFzc2VydGlvbiBmYWlsZWRcIik7XG59XG5hc3NlcnQkNS5lcXVhbCA9IGZ1bmN0aW9uIGFzc2VydEVxdWFsKGwsIHIyLCBtc2cpIHtcbiAgaWYgKGwgIT0gcjIpXG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCBcIkFzc2VydGlvbiBmYWlsZWQ6IFwiICsgbCArIFwiICE9IFwiICsgcjIpO1xufTtcbnZhciBhc3NlcnQkNCA9IG1pbmltYWxpc3RpY0Fzc2VydDtcbnZhciBpbmhlcml0cyA9IGluaGVyaXRzX2Jyb3dzZXJFeHBvcnRzO1xudXRpbHMkOS5pbmhlcml0cyA9IGluaGVyaXRzO1xuZnVuY3Rpb24gaXNTdXJyb2dhdGVQYWlyKG1zZywgaSkge1xuICBpZiAoKG1zZy5jaGFyQ29kZUF0KGkpICYgNjQ1MTIpICE9PSA1NTI5Nikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoaSA8IDAgfHwgaSArIDEgPj0gbXNnLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKG1zZy5jaGFyQ29kZUF0KGkgKyAxKSAmIDY0NTEyKSA9PT0gNTYzMjA7XG59XG5mdW5jdGlvbiB0b0FycmF5KG1zZywgZW5jKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KG1zZykpXG4gICAgcmV0dXJuIG1zZy5zbGljZSgpO1xuICBpZiAoIW1zZylcbiAgICByZXR1cm4gW107XG4gIHZhciByZXMgPSBbXTtcbiAgaWYgKHR5cGVvZiBtc2cgPT09IFwic3RyaW5nXCIpIHtcbiAgICBpZiAoIWVuYykge1xuICAgICAgdmFyIHAgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGMgPSBtc2cuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKGMgPCAxMjgpIHtcbiAgICAgICAgICByZXNbcCsrXSA9IGM7XG4gICAgICAgIH0gZWxzZSBpZiAoYyA8IDIwNDgpIHtcbiAgICAgICAgICByZXNbcCsrXSA9IGMgPj4gNiB8IDE5MjtcbiAgICAgICAgICByZXNbcCsrXSA9IGMgJiA2MyB8IDEyODtcbiAgICAgICAgfSBlbHNlIGlmIChpc1N1cnJvZ2F0ZVBhaXIobXNnLCBpKSkge1xuICAgICAgICAgIGMgPSA2NTUzNiArICgoYyAmIDEwMjMpIDw8IDEwKSArIChtc2cuY2hhckNvZGVBdCgrK2kpICYgMTAyMyk7XG4gICAgICAgICAgcmVzW3ArK10gPSBjID4+IDE4IHwgMjQwO1xuICAgICAgICAgIHJlc1twKytdID0gYyA+PiAxMiAmIDYzIHwgMTI4O1xuICAgICAgICAgIHJlc1twKytdID0gYyA+PiA2ICYgNjMgfCAxMjg7XG4gICAgICAgICAgcmVzW3ArK10gPSBjICYgNjMgfCAxMjg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzW3ArK10gPSBjID4+IDEyIHwgMjI0O1xuICAgICAgICAgIHJlc1twKytdID0gYyA+PiA2ICYgNjMgfCAxMjg7XG4gICAgICAgICAgcmVzW3ArK10gPSBjICYgNjMgfCAxMjg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVuYyA9PT0gXCJoZXhcIikge1xuICAgICAgbXNnID0gbXNnLnJlcGxhY2UoL1teYS16MC05XSsvaWcsIFwiXCIpO1xuICAgICAgaWYgKG1zZy5sZW5ndGggJSAyICE9PSAwKVxuICAgICAgICBtc2cgPSBcIjBcIiArIG1zZztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpICs9IDIpXG4gICAgICAgIHJlcy5wdXNoKHBhcnNlSW50KG1zZ1tpXSArIG1zZ1tpICsgMV0sIDE2KSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAoaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspXG4gICAgICByZXNbaV0gPSBtc2dbaV0gfCAwO1xuICB9XG4gIHJldHVybiByZXM7XG59XG51dGlscyQ5LnRvQXJyYXkgPSB0b0FycmF5O1xuZnVuY3Rpb24gdG9IZXgobXNnKSB7XG4gIHZhciByZXMgPSBcIlwiO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKylcbiAgICByZXMgKz0gemVybzIobXNnW2ldLnRvU3RyaW5nKDE2KSk7XG4gIHJldHVybiByZXM7XG59XG51dGlscyQ5LnRvSGV4ID0gdG9IZXg7XG5mdW5jdGlvbiBodG9ubCh3KSB7XG4gIHZhciByZXMgPSB3ID4+PiAyNCB8IHcgPj4+IDggJiA2NTI4MCB8IHcgPDwgOCAmIDE2NzExNjgwIHwgKHcgJiAyNTUpIDw8IDI0O1xuICByZXR1cm4gcmVzID4+PiAwO1xufVxudXRpbHMkOS5odG9ubCA9IGh0b25sO1xuZnVuY3Rpb24gdG9IZXgzMihtc2csIGVuZGlhbikge1xuICB2YXIgcmVzID0gXCJcIjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdyA9IG1zZ1tpXTtcbiAgICBpZiAoZW5kaWFuID09PSBcImxpdHRsZVwiKVxuICAgICAgdyA9IGh0b25sKHcpO1xuICAgIHJlcyArPSB6ZXJvOCh3LnRvU3RyaW5nKDE2KSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbnV0aWxzJDkudG9IZXgzMiA9IHRvSGV4MzI7XG5mdW5jdGlvbiB6ZXJvMih3b3JkKSB7XG4gIGlmICh3b3JkLmxlbmd0aCA9PT0gMSlcbiAgICByZXR1cm4gXCIwXCIgKyB3b3JkO1xuICBlbHNlXG4gICAgcmV0dXJuIHdvcmQ7XG59XG51dGlscyQ5Lnplcm8yID0gemVybzI7XG5mdW5jdGlvbiB6ZXJvOCh3b3JkKSB7XG4gIGlmICh3b3JkLmxlbmd0aCA9PT0gNylcbiAgICByZXR1cm4gXCIwXCIgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gNilcbiAgICByZXR1cm4gXCIwMFwiICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDUpXG4gICAgcmV0dXJuIFwiMDAwXCIgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gNClcbiAgICByZXR1cm4gXCIwMDAwXCIgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gMylcbiAgICByZXR1cm4gXCIwMDAwMFwiICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDIpXG4gICAgcmV0dXJuIFwiMDAwMDAwXCIgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gMSlcbiAgICByZXR1cm4gXCIwMDAwMDAwXCIgKyB3b3JkO1xuICBlbHNlXG4gICAgcmV0dXJuIHdvcmQ7XG59XG51dGlscyQ5Lnplcm84ID0gemVybzg7XG5mdW5jdGlvbiBqb2luMzIobXNnLCBzdGFydCwgZW5kLCBlbmRpYW4pIHtcbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0O1xuICBhc3NlcnQkNChsZW4gJSA0ID09PSAwKTtcbiAgdmFyIHJlcyA9IG5ldyBBcnJheShsZW4gLyA0KTtcbiAgZm9yICh2YXIgaSA9IDAsIGsgPSBzdGFydDsgaSA8IHJlcy5sZW5ndGg7IGkrKywgayArPSA0KSB7XG4gICAgdmFyIHc7XG4gICAgaWYgKGVuZGlhbiA9PT0gXCJiaWdcIilcbiAgICAgIHcgPSBtc2dba10gPDwgMjQgfCBtc2dbayArIDFdIDw8IDE2IHwgbXNnW2sgKyAyXSA8PCA4IHwgbXNnW2sgKyAzXTtcbiAgICBlbHNlXG4gICAgICB3ID0gbXNnW2sgKyAzXSA8PCAyNCB8IG1zZ1trICsgMl0gPDwgMTYgfCBtc2dbayArIDFdIDw8IDggfCBtc2dba107XG4gICAgcmVzW2ldID0gdyA+Pj4gMDtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxudXRpbHMkOS5qb2luMzIgPSBqb2luMzI7XG5mdW5jdGlvbiBzcGxpdDMyKG1zZywgZW5kaWFuKSB7XG4gIHZhciByZXMgPSBuZXcgQXJyYXkobXNnLmxlbmd0aCAqIDQpO1xuICBmb3IgKHZhciBpID0gMCwgayA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyssIGsgKz0gNCkge1xuICAgIHZhciBtID0gbXNnW2ldO1xuICAgIGlmIChlbmRpYW4gPT09IFwiYmlnXCIpIHtcbiAgICAgIHJlc1trXSA9IG0gPj4+IDI0O1xuICAgICAgcmVzW2sgKyAxXSA9IG0gPj4+IDE2ICYgMjU1O1xuICAgICAgcmVzW2sgKyAyXSA9IG0gPj4+IDggJiAyNTU7XG4gICAgICByZXNbayArIDNdID0gbSAmIDI1NTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzW2sgKyAzXSA9IG0gPj4+IDI0O1xuICAgICAgcmVzW2sgKyAyXSA9IG0gPj4+IDE2ICYgMjU1O1xuICAgICAgcmVzW2sgKyAxXSA9IG0gPj4+IDggJiAyNTU7XG4gICAgICByZXNba10gPSBtICYgMjU1O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufVxudXRpbHMkOS5zcGxpdDMyID0gc3BsaXQzMjtcbmZ1bmN0aW9uIHJvdHIzMiQxKHcsIGIpIHtcbiAgcmV0dXJuIHcgPj4+IGIgfCB3IDw8IDMyIC0gYjtcbn1cbnV0aWxzJDkucm90cjMyID0gcm90cjMyJDE7XG5mdW5jdGlvbiByb3RsMzIkMih3LCBiKSB7XG4gIHJldHVybiB3IDw8IGIgfCB3ID4+PiAzMiAtIGI7XG59XG51dGlscyQ5LnJvdGwzMiA9IHJvdGwzMiQyO1xuZnVuY3Rpb24gc3VtMzIkMyhhLCBiKSB7XG4gIHJldHVybiBhICsgYiA+Pj4gMDtcbn1cbnV0aWxzJDkuc3VtMzIgPSBzdW0zMiQzO1xuZnVuY3Rpb24gc3VtMzJfMyQxKGEsIGIsIGMpIHtcbiAgcmV0dXJuIGEgKyBiICsgYyA+Pj4gMDtcbn1cbnV0aWxzJDkuc3VtMzJfMyA9IHN1bTMyXzMkMTtcbmZ1bmN0aW9uIHN1bTMyXzQkMihhLCBiLCBjLCBkKSB7XG4gIHJldHVybiBhICsgYiArIGMgKyBkID4+PiAwO1xufVxudXRpbHMkOS5zdW0zMl80ID0gc3VtMzJfNCQyO1xuZnVuY3Rpb24gc3VtMzJfNSQyKGEsIGIsIGMsIGQsIGUpIHtcbiAgcmV0dXJuIGEgKyBiICsgYyArIGQgKyBlID4+PiAwO1xufVxudXRpbHMkOS5zdW0zMl81ID0gc3VtMzJfNSQyO1xuZnVuY3Rpb24gc3VtNjQkMShidWYsIHBvcywgYWgsIGFsKSB7XG4gIHZhciBiaCA9IGJ1Zltwb3NdO1xuICB2YXIgYmwgPSBidWZbcG9zICsgMV07XG4gIHZhciBsbyA9IGFsICsgYmwgPj4+IDA7XG4gIHZhciBoaSA9IChsbyA8IGFsID8gMSA6IDApICsgYWggKyBiaDtcbiAgYnVmW3Bvc10gPSBoaSA+Pj4gMDtcbiAgYnVmW3BvcyArIDFdID0gbG87XG59XG51dGlscyQ5LnN1bTY0ID0gc3VtNjQkMTtcbmZ1bmN0aW9uIHN1bTY0X2hpJDEoYWgsIGFsLCBiaCwgYmwpIHtcbiAgdmFyIGxvID0gYWwgKyBibCA+Pj4gMDtcbiAgdmFyIGhpID0gKGxvIDwgYWwgPyAxIDogMCkgKyBhaCArIGJoO1xuICByZXR1cm4gaGkgPj4+IDA7XG59XG51dGlscyQ5LnN1bTY0X2hpID0gc3VtNjRfaGkkMTtcbmZ1bmN0aW9uIHN1bTY0X2xvJDEoYWgsIGFsLCBiaCwgYmwpIHtcbiAgdmFyIGxvID0gYWwgKyBibDtcbiAgcmV0dXJuIGxvID4+PiAwO1xufVxudXRpbHMkOS5zdW02NF9sbyA9IHN1bTY0X2xvJDE7XG5mdW5jdGlvbiBzdW02NF80X2hpJDEoYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCwgZGgsIGRsKSB7XG4gIHZhciBjYXJyeSA9IDA7XG4gIHZhciBsbyA9IGFsO1xuICBsbyA9IGxvICsgYmwgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgYWwgPyAxIDogMDtcbiAgbG8gPSBsbyArIGNsID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGNsID8gMSA6IDA7XG4gIGxvID0gbG8gKyBkbCA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBkbCA/IDEgOiAwO1xuICB2YXIgaGkgPSBhaCArIGJoICsgY2ggKyBkaCArIGNhcnJ5O1xuICByZXR1cm4gaGkgPj4+IDA7XG59XG51dGlscyQ5LnN1bTY0XzRfaGkgPSBzdW02NF80X2hpJDE7XG5mdW5jdGlvbiBzdW02NF80X2xvJDEoYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCwgZGgsIGRsKSB7XG4gIHZhciBsbyA9IGFsICsgYmwgKyBjbCArIGRsO1xuICByZXR1cm4gbG8gPj4+IDA7XG59XG51dGlscyQ5LnN1bTY0XzRfbG8gPSBzdW02NF80X2xvJDE7XG5mdW5jdGlvbiBzdW02NF81X2hpJDEoYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCwgZGgsIGRsLCBlaCwgZWwpIHtcbiAgdmFyIGNhcnJ5ID0gMDtcbiAgdmFyIGxvID0gYWw7XG4gIGxvID0gbG8gKyBibCA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBhbCA/IDEgOiAwO1xuICBsbyA9IGxvICsgY2wgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgY2wgPyAxIDogMDtcbiAgbG8gPSBsbyArIGRsID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGRsID8gMSA6IDA7XG4gIGxvID0gbG8gKyBlbCA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBlbCA/IDEgOiAwO1xuICB2YXIgaGkgPSBhaCArIGJoICsgY2ggKyBkaCArIGVoICsgY2Fycnk7XG4gIHJldHVybiBoaSA+Pj4gMDtcbn1cbnV0aWxzJDkuc3VtNjRfNV9oaSA9IHN1bTY0XzVfaGkkMTtcbmZ1bmN0aW9uIHN1bTY0XzVfbG8kMShhaCwgYWwsIGJoLCBibCwgY2gsIGNsLCBkaCwgZGwsIGVoLCBlbCkge1xuICB2YXIgbG8gPSBhbCArIGJsICsgY2wgKyBkbCArIGVsO1xuICByZXR1cm4gbG8gPj4+IDA7XG59XG51dGlscyQ5LnN1bTY0XzVfbG8gPSBzdW02NF81X2xvJDE7XG5mdW5jdGlvbiByb3RyNjRfaGkkMShhaCwgYWwsIG51bSkge1xuICB2YXIgcjIgPSBhbCA8PCAzMiAtIG51bSB8IGFoID4+PiBudW07XG4gIHJldHVybiByMiA+Pj4gMDtcbn1cbnV0aWxzJDkucm90cjY0X2hpID0gcm90cjY0X2hpJDE7XG5mdW5jdGlvbiByb3RyNjRfbG8kMShhaCwgYWwsIG51bSkge1xuICB2YXIgcjIgPSBhaCA8PCAzMiAtIG51bSB8IGFsID4+PiBudW07XG4gIHJldHVybiByMiA+Pj4gMDtcbn1cbnV0aWxzJDkucm90cjY0X2xvID0gcm90cjY0X2xvJDE7XG5mdW5jdGlvbiBzaHI2NF9oaSQxKGFoLCBhbCwgbnVtKSB7XG4gIHJldHVybiBhaCA+Pj4gbnVtO1xufVxudXRpbHMkOS5zaHI2NF9oaSA9IHNocjY0X2hpJDE7XG5mdW5jdGlvbiBzaHI2NF9sbyQxKGFoLCBhbCwgbnVtKSB7XG4gIHZhciByMiA9IGFoIDw8IDMyIC0gbnVtIHwgYWwgPj4+IG51bTtcbiAgcmV0dXJuIHIyID4+PiAwO1xufVxudXRpbHMkOS5zaHI2NF9sbyA9IHNocjY0X2xvJDE7XG52YXIgY29tbW9uJDUgPSB7fTtcbnZhciB1dGlscyQ4ID0gdXRpbHMkOTtcbnZhciBhc3NlcnQkMyA9IG1pbmltYWxpc3RpY0Fzc2VydDtcbmZ1bmN0aW9uIEJsb2NrSGFzaCQ0KCkge1xuICB0aGlzLnBlbmRpbmcgPSBudWxsO1xuICB0aGlzLnBlbmRpbmdUb3RhbCA9IDA7XG4gIHRoaXMuYmxvY2tTaXplID0gdGhpcy5jb25zdHJ1Y3Rvci5ibG9ja1NpemU7XG4gIHRoaXMub3V0U2l6ZSA9IHRoaXMuY29uc3RydWN0b3Iub3V0U2l6ZTtcbiAgdGhpcy5obWFjU3RyZW5ndGggPSB0aGlzLmNvbnN0cnVjdG9yLmhtYWNTdHJlbmd0aDtcbiAgdGhpcy5wYWRMZW5ndGggPSB0aGlzLmNvbnN0cnVjdG9yLnBhZExlbmd0aCAvIDg7XG4gIHRoaXMuZW5kaWFuID0gXCJiaWdcIjtcbiAgdGhpcy5fZGVsdGE4ID0gdGhpcy5ibG9ja1NpemUgLyA4O1xuICB0aGlzLl9kZWx0YTMyID0gdGhpcy5ibG9ja1NpemUgLyAzMjtcbn1cbmNvbW1vbiQ1LkJsb2NrSGFzaCA9IEJsb2NrSGFzaCQ0O1xuQmxvY2tIYXNoJDQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShtc2csIGVuYykge1xuICBtc2cgPSB1dGlscyQ4LnRvQXJyYXkobXNnLCBlbmMpO1xuICBpZiAoIXRoaXMucGVuZGluZylcbiAgICB0aGlzLnBlbmRpbmcgPSBtc2c7XG4gIGVsc2VcbiAgICB0aGlzLnBlbmRpbmcgPSB0aGlzLnBlbmRpbmcuY29uY2F0KG1zZyk7XG4gIHRoaXMucGVuZGluZ1RvdGFsICs9IG1zZy5sZW5ndGg7XG4gIGlmICh0aGlzLnBlbmRpbmcubGVuZ3RoID49IHRoaXMuX2RlbHRhOCkge1xuICAgIG1zZyA9IHRoaXMucGVuZGluZztcbiAgICB2YXIgcjIgPSBtc2cubGVuZ3RoICUgdGhpcy5fZGVsdGE4O1xuICAgIHRoaXMucGVuZGluZyA9IG1zZy5zbGljZShtc2cubGVuZ3RoIC0gcjIsIG1zZy5sZW5ndGgpO1xuICAgIGlmICh0aGlzLnBlbmRpbmcubGVuZ3RoID09PSAwKVxuICAgICAgdGhpcy5wZW5kaW5nID0gbnVsbDtcbiAgICBtc2cgPSB1dGlscyQ4LmpvaW4zMihtc2csIDAsIG1zZy5sZW5ndGggLSByMiwgdGhpcy5lbmRpYW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSArPSB0aGlzLl9kZWx0YTMyKVxuICAgICAgdGhpcy5fdXBkYXRlKG1zZywgaSwgaSArIHRoaXMuX2RlbHRhMzIpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcbkJsb2NrSGFzaCQ0LnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIHRoaXMudXBkYXRlKHRoaXMuX3BhZCgpKTtcbiAgYXNzZXJ0JDModGhpcy5wZW5kaW5nID09PSBudWxsKTtcbiAgcmV0dXJuIHRoaXMuX2RpZ2VzdChlbmMpO1xufTtcbkJsb2NrSGFzaCQ0LnByb3RvdHlwZS5fcGFkID0gZnVuY3Rpb24gcGFkKCkge1xuICB2YXIgbGVuID0gdGhpcy5wZW5kaW5nVG90YWw7XG4gIHZhciBieXRlcyA9IHRoaXMuX2RlbHRhODtcbiAgdmFyIGsgPSBieXRlcyAtIChsZW4gKyB0aGlzLnBhZExlbmd0aCkgJSBieXRlcztcbiAgdmFyIHJlcyA9IG5ldyBBcnJheShrICsgdGhpcy5wYWRMZW5ndGgpO1xuICByZXNbMF0gPSAxMjg7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgazsgaSsrKVxuICAgIHJlc1tpXSA9IDA7XG4gIGxlbiA8PD0gMztcbiAgaWYgKHRoaXMuZW5kaWFuID09PSBcImJpZ1wiKSB7XG4gICAgZm9yICh2YXIgdCA9IDg7IHQgPCB0aGlzLnBhZExlbmd0aDsgdCsrKVxuICAgICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IGxlbiA+Pj4gMjQgJiAyNTU7XG4gICAgcmVzW2krK10gPSBsZW4gPj4+IDE2ICYgMjU1O1xuICAgIHJlc1tpKytdID0gbGVuID4+PiA4ICYgMjU1O1xuICAgIHJlc1tpKytdID0gbGVuICYgMjU1O1xuICB9IGVsc2Uge1xuICAgIHJlc1tpKytdID0gbGVuICYgMjU1O1xuICAgIHJlc1tpKytdID0gbGVuID4+PiA4ICYgMjU1O1xuICAgIHJlc1tpKytdID0gbGVuID4+PiAxNiAmIDI1NTtcbiAgICByZXNbaSsrXSA9IGxlbiA+Pj4gMjQgJiAyNTU7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIGZvciAodCA9IDg7IHQgPCB0aGlzLnBhZExlbmd0aDsgdCsrKVxuICAgICAgcmVzW2krK10gPSAwO1xuICB9XG4gIHJldHVybiByZXM7XG59O1xudmFyIHNoYSA9IHt9O1xudmFyIGNvbW1vbiQ0ID0ge307XG52YXIgdXRpbHMkNyA9IHV0aWxzJDk7XG52YXIgcm90cjMyID0gdXRpbHMkNy5yb3RyMzI7XG5mdW5jdGlvbiBmdF8xJDEoczIsIHgsIHksIHopIHtcbiAgaWYgKHMyID09PSAwKVxuICAgIHJldHVybiBjaDMyJDEoeCwgeSwgeik7XG4gIGlmIChzMiA9PT0gMSB8fCBzMiA9PT0gMylcbiAgICByZXR1cm4gcDMyKHgsIHksIHopO1xuICBpZiAoczIgPT09IDIpXG4gICAgcmV0dXJuIG1hajMyJDEoeCwgeSwgeik7XG59XG5jb21tb24kNC5mdF8xID0gZnRfMSQxO1xuZnVuY3Rpb24gY2gzMiQxKHgsIHksIHopIHtcbiAgcmV0dXJuIHggJiB5IF4gfnggJiB6O1xufVxuY29tbW9uJDQuY2gzMiA9IGNoMzIkMTtcbmZ1bmN0aW9uIG1hajMyJDEoeCwgeSwgeikge1xuICByZXR1cm4geCAmIHkgXiB4ICYgeiBeIHkgJiB6O1xufVxuY29tbW9uJDQubWFqMzIgPSBtYWozMiQxO1xuZnVuY3Rpb24gcDMyKHgsIHksIHopIHtcbiAgcmV0dXJuIHggXiB5IF4gejtcbn1cbmNvbW1vbiQ0LnAzMiA9IHAzMjtcbmZ1bmN0aW9uIHMwXzI1NiQxKHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCAyKSBeIHJvdHIzMih4LCAxMykgXiByb3RyMzIoeCwgMjIpO1xufVxuY29tbW9uJDQuczBfMjU2ID0gczBfMjU2JDE7XG5mdW5jdGlvbiBzMV8yNTYkMSh4KSB7XG4gIHJldHVybiByb3RyMzIoeCwgNikgXiByb3RyMzIoeCwgMTEpIF4gcm90cjMyKHgsIDI1KTtcbn1cbmNvbW1vbiQ0LnMxXzI1NiA9IHMxXzI1NiQxO1xuZnVuY3Rpb24gZzBfMjU2JDEoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDcpIF4gcm90cjMyKHgsIDE4KSBeIHggPj4+IDM7XG59XG5jb21tb24kNC5nMF8yNTYgPSBnMF8yNTYkMTtcbmZ1bmN0aW9uIGcxXzI1NiQxKHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCAxNykgXiByb3RyMzIoeCwgMTkpIF4geCA+Pj4gMTA7XG59XG5jb21tb24kNC5nMV8yNTYgPSBnMV8yNTYkMTtcbnZhciB1dGlscyQ2ID0gdXRpbHMkOTtcbnZhciBjb21tb24kMyA9IGNvbW1vbiQ1O1xudmFyIHNoYUNvbW1vbiQxID0gY29tbW9uJDQ7XG52YXIgcm90bDMyJDEgPSB1dGlscyQ2LnJvdGwzMjtcbnZhciBzdW0zMiQyID0gdXRpbHMkNi5zdW0zMjtcbnZhciBzdW0zMl81JDEgPSB1dGlscyQ2LnN1bTMyXzU7XG52YXIgZnRfMSA9IHNoYUNvbW1vbiQxLmZ0XzE7XG52YXIgQmxvY2tIYXNoJDMgPSBjb21tb24kMy5CbG9ja0hhc2g7XG52YXIgc2hhMV9LID0gW1xuICAxNTE4NTAwMjQ5LFxuICAxODU5Nzc1MzkzLFxuICAyNDAwOTU5NzA4LFxuICAzMzk1NDY5NzgyXG5dO1xuZnVuY3Rpb24gU0hBMSgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTEpKVxuICAgIHJldHVybiBuZXcgU0hBMSgpO1xuICBCbG9ja0hhc2gkMy5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMTczMjU4NDE5MyxcbiAgICA0MDIzMjMzNDE3LFxuICAgIDI1NjIzODMxMDIsXG4gICAgMjcxNzMzODc4LFxuICAgIDMyODUzNzc1MjBcbiAgXTtcbiAgdGhpcy5XID0gbmV3IEFycmF5KDgwKTtcbn1cbnV0aWxzJDYuaW5oZXJpdHMoU0hBMSwgQmxvY2tIYXNoJDMpO1xudmFyIF8xID0gU0hBMTtcblNIQTEuYmxvY2tTaXplID0gNTEyO1xuU0hBMS5vdXRTaXplID0gMTYwO1xuU0hBMS5obWFjU3RyZW5ndGggPSA4MDtcblNIQTEucGFkTGVuZ3RoID0gNjQ7XG5TSEExLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShtc2csIHN0YXJ0KSB7XG4gIHZhciBXID0gdGhpcy5XO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspXG4gICAgV1tpXSA9IG1zZ1tzdGFydCArIGldO1xuICBmb3IgKDsgaSA8IFcubGVuZ3RoOyBpKyspXG4gICAgV1tpXSA9IHJvdGwzMiQxKFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl0sIDEpO1xuICB2YXIgYSA9IHRoaXMuaFswXTtcbiAgdmFyIGIgPSB0aGlzLmhbMV07XG4gIHZhciBjID0gdGhpcy5oWzJdO1xuICB2YXIgZCA9IHRoaXMuaFszXTtcbiAgdmFyIGUgPSB0aGlzLmhbNF07XG4gIGZvciAoaSA9IDA7IGkgPCBXLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHMyID0gfn4oaSAvIDIwKTtcbiAgICB2YXIgdCA9IHN1bTMyXzUkMShyb3RsMzIkMShhLCA1KSwgZnRfMShzMiwgYiwgYywgZCksIGUsIFdbaV0sIHNoYTFfS1tzMl0pO1xuICAgIGUgPSBkO1xuICAgIGQgPSBjO1xuICAgIGMgPSByb3RsMzIkMShiLCAzMCk7XG4gICAgYiA9IGE7XG4gICAgYSA9IHQ7XG4gIH1cbiAgdGhpcy5oWzBdID0gc3VtMzIkMih0aGlzLmhbMF0sIGEpO1xuICB0aGlzLmhbMV0gPSBzdW0zMiQyKHRoaXMuaFsxXSwgYik7XG4gIHRoaXMuaFsyXSA9IHN1bTMyJDIodGhpcy5oWzJdLCBjKTtcbiAgdGhpcy5oWzNdID0gc3VtMzIkMih0aGlzLmhbM10sIGQpO1xuICB0aGlzLmhbNF0gPSBzdW0zMiQyKHRoaXMuaFs0XSwgZSk7XG59O1xuU0hBMS5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdDIoZW5jKSB7XG4gIGlmIChlbmMgPT09IFwiaGV4XCIpXG4gICAgcmV0dXJuIHV0aWxzJDYudG9IZXgzMih0aGlzLmgsIFwiYmlnXCIpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzJDYuc3BsaXQzMih0aGlzLmgsIFwiYmlnXCIpO1xufTtcbnZhciB1dGlscyQ1ID0gdXRpbHMkOTtcbnZhciBjb21tb24kMiA9IGNvbW1vbiQ1O1xudmFyIHNoYUNvbW1vbiA9IGNvbW1vbiQ0O1xudmFyIGFzc2VydCQyID0gbWluaW1hbGlzdGljQXNzZXJ0O1xudmFyIHN1bTMyJDEgPSB1dGlscyQ1LnN1bTMyO1xudmFyIHN1bTMyXzQkMSA9IHV0aWxzJDUuc3VtMzJfNDtcbnZhciBzdW0zMl81ID0gdXRpbHMkNS5zdW0zMl81O1xudmFyIGNoMzIgPSBzaGFDb21tb24uY2gzMjtcbnZhciBtYWozMiA9IHNoYUNvbW1vbi5tYWozMjtcbnZhciBzMF8yNTYgPSBzaGFDb21tb24uczBfMjU2O1xudmFyIHMxXzI1NiA9IHNoYUNvbW1vbi5zMV8yNTY7XG52YXIgZzBfMjU2ID0gc2hhQ29tbW9uLmcwXzI1NjtcbnZhciBnMV8yNTYgPSBzaGFDb21tb24uZzFfMjU2O1xudmFyIEJsb2NrSGFzaCQyID0gY29tbW9uJDIuQmxvY2tIYXNoO1xudmFyIHNoYTI1Nl9LID0gW1xuICAxMTE2MzUyNDA4LFxuICAxODk5NDQ3NDQxLFxuICAzMDQ5MzIzNDcxLFxuICAzOTIxMDA5NTczLFxuICA5NjE5ODcxNjMsXG4gIDE1MDg5NzA5OTMsXG4gIDI0NTM2MzU3NDgsXG4gIDI4NzA3NjMyMjEsXG4gIDM2MjQzODEwODAsXG4gIDMxMDU5ODQwMSxcbiAgNjA3MjI1Mjc4LFxuICAxNDI2ODgxOTg3LFxuICAxOTI1MDc4Mzg4LFxuICAyMTYyMDc4MjA2LFxuICAyNjE0ODg4MTAzLFxuICAzMjQ4MjIyNTgwLFxuICAzODM1MzkwNDAxLFxuICA0MDIyMjI0Nzc0LFxuICAyNjQzNDcwNzgsXG4gIDYwNDgwNzYyOCxcbiAgNzcwMjU1OTgzLFxuICAxMjQ5MTUwMTIyLFxuICAxNTU1MDgxNjkyLFxuICAxOTk2MDY0OTg2LFxuICAyNTU0MjIwODgyLFxuICAyODIxODM0MzQ5LFxuICAyOTUyOTk2ODA4LFxuICAzMjEwMzEzNjcxLFxuICAzMzM2NTcxODkxLFxuICAzNTg0NTI4NzExLFxuICAxMTM5MjY5OTMsXG4gIDMzODI0MTg5NSxcbiAgNjY2MzA3MjA1LFxuICA3NzM1Mjk5MTIsXG4gIDEyOTQ3NTczNzIsXG4gIDEzOTYxODIyOTEsXG4gIDE2OTUxODM3MDAsXG4gIDE5ODY2NjEwNTEsXG4gIDIxNzcwMjYzNTAsXG4gIDI0NTY5NTYwMzcsXG4gIDI3MzA0ODU5MjEsXG4gIDI4MjAzMDI0MTEsXG4gIDMyNTk3MzA4MDAsXG4gIDMzNDU3NjQ3NzEsXG4gIDM1MTYwNjU4MTcsXG4gIDM2MDAzNTI4MDQsXG4gIDQwOTQ1NzE5MDksXG4gIDI3NTQyMzM0NCxcbiAgNDMwMjI3NzM0LFxuICA1MDY5NDg2MTYsXG4gIDY1OTA2MDU1NixcbiAgODgzOTk3ODc3LFxuICA5NTgxMzk1NzEsXG4gIDEzMjI4MjIyMTgsXG4gIDE1MzcwMDIwNjMsXG4gIDE3NDc4NzM3NzksXG4gIDE5NTU1NjIyMjIsXG4gIDIwMjQxMDQ4MTUsXG4gIDIyMjc3MzA0NTIsXG4gIDIzNjE4NTI0MjQsXG4gIDI0Mjg0MzY0NzQsXG4gIDI3NTY3MzQxODcsXG4gIDMyMDQwMzE0NzksXG4gIDMzMjkzMjUyOThcbl07XG5mdW5jdGlvbiBTSEEyNTYkMSgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTI1NiQxKSlcbiAgICByZXR1cm4gbmV3IFNIQTI1NiQxKCk7XG4gIEJsb2NrSGFzaCQyLmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFtcbiAgICAxNzc5MDMzNzAzLFxuICAgIDMxNDQxMzQyNzcsXG4gICAgMTAxMzkwNDI0MixcbiAgICAyNzczNDgwNzYyLFxuICAgIDEzNTk4OTMxMTksXG4gICAgMjYwMDgyMjkyNCxcbiAgICA1Mjg3MzQ2MzUsXG4gICAgMTU0MTQ1OTIyNVxuICBdO1xuICB0aGlzLmsgPSBzaGEyNTZfSztcbiAgdGhpcy5XID0gbmV3IEFycmF5KDY0KTtcbn1cbnV0aWxzJDUuaW5oZXJpdHMoU0hBMjU2JDEsIEJsb2NrSGFzaCQyKTtcbnZhciBfMjU2ID0gU0hBMjU2JDE7XG5TSEEyNTYkMS5ibG9ja1NpemUgPSA1MTI7XG5TSEEyNTYkMS5vdXRTaXplID0gMjU2O1xuU0hBMjU2JDEuaG1hY1N0cmVuZ3RoID0gMTkyO1xuU0hBMjU2JDEucGFkTGVuZ3RoID0gNjQ7XG5TSEEyNTYkMS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUyKG1zZywgc3RhcnQpIHtcbiAgdmFyIFcgPSB0aGlzLlc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKylcbiAgICBXW2ldID0gbXNnW3N0YXJ0ICsgaV07XG4gIGZvciAoOyBpIDwgVy5sZW5ndGg7IGkrKylcbiAgICBXW2ldID0gc3VtMzJfNCQxKGcxXzI1NihXW2kgLSAyXSksIFdbaSAtIDddLCBnMF8yNTYoV1tpIC0gMTVdKSwgV1tpIC0gMTZdKTtcbiAgdmFyIGEgPSB0aGlzLmhbMF07XG4gIHZhciBiID0gdGhpcy5oWzFdO1xuICB2YXIgYyA9IHRoaXMuaFsyXTtcbiAgdmFyIGQgPSB0aGlzLmhbM107XG4gIHZhciBlID0gdGhpcy5oWzRdO1xuICB2YXIgZjIgPSB0aGlzLmhbNV07XG4gIHZhciBnID0gdGhpcy5oWzZdO1xuICB2YXIgaCA9IHRoaXMuaFs3XTtcbiAgYXNzZXJ0JDIodGhpcy5rLmxlbmd0aCA9PT0gVy5sZW5ndGgpO1xuICBmb3IgKGkgPSAwOyBpIDwgVy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBUMSA9IHN1bTMyXzUoaCwgczFfMjU2KGUpLCBjaDMyKGUsIGYyLCBnKSwgdGhpcy5rW2ldLCBXW2ldKTtcbiAgICB2YXIgVDIgPSBzdW0zMiQxKHMwXzI1NihhKSwgbWFqMzIoYSwgYiwgYykpO1xuICAgIGggPSBnO1xuICAgIGcgPSBmMjtcbiAgICBmMiA9IGU7XG4gICAgZSA9IHN1bTMyJDEoZCwgVDEpO1xuICAgIGQgPSBjO1xuICAgIGMgPSBiO1xuICAgIGIgPSBhO1xuICAgIGEgPSBzdW0zMiQxKFQxLCBUMik7XG4gIH1cbiAgdGhpcy5oWzBdID0gc3VtMzIkMSh0aGlzLmhbMF0sIGEpO1xuICB0aGlzLmhbMV0gPSBzdW0zMiQxKHRoaXMuaFsxXSwgYik7XG4gIHRoaXMuaFsyXSA9IHN1bTMyJDEodGhpcy5oWzJdLCBjKTtcbiAgdGhpcy5oWzNdID0gc3VtMzIkMSh0aGlzLmhbM10sIGQpO1xuICB0aGlzLmhbNF0gPSBzdW0zMiQxKHRoaXMuaFs0XSwgZSk7XG4gIHRoaXMuaFs1XSA9IHN1bTMyJDEodGhpcy5oWzVdLCBmMik7XG4gIHRoaXMuaFs2XSA9IHN1bTMyJDEodGhpcy5oWzZdLCBnKTtcbiAgdGhpcy5oWzddID0gc3VtMzIkMSh0aGlzLmhbN10sIGgpO1xufTtcblNIQTI1NiQxLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0MyhlbmMpIHtcbiAgaWYgKGVuYyA9PT0gXCJoZXhcIilcbiAgICByZXR1cm4gdXRpbHMkNS50b0hleDMyKHRoaXMuaCwgXCJiaWdcIik7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMkNS5zcGxpdDMyKHRoaXMuaCwgXCJiaWdcIik7XG59O1xudmFyIHV0aWxzJDQgPSB1dGlscyQ5O1xudmFyIFNIQTI1NiA9IF8yNTY7XG5mdW5jdGlvbiBTSEEyMjQoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEEyMjQpKVxuICAgIHJldHVybiBuZXcgU0hBMjI0KCk7XG4gIFNIQTI1Ni5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMzIzODM3MTAzMixcbiAgICA5MTQxNTA2NjMsXG4gICAgODEyNzAyOTk5LFxuICAgIDQxNDQ5MTI2OTcsXG4gICAgNDI5MDc3NTg1NyxcbiAgICAxNzUwNjAzMDI1LFxuICAgIDE2OTQwNzY4MzksXG4gICAgMzIwNDA3NTQyOFxuICBdO1xufVxudXRpbHMkNC5pbmhlcml0cyhTSEEyMjQsIFNIQTI1Nik7XG52YXIgXzIyNCA9IFNIQTIyNDtcblNIQTIyNC5ibG9ja1NpemUgPSA1MTI7XG5TSEEyMjQub3V0U2l6ZSA9IDIyNDtcblNIQTIyNC5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEEyMjQucGFkTGVuZ3RoID0gNjQ7XG5TSEEyMjQucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3Q0KGVuYykge1xuICBpZiAoZW5jID09PSBcImhleFwiKVxuICAgIHJldHVybiB1dGlscyQ0LnRvSGV4MzIodGhpcy5oLnNsaWNlKDAsIDcpLCBcImJpZ1wiKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscyQ0LnNwbGl0MzIodGhpcy5oLnNsaWNlKDAsIDcpLCBcImJpZ1wiKTtcbn07XG52YXIgdXRpbHMkMyA9IHV0aWxzJDk7XG52YXIgY29tbW9uJDEgPSBjb21tb24kNTtcbnZhciBhc3NlcnQkMSA9IG1pbmltYWxpc3RpY0Fzc2VydDtcbnZhciByb3RyNjRfaGkgPSB1dGlscyQzLnJvdHI2NF9oaTtcbnZhciByb3RyNjRfbG8gPSB1dGlscyQzLnJvdHI2NF9sbztcbnZhciBzaHI2NF9oaSA9IHV0aWxzJDMuc2hyNjRfaGk7XG52YXIgc2hyNjRfbG8gPSB1dGlscyQzLnNocjY0X2xvO1xudmFyIHN1bTY0ID0gdXRpbHMkMy5zdW02NDtcbnZhciBzdW02NF9oaSA9IHV0aWxzJDMuc3VtNjRfaGk7XG52YXIgc3VtNjRfbG8gPSB1dGlscyQzLnN1bTY0X2xvO1xudmFyIHN1bTY0XzRfaGkgPSB1dGlscyQzLnN1bTY0XzRfaGk7XG52YXIgc3VtNjRfNF9sbyA9IHV0aWxzJDMuc3VtNjRfNF9sbztcbnZhciBzdW02NF81X2hpID0gdXRpbHMkMy5zdW02NF81X2hpO1xudmFyIHN1bTY0XzVfbG8gPSB1dGlscyQzLnN1bTY0XzVfbG87XG52YXIgQmxvY2tIYXNoJDEgPSBjb21tb24kMS5CbG9ja0hhc2g7XG52YXIgc2hhNTEyX0sgPSBbXG4gIDExMTYzNTI0MDgsXG4gIDM2MDk3Njc0NTgsXG4gIDE4OTk0NDc0NDEsXG4gIDYwMjg5MTcyNSxcbiAgMzA0OTMyMzQ3MSxcbiAgMzk2NDQ4NDM5OSxcbiAgMzkyMTAwOTU3MyxcbiAgMjE3MzI5NTU0OCxcbiAgOTYxOTg3MTYzLFxuICA0MDgxNjI4NDcyLFxuICAxNTA4OTcwOTkzLFxuICAzMDUzODM0MjY1LFxuICAyNDUzNjM1NzQ4LFxuICAyOTM3NjcxNTc5LFxuICAyODcwNzYzMjIxLFxuICAzNjY0NjA5NTYwLFxuICAzNjI0MzgxMDgwLFxuICAyNzM0ODgzMzk0LFxuICAzMTA1OTg0MDEsXG4gIDExNjQ5OTY1NDIsXG4gIDYwNzIyNTI3OCxcbiAgMTMyMzYxMDc2NCxcbiAgMTQyNjg4MTk4NyxcbiAgMzU5MDMwNDk5NCxcbiAgMTkyNTA3ODM4OCxcbiAgNDA2ODE4MjM4MyxcbiAgMjE2MjA3ODIwNixcbiAgOTkxMzM2MTEzLFxuICAyNjE0ODg4MTAzLFxuICA2MzM4MDMzMTcsXG4gIDMyNDgyMjI1ODAsXG4gIDM0Nzk3NzQ4NjgsXG4gIDM4MzUzOTA0MDEsXG4gIDI2NjY2MTM0NTgsXG4gIDQwMjIyMjQ3NzQsXG4gIDk0NDcxMTEzOSxcbiAgMjY0MzQ3MDc4LFxuICAyMzQxMjYyNzczLFxuICA2MDQ4MDc2MjgsXG4gIDIwMDc4MDA5MzMsXG4gIDc3MDI1NTk4MyxcbiAgMTQ5NTk5MDkwMSxcbiAgMTI0OTE1MDEyMixcbiAgMTg1NjQzMTIzNSxcbiAgMTU1NTA4MTY5MixcbiAgMzE3NTIxODEzMixcbiAgMTk5NjA2NDk4NixcbiAgMjE5ODk1MDgzNyxcbiAgMjU1NDIyMDg4MixcbiAgMzk5OTcxOTMzOSxcbiAgMjgyMTgzNDM0OSxcbiAgNzY2Nzg0MDE2LFxuICAyOTUyOTk2ODA4LFxuICAyNTY2NTk0ODc5LFxuICAzMjEwMzEzNjcxLFxuICAzMjAzMzM3OTU2LFxuICAzMzM2NTcxODkxLFxuICAxMDM0NDU3MDI2LFxuICAzNTg0NTI4NzExLFxuICAyNDY2OTQ4OTAxLFxuICAxMTM5MjY5OTMsXG4gIDM3NTgzMjYzODMsXG4gIDMzODI0MTg5NSxcbiAgMTY4NzE3OTM2LFxuICA2NjYzMDcyMDUsXG4gIDExODgxNzk5NjQsXG4gIDc3MzUyOTkxMixcbiAgMTU0NjA0NTczNCxcbiAgMTI5NDc1NzM3MixcbiAgMTUyMjgwNTQ4NSxcbiAgMTM5NjE4MjI5MSxcbiAgMjY0MzgzMzgyMyxcbiAgMTY5NTE4MzcwMCxcbiAgMjM0MzUyNzM5MCxcbiAgMTk4NjY2MTA1MSxcbiAgMTAxNDQ3NzQ4MCxcbiAgMjE3NzAyNjM1MCxcbiAgMTIwNjc1OTE0MixcbiAgMjQ1Njk1NjAzNyxcbiAgMzQ0MDc3NjI3LFxuICAyNzMwNDg1OTIxLFxuICAxMjkwODYzNDYwLFxuICAyODIwMzAyNDExLFxuICAzMTU4NDU0MjczLFxuICAzMjU5NzMwODAwLFxuICAzNTA1OTUyNjU3LFxuICAzMzQ1NzY0NzcxLFxuICAxMDYyMTcwMDgsXG4gIDM1MTYwNjU4MTcsXG4gIDM2MDYwMDgzNDQsXG4gIDM2MDAzNTI4MDQsXG4gIDE0MzI3MjU3NzYsXG4gIDQwOTQ1NzE5MDksXG4gIDE0NjcwMzE1OTQsXG4gIDI3NTQyMzM0NCxcbiAgODUxMTY5NzIwLFxuICA0MzAyMjc3MzQsXG4gIDMxMDA4MjM3NTIsXG4gIDUwNjk0ODYxNixcbiAgMTM2MzI1ODE5NSxcbiAgNjU5MDYwNTU2LFxuICAzNzUwNjg1NTkzLFxuICA4ODM5OTc4NzcsXG4gIDM3ODUwNTAyODAsXG4gIDk1ODEzOTU3MSxcbiAgMzMxODMwNzQyNyxcbiAgMTMyMjgyMjIxOCxcbiAgMzgxMjcyMzQwMyxcbiAgMTUzNzAwMjA2MyxcbiAgMjAwMzAzNDk5NSxcbiAgMTc0Nzg3Mzc3OSxcbiAgMzYwMjAzNjg5OSxcbiAgMTk1NTU2MjIyMixcbiAgMTU3NTk5MDAxMixcbiAgMjAyNDEwNDgxNSxcbiAgMTEyNTU5MjkyOCxcbiAgMjIyNzczMDQ1MixcbiAgMjcxNjkwNDMwNixcbiAgMjM2MTg1MjQyNCxcbiAgNDQyNzc2MDQ0LFxuICAyNDI4NDM2NDc0LFxuICA1OTM2OTgzNDQsXG4gIDI3NTY3MzQxODcsXG4gIDM3MzMxMTAyNDksXG4gIDMyMDQwMzE0NzksXG4gIDI5OTkzNTE1NzMsXG4gIDMzMjkzMjUyOTgsXG4gIDM4MTU5MjA0MjcsXG4gIDMzOTE1Njk2MTQsXG4gIDM5MjgzODM5MDAsXG4gIDM1MTUyNjcyNzEsXG4gIDU2NjI4MDcxMSxcbiAgMzk0MDE4NzYwNixcbiAgMzQ1NDA2OTUzNCxcbiAgNDExODYzMDI3MSxcbiAgNDAwMDIzOTk5MixcbiAgMTE2NDE4NDc0LFxuICAxOTE0MTM4NTU0LFxuICAxNzQyOTI0MjEsXG4gIDI3MzEwNTUyNzAsXG4gIDI4OTM4MDM1NixcbiAgMzIwMzk5MzAwNixcbiAgNDYwMzkzMjY5LFxuICAzMjA2MjAzMTUsXG4gIDY4NTQ3MTczMyxcbiAgNTg3NDk2ODM2LFxuICA4NTIxNDI5NzEsXG4gIDEwODY3OTI4NTEsXG4gIDEwMTcwMzYyOTgsXG4gIDM2NTU0MzEwMCxcbiAgMTEyNjAwMDU4MCxcbiAgMjYxODI5NzY3NixcbiAgMTI4ODAzMzQ3MCxcbiAgMzQwOTg1NTE1OCxcbiAgMTUwMTUwNTk0OCxcbiAgNDIzNDUwOTg2NixcbiAgMTYwNzE2NzkxNSxcbiAgOTg3MTY3NDY4LFxuICAxODE2NDAyMzE2LFxuICAxMjQ2MTg5NTkxXG5dO1xuZnVuY3Rpb24gU0hBNTEyJDEoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEE1MTIkMSkpXG4gICAgcmV0dXJuIG5ldyBTSEE1MTIkMSgpO1xuICBCbG9ja0hhc2gkMS5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMTc3OTAzMzcwMyxcbiAgICA0MDg5MjM1NzIwLFxuICAgIDMxNDQxMzQyNzcsXG4gICAgMjIyNzg3MzU5NSxcbiAgICAxMDEzOTA0MjQyLFxuICAgIDQyNzExNzU3MjMsXG4gICAgMjc3MzQ4MDc2MixcbiAgICAxNTk1NzUwMTI5LFxuICAgIDEzNTk4OTMxMTksXG4gICAgMjkxNzU2NTEzNyxcbiAgICAyNjAwODIyOTI0LFxuICAgIDcyNTUxMTE5OSxcbiAgICA1Mjg3MzQ2MzUsXG4gICAgNDIxNTM4OTU0NyxcbiAgICAxNTQxNDU5MjI1LFxuICAgIDMyNzAzMzIwOVxuICBdO1xuICB0aGlzLmsgPSBzaGE1MTJfSztcbiAgdGhpcy5XID0gbmV3IEFycmF5KDE2MCk7XG59XG51dGlscyQzLmluaGVyaXRzKFNIQTUxMiQxLCBCbG9ja0hhc2gkMSk7XG52YXIgXzUxMiA9IFNIQTUxMiQxO1xuU0hBNTEyJDEuYmxvY2tTaXplID0gMTAyNDtcblNIQTUxMiQxLm91dFNpemUgPSA1MTI7XG5TSEE1MTIkMS5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEE1MTIkMS5wYWRMZW5ndGggPSAxMjg7XG5TSEE1MTIkMS5wcm90b3R5cGUuX3ByZXBhcmVCbG9jayA9IGZ1bmN0aW9uIF9wcmVwYXJlQmxvY2sobXNnLCBzdGFydCkge1xuICB2YXIgVyA9IHRoaXMuVztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAzMjsgaSsrKVxuICAgIFdbaV0gPSBtc2dbc3RhcnQgKyBpXTtcbiAgZm9yICg7IGkgPCBXLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGMwX2hpID0gZzFfNTEyX2hpKFdbaSAtIDRdLCBXW2kgLSAzXSk7XG4gICAgdmFyIGMwX2xvID0gZzFfNTEyX2xvKFdbaSAtIDRdLCBXW2kgLSAzXSk7XG4gICAgdmFyIGMxX2hpID0gV1tpIC0gMTRdO1xuICAgIHZhciBjMV9sbyA9IFdbaSAtIDEzXTtcbiAgICB2YXIgYzJfaGkgPSBnMF81MTJfaGkoV1tpIC0gMzBdLCBXW2kgLSAyOV0pO1xuICAgIHZhciBjMl9sbyA9IGcwXzUxMl9sbyhXW2kgLSAzMF0sIFdbaSAtIDI5XSk7XG4gICAgdmFyIGMzX2hpID0gV1tpIC0gMzJdO1xuICAgIHZhciBjM19sbyA9IFdbaSAtIDMxXTtcbiAgICBXW2ldID0gc3VtNjRfNF9oaShcbiAgICAgIGMwX2hpLFxuICAgICAgYzBfbG8sXG4gICAgICBjMV9oaSxcbiAgICAgIGMxX2xvLFxuICAgICAgYzJfaGksXG4gICAgICBjMl9sbyxcbiAgICAgIGMzX2hpLFxuICAgICAgYzNfbG9cbiAgICApO1xuICAgIFdbaSArIDFdID0gc3VtNjRfNF9sbyhcbiAgICAgIGMwX2hpLFxuICAgICAgYzBfbG8sXG4gICAgICBjMV9oaSxcbiAgICAgIGMxX2xvLFxuICAgICAgYzJfaGksXG4gICAgICBjMl9sbyxcbiAgICAgIGMzX2hpLFxuICAgICAgYzNfbG9cbiAgICApO1xuICB9XG59O1xuU0hBNTEyJDEucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlMyhtc2csIHN0YXJ0KSB7XG4gIHRoaXMuX3ByZXBhcmVCbG9jayhtc2csIHN0YXJ0KTtcbiAgdmFyIFcgPSB0aGlzLlc7XG4gIHZhciBhaCA9IHRoaXMuaFswXTtcbiAgdmFyIGFsID0gdGhpcy5oWzFdO1xuICB2YXIgYmggPSB0aGlzLmhbMl07XG4gIHZhciBibCA9IHRoaXMuaFszXTtcbiAgdmFyIGNoID0gdGhpcy5oWzRdO1xuICB2YXIgY2wgPSB0aGlzLmhbNV07XG4gIHZhciBkaCA9IHRoaXMuaFs2XTtcbiAgdmFyIGRsID0gdGhpcy5oWzddO1xuICB2YXIgZWggPSB0aGlzLmhbOF07XG4gIHZhciBlbCA9IHRoaXMuaFs5XTtcbiAgdmFyIGZoID0gdGhpcy5oWzEwXTtcbiAgdmFyIGZsID0gdGhpcy5oWzExXTtcbiAgdmFyIGdoID0gdGhpcy5oWzEyXTtcbiAgdmFyIGdsID0gdGhpcy5oWzEzXTtcbiAgdmFyIGhoID0gdGhpcy5oWzE0XTtcbiAgdmFyIGhsID0gdGhpcy5oWzE1XTtcbiAgYXNzZXJ0JDEodGhpcy5rLmxlbmd0aCA9PT0gVy5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IFcubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIgYzBfaGkgPSBoaDtcbiAgICB2YXIgYzBfbG8gPSBobDtcbiAgICB2YXIgYzFfaGkgPSBzMV81MTJfaGkoZWgsIGVsKTtcbiAgICB2YXIgYzFfbG8gPSBzMV81MTJfbG8oZWgsIGVsKTtcbiAgICB2YXIgYzJfaGkgPSBjaDY0X2hpKGVoLCBlbCwgZmgsIGZsLCBnaCk7XG4gICAgdmFyIGMyX2xvID0gY2g2NF9sbyhlaCwgZWwsIGZoLCBmbCwgZ2gsIGdsKTtcbiAgICB2YXIgYzNfaGkgPSB0aGlzLmtbaV07XG4gICAgdmFyIGMzX2xvID0gdGhpcy5rW2kgKyAxXTtcbiAgICB2YXIgYzRfaGkgPSBXW2ldO1xuICAgIHZhciBjNF9sbyA9IFdbaSArIDFdO1xuICAgIHZhciBUMV9oaSA9IHN1bTY0XzVfaGkoXG4gICAgICBjMF9oaSxcbiAgICAgIGMwX2xvLFxuICAgICAgYzFfaGksXG4gICAgICBjMV9sbyxcbiAgICAgIGMyX2hpLFxuICAgICAgYzJfbG8sXG4gICAgICBjM19oaSxcbiAgICAgIGMzX2xvLFxuICAgICAgYzRfaGksXG4gICAgICBjNF9sb1xuICAgICk7XG4gICAgdmFyIFQxX2xvID0gc3VtNjRfNV9sbyhcbiAgICAgIGMwX2hpLFxuICAgICAgYzBfbG8sXG4gICAgICBjMV9oaSxcbiAgICAgIGMxX2xvLFxuICAgICAgYzJfaGksXG4gICAgICBjMl9sbyxcbiAgICAgIGMzX2hpLFxuICAgICAgYzNfbG8sXG4gICAgICBjNF9oaSxcbiAgICAgIGM0X2xvXG4gICAgKTtcbiAgICBjMF9oaSA9IHMwXzUxMl9oaShhaCwgYWwpO1xuICAgIGMwX2xvID0gczBfNTEyX2xvKGFoLCBhbCk7XG4gICAgYzFfaGkgPSBtYWo2NF9oaShhaCwgYWwsIGJoLCBibCwgY2gpO1xuICAgIGMxX2xvID0gbWFqNjRfbG8oYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCk7XG4gICAgdmFyIFQyX2hpID0gc3VtNjRfaGkoYzBfaGksIGMwX2xvLCBjMV9oaSwgYzFfbG8pO1xuICAgIHZhciBUMl9sbyA9IHN1bTY0X2xvKGMwX2hpLCBjMF9sbywgYzFfaGksIGMxX2xvKTtcbiAgICBoaCA9IGdoO1xuICAgIGhsID0gZ2w7XG4gICAgZ2ggPSBmaDtcbiAgICBnbCA9IGZsO1xuICAgIGZoID0gZWg7XG4gICAgZmwgPSBlbDtcbiAgICBlaCA9IHN1bTY0X2hpKGRoLCBkbCwgVDFfaGksIFQxX2xvKTtcbiAgICBlbCA9IHN1bTY0X2xvKGRsLCBkbCwgVDFfaGksIFQxX2xvKTtcbiAgICBkaCA9IGNoO1xuICAgIGRsID0gY2w7XG4gICAgY2ggPSBiaDtcbiAgICBjbCA9IGJsO1xuICAgIGJoID0gYWg7XG4gICAgYmwgPSBhbDtcbiAgICBhaCA9IHN1bTY0X2hpKFQxX2hpLCBUMV9sbywgVDJfaGksIFQyX2xvKTtcbiAgICBhbCA9IHN1bTY0X2xvKFQxX2hpLCBUMV9sbywgVDJfaGksIFQyX2xvKTtcbiAgfVxuICBzdW02NCh0aGlzLmgsIDAsIGFoLCBhbCk7XG4gIHN1bTY0KHRoaXMuaCwgMiwgYmgsIGJsKTtcbiAgc3VtNjQodGhpcy5oLCA0LCBjaCwgY2wpO1xuICBzdW02NCh0aGlzLmgsIDYsIGRoLCBkbCk7XG4gIHN1bTY0KHRoaXMuaCwgOCwgZWgsIGVsKTtcbiAgc3VtNjQodGhpcy5oLCAxMCwgZmgsIGZsKTtcbiAgc3VtNjQodGhpcy5oLCAxMiwgZ2gsIGdsKTtcbiAgc3VtNjQodGhpcy5oLCAxNCwgaGgsIGhsKTtcbn07XG5TSEE1MTIkMS5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdDUoZW5jKSB7XG4gIGlmIChlbmMgPT09IFwiaGV4XCIpXG4gICAgcmV0dXJuIHV0aWxzJDMudG9IZXgzMih0aGlzLmgsIFwiYmlnXCIpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzJDMuc3BsaXQzMih0aGlzLmgsIFwiYmlnXCIpO1xufTtcbmZ1bmN0aW9uIGNoNjRfaGkoeGgsIHhsLCB5aCwgeWwsIHpoKSB7XG4gIHZhciByMiA9IHhoICYgeWggXiB+eGggJiB6aDtcbiAgaWYgKHIyIDwgMClcbiAgICByMiArPSA0Mjk0OTY3Mjk2O1xuICByZXR1cm4gcjI7XG59XG5mdW5jdGlvbiBjaDY0X2xvKHhoLCB4bCwgeWgsIHlsLCB6aCwgemwpIHtcbiAgdmFyIHIyID0geGwgJiB5bCBeIH54bCAmIHpsO1xuICBpZiAocjIgPCAwKVxuICAgIHIyICs9IDQyOTQ5NjcyOTY7XG4gIHJldHVybiByMjtcbn1cbmZ1bmN0aW9uIG1hajY0X2hpKHhoLCB4bCwgeWgsIHlsLCB6aCkge1xuICB2YXIgcjIgPSB4aCAmIHloIF4geGggJiB6aCBeIHloICYgemg7XG4gIGlmIChyMiA8IDApXG4gICAgcjIgKz0gNDI5NDk2NzI5NjtcbiAgcmV0dXJuIHIyO1xufVxuZnVuY3Rpb24gbWFqNjRfbG8oeGgsIHhsLCB5aCwgeWwsIHpoLCB6bCkge1xuICB2YXIgcjIgPSB4bCAmIHlsIF4geGwgJiB6bCBeIHlsICYgemw7XG4gIGlmIChyMiA8IDApXG4gICAgcjIgKz0gNDI5NDk2NzI5NjtcbiAgcmV0dXJuIHIyO1xufVxuZnVuY3Rpb24gczBfNTEyX2hpKHhoLCB4bCkge1xuICB2YXIgYzBfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAyOCk7XG4gIHZhciBjMV9oaSA9IHJvdHI2NF9oaSh4bCwgeGgsIDIpO1xuICB2YXIgYzJfaGkgPSByb3RyNjRfaGkoeGwsIHhoLCA3KTtcbiAgdmFyIHIyID0gYzBfaGkgXiBjMV9oaSBeIGMyX2hpO1xuICBpZiAocjIgPCAwKVxuICAgIHIyICs9IDQyOTQ5NjcyOTY7XG4gIHJldHVybiByMjtcbn1cbmZ1bmN0aW9uIHMwXzUxMl9sbyh4aCwgeGwpIHtcbiAgdmFyIGMwX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMjgpO1xuICB2YXIgYzFfbG8gPSByb3RyNjRfbG8oeGwsIHhoLCAyKTtcbiAgdmFyIGMyX2xvID0gcm90cjY0X2xvKHhsLCB4aCwgNyk7XG4gIHZhciByMiA9IGMwX2xvIF4gYzFfbG8gXiBjMl9sbztcbiAgaWYgKHIyIDwgMClcbiAgICByMiArPSA0Mjk0OTY3Mjk2O1xuICByZXR1cm4gcjI7XG59XG5mdW5jdGlvbiBzMV81MTJfaGkoeGgsIHhsKSB7XG4gIHZhciBjMF9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDE0KTtcbiAgdmFyIGMxX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMTgpO1xuICB2YXIgYzJfaGkgPSByb3RyNjRfaGkoeGwsIHhoLCA5KTtcbiAgdmFyIHIyID0gYzBfaGkgXiBjMV9oaSBeIGMyX2hpO1xuICBpZiAocjIgPCAwKVxuICAgIHIyICs9IDQyOTQ5NjcyOTY7XG4gIHJldHVybiByMjtcbn1cbmZ1bmN0aW9uIHMxXzUxMl9sbyh4aCwgeGwpIHtcbiAgdmFyIGMwX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMTQpO1xuICB2YXIgYzFfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAxOCk7XG4gIHZhciBjMl9sbyA9IHJvdHI2NF9sbyh4bCwgeGgsIDkpO1xuICB2YXIgcjIgPSBjMF9sbyBeIGMxX2xvIF4gYzJfbG87XG4gIGlmIChyMiA8IDApXG4gICAgcjIgKz0gNDI5NDk2NzI5NjtcbiAgcmV0dXJuIHIyO1xufVxuZnVuY3Rpb24gZzBfNTEyX2hpKHhoLCB4bCkge1xuICB2YXIgYzBfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAxKTtcbiAgdmFyIGMxX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgOCk7XG4gIHZhciBjMl9oaSA9IHNocjY0X2hpKHhoLCB4bCwgNyk7XG4gIHZhciByMiA9IGMwX2hpIF4gYzFfaGkgXiBjMl9oaTtcbiAgaWYgKHIyIDwgMClcbiAgICByMiArPSA0Mjk0OTY3Mjk2O1xuICByZXR1cm4gcjI7XG59XG5mdW5jdGlvbiBnMF81MTJfbG8oeGgsIHhsKSB7XG4gIHZhciBjMF9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDEpO1xuICB2YXIgYzFfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCA4KTtcbiAgdmFyIGMyX2xvID0gc2hyNjRfbG8oeGgsIHhsLCA3KTtcbiAgdmFyIHIyID0gYzBfbG8gXiBjMV9sbyBeIGMyX2xvO1xuICBpZiAocjIgPCAwKVxuICAgIHIyICs9IDQyOTQ5NjcyOTY7XG4gIHJldHVybiByMjtcbn1cbmZ1bmN0aW9uIGcxXzUxMl9oaSh4aCwgeGwpIHtcbiAgdmFyIGMwX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMTkpO1xuICB2YXIgYzFfaGkgPSByb3RyNjRfaGkoeGwsIHhoLCAyOSk7XG4gIHZhciBjMl9oaSA9IHNocjY0X2hpKHhoLCB4bCwgNik7XG4gIHZhciByMiA9IGMwX2hpIF4gYzFfaGkgXiBjMl9oaTtcbiAgaWYgKHIyIDwgMClcbiAgICByMiArPSA0Mjk0OTY3Mjk2O1xuICByZXR1cm4gcjI7XG59XG5mdW5jdGlvbiBnMV81MTJfbG8oeGgsIHhsKSB7XG4gIHZhciBjMF9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDE5KTtcbiAgdmFyIGMxX2xvID0gcm90cjY0X2xvKHhsLCB4aCwgMjkpO1xuICB2YXIgYzJfbG8gPSBzaHI2NF9sbyh4aCwgeGwsIDYpO1xuICB2YXIgcjIgPSBjMF9sbyBeIGMxX2xvIF4gYzJfbG87XG4gIGlmIChyMiA8IDApXG4gICAgcjIgKz0gNDI5NDk2NzI5NjtcbiAgcmV0dXJuIHIyO1xufVxudmFyIHV0aWxzJDIgPSB1dGlscyQ5O1xudmFyIFNIQTUxMiA9IF81MTI7XG5mdW5jdGlvbiBTSEEzODQoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEEzODQpKVxuICAgIHJldHVybiBuZXcgU0hBMzg0KCk7XG4gIFNIQTUxMi5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMzQxODA3MDM2NSxcbiAgICAzMjM4MzcxMDMyLFxuICAgIDE2NTQyNzAyNTAsXG4gICAgOTE0MTUwNjYzLFxuICAgIDI0Mzg1MjkzNzAsXG4gICAgODEyNzAyOTk5LFxuICAgIDM1NTQ2MjM2MCxcbiAgICA0MTQ0OTEyNjk3LFxuICAgIDE3MzE0MDU0MTUsXG4gICAgNDI5MDc3NTg1NyxcbiAgICAyMzk0MTgwMjMxLFxuICAgIDE3NTA2MDMwMjUsXG4gICAgMzY3NTAwODUyNSxcbiAgICAxNjk0MDc2ODM5LFxuICAgIDEyMDMwNjI4MTMsXG4gICAgMzIwNDA3NTQyOFxuICBdO1xufVxudXRpbHMkMi5pbmhlcml0cyhTSEEzODQsIFNIQTUxMik7XG52YXIgXzM4NCA9IFNIQTM4NDtcblNIQTM4NC5ibG9ja1NpemUgPSAxMDI0O1xuU0hBMzg0Lm91dFNpemUgPSAzODQ7XG5TSEEzODQuaG1hY1N0cmVuZ3RoID0gMTkyO1xuU0hBMzg0LnBhZExlbmd0aCA9IDEyODtcblNIQTM4NC5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdDYoZW5jKSB7XG4gIGlmIChlbmMgPT09IFwiaGV4XCIpXG4gICAgcmV0dXJuIHV0aWxzJDIudG9IZXgzMih0aGlzLmguc2xpY2UoMCwgMTIpLCBcImJpZ1wiKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscyQyLnNwbGl0MzIodGhpcy5oLnNsaWNlKDAsIDEyKSwgXCJiaWdcIik7XG59O1xuc2hhLnNoYTEgPSBfMTtcbnNoYS5zaGEyMjQgPSBfMjI0O1xuc2hhLnNoYTI1NiA9IF8yNTY7XG5zaGEuc2hhMzg0ID0gXzM4NDtcbnNoYS5zaGE1MTIgPSBfNTEyO1xudmFyIHJpcGVtZCA9IHt9O1xudmFyIHV0aWxzJDEgPSB1dGlscyQ5O1xudmFyIGNvbW1vbiA9IGNvbW1vbiQ1O1xudmFyIHJvdGwzMiA9IHV0aWxzJDEucm90bDMyO1xudmFyIHN1bTMyID0gdXRpbHMkMS5zdW0zMjtcbnZhciBzdW0zMl8zID0gdXRpbHMkMS5zdW0zMl8zO1xudmFyIHN1bTMyXzQgPSB1dGlscyQxLnN1bTMyXzQ7XG52YXIgQmxvY2tIYXNoID0gY29tbW9uLkJsb2NrSGFzaDtcbmZ1bmN0aW9uIFJJUEVNRDE2MCgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJJUEVNRDE2MCkpXG4gICAgcmV0dXJuIG5ldyBSSVBFTUQxNjAoKTtcbiAgQmxvY2tIYXNoLmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFsxNzMyNTg0MTkzLCA0MDIzMjMzNDE3LCAyNTYyMzgzMTAyLCAyNzE3MzM4NzgsIDMyODUzNzc1MjBdO1xuICB0aGlzLmVuZGlhbiA9IFwibGl0dGxlXCI7XG59XG51dGlscyQxLmluaGVyaXRzKFJJUEVNRDE2MCwgQmxvY2tIYXNoKTtcbnJpcGVtZC5yaXBlbWQxNjAgPSBSSVBFTUQxNjA7XG5SSVBFTUQxNjAuYmxvY2tTaXplID0gNTEyO1xuUklQRU1EMTYwLm91dFNpemUgPSAxNjA7XG5SSVBFTUQxNjAuaG1hY1N0cmVuZ3RoID0gMTkyO1xuUklQRU1EMTYwLnBhZExlbmd0aCA9IDY0O1xuUklQRU1EMTYwLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlMihtc2csIHN0YXJ0KSB7XG4gIHZhciBBID0gdGhpcy5oWzBdO1xuICB2YXIgQiA9IHRoaXMuaFsxXTtcbiAgdmFyIEMgPSB0aGlzLmhbMl07XG4gIHZhciBEID0gdGhpcy5oWzNdO1xuICB2YXIgRSA9IHRoaXMuaFs0XTtcbiAgdmFyIEFoID0gQTtcbiAgdmFyIEJoID0gQjtcbiAgdmFyIENoID0gQztcbiAgdmFyIERoID0gRDtcbiAgdmFyIEVoID0gRTtcbiAgZm9yICh2YXIgaiA9IDA7IGogPCA4MDsgaisrKSB7XG4gICAgdmFyIFQgPSBzdW0zMihcbiAgICAgIHJvdGwzMihcbiAgICAgICAgc3VtMzJfNChBLCBmKGosIEIsIEMsIEQpLCBtc2dbcltqXSArIHN0YXJ0XSwgSyhqKSksXG4gICAgICAgIHNbal1cbiAgICAgICksXG4gICAgICBFXG4gICAgKTtcbiAgICBBID0gRTtcbiAgICBFID0gRDtcbiAgICBEID0gcm90bDMyKEMsIDEwKTtcbiAgICBDID0gQjtcbiAgICBCID0gVDtcbiAgICBUID0gc3VtMzIoXG4gICAgICByb3RsMzIoXG4gICAgICAgIHN1bTMyXzQoQWgsIGYoNzkgLSBqLCBCaCwgQ2gsIERoKSwgbXNnW3JoW2pdICsgc3RhcnRdLCBLaChqKSksXG4gICAgICAgIHNoW2pdXG4gICAgICApLFxuICAgICAgRWhcbiAgICApO1xuICAgIEFoID0gRWg7XG4gICAgRWggPSBEaDtcbiAgICBEaCA9IHJvdGwzMihDaCwgMTApO1xuICAgIENoID0gQmg7XG4gICAgQmggPSBUO1xuICB9XG4gIFQgPSBzdW0zMl8zKHRoaXMuaFsxXSwgQywgRGgpO1xuICB0aGlzLmhbMV0gPSBzdW0zMl8zKHRoaXMuaFsyXSwgRCwgRWgpO1xuICB0aGlzLmhbMl0gPSBzdW0zMl8zKHRoaXMuaFszXSwgRSwgQWgpO1xuICB0aGlzLmhbM10gPSBzdW0zMl8zKHRoaXMuaFs0XSwgQSwgQmgpO1xuICB0aGlzLmhbNF0gPSBzdW0zMl8zKHRoaXMuaFswXSwgQiwgQ2gpO1xuICB0aGlzLmhbMF0gPSBUO1xufTtcblJJUEVNRDE2MC5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdDcoZW5jKSB7XG4gIGlmIChlbmMgPT09IFwiaGV4XCIpXG4gICAgcmV0dXJuIHV0aWxzJDEudG9IZXgzMih0aGlzLmgsIFwibGl0dGxlXCIpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzJDEuc3BsaXQzMih0aGlzLmgsIFwibGl0dGxlXCIpO1xufTtcbmZ1bmN0aW9uIGYoaiwgeCwgeSwgeikge1xuICBpZiAoaiA8PSAxNSlcbiAgICByZXR1cm4geCBeIHkgXiB6O1xuICBlbHNlIGlmIChqIDw9IDMxKVxuICAgIHJldHVybiB4ICYgeSB8IH54ICYgejtcbiAgZWxzZSBpZiAoaiA8PSA0NylcbiAgICByZXR1cm4gKHggfCB+eSkgXiB6O1xuICBlbHNlIGlmIChqIDw9IDYzKVxuICAgIHJldHVybiB4ICYgeiB8IHkgJiB+ejtcbiAgZWxzZVxuICAgIHJldHVybiB4IF4gKHkgfCB+eik7XG59XG5mdW5jdGlvbiBLKGopIHtcbiAgaWYgKGogPD0gMTUpXG4gICAgcmV0dXJuIDA7XG4gIGVsc2UgaWYgKGogPD0gMzEpXG4gICAgcmV0dXJuIDE1MTg1MDAyNDk7XG4gIGVsc2UgaWYgKGogPD0gNDcpXG4gICAgcmV0dXJuIDE4NTk3NzUzOTM7XG4gIGVsc2UgaWYgKGogPD0gNjMpXG4gICAgcmV0dXJuIDI0MDA5NTk3MDg7XG4gIGVsc2VcbiAgICByZXR1cm4gMjg0MDg1MzgzODtcbn1cbmZ1bmN0aW9uIEtoKGopIHtcbiAgaWYgKGogPD0gMTUpXG4gICAgcmV0dXJuIDEzNTI4Mjk5MjY7XG4gIGVsc2UgaWYgKGogPD0gMzEpXG4gICAgcmV0dXJuIDE1NDg2MDM2ODQ7XG4gIGVsc2UgaWYgKGogPD0gNDcpXG4gICAgcmV0dXJuIDE4MzYwNzI2OTE7XG4gIGVsc2UgaWYgKGogPD0gNjMpXG4gICAgcmV0dXJuIDIwNTM5OTQyMTc7XG4gIGVsc2VcbiAgICByZXR1cm4gMDtcbn1cbnZhciByID0gW1xuICAwLFxuICAxLFxuICAyLFxuICAzLFxuICA0LFxuICA1LFxuICA2LFxuICA3LFxuICA4LFxuICA5LFxuICAxMCxcbiAgMTEsXG4gIDEyLFxuICAxMyxcbiAgMTQsXG4gIDE1LFxuICA3LFxuICA0LFxuICAxMyxcbiAgMSxcbiAgMTAsXG4gIDYsXG4gIDE1LFxuICAzLFxuICAxMixcbiAgMCxcbiAgOSxcbiAgNSxcbiAgMixcbiAgMTQsXG4gIDExLFxuICA4LFxuICAzLFxuICAxMCxcbiAgMTQsXG4gIDQsXG4gIDksXG4gIDE1LFxuICA4LFxuICAxLFxuICAyLFxuICA3LFxuICAwLFxuICA2LFxuICAxMyxcbiAgMTEsXG4gIDUsXG4gIDEyLFxuICAxLFxuICA5LFxuICAxMSxcbiAgMTAsXG4gIDAsXG4gIDgsXG4gIDEyLFxuICA0LFxuICAxMyxcbiAgMyxcbiAgNyxcbiAgMTUsXG4gIDE0LFxuICA1LFxuICA2LFxuICAyLFxuICA0LFxuICAwLFxuICA1LFxuICA5LFxuICA3LFxuICAxMixcbiAgMixcbiAgMTAsXG4gIDE0LFxuICAxLFxuICAzLFxuICA4LFxuICAxMSxcbiAgNixcbiAgMTUsXG4gIDEzXG5dO1xudmFyIHJoID0gW1xuICA1LFxuICAxNCxcbiAgNyxcbiAgMCxcbiAgOSxcbiAgMixcbiAgMTEsXG4gIDQsXG4gIDEzLFxuICA2LFxuICAxNSxcbiAgOCxcbiAgMSxcbiAgMTAsXG4gIDMsXG4gIDEyLFxuICA2LFxuICAxMSxcbiAgMyxcbiAgNyxcbiAgMCxcbiAgMTMsXG4gIDUsXG4gIDEwLFxuICAxNCxcbiAgMTUsXG4gIDgsXG4gIDEyLFxuICA0LFxuICA5LFxuICAxLFxuICAyLFxuICAxNSxcbiAgNSxcbiAgMSxcbiAgMyxcbiAgNyxcbiAgMTQsXG4gIDYsXG4gIDksXG4gIDExLFxuICA4LFxuICAxMixcbiAgMixcbiAgMTAsXG4gIDAsXG4gIDQsXG4gIDEzLFxuICA4LFxuICA2LFxuICA0LFxuICAxLFxuICAzLFxuICAxMSxcbiAgMTUsXG4gIDAsXG4gIDUsXG4gIDEyLFxuICAyLFxuICAxMyxcbiAgOSxcbiAgNyxcbiAgMTAsXG4gIDE0LFxuICAxMixcbiAgMTUsXG4gIDEwLFxuICA0LFxuICAxLFxuICA1LFxuICA4LFxuICA3LFxuICA2LFxuICAyLFxuICAxMyxcbiAgMTQsXG4gIDAsXG4gIDMsXG4gIDksXG4gIDExXG5dO1xudmFyIHMgPSBbXG4gIDExLFxuICAxNCxcbiAgMTUsXG4gIDEyLFxuICA1LFxuICA4LFxuICA3LFxuICA5LFxuICAxMSxcbiAgMTMsXG4gIDE0LFxuICAxNSxcbiAgNixcbiAgNyxcbiAgOSxcbiAgOCxcbiAgNyxcbiAgNixcbiAgOCxcbiAgMTMsXG4gIDExLFxuICA5LFxuICA3LFxuICAxNSxcbiAgNyxcbiAgMTIsXG4gIDE1LFxuICA5LFxuICAxMSxcbiAgNyxcbiAgMTMsXG4gIDEyLFxuICAxMSxcbiAgMTMsXG4gIDYsXG4gIDcsXG4gIDE0LFxuICA5LFxuICAxMyxcbiAgMTUsXG4gIDE0LFxuICA4LFxuICAxMyxcbiAgNixcbiAgNSxcbiAgMTIsXG4gIDcsXG4gIDUsXG4gIDExLFxuICAxMixcbiAgMTQsXG4gIDE1LFxuICAxNCxcbiAgMTUsXG4gIDksXG4gIDgsXG4gIDksXG4gIDE0LFxuICA1LFxuICA2LFxuICA4LFxuICA2LFxuICA1LFxuICAxMixcbiAgOSxcbiAgMTUsXG4gIDUsXG4gIDExLFxuICA2LFxuICA4LFxuICAxMyxcbiAgMTIsXG4gIDUsXG4gIDEyLFxuICAxMyxcbiAgMTQsXG4gIDExLFxuICA4LFxuICA1LFxuICA2XG5dO1xudmFyIHNoID0gW1xuICA4LFxuICA5LFxuICA5LFxuICAxMSxcbiAgMTMsXG4gIDE1LFxuICAxNSxcbiAgNSxcbiAgNyxcbiAgNyxcbiAgOCxcbiAgMTEsXG4gIDE0LFxuICAxNCxcbiAgMTIsXG4gIDYsXG4gIDksXG4gIDEzLFxuICAxNSxcbiAgNyxcbiAgMTIsXG4gIDgsXG4gIDksXG4gIDExLFxuICA3LFxuICA3LFxuICAxMixcbiAgNyxcbiAgNixcbiAgMTUsXG4gIDEzLFxuICAxMSxcbiAgOSxcbiAgNyxcbiAgMTUsXG4gIDExLFxuICA4LFxuICA2LFxuICA2LFxuICAxNCxcbiAgMTIsXG4gIDEzLFxuICA1LFxuICAxNCxcbiAgMTMsXG4gIDEzLFxuICA3LFxuICA1LFxuICAxNSxcbiAgNSxcbiAgOCxcbiAgMTEsXG4gIDE0LFxuICAxNCxcbiAgNixcbiAgMTQsXG4gIDYsXG4gIDksXG4gIDEyLFxuICA5LFxuICAxMixcbiAgNSxcbiAgMTUsXG4gIDgsXG4gIDgsXG4gIDUsXG4gIDEyLFxuICA5LFxuICAxMixcbiAgNSxcbiAgMTQsXG4gIDYsXG4gIDgsXG4gIDEzLFxuICA2LFxuICA1LFxuICAxNSxcbiAgMTMsXG4gIDExLFxuICAxMVxuXTtcbnZhciB1dGlscyA9IHV0aWxzJDk7XG52YXIgYXNzZXJ0ID0gbWluaW1hbGlzdGljQXNzZXJ0O1xuZnVuY3Rpb24gSG1hYyhoYXNoMiwga2V5LCBlbmMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEhtYWMpKVxuICAgIHJldHVybiBuZXcgSG1hYyhoYXNoMiwga2V5LCBlbmMpO1xuICB0aGlzLkhhc2ggPSBoYXNoMjtcbiAgdGhpcy5ibG9ja1NpemUgPSBoYXNoMi5ibG9ja1NpemUgLyA4O1xuICB0aGlzLm91dFNpemUgPSBoYXNoMi5vdXRTaXplIC8gODtcbiAgdGhpcy5pbm5lciA9IG51bGw7XG4gIHRoaXMub3V0ZXIgPSBudWxsO1xuICB0aGlzLl9pbml0KHV0aWxzLnRvQXJyYXkoa2V5LCBlbmMpKTtcbn1cbnZhciBobWFjID0gSG1hYztcbkhtYWMucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdChrZXkpIHtcbiAgaWYgKGtleS5sZW5ndGggPiB0aGlzLmJsb2NrU2l6ZSlcbiAgICBrZXkgPSBuZXcgdGhpcy5IYXNoKCkudXBkYXRlKGtleSkuZGlnZXN0KCk7XG4gIGFzc2VydChrZXkubGVuZ3RoIDw9IHRoaXMuYmxvY2tTaXplKTtcbiAgZm9yICh2YXIgaSA9IGtleS5sZW5ndGg7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgIGtleS5wdXNoKDApO1xuICBmb3IgKGkgPSAwOyBpIDwga2V5Lmxlbmd0aDsgaSsrKVxuICAgIGtleVtpXSBePSA1NDtcbiAgdGhpcy5pbm5lciA9IG5ldyB0aGlzLkhhc2goKS51cGRhdGUoa2V5KTtcbiAgZm9yIChpID0gMDsgaSA8IGtleS5sZW5ndGg7IGkrKylcbiAgICBrZXlbaV0gXj0gMTA2O1xuICB0aGlzLm91dGVyID0gbmV3IHRoaXMuSGFzaCgpLnVwZGF0ZShrZXkpO1xufTtcbkhtYWMucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZTMobXNnLCBlbmMpIHtcbiAgdGhpcy5pbm5lci51cGRhdGUobXNnLCBlbmMpO1xuICByZXR1cm4gdGhpcztcbn07XG5IbWFjLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3Q4KGVuYykge1xuICB0aGlzLm91dGVyLnVwZGF0ZSh0aGlzLmlubmVyLmRpZ2VzdCgpKTtcbiAgcmV0dXJuIHRoaXMub3V0ZXIuZGlnZXN0KGVuYyk7XG59O1xuKGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiAgdmFyIGhhc2gyID0gZXhwb3J0cztcbiAgaGFzaDIudXRpbHMgPSB1dGlscyQ5O1xuICBoYXNoMi5jb21tb24gPSBjb21tb24kNTtcbiAgaGFzaDIuc2hhID0gc2hhO1xuICBoYXNoMi5yaXBlbWQgPSByaXBlbWQ7XG4gIGhhc2gyLmhtYWMgPSBobWFjO1xuICBoYXNoMi5zaGExID0gaGFzaDIuc2hhLnNoYTE7XG4gIGhhc2gyLnNoYTI1NiA9IGhhc2gyLnNoYS5zaGEyNTY7XG4gIGhhc2gyLnNoYTIyNCA9IGhhc2gyLnNoYS5zaGEyMjQ7XG4gIGhhc2gyLnNoYTM4NCA9IGhhc2gyLnNoYS5zaGEzODQ7XG4gIGhhc2gyLnNoYTUxMiA9IGhhc2gyLnNoYS5zaGE1MTI7XG4gIGhhc2gyLnJpcGVtZDE2MCA9IGhhc2gyLnJpcGVtZC5yaXBlbWQxNjA7XG59KShoYXNoJDEpO1xuY29uc3QgaGFzaCA9IC8qIEBfX1BVUkVfXyAqLyBnZXREZWZhdWx0RXhwb3J0RnJvbUNqcyQxKGhhc2gkMSk7XG5sZXQgdXJsQWxwaGFiZXQgPSBcInVzZWFuZG9tLTI2VDE5ODM0MFBYNzVweEpBQ0tWRVJZTUlOREJVU0hXT0xGX0dRWmJmZ2hqa2xxdnd5enJpY3RcIjtcbmxldCBjdXN0b21BbHBoYWJldCA9IChhbHBoYWJldCwgZGVmYXVsdFNpemUgPSAyMSkgPT4ge1xuICByZXR1cm4gKHNpemUgPSBkZWZhdWx0U2l6ZSkgPT4ge1xuICAgIGxldCBpZCA9IFwiXCI7XG4gICAgbGV0IGkgPSBzaXplO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlkICs9IGFscGhhYmV0W01hdGgucmFuZG9tKCkgKiBhbHBoYWJldC5sZW5ndGggfCAwXTtcbiAgICB9XG4gICAgcmV0dXJuIGlkO1xuICB9O1xufTtcbmxldCBuYW5vaWQgPSAoc2l6ZSA9IDIxKSA9PiB7XG4gIGxldCBpZCA9IFwiXCI7XG4gIGxldCBpID0gc2l6ZTtcbiAgd2hpbGUgKGktLSkge1xuICAgIGlkICs9IHVybEFscGhhYmV0W01hdGgucmFuZG9tKCkgKiA2NCB8IDBdO1xuICB9XG4gIHJldHVybiBpZDtcbn07XG5jb25zdCBjb252ZXJ0TWlsbGltZXRlcnNUb1R3aXAgPSAobWlsbGltZXRlcnMpID0+IE1hdGguZmxvb3IobWlsbGltZXRlcnMgLyAyNS40ICogNzIgKiAyMCk7XG5jb25zdCBjb252ZXJ0SW5jaGVzVG9Ud2lwID0gKGluY2hlcykgPT4gTWF0aC5mbG9vcihpbmNoZXMgKiA3MiAqIDIwKTtcbmNvbnN0IHVuaXF1ZU51bWVyaWNJZENyZWF0b3IgPSAoaW5pdGlhbCA9IDApID0+IHtcbiAgbGV0IGN1cnJlbnRDb3VudCA9IGluaXRpYWw7XG4gIHJldHVybiAoKSA9PiArK2N1cnJlbnRDb3VudDtcbn07XG5jb25zdCBhYnN0cmFjdE51bVVuaXF1ZU51bWVyaWNJZEdlbiA9ICgpID0+IHVuaXF1ZU51bWVyaWNJZENyZWF0b3IoKTtcbmNvbnN0IGNvbmNyZXRlTnVtVW5pcXVlTnVtZXJpY0lkR2VuID0gKCkgPT4gdW5pcXVlTnVtZXJpY0lkQ3JlYXRvcigxKTtcbmNvbnN0IGRvY1Byb3BlcnRpZXNVbmlxdWVOdW1lcmljSWRHZW4gPSAoKSA9PiB1bmlxdWVOdW1lcmljSWRDcmVhdG9yKCk7XG5jb25zdCBib29rbWFya1VuaXF1ZU51bWVyaWNJZEdlbiA9ICgpID0+IHVuaXF1ZU51bWVyaWNJZENyZWF0b3IoKTtcbmNvbnN0IHVuaXF1ZUlkID0gKCkgPT4gbmFub2lkKCkudG9Mb3dlckNhc2UoKTtcbmNvbnN0IGhhc2hlZElkID0gKGRhdGEpID0+IGhhc2guc2hhMSgpLnVwZGF0ZShkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgPyBuZXcgVWludDhBcnJheShkYXRhKSA6IGRhdGEpLmRpZ2VzdChcImhleFwiKTtcbmNvbnN0IGdlbmVyYXRlVXVpZFBhcnQgPSAoY291bnQpID0+IGN1c3RvbUFscGhhYmV0KFwiMTIzNDU2Nzg5MGFiY2RlZlwiLCBjb3VudCkoKTtcbmNvbnN0IHVuaXF1ZVV1aWQgPSAoKSA9PiBgJHtnZW5lcmF0ZVV1aWRQYXJ0KDgpfS0ke2dlbmVyYXRlVXVpZFBhcnQoNCl9LSR7Z2VuZXJhdGVVdWlkUGFydCg0KX0tJHtnZW5lcmF0ZVV1aWRQYXJ0KDQpfS0ke2dlbmVyYXRlVXVpZFBhcnQoMTIpfWA7XG5jb25zdCBIb3Jpem9udGFsUG9zaXRpb25SZWxhdGl2ZUZyb20gPSB7XG4gIENIQVJBQ1RFUjogXCJjaGFyYWN0ZXJcIixcbiAgQ09MVU1OOiBcImNvbHVtblwiLFxuICBJTlNJREVfTUFSR0lOOiBcImluc2lkZU1hcmdpblwiLFxuICBMRUZUX01BUkdJTjogXCJsZWZ0TWFyZ2luXCIsXG4gIE1BUkdJTjogXCJtYXJnaW5cIixcbiAgT1VUU0lERV9NQVJHSU46IFwib3V0c2lkZU1hcmdpblwiLFxuICBQQUdFOiBcInBhZ2VcIixcbiAgUklHSFRfTUFSR0lOOiBcInJpZ2h0TWFyZ2luXCJcbn07XG5jb25zdCBWZXJ0aWNhbFBvc2l0aW9uUmVsYXRpdmVGcm9tID0ge1xuICBCT1RUT01fTUFSR0lOOiBcImJvdHRvbU1hcmdpblwiLFxuICBJTlNJREVfTUFSR0lOOiBcImluc2lkZU1hcmdpblwiLFxuICBMSU5FOiBcImxpbmVcIixcbiAgTUFSR0lOOiBcIm1hcmdpblwiLFxuICBPVVRTSURFX01BUkdJTjogXCJvdXRzaWRlTWFyZ2luXCIsXG4gIFBBR0U6IFwicGFnZVwiLFxuICBQQVJBR1JBUEg6IFwicGFyYWdyYXBoXCIsXG4gIFRPUF9NQVJHSU46IFwidG9wTWFyZ2luXCJcbn07XG5jbGFzcyBTaW1wbGVQb3NBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICB4OiBcInhcIixcbiAgICAgIHk6IFwieVwiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIFNpbXBsZVBvcyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwid3A6c2ltcGxlUG9zXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IFNpbXBsZVBvc0F0dHJpYnV0ZXMoe1xuICAgICAgICB4OiAwLFxuICAgICAgICB5OiAwXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNsYXNzIEFsaWduIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICBzdXBlcihcIndwOmFsaWduXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKHZhbHVlKTtcbiAgfVxufVxuY2xhc3MgUG9zaXRpb25PZmZzZXQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvZmZzZXRWYWx1ZSkge1xuICAgIHN1cGVyKFwid3A6cG9zT2Zmc2V0XCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG9mZnNldFZhbHVlLnRvU3RyaW5nKCkpO1xuICB9XG59XG5jbGFzcyBIb3Jpem9udGFsUG9zaXRpb25BdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICByZWxhdGl2ZUZyb206IFwicmVsYXRpdmVGcm9tXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgSG9yaXpvbnRhbFBvc2l0aW9uIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoaG9yaXpvbnRhbFBvc2l0aW9uKSB7XG4gICAgc3VwZXIoXCJ3cDpwb3NpdGlvbkhcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgSG9yaXpvbnRhbFBvc2l0aW9uQXR0cmlidXRlcyh7XG4gICAgICAgIHJlbGF0aXZlRnJvbTogaG9yaXpvbnRhbFBvc2l0aW9uLnJlbGF0aXZlIHx8IEhvcml6b250YWxQb3NpdGlvblJlbGF0aXZlRnJvbS5QQUdFXG4gICAgICB9KVxuICAgICk7XG4gICAgaWYgKGhvcml6b250YWxQb3NpdGlvbi5hbGlnbikge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IEFsaWduKGhvcml6b250YWxQb3NpdGlvbi5hbGlnbikpO1xuICAgIH0gZWxzZSBpZiAoaG9yaXpvbnRhbFBvc2l0aW9uLm9mZnNldCAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgUG9zaXRpb25PZmZzZXQoaG9yaXpvbnRhbFBvc2l0aW9uLm9mZnNldCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGVyZSBpcyBubyBjb25maWd1cmF0aW9uIHByb3ZpZGVkIGZvciBmbG9hdGluZyBwb3NpdGlvbiAoQWxpZ24gb3Igb2Zmc2V0KVwiKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIFZlcnRpY2FsUG9zaXRpb25BdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICByZWxhdGl2ZUZyb206IFwicmVsYXRpdmVGcm9tXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgVmVydGljYWxQb3NpdGlvbiBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHZlcnRpY2FsUG9zaXRpb24pIHtcbiAgICBzdXBlcihcIndwOnBvc2l0aW9uVlwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBWZXJ0aWNhbFBvc2l0aW9uQXR0cmlidXRlcyh7XG4gICAgICAgIHJlbGF0aXZlRnJvbTogdmVydGljYWxQb3NpdGlvbi5yZWxhdGl2ZSB8fCBWZXJ0aWNhbFBvc2l0aW9uUmVsYXRpdmVGcm9tLlBBR0VcbiAgICAgIH0pXG4gICAgKTtcbiAgICBpZiAodmVydGljYWxQb3NpdGlvbi5hbGlnbikge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IEFsaWduKHZlcnRpY2FsUG9zaXRpb24uYWxpZ24pKTtcbiAgICB9IGVsc2UgaWYgKHZlcnRpY2FsUG9zaXRpb24ub2Zmc2V0ICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBQb3NpdGlvbk9mZnNldCh2ZXJ0aWNhbFBvc2l0aW9uLm9mZnNldCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGVyZSBpcyBubyBjb25maWd1cmF0aW9uIHByb3ZpZGVkIGZvciBmbG9hdGluZyBwb3NpdGlvbiAoQWxpZ24gb3Igb2Zmc2V0KVwiKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIEdyYXBoaWNEYXRhQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgdXJpOiBcInVyaVwiXG4gICAgfSk7XG4gIH1cbn1cbmNvbnN0IGNyZWF0ZVN2Z0JsaXAgPSAobWVkaWFEYXRhKSA9PiBuZXcgQnVpbGRlckVsZW1lbnQoe1xuICBuYW1lOiBcImFzdmc6c3ZnQmxpcFwiLFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgYXN2Zzoge1xuICAgICAga2V5OiBcInhtbG5zOmFzdmdcIixcbiAgICAgIHZhbHVlOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2RyYXdpbmcvMjAxNi9TVkcvbWFpblwiXG4gICAgfSxcbiAgICBlbWJlZDoge1xuICAgICAga2V5OiBcInI6ZW1iZWRcIixcbiAgICAgIHZhbHVlOiBgcklkeyR7bWVkaWFEYXRhLmZpbGVOYW1lfX1gXG4gICAgfVxuICB9XG59KTtcbmNvbnN0IGNyZWF0ZUV4dGVudGlvbiA9IChtZWRpYURhdGEpID0+IG5ldyBCdWlsZGVyRWxlbWVudCh7XG4gIG5hbWU6IFwiYTpleHRcIixcbiAgYXR0cmlidXRlczoge1xuICAgIHVyaToge1xuICAgICAga2V5OiBcInVyaVwiLFxuICAgICAgdmFsdWU6IFwiezk2REFDNTQxLTdCN0EtNDNEMy04Qjc5LTM3RDYzM0I4NDZGMX1cIlxuICAgIH1cbiAgfSxcbiAgY2hpbGRyZW46IFtjcmVhdGVTdmdCbGlwKG1lZGlhRGF0YSldXG59KTtcbmNvbnN0IGNyZWF0ZUV4dGVudGlvbkxpc3QgPSAobWVkaWFEYXRhKSA9PiBuZXcgQnVpbGRlckVsZW1lbnQoe1xuICBuYW1lOiBcImE6ZXh0THN0XCIsXG4gIGNoaWxkcmVuOiBbY3JlYXRlRXh0ZW50aW9uKG1lZGlhRGF0YSldXG59KTtcbmNvbnN0IGNyZWF0ZUJsaXAgPSAobWVkaWFEYXRhKSA9PiBuZXcgQnVpbGRlckVsZW1lbnQoe1xuICBuYW1lOiBcImE6YmxpcFwiLFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgZW1iZWQ6IHtcbiAgICAgIGtleTogXCJyOmVtYmVkXCIsXG4gICAgICB2YWx1ZTogYHJJZHske21lZGlhRGF0YS50eXBlID09PSBcInN2Z1wiID8gbWVkaWFEYXRhLmZhbGxiYWNrLmZpbGVOYW1lIDogbWVkaWFEYXRhLmZpbGVOYW1lfX1gXG4gICAgfSxcbiAgICBjc3RhdGU6IHtcbiAgICAgIGtleTogXCJjc3RhdGVcIixcbiAgICAgIHZhbHVlOiBcIm5vbmVcIlxuICAgIH1cbiAgfSxcbiAgY2hpbGRyZW46IG1lZGlhRGF0YS50eXBlID09PSBcInN2Z1wiID8gW2NyZWF0ZUV4dGVudGlvbkxpc3QobWVkaWFEYXRhKV0gOiBbXVxufSk7XG5jbGFzcyBTb3VyY2VSZWN0YW5nbGUgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcImE6c3JjUmVjdFwiKTtcbiAgfVxufVxuY2xhc3MgRmlsbFJlY3RhbmdsZSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwiYTpmaWxsUmVjdFwiKTtcbiAgfVxufVxuY2xhc3MgU3RyZXRjaCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwiYTpzdHJldGNoXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBGaWxsUmVjdGFuZ2xlKCkpO1xuICB9XG59XG5jbGFzcyBCbGlwRmlsbCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG1lZGlhRGF0YSkge1xuICAgIHN1cGVyKFwicGljOmJsaXBGaWxsXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKGNyZWF0ZUJsaXAobWVkaWFEYXRhKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IFNvdXJjZVJlY3RhbmdsZSgpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgU3RyZXRjaCgpKTtcbiAgfVxufVxuY2xhc3MgUGljTG9ja3NBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICBub0NoYW5nZUFzcGVjdDogXCJub0NoYW5nZUFzcGVjdFwiLFxuICAgICAgbm9DaGFuZ2VBcnJvd2hlYWRzOiBcIm5vQ2hhbmdlQXJyb3doZWFkc1wiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIFBpY0xvY2tzIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJhOnBpY0xvY2tzXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IFBpY0xvY2tzQXR0cmlidXRlcyh7XG4gICAgICAgIG5vQ2hhbmdlQXNwZWN0OiAxLFxuICAgICAgICBub0NoYW5nZUFycm93aGVhZHM6IDFcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgQ2hpbGROb25WaXN1YWxQcm9wZXJ0aWVzIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJwaWM6Y052UGljUHJcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IFBpY0xvY2tzKCkpO1xuICB9XG59XG5jb25zdCBjcmVhdGVIeXBlcmxpbmtDbGljayA9IChsaW5rSWQsIGhhc1htbE5zKSA9PiBuZXcgQnVpbGRlckVsZW1lbnQoe1xuICBuYW1lOiBcImE6aGxpbmtDbGlja1wiLFxuICBhdHRyaWJ1dGVzOiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBoYXNYbWxOcyA/IHtcbiAgICB4bWxuczoge1xuICAgICAga2V5OiBcInhtbG5zOmFcIixcbiAgICAgIHZhbHVlOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9kcmF3aW5nbWwvMjAwNi9tYWluXCJcbiAgICB9XG4gIH0gOiB7fSksIHtcbiAgICBpZDoge1xuICAgICAga2V5OiBcInI6aWRcIixcbiAgICAgIHZhbHVlOiBgcklkJHtsaW5rSWR9YFxuICAgIH1cbiAgfSlcbn0pO1xuY2xhc3MgTm9uVmlzdWFsUHJvcGVydGllc0F0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIGlkOiBcImlkXCIsXG4gICAgICBuYW1lOiBcIm5hbWVcIixcbiAgICAgIGRlc2NyOiBcImRlc2NyXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgTm9uVmlzdWFsUHJvcGVydGllcyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwicGljOmNOdlByXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IE5vblZpc3VhbFByb3BlcnRpZXNBdHRyaWJ1dGVzKHtcbiAgICAgICAgaWQ6IDAsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIGRlc2NyOiBcIlwiXG4gICAgICB9KVxuICAgICk7XG4gIH1cbiAgcHJlcEZvclhtbChjb250ZXh0KSB7XG4gICAgZm9yIChsZXQgaSA9IGNvbnRleHQuc3RhY2subGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQyID0gY29udGV4dC5zdGFja1tpXTtcbiAgICAgIGlmICghKGVsZW1lbnQyIGluc3RhbmNlb2YgQ29uY3JldGVIeXBlcmxpbmspKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdGhpcy5yb290LnB1c2goY3JlYXRlSHlwZXJsaW5rQ2xpY2soZWxlbWVudDIubGlua0lkLCBmYWxzZSkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5wcmVwRm9yWG1sKGNvbnRleHQpO1xuICB9XG59XG5jbGFzcyBOb25WaXN1YWxQaWNQcm9wZXJ0aWVzIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJwaWM6bnZQaWNQclwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgTm9uVmlzdWFsUHJvcGVydGllcygpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgQ2hpbGROb25WaXN1YWxQcm9wZXJ0aWVzKCkpO1xuICB9XG59XG5jbGFzcyBQaWNBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICB4bWxuczogXCJ4bWxuczpwaWNcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBFeHRlbnRzQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgY3g6IFwiY3hcIixcbiAgICAgIGN5OiBcImN5XCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgRXh0ZW50cyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHgsIHkpIHtcbiAgICBzdXBlcihcImE6ZXh0XCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJhdHRyaWJ1dGVzXCIpO1xuICAgIHRoaXMuYXR0cmlidXRlcyA9IG5ldyBFeHRlbnRzQXR0cmlidXRlcyh7XG4gICAgICBjeDogeCxcbiAgICAgIGN5OiB5XG4gICAgfSk7XG4gICAgdGhpcy5yb290LnB1c2godGhpcy5hdHRyaWJ1dGVzKTtcbiAgfVxufVxuY2xhc3MgT2Zmc2V0QXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgeDogXCJ4XCIsXG4gICAgICB5OiBcInlcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBPZmZzZXQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcImE6b2ZmXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IE9mZnNldEF0dHJpYnV0ZXMoe1xuICAgICAgICB4OiAwLFxuICAgICAgICB5OiAwXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNsYXNzIEZvcm1BdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICBmbGlwVmVydGljYWw6IFwiZmxpcFZcIixcbiAgICAgIGZsaXBIb3Jpem9udGFsOiBcImZsaXBIXCIsXG4gICAgICByb3RhdGlvbjogXCJyb3RcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBGb3JtIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHN1cGVyKFwiYTp4ZnJtXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJleHRlbnRzXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IEZvcm1BdHRyaWJ1dGVzKHtcbiAgICAgICAgZmxpcFZlcnRpY2FsOiAoX2EgPSBvcHRpb25zMi5mbGlwKSA9PSBudWxsID8gdm9pZCAwIDogX2EudmVydGljYWwsXG4gICAgICAgIGZsaXBIb3Jpem9udGFsOiAoX2IgPSBvcHRpb25zMi5mbGlwKSA9PSBudWxsID8gdm9pZCAwIDogX2IuaG9yaXpvbnRhbCxcbiAgICAgICAgcm90YXRpb246IG9wdGlvbnMyLnJvdGF0aW9uXG4gICAgICB9KVxuICAgICk7XG4gICAgdGhpcy5leHRlbnRzID0gbmV3IEV4dGVudHMob3B0aW9uczIuZW11cy54LCBvcHRpb25zMi5lbXVzLnkpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPZmZzZXQoKSk7XG4gICAgdGhpcy5yb290LnB1c2godGhpcy5leHRlbnRzKTtcbiAgfVxufVxuY29uc3QgY3JlYXRlTm9GaWxsID0gKCkgPT4gbmV3IEJ1aWxkZXJFbGVtZW50KHsgbmFtZTogXCJhOm5vRmlsbFwiIH0pO1xuY29uc3QgY3JlYXRlU29saWRSZ2JDb2xvciA9IChvcHRpb25zMikgPT4gbmV3IEJ1aWxkZXJFbGVtZW50KHtcbiAgbmFtZTogXCJhOnNyZ2JDbHJcIixcbiAgYXR0cmlidXRlczoge1xuICAgIHZhbHVlOiB7XG4gICAgICBrZXk6IFwidmFsXCIsXG4gICAgICB2YWx1ZTogb3B0aW9uczIudmFsdWVcbiAgICB9XG4gIH1cbn0pO1xuY29uc3QgY3JlYXRlU2NoZW1lQ29sb3IgPSAob3B0aW9uczIpID0+IG5ldyBCdWlsZGVyRWxlbWVudCh7XG4gIG5hbWU6IFwiYTpzY2hlbWVDbHJcIixcbiAgYXR0cmlidXRlczoge1xuICAgIHZhbHVlOiB7XG4gICAgICBrZXk6IFwidmFsXCIsXG4gICAgICB2YWx1ZTogb3B0aW9uczIudmFsdWVcbiAgICB9XG4gIH1cbn0pO1xuY29uc3QgY3JlYXRlU29saWRGaWxsID0gKG9wdGlvbnMyKSA9PiBuZXcgQnVpbGRlckVsZW1lbnQoe1xuICBuYW1lOiBcImE6c29saWRGaWxsXCIsXG4gIGNoaWxkcmVuOiBbb3B0aW9uczIudHlwZSA9PT0gXCJyZ2JcIiA/IGNyZWF0ZVNvbGlkUmdiQ29sb3Iob3B0aW9uczIpIDogY3JlYXRlU2NoZW1lQ29sb3Iob3B0aW9uczIpXVxufSk7XG5jb25zdCBjcmVhdGVPdXRsaW5lID0gKG9wdGlvbnMyKSA9PiBuZXcgQnVpbGRlckVsZW1lbnQoe1xuICBuYW1lOiBcImE6bG5cIixcbiAgYXR0cmlidXRlczoge1xuICAgIHdpZHRoOiB7XG4gICAgICBrZXk6IFwid1wiLFxuICAgICAgdmFsdWU6IG9wdGlvbnMyLndpZHRoXG4gICAgfSxcbiAgICBjYXA6IHtcbiAgICAgIGtleTogXCJjYXBcIixcbiAgICAgIHZhbHVlOiBvcHRpb25zMi5jYXBcbiAgICB9LFxuICAgIGNvbXBvdW5kTGluZToge1xuICAgICAga2V5OiBcImNtcGRcIixcbiAgICAgIHZhbHVlOiBvcHRpb25zMi5jb21wb3VuZExpbmVcbiAgICB9LFxuICAgIGFsaWduOiB7XG4gICAgICBrZXk6IFwiYWxnblwiLFxuICAgICAgdmFsdWU6IG9wdGlvbnMyLmFsaWduXG4gICAgfVxuICB9LFxuICBjaGlsZHJlbjogW1xuICAgIG9wdGlvbnMyLnR5cGUgPT09IFwibm9GaWxsXCIgPyBjcmVhdGVOb0ZpbGwoKSA6IG9wdGlvbnMyLnNvbGlkRmlsbFR5cGUgPT09IFwicmdiXCIgPyBjcmVhdGVTb2xpZEZpbGwoe1xuICAgICAgdHlwZTogXCJyZ2JcIixcbiAgICAgIHZhbHVlOiBvcHRpb25zMi52YWx1ZVxuICAgIH0pIDogY3JlYXRlU29saWRGaWxsKHtcbiAgICAgIHR5cGU6IFwic2NoZW1lXCIsXG4gICAgICB2YWx1ZTogb3B0aW9uczIudmFsdWVcbiAgICB9KVxuICBdXG59KTtcbmNsYXNzIEFkanVzdG1lbnRWYWx1ZXMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcImE6YXZMc3RcIik7XG4gIH1cbn1cbmNsYXNzIFByZXNldEdlb21ldHJ5QXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgcHJzdDogXCJwcnN0XCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgUHJlc2V0R2VvbWV0cnkgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcImE6cHJzdEdlb21cIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgUHJlc2V0R2VvbWV0cnlBdHRyaWJ1dGVzKHtcbiAgICAgICAgcHJzdDogXCJyZWN0XCJcbiAgICAgIH0pXG4gICAgKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgQWRqdXN0bWVudFZhbHVlcygpKTtcbiAgfVxufVxuY2xhc3MgU2hhcGVQcm9wZXJ0aWVzQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgYndNb2RlOiBcImJ3TW9kZVwiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIFNoYXBlUHJvcGVydGllcyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHsgb3V0bGluZSwgdHJhbnNmb3JtIH0pIHtcbiAgICBzdXBlcihcInBpYzpzcFByXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJmb3JtXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IFNoYXBlUHJvcGVydGllc0F0dHJpYnV0ZXMoe1xuICAgICAgICBid01vZGU6IFwiYXV0b1wiXG4gICAgICB9KVxuICAgICk7XG4gICAgdGhpcy5mb3JtID0gbmV3IEZvcm0odHJhbnNmb3JtKTtcbiAgICB0aGlzLnJvb3QucHVzaCh0aGlzLmZvcm0pO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBQcmVzZXRHZW9tZXRyeSgpKTtcbiAgICBpZiAob3V0bGluZSkge1xuICAgICAgdGhpcy5yb290LnB1c2goY3JlYXRlTm9GaWxsKCkpO1xuICAgICAgdGhpcy5yb290LnB1c2goY3JlYXRlT3V0bGluZShvdXRsaW5lKSk7XG4gICAgfVxuICB9XG59XG5jbGFzcyBQaWMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgbWVkaWFEYXRhLFxuICAgIHRyYW5zZm9ybSxcbiAgICBvdXRsaW5lXG4gIH0pIHtcbiAgICBzdXBlcihcInBpYzpwaWNcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgUGljQXR0cmlidXRlcyh7XG4gICAgICAgIHhtbG5zOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9kcmF3aW5nbWwvMjAwNi9waWN0dXJlXCJcbiAgICAgIH0pXG4gICAgKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgTm9uVmlzdWFsUGljUHJvcGVydGllcygpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgQmxpcEZpbGwobWVkaWFEYXRhKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IFNoYXBlUHJvcGVydGllcyh7IHRyYW5zZm9ybSwgb3V0bGluZSB9KSk7XG4gIH1cbn1cbmNsYXNzIEdyYXBoaWNEYXRhIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIG1lZGlhRGF0YSxcbiAgICB0cmFuc2Zvcm0sXG4gICAgb3V0bGluZVxuICB9KSB7XG4gICAgc3VwZXIoXCJhOmdyYXBoaWNEYXRhXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJwaWNcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgR3JhcGhpY0RhdGFBdHRyaWJ1dGVzKHtcbiAgICAgICAgdXJpOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9kcmF3aW5nbWwvMjAwNi9waWN0dXJlXCJcbiAgICAgIH0pXG4gICAgKTtcbiAgICB0aGlzLnBpYyA9IG5ldyBQaWMoeyBtZWRpYURhdGEsIHRyYW5zZm9ybSwgb3V0bGluZSB9KTtcbiAgICB0aGlzLnJvb3QucHVzaCh0aGlzLnBpYyk7XG4gIH1cbn1cbmNsYXNzIEdyYXBoaWNBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICBhOiBcInhtbG5zOmFcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBHcmFwaGljIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIG1lZGlhRGF0YSxcbiAgICB0cmFuc2Zvcm0sXG4gICAgb3V0bGluZVxuICB9KSB7XG4gICAgc3VwZXIoXCJhOmdyYXBoaWNcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImRhdGFcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgR3JhcGhpY0F0dHJpYnV0ZXMoe1xuICAgICAgICBhOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9kcmF3aW5nbWwvMjAwNi9tYWluXCJcbiAgICAgIH0pXG4gICAgKTtcbiAgICB0aGlzLmRhdGEgPSBuZXcgR3JhcGhpY0RhdGEoeyBtZWRpYURhdGEsIHRyYW5zZm9ybSwgb3V0bGluZSB9KTtcbiAgICB0aGlzLnJvb3QucHVzaCh0aGlzLmRhdGEpO1xuICB9XG59XG5jb25zdCBUZXh0V3JhcHBpbmdUeXBlID0ge1xuICBOT05FOiAwLFxuICBTUVVBUkU6IDEsXG4gIFRJR0hUOiAyLFxuICBUT1BfQU5EX0JPVFRPTTogM1xufTtcbmNvbnN0IFRleHRXcmFwcGluZ1NpZGUgPSB7XG4gIEJPVEhfU0lERVM6IFwiYm90aFNpZGVzXCIsXG4gIExFRlQ6IFwibGVmdFwiLFxuICBSSUdIVDogXCJyaWdodFwiLFxuICBMQVJHRVNUOiBcImxhcmdlc3RcIlxufTtcbmNsYXNzIFdyYXBOb25lIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJ3cDp3cmFwTm9uZVwiKTtcbiAgfVxufVxuY2xhc3MgV3JhcFNxdWFyZUF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIGRpc3RUOiBcImRpc3RUXCIsXG4gICAgICBkaXN0QjogXCJkaXN0QlwiLFxuICAgICAgZGlzdEw6IFwiZGlzdExcIixcbiAgICAgIGRpc3RSOiBcImRpc3RSXCIsXG4gICAgICB3cmFwVGV4dDogXCJ3cmFwVGV4dFwiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIFdyYXBTcXVhcmUgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih0ZXh0V3JhcHBpbmcsIG1hcmdpbnMgPSB7XG4gICAgdG9wOiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBsZWZ0OiAwLFxuICAgIHJpZ2h0OiAwXG4gIH0pIHtcbiAgICBzdXBlcihcIndwOndyYXBTcXVhcmVcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgV3JhcFNxdWFyZUF0dHJpYnV0ZXMoe1xuICAgICAgICB3cmFwVGV4dDogdGV4dFdyYXBwaW5nLnNpZGUgfHwgVGV4dFdyYXBwaW5nU2lkZS5CT1RIX1NJREVTLFxuICAgICAgICBkaXN0VDogbWFyZ2lucy50b3AsXG4gICAgICAgIGRpc3RCOiBtYXJnaW5zLmJvdHRvbSxcbiAgICAgICAgZGlzdEw6IG1hcmdpbnMubGVmdCxcbiAgICAgICAgZGlzdFI6IG1hcmdpbnMucmlnaHRcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgV3JhcFRpZ2h0QXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgZGlzdFQ6IFwiZGlzdFRcIixcbiAgICAgIGRpc3RCOiBcImRpc3RCXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgV3JhcFRpZ2h0IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IobWFyZ2lucyA9IHtcbiAgICB0b3A6IDAsXG4gICAgYm90dG9tOiAwXG4gIH0pIHtcbiAgICBzdXBlcihcIndwOndyYXBUaWdodFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBXcmFwVGlnaHRBdHRyaWJ1dGVzKHtcbiAgICAgICAgZGlzdFQ6IG1hcmdpbnMudG9wLFxuICAgICAgICBkaXN0QjogbWFyZ2lucy5ib3R0b21cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgV3JhcFRvcEFuZEJvdHRvbUF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIGRpc3RUOiBcImRpc3RUXCIsXG4gICAgICBkaXN0QjogXCJkaXN0QlwiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIFdyYXBUb3BBbmRCb3R0b20gZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihtYXJnaW5zID0ge1xuICAgIHRvcDogMCxcbiAgICBib3R0b206IDBcbiAgfSkge1xuICAgIHN1cGVyKFwid3A6d3JhcFRvcEFuZEJvdHRvbVwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBXcmFwVG9wQW5kQm90dG9tQXR0cmlidXRlcyh7XG4gICAgICAgIGRpc3RUOiBtYXJnaW5zLnRvcCxcbiAgICAgICAgZGlzdEI6IG1hcmdpbnMuYm90dG9tXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNsYXNzIERvY1Byb3BlcnRpZXMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih7IG5hbWUsIGRlc2NyaXB0aW9uLCB0aXRsZSB9ID0geyBuYW1lOiBcIlwiLCBkZXNjcmlwdGlvbjogXCJcIiwgdGl0bGU6IFwiXCIgfSkge1xuICAgIHN1cGVyKFwid3A6ZG9jUHJcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImRvY1Byb3BlcnRpZXNVbmlxdWVOdW1lcmljSWRcIiwgZG9jUHJvcGVydGllc1VuaXF1ZU51bWVyaWNJZEdlbigpKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBOZXh0QXR0cmlidXRlQ29tcG9uZW50KHtcbiAgICAgICAgaWQ6IHtcbiAgICAgICAgICBrZXk6IFwiaWRcIixcbiAgICAgICAgICB2YWx1ZTogdGhpcy5kb2NQcm9wZXJ0aWVzVW5pcXVlTnVtZXJpY0lkKClcbiAgICAgICAgfSxcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgIGtleTogXCJuYW1lXCIsXG4gICAgICAgICAgdmFsdWU6IG5hbWVcbiAgICAgICAgfSxcbiAgICAgICAgZGVzY3JpcHRpb246IHtcbiAgICAgICAgICBrZXk6IFwiZGVzY3JcIixcbiAgICAgICAgICB2YWx1ZTogZGVzY3JpcHRpb25cbiAgICAgICAgfSxcbiAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICBrZXk6IFwidGl0bGVcIixcbiAgICAgICAgICB2YWx1ZTogdGl0bGVcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICApO1xuICB9XG4gIHByZXBGb3JYbWwoY29udGV4dCkge1xuICAgIGZvciAobGV0IGkgPSBjb250ZXh0LnN0YWNrLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBjb25zdCBlbGVtZW50MiA9IGNvbnRleHQuc3RhY2tbaV07XG4gICAgICBpZiAoIShlbGVtZW50MiBpbnN0YW5jZW9mIENvbmNyZXRlSHlwZXJsaW5rKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMucm9vdC5wdXNoKGNyZWF0ZUh5cGVybGlua0NsaWNrKGVsZW1lbnQyLmxpbmtJZCwgdHJ1ZSkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5wcmVwRm9yWG1sKGNvbnRleHQpO1xuICB9XG59XG5jb25zdCBjcmVhdGVFZmZlY3RFeHRlbnQgPSAoeyB0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQgfSkgPT4gbmV3IEJ1aWxkZXJFbGVtZW50KHtcbiAgbmFtZTogXCJ3cDplZmZlY3RFeHRlbnRcIixcbiAgYXR0cmlidXRlczoge1xuICAgIHRvcDoge1xuICAgICAga2V5OiBcInRcIixcbiAgICAgIHZhbHVlOiB0b3BcbiAgICB9LFxuICAgIHJpZ2h0OiB7XG4gICAgICBrZXk6IFwiclwiLFxuICAgICAgdmFsdWU6IHJpZ2h0XG4gICAgfSxcbiAgICBib3R0b206IHtcbiAgICAgIGtleTogXCJiXCIsXG4gICAgICB2YWx1ZTogYm90dG9tXG4gICAgfSxcbiAgICBsZWZ0OiB7XG4gICAgICBrZXk6IFwibFwiLFxuICAgICAgdmFsdWU6IGxlZnRcbiAgICB9XG4gIH1cbn0pO1xuY2xhc3MgRXh0ZW50QXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgY3g6IFwiY3hcIixcbiAgICAgIGN5OiBcImN5XCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgRXh0ZW50IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoeCwgeSkge1xuICAgIHN1cGVyKFwid3A6ZXh0ZW50XCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJhdHRyaWJ1dGVzXCIpO1xuICAgIHRoaXMuYXR0cmlidXRlcyA9IG5ldyBFeHRlbnRBdHRyaWJ1dGVzKHtcbiAgICAgIGN4OiB4LFxuICAgICAgY3k6IHlcbiAgICB9KTtcbiAgICB0aGlzLnJvb3QucHVzaCh0aGlzLmF0dHJpYnV0ZXMpO1xuICB9XG59XG5jbGFzcyBHcmFwaGljRnJhbWVMb2NrQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgeG1sbnM6IFwieG1sbnM6YVwiLFxuICAgICAgbm9DaGFuZ2VBc3BlY3Q6IFwibm9DaGFuZ2VBc3BlY3RcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBHcmFwaGljRnJhbWVMb2NrcyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwiYTpncmFwaGljRnJhbWVMb2Nrc1wiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBHcmFwaGljRnJhbWVMb2NrQXR0cmlidXRlcyh7XG4gICAgICAgIHhtbG5zOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9kcmF3aW5nbWwvMjAwNi9tYWluXCIsXG4gICAgICAgIG5vQ2hhbmdlQXNwZWN0OiAxXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNsYXNzIEdyYXBoaWNGcmFtZVByb3BlcnRpZXMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIndwOmNOdkdyYXBoaWNGcmFtZVByXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBHcmFwaGljRnJhbWVMb2NrcygpKTtcbiAgfVxufVxuY2xhc3MgQW5jaG9yQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgZGlzdFQ6IFwiZGlzdFRcIixcbiAgICAgIGRpc3RCOiBcImRpc3RCXCIsXG4gICAgICBkaXN0TDogXCJkaXN0TFwiLFxuICAgICAgZGlzdFI6IFwiZGlzdFJcIixcbiAgICAgIGFsbG93T3ZlcmxhcDogXCJhbGxvd092ZXJsYXBcIixcbiAgICAgIGJlaGluZERvYzogXCJiZWhpbmREb2NcIixcbiAgICAgIGxheW91dEluQ2VsbDogXCJsYXlvdXRJbkNlbGxcIixcbiAgICAgIGxvY2tlZDogXCJsb2NrZWRcIixcbiAgICAgIHJlbGF0aXZlSGVpZ2h0OiBcInJlbGF0aXZlSGVpZ2h0XCIsXG4gICAgICBzaW1wbGVQb3M6IFwic2ltcGxlUG9zXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgQW5jaG9yIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIG1lZGlhRGF0YSxcbiAgICB0cmFuc2Zvcm0sXG4gICAgZHJhd2luZ09wdGlvbnNcbiAgfSkge1xuICAgIHN1cGVyKFwid3A6YW5jaG9yXCIpO1xuICAgIGNvbnN0IGZsb2F0aW5nID0gX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgYWxsb3dPdmVybGFwOiB0cnVlLFxuICAgICAgYmVoaW5kRG9jdW1lbnQ6IGZhbHNlLFxuICAgICAgbG9ja0FuY2hvcjogZmFsc2UsXG4gICAgICBsYXlvdXRJbkNlbGw6IHRydWUsXG4gICAgICB2ZXJ0aWNhbFBvc2l0aW9uOiB7fSxcbiAgICAgIGhvcml6b250YWxQb3NpdGlvbjoge31cbiAgICB9LCBkcmF3aW5nT3B0aW9ucy5mbG9hdGluZyk7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgQW5jaG9yQXR0cmlidXRlcyh7XG4gICAgICAgIGRpc3RUOiBmbG9hdGluZy5tYXJnaW5zID8gZmxvYXRpbmcubWFyZ2lucy50b3AgfHwgMCA6IDAsXG4gICAgICAgIGRpc3RCOiBmbG9hdGluZy5tYXJnaW5zID8gZmxvYXRpbmcubWFyZ2lucy5ib3R0b20gfHwgMCA6IDAsXG4gICAgICAgIGRpc3RMOiBmbG9hdGluZy5tYXJnaW5zID8gZmxvYXRpbmcubWFyZ2lucy5sZWZ0IHx8IDAgOiAwLFxuICAgICAgICBkaXN0UjogZmxvYXRpbmcubWFyZ2lucyA/IGZsb2F0aW5nLm1hcmdpbnMucmlnaHQgfHwgMCA6IDAsXG4gICAgICAgIHNpbXBsZVBvczogXCIwXCIsXG4gICAgICAgIC8vIG5vdGU6IHdvcmQgZG9lc24ndCBmdWxseSBzdXBwb3J0IC0gc28gd2UgdXNlIDBcbiAgICAgICAgYWxsb3dPdmVybGFwOiBmbG9hdGluZy5hbGxvd092ZXJsYXAgPT09IHRydWUgPyBcIjFcIiA6IFwiMFwiLFxuICAgICAgICBiZWhpbmREb2M6IGZsb2F0aW5nLmJlaGluZERvY3VtZW50ID09PSB0cnVlID8gXCIxXCIgOiBcIjBcIixcbiAgICAgICAgbG9ja2VkOiBmbG9hdGluZy5sb2NrQW5jaG9yID09PSB0cnVlID8gXCIxXCIgOiBcIjBcIixcbiAgICAgICAgbGF5b3V0SW5DZWxsOiBmbG9hdGluZy5sYXlvdXRJbkNlbGwgPT09IHRydWUgPyBcIjFcIiA6IFwiMFwiLFxuICAgICAgICByZWxhdGl2ZUhlaWdodDogZmxvYXRpbmcuekluZGV4ID8gZmxvYXRpbmcuekluZGV4IDogdHJhbnNmb3JtLmVtdXMueVxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTaW1wbGVQb3MoKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IEhvcml6b250YWxQb3NpdGlvbihmbG9hdGluZy5ob3Jpem9udGFsUG9zaXRpb24pKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgVmVydGljYWxQb3NpdGlvbihmbG9hdGluZy52ZXJ0aWNhbFBvc2l0aW9uKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IEV4dGVudCh0cmFuc2Zvcm0uZW11cy54LCB0cmFuc2Zvcm0uZW11cy55KSk7XG4gICAgdGhpcy5yb290LnB1c2goY3JlYXRlRWZmZWN0RXh0ZW50KHsgdG9wOiAwLCByaWdodDogMCwgYm90dG9tOiAwLCBsZWZ0OiAwIH0pKTtcbiAgICBpZiAoZHJhd2luZ09wdGlvbnMuZmxvYXRpbmcgIT09IHZvaWQgMCAmJiBkcmF3aW5nT3B0aW9ucy5mbG9hdGluZy53cmFwICE9PSB2b2lkIDApIHtcbiAgICAgIHN3aXRjaCAoZHJhd2luZ09wdGlvbnMuZmxvYXRpbmcud3JhcC50eXBlKSB7XG4gICAgICAgIGNhc2UgVGV4dFdyYXBwaW5nVHlwZS5TUVVBUkU6XG4gICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFdyYXBTcXVhcmUoZHJhd2luZ09wdGlvbnMuZmxvYXRpbmcud3JhcCwgZHJhd2luZ09wdGlvbnMuZmxvYXRpbmcubWFyZ2lucykpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFRleHRXcmFwcGluZ1R5cGUuVElHSFQ6XG4gICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFdyYXBUaWdodChkcmF3aW5nT3B0aW9ucy5mbG9hdGluZy5tYXJnaW5zKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgVGV4dFdyYXBwaW5nVHlwZS5UT1BfQU5EX0JPVFRPTTpcbiAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgV3JhcFRvcEFuZEJvdHRvbShkcmF3aW5nT3B0aW9ucy5mbG9hdGluZy5tYXJnaW5zKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgVGV4dFdyYXBwaW5nVHlwZS5OT05FOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBXcmFwTm9uZSgpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFdyYXBOb25lKCkpO1xuICAgIH1cbiAgICB0aGlzLnJvb3QucHVzaChuZXcgRG9jUHJvcGVydGllcyhkcmF3aW5nT3B0aW9ucy5kb2NQcm9wZXJ0aWVzKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IEdyYXBoaWNGcmFtZVByb3BlcnRpZXMoKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IEdyYXBoaWMoeyBtZWRpYURhdGEsIHRyYW5zZm9ybSwgb3V0bGluZTogZHJhd2luZ09wdGlvbnMub3V0bGluZSB9KSk7XG4gIH1cbn1cbmNvbnN0IGNyZWF0ZUlubGluZSA9ICh7IG1lZGlhRGF0YSwgdHJhbnNmb3JtLCBkb2NQcm9wZXJ0aWVzLCBvdXRsaW5lIH0pID0+IHtcbiAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICByZXR1cm4gbmV3IEJ1aWxkZXJFbGVtZW50KHtcbiAgICBuYW1lOiBcIndwOmlubGluZVwiLFxuICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgIGRpc3RhbmNlVG9wOiB7XG4gICAgICAgIGtleTogXCJkaXN0VFwiLFxuICAgICAgICB2YWx1ZTogMFxuICAgICAgfSxcbiAgICAgIGRpc3RhbmNlQm90dG9tOiB7XG4gICAgICAgIGtleTogXCJkaXN0QlwiLFxuICAgICAgICB2YWx1ZTogMFxuICAgICAgfSxcbiAgICAgIGRpc3RhbmNlTGVmdDoge1xuICAgICAgICBrZXk6IFwiZGlzdExcIixcbiAgICAgICAgdmFsdWU6IDBcbiAgICAgIH0sXG4gICAgICBkaXN0YW5jZVJpZ2h0OiB7XG4gICAgICAgIGtleTogXCJkaXN0UlwiLFxuICAgICAgICB2YWx1ZTogMFxuICAgICAgfVxuICAgIH0sXG4gICAgY2hpbGRyZW46IFtcbiAgICAgIG5ldyBFeHRlbnQodHJhbnNmb3JtLmVtdXMueCwgdHJhbnNmb3JtLmVtdXMueSksXG4gICAgICBjcmVhdGVFZmZlY3RFeHRlbnQoXG4gICAgICAgIG91dGxpbmUgPyB7XG4gICAgICAgICAgdG9wOiAoKF9hID0gb3V0bGluZS53aWR0aCkgIT0gbnVsbCA/IF9hIDogOTUyNSkgKiAyLFxuICAgICAgICAgIHJpZ2h0OiAoKF9iID0gb3V0bGluZS53aWR0aCkgIT0gbnVsbCA/IF9iIDogOTUyNSkgKiAyLFxuICAgICAgICAgIGJvdHRvbTogKChfYyA9IG91dGxpbmUud2lkdGgpICE9IG51bGwgPyBfYyA6IDk1MjUpICogMixcbiAgICAgICAgICBsZWZ0OiAoKF9kID0gb3V0bGluZS53aWR0aCkgIT0gbnVsbCA/IF9kIDogOTUyNSkgKiAyXG4gICAgICAgIH0gOiB7IHRvcDogMCwgcmlnaHQ6IDAsIGJvdHRvbTogMCwgbGVmdDogMCB9XG4gICAgICApLFxuICAgICAgbmV3IERvY1Byb3BlcnRpZXMoZG9jUHJvcGVydGllcyksXG4gICAgICBuZXcgR3JhcGhpY0ZyYW1lUHJvcGVydGllcygpLFxuICAgICAgbmV3IEdyYXBoaWMoeyBtZWRpYURhdGEsIHRyYW5zZm9ybSwgb3V0bGluZSB9KVxuICAgIF1cbiAgfSk7XG59O1xuY2xhc3MgRHJhd2luZyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGltYWdlRGF0YSwgZHJhd2luZ09wdGlvbnMgPSB7fSkge1xuICAgIHN1cGVyKFwidzpkcmF3aW5nXCIpO1xuICAgIGlmICghZHJhd2luZ09wdGlvbnMuZmxvYXRpbmcpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgICBjcmVhdGVJbmxpbmUoe1xuICAgICAgICAgIG1lZGlhRGF0YTogaW1hZ2VEYXRhLFxuICAgICAgICAgIHRyYW5zZm9ybTogaW1hZ2VEYXRhLnRyYW5zZm9ybWF0aW9uLFxuICAgICAgICAgIGRvY1Byb3BlcnRpZXM6IGRyYXdpbmdPcHRpb25zLmRvY1Byb3BlcnRpZXMsXG4gICAgICAgICAgb3V0bGluZTogZHJhd2luZ09wdGlvbnMub3V0bGluZVxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IEFuY2hvcih7IG1lZGlhRGF0YTogaW1hZ2VEYXRhLCB0cmFuc2Zvcm06IGltYWdlRGF0YS50cmFuc2Zvcm1hdGlvbiwgZHJhd2luZ09wdGlvbnMgfSkpO1xuICAgIH1cbiAgfVxufVxuY29uc3QgY29udmVydERhdGFVUklUb0JpbmFyeSA9IChkYXRhVVJJKSA9PiB7XG4gIGlmICh0eXBlb2YgYXRvYiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY29uc3QgQkFTRTY0X01BUktFUiA9IFwiO2Jhc2U2NCxcIjtcbiAgICBjb25zdCBiYXNlNjRJbmRleCA9IGRhdGFVUkkuaW5kZXhPZihCQVNFNjRfTUFSS0VSKTtcbiAgICBjb25zdCBiYXNlNjRJbmRleFdpdGhPZmZzZXQgPSBiYXNlNjRJbmRleCA9PT0gLTEgPyAwIDogYmFzZTY0SW5kZXggKyBCQVNFNjRfTUFSS0VSLmxlbmd0aDtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoXG4gICAgICBhdG9iKGRhdGFVUkkuc3Vic3RyaW5nKGJhc2U2NEluZGV4V2l0aE9mZnNldCkpLnNwbGl0KFwiXCIpLm1hcCgoYykgPT4gYy5jaGFyQ29kZUF0KDApKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgYiA9IHJlcXVpcmUoXCJidWZmZXJcIik7XG4gICAgcmV0dXJuIG5ldyBiLkJ1ZmZlcihkYXRhVVJJLCBcImJhc2U2NFwiKTtcbiAgfVxufTtcbmNvbnN0IHN0YW5kYXJkaXplRGF0YSA9IChkYXRhKSA9PiB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiA/IGNvbnZlcnREYXRhVVJJVG9CaW5hcnkoZGF0YSkgOiBkYXRhO1xuY29uc3QgY3JlYXRlSW1hZ2VEYXRhID0gKG9wdGlvbnMyLCBrZXkpID0+ICh7XG4gIGRhdGE6IHN0YW5kYXJkaXplRGF0YShvcHRpb25zMi5kYXRhKSxcbiAgZmlsZU5hbWU6IGtleSxcbiAgdHJhbnNmb3JtYXRpb246IHtcbiAgICBwaXhlbHM6IHtcbiAgICAgIHg6IE1hdGgucm91bmQob3B0aW9uczIudHJhbnNmb3JtYXRpb24ud2lkdGgpLFxuICAgICAgeTogTWF0aC5yb3VuZChvcHRpb25zMi50cmFuc2Zvcm1hdGlvbi5oZWlnaHQpXG4gICAgfSxcbiAgICBlbXVzOiB7XG4gICAgICB4OiBNYXRoLnJvdW5kKG9wdGlvbnMyLnRyYW5zZm9ybWF0aW9uLndpZHRoICogOTUyNSksXG4gICAgICB5OiBNYXRoLnJvdW5kKG9wdGlvbnMyLnRyYW5zZm9ybWF0aW9uLmhlaWdodCAqIDk1MjUpXG4gICAgfSxcbiAgICBmbGlwOiBvcHRpb25zMi50cmFuc2Zvcm1hdGlvbi5mbGlwLFxuICAgIHJvdGF0aW9uOiBvcHRpb25zMi50cmFuc2Zvcm1hdGlvbi5yb3RhdGlvbiA/IG9wdGlvbnMyLnRyYW5zZm9ybWF0aW9uLnJvdGF0aW9uICogNmU0IDogdm9pZCAwXG4gIH1cbn0pO1xuY2xhc3MgSW1hZ2VSdW4gZXh0ZW5kcyBSdW4ge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKHt9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiaW1hZ2VEYXRhXCIpO1xuICAgIGNvbnN0IGhhc2gyID0gaGFzaGVkSWQob3B0aW9uczIuZGF0YSk7XG4gICAgY29uc3Qga2V5ID0gYCR7aGFzaDJ9LiR7b3B0aW9uczIudHlwZX1gO1xuICAgIHRoaXMuaW1hZ2VEYXRhID0gb3B0aW9uczIudHlwZSA9PT0gXCJzdmdcIiA/IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgdHlwZTogb3B0aW9uczIudHlwZVxuICAgIH0sIGNyZWF0ZUltYWdlRGF0YShvcHRpb25zMiwga2V5KSksIHtcbiAgICAgIGZhbGxiYWNrOiBfX3NwcmVhZFZhbHVlcyh7XG4gICAgICAgIHR5cGU6IG9wdGlvbnMyLmZhbGxiYWNrLnR5cGVcbiAgICAgIH0sIGNyZWF0ZUltYWdlRGF0YShcbiAgICAgICAgX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgb3B0aW9uczIuZmFsbGJhY2spLCB7XG4gICAgICAgICAgdHJhbnNmb3JtYXRpb246IG9wdGlvbnMyLnRyYW5zZm9ybWF0aW9uXG4gICAgICAgIH0pLFxuICAgICAgICBgJHtoYXNoZWRJZChvcHRpb25zMi5mYWxsYmFjay5kYXRhKX0uJHtvcHRpb25zMi5mYWxsYmFjay50eXBlfWBcbiAgICAgICkpXG4gICAgfSkgOiBfX3NwcmVhZFZhbHVlcyh7XG4gICAgICB0eXBlOiBvcHRpb25zMi50eXBlXG4gICAgfSwgY3JlYXRlSW1hZ2VEYXRhKG9wdGlvbnMyLCBrZXkpKTtcbiAgICBjb25zdCBkcmF3aW5nID0gbmV3IERyYXdpbmcodGhpcy5pbWFnZURhdGEsIHtcbiAgICAgIGZsb2F0aW5nOiBvcHRpb25zMi5mbG9hdGluZyxcbiAgICAgIGRvY1Byb3BlcnRpZXM6IG9wdGlvbnMyLmFsdFRleHQsXG4gICAgICBvdXRsaW5lOiBvcHRpb25zMi5vdXRsaW5lXG4gICAgfSk7XG4gICAgdGhpcy5yb290LnB1c2goZHJhd2luZyk7XG4gIH1cbiAgcHJlcEZvclhtbChjb250ZXh0KSB7XG4gICAgY29udGV4dC5maWxlLk1lZGlhLmFkZEltYWdlKHRoaXMuaW1hZ2VEYXRhLmZpbGVOYW1lLCB0aGlzLmltYWdlRGF0YSk7XG4gICAgaWYgKHRoaXMuaW1hZ2VEYXRhLnR5cGUgPT09IFwic3ZnXCIpIHtcbiAgICAgIGNvbnRleHQuZmlsZS5NZWRpYS5hZGRJbWFnZSh0aGlzLmltYWdlRGF0YS5mYWxsYmFjay5maWxlTmFtZSwgdGhpcy5pbWFnZURhdGEuZmFsbGJhY2spO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIucHJlcEZvclhtbChjb250ZXh0KTtcbiAgfVxufVxuY2xhc3MgU2VxdWVudGlhbElkZW50aWZpZXJJbnN0cnVjdGlvbiBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGlkZW50aWZpZXIpIHtcbiAgICBzdXBlcihcInc6aW5zdHJUZXh0XCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUZXh0QXR0cmlidXRlcyh7IHNwYWNlOiBTcGFjZVR5cGUuUFJFU0VSVkUgfSkpO1xuICAgIHRoaXMucm9vdC5wdXNoKGBTRVEgJHtpZGVudGlmaWVyfWApO1xuICB9XG59XG5jbGFzcyBTZXF1ZW50aWFsSWRlbnRpZmllciBleHRlbmRzIFJ1biB7XG4gIGNvbnN0cnVjdG9yKGlkZW50aWZpZXIpIHtcbiAgICBzdXBlcih7fSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IEJlZ2luKHRydWUpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgU2VxdWVudGlhbElkZW50aWZpZXJJbnN0cnVjdGlvbihpZGVudGlmaWVyKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IFNlcGFyYXRlKCkpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBFbmQoKSk7XG4gIH1cbn1cbmNsYXNzIEZsZFNpbXBsZUF0dHJzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7IGluc3RyOiBcInc6aW5zdHJcIiB9KTtcbiAgfVxufVxuY2xhc3MgU2ltcGxlRmllbGQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihpbnN0cnVjdGlvbiwgY2FjaGVkVmFsdWUpIHtcbiAgICBzdXBlcihcInc6ZmxkU2ltcGxlXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBGbGRTaW1wbGVBdHRycyh7IGluc3RyOiBpbnN0cnVjdGlvbiB9KSk7XG4gICAgaWYgKGNhY2hlZFZhbHVlICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUZXh0UnVuKGNhY2hlZFZhbHVlKSk7XG4gICAgfVxuICB9XG59XG5jbGFzcyBTaW1wbGVNYWlsTWVyZ2VGaWVsZCBleHRlbmRzIFNpbXBsZUZpZWxkIHtcbiAgY29uc3RydWN0b3IoZmllbGROYW1lKSB7XG4gICAgc3VwZXIoYCBNRVJHRUZJRUxEICR7ZmllbGROYW1lfSBgLCBgwqske2ZpZWxkTmFtZX3Cu2ApO1xuICB9XG59XG5jbGFzcyBDb21tZW50QXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwgeyBpZDogXCJ3OmlkXCIsIGluaXRpYWxzOiBcInc6aW5pdGlhbHNcIiwgYXV0aG9yOiBcInc6YXV0aG9yXCIsIGRhdGU6IFwidzpkYXRlXCIgfSk7XG4gIH1cbn1cbmNsYXNzIENvbW1lbnRSYW5nZUF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHsgaWQ6IFwidzppZFwiIH0pO1xuICB9XG59XG5jbGFzcyBSb290Q29tbWVudHNBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICBcInhtbG5zOmN4XCI6IFwieG1sbnM6Y3hcIixcbiAgICAgIFwieG1sbnM6Y3gxXCI6IFwieG1sbnM6Y3gxXCIsXG4gICAgICBcInhtbG5zOmN4MlwiOiBcInhtbG5zOmN4MlwiLFxuICAgICAgXCJ4bWxuczpjeDNcIjogXCJ4bWxuczpjeDNcIixcbiAgICAgIFwieG1sbnM6Y3g0XCI6IFwieG1sbnM6Y3g0XCIsXG4gICAgICBcInhtbG5zOmN4NVwiOiBcInhtbG5zOmN4NVwiLFxuICAgICAgXCJ4bWxuczpjeDZcIjogXCJ4bWxuczpjeDZcIixcbiAgICAgIFwieG1sbnM6Y3g3XCI6IFwieG1sbnM6Y3g3XCIsXG4gICAgICBcInhtbG5zOmN4OFwiOiBcInhtbG5zOmN4OFwiLFxuICAgICAgXCJ4bWxuczptY1wiOiBcInhtbG5zOm1jXCIsXG4gICAgICBcInhtbG5zOmFpbmtcIjogXCJ4bWxuczphaW5rXCIsXG4gICAgICBcInhtbG5zOmFtM2RcIjogXCJ4bWxuczphbTNkXCIsXG4gICAgICBcInhtbG5zOm9cIjogXCJ4bWxuczpvXCIsXG4gICAgICBcInhtbG5zOnJcIjogXCJ4bWxuczpyXCIsXG4gICAgICBcInhtbG5zOm1cIjogXCJ4bWxuczptXCIsXG4gICAgICBcInhtbG5zOnZcIjogXCJ4bWxuczp2XCIsXG4gICAgICBcInhtbG5zOndwMTRcIjogXCJ4bWxuczp3cDE0XCIsXG4gICAgICBcInhtbG5zOndwXCI6IFwieG1sbnM6d3BcIixcbiAgICAgIFwieG1sbnM6dzEwXCI6IFwieG1sbnM6dzEwXCIsXG4gICAgICBcInhtbG5zOndcIjogXCJ4bWxuczp3XCIsXG4gICAgICBcInhtbG5zOncxNFwiOiBcInhtbG5zOncxNFwiLFxuICAgICAgXCJ4bWxuczp3MTVcIjogXCJ4bWxuczp3MTVcIixcbiAgICAgIFwieG1sbnM6dzE2Y2V4XCI6IFwieG1sbnM6dzE2Y2V4XCIsXG4gICAgICBcInhtbG5zOncxNmNpZFwiOiBcInhtbG5zOncxNmNpZFwiLFxuICAgICAgXCJ4bWxuczp3MTZcIjogXCJ4bWxuczp3MTZcIixcbiAgICAgIFwieG1sbnM6dzE2c2R0ZGhcIjogXCJ4bWxuczp3MTZzZHRkaFwiLFxuICAgICAgXCJ4bWxuczp3MTZzZVwiOiBcInhtbG5zOncxNnNlXCIsXG4gICAgICBcInhtbG5zOndwZ1wiOiBcInhtbG5zOndwZ1wiLFxuICAgICAgXCJ4bWxuczp3cGlcIjogXCJ4bWxuczp3cGlcIixcbiAgICAgIFwieG1sbnM6d25lXCI6IFwieG1sbnM6d25lXCIsXG4gICAgICBcInhtbG5zOndwc1wiOiBcInhtbG5zOndwc1wiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIENvbW1lbnRSYW5nZVN0YXJ0IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoaWQpIHtcbiAgICBzdXBlcihcInc6Y29tbWVudFJhbmdlU3RhcnRcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IENvbW1lbnRSYW5nZUF0dHJpYnV0ZXMoeyBpZCB9KSk7XG4gIH1cbn1cbmNsYXNzIENvbW1lbnRSYW5nZUVuZCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGlkKSB7XG4gICAgc3VwZXIoXCJ3OmNvbW1lbnRSYW5nZUVuZFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgQ29tbWVudFJhbmdlQXR0cmlidXRlcyh7IGlkIH0pKTtcbiAgfVxufVxuY2xhc3MgQ29tbWVudFJlZmVyZW5jZSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGlkKSB7XG4gICAgc3VwZXIoXCJ3OmNvbW1lbnRSZWZlcmVuY2VcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IENvbW1lbnRSYW5nZUF0dHJpYnV0ZXMoeyBpZCB9KSk7XG4gIH1cbn1cbmNsYXNzIENvbW1lbnQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih7IGlkLCBpbml0aWFscywgYXV0aG9yLCBkYXRlID0gLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCksIGNoaWxkcmVuIH0pIHtcbiAgICBzdXBlcihcInc6Y29tbWVudFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBDb21tZW50QXR0cmlidXRlcyh7XG4gICAgICAgIGlkLFxuICAgICAgICBpbml0aWFscyxcbiAgICAgICAgYXV0aG9yLFxuICAgICAgICBkYXRlOiBkYXRlLnRvSVNPU3RyaW5nKClcbiAgICAgIH0pXG4gICAgKTtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChjaGlsZCk7XG4gICAgfVxuICB9XG59XG5jbGFzcyBDb21tZW50cyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHsgY2hpbGRyZW4gfSkge1xuICAgIHN1cGVyKFwidzpjb21tZW50c1wiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBSb290Q29tbWVudHNBdHRyaWJ1dGVzKHtcbiAgICAgICAgXCJ4bWxuczpjeFwiOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2RyYXdpbmcvMjAxNC9jaGFydGV4XCIsXG4gICAgICAgIFwieG1sbnM6Y3gxXCI6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE1LzkvOC9jaGFydGV4XCIsXG4gICAgICAgIFwieG1sbnM6Y3gyXCI6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE1LzEwLzIxL2NoYXJ0ZXhcIixcbiAgICAgICAgXCJ4bWxuczpjeDNcIjogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9kcmF3aW5nLzIwMTYvNS85L2NoYXJ0ZXhcIixcbiAgICAgICAgXCJ4bWxuczpjeDRcIjogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9kcmF3aW5nLzIwMTYvNS8xMC9jaGFydGV4XCIsXG4gICAgICAgIFwieG1sbnM6Y3g1XCI6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE2LzUvMTEvY2hhcnRleFwiLFxuICAgICAgICBcInhtbG5zOmN4NlwiOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2RyYXdpbmcvMjAxNi81LzEyL2NoYXJ0ZXhcIixcbiAgICAgICAgXCJ4bWxuczpjeDdcIjogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9kcmF3aW5nLzIwMTYvNS8xMy9jaGFydGV4XCIsXG4gICAgICAgIFwieG1sbnM6Y3g4XCI6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE2LzUvMTQvY2hhcnRleFwiLFxuICAgICAgICBcInhtbG5zOm1jXCI6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL21hcmt1cC1jb21wYXRpYmlsaXR5LzIwMDZcIixcbiAgICAgICAgXCJ4bWxuczphaW5rXCI6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE2L2lua1wiLFxuICAgICAgICBcInhtbG5zOmFtM2RcIjogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9kcmF3aW5nLzIwMTcvbW9kZWwzZFwiLFxuICAgICAgICBcInhtbG5zOm9cIjogXCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpvZmZpY2VcIixcbiAgICAgICAgXCJ4bWxuczpyXCI6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwc1wiLFxuICAgICAgICBcInhtbG5zOm1cIjogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9tYXRoXCIsXG4gICAgICAgIFwieG1sbnM6dlwiOiBcInVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206dm1sXCIsXG4gICAgICAgIFwieG1sbnM6d3AxNFwiOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0RyYXdpbmdcIixcbiAgICAgICAgXCJ4bWxuczp3cFwiOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9kcmF3aW5nbWwvMjAwNi93b3JkcHJvY2Vzc2luZ0RyYXdpbmdcIixcbiAgICAgICAgXCJ4bWxuczp3MTBcIjogXCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTp3b3JkXCIsXG4gICAgICAgIFwieG1sbnM6d1wiOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy93b3JkcHJvY2Vzc2luZ21sLzIwMDYvbWFpblwiLFxuICAgICAgICBcInhtbG5zOncxNFwiOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkbWxcIixcbiAgICAgICAgXCJ4bWxuczp3MTVcIjogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTIvd29yZG1sXCIsXG4gICAgICAgIFwieG1sbnM6dzE2Y2V4XCI6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDE4L3dvcmRtbC9jZXhcIixcbiAgICAgICAgXCJ4bWxuczp3MTZjaWRcIjogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTYvd29yZG1sL2NpZFwiLFxuICAgICAgICBcInhtbG5zOncxNlwiOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxOC93b3JkbWxcIixcbiAgICAgICAgXCJ4bWxuczp3MTZzZHRkaFwiOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAyMC93b3JkbWwvc2R0ZGF0YWhhc2hcIixcbiAgICAgICAgXCJ4bWxuczp3MTZzZVwiOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxNS93b3JkbWwvc3ltZXhcIixcbiAgICAgICAgXCJ4bWxuczp3cGdcIjogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdHcm91cFwiLFxuICAgICAgICBcInhtbG5zOndwaVwiOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0lua1wiLFxuICAgICAgICBcInhtbG5zOnduZVwiOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAwNi93b3JkbWxcIixcbiAgICAgICAgXCJ4bWxuczp3cHNcIjogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdTaGFwZVwiXG4gICAgICB9KVxuICAgICk7XG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiBjaGlsZHJlbikge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IENvbW1lbnQoY2hpbGQpKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIE5vQnJlYWtIeXBoZW4gZXh0ZW5kcyBFbXB0eUVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6bm9CcmVha0h5cGhlblwiKTtcbiAgfVxufVxuY2xhc3MgU29mdEh5cGhlbiBleHRlbmRzIEVtcHR5RWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwidzpzb2Z0SHlwaGVuXCIpO1xuICB9XG59XG5jbGFzcyBEYXlTaG9ydCBleHRlbmRzIEVtcHR5RWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwidzpkYXlTaG9ydFwiKTtcbiAgfVxufVxuY2xhc3MgTW9udGhTaG9ydCBleHRlbmRzIEVtcHR5RWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwidzptb250aFNob3J0XCIpO1xuICB9XG59XG5jbGFzcyBZZWFyU2hvcnQgZXh0ZW5kcyBFbXB0eUVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6eWVhclNob3J0XCIpO1xuICB9XG59XG5jbGFzcyBEYXlMb25nIGV4dGVuZHMgRW1wdHlFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJ3OmRheUxvbmdcIik7XG4gIH1cbn1cbmNsYXNzIE1vbnRoTG9uZyBleHRlbmRzIEVtcHR5RWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwidzptb250aExvbmdcIik7XG4gIH1cbn1cbmNsYXNzIFllYXJMb25nIGV4dGVuZHMgRW1wdHlFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJ3OnllYXJMb25nXCIpO1xuICB9XG59XG5jbGFzcyBBbm5vdGF0aW9uUmVmZXJlbmNlIGV4dGVuZHMgRW1wdHlFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJ3OmFubm90YXRpb25SZWZcIik7XG4gIH1cbn1cbmNsYXNzIEZvb3Rub3RlUmVmZXJlbmNlRWxlbWVudCBleHRlbmRzIEVtcHR5RWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwidzpmb290bm90ZVJlZlwiKTtcbiAgfVxufVxuY2xhc3MgRW5kbm90ZVJlZmVyZW5jZSBleHRlbmRzIEVtcHR5RWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwidzplbmRub3RlUmVmXCIpO1xuICB9XG59XG5jbGFzcyBTZXBhcmF0b3IgZXh0ZW5kcyBFbXB0eUVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6c2VwYXJhdG9yXCIpO1xuICB9XG59XG5jbGFzcyBDb250aW51YXRpb25TZXBhcmF0b3IgZXh0ZW5kcyBFbXB0eUVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6Y29udGludWF0aW9uU2VwYXJhdG9yXCIpO1xuICB9XG59XG5jbGFzcyBQYWdlTnVtYmVyRWxlbWVudCBleHRlbmRzIEVtcHR5RWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwidzpwZ051bVwiKTtcbiAgfVxufVxuY2xhc3MgQ2FycmlhZ2VSZXR1cm4gZXh0ZW5kcyBFbXB0eUVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6Y3JcIik7XG4gIH1cbn1cbmNsYXNzIFRhYiBleHRlbmRzIEVtcHR5RWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwidzp0YWJcIik7XG4gIH1cbn1cbmNsYXNzIExhc3RSZW5kZXJlZFBhZ2VCcmVhayBleHRlbmRzIEVtcHR5RWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwidzpsYXN0UmVuZGVyZWRQYWdlQnJlYWtcIik7XG4gIH1cbn1cbmNvbnN0IFBvc2l0aW9uYWxUYWJBbGlnbm1lbnQgPSB7XG4gIExFRlQ6IFwibGVmdFwiLFxuICBDRU5URVI6IFwiY2VudGVyXCIsXG4gIFJJR0hUOiBcInJpZ2h0XCJcbn07XG5jb25zdCBQb3NpdGlvbmFsVGFiUmVsYXRpdmVUbyA9IHtcbiAgTUFSR0lOOiBcIm1hcmdpblwiLFxuICBJTkRFTlQ6IFwiaW5kZW50XCJcbn07XG5jb25zdCBQb3NpdGlvbmFsVGFiTGVhZGVyID0ge1xuICBOT05FOiBcIm5vbmVcIixcbiAgRE9UOiBcImRvdFwiLFxuICBIWVBIRU46IFwiaHlwaGVuXCIsXG4gIFVOREVSU0NPUkU6IFwidW5kZXJzY29yZVwiLFxuICBNSURETEVfRE9UOiBcIm1pZGRsZURvdFwiXG59O1xuY2xhc3MgUG9zaXRpb25hbFRhYiBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJ3OnB0YWJcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgTmV4dEF0dHJpYnV0ZUNvbXBvbmVudCh7XG4gICAgICAgIGFsaWdubWVudDoge1xuICAgICAgICAgIGtleTogXCJ3OmFsaWdubWVudFwiLFxuICAgICAgICAgIHZhbHVlOiBvcHRpb25zMi5hbGlnbm1lbnRcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUbzoge1xuICAgICAgICAgIGtleTogXCJ3OnJlbGF0aXZlVG9cIixcbiAgICAgICAgICB2YWx1ZTogb3B0aW9uczIucmVsYXRpdmVUb1xuICAgICAgICB9LFxuICAgICAgICBsZWFkZXI6IHtcbiAgICAgICAgICBrZXk6IFwidzpsZWFkZXJcIixcbiAgICAgICAgICB2YWx1ZTogb3B0aW9uczIubGVhZGVyXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY29uc3QgQnJlYWtUeXBlID0ge1xuICBDT0xVTU46IFwiY29sdW1uXCIsXG4gIFBBR0U6IFwicGFnZVwiXG4gIC8vIHRleHRXcmFwcGluZyBicmVha3MgYXJlIHRoZSBkZWZhdWx0IGFuZCBhbHJlYWR5IGV4cG9zZWQgdmlhIHRoZSBcIlJ1blwiIGNsYXNzXG59O1xuY2xhc3MgQnJlYWsyIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodHlwZTIpIHtcbiAgICBzdXBlcihcInc6YnJcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgQXR0cmlidXRlcyh7XG4gICAgICAgIHR5cGU6IHR5cGUyXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNsYXNzIFBhZ2VCcmVhayBleHRlbmRzIFJ1biB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKHt9KTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgQnJlYWsyKEJyZWFrVHlwZS5QQUdFKSk7XG4gIH1cbn1cbmNsYXNzIENvbHVtbkJyZWFrIGV4dGVuZHMgUnVuIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoe30pO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCcmVhazIoQnJlYWtUeXBlLkNPTFVNTikpO1xuICB9XG59XG5jbGFzcyBQYWdlQnJlYWtCZWZvcmUgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6cGFnZUJyZWFrQmVmb3JlXCIpO1xuICB9XG59XG5jb25zdCBMaW5lUnVsZVR5cGUgPSB7XG4gIEFUX0xFQVNUOiBcImF0TGVhc3RcIixcbiAgRVhBQ1RMWTogXCJleGFjdGx5XCIsXG4gIEVYQUNUOiBcImV4YWN0XCIsXG4gIEFVVE86IFwiYXV0b1wiXG59O1xuY2xhc3MgU3BhY2luZ0F0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIGFmdGVyOiBcInc6YWZ0ZXJcIixcbiAgICAgIGJlZm9yZTogXCJ3OmJlZm9yZVwiLFxuICAgICAgbGluZTogXCJ3OmxpbmVcIixcbiAgICAgIGxpbmVSdWxlOiBcInc6bGluZVJ1bGVcIixcbiAgICAgIGJlZm9yZUF1dG9TcGFjaW5nOiBcInc6YmVmb3JlQXV0b3NwYWNpbmdcIixcbiAgICAgIGFmdGVyQXV0b1NwYWNpbmc6IFwidzphZnRlckF1dG9TcGFjaW5nXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgU3BhY2luZyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJ3OnNwYWNpbmdcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IFNwYWNpbmdBdHRyaWJ1dGVzKG9wdGlvbnMyKSk7XG4gIH1cbn1cbmNvbnN0IEhlYWRpbmdMZXZlbCA9IHtcbiAgSEVBRElOR18xOiBcIkhlYWRpbmcxXCIsXG4gIEhFQURJTkdfMjogXCJIZWFkaW5nMlwiLFxuICBIRUFESU5HXzM6IFwiSGVhZGluZzNcIixcbiAgSEVBRElOR180OiBcIkhlYWRpbmc0XCIsXG4gIEhFQURJTkdfNTogXCJIZWFkaW5nNVwiLFxuICBIRUFESU5HXzY6IFwiSGVhZGluZzZcIixcbiAgVElUTEU6IFwiVGl0bGVcIlxufTtcbmxldCBTdHlsZSQxID0gY2xhc3MgU3R5bGUgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihzdHlsZUlkKSB7XG4gICAgc3VwZXIoXCJ3OnBTdHlsZVwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBBdHRyaWJ1dGVzKHtcbiAgICAgICAgdmFsOiBzdHlsZUlkXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn07XG5jbGFzcyBUYWJTdG9wIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodGFiRGVmaW5pdGlvbnMpIHtcbiAgICBzdXBlcihcInc6dGFic1wiKTtcbiAgICBmb3IgKGNvbnN0IHRhYkRlZmluaXRpb24gb2YgdGFiRGVmaW5pdGlvbnMpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUYWJTdG9wSXRlbSh0YWJEZWZpbml0aW9uKSk7XG4gICAgfVxuICB9XG59XG5jb25zdCBUYWJTdG9wVHlwZSA9IHtcbiAgTEVGVDogXCJsZWZ0XCIsXG4gIFJJR0hUOiBcInJpZ2h0XCIsXG4gIENFTlRFUjogXCJjZW50ZXJcIixcbiAgQkFSOiBcImJhclwiLFxuICBDTEVBUjogXCJjbGVhclwiLFxuICBERUNJTUFMOiBcImRlY2ltYWxcIixcbiAgRU5EOiBcImVuZFwiLFxuICBOVU06IFwibnVtXCIsXG4gIFNUQVJUOiBcInN0YXJ0XCJcbn07XG5jb25zdCBMZWFkZXJUeXBlID0ge1xuICBET1Q6IFwiZG90XCIsXG4gIEhZUEhFTjogXCJoeXBoZW5cIixcbiAgTUlERExFX0RPVDogXCJtaWRkbGVEb3RcIixcbiAgTk9ORTogXCJub25lXCIsXG4gIFVOREVSU0NPUkU6IFwidW5kZXJzY29yZVwiXG59O1xuY29uc3QgVGFiU3RvcFBvc2l0aW9uID0ge1xuICBNQVg6IDkwMjZcbn07XG5jbGFzcyBUYWJBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7IHZhbDogXCJ3OnZhbFwiLCBwb3M6IFwidzpwb3NcIiwgbGVhZGVyOiBcInc6bGVhZGVyXCIgfSk7XG4gIH1cbn1cbmNsYXNzIFRhYlN0b3BJdGVtIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoeyB0eXBlOiB0eXBlMiwgcG9zaXRpb24sIGxlYWRlciB9KSB7XG4gICAgc3VwZXIoXCJ3OnRhYlwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBUYWJBdHRyaWJ1dGVzKHtcbiAgICAgICAgdmFsOiB0eXBlMixcbiAgICAgICAgcG9zOiBwb3NpdGlvbixcbiAgICAgICAgbGVhZGVyXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNsYXNzIE51bWJlclByb3BlcnRpZXMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihudW1iZXJJZCwgaW5kZW50TGV2ZWwpIHtcbiAgICBzdXBlcihcInc6bnVtUHJcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IEluZGVudExldmVsKGluZGVudExldmVsKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE51bWJlcklkKG51bWJlcklkKSk7XG4gIH1cbn1cbmNsYXNzIEluZGVudExldmVsIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IobGV2ZWwpIHtcbiAgICBzdXBlcihcInc6aWx2bFwiKTtcbiAgICBpZiAobGV2ZWwgPiA5KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiTGV2ZWwgY2Fubm90IGJlIGdyZWF0ZXIgdGhhbiA5LiBSZWFkIG1vcmUgaGVyZTogaHR0cHM6Ly9hbnN3ZXJzLm1pY3Jvc29mdC5jb20vZW4tdXMvbXNvZmZpY2UvZm9ydW0vYWxsL2RvZXMtd29yZC1zdXBwb3J0LW1vcmUtdGhhbi05LWxpc3QtbGV2ZWxzL2QxMzBmZGNkLTE3ODEtNDQ2ZC04Yzg0LWM2Yzc5MTI0ZTRkN1wiXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBBdHRyaWJ1dGVzKHtcbiAgICAgICAgdmFsOiBsZXZlbFxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jbGFzcyBOdW1iZXJJZCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGlkKSB7XG4gICAgc3VwZXIoXCJ3Om51bUlkXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IEF0dHJpYnV0ZXMoe1xuICAgICAgICB2YWw6IHR5cGVvZiBpZCA9PT0gXCJzdHJpbmdcIiA/IGB7JHtpZH19YCA6IGlkXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNsYXNzIEZpbGVDaGlsZCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImZpbGVDaGlsZFwiLCBTeW1ib2woKSk7XG4gIH1cbn1cbmNsYXNzIFJlbGF0aW9uc2hpcEF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIGlkOiBcIklkXCIsXG4gICAgICB0eXBlOiBcIlR5cGVcIixcbiAgICAgIHRhcmdldDogXCJUYXJnZXRcIixcbiAgICAgIHRhcmdldE1vZGU6IFwiVGFyZ2V0TW9kZVwiXG4gICAgfSk7XG4gIH1cbn1cbmNvbnN0IFRhcmdldE1vZGVUeXBlID0ge1xuICBFWFRFUk5BTDogXCJFeHRlcm5hbFwiXG59O1xuY2xhc3MgUmVsYXRpb25zaGlwIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoaWQsIHR5cGUyLCB0YXJnZXQsIHRhcmdldE1vZGUpIHtcbiAgICBzdXBlcihcIlJlbGF0aW9uc2hpcFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBSZWxhdGlvbnNoaXBBdHRyaWJ1dGVzKHtcbiAgICAgICAgaWQsXG4gICAgICAgIHR5cGU6IHR5cGUyLFxuICAgICAgICB0YXJnZXQsXG4gICAgICAgIHRhcmdldE1vZGVcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgSHlwZXJsaW5rQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgaWQ6IFwicjppZFwiLFxuICAgICAgaGlzdG9yeTogXCJ3Omhpc3RvcnlcIixcbiAgICAgIGFuY2hvcjogXCJ3OmFuY2hvclwiXG4gICAgfSk7XG4gIH1cbn1cbmNvbnN0IEh5cGVybGlua1R5cGUgPSB7XG4gIElOVEVSTkFMOiBcIklOVEVSTkFMXCIsXG4gIEVYVEVSTkFMOiBcIkVYVEVSTkFMXCJcbn07XG5jbGFzcyBDb25jcmV0ZUh5cGVybGluayBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGNoaWxkcmVuLCByZWxhdGlvbnNoaXBJZCwgYW5jaG9yKSB7XG4gICAgc3VwZXIoXCJ3Omh5cGVybGlua1wiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwibGlua0lkXCIpO1xuICAgIHRoaXMubGlua0lkID0gcmVsYXRpb25zaGlwSWQ7XG4gICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICBoaXN0b3J5OiAxLFxuICAgICAgYW5jaG9yOiBhbmNob3IgPyBhbmNob3IgOiB2b2lkIDAsXG4gICAgICBpZDogIWFuY2hvciA/IGBySWQke3RoaXMubGlua0lkfWAgOiB2b2lkIDBcbiAgICB9O1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBuZXcgSHlwZXJsaW5rQXR0cmlidXRlcyhwcm9wcyk7XG4gICAgdGhpcy5yb290LnB1c2goYXR0cmlidXRlcyk7XG4gICAgY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKGNoaWxkKTtcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgSW50ZXJuYWxIeXBlcmxpbmsgZXh0ZW5kcyBDb25jcmV0ZUh5cGVybGluayB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIob3B0aW9uczIuY2hpbGRyZW4sIHVuaXF1ZUlkKCksIG9wdGlvbnMyLmFuY2hvcik7XG4gIH1cbn1cbmNsYXNzIEV4dGVybmFsSHlwZXJsaW5rIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcInc6ZXh0ZXJuYWxIeXBlcmxpbmtcIik7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9uczI7XG4gIH1cbn1cbmNsYXNzIEJvb2ttYXJrU3RhcnRBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICBpZDogXCJ3OmlkXCIsXG4gICAgICBuYW1lOiBcInc6bmFtZVwiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIEJvb2ttYXJrRW5kQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgaWQ6IFwidzppZFwiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIEJvb2ttYXJrIHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiYm9va21hcmtVbmlxdWVOdW1lcmljSWRcIiwgYm9va21hcmtVbmlxdWVOdW1lcmljSWRHZW4oKSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInN0YXJ0XCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJjaGlsZHJlblwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiZW5kXCIpO1xuICAgIGNvbnN0IGxpbmtJZCA9IHRoaXMuYm9va21hcmtVbmlxdWVOdW1lcmljSWQoKTtcbiAgICB0aGlzLnN0YXJ0ID0gbmV3IEJvb2ttYXJrU3RhcnQob3B0aW9uczIuaWQsIGxpbmtJZCk7XG4gICAgdGhpcy5jaGlsZHJlbiA9IG9wdGlvbnMyLmNoaWxkcmVuO1xuICAgIHRoaXMuZW5kID0gbmV3IEJvb2ttYXJrRW5kKGxpbmtJZCk7XG4gIH1cbn1cbmNsYXNzIEJvb2ttYXJrU3RhcnQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihpZCwgbGlua0lkKSB7XG4gICAgc3VwZXIoXCJ3OmJvb2ttYXJrU3RhcnRcIik7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IG5ldyBCb29rbWFya1N0YXJ0QXR0cmlidXRlcyh7XG4gICAgICBuYW1lOiBpZCxcbiAgICAgIGlkOiBsaW5rSWRcbiAgICB9KTtcbiAgICB0aGlzLnJvb3QucHVzaChhdHRyaWJ1dGVzKTtcbiAgfVxufVxuY2xhc3MgQm9va21hcmtFbmQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihsaW5rSWQpIHtcbiAgICBzdXBlcihcInc6Ym9va21hcmtFbmRcIik7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IG5ldyBCb29rbWFya0VuZEF0dHJpYnV0ZXMoe1xuICAgICAgaWQ6IGxpbmtJZFxuICAgIH0pO1xuICAgIHRoaXMucm9vdC5wdXNoKGF0dHJpYnV0ZXMpO1xuICB9XG59XG5jbGFzcyBPdXRsaW5lTGV2ZWwgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihsZXZlbCkge1xuICAgIHN1cGVyKFwidzpvdXRsaW5lTHZsXCIpO1xuICAgIHRoaXMubGV2ZWwgPSBsZXZlbDtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBBdHRyaWJ1dGVzKHtcbiAgICAgICAgdmFsOiBsZXZlbFxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jbGFzcyBQYWdlUmVmZXJlbmNlRmllbGRJbnN0cnVjdGlvbiBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGJvb2ttYXJrSWQsIG9wdGlvbnMyID0ge30pIHtcbiAgICBzdXBlcihcInc6aW5zdHJUZXh0XCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUZXh0QXR0cmlidXRlcyh7IHNwYWNlOiBTcGFjZVR5cGUuUFJFU0VSVkUgfSkpO1xuICAgIGxldCBpbnN0cnVjdGlvbiA9IGBQQUdFUkVGICR7Ym9va21hcmtJZH1gO1xuICAgIGlmIChvcHRpb25zMi5oeXBlcmxpbmspIHtcbiAgICAgIGluc3RydWN0aW9uID0gYCR7aW5zdHJ1Y3Rpb259IFxcXFxoYDtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnVzZVJlbGF0aXZlUG9zaXRpb24pIHtcbiAgICAgIGluc3RydWN0aW9uID0gYCR7aW5zdHJ1Y3Rpb259IFxcXFxwYDtcbiAgICB9XG4gICAgdGhpcy5yb290LnB1c2goaW5zdHJ1Y3Rpb24pO1xuICB9XG59XG5jbGFzcyBQYWdlUmVmZXJlbmNlIGV4dGVuZHMgUnVuIHtcbiAgY29uc3RydWN0b3IoYm9va21hcmtJZCwgb3B0aW9uczIgPSB7fSkge1xuICAgIHN1cGVyKHtcbiAgICAgIGNoaWxkcmVuOiBbbmV3IEJlZ2luKHRydWUpLCBuZXcgUGFnZVJlZmVyZW5jZUZpZWxkSW5zdHJ1Y3Rpb24oYm9va21hcmtJZCwgb3B0aW9uczIpLCBuZXcgRW5kKCldXG4gICAgfSk7XG4gIH1cbn1cbmNvbnN0IFZlcnRpY2FsQWxpZ24yID0ge1xuICBCT1RUT006IFwiYm90dG9tXCIsXG4gIENFTlRFUjogXCJjZW50ZXJcIixcbiAgVE9QOiBcInRvcFwiXG59O1xuY2xhc3MgVmVydGljYWxBbGlnbkF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIHZlcnRpY2FsQWxpZ246IFwidzp2YWxcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBWZXJ0aWNhbEFsaWduRWxlbWVudCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgc3VwZXIoXCJ3OnZBbGlnblwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgVmVydGljYWxBbGlnbkF0dHJpYnV0ZXMoeyB2ZXJ0aWNhbEFsaWduOiB2YWx1ZSB9KSk7XG4gIH1cbn1cbmNsYXNzIENvbHVtbnMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih7IHNwYWNlLCBjb3VudCwgc2VwYXJhdGUsIGVxdWFsV2lkdGgsIGNoaWxkcmVuIH0pIHtcbiAgICBzdXBlcihcInc6Y29sc1wiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBOZXh0QXR0cmlidXRlQ29tcG9uZW50KHtcbiAgICAgICAgc3BhY2U6IHsga2V5OiBcInc6c3BhY2VcIiwgdmFsdWU6IHNwYWNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0d2lwc01lYXN1cmVWYWx1ZShzcGFjZSkgfSxcbiAgICAgICAgY291bnQ6IHsga2V5OiBcInc6bnVtXCIsIHZhbHVlOiBjb3VudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVjaW1hbE51bWJlcihjb3VudCkgfSxcbiAgICAgICAgc2VwYXJhdGU6IHsga2V5OiBcInc6c2VwXCIsIHZhbHVlOiBzZXBhcmF0ZSB9LFxuICAgICAgICBlcXVhbFdpZHRoOiB7IGtleTogXCJ3OmVxdWFsV2lkdGhcIiwgdmFsdWU6IGVxdWFsV2lkdGggfVxuICAgICAgfSlcbiAgICApO1xuICAgIGlmICghZXF1YWxXaWR0aCAmJiBjaGlsZHJlbikge1xuICAgICAgY2hpbGRyZW4uZm9yRWFjaCgoY29sdW1uKSA9PiB0aGlzLmFkZENoaWxkRWxlbWVudChjb2x1bW4pKTtcbiAgICB9XG4gIH1cbn1cbmNvbnN0IERvY3VtZW50R3JpZFR5cGUgPSB7XG4gIERFRkFVTFQ6IFwiZGVmYXVsdFwiLFxuICBMSU5FUzogXCJsaW5lc1wiLFxuICBMSU5FU19BTkRfQ0hBUlM6IFwibGluZXNBbmRDaGFyc1wiLFxuICBTTkFQX1RPX0NIQVJTOiBcInNuYXBUb0NoYXJzXCJcbn07XG5jbGFzcyBEb2NHcmlkQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgdHlwZTogXCJ3OnR5cGVcIixcbiAgICAgIGxpbmVQaXRjaDogXCJ3OmxpbmVQaXRjaFwiLFxuICAgICAgY2hhclNwYWNlOiBcInc6Y2hhclNwYWNlXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgRG9jdW1lbnRHcmlkIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IobGluZVBpdGNoLCBjaGFyU3BhY2UsIHR5cGUyKSB7XG4gICAgc3VwZXIoXCJ3OmRvY0dyaWRcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgRG9jR3JpZEF0dHJpYnV0ZXMoe1xuICAgICAgICB0eXBlOiB0eXBlMixcbiAgICAgICAgbGluZVBpdGNoOiBkZWNpbWFsTnVtYmVyKGxpbmVQaXRjaCksXG4gICAgICAgIGNoYXJTcGFjZTogY2hhclNwYWNlID8gZGVjaW1hbE51bWJlcihjaGFyU3BhY2UpIDogdm9pZCAwXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNvbnN0IEhlYWRlckZvb3RlclJlZmVyZW5jZVR5cGUgPSB7XG4gIERFRkFVTFQ6IFwiZGVmYXVsdFwiLFxuICBGSVJTVDogXCJmaXJzdFwiLFxuICBFVkVOOiBcImV2ZW5cIlxufTtcbmNsYXNzIEZvb3RlclJlZmVyZW5jZUF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIHR5cGU6IFwidzp0eXBlXCIsXG4gICAgICBpZDogXCJyOmlkXCJcbiAgICB9KTtcbiAgfVxufVxuY29uc3QgSGVhZGVyRm9vdGVyVHlwZSA9IHtcbiAgSEVBREVSOiBcInc6aGVhZGVyUmVmZXJlbmNlXCIsXG4gIEZPT1RFUjogXCJ3OmZvb3RlclJlZmVyZW5jZVwiXG59O1xuY2xhc3MgSGVhZGVyRm9vdGVyUmVmZXJlbmNlIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodHlwZTIsIG9wdGlvbnMyKSB7XG4gICAgc3VwZXIodHlwZTIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IEZvb3RlclJlZmVyZW5jZUF0dHJpYnV0ZXMoe1xuICAgICAgICB0eXBlOiBvcHRpb25zMi50eXBlIHx8IEhlYWRlckZvb3RlclJlZmVyZW5jZVR5cGUuREVGQVVMVCxcbiAgICAgICAgaWQ6IGBySWQke29wdGlvbnMyLmlkfWBcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY29uc3QgTGluZU51bWJlclJlc3RhcnRGb3JtYXQgPSB7XG4gIE5FV19QQUdFOiBcIm5ld1BhZ2VcIixcbiAgTkVXX1NFQ1RJT046IFwibmV3U2VjdGlvblwiLFxuICBDT05USU5VT1VTOiBcImNvbnRpbnVvdXNcIlxufTtcbmNvbnN0IGNyZWF0ZUxpbmVOdW1iZXJUeXBlID0gKHsgY291bnRCeSwgc3RhcnQsIHJlc3RhcnQsIGRpc3RhbmNlIH0pID0+IG5ldyBCdWlsZGVyRWxlbWVudCh7XG4gIG5hbWU6IFwidzpsbk51bVR5cGVcIixcbiAgYXR0cmlidXRlczoge1xuICAgIGNvdW50Qnk6IHsga2V5OiBcInc6Y291bnRCeVwiLCB2YWx1ZTogY291bnRCeSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVjaW1hbE51bWJlcihjb3VudEJ5KSB9LFxuICAgIHN0YXJ0OiB7IGtleTogXCJ3OnN0YXJ0XCIsIHZhbHVlOiBzdGFydCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVjaW1hbE51bWJlcihzdGFydCkgfSxcbiAgICByZXN0YXJ0OiB7IGtleTogXCJ3OnJlc3RhcnRcIiwgdmFsdWU6IHJlc3RhcnQgfSxcbiAgICBkaXN0YW5jZToge1xuICAgICAga2V5OiBcInc6ZGlzdGFuY2VcIixcbiAgICAgIHZhbHVlOiBkaXN0YW5jZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdHdpcHNNZWFzdXJlVmFsdWUoZGlzdGFuY2UpXG4gICAgfVxuICB9XG59KTtcbmNvbnN0IFBhZ2VCb3JkZXJEaXNwbGF5ID0ge1xuICBBTExfUEFHRVM6IFwiYWxsUGFnZXNcIixcbiAgRklSU1RfUEFHRTogXCJmaXJzdFBhZ2VcIixcbiAgTk9UX0ZJUlNUX1BBR0U6IFwibm90Rmlyc3RQYWdlXCJcbn07XG5jb25zdCBQYWdlQm9yZGVyT2Zmc2V0RnJvbSA9IHtcbiAgUEFHRTogXCJwYWdlXCIsXG4gIFRFWFQ6IFwidGV4dFwiXG59O1xuY29uc3QgUGFnZUJvcmRlclpPcmRlciA9IHtcbiAgQkFDSzogXCJiYWNrXCIsXG4gIEZST05UOiBcImZyb250XCJcbn07XG5jbGFzcyBQYWdlQm9yZGVyc0F0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIGRpc3BsYXk6IFwidzpkaXNwbGF5XCIsXG4gICAgICBvZmZzZXRGcm9tOiBcInc6b2Zmc2V0RnJvbVwiLFxuICAgICAgek9yZGVyOiBcInc6ek9yZGVyXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgUGFnZUJvcmRlcnMgZXh0ZW5kcyBJZ25vcmVJZkVtcHR5WG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcInc6cGdCb3JkZXJzXCIpO1xuICAgIGlmICghb3B0aW9uczIpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIucGFnZUJvcmRlcnMpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgICBuZXcgUGFnZUJvcmRlcnNBdHRyaWJ1dGVzKHtcbiAgICAgICAgICBkaXNwbGF5OiBvcHRpb25zMi5wYWdlQm9yZGVycy5kaXNwbGF5LFxuICAgICAgICAgIG9mZnNldEZyb206IG9wdGlvbnMyLnBhZ2VCb3JkZXJzLm9mZnNldEZyb20sXG4gICAgICAgICAgek9yZGVyOiBvcHRpb25zMi5wYWdlQm9yZGVycy56T3JkZXJcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBQYWdlQm9yZGVyc0F0dHJpYnV0ZXMoe30pKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnBhZ2VCb3JkZXJUb3ApIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCb3JkZXJFbGVtZW50KFwidzp0b3BcIiwgb3B0aW9uczIucGFnZUJvcmRlclRvcCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIucGFnZUJvcmRlckxlZnQpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCb3JkZXJFbGVtZW50KFwidzpsZWZ0XCIsIG9wdGlvbnMyLnBhZ2VCb3JkZXJMZWZ0KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5wYWdlQm9yZGVyQm90dG9tKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgQm9yZGVyRWxlbWVudChcInc6Ym90dG9tXCIsIG9wdGlvbnMyLnBhZ2VCb3JkZXJCb3R0b20pKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnBhZ2VCb3JkZXJSaWdodCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IEJvcmRlckVsZW1lbnQoXCJ3OnJpZ2h0XCIsIG9wdGlvbnMyLnBhZ2VCb3JkZXJSaWdodCkpO1xuICAgIH1cbiAgfVxufVxuY2xhc3MgUGFnZU1hcmdpbiBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCwgaGVhZGVyLCBmb290ZXIsIGd1dHRlcikge1xuICAgIHN1cGVyKFwidzpwZ01hclwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBOZXh0QXR0cmlidXRlQ29tcG9uZW50KHtcbiAgICAgICAgdG9wOiB7IGtleTogXCJ3OnRvcFwiLCB2YWx1ZTogc2lnbmVkVHdpcHNNZWFzdXJlVmFsdWUodG9wKSB9LFxuICAgICAgICByaWdodDogeyBrZXk6IFwidzpyaWdodFwiLCB2YWx1ZTogdHdpcHNNZWFzdXJlVmFsdWUocmlnaHQpIH0sXG4gICAgICAgIGJvdHRvbTogeyBrZXk6IFwidzpib3R0b21cIiwgdmFsdWU6IHNpZ25lZFR3aXBzTWVhc3VyZVZhbHVlKGJvdHRvbSkgfSxcbiAgICAgICAgbGVmdDogeyBrZXk6IFwidzpsZWZ0XCIsIHZhbHVlOiB0d2lwc01lYXN1cmVWYWx1ZShsZWZ0KSB9LFxuICAgICAgICBoZWFkZXI6IHsga2V5OiBcInc6aGVhZGVyXCIsIHZhbHVlOiB0d2lwc01lYXN1cmVWYWx1ZShoZWFkZXIpIH0sXG4gICAgICAgIGZvb3RlcjogeyBrZXk6IFwidzpmb290ZXJcIiwgdmFsdWU6IHR3aXBzTWVhc3VyZVZhbHVlKGZvb3RlcikgfSxcbiAgICAgICAgZ3V0dGVyOiB7IGtleTogXCJ3Omd1dHRlclwiLCB2YWx1ZTogdHdpcHNNZWFzdXJlVmFsdWUoZ3V0dGVyKSB9XG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNvbnN0IFBhZ2VOdW1iZXJTZXBhcmF0b3IgPSB7XG4gIEhZUEhFTjogXCJoeXBoZW5cIixcbiAgUEVSSU9EOiBcInBlcmlvZFwiLFxuICBDT0xPTjogXCJjb2xvblwiLFxuICBFTV9EQVNIOiBcImVtRGFzaFwiLFxuICBFTl9EQVNIOiBcImVuZGFzaFwiXG59O1xuY2xhc3MgUGFnZU51bWJlclR5cGVBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICBzdGFydDogXCJ3OnN0YXJ0XCIsXG4gICAgICBmb3JtYXRUeXBlOiBcInc6Zm10XCIsXG4gICAgICBzZXBhcmF0b3I6IFwidzpjaGFwU2VwXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgUGFnZU51bWJlclR5cGUgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih7IHN0YXJ0LCBmb3JtYXRUeXBlLCBzZXBhcmF0b3IgfSkge1xuICAgIHN1cGVyKFwidzpwZ051bVR5cGVcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgUGFnZU51bWJlclR5cGVBdHRyaWJ1dGVzKHtcbiAgICAgICAgc3RhcnQ6IHN0YXJ0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWNpbWFsTnVtYmVyKHN0YXJ0KSxcbiAgICAgICAgZm9ybWF0VHlwZSxcbiAgICAgICAgc2VwYXJhdG9yXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNvbnN0IFBhZ2VPcmllbnRhdGlvbiA9IHtcbiAgUE9SVFJBSVQ6IFwicG9ydHJhaXRcIixcbiAgTEFORFNDQVBFOiBcImxhbmRzY2FwZVwiXG59O1xuY2xhc3MgUGFnZVNpemUgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih3aWR0aCwgaGVpZ2h0LCBvcmllbnRhdGlvbikge1xuICAgIHN1cGVyKFwidzpwZ1N6XCIpO1xuICAgIGNvbnN0IGZsaXAgPSBvcmllbnRhdGlvbiA9PT0gUGFnZU9yaWVudGF0aW9uLkxBTkRTQ0FQRTtcbiAgICBjb25zdCB3aWR0aFR3aXBzID0gdHdpcHNNZWFzdXJlVmFsdWUod2lkdGgpO1xuICAgIGNvbnN0IGhlaWdodFR3aXBzID0gdHdpcHNNZWFzdXJlVmFsdWUoaGVpZ2h0KTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBOZXh0QXR0cmlidXRlQ29tcG9uZW50KHtcbiAgICAgICAgd2lkdGg6IHsga2V5OiBcInc6d1wiLCB2YWx1ZTogZmxpcCA/IGhlaWdodFR3aXBzIDogd2lkdGhUd2lwcyB9LFxuICAgICAgICBoZWlnaHQ6IHsga2V5OiBcInc6aFwiLCB2YWx1ZTogZmxpcCA/IHdpZHRoVHdpcHMgOiBoZWlnaHRUd2lwcyB9LFxuICAgICAgICBvcmllbnRhdGlvbjogeyBrZXk6IFwidzpvcmllbnRcIiwgdmFsdWU6IG9yaWVudGF0aW9uIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY29uc3QgUGFnZVRleHREaXJlY3Rpb25UeXBlID0ge1xuICBMRUZUX1RPX1JJR0hUX1RPUF9UT19CT1RUT006IFwibHJUYlwiLFxuICBUT1BfVE9fQk9UVE9NX1JJR0hUX1RPX0xFRlQ6IFwidGJSbFwiXG59O1xuY2xhc3MgUGFnZVRleHREaXJlY3Rpb25BdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7IHZhbDogXCJ3OnZhbFwiIH0pO1xuICB9XG59XG5jbGFzcyBQYWdlVGV4dERpcmVjdGlvbiBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgc3VwZXIoXCJ3OnRleHREaXJlY3Rpb25cIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgUGFnZVRleHREaXJlY3Rpb25BdHRyaWJ1dGVzKHtcbiAgICAgICAgdmFsOiB2YWx1ZVxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jb25zdCBTZWN0aW9uVHlwZSA9IHtcbiAgTkVYVF9QQUdFOiBcIm5leHRQYWdlXCIsXG4gIE5FWFRfQ09MVU1OOiBcIm5leHRDb2x1bW5cIixcbiAgQ09OVElOVU9VUzogXCJjb250aW51b3VzXCIsXG4gIEVWRU5fUEFHRTogXCJldmVuUGFnZVwiLFxuICBPRERfUEFHRTogXCJvZGRQYWdlXCJcbn07XG5jbGFzcyBTZWN0aW9uVHlwZUF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIHZhbDogXCJ3OnZhbFwiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIFR5cGUgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgIHN1cGVyKFwidzp0eXBlXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTZWN0aW9uVHlwZUF0dHJpYnV0ZXMoeyB2YWw6IHZhbHVlIH0pKTtcbiAgfVxufVxuY29uc3Qgc2VjdGlvbk1hcmdpbkRlZmF1bHRzID0ge1xuICBUT1A6IDE0NDAsXG4gIFJJR0hUOiAxNDQwLFxuICBCT1RUT006IDE0NDAsXG4gIExFRlQ6IDE0NDAsXG4gIEhFQURFUjogNzA4LFxuICBGT09URVI6IDcwOCxcbiAgR1VUVEVSOiAwXG59O1xuY29uc3Qgc2VjdGlvblBhZ2VTaXplRGVmYXVsdHMgPSB7XG4gIFdJRFRIOiAxMTkwNixcbiAgSEVJR0hUOiAxNjgzOCxcbiAgT1JJRU5UQVRJT046IFBhZ2VPcmllbnRhdGlvbi5QT1JUUkFJVFxufTtcbmNsYXNzIFNlY3Rpb25Qcm9wZXJ0aWVzIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIHBhZ2U6IHtcbiAgICAgIHNpemU6IHtcbiAgICAgICAgd2lkdGggPSBzZWN0aW9uUGFnZVNpemVEZWZhdWx0cy5XSURUSCxcbiAgICAgICAgaGVpZ2h0ID0gc2VjdGlvblBhZ2VTaXplRGVmYXVsdHMuSEVJR0hULFxuICAgICAgICBvcmllbnRhdGlvbiA9IHNlY3Rpb25QYWdlU2l6ZURlZmF1bHRzLk9SSUVOVEFUSU9OXG4gICAgICB9ID0ge30sXG4gICAgICBtYXJnaW46IHtcbiAgICAgICAgdG9wID0gc2VjdGlvbk1hcmdpbkRlZmF1bHRzLlRPUCxcbiAgICAgICAgcmlnaHQgPSBzZWN0aW9uTWFyZ2luRGVmYXVsdHMuUklHSFQsXG4gICAgICAgIGJvdHRvbSA9IHNlY3Rpb25NYXJnaW5EZWZhdWx0cy5CT1RUT00sXG4gICAgICAgIGxlZnQgPSBzZWN0aW9uTWFyZ2luRGVmYXVsdHMuTEVGVCxcbiAgICAgICAgaGVhZGVyID0gc2VjdGlvbk1hcmdpbkRlZmF1bHRzLkhFQURFUixcbiAgICAgICAgZm9vdGVyID0gc2VjdGlvbk1hcmdpbkRlZmF1bHRzLkZPT1RFUixcbiAgICAgICAgZ3V0dGVyID0gc2VjdGlvbk1hcmdpbkRlZmF1bHRzLkdVVFRFUlxuICAgICAgfSA9IHt9LFxuICAgICAgcGFnZU51bWJlcnMgPSB7fSxcbiAgICAgIGJvcmRlcnMsXG4gICAgICB0ZXh0RGlyZWN0aW9uXG4gICAgfSA9IHt9LFxuICAgIGdyaWQ6IHsgbGluZVBpdGNoID0gMzYwLCBjaGFyU3BhY2UsIHR5cGU6IGdyaWRUeXBlIH0gPSB7fSxcbiAgICBoZWFkZXJXcmFwcGVyR3JvdXAgPSB7fSxcbiAgICBmb290ZXJXcmFwcGVyR3JvdXAgPSB7fSxcbiAgICBsaW5lTnVtYmVycyxcbiAgICB0aXRsZVBhZ2UsXG4gICAgdmVydGljYWxBbGlnbixcbiAgICBjb2x1bW4sXG4gICAgdHlwZTogdHlwZTJcbiAgfSA9IHt9KSB7XG4gICAgc3VwZXIoXCJ3OnNlY3RQclwiKTtcbiAgICB0aGlzLmFkZEhlYWRlckZvb3Rlckdyb3VwKEhlYWRlckZvb3RlclR5cGUuSEVBREVSLCBoZWFkZXJXcmFwcGVyR3JvdXApO1xuICAgIHRoaXMuYWRkSGVhZGVyRm9vdGVyR3JvdXAoSGVhZGVyRm9vdGVyVHlwZS5GT09URVIsIGZvb3RlcldyYXBwZXJHcm91cCk7XG4gICAgaWYgKHR5cGUyKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgVHlwZSh0eXBlMikpO1xuICAgIH1cbiAgICB0aGlzLnJvb3QucHVzaChuZXcgUGFnZVNpemUod2lkdGgsIGhlaWdodCwgb3JpZW50YXRpb24pKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgUGFnZU1hcmdpbih0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQsIGhlYWRlciwgZm9vdGVyLCBndXR0ZXIpKTtcbiAgICBpZiAoYm9yZGVycykge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFBhZ2VCb3JkZXJzKGJvcmRlcnMpKTtcbiAgICB9XG4gICAgaWYgKGxpbmVOdW1iZXJzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChjcmVhdGVMaW5lTnVtYmVyVHlwZShsaW5lTnVtYmVycykpO1xuICAgIH1cbiAgICB0aGlzLnJvb3QucHVzaChuZXcgUGFnZU51bWJlclR5cGUocGFnZU51bWJlcnMpKTtcbiAgICBpZiAoY29sdW1uKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgQ29sdW1ucyhjb2x1bW4pKTtcbiAgICB9XG4gICAgaWYgKHZlcnRpY2FsQWxpZ24pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBWZXJ0aWNhbEFsaWduRWxlbWVudCh2ZXJ0aWNhbEFsaWduKSk7XG4gICAgfVxuICAgIGlmICh0aXRsZVBhZ2UgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6dGl0bGVQZ1wiLCB0aXRsZVBhZ2UpKTtcbiAgICB9XG4gICAgaWYgKHRleHREaXJlY3Rpb24pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBQYWdlVGV4dERpcmVjdGlvbih0ZXh0RGlyZWN0aW9uKSk7XG4gICAgfVxuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBEb2N1bWVudEdyaWQobGluZVBpdGNoLCBjaGFyU3BhY2UsIGdyaWRUeXBlKSk7XG4gIH1cbiAgYWRkSGVhZGVyRm9vdGVyR3JvdXAodHlwZTIsIGdyb3VwKSB7XG4gICAgaWYgKGdyb3VwLmRlZmF1bHQpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgICBuZXcgSGVhZGVyRm9vdGVyUmVmZXJlbmNlKHR5cGUyLCB7XG4gICAgICAgICAgdHlwZTogSGVhZGVyRm9vdGVyUmVmZXJlbmNlVHlwZS5ERUZBVUxULFxuICAgICAgICAgIGlkOiBncm91cC5kZWZhdWx0LlZpZXcuUmVmZXJlbmNlSWRcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChncm91cC5maXJzdCkge1xuICAgICAgdGhpcy5yb290LnB1c2goXG4gICAgICAgIG5ldyBIZWFkZXJGb290ZXJSZWZlcmVuY2UodHlwZTIsIHtcbiAgICAgICAgICB0eXBlOiBIZWFkZXJGb290ZXJSZWZlcmVuY2VUeXBlLkZJUlNULFxuICAgICAgICAgIGlkOiBncm91cC5maXJzdC5WaWV3LlJlZmVyZW5jZUlkXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoZ3JvdXAuZXZlbikge1xuICAgICAgdGhpcy5yb290LnB1c2goXG4gICAgICAgIG5ldyBIZWFkZXJGb290ZXJSZWZlcmVuY2UodHlwZTIsIHtcbiAgICAgICAgICB0eXBlOiBIZWFkZXJGb290ZXJSZWZlcmVuY2VUeXBlLkVWRU4sXG4gICAgICAgICAgaWQ6IGdyb3VwLmV2ZW4uVmlldy5SZWZlcmVuY2VJZFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIEJvZHkgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6Ym9keVwiKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuY3Rpb25hbC9wcmVmZXItcmVhZG9ubHktdHlwZVxuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJzZWN0aW9uc1wiLCBbXSk7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgbmV3IHNlY3Rpb24gcHJvcGVydGllcy5cbiAgICogTm90ZTogUHJldmlvdXMgc2VjdGlvbiBpcyBjcmVhdGVkIGluIHBhcmFncmFwaCBhZnRlciB0aGUgY3VycmVudCBlbGVtZW50LCBhbmQgdGhlbiBuZXcgc2VjdGlvbiB3aWxsIGJlIGFkZGVkLlxuICAgKiBUaGUgc3BlYyBzYXlzOlxuICAgKiAgLSBzZWN0aW9uIGVsZW1lbnQgc2hvdWxkIGJlIGluIHRoZSBsYXN0IHBhcmFncmFwaCBvZiB0aGUgc2VjdGlvblxuICAgKiAgLSBsYXN0IHNlY3Rpb24gc2hvdWxkIGJlIGRpcmVjdCBjaGlsZCBvZiBib2R5XG4gICAqXG4gICAqIEBwYXJhbSBvcHRpb25zIG5ldyBzZWN0aW9uIG9wdGlvbnNcbiAgICovXG4gIGFkZFNlY3Rpb24ob3B0aW9uczIpIHtcbiAgICBjb25zdCBjdXJyZW50U2VjdGlvbiA9IHRoaXMuc2VjdGlvbnMucG9wKCk7XG4gICAgdGhpcy5yb290LnB1c2godGhpcy5jcmVhdGVTZWN0aW9uUGFyYWdyYXBoKGN1cnJlbnRTZWN0aW9uKSk7XG4gICAgdGhpcy5zZWN0aW9ucy5wdXNoKG5ldyBTZWN0aW9uUHJvcGVydGllcyhvcHRpb25zMikpO1xuICB9XG4gIHByZXBGb3JYbWwoY29udGV4dCkge1xuICAgIGlmICh0aGlzLnNlY3Rpb25zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdGhpcy5yb290LnNwbGljZSgwLCAxKTtcbiAgICAgIHRoaXMucm9vdC5wdXNoKHRoaXMuc2VjdGlvbnMucG9wKCkpO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIucHJlcEZvclhtbChjb250ZXh0KTtcbiAgfVxuICBwdXNoKGNvbXBvbmVudCkge1xuICAgIHRoaXMucm9vdC5wdXNoKGNvbXBvbmVudCk7XG4gIH1cbiAgY3JlYXRlU2VjdGlvblBhcmFncmFwaChzZWN0aW9uKSB7XG4gICAgY29uc3QgcGFyYWdyYXBoID0gbmV3IFBhcmFncmFwaCh7fSk7XG4gICAgY29uc3QgcHJvcGVydGllcyA9IG5ldyBQYXJhZ3JhcGhQcm9wZXJ0aWVzKHt9KTtcbiAgICBwcm9wZXJ0aWVzLnB1c2goc2VjdGlvbik7XG4gICAgcGFyYWdyYXBoLmFkZENoaWxkRWxlbWVudChwcm9wZXJ0aWVzKTtcbiAgICByZXR1cm4gcGFyYWdyYXBoO1xuICB9XG59XG5jbGFzcyBDb2x1bW4gZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih7IHdpZHRoLCBzcGFjZSB9KSB7XG4gICAgc3VwZXIoXCJ3OmNvbFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBOZXh0QXR0cmlidXRlQ29tcG9uZW50KHtcbiAgICAgICAgd2lkdGg6IHsga2V5OiBcInc6d1wiLCB2YWx1ZTogdHdpcHNNZWFzdXJlVmFsdWUod2lkdGgpIH0sXG4gICAgICAgIHNwYWNlOiB7IGtleTogXCJ3OnNwYWNlXCIsIHZhbHVlOiBzcGFjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdHdpcHNNZWFzdXJlVmFsdWUoc3BhY2UpIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgRG9jdW1lbnRBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICB3cGM6IFwieG1sbnM6d3BjXCIsXG4gICAgICBtYzogXCJ4bWxuczptY1wiLFxuICAgICAgbzogXCJ4bWxuczpvXCIsXG4gICAgICByOiBcInhtbG5zOnJcIixcbiAgICAgIG06IFwieG1sbnM6bVwiLFxuICAgICAgdjogXCJ4bWxuczp2XCIsXG4gICAgICB3cDE0OiBcInhtbG5zOndwMTRcIixcbiAgICAgIHdwOiBcInhtbG5zOndwXCIsXG4gICAgICB3MTA6IFwieG1sbnM6dzEwXCIsXG4gICAgICB3OiBcInhtbG5zOndcIixcbiAgICAgIHcxNDogXCJ4bWxuczp3MTRcIixcbiAgICAgIHcxNTogXCJ4bWxuczp3MTVcIixcbiAgICAgIHdwZzogXCJ4bWxuczp3cGdcIixcbiAgICAgIHdwaTogXCJ4bWxuczp3cGlcIixcbiAgICAgIHduZTogXCJ4bWxuczp3bmVcIixcbiAgICAgIHdwczogXCJ4bWxuczp3cHNcIixcbiAgICAgIElnbm9yYWJsZTogXCJtYzpJZ25vcmFibGVcIixcbiAgICAgIGNwOiBcInhtbG5zOmNwXCIsXG4gICAgICBkYzogXCJ4bWxuczpkY1wiLFxuICAgICAgZGN0ZXJtczogXCJ4bWxuczpkY3Rlcm1zXCIsXG4gICAgICBkY21pdHlwZTogXCJ4bWxuczpkY21pdHlwZVwiLFxuICAgICAgeHNpOiBcInhtbG5zOnhzaVwiLFxuICAgICAgdHlwZTogXCJ4c2k6dHlwZVwiLFxuICAgICAgY3g6IFwieG1sbnM6Y3hcIixcbiAgICAgIGN4MTogXCJ4bWxuczpjeDFcIixcbiAgICAgIGN4MjogXCJ4bWxuczpjeDJcIixcbiAgICAgIGN4MzogXCJ4bWxuczpjeDNcIixcbiAgICAgIGN4NDogXCJ4bWxuczpjeDRcIixcbiAgICAgIGN4NTogXCJ4bWxuczpjeDVcIixcbiAgICAgIGN4NjogXCJ4bWxuczpjeDZcIixcbiAgICAgIGN4NzogXCJ4bWxuczpjeDdcIixcbiAgICAgIGN4ODogXCJ4bWxuczpjeDhcIixcbiAgICAgIGFpbms6IFwieG1sbnM6YWlua1wiLFxuICAgICAgYW0zZDogXCJ4bWxuczphbTNkXCIsXG4gICAgICB3MTZjZXg6IFwieG1sbnM6dzE2Y2V4XCIsXG4gICAgICB3MTZjaWQ6IFwieG1sbnM6dzE2Y2lkXCIsXG4gICAgICB3MTY6IFwieG1sbnM6dzE2XCIsXG4gICAgICB3MTZzZHRkaDogXCJ4bWxuczp3MTZzZHRkaFwiLFxuICAgICAgdzE2c2U6IFwieG1sbnM6dzE2c2VcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBEb2N1bWVudEJhY2tncm91bmRBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICBjb2xvcjogXCJ3OmNvbG9yXCIsXG4gICAgICB0aGVtZUNvbG9yOiBcInc6dGhlbWVDb2xvclwiLFxuICAgICAgdGhlbWVTaGFkZTogXCJ3OnRoZW1lU2hhZGVcIixcbiAgICAgIHRoZW1lVGludDogXCJ3OnRoZW1lVGludFwiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIERvY3VtZW50QmFja2dyb3VuZCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJ3OmJhY2tncm91bmRcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgRG9jdW1lbnRCYWNrZ3JvdW5kQXR0cmlidXRlcyh7XG4gICAgICAgIGNvbG9yOiBvcHRpb25zMi5jb2xvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogaGV4Q29sb3JWYWx1ZShvcHRpb25zMi5jb2xvciksXG4gICAgICAgIHRoZW1lQ29sb3I6IG9wdGlvbnMyLnRoZW1lQ29sb3IsXG4gICAgICAgIHRoZW1lU2hhZGU6IG9wdGlvbnMyLnRoZW1lU2hhZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHVDaGFySGV4TnVtYmVyKG9wdGlvbnMyLnRoZW1lU2hhZGUpLFxuICAgICAgICB0aGVtZVRpbnQ6IG9wdGlvbnMyLnRoZW1lVGludCA9PT0gdm9pZCAwID8gdm9pZCAwIDogdUNoYXJIZXhOdW1iZXIob3B0aW9uczIudGhlbWVUaW50KVxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jbGFzcyBEb2N1bWVudCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJ3OmRvY3VtZW50XCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJib2R5XCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IERvY3VtZW50QXR0cmlidXRlcyh7XG4gICAgICAgIHdwYzogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdDYW52YXNcIixcbiAgICAgICAgbWM6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL21hcmt1cC1jb21wYXRpYmlsaXR5LzIwMDZcIixcbiAgICAgICAgbzogXCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpvZmZpY2VcIixcbiAgICAgICAgcjogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzXCIsXG4gICAgICAgIG06IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvbWF0aFwiLFxuICAgICAgICB2OiBcInVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206dm1sXCIsXG4gICAgICAgIHdwMTQ6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nRHJhd2luZ1wiLFxuICAgICAgICB3cDogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvZHJhd2luZ21sLzIwMDYvd29yZHByb2Nlc3NpbmdEcmF3aW5nXCIsXG4gICAgICAgIHcxMDogXCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTp3b3JkXCIsXG4gICAgICAgIHc6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL3dvcmRwcm9jZXNzaW5nbWwvMjAwNi9tYWluXCIsXG4gICAgICAgIHcxNDogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZG1sXCIsXG4gICAgICAgIHcxNTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTIvd29yZG1sXCIsXG4gICAgICAgIHdwZzogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdHcm91cFwiLFxuICAgICAgICB3cGk6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nSW5rXCIsXG4gICAgICAgIHduZTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMDYvd29yZG1sXCIsXG4gICAgICAgIHdwczogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdTaGFwZVwiLFxuICAgICAgICBjeDogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9kcmF3aW5nLzIwMTQvY2hhcnRleFwiLFxuICAgICAgICBjeDE6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE1LzkvOC9jaGFydGV4XCIsXG4gICAgICAgIGN4MjogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9kcmF3aW5nLzIwMTUvMTAvMjEvY2hhcnRleFwiLFxuICAgICAgICBjeDM6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE2LzUvOS9jaGFydGV4XCIsXG4gICAgICAgIGN4NDogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9kcmF3aW5nLzIwMTYvNS8xMC9jaGFydGV4XCIsXG4gICAgICAgIGN4NTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9kcmF3aW5nLzIwMTYvNS8xMS9jaGFydGV4XCIsXG4gICAgICAgIGN4NjogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9kcmF3aW5nLzIwMTYvNS8xMi9jaGFydGV4XCIsXG4gICAgICAgIGN4NzogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9kcmF3aW5nLzIwMTYvNS8xMy9jaGFydGV4XCIsXG4gICAgICAgIGN4ODogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9kcmF3aW5nLzIwMTYvNS8xNC9jaGFydGV4XCIsXG4gICAgICAgIGFpbms6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE2L2lua1wiLFxuICAgICAgICBhbTNkOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2RyYXdpbmcvMjAxNy9tb2RlbDNkXCIsXG4gICAgICAgIHcxNmNleDogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTgvd29yZG1sL2NleFwiLFxuICAgICAgICB3MTZjaWQ6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDE2L3dvcmRtbC9jaWRcIixcbiAgICAgICAgdzE2OiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxOC93b3JkbWxcIixcbiAgICAgICAgdzE2c2R0ZGg6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDIwL3dvcmRtbC9zZHRkYXRhaGFzaFwiLFxuICAgICAgICB3MTZzZTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTUvd29yZG1sL3N5bWV4XCIsXG4gICAgICAgIElnbm9yYWJsZTogXCJ3MTQgdzE1IHdwMTRcIlxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMuYm9keSA9IG5ldyBCb2R5KCk7XG4gICAgaWYgKG9wdGlvbnMyLmJhY2tncm91bmQpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBEb2N1bWVudEJhY2tncm91bmQob3B0aW9uczIuYmFja2dyb3VuZCkpO1xuICAgIH1cbiAgICB0aGlzLnJvb3QucHVzaCh0aGlzLmJvZHkpO1xuICB9XG4gIGFkZChpdGVtKSB7XG4gICAgdGhpcy5ib2R5LnB1c2goaXRlbSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZ2V0IEJvZHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuYm9keTtcbiAgfVxufVxuY2xhc3MgUmVsYXRpb25zaGlwc0F0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIHhtbG5zOiBcInhtbG5zXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgUmVsYXRpb25zaGlwcyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwiUmVsYXRpb25zaGlwc1wiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBSZWxhdGlvbnNoaXBzQXR0cmlidXRlcyh7XG4gICAgICAgIHhtbG5zOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9wYWNrYWdlLzIwMDYvcmVsYXRpb25zaGlwc1wiXG4gICAgICB9KVxuICAgICk7XG4gIH1cbiAgY3JlYXRlUmVsYXRpb25zaGlwKGlkLCB0eXBlMiwgdGFyZ2V0LCB0YXJnZXRNb2RlKSB7XG4gICAgY29uc3QgcmVsYXRpb25zaGlwID0gbmV3IFJlbGF0aW9uc2hpcChgcklkJHtpZH1gLCB0eXBlMiwgdGFyZ2V0LCB0YXJnZXRNb2RlKTtcbiAgICB0aGlzLnJvb3QucHVzaChyZWxhdGlvbnNoaXApO1xuICAgIHJldHVybiByZWxhdGlvbnNoaXA7XG4gIH1cbiAgZ2V0IFJlbGF0aW9uc2hpcENvdW50KCkge1xuICAgIHJldHVybiB0aGlzLnJvb3QubGVuZ3RoIC0gMTtcbiAgfVxufVxuY2xhc3MgRG9jdW1lbnRXcmFwcGVyIHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiZG9jdW1lbnRcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInJlbGF0aW9uc2hpcHNcIik7XG4gICAgdGhpcy5kb2N1bWVudCA9IG5ldyBEb2N1bWVudChvcHRpb25zMik7XG4gICAgdGhpcy5yZWxhdGlvbnNoaXBzID0gbmV3IFJlbGF0aW9uc2hpcHMoKTtcbiAgfVxuICBnZXQgVmlldygpIHtcbiAgICByZXR1cm4gdGhpcy5kb2N1bWVudDtcbiAgfVxuICBnZXQgUmVsYXRpb25zaGlwcygpIHtcbiAgICByZXR1cm4gdGhpcy5yZWxhdGlvbnNoaXBzO1xuICB9XG59XG5jbGFzcyBXb3JkV3JhcEF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHsgdmFsOiBcInc6dmFsXCIgfSk7XG4gIH1cbn1cbmNsYXNzIFdvcmRXcmFwIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJ3OndvcmRXcmFwXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBXb3JkV3JhcEF0dHJpYnV0ZXMoeyB2YWw6IDAgfSkpO1xuICB9XG59XG5jb25zdCBEcm9wQ2FwVHlwZSA9IHtcbiAgTk9ORTogXCJub25lXCIsXG4gIERST1A6IFwiZHJvcFwiLFxuICBNQVJHSU46IFwibWFyZ2luXCJcbn07XG5jb25zdCBGcmFtZUFuY2hvclR5cGUgPSB7XG4gIE1BUkdJTjogXCJtYXJnaW5cIixcbiAgUEFHRTogXCJwYWdlXCIsXG4gIFRFWFQ6IFwidGV4dFwiXG59O1xuY29uc3QgRnJhbWVXcmFwID0ge1xuICBBUk9VTkQ6IFwiYXJvdW5kXCIsXG4gIEFVVE86IFwiYXV0b1wiLFxuICBOT05FOiBcIm5vbmVcIixcbiAgTk9UX0JFU0lERTogXCJub3RCZXNpZGVcIixcbiAgVEhST1VHSDogXCJ0aHJvdWdoXCIsXG4gIFRJR0hUOiBcInRpZ2h0XCJcbn07XG5jb25zdCBjcmVhdGVGcmFtZVByb3BlcnRpZXMgPSAob3B0aW9uczIpID0+IHtcbiAgdmFyIF9hLCBfYjtcbiAgcmV0dXJuIG5ldyBCdWlsZGVyRWxlbWVudCh7XG4gICAgbmFtZTogXCJ3OmZyYW1lUHJcIixcbiAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICBhbmNob3JMb2NrOiB7XG4gICAgICAgIGtleTogXCJ3OmFuY2hvckxvY2tcIixcbiAgICAgICAgdmFsdWU6IG9wdGlvbnMyLmFuY2hvckxvY2tcbiAgICAgIH0sXG4gICAgICBkcm9wQ2FwOiB7XG4gICAgICAgIGtleTogXCJ3OmRyb3BDYXBcIixcbiAgICAgICAgdmFsdWU6IG9wdGlvbnMyLmRyb3BDYXBcbiAgICAgIH0sXG4gICAgICB3aWR0aDoge1xuICAgICAgICBrZXk6IFwidzp3XCIsXG4gICAgICAgIHZhbHVlOiBvcHRpb25zMi53aWR0aFxuICAgICAgfSxcbiAgICAgIGhlaWdodDoge1xuICAgICAgICBrZXk6IFwidzpoXCIsXG4gICAgICAgIHZhbHVlOiBvcHRpb25zMi5oZWlnaHRcbiAgICAgIH0sXG4gICAgICB4OiB7XG4gICAgICAgIGtleTogXCJ3OnhcIixcbiAgICAgICAgdmFsdWU6IG9wdGlvbnMyLnBvc2l0aW9uID8gb3B0aW9uczIucG9zaXRpb24ueCA6IHZvaWQgMFxuICAgICAgfSxcbiAgICAgIHk6IHtcbiAgICAgICAga2V5OiBcInc6eVwiLFxuICAgICAgICB2YWx1ZTogb3B0aW9uczIucG9zaXRpb24gPyBvcHRpb25zMi5wb3NpdGlvbi55IDogdm9pZCAwXG4gICAgICB9LFxuICAgICAgYW5jaG9ySG9yaXpvbnRhbDoge1xuICAgICAgICBrZXk6IFwidzpoQW5jaG9yXCIsXG4gICAgICAgIHZhbHVlOiBvcHRpb25zMi5hbmNob3IuaG9yaXpvbnRhbFxuICAgICAgfSxcbiAgICAgIGFuY2hvclZlcnRpY2FsOiB7XG4gICAgICAgIGtleTogXCJ3OnZBbmNob3JcIixcbiAgICAgICAgdmFsdWU6IG9wdGlvbnMyLmFuY2hvci52ZXJ0aWNhbFxuICAgICAgfSxcbiAgICAgIHNwYWNlSG9yaXpvbnRhbDoge1xuICAgICAgICBrZXk6IFwidzpoU3BhY2VcIixcbiAgICAgICAgdmFsdWU6IChfYSA9IG9wdGlvbnMyLnNwYWNlKSA9PSBudWxsID8gdm9pZCAwIDogX2EuaG9yaXpvbnRhbFxuICAgICAgfSxcbiAgICAgIHNwYWNlVmVydGljYWw6IHtcbiAgICAgICAga2V5OiBcInc6dlNwYWNlXCIsXG4gICAgICAgIHZhbHVlOiAoX2IgPSBvcHRpb25zMi5zcGFjZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLnZlcnRpY2FsXG4gICAgICB9LFxuICAgICAgcnVsZToge1xuICAgICAgICBrZXk6IFwidzpoUnVsZVwiLFxuICAgICAgICB2YWx1ZTogb3B0aW9uczIucnVsZVxuICAgICAgfSxcbiAgICAgIGFsaWdubWVudFg6IHtcbiAgICAgICAga2V5OiBcInc6eEFsaWduXCIsXG4gICAgICAgIHZhbHVlOiBvcHRpb25zMi5hbGlnbm1lbnQgPyBvcHRpb25zMi5hbGlnbm1lbnQueCA6IHZvaWQgMFxuICAgICAgfSxcbiAgICAgIGFsaWdubWVudFk6IHtcbiAgICAgICAga2V5OiBcInc6eUFsaWduXCIsXG4gICAgICAgIHZhbHVlOiBvcHRpb25zMi5hbGlnbm1lbnQgPyBvcHRpb25zMi5hbGlnbm1lbnQueSA6IHZvaWQgMFxuICAgICAgfSxcbiAgICAgIGxpbmVzOiB7XG4gICAgICAgIGtleTogXCJ3OmxpbmVzXCIsXG4gICAgICAgIHZhbHVlOiBvcHRpb25zMi5saW5lc1xuICAgICAgfSxcbiAgICAgIHdyYXA6IHtcbiAgICAgICAga2V5OiBcInc6d3JhcFwiLFxuICAgICAgICB2YWx1ZTogb3B0aW9uczIud3JhcFxuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuY2xhc3MgUGFyYWdyYXBoUHJvcGVydGllcyBleHRlbmRzIElnbm9yZUlmRW1wdHlYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHZhciBfYSwgX2I7XG4gICAgc3VwZXIoXCJ3OnBQclwiKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuY3Rpb25hbC9wcmVmZXItcmVhZG9ubHktdHlwZVxuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJudW1iZXJpbmdSZWZlcmVuY2VzXCIsIFtdKTtcbiAgICBpZiAoIW9wdGlvbnMyKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmhlYWRpbmcpIHtcbiAgICAgIHRoaXMucHVzaChuZXcgU3R5bGUkMShvcHRpb25zMi5oZWFkaW5nKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5idWxsZXQpIHtcbiAgICAgIHRoaXMucHVzaChuZXcgU3R5bGUkMShcIkxpc3RQYXJhZ3JhcGhcIikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIubnVtYmVyaW5nKSB7XG4gICAgICBpZiAoIW9wdGlvbnMyLnN0eWxlICYmICFvcHRpb25zMi5oZWFkaW5nKSB7XG4gICAgICAgIGlmICghb3B0aW9uczIubnVtYmVyaW5nLmN1c3RvbSkge1xuICAgICAgICAgIHRoaXMucHVzaChuZXcgU3R5bGUkMShcIkxpc3RQYXJhZ3JhcGhcIikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5zdHlsZSkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBTdHlsZSQxKG9wdGlvbnMyLnN0eWxlKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5rZWVwTmV4dCAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6a2VlcE5leHRcIiwgb3B0aW9uczIua2VlcE5leHQpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmtlZXBMaW5lcyAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6a2VlcExpbmVzXCIsIG9wdGlvbnMyLmtlZXBMaW5lcykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIucGFnZUJyZWFrQmVmb3JlKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IFBhZ2VCcmVha0JlZm9yZSgpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmZyYW1lKSB7XG4gICAgICB0aGlzLnB1c2goY3JlYXRlRnJhbWVQcm9wZXJ0aWVzKG9wdGlvbnMyLmZyYW1lKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi53aWRvd0NvbnRyb2wgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OndpZG93Q29udHJvbFwiLCBvcHRpb25zMi53aWRvd0NvbnRyb2wpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmJ1bGxldCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBOdW1iZXJQcm9wZXJ0aWVzKDEsIG9wdGlvbnMyLmJ1bGxldC5sZXZlbCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIubnVtYmVyaW5nKSB7XG4gICAgICB0aGlzLm51bWJlcmluZ1JlZmVyZW5jZXMucHVzaCh7XG4gICAgICAgIHJlZmVyZW5jZTogb3B0aW9uczIubnVtYmVyaW5nLnJlZmVyZW5jZSxcbiAgICAgICAgaW5zdGFuY2U6IChfYSA9IG9wdGlvbnMyLm51bWJlcmluZy5pbnN0YW5jZSkgIT0gbnVsbCA/IF9hIDogMFxuICAgICAgfSk7XG4gICAgICB0aGlzLnB1c2gobmV3IE51bWJlclByb3BlcnRpZXMoYCR7b3B0aW9uczIubnVtYmVyaW5nLnJlZmVyZW5jZX0tJHsoX2IgPSBvcHRpb25zMi5udW1iZXJpbmcuaW5zdGFuY2UpICE9IG51bGwgPyBfYiA6IDB9YCwgb3B0aW9uczIubnVtYmVyaW5nLmxldmVsKSk7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zMi5udW1iZXJpbmcgPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IE51bWJlclByb3BlcnRpZXMoMCwgMCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuYm9yZGVyKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IEJvcmRlcihvcHRpb25zMi5ib3JkZXIpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnRoZW1hdGljQnJlYWspIHtcbiAgICAgIHRoaXMucHVzaChuZXcgVGhlbWF0aWNCcmVhaygpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnNoYWRpbmcpIHtcbiAgICAgIHRoaXMucHVzaChuZXcgU2hhZGluZyhvcHRpb25zMi5zaGFkaW5nKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi53b3JkV3JhcCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBXb3JkV3JhcCgpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLm92ZXJmbG93UHVuY3R1YXRpb24pIHtcbiAgICAgIHRoaXMucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpvdmVyZmxvd1B1bmN0XCIsIG9wdGlvbnMyLm92ZXJmbG93UHVuY3R1YXRpb24pKTtcbiAgICB9XG4gICAgY29uc3QgdGFiRGVmaW5pdGlvbnMgPSBbXG4gICAgICAuLi5vcHRpb25zMi5yaWdodFRhYlN0b3AgIT09IHZvaWQgMCA/IFt7IHR5cGU6IFRhYlN0b3BUeXBlLlJJR0hULCBwb3NpdGlvbjogb3B0aW9uczIucmlnaHRUYWJTdG9wIH1dIDogW10sXG4gICAgICAuLi5vcHRpb25zMi50YWJTdG9wcyA/IG9wdGlvbnMyLnRhYlN0b3BzIDogW10sXG4gICAgICAuLi5vcHRpb25zMi5sZWZ0VGFiU3RvcCAhPT0gdm9pZCAwID8gW3sgdHlwZTogVGFiU3RvcFR5cGUuTEVGVCwgcG9zaXRpb246IG9wdGlvbnMyLmxlZnRUYWJTdG9wIH1dIDogW11cbiAgICBdO1xuICAgIGlmICh0YWJEZWZpbml0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IFRhYlN0b3AodGFiRGVmaW5pdGlvbnMpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmJpZGlyZWN0aW9uYWwgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmJpZGlcIiwgb3B0aW9uczIuYmlkaXJlY3Rpb25hbCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuc3BhY2luZykge1xuICAgICAgdGhpcy5wdXNoKG5ldyBTcGFjaW5nKG9wdGlvbnMyLnNwYWNpbmcpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmluZGVudCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBJbmRlbnQob3B0aW9uczIuaW5kZW50KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5jb250ZXh0dWFsU3BhY2luZyAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6Y29udGV4dHVhbFNwYWNpbmdcIiwgb3B0aW9uczIuY29udGV4dHVhbFNwYWNpbmcpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmFsaWdubWVudCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBBbGlnbm1lbnQob3B0aW9uczIuYWxpZ25tZW50KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5vdXRsaW5lTGV2ZWwgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBPdXRsaW5lTGV2ZWwob3B0aW9uczIub3V0bGluZUxldmVsKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5zdXBwcmVzc0xpbmVOdW1iZXJzICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpzdXBwcmVzc0xpbmVOdW1iZXJzXCIsIG9wdGlvbnMyLnN1cHByZXNzTGluZU51bWJlcnMpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmF1dG9TcGFjZUVhc3RBc2lhblRleHQgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmF1dG9TcGFjZUROXCIsIG9wdGlvbnMyLmF1dG9TcGFjZUVhc3RBc2lhblRleHQpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnJ1bikge1xuICAgICAgdGhpcy5wdXNoKG5ldyBSdW5Qcm9wZXJ0aWVzKG9wdGlvbnMyLnJ1bikpO1xuICAgIH1cbiAgfVxuICBwdXNoKGl0ZW0pIHtcbiAgICB0aGlzLnJvb3QucHVzaChpdGVtKTtcbiAgfVxuICBwcmVwRm9yWG1sKGNvbnRleHQpIHtcbiAgICBpZiAoY29udGV4dC52aWV3V3JhcHBlciBpbnN0YW5jZW9mIERvY3VtZW50V3JhcHBlcikge1xuICAgICAgZm9yIChjb25zdCByZWZlcmVuY2Ugb2YgdGhpcy5udW1iZXJpbmdSZWZlcmVuY2VzKSB7XG4gICAgICAgIGNvbnRleHQuZmlsZS5OdW1iZXJpbmcuY3JlYXRlQ29uY3JldGVOdW1iZXJpbmdJbnN0YW5jZShyZWZlcmVuY2UucmVmZXJlbmNlLCByZWZlcmVuY2UuaW5zdGFuY2UpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3VwZXIucHJlcEZvclhtbChjb250ZXh0KTtcbiAgfVxufVxuY2xhc3MgUGFyYWdyYXBoIGV4dGVuZHMgRmlsZUNoaWxkIHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcInc6cFwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwicHJvcGVydGllc1wiKTtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMyID09PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aGlzLnByb3BlcnRpZXMgPSBuZXcgUGFyYWdyYXBoUHJvcGVydGllcyh7fSk7XG4gICAgICB0aGlzLnJvb3QucHVzaCh0aGlzLnByb3BlcnRpZXMpO1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRleHRSdW4ob3B0aW9uczIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB0aGlzLnByb3BlcnRpZXMgPSBuZXcgUGFyYWdyYXBoUHJvcGVydGllcyhvcHRpb25zMik7XG4gICAgdGhpcy5yb290LnB1c2godGhpcy5wcm9wZXJ0aWVzKTtcbiAgICBpZiAob3B0aW9uczIudGV4dCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRleHRSdW4ob3B0aW9uczIudGV4dCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuY2hpbGRyZW4pIHtcbiAgICAgIGZvciAoY29uc3QgY2hpbGQgb2Ygb3B0aW9uczIuY2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgQm9va21hcmspIHtcbiAgICAgICAgICB0aGlzLnJvb3QucHVzaChjaGlsZC5zdGFydCk7XG4gICAgICAgICAgZm9yIChjb25zdCB0ZXh0UnVuIG9mIGNoaWxkLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaCh0ZXh0UnVuKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5yb290LnB1c2goY2hpbGQuZW5kKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJvb3QucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHByZXBGb3JYbWwoY29udGV4dCkge1xuICAgIGZvciAoY29uc3QgZWxlbWVudDIgb2YgdGhpcy5yb290KSB7XG4gICAgICBpZiAoZWxlbWVudDIgaW5zdGFuY2VvZiBFeHRlcm5hbEh5cGVybGluaykge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMucm9vdC5pbmRleE9mKGVsZW1lbnQyKTtcbiAgICAgICAgY29uc3QgY29uY3JldGVIeXBlcmxpbmsgPSBuZXcgQ29uY3JldGVIeXBlcmxpbmsoZWxlbWVudDIub3B0aW9ucy5jaGlsZHJlbiwgdW5pcXVlSWQoKSk7XG4gICAgICAgIGNvbnRleHQudmlld1dyYXBwZXIuUmVsYXRpb25zaGlwcy5jcmVhdGVSZWxhdGlvbnNoaXAoXG4gICAgICAgICAgY29uY3JldGVIeXBlcmxpbmsubGlua0lkLFxuICAgICAgICAgIFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9oeXBlcmxpbmtcIixcbiAgICAgICAgICBlbGVtZW50Mi5vcHRpb25zLmxpbmssXG4gICAgICAgICAgVGFyZ2V0TW9kZVR5cGUuRVhURVJOQUxcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5yb290W2luZGV4XSA9IGNvbmNyZXRlSHlwZXJsaW5rO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3VwZXIucHJlcEZvclhtbChjb250ZXh0KTtcbiAgfVxuICBhZGRSdW5Ub0Zyb250KHJ1bikge1xuICAgIHRoaXMucm9vdC5zcGxpY2UoMSwgMCwgcnVuKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxubGV0IE1hdGgkMSA9IGNsYXNzIE1hdGgyIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcIm06b01hdGhcIik7XG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiBvcHRpb25zMi5jaGlsZHJlbikge1xuICAgICAgdGhpcy5yb290LnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxufTtcbmNsYXNzIE1hdGhUZXh0IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodGV4dCkge1xuICAgIHN1cGVyKFwibTp0XCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKHRleHQpO1xuICB9XG59XG5jbGFzcyBNYXRoUnVuIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodGV4dCkge1xuICAgIHN1cGVyKFwibTpyXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoVGV4dCh0ZXh0KSk7XG4gIH1cbn1cbmNsYXNzIE1hdGhEZW5vbWluYXRvciBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGNoaWxkcmVuKSB7XG4gICAgc3VwZXIoXCJtOmRlblwiKTtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChjaGlsZCk7XG4gICAgfVxuICB9XG59XG5jbGFzcyBNYXRoTnVtZXJhdG9yIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoY2hpbGRyZW4pIHtcbiAgICBzdXBlcihcIm06bnVtXCIpO1xuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY2hpbGRyZW4pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIE1hdGhGcmFjdGlvbiBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJtOmZcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhOdW1lcmF0b3Iob3B0aW9uczIubnVtZXJhdG9yKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhEZW5vbWluYXRvcihvcHRpb25zMi5kZW5vbWluYXRvcikpO1xuICB9XG59XG5jbGFzcyBNYXRoQWNjZW50Q2hhcmFjdGVyQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwgeyBhY2NlbnQ6IFwibTp2YWxcIiB9KTtcbiAgfVxufVxuY2xhc3MgTWF0aEFjY2VudENoYXJhY3RlciBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGFjY2VudCkge1xuICAgIHN1cGVyKFwibTpjaHJcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhBY2NlbnRDaGFyYWN0ZXJBdHRyaWJ1dGVzKHsgYWNjZW50IH0pKTtcbiAgfVxufVxuY2xhc3MgTWF0aEJhc2UgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihjaGlsZHJlbikge1xuICAgIHN1cGVyKFwibTplXCIpO1xuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY2hpbGRyZW4pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIE1hdGhMaW1pdExvY2F0aW9uQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwgeyB2YWx1ZTogXCJtOnZhbFwiIH0pO1xuICB9XG59XG5jbGFzcyBNYXRoTGltaXRMb2NhdGlvbiBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgc3VwZXIoXCJtOmxpbUxvY1wiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgTWF0aExpbWl0TG9jYXRpb25BdHRyaWJ1dGVzKHsgdmFsdWU6IHZhbHVlIHx8IFwidW5kT3ZyXCIgfSkpO1xuICB9XG59XG5jbGFzcyBNYXRoU3ViU2NyaXB0SGlkZUF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHsgaGlkZTogXCJtOnZhbFwiIH0pO1xuICB9XG59XG5jbGFzcyBNYXRoU3ViU2NyaXB0SGlkZSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwibTpzdWJIaWRlXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoU3ViU2NyaXB0SGlkZUF0dHJpYnV0ZXMoeyBoaWRlOiAxIH0pKTtcbiAgfVxufVxuY2xhc3MgTWF0aFN1cGVyU2NyaXB0SGlkZUF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHsgaGlkZTogXCJtOnZhbFwiIH0pO1xuICB9XG59XG5jbGFzcyBNYXRoU3VwZXJTY3JpcHRIaWRlIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJtOnN1cEhpZGVcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhTdXBlclNjcmlwdEhpZGVBdHRyaWJ1dGVzKHsgaGlkZTogMSB9KSk7XG4gIH1cbn1cbmNsYXNzIE1hdGhOQXJ5UHJvcGVydGllcyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGFjY2VudCwgaGFzU3VwZXJTY3JpcHQsIGhhc1N1YlNjcmlwdCwgbGltaXRMb2NhdGlvblZhbCkge1xuICAgIHN1cGVyKFwibTpuYXJ5UHJcIik7XG4gICAgaWYgKCEhYWNjZW50KSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgTWF0aEFjY2VudENoYXJhY3RlcihhY2NlbnQpKTtcbiAgICB9XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhMaW1pdExvY2F0aW9uKGxpbWl0TG9jYXRpb25WYWwpKTtcbiAgICBpZiAoIWhhc1N1cGVyU2NyaXB0KSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgTWF0aFN1cGVyU2NyaXB0SGlkZSgpKTtcbiAgICB9XG4gICAgaWYgKCFoYXNTdWJTY3JpcHQpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoU3ViU2NyaXB0SGlkZSgpKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIE1hdGhTdWJTY3JpcHRFbGVtZW50IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoY2hpbGRyZW4pIHtcbiAgICBzdXBlcihcIm06c3ViXCIpO1xuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY2hpbGRyZW4pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIE1hdGhTdXBlclNjcmlwdEVsZW1lbnQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihjaGlsZHJlbikge1xuICAgIHN1cGVyKFwibTpzdXBcIik7XG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiBjaGlsZHJlbikge1xuICAgICAgdGhpcy5yb290LnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxufVxuY2xhc3MgTWF0aFN1bSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJtOm5hcnlcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhOQXJ5UHJvcGVydGllcyhcIuKIkVwiLCAhIW9wdGlvbnMyLnN1cGVyU2NyaXB0LCAhIW9wdGlvbnMyLnN1YlNjcmlwdCkpO1xuICAgIGlmICghIW9wdGlvbnMyLnN1YlNjcmlwdCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhTdWJTY3JpcHRFbGVtZW50KG9wdGlvbnMyLnN1YlNjcmlwdCkpO1xuICAgIH1cbiAgICBpZiAoISFvcHRpb25zMi5zdXBlclNjcmlwdCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhTdXBlclNjcmlwdEVsZW1lbnQob3B0aW9uczIuc3VwZXJTY3JpcHQpKTtcbiAgICB9XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhCYXNlKG9wdGlvbnMyLmNoaWxkcmVuKSk7XG4gIH1cbn1cbmNsYXNzIE1hdGhJbnRlZ3JhbCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJtOm5hcnlcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhOQXJ5UHJvcGVydGllcyhcIlwiLCAhIW9wdGlvbnMyLnN1cGVyU2NyaXB0LCAhIW9wdGlvbnMyLnN1YlNjcmlwdCwgXCJzdWJTdXBcIikpO1xuICAgIGlmICghIW9wdGlvbnMyLnN1YlNjcmlwdCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhTdWJTY3JpcHRFbGVtZW50KG9wdGlvbnMyLnN1YlNjcmlwdCkpO1xuICAgIH1cbiAgICBpZiAoISFvcHRpb25zMi5zdXBlclNjcmlwdCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhTdXBlclNjcmlwdEVsZW1lbnQob3B0aW9uczIuc3VwZXJTY3JpcHQpKTtcbiAgICB9XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhCYXNlKG9wdGlvbnMyLmNoaWxkcmVuKSk7XG4gIH1cbn1cbmNsYXNzIE1hdGhMaW1pdCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGNoaWxkcmVuKSB7XG4gICAgc3VwZXIoXCJtOmxpbVwiKTtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChjaGlsZCk7XG4gICAgfVxuICB9XG59XG5jbGFzcyBNYXRoTGltaXRVcHBlciBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJtOmxpbVVwcFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgTWF0aEJhc2Uob3B0aW9uczIuY2hpbGRyZW4pKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgTWF0aExpbWl0KG9wdGlvbnMyLmxpbWl0KSk7XG4gIH1cbn1cbmNsYXNzIE1hdGhMaW1pdExvd2VyIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcIm06bGltTG93XCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoQmFzZShvcHRpb25zMi5jaGlsZHJlbikpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoTGltaXQob3B0aW9uczIubGltaXQpKTtcbiAgfVxufVxuY2xhc3MgTWF0aFN1cGVyU2NyaXB0UHJvcGVydGllcyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwibTpzU3VwUHJcIik7XG4gIH1cbn1cbmNsYXNzIE1hdGhTdXBlclNjcmlwdCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJtOnNTdXBcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhTdXBlclNjcmlwdFByb3BlcnRpZXMoKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhCYXNlKG9wdGlvbnMyLmNoaWxkcmVuKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhTdXBlclNjcmlwdEVsZW1lbnQob3B0aW9uczIuc3VwZXJTY3JpcHQpKTtcbiAgfVxufVxuY2xhc3MgTWF0aFN1YlNjcmlwdFByb3BlcnRpZXMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIm06c1N1YlByXCIpO1xuICB9XG59XG5jbGFzcyBNYXRoU3ViU2NyaXB0IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcIm06c1N1YlwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgTWF0aFN1YlNjcmlwdFByb3BlcnRpZXMoKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhCYXNlKG9wdGlvbnMyLmNoaWxkcmVuKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhTdWJTY3JpcHRFbGVtZW50KG9wdGlvbnMyLnN1YlNjcmlwdCkpO1xuICB9XG59XG5jbGFzcyBNYXRoU3ViU3VwZXJTY3JpcHRQcm9wZXJ0aWVzIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJtOnNTdWJTdXBQclwiKTtcbiAgfVxufVxuY2xhc3MgTWF0aFN1YlN1cGVyU2NyaXB0IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcIm06c1N1YlN1cFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgTWF0aFN1YlN1cGVyU2NyaXB0UHJvcGVydGllcygpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgTWF0aEJhc2Uob3B0aW9uczIuY2hpbGRyZW4pKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgTWF0aFN1YlNjcmlwdEVsZW1lbnQob3B0aW9uczIuc3ViU2NyaXB0KSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhTdXBlclNjcmlwdEVsZW1lbnQob3B0aW9uczIuc3VwZXJTY3JpcHQpKTtcbiAgfVxufVxuY2xhc3MgTWF0aFByZVN1YlN1cGVyU2NyaXB0UHJvcGVydGllcyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwibTpzUHJlUHJcIik7XG4gIH1cbn1cbmNsYXNzIE1hdGhQcmVTdWJTdXBlclNjcmlwdCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJtOnNQcmVcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhQcmVTdWJTdXBlclNjcmlwdFByb3BlcnRpZXMoKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhCYXNlKG9wdGlvbnMyLmNoaWxkcmVuKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhTdWJTY3JpcHRFbGVtZW50KG9wdGlvbnMyLnN1YlNjcmlwdCkpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoU3VwZXJTY3JpcHRFbGVtZW50KG9wdGlvbnMyLnN1cGVyU2NyaXB0KSk7XG4gIH1cbn1cbmNvbnN0IFdPUktBUk9VTkQ0ID0gXCJcIjtcbmNsYXNzIE1hdGhEZWdyZWUgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihjaGlsZHJlbikge1xuICAgIHN1cGVyKFwibTpkZWdcIik7XG4gICAgaWYgKCEhY2hpbGRyZW4pIHtcbiAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY2hpbGRyZW4pIHtcbiAgICAgICAgdGhpcy5yb290LnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuY2xhc3MgTWF0aERlZ3JlZUhpZGVBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7IGhpZGU6IFwibTp2YWxcIiB9KTtcbiAgfVxufVxuY2xhc3MgTWF0aERlZ3JlZUhpZGUgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIm06ZGVnSGlkZVwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgTWF0aERlZ3JlZUhpZGVBdHRyaWJ1dGVzKHsgaGlkZTogMSB9KSk7XG4gIH1cbn1cbmNsYXNzIE1hdGhSYWRpY2FsUHJvcGVydGllcyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGhhc0RlZ3JlZSkge1xuICAgIHN1cGVyKFwibTpyYWRQclwiKTtcbiAgICBpZiAoIWhhc0RlZ3JlZSkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhEZWdyZWVIaWRlKCkpO1xuICAgIH1cbiAgfVxufVxuY2xhc3MgTWF0aFJhZGljYWwgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwibTpyYWRcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhSYWRpY2FsUHJvcGVydGllcyghIW9wdGlvbnMyLmRlZ3JlZSkpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoRGVncmVlKG9wdGlvbnMyLmRlZ3JlZSkpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoQmFzZShvcHRpb25zMi5jaGlsZHJlbikpO1xuICB9XG59XG5jbGFzcyBNYXRoRnVuY3Rpb25OYW1lIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoY2hpbGRyZW4pIHtcbiAgICBzdXBlcihcIm06Zk5hbWVcIik7XG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiBjaGlsZHJlbikge1xuICAgICAgdGhpcy5yb290LnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxufVxuY2xhc3MgTWF0aEZ1bmN0aW9uUHJvcGVydGllcyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwibTpmdW5jUHJcIik7XG4gIH1cbn1cbmNsYXNzIE1hdGhGdW5jdGlvbiBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJtOmZ1bmNcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhGdW5jdGlvblByb3BlcnRpZXMoKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhGdW5jdGlvbk5hbWUob3B0aW9uczIubmFtZSkpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoQmFzZShvcHRpb25zMi5jaGlsZHJlbikpO1xuICB9XG59XG5jbGFzcyBNYXRoQmVnaW5uaW5nQ2hhcmFjdGVyQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwgeyBjaGFyYWN0ZXI6IFwibTp2YWxcIiB9KTtcbiAgfVxufVxuY2xhc3MgTWF0aEJlZ2lubmluZ0NoYXJhY3RlciBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGNoYXJhY3Rlcikge1xuICAgIHN1cGVyKFwibTpiZWdDaHJcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhCZWdpbm5pbmdDaGFyYWN0ZXJBdHRyaWJ1dGVzKHsgY2hhcmFjdGVyIH0pKTtcbiAgfVxufVxuY2xhc3MgTWF0aEVuZGluZ0NoYXJhY3RlckF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHsgY2hhcmFjdGVyOiBcIm06dmFsXCIgfSk7XG4gIH1cbn1cbmNsYXNzIE1hdGhFbmRpbmdDaGFyYWN0ZXIgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihjaGFyYWN0ZXIpIHtcbiAgICBzdXBlcihcIm06ZW5kQ2hyXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoRW5kaW5nQ2hhcmFjdGVyQXR0cmlidXRlcyh7IGNoYXJhY3RlciB9KSk7XG4gIH1cbn1cbmNsYXNzIE1hdGhCcmFja2V0UHJvcGVydGllcyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJtOmRQclwiKTtcbiAgICBpZiAoISFvcHRpb25zMikge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhCZWdpbm5pbmdDaGFyYWN0ZXIob3B0aW9uczIuYmVnaW5uaW5nQ2hhcmFjdGVyKSk7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgTWF0aEVuZGluZ0NoYXJhY3RlcihvcHRpb25zMi5lbmRpbmdDaGFyYWN0ZXIpKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIE1hdGhSb3VuZEJyYWNrZXRzIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcIm06ZFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgTWF0aEJyYWNrZXRQcm9wZXJ0aWVzKCkpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoQmFzZShvcHRpb25zMi5jaGlsZHJlbikpO1xuICB9XG59XG5jbGFzcyBNYXRoU3F1YXJlQnJhY2tldHMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwibTpkXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IE1hdGhCcmFja2V0UHJvcGVydGllcyh7XG4gICAgICAgIGJlZ2lubmluZ0NoYXJhY3RlcjogXCJbXCIsXG4gICAgICAgIGVuZGluZ0NoYXJhY3RlcjogXCJdXCJcbiAgICAgIH0pXG4gICAgKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgTWF0aEJhc2Uob3B0aW9uczIuY2hpbGRyZW4pKTtcbiAgfVxufVxuY2xhc3MgTWF0aEN1cmx5QnJhY2tldHMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwibTpkXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IE1hdGhCcmFja2V0UHJvcGVydGllcyh7XG4gICAgICAgIGJlZ2lubmluZ0NoYXJhY3RlcjogXCJ7XCIsXG4gICAgICAgIGVuZGluZ0NoYXJhY3RlcjogXCJ9XCJcbiAgICAgIH0pXG4gICAgKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgTWF0aEJhc2Uob3B0aW9uczIuY2hpbGRyZW4pKTtcbiAgfVxufVxuY2xhc3MgTWF0aEFuZ2xlZEJyYWNrZXRzIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcIm06ZFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBNYXRoQnJhY2tldFByb3BlcnRpZXMoe1xuICAgICAgICBiZWdpbm5pbmdDaGFyYWN0ZXI6IFwi4oypXCIsXG4gICAgICAgIGVuZGluZ0NoYXJhY3RlcjogXCLijKpcIlxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoQmFzZShvcHRpb25zMi5jaGlsZHJlbikpO1xuICB9XG59XG5jbGFzcyBUYWJsZUdyaWQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih3aWR0aHMpIHtcbiAgICBzdXBlcihcInc6dGJsR3JpZFwiKTtcbiAgICBmb3IgKGNvbnN0IHdpZHRoIG9mIHdpZHRocykge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IEdyaWRDb2wod2lkdGgpKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIEdyaWRDb2wgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih3aWR0aCkge1xuICAgIHN1cGVyKFwidzpncmlkQ29sXCIpO1xuICAgIGlmICh3aWR0aCAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgICAgbmV3IE5leHRBdHRyaWJ1dGVDb21wb25lbnQoe1xuICAgICAgICAgIHdpZHRoOiB7IGtleTogXCJ3OndcIiwgdmFsdWU6IHR3aXBzTWVhc3VyZVZhbHVlKHdpZHRoKSB9XG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuY29uc3QgVGFibGVDZWxsTWFyZ2luRWxlbWVudFR5cGUgPSB7XG4gIFRBQkxFOiBcInc6dGJsQ2VsbE1hclwiLFxuICBUQUJMRV9DRUxMOiBcInc6dGNNYXJcIlxufTtcbmNsYXNzIFRhYmxlQ2VsbE1hcmdpbiBleHRlbmRzIElnbm9yZUlmRW1wdHlYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih0eXBlMiwgeyBtYXJnaW5Vbml0VHlwZSA9IFdpZHRoVHlwZS5EWEEsIHRvcCwgbGVmdCwgYm90dG9tLCByaWdodCB9KSB7XG4gICAgc3VwZXIodHlwZTIpO1xuICAgIGlmICh0b3AgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRhYmxlV2lkdGhFbGVtZW50KFwidzp0b3BcIiwgeyB0eXBlOiBtYXJnaW5Vbml0VHlwZSwgc2l6ZTogdG9wIH0pKTtcbiAgICB9XG4gICAgaWYgKGxlZnQgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRhYmxlV2lkdGhFbGVtZW50KFwidzpsZWZ0XCIsIHsgdHlwZTogbWFyZ2luVW5pdFR5cGUsIHNpemU6IGxlZnQgfSkpO1xuICAgIH1cbiAgICBpZiAoYm90dG9tICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUYWJsZVdpZHRoRWxlbWVudChcInc6Ym90dG9tXCIsIHsgdHlwZTogbWFyZ2luVW5pdFR5cGUsIHNpemU6IGJvdHRvbSB9KSk7XG4gICAgfVxuICAgIGlmIChyaWdodCAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGFibGVXaWR0aEVsZW1lbnQoXCJ3OnJpZ2h0XCIsIHsgdHlwZTogbWFyZ2luVW5pdFR5cGUsIHNpemU6IHJpZ2h0IH0pKTtcbiAgICB9XG4gIH1cbn1cbmNvbnN0IFdpZHRoVHlwZSA9IHtcbiAgLyoqIEF1dG8uICovXG4gIEFVVE86IFwiYXV0b1wiLFxuICAvKiogVmFsdWUgaXMgaW4gdHdlbnRpZXRocyBvZiBhIHBvaW50ICovXG4gIERYQTogXCJkeGFcIixcbiAgLyoqIE5vIChlbXB0eSkgdmFsdWUuICovXG4gIE5JTDogXCJuaWxcIixcbiAgLyoqIFZhbHVlIGlzIGluIHBlcmNlbnRhZ2UuICovXG4gIFBFUkNFTlRBR0U6IFwicGN0XCJcbn07XG5jbGFzcyBUYWJsZVdpZHRoRWxlbWVudCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIHsgdHlwZTogdHlwZTIgPSBXaWR0aFR5cGUuQVVUTywgc2l6ZSB9KSB7XG4gICAgc3VwZXIobmFtZSk7XG4gICAgbGV0IHRhYmxlV2lkdGhWYWx1ZSA9IHNpemU7XG4gICAgaWYgKHR5cGUyID09PSBXaWR0aFR5cGUuUEVSQ0VOVEFHRSAmJiB0eXBlb2Ygc2l6ZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgdGFibGVXaWR0aFZhbHVlID0gYCR7c2l6ZX0lYDtcbiAgICB9XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgTmV4dEF0dHJpYnV0ZUNvbXBvbmVudCh7XG4gICAgICAgIHR5cGU6IHsga2V5OiBcInc6dHlwZVwiLCB2YWx1ZTogdHlwZTIgfSxcbiAgICAgICAgc2l6ZTogeyBrZXk6IFwidzp3XCIsIHZhbHVlOiBtZWFzdXJlbWVudE9yUGVyY2VudFZhbHVlKHRhYmxlV2lkdGhWYWx1ZSkgfVxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jbGFzcyBUYWJsZUNlbGxCb3JkZXJzIGV4dGVuZHMgSWdub3JlSWZFbXB0eVhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJ3OnRjQm9yZGVyc1wiKTtcbiAgICBpZiAob3B0aW9uczIudG9wKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgQm9yZGVyRWxlbWVudChcInc6dG9wXCIsIG9wdGlvbnMyLnRvcCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuc3RhcnQpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCb3JkZXJFbGVtZW50KFwidzpzdGFydFwiLCBvcHRpb25zMi5zdGFydCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIubGVmdCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IEJvcmRlckVsZW1lbnQoXCJ3OmxlZnRcIiwgb3B0aW9uczIubGVmdCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuYm90dG9tKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgQm9yZGVyRWxlbWVudChcInc6Ym90dG9tXCIsIG9wdGlvbnMyLmJvdHRvbSkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuZW5kKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgQm9yZGVyRWxlbWVudChcInc6ZW5kXCIsIG9wdGlvbnMyLmVuZCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIucmlnaHQpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCb3JkZXJFbGVtZW50KFwidzpyaWdodFwiLCBvcHRpb25zMi5yaWdodCkpO1xuICAgIH1cbiAgfVxufVxuY2xhc3MgR3JpZFNwYW5BdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7IHZhbDogXCJ3OnZhbFwiIH0pO1xuICB9XG59XG5jbGFzcyBHcmlkU3BhbiBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgc3VwZXIoXCJ3OmdyaWRTcGFuXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IEdyaWRTcGFuQXR0cmlidXRlcyh7XG4gICAgICAgIHZhbDogZGVjaW1hbE51bWJlcih2YWx1ZSlcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY29uc3QgVmVydGljYWxNZXJnZVR5cGUgPSB7XG4gIC8qKlxuICAgKiBDZWxsIHRoYXQgaXMgbWVyZ2VkIHdpdGggdXBwZXIgb25lLlxuICAgKi9cbiAgQ09OVElOVUU6IFwiY29udGludWVcIixcbiAgLyoqXG4gICAqIENlbGwgdGhhdCBpcyBzdGFydGluZyB0aGUgdmVydGljYWwgbWVyZ2UuXG4gICAqL1xuICBSRVNUQVJUOiBcInJlc3RhcnRcIlxufTtcbmNsYXNzIFZlcnRpY2FsTWVyZ2VBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7IHZhbDogXCJ3OnZhbFwiIH0pO1xuICB9XG59XG5jbGFzcyBWZXJ0aWNhbE1lcmdlIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICBzdXBlcihcInc6dk1lcmdlXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IFZlcnRpY2FsTWVyZ2VBdHRyaWJ1dGVzKHtcbiAgICAgICAgdmFsOiB2YWx1ZVxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jb25zdCBUZXh0RGlyZWN0aW9uID0ge1xuICBCT1RUT01fVE9fVE9QX0xFRlRfVE9fUklHSFQ6IFwiYnRMclwiLFxuICBMRUZUX1RPX1JJR0hUX1RPUF9UT19CT1RUT006IFwibHJUYlwiLFxuICBUT1BfVE9fQk9UVE9NX1JJR0hUX1RPX0xFRlQ6IFwidGJSbFwiXG59O1xuY2xhc3MgVERpcmVjdGlvbkF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHsgdmFsOiBcInc6dmFsXCIgfSk7XG4gIH1cbn1cbmNsYXNzIFREaXJlY3Rpb24gZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgIHN1cGVyKFwidzp0ZXh0RGlyZWN0aW9uXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IFREaXJlY3Rpb25BdHRyaWJ1dGVzKHtcbiAgICAgICAgdmFsOiB2YWx1ZVxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jbGFzcyBUYWJsZUNlbGxQcm9wZXJ0aWVzIGV4dGVuZHMgSWdub3JlSWZFbXB0eVhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJ3OnRjUHJcIik7XG4gICAgaWYgKG9wdGlvbnMyLndpZHRoKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGFibGVXaWR0aEVsZW1lbnQoXCJ3OnRjV1wiLCBvcHRpb25zMi53aWR0aCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuY29sdW1uU3Bhbikge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IEdyaWRTcGFuKG9wdGlvbnMyLmNvbHVtblNwYW4pKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnZlcnRpY2FsTWVyZ2UpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBWZXJ0aWNhbE1lcmdlKG9wdGlvbnMyLnZlcnRpY2FsTWVyZ2UpKTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMyLnJvd1NwYW4gJiYgb3B0aW9uczIucm93U3BhbiA+IDEpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBWZXJ0aWNhbE1lcmdlKFZlcnRpY2FsTWVyZ2VUeXBlLlJFU1RBUlQpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmJvcmRlcnMpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUYWJsZUNlbGxCb3JkZXJzKG9wdGlvbnMyLmJvcmRlcnMpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnNoYWRpbmcpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTaGFkaW5nKG9wdGlvbnMyLnNoYWRpbmcpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLm1hcmdpbnMpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUYWJsZUNlbGxNYXJnaW4oVGFibGVDZWxsTWFyZ2luRWxlbWVudFR5cGUuVEFCTEVfQ0VMTCwgb3B0aW9uczIubWFyZ2lucykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIudGV4dERpcmVjdGlvbikge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFREaXJlY3Rpb24ob3B0aW9uczIudGV4dERpcmVjdGlvbikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIudmVydGljYWxBbGlnbikge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFZlcnRpY2FsQWxpZ25FbGVtZW50KG9wdGlvbnMyLnZlcnRpY2FsQWxpZ24pKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIFRhYmxlQ2VsbCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJ3OnRjXCIpO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMyO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUYWJsZUNlbGxQcm9wZXJ0aWVzKG9wdGlvbnMyKSk7XG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiBvcHRpb25zMi5jaGlsZHJlbikge1xuICAgICAgdGhpcy5yb290LnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxuICBwcmVwRm9yWG1sKGNvbnRleHQpIHtcbiAgICBpZiAoISh0aGlzLnJvb3RbdGhpcy5yb290Lmxlbmd0aCAtIDFdIGluc3RhbmNlb2YgUGFyYWdyYXBoKSkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFBhcmFncmFwaCh7fSkpO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIucHJlcEZvclhtbChjb250ZXh0KTtcbiAgfVxufVxuY29uc3QgTk9ORV9CT1JERVIgPSB7XG4gIHN0eWxlOiBCb3JkZXJTdHlsZS5OT05FLFxuICBzaXplOiAwLFxuICBjb2xvcjogXCJhdXRvXCJcbn07XG5jb25zdCBERUZBVUxUX0JPUkRFUiA9IHtcbiAgc3R5bGU6IEJvcmRlclN0eWxlLlNJTkdMRSxcbiAgc2l6ZTogNCxcbiAgY29sb3I6IFwiYXV0b1wiXG59O1xuY2xhc3MgVGFibGVCb3JkZXJzIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcInc6dGJsQm9yZGVyc1wiKTtcbiAgICBpZiAob3B0aW9uczIudG9wKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgQm9yZGVyRWxlbWVudChcInc6dG9wXCIsIG9wdGlvbnMyLnRvcCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgQm9yZGVyRWxlbWVudChcInc6dG9wXCIsIERFRkFVTFRfQk9SREVSKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5sZWZ0KSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgQm9yZGVyRWxlbWVudChcInc6bGVmdFwiLCBvcHRpb25zMi5sZWZ0KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCb3JkZXJFbGVtZW50KFwidzpsZWZ0XCIsIERFRkFVTFRfQk9SREVSKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5ib3R0b20pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCb3JkZXJFbGVtZW50KFwidzpib3R0b21cIiwgb3B0aW9uczIuYm90dG9tKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCb3JkZXJFbGVtZW50KFwidzpib3R0b21cIiwgREVGQVVMVF9CT1JERVIpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnJpZ2h0KSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgQm9yZGVyRWxlbWVudChcInc6cmlnaHRcIiwgb3B0aW9uczIucmlnaHQpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IEJvcmRlckVsZW1lbnQoXCJ3OnJpZ2h0XCIsIERFRkFVTFRfQk9SREVSKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5pbnNpZGVIb3Jpem9udGFsKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgQm9yZGVyRWxlbWVudChcInc6aW5zaWRlSFwiLCBvcHRpb25zMi5pbnNpZGVIb3Jpem9udGFsKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCb3JkZXJFbGVtZW50KFwidzppbnNpZGVIXCIsIERFRkFVTFRfQk9SREVSKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5pbnNpZGVWZXJ0aWNhbCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IEJvcmRlckVsZW1lbnQoXCJ3Omluc2lkZVZcIiwgb3B0aW9uczIuaW5zaWRlVmVydGljYWwpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IEJvcmRlckVsZW1lbnQoXCJ3Omluc2lkZVZcIiwgREVGQVVMVF9CT1JERVIpKTtcbiAgICB9XG4gIH1cbn1cbl9fcHVibGljRmllbGQoVGFibGVCb3JkZXJzLCBcIk5PTkVcIiwge1xuICB0b3A6IE5PTkVfQk9SREVSLFxuICBib3R0b206IE5PTkVfQk9SREVSLFxuICBsZWZ0OiBOT05FX0JPUkRFUixcbiAgcmlnaHQ6IE5PTkVfQk9SREVSLFxuICBpbnNpZGVIb3Jpem9udGFsOiBOT05FX0JPUkRFUixcbiAgaW5zaWRlVmVydGljYWw6IE5PTkVfQk9SREVSXG59KTtcbmNvbnN0IFRhYmxlQW5jaG9yVHlwZSA9IHtcbiAgTUFSR0lOOiBcIm1hcmdpblwiLFxuICBQQUdFOiBcInBhZ2VcIixcbiAgVEVYVDogXCJ0ZXh0XCJcbn07XG5jb25zdCBSZWxhdGl2ZUhvcml6b250YWxQb3NpdGlvbiA9IHtcbiAgQ0VOVEVSOiBcImNlbnRlclwiLFxuICBJTlNJREU6IFwiaW5zaWRlXCIsXG4gIExFRlQ6IFwibGVmdFwiLFxuICBPVVRTSURFOiBcIm91dHNpZGVcIixcbiAgUklHSFQ6IFwicmlnaHRcIlxufTtcbmNvbnN0IFJlbGF0aXZlVmVydGljYWxQb3NpdGlvbiA9IHtcbiAgQ0VOVEVSOiBcImNlbnRlclwiLFxuICBJTlNJREU6IFwiaW5zaWRlXCIsXG4gIEJPVFRPTTogXCJib3R0b21cIixcbiAgT1VUU0lERTogXCJvdXRzaWRlXCIsXG4gIElOTElORTogXCJpbmxpbmVcIixcbiAgVE9QOiBcInRvcFwiXG59O1xuY29uc3QgT3ZlcmxhcFR5cGUgPSB7XG4gIE5FVkVSOiBcIm5ldmVyXCIsXG4gIE9WRVJMQVA6IFwib3ZlcmxhcFwiXG59O1xuY2xhc3MgVGFibGVGbG9hdFByb3BlcnRpZXMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgaG9yaXpvbnRhbEFuY2hvcixcbiAgICB2ZXJ0aWNhbEFuY2hvcixcbiAgICBhYnNvbHV0ZUhvcml6b250YWxQb3NpdGlvbixcbiAgICByZWxhdGl2ZUhvcml6b250YWxQb3NpdGlvbixcbiAgICBhYnNvbHV0ZVZlcnRpY2FsUG9zaXRpb24sXG4gICAgcmVsYXRpdmVWZXJ0aWNhbFBvc2l0aW9uLFxuICAgIGJvdHRvbUZyb21UZXh0LFxuICAgIHRvcEZyb21UZXh0LFxuICAgIGxlZnRGcm9tVGV4dCxcbiAgICByaWdodEZyb21UZXh0LFxuICAgIG92ZXJsYXBcbiAgfSkge1xuICAgIHN1cGVyKFwidzp0YmxwUHJcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgTmV4dEF0dHJpYnV0ZUNvbXBvbmVudCh7XG4gICAgICAgIGxlZnRGcm9tVGV4dDoge1xuICAgICAgICAgIGtleTogXCJ3OmxlZnRGcm9tVGV4dFwiLFxuICAgICAgICAgIHZhbHVlOiBsZWZ0RnJvbVRleHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHR3aXBzTWVhc3VyZVZhbHVlKGxlZnRGcm9tVGV4dClcbiAgICAgICAgfSxcbiAgICAgICAgcmlnaHRGcm9tVGV4dDoge1xuICAgICAgICAgIGtleTogXCJ3OnJpZ2h0RnJvbVRleHRcIixcbiAgICAgICAgICB2YWx1ZTogcmlnaHRGcm9tVGV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogdHdpcHNNZWFzdXJlVmFsdWUocmlnaHRGcm9tVGV4dClcbiAgICAgICAgfSxcbiAgICAgICAgdG9wRnJvbVRleHQ6IHtcbiAgICAgICAgICBrZXk6IFwidzp0b3BGcm9tVGV4dFwiLFxuICAgICAgICAgIHZhbHVlOiB0b3BGcm9tVGV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogdHdpcHNNZWFzdXJlVmFsdWUodG9wRnJvbVRleHQpXG4gICAgICAgIH0sXG4gICAgICAgIGJvdHRvbUZyb21UZXh0OiB7XG4gICAgICAgICAga2V5OiBcInc6Ym90dG9tRnJvbVRleHRcIixcbiAgICAgICAgICB2YWx1ZTogYm90dG9tRnJvbVRleHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHR3aXBzTWVhc3VyZVZhbHVlKGJvdHRvbUZyb21UZXh0KVxuICAgICAgICB9LFxuICAgICAgICBhYnNvbHV0ZUhvcml6b250YWxQb3NpdGlvbjoge1xuICAgICAgICAgIGtleTogXCJ3OnRibHBYXCIsXG4gICAgICAgICAgdmFsdWU6IGFic29sdXRlSG9yaXpvbnRhbFBvc2l0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzaWduZWRUd2lwc01lYXN1cmVWYWx1ZShhYnNvbHV0ZUhvcml6b250YWxQb3NpdGlvbilcbiAgICAgICAgfSxcbiAgICAgICAgYWJzb2x1dGVWZXJ0aWNhbFBvc2l0aW9uOiB7XG4gICAgICAgICAga2V5OiBcInc6dGJscFlcIixcbiAgICAgICAgICB2YWx1ZTogYWJzb2x1dGVWZXJ0aWNhbFBvc2l0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzaWduZWRUd2lwc01lYXN1cmVWYWx1ZShhYnNvbHV0ZVZlcnRpY2FsUG9zaXRpb24pXG4gICAgICAgIH0sXG4gICAgICAgIGhvcml6b250YWxBbmNob3I6IHtcbiAgICAgICAgICBrZXk6IFwidzpob3J6QW5jaG9yXCIsXG4gICAgICAgICAgdmFsdWU6IGhvcml6b250YWxBbmNob3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGhvcml6b250YWxBbmNob3JcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVIb3Jpem9udGFsUG9zaXRpb246IHtcbiAgICAgICAgICBrZXk6IFwidzp0YmxwWFNwZWNcIixcbiAgICAgICAgICB2YWx1ZTogcmVsYXRpdmVIb3Jpem9udGFsUG9zaXRpb25cbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVWZXJ0aWNhbFBvc2l0aW9uOiB7XG4gICAgICAgICAga2V5OiBcInc6dGJscFlTcGVjXCIsXG4gICAgICAgICAgdmFsdWU6IHJlbGF0aXZlVmVydGljYWxQb3NpdGlvblxuICAgICAgICB9LFxuICAgICAgICB2ZXJ0aWNhbEFuY2hvcjoge1xuICAgICAgICAgIGtleTogXCJ3OnZlcnRBbmNob3JcIixcbiAgICAgICAgICB2YWx1ZTogdmVydGljYWxBbmNob3JcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICApO1xuICAgIGlmIChvdmVybGFwKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgU3RyaW5nRW51bVZhbHVlRWxlbWVudChcInc6dGJsT3ZlcmxhcFwiLCBvdmVybGFwKSk7XG4gICAgfVxuICB9XG59XG5jb25zdCBUYWJsZUxheW91dFR5cGUgPSB7XG4gIEFVVE9GSVQ6IFwiYXV0b2ZpdFwiLFxuICBGSVhFRDogXCJmaXhlZFwiXG59O1xuY2xhc3MgVGFibGVMYXlvdXRBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7IHR5cGU6IFwidzp0eXBlXCIgfSk7XG4gIH1cbn1cbmNsYXNzIFRhYmxlTGF5b3V0IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodHlwZTIpIHtcbiAgICBzdXBlcihcInc6dGJsTGF5b3V0XCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUYWJsZUxheW91dEF0dHJpYnV0ZXMoeyB0eXBlOiB0eXBlMiB9KSk7XG4gIH1cbn1cbmNsYXNzIFRhYmxlUHJvcGVydGllcyBleHRlbmRzIElnbm9yZUlmRW1wdHlYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwidzp0YmxQclwiKTtcbiAgICBpZiAob3B0aW9uczIuc3R5bGUpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTdHJpbmdWYWx1ZUVsZW1lbnQoXCJ3OnRibFN0eWxlXCIsIG9wdGlvbnMyLnN0eWxlKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5mbG9hdCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRhYmxlRmxvYXRQcm9wZXJ0aWVzKG9wdGlvbnMyLmZsb2F0KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi52aXN1YWxseVJpZ2h0VG9MZWZ0ICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmJpZGlWaXN1YWxcIiwgb3B0aW9uczIudmlzdWFsbHlSaWdodFRvTGVmdCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIud2lkdGgpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUYWJsZVdpZHRoRWxlbWVudChcInc6dGJsV1wiLCBvcHRpb25zMi53aWR0aCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuYWxpZ25tZW50KSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgQWxpZ25tZW50KG9wdGlvbnMyLmFsaWdubWVudCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuaW5kZW50KSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGFibGVXaWR0aEVsZW1lbnQoXCJ3OnRibEluZFwiLCBvcHRpb25zMi5pbmRlbnQpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmJvcmRlcnMpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUYWJsZUJvcmRlcnMob3B0aW9uczIuYm9yZGVycykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuc2hhZGluZykge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFNoYWRpbmcob3B0aW9uczIuc2hhZGluZykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIubGF5b3V0KSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGFibGVMYXlvdXQob3B0aW9uczIubGF5b3V0KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5jZWxsTWFyZ2luKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGFibGVDZWxsTWFyZ2luKFRhYmxlQ2VsbE1hcmdpbkVsZW1lbnRUeXBlLlRBQkxFLCBvcHRpb25zMi5jZWxsTWFyZ2luKSk7XG4gICAgfVxuICB9XG59XG5jbGFzcyBUYWJsZSBleHRlbmRzIEZpbGVDaGlsZCB7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICByb3dzLFxuICAgIHdpZHRoLFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jdGlvbmFsL2ltbXV0YWJsZS1kYXRhXG4gICAgY29sdW1uV2lkdGhzID0gQXJyYXkoTWF0aC5tYXgoLi4ucm93cy5tYXAoKHJvdykgPT4gcm93LkNlbGxDb3VudCkpKS5maWxsKDEwMCksXG4gICAgbWFyZ2lucyxcbiAgICBpbmRlbnQsXG4gICAgZmxvYXQsXG4gICAgbGF5b3V0LFxuICAgIHN0eWxlLFxuICAgIGJvcmRlcnMsXG4gICAgYWxpZ25tZW50LFxuICAgIHZpc3VhbGx5UmlnaHRUb0xlZnRcbiAgfSkge1xuICAgIHN1cGVyKFwidzp0YmxcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgVGFibGVQcm9wZXJ0aWVzKHtcbiAgICAgICAgYm9yZGVyczogYm9yZGVycyAhPSBudWxsID8gYm9yZGVycyA6IHt9LFxuICAgICAgICB3aWR0aDogd2lkdGggIT0gbnVsbCA/IHdpZHRoIDogeyBzaXplOiAxMDAgfSxcbiAgICAgICAgaW5kZW50LFxuICAgICAgICBmbG9hdCxcbiAgICAgICAgbGF5b3V0LFxuICAgICAgICBzdHlsZSxcbiAgICAgICAgYWxpZ25tZW50LFxuICAgICAgICBjZWxsTWFyZ2luOiBtYXJnaW5zLFxuICAgICAgICB2aXN1YWxseVJpZ2h0VG9MZWZ0XG4gICAgICB9KVxuICAgICk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IFRhYmxlR3JpZChjb2x1bW5XaWR0aHMpKTtcbiAgICBmb3IgKGNvbnN0IHJvdyBvZiByb3dzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChyb3cpO1xuICAgIH1cbiAgICByb3dzLmZvckVhY2goKHJvdywgcm93SW5kZXgpID0+IHtcbiAgICAgIGlmIChyb3dJbmRleCA9PT0gcm93cy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxldCBjb2x1bW5JbmRleCA9IDA7XG4gICAgICByb3cuY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICBpZiAoY2VsbC5vcHRpb25zLnJvd1NwYW4gJiYgY2VsbC5vcHRpb25zLnJvd1NwYW4gPiAxKSB7XG4gICAgICAgICAgY29uc3QgY29udGludWVDZWxsID0gbmV3IFRhYmxlQ2VsbCh7XG4gICAgICAgICAgICAvLyB0aGUgaW5zZXJ0ZWQgQ09OVElOVUUgY2VsbCBoYXMgcm93U3BhbiwgYW5kIHdpbGwgYmUgaGFuZGxlZCB3aGVuIHByb2Nlc3MgdGhlIG5leHQgcm93XG4gICAgICAgICAgICByb3dTcGFuOiBjZWxsLm9wdGlvbnMucm93U3BhbiAtIDEsXG4gICAgICAgICAgICBjb2x1bW5TcGFuOiBjZWxsLm9wdGlvbnMuY29sdW1uU3BhbixcbiAgICAgICAgICAgIGJvcmRlcnM6IGNlbGwub3B0aW9ucy5ib3JkZXJzLFxuICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICAgICAgdmVydGljYWxNZXJnZTogVmVydGljYWxNZXJnZVR5cGUuQ09OVElOVUVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByb3dzW3Jvd0luZGV4ICsgMV0uYWRkQ2VsbFRvQ29sdW1uSW5kZXgoY29udGludWVDZWxsLCBjb2x1bW5JbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgY29sdW1uSW5kZXggKz0gY2VsbC5vcHRpb25zLmNvbHVtblNwYW4gfHwgMTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG5jb25zdCBIZWlnaHRSdWxlID0ge1xuICAvKiogSGVpZ2h0IGlzIGRldGVybWluZWQgYmFzZWQgb24gdGhlIGNvbnRlbnQsIHNvIHZhbHVlIGlzIGlnbm9yZWQuICovXG4gIEFVVE86IFwiYXV0b1wiLFxuICAvKiogQXQgbGVhc3QgdGhlIHZhbHVlIHNwZWNpZmllZCAqL1xuICBBVExFQVNUOiBcImF0TGVhc3RcIixcbiAgLyoqIEV4YWN0bHkgdGhlIHZhbHVlIHNwZWNpZmllZCAqL1xuICBFWEFDVDogXCJleGFjdFwiXG59O1xuY2xhc3MgVGFibGVSb3dIZWlnaHRBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7IHZhbHVlOiBcInc6dmFsXCIsIHJ1bGU6IFwidzpoUnVsZVwiIH0pO1xuICB9XG59XG5jbGFzcyBUYWJsZVJvd0hlaWdodCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlLCBydWxlKSB7XG4gICAgc3VwZXIoXCJ3OnRySGVpZ2h0XCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IFRhYmxlUm93SGVpZ2h0QXR0cmlidXRlcyh7XG4gICAgICAgIHZhbHVlOiB0d2lwc01lYXN1cmVWYWx1ZSh2YWx1ZSksXG4gICAgICAgIHJ1bGVcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgVGFibGVSb3dQcm9wZXJ0aWVzIGV4dGVuZHMgSWdub3JlSWZFbXB0eVhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJ3OnRyUHJcIik7XG4gICAgaWYgKG9wdGlvbnMyLmNhbnRTcGxpdCAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpjYW50U3BsaXRcIiwgb3B0aW9uczIuY2FudFNwbGl0KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi50YWJsZUhlYWRlciAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzp0YmxIZWFkZXJcIiwgb3B0aW9uczIudGFibGVIZWFkZXIpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmhlaWdodCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRhYmxlUm93SGVpZ2h0KG9wdGlvbnMyLmhlaWdodC52YWx1ZSwgb3B0aW9uczIuaGVpZ2h0LnJ1bGUpKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIFRhYmxlUm93IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcInc6dHJcIik7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9uczI7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IFRhYmxlUm93UHJvcGVydGllcyhvcHRpb25zMikpO1xuICAgIGZvciAoY29uc3QgY2hpbGQgb2Ygb3B0aW9uczIuY2hpbGRyZW4pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbiAgZ2V0IENlbGxDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmNoaWxkcmVuLmxlbmd0aDtcbiAgfVxuICBnZXQgY2VsbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMucm9vdC5maWx0ZXIoKHhtbENvbXBvbmVudCkgPT4geG1sQ29tcG9uZW50IGluc3RhbmNlb2YgVGFibGVDZWxsKTtcbiAgfVxuICBhZGRDZWxsVG9JbmRleChjZWxsLCBpbmRleCkge1xuICAgIHRoaXMucm9vdC5zcGxpY2UoaW5kZXggKyAxLCAwLCBjZWxsKTtcbiAgfVxuICBhZGRDZWxsVG9Db2x1bW5JbmRleChjZWxsLCBjb2x1bW5JbmRleCkge1xuICAgIGNvbnN0IHJvb3RJbmRleCA9IHRoaXMuY29sdW1uSW5kZXhUb1Jvb3RJbmRleChjb2x1bW5JbmRleCwgdHJ1ZSk7XG4gICAgdGhpcy5hZGRDZWxsVG9JbmRleChjZWxsLCByb290SW5kZXggLSAxKTtcbiAgfVxuICByb290SW5kZXhUb0NvbHVtbkluZGV4KHJvb3RJbmRleCkge1xuICAgIGlmIChyb290SW5kZXggPCAxIHx8IHJvb3RJbmRleCA+PSB0aGlzLnJvb3QubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGNlbGwgJ3Jvb3RJbmRleCcgc2hvdWxkIGJldHdlZW4gMSB0byAke3RoaXMucm9vdC5sZW5ndGggLSAxfWApO1xuICAgIH1cbiAgICBsZXQgY29sSWR4ID0gMDtcbiAgICBmb3IgKGxldCByb290SWR4ID0gMTsgcm9vdElkeCA8IHJvb3RJbmRleDsgcm9vdElkeCsrKSB7XG4gICAgICBjb25zdCBjZWxsID0gdGhpcy5yb290W3Jvb3RJZHhdO1xuICAgICAgY29sSWR4ICs9IGNlbGwub3B0aW9ucy5jb2x1bW5TcGFuIHx8IDE7XG4gICAgfVxuICAgIHJldHVybiBjb2xJZHg7XG4gIH1cbiAgY29sdW1uSW5kZXhUb1Jvb3RJbmRleChjb2x1bW5JbmRleCwgYWxsb3dFbmROZXdDZWxsID0gZmFsc2UpIHtcbiAgICBpZiAoY29sdW1uSW5kZXggPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGNlbGwgJ2NvbHVtbkluZGV4JyBzaG91bGQgbm90IGxlc3MgdGhhbiB6ZXJvYCk7XG4gICAgfVxuICAgIGxldCBjb2xJZHggPSAwO1xuICAgIGxldCByb290SWR4ID0gMTtcbiAgICB3aGlsZSAoY29sSWR4IDw9IGNvbHVtbkluZGV4KSB7XG4gICAgICBpZiAocm9vdElkeCA+PSB0aGlzLnJvb3QubGVuZ3RoKSB7XG4gICAgICAgIGlmIChhbGxvd0VuZE5ld0NlbGwpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5yb290Lmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNlbGwgJ2NvbHVtbkluZGV4JyBzaG91bGQgbm90IGdyZWF0IHRoYW4gJHtjb2xJZHggLSAxfWApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBjZWxsID0gdGhpcy5yb290W3Jvb3RJZHhdO1xuICAgICAgcm9vdElkeCArPSAxO1xuICAgICAgY29sSWR4ICs9IGNlbGwgJiYgY2VsbC5vcHRpb25zLmNvbHVtblNwYW4gfHwgMTtcbiAgICB9XG4gICAgcmV0dXJuIHJvb3RJZHggLSAxO1xuICB9XG59XG5jbGFzcyBBcHBQcm9wZXJ0aWVzQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgeG1sbnM6IFwieG1sbnNcIixcbiAgICAgIHZ0OiBcInhtbG5zOnZ0XCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgQXBwUHJvcGVydGllcyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwiUHJvcGVydGllc1wiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBBcHBQcm9wZXJ0aWVzQXR0cmlidXRlcyh7XG4gICAgICAgIHhtbG5zOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L2V4dGVuZGVkLXByb3BlcnRpZXNcIixcbiAgICAgICAgdnQ6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvZG9jUHJvcHNWVHlwZXNcIlxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jbGFzcyBDb250ZW50VHlwZUF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIHhtbG5zOiBcInhtbG5zXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgRGVmYXVsdEF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIGNvbnRlbnRUeXBlOiBcIkNvbnRlbnRUeXBlXCIsXG4gICAgICBleHRlbnNpb246IFwiRXh0ZW5zaW9uXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgRGVmYXVsdCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGNvbnRlbnRUeXBlLCBleHRlbnNpb24pIHtcbiAgICBzdXBlcihcIkRlZmF1bHRcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgRGVmYXVsdEF0dHJpYnV0ZXMoe1xuICAgICAgICBjb250ZW50VHlwZSxcbiAgICAgICAgZXh0ZW5zaW9uXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNsYXNzIE92ZXJyaWRlQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgY29udGVudFR5cGU6IFwiQ29udGVudFR5cGVcIixcbiAgICAgIHBhcnROYW1lOiBcIlBhcnROYW1lXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgT3ZlcnJpZGUgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihjb250ZW50VHlwZSwgcGFydE5hbWUpIHtcbiAgICBzdXBlcihcIk92ZXJyaWRlXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IE92ZXJyaWRlQXR0cmlidXRlcyh7XG4gICAgICAgIGNvbnRlbnRUeXBlLFxuICAgICAgICBwYXJ0TmFtZVxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jbGFzcyBDb250ZW50VHlwZXMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIlR5cGVzXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IENvbnRlbnRUeXBlQXR0cmlidXRlcyh7XG4gICAgICAgIHhtbG5zOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9wYWNrYWdlLzIwMDYvY29udGVudC10eXBlc1wiXG4gICAgICB9KVxuICAgICk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IERlZmF1bHQoXCJpbWFnZS9wbmdcIiwgXCJwbmdcIikpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBEZWZhdWx0KFwiaW1hZ2UvanBlZ1wiLCBcImpwZWdcIikpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBEZWZhdWx0KFwiaW1hZ2UvanBlZ1wiLCBcImpwZ1wiKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IERlZmF1bHQoXCJpbWFnZS9ibXBcIiwgXCJibXBcIikpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBEZWZhdWx0KFwiaW1hZ2UvZ2lmXCIsIFwiZ2lmXCIpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgRGVmYXVsdChcImltYWdlL3N2Zyt4bWxcIiwgXCJzdmdcIikpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBEZWZhdWx0KFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLXBhY2thZ2UucmVsYXRpb25zaGlwcyt4bWxcIiwgXCJyZWxzXCIpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgRGVmYXVsdChcImFwcGxpY2F0aW9uL3htbFwiLCBcInhtbFwiKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IERlZmF1bHQoXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQub2JmdXNjYXRlZEZvbnRcIiwgXCJvZHR0ZlwiKSk7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgT3ZlcnJpZGUoXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudC5tYWluK3htbFwiLCBcIi93b3JkL2RvY3VtZW50LnhtbFwiKVxuICAgICk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE92ZXJyaWRlKFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuc3R5bGVzK3htbFwiLCBcIi93b3JkL3N0eWxlcy54bWxcIikpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPdmVycmlkZShcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1wYWNrYWdlLmNvcmUtcHJvcGVydGllcyt4bWxcIiwgXCIvZG9jUHJvcHMvY29yZS54bWxcIikpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPdmVycmlkZShcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5jdXN0b20tcHJvcGVydGllcyt4bWxcIiwgXCIvZG9jUHJvcHMvY3VzdG9tLnhtbFwiKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE92ZXJyaWRlKFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmV4dGVuZGVkLXByb3BlcnRpZXMreG1sXCIsIFwiL2RvY1Byb3BzL2FwcC54bWxcIikpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPdmVycmlkZShcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLm51bWJlcmluZyt4bWxcIiwgXCIvd29yZC9udW1iZXJpbmcueG1sXCIpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgT3ZlcnJpZGUoXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5mb290bm90ZXMreG1sXCIsIFwiL3dvcmQvZm9vdG5vdGVzLnhtbFwiKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE92ZXJyaWRlKFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuc2V0dGluZ3MreG1sXCIsIFwiL3dvcmQvc2V0dGluZ3MueG1sXCIpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgT3ZlcnJpZGUoXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5jb21tZW50cyt4bWxcIiwgXCIvd29yZC9jb21tZW50cy54bWxcIikpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPdmVycmlkZShcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmZvbnRUYWJsZSt4bWxcIiwgXCIvd29yZC9mb250VGFibGUueG1sXCIpKTtcbiAgfVxuICBhZGRGb290ZXIoaW5kZXgpIHtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBPdmVycmlkZShcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmZvb3Rlcit4bWxcIiwgYC93b3JkL2Zvb3RlciR7aW5kZXh9LnhtbGApXG4gICAgKTtcbiAgfVxuICBhZGRIZWFkZXIoaW5kZXgpIHtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBPdmVycmlkZShcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmhlYWRlcit4bWxcIiwgYC93b3JkL2hlYWRlciR7aW5kZXh9LnhtbGApXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgQ29yZVByb3BlcnRpZXMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwiY3A6Y29yZVByb3BlcnRpZXNcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgRG9jdW1lbnRBdHRyaWJ1dGVzKHtcbiAgICAgICAgY3A6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL3BhY2thZ2UvMjAwNi9tZXRhZGF0YS9jb3JlLXByb3BlcnRpZXNcIixcbiAgICAgICAgZGM6IFwiaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS9cIixcbiAgICAgICAgZGN0ZXJtczogXCJodHRwOi8vcHVybC5vcmcvZGMvdGVybXMvXCIsXG4gICAgICAgIGRjbWl0eXBlOiBcImh0dHA6Ly9wdXJsLm9yZy9kYy9kY21pdHlwZS9cIixcbiAgICAgICAgeHNpOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlXCJcbiAgICAgIH0pXG4gICAgKTtcbiAgICBpZiAob3B0aW9uczIudGl0bGUpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTdHJpbmdDb250YWluZXIoXCJkYzp0aXRsZVwiLCBvcHRpb25zMi50aXRsZSkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuc3ViamVjdCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFN0cmluZ0NvbnRhaW5lcihcImRjOnN1YmplY3RcIiwgb3B0aW9uczIuc3ViamVjdCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuY3JlYXRvcikge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFN0cmluZ0NvbnRhaW5lcihcImRjOmNyZWF0b3JcIiwgb3B0aW9uczIuY3JlYXRvcikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIua2V5d29yZHMpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTdHJpbmdDb250YWluZXIoXCJjcDprZXl3b3Jkc1wiLCBvcHRpb25zMi5rZXl3b3JkcykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuZGVzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTdHJpbmdDb250YWluZXIoXCJkYzpkZXNjcmlwdGlvblwiLCBvcHRpb25zMi5kZXNjcmlwdGlvbikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIubGFzdE1vZGlmaWVkQnkpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTdHJpbmdDb250YWluZXIoXCJjcDpsYXN0TW9kaWZpZWRCeVwiLCBvcHRpb25zMi5sYXN0TW9kaWZpZWRCeSkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIucmV2aXNpb24pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTdHJpbmdDb250YWluZXIoXCJjcDpyZXZpc2lvblwiLCBTdHJpbmcob3B0aW9uczIucmV2aXNpb24pKSk7XG4gICAgfVxuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUaW1lc3RhbXBFbGVtZW50KFwiZGN0ZXJtczpjcmVhdGVkXCIpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgVGltZXN0YW1wRWxlbWVudChcImRjdGVybXM6bW9kaWZpZWRcIikpO1xuICB9XG59XG5jbGFzcyBUaW1lc3RhbXBFbGVtZW50IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IobmFtZSkge1xuICAgIHN1cGVyKG5hbWUpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IERvY3VtZW50QXR0cmlidXRlcyh7XG4gICAgICAgIHR5cGU6IFwiZGN0ZXJtczpXM0NEVEZcIlxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMucm9vdC5wdXNoKGRhdGVUaW1lVmFsdWUoLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCkpKTtcbiAgfVxufVxuY2xhc3MgQ3VzdG9tUHJvcGVydGllc0F0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIHhtbG5zOiBcInhtbG5zXCIsXG4gICAgICB2dDogXCJ4bWxuczp2dFwiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIEN1c3RvbVByb3BlcnR5QXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgZm10aWQ6IFwiZm10aWRcIixcbiAgICAgIHBpZDogXCJwaWRcIixcbiAgICAgIG5hbWU6IFwibmFtZVwiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIEN1c3RvbVByb3BlcnR5IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoaWQsIHByb3BlcnRpZXMpIHtcbiAgICBzdXBlcihcInByb3BlcnR5XCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IEN1c3RvbVByb3BlcnR5QXR0cmlidXRlcyh7XG4gICAgICAgIGZtdGlkOiBcIntENUNERDUwNS0yRTlDLTEwMUItOTM5Ny0wODAwMkIyQ0Y5QUV9XCIsXG4gICAgICAgIHBpZDogaWQudG9TdHJpbmcoKSxcbiAgICAgICAgbmFtZTogcHJvcGVydGllcy5uYW1lXG4gICAgICB9KVxuICAgICk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IEN1c3RvbVByb3BlcnR5VmFsdWUocHJvcGVydGllcy52YWx1ZSkpO1xuICB9XG59XG5jbGFzcyBDdXN0b21Qcm9wZXJ0eVZhbHVlIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICBzdXBlcihcInZ0Omxwd3N0clwiKTtcbiAgICB0aGlzLnJvb3QucHVzaCh2YWx1ZSk7XG4gIH1cbn1cbmNsYXNzIEN1c3RvbVByb3BlcnRpZXMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wZXJ0aWVzKSB7XG4gICAgc3VwZXIoXCJQcm9wZXJ0aWVzXCIpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jdGlvbmFsL3ByZWZlci1yZWFkb25seS10eXBlXG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIm5leHRJZFwiKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuY3Rpb25hbC9wcmVmZXItcmVhZG9ubHktdHlwZVxuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJwcm9wZXJ0aWVzXCIsIFtdKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBDdXN0b21Qcm9wZXJ0aWVzQXR0cmlidXRlcyh7XG4gICAgICAgIHhtbG5zOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L2N1c3RvbS1wcm9wZXJ0aWVzXCIsXG4gICAgICAgIHZ0OiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L2RvY1Byb3BzVlR5cGVzXCJcbiAgICAgIH0pXG4gICAgKTtcbiAgICB0aGlzLm5leHRJZCA9IDI7XG4gICAgZm9yIChjb25zdCBwcm9wZXJ0eSBvZiBwcm9wZXJ0aWVzKSB7XG4gICAgICB0aGlzLmFkZEN1c3RvbVByb3BlcnR5KHByb3BlcnR5KTtcbiAgICB9XG4gIH1cbiAgcHJlcEZvclhtbChjb250ZXh0KSB7XG4gICAgdGhpcy5wcm9wZXJ0aWVzLmZvckVhY2goKHgpID0+IHRoaXMucm9vdC5wdXNoKHgpKTtcbiAgICByZXR1cm4gc3VwZXIucHJlcEZvclhtbChjb250ZXh0KTtcbiAgfVxuICBhZGRDdXN0b21Qcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgIHRoaXMucHJvcGVydGllcy5wdXNoKG5ldyBDdXN0b21Qcm9wZXJ0eSh0aGlzLm5leHRJZCsrLCBwcm9wZXJ0eSkpO1xuICB9XG59XG5jb25zdCBDaGFyYWN0ZXJTZXQgPSB7XG4gIEFOU0k6IFwiMDBcIixcbiAgREVGQVVMVDogXCIwMVwiLFxuICBTWU1CT0w6IFwiMDJcIixcbiAgTUFDOiBcIjREXCIsXG4gIEpJUzogXCI4MFwiLFxuICBIQU5HVUw6IFwiODFcIixcbiAgSk9IQUI6IFwiODJcIixcbiAgR0JfMjMxMjogXCI4NlwiLFxuICBDSElORVNFQklHNTogXCI4OFwiLFxuICBHUkVFSzogXCJBMVwiLFxuICBUVVJLSVNIOiBcIkEyXCIsXG4gIFZJRVROQU1FU0U6IFwiQTNcIixcbiAgSEVCUkVXOiBcIkIxXCIsXG4gIEFSQUJJQzogXCJCMlwiLFxuICBCQUxUSUM6IFwiQkFcIixcbiAgUlVTU0lBTjogXCJDQ1wiLFxuICBUSEFJOiBcIkRFXCIsXG4gIEVBU1RFVVJPUEU6IFwiRUVcIixcbiAgT0VNOiBcIkZGXCJcbn07XG5jb25zdCBjcmVhdGVGb250UmVsYXRpb25zaGlwID0gKHsgaWQsIGZvbnRLZXksIHN1YnNldHRlZCB9LCBuYW1lKSA9PiBuZXcgQnVpbGRlckVsZW1lbnQoe1xuICBuYW1lLFxuICBhdHRyaWJ1dGVzOiBfX3NwcmVhZFZhbHVlcyh7XG4gICAgaWQ6IHsga2V5OiBcInI6aWRcIiwgdmFsdWU6IGlkIH1cbiAgfSwgZm9udEtleSA/IHsgZm9udEtleTogeyBrZXk6IFwidzpmb250S2V5XCIsIHZhbHVlOiBgeyR7Zm9udEtleX19YCB9IH0gOiB7fSksXG4gIGNoaWxkcmVuOiBbLi4uc3Vic2V0dGVkID8gW25ldyBPbk9mZkVsZW1lbnQoXCJ3OnN1YnNldHRlZFwiLCBzdWJzZXR0ZWQpXSA6IFtdXVxufSk7XG5jb25zdCBjcmVhdGVGb250ID0gKHtcbiAgbmFtZSxcbiAgYWx0TmFtZSxcbiAgcGFub3NlMSxcbiAgY2hhcnNldCxcbiAgZmFtaWx5LFxuICBub3RUcnVlVHlwZSxcbiAgcGl0Y2gsXG4gIHNpZyxcbiAgZW1iZWRSZWd1bGFyLFxuICBlbWJlZEJvbGQsXG4gIGVtYmVkSXRhbGljLFxuICBlbWJlZEJvbGRJdGFsaWNcbn0pID0+IChcbiAgLy8gaHR0cDovL3d3dy5kYXR5cGljLmNvbS9zYy9vb3htbC9lLXdfZm9udC0xLmh0bWxcbiAgbmV3IEJ1aWxkZXJFbGVtZW50KHtcbiAgICBuYW1lOiBcInc6Zm9udFwiLFxuICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgIG5hbWU6IHsga2V5OiBcInc6bmFtZVwiLCB2YWx1ZTogbmFtZSB9XG4gICAgfSxcbiAgICBjaGlsZHJlbjogW1xuICAgICAgLy8gaHR0cDovL3d3dy5kYXR5cGljLmNvbS9zYy9vb3htbC9lLXdfYWx0TmFtZS0xLmh0bWxcbiAgICAgIC4uLmFsdE5hbWUgPyBbY3JlYXRlU3RyaW5nRWxlbWVudChcInc6YWx0TmFtZVwiLCBhbHROYW1lKV0gOiBbXSxcbiAgICAgIC8vIGh0dHA6Ly93d3cuZGF0eXBpYy5jb20vc2Mvb294bWwvZS13X3Bhbm9zZTEtMS5odG1sXG4gICAgICAuLi5wYW5vc2UxID8gW2NyZWF0ZVN0cmluZ0VsZW1lbnQoXCJ3OnBhbm9zZTFcIiwgcGFub3NlMSldIDogW10sXG4gICAgICAvLyBodHRwOi8vd3d3LmRhdHlwaWMuY29tL3NjL29veG1sL2Utd19jaGFyc2V0LTEuaHRtbFxuICAgICAgLi4uY2hhcnNldCA/IFtjcmVhdGVTdHJpbmdFbGVtZW50KFwidzpjaGFyc2V0XCIsIGNoYXJzZXQpXSA6IFtdLFxuICAgICAgLy8gaHR0cDovL3d3dy5kYXR5cGljLmNvbS9zYy9vb3htbC9lLXdfZmFtaWx5LTEuaHRtbFxuICAgICAgLi4uZmFtaWx5ID8gW2NyZWF0ZVN0cmluZ0VsZW1lbnQoXCJ3OmZhbWlseVwiLCBmYW1pbHkpXSA6IFtdLFxuICAgICAgLy8gaHR0cDovL3d3dy5kYXR5cGljLmNvbS9zYy9vb3htbC9lLXdfbm90VHJ1ZVR5cGUtMS5odG1sXG4gICAgICAuLi5ub3RUcnVlVHlwZSA/IFtuZXcgT25PZmZFbGVtZW50KFwidzpub3RUcnVlVHlwZVwiLCBub3RUcnVlVHlwZSldIDogW10sXG4gICAgICAuLi5waXRjaCA/IFtjcmVhdGVTdHJpbmdFbGVtZW50KFwidzpwaXRjaFwiLCBwaXRjaCldIDogW10sXG4gICAgICAvLyBodHRwOi8vd3d3LmRhdHlwaWMuY29tL3NjL29veG1sL2Utd19zaWctMS5odG1sXG4gICAgICAuLi5zaWcgPyBbXG4gICAgICAgIG5ldyBCdWlsZGVyRWxlbWVudCh7XG4gICAgICAgICAgbmFtZTogXCJ3OnNpZ1wiLFxuICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgIHVzYjA6IHsga2V5OiBcInc6dXNiMFwiLCB2YWx1ZTogc2lnLnVzYjAgfSxcbiAgICAgICAgICAgIHVzYjE6IHsga2V5OiBcInc6dXNiMVwiLCB2YWx1ZTogc2lnLnVzYjEgfSxcbiAgICAgICAgICAgIHVzYjI6IHsga2V5OiBcInc6dXNiMlwiLCB2YWx1ZTogc2lnLnVzYjIgfSxcbiAgICAgICAgICAgIHVzYjM6IHsga2V5OiBcInc6dXNiM1wiLCB2YWx1ZTogc2lnLnVzYjMgfSxcbiAgICAgICAgICAgIGNzYjA6IHsga2V5OiBcInc6Y3NiMFwiLCB2YWx1ZTogc2lnLmNzYjAgfSxcbiAgICAgICAgICAgIGNzYjE6IHsga2V5OiBcInc6Y3NiMVwiLCB2YWx1ZTogc2lnLmNzYjEgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIF0gOiBbXSxcbiAgICAgIC8vIGh0dHA6Ly93d3cuZGF0eXBpYy5jb20vc2Mvb294bWwvZS13X2VtYmVkUmVndWxhci0xLmh0bWxcbiAgICAgIC4uLmVtYmVkUmVndWxhciA/IFtjcmVhdGVGb250UmVsYXRpb25zaGlwKGVtYmVkUmVndWxhciwgXCJ3OmVtYmVkUmVndWxhclwiKV0gOiBbXSxcbiAgICAgIC8vIGh0dHA6Ly93d3cuZGF0eXBpYy5jb20vc2Mvb294bWwvZS13X2VtYmVkQm9sZC0xLmh0bWxcbiAgICAgIC4uLmVtYmVkQm9sZCA/IFtjcmVhdGVGb250UmVsYXRpb25zaGlwKGVtYmVkQm9sZCwgXCJ3OmVtYmVkQm9sZFwiKV0gOiBbXSxcbiAgICAgIC8vIGh0dHA6Ly93d3cuZGF0eXBpYy5jb20vc2Mvb294bWwvZS13X2VtYmVkSXRhbGljLTEuaHRtbFxuICAgICAgLi4uZW1iZWRJdGFsaWMgPyBbY3JlYXRlRm9udFJlbGF0aW9uc2hpcChlbWJlZEl0YWxpYywgXCJ3OmVtYmVkSXRhbGljXCIpXSA6IFtdLFxuICAgICAgLy8gaHR0cDovL3d3dy5kYXR5cGljLmNvbS9zYy9vb3htbC9lLXdfZW1iZWRCb2xkSXRhbGljLTEuaHRtbFxuICAgICAgLi4uZW1iZWRCb2xkSXRhbGljID8gW2NyZWF0ZUZvbnRSZWxhdGlvbnNoaXAoZW1iZWRCb2xkSXRhbGljLCBcInc6ZW1iZWRCb2xkSXRhbGljXCIpXSA6IFtdXG4gICAgXVxuICB9KVxuKTtcbmNvbnN0IGNyZWF0ZVJlZ3VsYXJGb250ID0gKHtcbiAgbmFtZSxcbiAgaW5kZXgsXG4gIGZvbnRLZXksXG4gIGNoYXJhY3RlclNldFxufSkgPT4gY3JlYXRlRm9udCh7XG4gIG5hbWUsXG4gIHNpZzoge1xuICAgIHVzYjA6IFwiRTAwMDJBRkZcIixcbiAgICB1c2IxOiBcIkMwMDAyNDdCXCIsXG4gICAgdXNiMjogXCIwMDAwMDAwOVwiLFxuICAgIHVzYjM6IFwiMDAwMDAwMDBcIixcbiAgICBjc2IwOiBcIjAwMDAwMUZGXCIsXG4gICAgY3NiMTogXCIwMDAwMDAwMFwiXG4gIH0sXG4gIGNoYXJzZXQ6IGNoYXJhY3RlclNldCxcbiAgZmFtaWx5OiBcImF1dG9cIixcbiAgcGl0Y2g6IFwidmFyaWFibGVcIixcbiAgZW1iZWRSZWd1bGFyOiB7XG4gICAgZm9udEtleSxcbiAgICBpZDogYHJJZCR7aW5kZXh9YFxuICB9XG59KTtcbmNvbnN0IGNyZWF0ZUZvbnRUYWJsZSA9IChmb250cykgPT4gKFxuICAvLyBodHRwczovL2MtcmV4Lm5ldC9wcm9qZWN0cy9zYW1wbGVzL29veG1sL2UxL1BhcnQ0L09PWE1MX1A0X0RPQ1hfRm9udF90b3BpY19JRDBFUk5DVS5odG1sXG4gIC8vIGh0dHA6Ly93d3cuZGF0eXBpYy5jb20vc2Mvb294bWwvZS13X2ZvbnRzLmh0bWxcbiAgbmV3IEJ1aWxkZXJFbGVtZW50KHtcbiAgICBuYW1lOiBcInc6Zm9udHNcIixcbiAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICBtYzogeyBrZXk6IFwieG1sbnM6bWNcIiwgdmFsdWU6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL21hcmt1cC1jb21wYXRpYmlsaXR5LzIwMDZcIiB9LFxuICAgICAgcjogeyBrZXk6IFwieG1sbnM6clwiLCB2YWx1ZTogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzXCIgfSxcbiAgICAgIHc6IHsga2V5OiBcInhtbG5zOndcIiwgdmFsdWU6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL3dvcmRwcm9jZXNzaW5nbWwvMjAwNi9tYWluXCIgfSxcbiAgICAgIHcxNDogeyBrZXk6IFwieG1sbnM6dzE0XCIsIHZhbHVlOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkbWxcIiB9LFxuICAgICAgdzE1OiB7IGtleTogXCJ4bWxuczp3MTVcIiwgdmFsdWU6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEyL3dvcmRtbFwiIH0sXG4gICAgICB3MTZjZXg6IHsga2V5OiBcInhtbG5zOncxNmNleFwiLCB2YWx1ZTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTgvd29yZG1sL2NleFwiIH0sXG4gICAgICB3MTZjaWQ6IHsga2V5OiBcInhtbG5zOncxNmNpZFwiLCB2YWx1ZTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTYvd29yZG1sL2NpZFwiIH0sXG4gICAgICB3MTY6IHsga2V5OiBcInhtbG5zOncxNlwiLCB2YWx1ZTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTgvd29yZG1sXCIgfSxcbiAgICAgIHcxNnNkdGRoOiB7IGtleTogXCJ4bWxuczp3MTZzZHRkaFwiLCB2YWx1ZTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMjAvd29yZG1sL3NkdGRhdGFoYXNoXCIgfSxcbiAgICAgIHcxNnNlOiB7IGtleTogXCJ4bWxuczp3MTZzZVwiLCB2YWx1ZTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTUvd29yZG1sL3N5bWV4XCIgfSxcbiAgICAgIElnbm9yYWJsZTogeyBrZXk6IFwibWM6SWdub3JhYmxlXCIsIHZhbHVlOiBcIncxNCB3MTUgdzE2c2UgdzE2Y2lkIHcxNiB3MTZjZXggdzE2c2R0ZGhcIiB9XG4gICAgfSxcbiAgICBjaGlsZHJlbjogZm9udHMubWFwKFxuICAgICAgKGZvbnQsIGkpID0+IGNyZWF0ZVJlZ3VsYXJGb250KHtcbiAgICAgICAgbmFtZTogZm9udC5uYW1lLFxuICAgICAgICBpbmRleDogaSArIDEsXG4gICAgICAgIGZvbnRLZXk6IGZvbnQuZm9udEtleVxuICAgICAgfSlcbiAgICApXG4gIH0pXG4pO1xuY2xhc3MgRm9udFdyYXBwZXIge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJmb250VGFibGVcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInJlbGF0aW9uc2hpcHNcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImZvbnRPcHRpb25zV2l0aEtleVwiLCBbXSk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9uczI7XG4gICAgdGhpcy5mb250T3B0aW9uc1dpdGhLZXkgPSBvcHRpb25zMi5tYXAoKG8pID0+IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIG8pLCB7IGZvbnRLZXk6IHVuaXF1ZVV1aWQoKSB9KSk7XG4gICAgdGhpcy5mb250VGFibGUgPSBjcmVhdGVGb250VGFibGUodGhpcy5mb250T3B0aW9uc1dpdGhLZXkpO1xuICAgIHRoaXMucmVsYXRpb25zaGlwcyA9IG5ldyBSZWxhdGlvbnNoaXBzKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHRpb25zMi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5yZWxhdGlvbnNoaXBzLmNyZWF0ZVJlbGF0aW9uc2hpcChcbiAgICAgICAgaSArIDEsXG4gICAgICAgIFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9mb250XCIsXG4gICAgICAgIGBmb250cy8ke29wdGlvbnMyW2ldLm5hbWV9Lm9kdHRmYFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgZ2V0IFZpZXcoKSB7XG4gICAgcmV0dXJuIHRoaXMuZm9udFRhYmxlO1xuICB9XG4gIGdldCBSZWxhdGlvbnNoaXBzKCkge1xuICAgIHJldHVybiB0aGlzLnJlbGF0aW9uc2hpcHM7XG4gIH1cbn1cbmNsYXNzIEZvb3RlckF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIHdwYzogXCJ4bWxuczp3cGNcIixcbiAgICAgIG1jOiBcInhtbG5zOm1jXCIsXG4gICAgICBvOiBcInhtbG5zOm9cIixcbiAgICAgIHI6IFwieG1sbnM6clwiLFxuICAgICAgbTogXCJ4bWxuczptXCIsXG4gICAgICB2OiBcInhtbG5zOnZcIixcbiAgICAgIHdwMTQ6IFwieG1sbnM6d3AxNFwiLFxuICAgICAgd3A6IFwieG1sbnM6d3BcIixcbiAgICAgIHcxMDogXCJ4bWxuczp3MTBcIixcbiAgICAgIHc6IFwieG1sbnM6d1wiLFxuICAgICAgdzE0OiBcInhtbG5zOncxNFwiLFxuICAgICAgdzE1OiBcInhtbG5zOncxNVwiLFxuICAgICAgd3BnOiBcInhtbG5zOndwZ1wiLFxuICAgICAgd3BpOiBcInhtbG5zOndwaVwiLFxuICAgICAgd25lOiBcInhtbG5zOnduZVwiLFxuICAgICAgd3BzOiBcInhtbG5zOndwc1wiLFxuICAgICAgY3A6IFwieG1sbnM6Y3BcIixcbiAgICAgIGRjOiBcInhtbG5zOmRjXCIsXG4gICAgICBkY3Rlcm1zOiBcInhtbG5zOmRjdGVybXNcIixcbiAgICAgIGRjbWl0eXBlOiBcInhtbG5zOmRjbWl0eXBlXCIsXG4gICAgICB4c2k6IFwieG1sbnM6eHNpXCIsXG4gICAgICB0eXBlOiBcInhzaTp0eXBlXCJcbiAgICB9KTtcbiAgfVxufVxubGV0IEZvb3RlciQxID0gY2xhc3MgRm9vdGVyIGV4dGVuZHMgSW5pdGlhbGl6YWJsZVhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHJlZmVyZW5jZU51bWJlciwgaW5pdENvbnRlbnQpIHtcbiAgICBzdXBlcihcInc6ZnRyXCIsIGluaXRDb250ZW50KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwicmVmSWRcIik7XG4gICAgdGhpcy5yZWZJZCA9IHJlZmVyZW5jZU51bWJlcjtcbiAgICBpZiAoIWluaXRDb250ZW50KSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgICAgbmV3IEZvb3RlckF0dHJpYnV0ZXMoe1xuICAgICAgICAgIHdwYzogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdDYW52YXNcIixcbiAgICAgICAgICBtYzogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvbWFya3VwLWNvbXBhdGliaWxpdHkvMjAwNlwiLFxuICAgICAgICAgIG86IFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6b2ZmaWNlXCIsXG4gICAgICAgICAgcjogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzXCIsXG4gICAgICAgICAgbTogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9tYXRoXCIsXG4gICAgICAgICAgdjogXCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOnZtbFwiLFxuICAgICAgICAgIHdwMTQ6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nRHJhd2luZ1wiLFxuICAgICAgICAgIHdwOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9kcmF3aW5nbWwvMjAwNi93b3JkcHJvY2Vzc2luZ0RyYXdpbmdcIixcbiAgICAgICAgICB3MTA6IFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6d29yZFwiLFxuICAgICAgICAgIHc6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL3dvcmRwcm9jZXNzaW5nbWwvMjAwNi9tYWluXCIsXG4gICAgICAgICAgdzE0OiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkbWxcIixcbiAgICAgICAgICB3MTU6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEyL3dvcmRtbFwiLFxuICAgICAgICAgIHdwZzogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdHcm91cFwiLFxuICAgICAgICAgIHdwaTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdJbmtcIixcbiAgICAgICAgICB3bmU6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDA2L3dvcmRtbFwiLFxuICAgICAgICAgIHdwczogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdTaGFwZVwiXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBnZXQgUmVmZXJlbmNlSWQoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVmSWQ7XG4gIH1cbiAgYWRkKGl0ZW0pIHtcbiAgICB0aGlzLnJvb3QucHVzaChpdGVtKTtcbiAgfVxufTtcbmNsYXNzIEZvb3RlcldyYXBwZXIge1xuICBjb25zdHJ1Y3RvcihtZWRpYSwgcmVmZXJlbmNlSWQsIGluaXRDb250ZW50KSB7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImZvb3RlclwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwicmVsYXRpb25zaGlwc1wiKTtcbiAgICB0aGlzLm1lZGlhID0gbWVkaWE7XG4gICAgdGhpcy5mb290ZXIgPSBuZXcgRm9vdGVyJDEocmVmZXJlbmNlSWQsIGluaXRDb250ZW50KTtcbiAgICB0aGlzLnJlbGF0aW9uc2hpcHMgPSBuZXcgUmVsYXRpb25zaGlwcygpO1xuICB9XG4gIGFkZChpdGVtKSB7XG4gICAgdGhpcy5mb290ZXIuYWRkKGl0ZW0pO1xuICB9XG4gIGFkZENoaWxkRWxlbWVudChjaGlsZEVsZW1lbnQpIHtcbiAgICB0aGlzLmZvb3Rlci5hZGRDaGlsZEVsZW1lbnQoY2hpbGRFbGVtZW50KTtcbiAgfVxuICBnZXQgVmlldygpIHtcbiAgICByZXR1cm4gdGhpcy5mb290ZXI7XG4gIH1cbiAgZ2V0IFJlbGF0aW9uc2hpcHMoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVsYXRpb25zaGlwcztcbiAgfVxuICBnZXQgTWVkaWEoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVkaWE7XG4gIH1cbn1cbmNsYXNzIEZvb3Rub3RlQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgdHlwZTogXCJ3OnR5cGVcIixcbiAgICAgIGlkOiBcInc6aWRcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBGb290bm90ZVJlZiBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwidzpmb290bm90ZVJlZlwiKTtcbiAgfVxufVxuY2xhc3MgRm9vdG5vdGVSZWZSdW4gZXh0ZW5kcyBSdW4ge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcih7XG4gICAgICBzdHlsZTogXCJGb290bm90ZVJlZmVyZW5jZVwiXG4gICAgfSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IEZvb3Rub3RlUmVmKCkpO1xuICB9XG59XG5jb25zdCBGb290bm90ZVR5cGUgPSB7XG4gIFNFUEVSQVRPUjogXCJzZXBhcmF0b3JcIixcbiAgQ09OVElOVUFUSU9OX1NFUEVSQVRPUjogXCJjb250aW51YXRpb25TZXBhcmF0b3JcIlxufTtcbmNsYXNzIEZvb3Rub3RlIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcInc6Zm9vdG5vdGVcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgRm9vdG5vdGVBdHRyaWJ1dGVzKHtcbiAgICAgICAgdHlwZTogb3B0aW9uczIudHlwZSxcbiAgICAgICAgaWQ6IG9wdGlvbnMyLmlkXG4gICAgICB9KVxuICAgICk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHRpb25zMi5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgY2hpbGQgPSBvcHRpb25zMi5jaGlsZHJlbltpXTtcbiAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgIGNoaWxkLmFkZFJ1blRvRnJvbnQobmV3IEZvb3Rub3RlUmVmUnVuKCkpO1xuICAgICAgfVxuICAgICAgdGhpcy5yb290LnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxufVxuY2xhc3MgQ29udGludWF0aW9uU2VwZXJhdG9yIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJ3OmNvbnRpbnVhdGlvblNlcGFyYXRvclwiKTtcbiAgfVxufVxuY2xhc3MgQ29udGludWF0aW9uU2VwZXJhdG9yUnVuIGV4dGVuZHMgUnVuIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoe30pO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBDb250aW51YXRpb25TZXBlcmF0b3IoKSk7XG4gIH1cbn1cbmNsYXNzIFNlcGVyYXRvciBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwidzpzZXBhcmF0b3JcIik7XG4gIH1cbn1cbmNsYXNzIFNlcGVyYXRvclJ1biBleHRlbmRzIFJ1biB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKHt9KTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgU2VwZXJhdG9yKCkpO1xuICB9XG59XG5jbGFzcyBGb290bm90ZXNBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICB3cGM6IFwieG1sbnM6d3BjXCIsXG4gICAgICBtYzogXCJ4bWxuczptY1wiLFxuICAgICAgbzogXCJ4bWxuczpvXCIsXG4gICAgICByOiBcInhtbG5zOnJcIixcbiAgICAgIG06IFwieG1sbnM6bVwiLFxuICAgICAgdjogXCJ4bWxuczp2XCIsXG4gICAgICB3cDE0OiBcInhtbG5zOndwMTRcIixcbiAgICAgIHdwOiBcInhtbG5zOndwXCIsXG4gICAgICB3MTA6IFwieG1sbnM6dzEwXCIsXG4gICAgICB3OiBcInhtbG5zOndcIixcbiAgICAgIHcxNDogXCJ4bWxuczp3MTRcIixcbiAgICAgIHcxNTogXCJ4bWxuczp3MTVcIixcbiAgICAgIHdwZzogXCJ4bWxuczp3cGdcIixcbiAgICAgIHdwaTogXCJ4bWxuczp3cGlcIixcbiAgICAgIHduZTogXCJ4bWxuczp3bmVcIixcbiAgICAgIHdwczogXCJ4bWxuczp3cHNcIixcbiAgICAgIElnbm9yYWJsZTogXCJtYzpJZ25vcmFibGVcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBGb290Tm90ZXMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6Zm9vdG5vdGVzXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IEZvb3Rub3Rlc0F0dHJpYnV0ZXMoe1xuICAgICAgICB3cGM6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nQ2FudmFzXCIsXG4gICAgICAgIG1jOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9tYXJrdXAtY29tcGF0aWJpbGl0eS8yMDA2XCIsXG4gICAgICAgIG86IFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6b2ZmaWNlXCIsXG4gICAgICAgIHI6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwc1wiLFxuICAgICAgICBtOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L21hdGhcIixcbiAgICAgICAgdjogXCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOnZtbFwiLFxuICAgICAgICB3cDE0OiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0RyYXdpbmdcIixcbiAgICAgICAgd3A6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL2RyYXdpbmdtbC8yMDA2L3dvcmRwcm9jZXNzaW5nRHJhd2luZ1wiLFxuICAgICAgICB3MTA6IFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6d29yZFwiLFxuICAgICAgICB3OiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy93b3JkcHJvY2Vzc2luZ21sLzIwMDYvbWFpblwiLFxuICAgICAgICB3MTQ6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRtbFwiLFxuICAgICAgICB3MTU6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEyL3dvcmRtbFwiLFxuICAgICAgICB3cGc6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nR3JvdXBcIixcbiAgICAgICAgd3BpOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0lua1wiLFxuICAgICAgICB3bmU6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDA2L3dvcmRtbFwiLFxuICAgICAgICB3cHM6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nU2hhcGVcIixcbiAgICAgICAgSWdub3JhYmxlOiBcIncxNCB3MTUgd3AxNFwiXG4gICAgICB9KVxuICAgICk7XG4gICAgY29uc3QgYmVnaW4gPSBuZXcgRm9vdG5vdGUoe1xuICAgICAgaWQ6IC0xLFxuICAgICAgdHlwZTogRm9vdG5vdGVUeXBlLlNFUEVSQVRPUixcbiAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgIG5ldyBQYXJhZ3JhcGgoe1xuICAgICAgICAgIHNwYWNpbmc6IHtcbiAgICAgICAgICAgIGFmdGVyOiAwLFxuICAgICAgICAgICAgbGluZTogMjQwLFxuICAgICAgICAgICAgbGluZVJ1bGU6IExpbmVSdWxlVHlwZS5BVVRPXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjaGlsZHJlbjogW25ldyBTZXBlcmF0b3JSdW4oKV1cbiAgICAgICAgfSlcbiAgICAgIF1cbiAgICB9KTtcbiAgICB0aGlzLnJvb3QucHVzaChiZWdpbik7XG4gICAgY29uc3Qgc3BhY2luZyA9IG5ldyBGb290bm90ZSh7XG4gICAgICBpZDogMCxcbiAgICAgIHR5cGU6IEZvb3Rub3RlVHlwZS5DT05USU5VQVRJT05fU0VQRVJBVE9SLFxuICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgbmV3IFBhcmFncmFwaCh7XG4gICAgICAgICAgc3BhY2luZzoge1xuICAgICAgICAgICAgYWZ0ZXI6IDAsXG4gICAgICAgICAgICBsaW5lOiAyNDAsXG4gICAgICAgICAgICBsaW5lUnVsZTogTGluZVJ1bGVUeXBlLkFVVE9cbiAgICAgICAgICB9LFxuICAgICAgICAgIGNoaWxkcmVuOiBbbmV3IENvbnRpbnVhdGlvblNlcGVyYXRvclJ1bigpXVxuICAgICAgICB9KVxuICAgICAgXVxuICAgIH0pO1xuICAgIHRoaXMucm9vdC5wdXNoKHNwYWNpbmcpO1xuICB9XG4gIGNyZWF0ZUZvb3ROb3RlKGlkLCBwYXJhZ3JhcGgpIHtcbiAgICBjb25zdCBmb290bm90ZSA9IG5ldyBGb290bm90ZSh7XG4gICAgICBpZCxcbiAgICAgIGNoaWxkcmVuOiBwYXJhZ3JhcGhcbiAgICB9KTtcbiAgICB0aGlzLnJvb3QucHVzaChmb290bm90ZSk7XG4gIH1cbn1cbmNsYXNzIEZvb3Rub3Rlc1dyYXBwZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiZm9vdG5vdGVzc1wiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwicmVsYXRpb25zaGlwc1wiKTtcbiAgICB0aGlzLmZvb3Rub3Rlc3MgPSBuZXcgRm9vdE5vdGVzKCk7XG4gICAgdGhpcy5yZWxhdGlvbnNoaXBzID0gbmV3IFJlbGF0aW9uc2hpcHMoKTtcbiAgfVxuICBnZXQgVmlldygpIHtcbiAgICByZXR1cm4gdGhpcy5mb290bm90ZXNzO1xuICB9XG4gIGdldCBSZWxhdGlvbnNoaXBzKCkge1xuICAgIHJldHVybiB0aGlzLnJlbGF0aW9uc2hpcHM7XG4gIH1cbn1cbmNsYXNzIEhlYWRlckF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIHdwYzogXCJ4bWxuczp3cGNcIixcbiAgICAgIG1jOiBcInhtbG5zOm1jXCIsXG4gICAgICBvOiBcInhtbG5zOm9cIixcbiAgICAgIHI6IFwieG1sbnM6clwiLFxuICAgICAgbTogXCJ4bWxuczptXCIsXG4gICAgICB2OiBcInhtbG5zOnZcIixcbiAgICAgIHdwMTQ6IFwieG1sbnM6d3AxNFwiLFxuICAgICAgd3A6IFwieG1sbnM6d3BcIixcbiAgICAgIHcxMDogXCJ4bWxuczp3MTBcIixcbiAgICAgIHc6IFwieG1sbnM6d1wiLFxuICAgICAgdzE0OiBcInhtbG5zOncxNFwiLFxuICAgICAgdzE1OiBcInhtbG5zOncxNVwiLFxuICAgICAgd3BnOiBcInhtbG5zOndwZ1wiLFxuICAgICAgd3BpOiBcInhtbG5zOndwaVwiLFxuICAgICAgd25lOiBcInhtbG5zOnduZVwiLFxuICAgICAgd3BzOiBcInhtbG5zOndwc1wiLFxuICAgICAgY3A6IFwieG1sbnM6Y3BcIixcbiAgICAgIGRjOiBcInhtbG5zOmRjXCIsXG4gICAgICBkY3Rlcm1zOiBcInhtbG5zOmRjdGVybXNcIixcbiAgICAgIGRjbWl0eXBlOiBcInhtbG5zOmRjbWl0eXBlXCIsXG4gICAgICB4c2k6IFwieG1sbnM6eHNpXCIsXG4gICAgICB0eXBlOiBcInhzaTp0eXBlXCIsXG4gICAgICBjeDogXCJ4bWxuczpjeFwiLFxuICAgICAgY3gxOiBcInhtbG5zOmN4MVwiLFxuICAgICAgY3gyOiBcInhtbG5zOmN4MlwiLFxuICAgICAgY3gzOiBcInhtbG5zOmN4M1wiLFxuICAgICAgY3g0OiBcInhtbG5zOmN4NFwiLFxuICAgICAgY3g1OiBcInhtbG5zOmN4NVwiLFxuICAgICAgY3g2OiBcInhtbG5zOmN4NlwiLFxuICAgICAgY3g3OiBcInhtbG5zOmN4N1wiLFxuICAgICAgY3g4OiBcInhtbG5zOmN4OFwiLFxuICAgICAgdzE2Y2lkOiBcInhtbG5zOncxNmNpZFwiLFxuICAgICAgdzE2c2U6IFwieG1sbnM6dzE2c2VcIlxuICAgIH0pO1xuICB9XG59XG5sZXQgSGVhZGVyJDEgPSBjbGFzcyBIZWFkZXIgZXh0ZW5kcyBJbml0aWFsaXphYmxlWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocmVmZXJlbmNlTnVtYmVyLCBpbml0Q29udGVudCkge1xuICAgIHN1cGVyKFwidzpoZHJcIiwgaW5pdENvbnRlbnQpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJyZWZJZFwiKTtcbiAgICB0aGlzLnJlZklkID0gcmVmZXJlbmNlTnVtYmVyO1xuICAgIGlmICghaW5pdENvbnRlbnQpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgICBuZXcgSGVhZGVyQXR0cmlidXRlcyh7XG4gICAgICAgICAgd3BjOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0NhbnZhc1wiLFxuICAgICAgICAgIG1jOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9tYXJrdXAtY29tcGF0aWJpbGl0eS8yMDA2XCIsXG4gICAgICAgICAgbzogXCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpvZmZpY2VcIixcbiAgICAgICAgICByOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHNcIixcbiAgICAgICAgICBtOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L21hdGhcIixcbiAgICAgICAgICB2OiBcInVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206dm1sXCIsXG4gICAgICAgICAgd3AxNDogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdEcmF3aW5nXCIsXG4gICAgICAgICAgd3A6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL2RyYXdpbmdtbC8yMDA2L3dvcmRwcm9jZXNzaW5nRHJhd2luZ1wiLFxuICAgICAgICAgIHcxMDogXCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTp3b3JkXCIsXG4gICAgICAgICAgdzogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvd29yZHByb2Nlc3NpbmdtbC8yMDA2L21haW5cIixcbiAgICAgICAgICB3MTQ6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRtbFwiLFxuICAgICAgICAgIHcxNTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTIvd29yZG1sXCIsXG4gICAgICAgICAgd3BnOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0dyb3VwXCIsXG4gICAgICAgICAgd3BpOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0lua1wiLFxuICAgICAgICAgIHduZTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMDYvd29yZG1sXCIsXG4gICAgICAgICAgd3BzOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ1NoYXBlXCIsXG4gICAgICAgICAgY3g6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE0L2NoYXJ0ZXhcIixcbiAgICAgICAgICBjeDE6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE1LzkvOC9jaGFydGV4XCIsXG4gICAgICAgICAgY3gyOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2RyYXdpbmcvMjAxNS8xMC8yMS9jaGFydGV4XCIsXG4gICAgICAgICAgY3gzOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2RyYXdpbmcvMjAxNi81LzkvY2hhcnRleFwiLFxuICAgICAgICAgIGN4NDogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9kcmF3aW5nLzIwMTYvNS8xMC9jaGFydGV4XCIsXG4gICAgICAgICAgY3g1OiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2RyYXdpbmcvMjAxNi81LzExL2NoYXJ0ZXhcIixcbiAgICAgICAgICBjeDY6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE2LzUvMTIvY2hhcnRleFwiLFxuICAgICAgICAgIGN4NzogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9kcmF3aW5nLzIwMTYvNS8xMy9jaGFydGV4XCIsXG4gICAgICAgICAgY3g4OiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2RyYXdpbmcvMjAxNi81LzE0L2NoYXJ0ZXhcIixcbiAgICAgICAgICB3MTZjaWQ6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDE2L3dvcmRtbC9jaWRcIixcbiAgICAgICAgICB3MTZzZTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTUvd29yZG1sL3N5bWV4XCJcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGdldCBSZWZlcmVuY2VJZCgpIHtcbiAgICByZXR1cm4gdGhpcy5yZWZJZDtcbiAgfVxuICBhZGQoaXRlbSkge1xuICAgIHRoaXMucm9vdC5wdXNoKGl0ZW0pO1xuICB9XG59O1xuY2xhc3MgSGVhZGVyV3JhcHBlciB7XG4gIGNvbnN0cnVjdG9yKG1lZGlhLCByZWZlcmVuY2VJZCwgaW5pdENvbnRlbnQpIHtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiaGVhZGVyXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJyZWxhdGlvbnNoaXBzXCIpO1xuICAgIHRoaXMubWVkaWEgPSBtZWRpYTtcbiAgICB0aGlzLmhlYWRlciA9IG5ldyBIZWFkZXIkMShyZWZlcmVuY2VJZCwgaW5pdENvbnRlbnQpO1xuICAgIHRoaXMucmVsYXRpb25zaGlwcyA9IG5ldyBSZWxhdGlvbnNoaXBzKCk7XG4gIH1cbiAgYWRkKGl0ZW0pIHtcbiAgICB0aGlzLmhlYWRlci5hZGQoaXRlbSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgYWRkQ2hpbGRFbGVtZW50KGNoaWxkRWxlbWVudCkge1xuICAgIHRoaXMuaGVhZGVyLmFkZENoaWxkRWxlbWVudChjaGlsZEVsZW1lbnQpO1xuICB9XG4gIGdldCBWaWV3KCkge1xuICAgIHJldHVybiB0aGlzLmhlYWRlcjtcbiAgfVxuICBnZXQgUmVsYXRpb25zaGlwcygpIHtcbiAgICByZXR1cm4gdGhpcy5yZWxhdGlvbnNoaXBzO1xuICB9XG4gIGdldCBNZWRpYSgpIHtcbiAgICByZXR1cm4gdGhpcy5tZWRpYTtcbiAgfVxufVxuY2xhc3MgTWVkaWEge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuY3Rpb25hbC9wcmVmZXItcmVhZG9ubHktdHlwZVxuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJtYXBcIik7XG4gICAgdGhpcy5tYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICB9XG4gIGFkZEltYWdlKGtleSwgbWVkaWFEYXRhKSB7XG4gICAgdGhpcy5tYXAuc2V0KGtleSwgbWVkaWFEYXRhKTtcbiAgfVxuICBnZXQgQXJyYXkoKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5tYXAudmFsdWVzKCkpO1xuICB9XG59XG5jb25zdCBXT1JLQVJPVU5EMiA9IFwiXCI7XG5jb25zdCBMZXZlbEZvcm1hdCA9IHtcbiAgREVDSU1BTDogXCJkZWNpbWFsXCIsXG4gIFVQUEVSX1JPTUFOOiBcInVwcGVyUm9tYW5cIixcbiAgTE9XRVJfUk9NQU46IFwibG93ZXJSb21hblwiLFxuICBVUFBFUl9MRVRURVI6IFwidXBwZXJMZXR0ZXJcIixcbiAgTE9XRVJfTEVUVEVSOiBcImxvd2VyTGV0dGVyXCIsXG4gIE9SRElOQUw6IFwib3JkaW5hbFwiLFxuICBDQVJESU5BTF9URVhUOiBcImNhcmRpbmFsVGV4dFwiLFxuICBPUkRJTkFMX1RFWFQ6IFwib3JkaW5hbFRleHRcIixcbiAgSEVYOiBcImhleFwiLFxuICBDSElDQUdPOiBcImNoaWNhZ29cIixcbiAgSURFT0dSQVBIX19ESUdJVEFMOiBcImlkZW9ncmFwaERpZ2l0YWxcIixcbiAgSkFQQU5FU0VfQ09VTlRJTkc6IFwiamFwYW5lc2VDb3VudGluZ1wiLFxuICBBSVVFTzogXCJhaXVlb1wiLFxuICBJUk9IQTogXCJpcm9oYVwiLFxuICBERUNJTUFMX0ZVTExfV0lEVEg6IFwiZGVjaW1hbEZ1bGxXaWR0aFwiLFxuICBERUNJTUFMX0hBTEZfV0lEVEg6IFwiZGVjaW1hbEhhbGZXaWR0aFwiLFxuICBKQVBBTkVTRV9MRUdBTDogXCJqYXBhbmVzZUxlZ2FsXCIsXG4gIEpBUEFORVNFX0RJR0lUQUxfVEVOX1RIT1VTQU5EOiBcImphcGFuZXNlRGlnaXRhbFRlblRob3VzYW5kXCIsXG4gIERFQ0lNQUxfRU5DTE9TRURfQ0lSQ0xFOiBcImRlY2ltYWxFbmNsb3NlZENpcmNsZVwiLFxuICBERUNJTUFMX0ZVTExfV0lEVEgyOiBcImRlY2ltYWxGdWxsV2lkdGgyXCIsXG4gIEFJVUVPX0ZVTExfV0lEVEg6IFwiYWl1ZW9GdWxsV2lkdGhcIixcbiAgSVJPSEFfRlVMTF9XSURUSDogXCJpcm9oYUZ1bGxXaWR0aFwiLFxuICBERUNJTUFMX1pFUk86IFwiZGVjaW1hbFplcm9cIixcbiAgQlVMTEVUOiBcImJ1bGxldFwiLFxuICBHQU5BREE6IFwiZ2FuYWRhXCIsXG4gIENIT1NVTkc6IFwiY2hvc3VuZ1wiLFxuICBERUNJTUFMX0VOQ0xPU0VEX0ZVTExTVE9QOiBcImRlY2ltYWxFbmNsb3NlZEZ1bGxzdG9wXCIsXG4gIERFQ0lNQUxfRU5DTE9TRURfUEFSRU5USEVTRVM6IFwiZGVjaW1hbEVuY2xvc2VkUGFyZW5cIixcbiAgREVDSU1BTF9FTkNMT1NFRF9DSVJDTEVfQ0hJTkVTRTogXCJkZWNpbWFsRW5jbG9zZWRDaXJjbGVDaGluZXNlXCIsXG4gIElERU9HUkFQSF9FTkNMT1NFRF9DSVJDTEU6IFwiaWRlb2dyYXBoRW5jbG9zZWRDaXJjbGVcIixcbiAgSURFT0dSQVBIX1RSQURJVElPTkFMOiBcImlkZW9ncmFwaFRyYWRpdGlvbmFsXCIsXG4gIElERU9HUkFQSF9aT0RJQUM6IFwiaWRlb2dyYXBoWm9kaWFjXCIsXG4gIElERU9HUkFQSF9aT0RJQUNfVFJBRElUSU9OQUw6IFwiaWRlb2dyYXBoWm9kaWFjVHJhZGl0aW9uYWxcIixcbiAgVEFJV0FORVNFX0NPVU5USU5HOiBcInRhaXdhbmVzZUNvdW50aW5nXCIsXG4gIElERU9HUkFQSF9MRUdBTF9UUkFESVRJT05BTDogXCJpZGVvZ3JhcGhMZWdhbFRyYWRpdGlvbmFsXCIsXG4gIFRBSVdBTkVTRV9DT1VOVElOR19USE9VU0FORDogXCJ0YWl3YW5lc2VDb3VudGluZ1Rob3VzYW5kXCIsXG4gIFRBSVdBTkVTRV9ESUdJVEFMOiBcInRhaXdhbmVzZURpZ2l0YWxcIixcbiAgQ0hJTkVTRV9DT1VOVElORzogXCJjaGluZXNlQ291bnRpbmdcIixcbiAgQ0hJTkVTRV9MRUdBTF9TSU1QTElGSUVEOiBcImNoaW5lc2VMZWdhbFNpbXBsaWZpZWRcIixcbiAgQ0hJTkVTRV9DT1VOVElOR19USE9VU0FORDogXCJjaGluZXNlQ291bnRpbmdUaG91c2FuZFwiLFxuICBLT1JFQU5fRElHSVRBTDogXCJrb3JlYW5EaWdpdGFsXCIsXG4gIEtPUkVBTl9DT1VOVElORzogXCJrb3JlYW5Db3VudGluZ1wiLFxuICBLT1JFQU5fTEVHQUw6IFwia29yZWFuTGVnYWxcIixcbiAgS09SRUFOX0RJR0lUQUwyOiBcImtvcmVhbkRpZ2l0YWwyXCIsXG4gIFZJRVROQU1FU0VfQ09VTlRJTkc6IFwidmlldG5hbWVzZUNvdW50aW5nXCIsXG4gIFJVU1NJQU5fTE9XRVI6IFwicnVzc2lhbkxvd2VyXCIsXG4gIFJVU1NJQU5fVVBQRVI6IFwicnVzc2lhblVwcGVyXCIsXG4gIE5PTkU6IFwibm9uZVwiLFxuICBOVU1CRVJfSU5fREFTSDogXCJudW1iZXJJbkRhc2hcIixcbiAgSEVCUkVXMTogXCJoZWJyZXcxXCIsXG4gIEhFQlJFVzI6IFwiaGVicmV3MlwiLFxuICBBUkFCSUNfQUxQSEE6IFwiYXJhYmljQWxwaGFcIixcbiAgQVJBQklDX0FCSkFEOiBcImFyYWJpY0FiamFkXCIsXG4gIEhJTkRJX1ZPV0VMUzogXCJoaW5kaVZvd2Vsc1wiLFxuICBISU5ESV9DT05TT05BTlRTOiBcImhpbmRpQ29uc29uYW50c1wiLFxuICBISU5ESV9OVU1CRVJTOiBcImhpbmRpTnVtYmVyc1wiLFxuICBISU5ESV9DT1VOVElORzogXCJoaW5kaUNvdW50aW5nXCIsXG4gIFRIQUlfTEVUVEVSUzogXCJ0aGFpTGV0dGVyc1wiLFxuICBUSEFJX05VTUJFUlM6IFwidGhhaU51bWJlcnNcIixcbiAgVEhBSV9DT1VOVElORzogXCJ0aGFpQ291bnRpbmdcIixcbiAgQkFIVF9URVhUOiBcImJhaHRUZXh0XCIsXG4gIERPTExBUl9URVhUOiBcImRvbGxhclRleHRcIixcbiAgQ1VTVE9NOiBcImN1c3RvbVwiXG59O1xuY2xhc3MgTGV2ZWxBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICBpbHZsOiBcInc6aWx2bFwiLFxuICAgICAgdGVudGF0aXZlOiBcIncxNTp0ZW50YXRpdmVcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBOdW1iZXJGb3JtYXQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgIHN1cGVyKFwidzpudW1GbXRcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgQXR0cmlidXRlcyh7XG4gICAgICAgIHZhbDogdmFsdWVcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgTGV2ZWxUZXh0IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICBzdXBlcihcInc6bHZsVGV4dFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBBdHRyaWJ1dGVzKHtcbiAgICAgICAgdmFsOiB2YWx1ZVxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jbGFzcyBMZXZlbEpjIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICBzdXBlcihcInc6bHZsSmNcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgQXR0cmlidXRlcyh7XG4gICAgICAgIHZhbDogdmFsdWVcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY29uc3QgTGV2ZWxTdWZmaXggPSB7XG4gIE5PVEhJTkc6IFwibm90aGluZ1wiLFxuICBTUEFDRTogXCJzcGFjZVwiLFxuICBUQUI6IFwidGFiXCJcbn07XG5jbGFzcyBTdWZmaXggZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgIHN1cGVyKFwidzpzdWZmXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IEF0dHJpYnV0ZXMoe1xuICAgICAgICB2YWw6IHZhbHVlXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNsYXNzIElzTGVnYWxOdW1iZXJpbmdTdHlsZSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwidzppc0xnbFwiKTtcbiAgfVxufVxuY2xhc3MgTGV2ZWxCYXNlIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIGxldmVsLFxuICAgIGZvcm1hdDogZm9ybWF0MixcbiAgICB0ZXh0LFxuICAgIGFsaWdubWVudCA9IEFsaWdubWVudFR5cGUuU1RBUlQsXG4gICAgc3RhcnQgPSAxLFxuICAgIHN0eWxlLFxuICAgIHN1ZmZpeCxcbiAgICBpc0xlZ2FsTnVtYmVyaW5nU3R5bGVcbiAgfSkge1xuICAgIHN1cGVyKFwidzpsdmxcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInBhcmFncmFwaFByb3BlcnRpZXNcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInJ1blByb3BlcnRpZXNcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE51bWJlclZhbHVlRWxlbWVudChcInc6c3RhcnRcIiwgZGVjaW1hbE51bWJlcihzdGFydCkpKTtcbiAgICBpZiAoZm9ybWF0Mikge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE51bWJlckZvcm1hdChmb3JtYXQyKSk7XG4gICAgfVxuICAgIGlmIChzdWZmaXgpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTdWZmaXgoc3VmZml4KSk7XG4gICAgfVxuICAgIGlmIChpc0xlZ2FsTnVtYmVyaW5nU3R5bGUpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBJc0xlZ2FsTnVtYmVyaW5nU3R5bGUoKSk7XG4gICAgfVxuICAgIGlmICh0ZXh0KSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgTGV2ZWxUZXh0KHRleHQpKTtcbiAgICB9XG4gICAgdGhpcy5yb290LnB1c2gobmV3IExldmVsSmMoYWxpZ25tZW50KSk7XG4gICAgdGhpcy5wYXJhZ3JhcGhQcm9wZXJ0aWVzID0gbmV3IFBhcmFncmFwaFByb3BlcnRpZXMoc3R5bGUgJiYgc3R5bGUucGFyYWdyYXBoKTtcbiAgICB0aGlzLnJ1blByb3BlcnRpZXMgPSBuZXcgUnVuUHJvcGVydGllcyhzdHlsZSAmJiBzdHlsZS5ydW4pO1xuICAgIHRoaXMucm9vdC5wdXNoKHRoaXMucGFyYWdyYXBoUHJvcGVydGllcyk7XG4gICAgdGhpcy5yb290LnB1c2godGhpcy5ydW5Qcm9wZXJ0aWVzKTtcbiAgICBpZiAobGV2ZWwgPiA5KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiTGV2ZWwgY2Fubm90IGJlIGdyZWF0ZXIgdGhhbiA5LiBSZWFkIG1vcmUgaGVyZTogaHR0cHM6Ly9hbnN3ZXJzLm1pY3Jvc29mdC5jb20vZW4tdXMvbXNvZmZpY2UvZm9ydW0vYWxsL2RvZXMtd29yZC1zdXBwb3J0LW1vcmUtdGhhbi05LWxpc3QtbGV2ZWxzL2QxMzBmZGNkLTE3ODEtNDQ2ZC04Yzg0LWM2Yzc5MTI0ZTRkN1wiXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBMZXZlbEF0dHJpYnV0ZXMoe1xuICAgICAgICBpbHZsOiBkZWNpbWFsTnVtYmVyKGxldmVsKSxcbiAgICAgICAgdGVudGF0aXZlOiAxXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNsYXNzIExldmVsIGV4dGVuZHMgTGV2ZWxCYXNlIHtcbiAgLy8gVGhpcyBpcyB0aGUgbGV2ZWwgdGhhdCBzaXRzIHVuZGVyIGFic3RyYWN0TnVtLiBXZSBtYWtlIGFcbiAgLy8gaGFuZGZ1bCBvZiBwcm9wZXJ0aWVzIHJlcXVpcmVkXG59XG5jbGFzcyBMZXZlbEZvck92ZXJyaWRlIGV4dGVuZHMgTGV2ZWxCYXNlIHtcbn1cbmNsYXNzIE11bHRpTGV2ZWxUeXBlIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICBzdXBlcihcInc6bXVsdGlMZXZlbFR5cGVcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgQXR0cmlidXRlcyh7XG4gICAgICAgIHZhbDogdmFsdWVcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgQWJzdHJhY3ROdW1iZXJpbmdBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICBhYnN0cmFjdE51bUlkOiBcInc6YWJzdHJhY3ROdW1JZFwiLFxuICAgICAgcmVzdGFydE51bWJlcmluZ0FmdGVyQnJlYWs6IFwidzE1OnJlc3RhcnROdW1iZXJpbmdBZnRlckJyZWFrXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgQWJzdHJhY3ROdW1iZXJpbmcgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihpZCwgbGV2ZWxPcHRpb25zKSB7XG4gICAgc3VwZXIoXCJ3OmFic3RyYWN0TnVtXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJpZFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBBYnN0cmFjdE51bWJlcmluZ0F0dHJpYnV0ZXMoe1xuICAgICAgICBhYnN0cmFjdE51bUlkOiBkZWNpbWFsTnVtYmVyKGlkKSxcbiAgICAgICAgcmVzdGFydE51bWJlcmluZ0FmdGVyQnJlYWs6IDBcbiAgICAgIH0pXG4gICAgKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgTXVsdGlMZXZlbFR5cGUoXCJoeWJyaWRNdWx0aWxldmVsXCIpKTtcbiAgICB0aGlzLmlkID0gaWQ7XG4gICAgZm9yIChjb25zdCBvcHRpb24gb2YgbGV2ZWxPcHRpb25zKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgTGV2ZWwob3B0aW9uKSk7XG4gICAgfVxuICB9XG59XG5jbGFzcyBBYnN0cmFjdE51bUlkIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICBzdXBlcihcInc6YWJzdHJhY3ROdW1JZFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBBdHRyaWJ1dGVzKHtcbiAgICAgICAgdmFsOiB2YWx1ZVxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jbGFzcyBOdW1BdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7IG51bUlkOiBcInc6bnVtSWRcIiB9KTtcbiAgfVxufVxuY2xhc3MgQ29uY3JldGVOdW1iZXJpbmcgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwidzpudW1cIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIm51bUlkXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJyZWZlcmVuY2VcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImluc3RhbmNlXCIpO1xuICAgIHRoaXMubnVtSWQgPSBvcHRpb25zMi5udW1JZDtcbiAgICB0aGlzLnJlZmVyZW5jZSA9IG9wdGlvbnMyLnJlZmVyZW5jZTtcbiAgICB0aGlzLmluc3RhbmNlID0gb3B0aW9uczIuaW5zdGFuY2U7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgTnVtQXR0cmlidXRlcyh7XG4gICAgICAgIG51bUlkOiBkZWNpbWFsTnVtYmVyKG9wdGlvbnMyLm51bUlkKVxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBBYnN0cmFjdE51bUlkKGRlY2ltYWxOdW1iZXIob3B0aW9uczIuYWJzdHJhY3ROdW1JZCkpKTtcbiAgICBpZiAob3B0aW9uczIub3ZlcnJpZGVMZXZlbHMgJiYgb3B0aW9uczIub3ZlcnJpZGVMZXZlbHMubGVuZ3RoKSB7XG4gICAgICBmb3IgKGNvbnN0IGxldmVsIG9mIG9wdGlvbnMyLm92ZXJyaWRlTGV2ZWxzKSB7XG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBMZXZlbE92ZXJyaWRlKGxldmVsLm51bSwgbGV2ZWwuc3RhcnQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmNsYXNzIExldmVsT3ZlcnJpZGVBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7IGlsdmw6IFwidzppbHZsXCIgfSk7XG4gIH1cbn1cbmNsYXNzIExldmVsT3ZlcnJpZGUgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihsZXZlbE51bSwgc3RhcnQpIHtcbiAgICBzdXBlcihcInc6bHZsT3ZlcnJpZGVcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IExldmVsT3ZlcnJpZGVBdHRyaWJ1dGVzKHsgaWx2bDogbGV2ZWxOdW0gfSkpO1xuICAgIGlmIChzdGFydCAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgU3RhcnRPdmVycmlkZShzdGFydCkpO1xuICAgIH1cbiAgfVxufVxuY2xhc3MgU3RhcnRPdmVycmlkZUF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHsgdmFsOiBcInc6dmFsXCIgfSk7XG4gIH1cbn1cbmNsYXNzIFN0YXJ0T3ZlcnJpZGUgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihzdGFydCkge1xuICAgIHN1cGVyKFwidzpzdGFydE92ZXJyaWRlXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTdGFydE92ZXJyaWRlQXR0cmlidXRlcyh7IHZhbDogc3RhcnQgfSkpO1xuICB9XG59XG5jbGFzcyBOdW1iZXJpbmcgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwidzpudW1iZXJpbmdcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImFic3RyYWN0TnVtYmVyaW5nTWFwXCIsIC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCkpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJjb25jcmV0ZU51bWJlcmluZ01hcFwiLCAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJyZWZlcmVuY2VDb25maWdNYXBcIiwgLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImFic3RyYWN0TnVtVW5pcXVlTnVtZXJpY0lkXCIsIGFic3RyYWN0TnVtVW5pcXVlTnVtZXJpY0lkR2VuKCkpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJjb25jcmV0ZU51bVVuaXF1ZU51bWVyaWNJZFwiLCBjb25jcmV0ZU51bVVuaXF1ZU51bWVyaWNJZEdlbigpKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBEb2N1bWVudEF0dHJpYnV0ZXMoe1xuICAgICAgICB3cGM6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nQ2FudmFzXCIsXG4gICAgICAgIG1jOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9tYXJrdXAtY29tcGF0aWJpbGl0eS8yMDA2XCIsXG4gICAgICAgIG86IFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6b2ZmaWNlXCIsXG4gICAgICAgIHI6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwc1wiLFxuICAgICAgICBtOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L21hdGhcIixcbiAgICAgICAgdjogXCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOnZtbFwiLFxuICAgICAgICB3cDE0OiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0RyYXdpbmdcIixcbiAgICAgICAgd3A6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL2RyYXdpbmdtbC8yMDA2L3dvcmRwcm9jZXNzaW5nRHJhd2luZ1wiLFxuICAgICAgICB3MTA6IFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6d29yZFwiLFxuICAgICAgICB3OiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy93b3JkcHJvY2Vzc2luZ21sLzIwMDYvbWFpblwiLFxuICAgICAgICB3MTQ6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRtbFwiLFxuICAgICAgICB3MTU6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEyL3dvcmRtbFwiLFxuICAgICAgICB3cGc6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nR3JvdXBcIixcbiAgICAgICAgd3BpOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0lua1wiLFxuICAgICAgICB3bmU6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDA2L3dvcmRtbFwiLFxuICAgICAgICB3cHM6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nU2hhcGVcIixcbiAgICAgICAgSWdub3JhYmxlOiBcIncxNCB3MTUgd3AxNFwiXG4gICAgICB9KVxuICAgICk7XG4gICAgY29uc3QgYWJzdHJhY3ROdW1iZXJpbmcgPSBuZXcgQWJzdHJhY3ROdW1iZXJpbmcodGhpcy5hYnN0cmFjdE51bVVuaXF1ZU51bWVyaWNJZCgpLCBbXG4gICAgICB7XG4gICAgICAgIGxldmVsOiAwLFxuICAgICAgICBmb3JtYXQ6IExldmVsRm9ybWF0LkJVTExFVCxcbiAgICAgICAgdGV4dDogXCLil49cIixcbiAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnRUeXBlLkxFRlQsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgcGFyYWdyYXBoOiB7XG4gICAgICAgICAgICBpbmRlbnQ6IHsgbGVmdDogY29udmVydEluY2hlc1RvVHdpcCgwLjUpLCBoYW5naW5nOiBjb252ZXJ0SW5jaGVzVG9Ud2lwKDAuMjUpIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGxldmVsOiAxLFxuICAgICAgICBmb3JtYXQ6IExldmVsRm9ybWF0LkJVTExFVCxcbiAgICAgICAgdGV4dDogXCLil4tcIixcbiAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnRUeXBlLkxFRlQsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgcGFyYWdyYXBoOiB7XG4gICAgICAgICAgICBpbmRlbnQ6IHsgbGVmdDogY29udmVydEluY2hlc1RvVHdpcCgxKSwgaGFuZ2luZzogY29udmVydEluY2hlc1RvVHdpcCgwLjI1KSB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBsZXZlbDogMixcbiAgICAgICAgZm9ybWF0OiBMZXZlbEZvcm1hdC5CVUxMRVQsXG4gICAgICAgIHRleHQ6IFwi4pagXCIsXG4gICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50VHlwZS5MRUZULFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIHBhcmFncmFwaDoge1xuICAgICAgICAgICAgaW5kZW50OiB7IGxlZnQ6IDIxNjAsIGhhbmdpbmc6IGNvbnZlcnRJbmNoZXNUb1R3aXAoMC4yNSkgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbGV2ZWw6IDMsXG4gICAgICAgIGZvcm1hdDogTGV2ZWxGb3JtYXQuQlVMTEVULFxuICAgICAgICB0ZXh0OiBcIuKXj1wiLFxuICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudFR5cGUuTEVGVCxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBwYXJhZ3JhcGg6IHtcbiAgICAgICAgICAgIGluZGVudDogeyBsZWZ0OiAyODgwLCBoYW5naW5nOiBjb252ZXJ0SW5jaGVzVG9Ud2lwKDAuMjUpIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGxldmVsOiA0LFxuICAgICAgICBmb3JtYXQ6IExldmVsRm9ybWF0LkJVTExFVCxcbiAgICAgICAgdGV4dDogXCLil4tcIixcbiAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnRUeXBlLkxFRlQsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgcGFyYWdyYXBoOiB7XG4gICAgICAgICAgICBpbmRlbnQ6IHsgbGVmdDogMzYwMCwgaGFuZ2luZzogY29udmVydEluY2hlc1RvVHdpcCgwLjI1KSB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBsZXZlbDogNSxcbiAgICAgICAgZm9ybWF0OiBMZXZlbEZvcm1hdC5CVUxMRVQsXG4gICAgICAgIHRleHQ6IFwi4pagXCIsXG4gICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50VHlwZS5MRUZULFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIHBhcmFncmFwaDoge1xuICAgICAgICAgICAgaW5kZW50OiB7IGxlZnQ6IDQzMjAsIGhhbmdpbmc6IGNvbnZlcnRJbmNoZXNUb1R3aXAoMC4yNSkgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbGV2ZWw6IDYsXG4gICAgICAgIGZvcm1hdDogTGV2ZWxGb3JtYXQuQlVMTEVULFxuICAgICAgICB0ZXh0OiBcIuKXj1wiLFxuICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudFR5cGUuTEVGVCxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBwYXJhZ3JhcGg6IHtcbiAgICAgICAgICAgIGluZGVudDogeyBsZWZ0OiA1MDQwLCBoYW5naW5nOiBjb252ZXJ0SW5jaGVzVG9Ud2lwKDAuMjUpIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGxldmVsOiA3LFxuICAgICAgICBmb3JtYXQ6IExldmVsRm9ybWF0LkJVTExFVCxcbiAgICAgICAgdGV4dDogXCLil49cIixcbiAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnRUeXBlLkxFRlQsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgcGFyYWdyYXBoOiB7XG4gICAgICAgICAgICBpbmRlbnQ6IHsgbGVmdDogNTc2MCwgaGFuZ2luZzogY29udmVydEluY2hlc1RvVHdpcCgwLjI1KSB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBsZXZlbDogOCxcbiAgICAgICAgZm9ybWF0OiBMZXZlbEZvcm1hdC5CVUxMRVQsXG4gICAgICAgIHRleHQ6IFwi4pePXCIsXG4gICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50VHlwZS5MRUZULFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIHBhcmFncmFwaDoge1xuICAgICAgICAgICAgaW5kZW50OiB7IGxlZnQ6IDY0ODAsIGhhbmdpbmc6IGNvbnZlcnRJbmNoZXNUb1R3aXAoMC4yNSkgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIF0pO1xuICAgIHRoaXMuY29uY3JldGVOdW1iZXJpbmdNYXAuc2V0KFxuICAgICAgXCJkZWZhdWx0LWJ1bGxldC1udW1iZXJpbmdcIixcbiAgICAgIG5ldyBDb25jcmV0ZU51bWJlcmluZyh7XG4gICAgICAgIG51bUlkOiAxLFxuICAgICAgICBhYnN0cmFjdE51bUlkOiBhYnN0cmFjdE51bWJlcmluZy5pZCxcbiAgICAgICAgcmVmZXJlbmNlOiBcImRlZmF1bHQtYnVsbGV0LW51bWJlcmluZ1wiLFxuICAgICAgICBpbnN0YW5jZTogMCxcbiAgICAgICAgb3ZlcnJpZGVMZXZlbHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBudW06IDAsXG4gICAgICAgICAgICBzdGFydDogMVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMuYWJzdHJhY3ROdW1iZXJpbmdNYXAuc2V0KFwiZGVmYXVsdC1idWxsZXQtbnVtYmVyaW5nXCIsIGFic3RyYWN0TnVtYmVyaW5nKTtcbiAgICBmb3IgKGNvbnN0IGNvbiBvZiBvcHRpb25zMi5jb25maWcpIHtcbiAgICAgIHRoaXMuYWJzdHJhY3ROdW1iZXJpbmdNYXAuc2V0KGNvbi5yZWZlcmVuY2UsIG5ldyBBYnN0cmFjdE51bWJlcmluZyh0aGlzLmFic3RyYWN0TnVtVW5pcXVlTnVtZXJpY0lkKCksIGNvbi5sZXZlbHMpKTtcbiAgICAgIHRoaXMucmVmZXJlbmNlQ29uZmlnTWFwLnNldChjb24ucmVmZXJlbmNlLCBjb24ubGV2ZWxzKTtcbiAgICB9XG4gIH1cbiAgcHJlcEZvclhtbChjb250ZXh0KSB7XG4gICAgZm9yIChjb25zdCBudW1iZXJpbmcgb2YgdGhpcy5hYnN0cmFjdE51bWJlcmluZ01hcC52YWx1ZXMoKSkge1xuICAgICAgdGhpcy5yb290LnB1c2gobnVtYmVyaW5nKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBudW1iZXJpbmcgb2YgdGhpcy5jb25jcmV0ZU51bWJlcmluZ01hcC52YWx1ZXMoKSkge1xuICAgICAgdGhpcy5yb290LnB1c2gobnVtYmVyaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLnByZXBGb3JYbWwoY29udGV4dCk7XG4gIH1cbiAgY3JlYXRlQ29uY3JldGVOdW1iZXJpbmdJbnN0YW5jZShyZWZlcmVuY2UsIGluc3RhbmNlKSB7XG4gICAgY29uc3QgYWJzdHJhY3ROdW1iZXJpbmcgPSB0aGlzLmFic3RyYWN0TnVtYmVyaW5nTWFwLmdldChyZWZlcmVuY2UpO1xuICAgIGlmICghYWJzdHJhY3ROdW1iZXJpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZnVsbFJlZmVyZW5jZSA9IGAke3JlZmVyZW5jZX0tJHtpbnN0YW5jZX1gO1xuICAgIGlmICh0aGlzLmNvbmNyZXRlTnVtYmVyaW5nTWFwLmhhcyhmdWxsUmVmZXJlbmNlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCByZWZlcmVuY2VDb25maWdMZXZlbHMgPSB0aGlzLnJlZmVyZW5jZUNvbmZpZ01hcC5nZXQocmVmZXJlbmNlKTtcbiAgICBjb25zdCBmaXJzdExldmVsU3RhcnROdW1iZXIgPSByZWZlcmVuY2VDb25maWdMZXZlbHMgJiYgcmVmZXJlbmNlQ29uZmlnTGV2ZWxzWzBdLnN0YXJ0O1xuICAgIGNvbnN0IGNvbmNyZXRlTnVtYmVyaW5nU2V0dGluZ3MgPSB7XG4gICAgICBudW1JZDogdGhpcy5jb25jcmV0ZU51bVVuaXF1ZU51bWVyaWNJZCgpLFxuICAgICAgYWJzdHJhY3ROdW1JZDogYWJzdHJhY3ROdW1iZXJpbmcuaWQsXG4gICAgICByZWZlcmVuY2UsXG4gICAgICBpbnN0YW5jZSxcbiAgICAgIG92ZXJyaWRlTGV2ZWxzOiBbXG4gICAgICAgIGZpcnN0TGV2ZWxTdGFydE51bWJlciAmJiBOdW1iZXIuaXNJbnRlZ2VyKGZpcnN0TGV2ZWxTdGFydE51bWJlcikgPyB7XG4gICAgICAgICAgbnVtOiAwLFxuICAgICAgICAgIHN0YXJ0OiBmaXJzdExldmVsU3RhcnROdW1iZXJcbiAgICAgICAgfSA6IHtcbiAgICAgICAgICBudW06IDAsXG4gICAgICAgICAgc3RhcnQ6IDFcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH07XG4gICAgdGhpcy5jb25jcmV0ZU51bWJlcmluZ01hcC5zZXQoZnVsbFJlZmVyZW5jZSwgbmV3IENvbmNyZXRlTnVtYmVyaW5nKGNvbmNyZXRlTnVtYmVyaW5nU2V0dGluZ3MpKTtcbiAgfVxuICBnZXQgQ29uY3JldGVOdW1iZXJpbmcoKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5jb25jcmV0ZU51bWJlcmluZ01hcC52YWx1ZXMoKSk7XG4gIH1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgZ2V0IFJlZmVyZW5jZUNvbmZpZygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnJlZmVyZW5jZUNvbmZpZ01hcC52YWx1ZXMoKSk7XG4gIH1cbn1cbmNsYXNzIENvbXBhdGliaWxpdHlTZXR0aW5nQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgdmVyc2lvbjogXCJ3OnZhbFwiLFxuICAgICAgbmFtZTogXCJ3Om5hbWVcIixcbiAgICAgIHVyaTogXCJ3OnVyaVwiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIENvbXBhdGliaWxpdHlTZXR0aW5nIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodmVyc2lvbikge1xuICAgIHN1cGVyKFwidzpjb21wYXRTZXR0aW5nXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IENvbXBhdGliaWxpdHlTZXR0aW5nQXR0cmlidXRlcyh7XG4gICAgICAgIHZlcnNpb24sXG4gICAgICAgIHVyaTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkXCIsXG4gICAgICAgIG5hbWU6IFwiY29tcGF0aWJpbGl0eU1vZGVcIlxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jbGFzcyBDb21wYXRpYmlsaXR5IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcInc6Y29tcGF0XCIpO1xuICAgIGlmIChvcHRpb25zMi52ZXJzaW9uKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgQ29tcGF0aWJpbGl0eVNldHRpbmcob3B0aW9uczIudmVyc2lvbikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIudXNlU2luZ2xlQm9yZGVyZm9yQ29udGlndW91c0NlbGxzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzp1c2VTaW5nbGVCb3JkZXJmb3JDb250aWd1b3VzQ2VsbHNcIiwgb3B0aW9uczIudXNlU2luZ2xlQm9yZGVyZm9yQ29udGlndW91c0NlbGxzKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi53b3JkUGVyZmVjdEp1c3RpZmljYXRpb24pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OndwSnVzdGlmaWNhdGlvblwiLCBvcHRpb25zMi53b3JkUGVyZmVjdEp1c3RpZmljYXRpb24pKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLm5vVGFiU3RvcEZvckhhbmdpbmdJbmRlbnQpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3Om5vVGFiSGFuZ0luZFwiLCBvcHRpb25zMi5ub1RhYlN0b3BGb3JIYW5naW5nSW5kZW50KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5ub0xlYWRpbmcpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3Om5vTGVhZGluZ1wiLCBvcHRpb25zMi5ub0xlYWRpbmcpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnNwYWNlRm9yVW5kZXJsaW5lKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpzcGFjZUZvclVMXCIsIG9wdGlvbnMyLnNwYWNlRm9yVW5kZXJsaW5lKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5ub0NvbHVtbkJhbGFuY2UpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3Om5vQ29sdW1uQmFsYW5jZVwiLCBvcHRpb25zMi5ub0NvbHVtbkJhbGFuY2UpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmJhbGFuY2VTaW5nbGVCeXRlRG91YmxlQnl0ZVdpZHRoKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpiYWxhbmNlU2luZ2xlQnl0ZURvdWJsZUJ5dGVXaWR0aFwiLCBvcHRpb25zMi5iYWxhbmNlU2luZ2xlQnl0ZURvdWJsZUJ5dGVXaWR0aCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIubm9FeHRyYUxpbmVTcGFjaW5nKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpub0V4dHJhTGluZVNwYWNpbmdcIiwgb3B0aW9uczIubm9FeHRyYUxpbmVTcGFjaW5nKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5kb05vdExlYXZlQmFja3NsYXNoQWxvbmUpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmRvTm90TGVhdmVCYWNrc2xhc2hBbG9uZVwiLCBvcHRpb25zMi5kb05vdExlYXZlQmFja3NsYXNoQWxvbmUpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnVuZGVybGluZVRyYWlsaW5nU3BhY2VzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzp1bFRyYWlsU3BhY2VcIiwgb3B0aW9uczIudW5kZXJsaW5lVHJhaWxpbmdTcGFjZXMpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmRvTm90RXhwYW5kU2hpZnRSZXR1cm4pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmRvTm90RXhwYW5kU2hpZnRSZXR1cm5cIiwgb3B0aW9uczIuZG9Ob3RFeHBhbmRTaGlmdFJldHVybikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuc3BhY2luZ0luV2hvbGVQb2ludHMpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OnNwYWNpbmdJbldob2xlUG9pbnRzXCIsIG9wdGlvbnMyLnNwYWNpbmdJbldob2xlUG9pbnRzKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5saW5lV3JhcExpa2VXb3JkNikge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6bGluZVdyYXBMaWtlV29yZDZcIiwgb3B0aW9uczIubGluZVdyYXBMaWtlV29yZDYpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnByaW50Qm9keVRleHRCZWZvcmVIZWFkZXIpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OnByaW50Qm9keVRleHRCZWZvcmVIZWFkZXJcIiwgb3B0aW9uczIucHJpbnRCb2R5VGV4dEJlZm9yZUhlYWRlcikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIucHJpbnRDb2xvcnNCbGFjaykge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6cHJpbnRDb2xCbGFja1wiLCBvcHRpb25zMi5wcmludENvbG9yc0JsYWNrKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5zcGFjZVdpZHRoKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzp3cFNwYWNlV2lkdGhcIiwgb3B0aW9uczIuc3BhY2VXaWR0aCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuc2hvd0JyZWFrc0luRnJhbWVzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpzaG93QnJlYWtzSW5GcmFtZXNcIiwgb3B0aW9uczIuc2hvd0JyZWFrc0luRnJhbWVzKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5zdWJGb250QnlTaXplKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpzdWJGb250QnlTaXplXCIsIG9wdGlvbnMyLnN1YkZvbnRCeVNpemUpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnN1cHByZXNzQm90dG9tU3BhY2luZykge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6c3VwcHJlc3NCb3R0b21TcGFjaW5nXCIsIG9wdGlvbnMyLnN1cHByZXNzQm90dG9tU3BhY2luZykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuc3VwcHJlc3NUb3BTcGFjaW5nKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpzdXBwcmVzc1RvcFNwYWNpbmdcIiwgb3B0aW9uczIuc3VwcHJlc3NUb3BTcGFjaW5nKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5zdXBwcmVzc1NwYWNpbmdBdFRvcE9mUGFnZSkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6c3VwcHJlc3NTcGFjaW5nQXRUb3BPZlBhZ2VcIiwgb3B0aW9uczIuc3VwcHJlc3NTcGFjaW5nQXRUb3BPZlBhZ2UpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnN1cHByZXNzVG9wU3BhY2luZ1dQKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpzdXBwcmVzc1RvcFNwYWNpbmdXUFwiLCBvcHRpb25zMi5zdXBwcmVzc1RvcFNwYWNpbmdXUCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuc3VwcHJlc3NTcEJmQWZ0ZXJQZ0Jyaykge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6c3VwcHJlc3NTcEJmQWZ0ZXJQZ0Jya1wiLCBvcHRpb25zMi5zdXBwcmVzc1NwQmZBZnRlclBnQnJrKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5zd2FwQm9yZGVyc0ZhY2luZ1BhZ2VzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpzd2FwQm9yZGVyc0ZhY2luZ1BhZ2VzXCIsIG9wdGlvbnMyLnN3YXBCb3JkZXJzRmFjaW5nUGFnZXMpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmNvbnZlcnRNYWlsTWVyZ2VFc2MpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmNvbnZNYWlsTWVyZ2VFc2NcIiwgb3B0aW9uczIuY29udmVydE1haWxNZXJnZUVzYykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIudHJ1bmNhdGVGb250SGVpZ2h0c0xpa2VXUDYpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OnRydW5jYXRlRm9udEhlaWdodHNMaWtlV1A2XCIsIG9wdGlvbnMyLnRydW5jYXRlRm9udEhlaWdodHNMaWtlV1A2KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5tYWNXb3JkU21hbGxDYXBzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzptd1NtYWxsQ2Fwc1wiLCBvcHRpb25zMi5tYWNXb3JkU21hbGxDYXBzKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi51c2VQcmludGVyTWV0cmljcykge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6dXNlUHJpbnRlck1ldHJpY3NcIiwgb3B0aW9uczIudXNlUHJpbnRlck1ldHJpY3MpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmRvTm90U3VwcHJlc3NQYXJhZ3JhcGhCb3JkZXJzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpkb05vdFN1cHByZXNzUGFyYWdyYXBoQm9yZGVyc1wiLCBvcHRpb25zMi5kb05vdFN1cHByZXNzUGFyYWdyYXBoQm9yZGVycykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIud3JhcFRyYWlsU3BhY2VzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzp3cmFwVHJhaWxTcGFjZXNcIiwgb3B0aW9uczIud3JhcFRyYWlsU3BhY2VzKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5mb290bm90ZUxheW91dExpa2VXVzgpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmZvb3Rub3RlTGF5b3V0TGlrZVdXOFwiLCBvcHRpb25zMi5mb290bm90ZUxheW91dExpa2VXVzgpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnNoYXBlTGF5b3V0TGlrZVdXOCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6c2hhcGVMYXlvdXRMaWtlV1c4XCIsIG9wdGlvbnMyLnNoYXBlTGF5b3V0TGlrZVdXOCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuYWxpZ25UYWJsZXNSb3dCeVJvdykge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6YWxpZ25UYWJsZXNSb3dCeVJvd1wiLCBvcHRpb25zMi5hbGlnblRhYmxlc1Jvd0J5Um93KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5mb3JnZXRMYXN0VGFiQWxpZ25tZW50KSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpmb3JnZXRMYXN0VGFiQWxpZ25tZW50XCIsIG9wdGlvbnMyLmZvcmdldExhc3RUYWJBbGlnbm1lbnQpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmFkanVzdExpbmVIZWlnaHRJblRhYmxlKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzphZGp1c3RMaW5lSGVpZ2h0SW5UYWJsZVwiLCBvcHRpb25zMi5hZGp1c3RMaW5lSGVpZ2h0SW5UYWJsZSkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuYXV0b1NwYWNlTGlrZVdvcmQ5NSkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6YXV0b1NwYWNlTGlrZVdvcmQ5NVwiLCBvcHRpb25zMi5hdXRvU3BhY2VMaWtlV29yZDk1KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5ub1NwYWNlUmFpc2VMb3dlcikge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6bm9TcGFjZVJhaXNlTG93ZXJcIiwgb3B0aW9uczIubm9TcGFjZVJhaXNlTG93ZXIpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmRvTm90VXNlSFRNTFBhcmFncmFwaEF1dG9TcGFjaW5nKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpkb05vdFVzZUhUTUxQYXJhZ3JhcGhBdXRvU3BhY2luZ1wiLCBvcHRpb25zMi5kb05vdFVzZUhUTUxQYXJhZ3JhcGhBdXRvU3BhY2luZykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIubGF5b3V0UmF3VGFibGVXaWR0aCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6bGF5b3V0UmF3VGFibGVXaWR0aFwiLCBvcHRpb25zMi5sYXlvdXRSYXdUYWJsZVdpZHRoKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5sYXlvdXRUYWJsZVJvd3NBcGFydCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6bGF5b3V0VGFibGVSb3dzQXBhcnRcIiwgb3B0aW9uczIubGF5b3V0VGFibGVSb3dzQXBhcnQpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnVzZVdvcmQ5N0xpbmVCcmVha1J1bGVzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzp1c2VXb3JkOTdMaW5lQnJlYWtSdWxlc1wiLCBvcHRpb25zMi51c2VXb3JkOTdMaW5lQnJlYWtSdWxlcykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuZG9Ob3RCcmVha1dyYXBwZWRUYWJsZXMpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmRvTm90QnJlYWtXcmFwcGVkVGFibGVzXCIsIG9wdGlvbnMyLmRvTm90QnJlYWtXcmFwcGVkVGFibGVzKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5kb05vdFNuYXBUb0dyaWRJbkNlbGwpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmRvTm90U25hcFRvR3JpZEluQ2VsbFwiLCBvcHRpb25zMi5kb05vdFNuYXBUb0dyaWRJbkNlbGwpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnNlbGVjdEZpZWxkV2l0aEZpcnN0T3JMYXN0Q2hhcmFjdGVyKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpzZWxlY3RGbGRXaXRoRmlyc3RPckxhc3RDaGFyXCIsIG9wdGlvbnMyLnNlbGVjdEZpZWxkV2l0aEZpcnN0T3JMYXN0Q2hhcmFjdGVyKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5hcHBseUJyZWFraW5nUnVsZXMpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmFwcGx5QnJlYWtpbmdSdWxlc1wiLCBvcHRpb25zMi5hcHBseUJyZWFraW5nUnVsZXMpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmRvTm90V3JhcFRleHRXaXRoUHVuY3R1YXRpb24pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmRvTm90V3JhcFRleHRXaXRoUHVuY3RcIiwgb3B0aW9uczIuZG9Ob3RXcmFwVGV4dFdpdGhQdW5jdHVhdGlvbikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuZG9Ob3RVc2VFYXN0QXNpYW5CcmVha1J1bGVzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpkb05vdFVzZUVhc3RBc2lhbkJyZWFrUnVsZXNcIiwgb3B0aW9uczIuZG9Ob3RVc2VFYXN0QXNpYW5CcmVha1J1bGVzKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi51c2VXb3JkMjAwMlRhYmxlU3R5bGVSdWxlcykge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6dXNlV29yZDIwMDJUYWJsZVN0eWxlUnVsZXNcIiwgb3B0aW9uczIudXNlV29yZDIwMDJUYWJsZVN0eWxlUnVsZXMpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmdyb3dBdXRvZml0KSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpncm93QXV0b2ZpdFwiLCBvcHRpb25zMi5ncm93QXV0b2ZpdCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIudXNlRkVMYXlvdXQpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OnVzZUZFTGF5b3V0XCIsIG9wdGlvbnMyLnVzZUZFTGF5b3V0KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi51c2VOb3JtYWxTdHlsZUZvckxpc3QpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OnVzZU5vcm1hbFN0eWxlRm9yTGlzdFwiLCBvcHRpb25zMi51c2VOb3JtYWxTdHlsZUZvckxpc3QpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmRvTm90VXNlSW5kZW50QXNOdW1iZXJpbmdUYWJTdG9wKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpkb05vdFVzZUluZGVudEFzTnVtYmVyaW5nVGFiU3RvcFwiLCBvcHRpb25zMi5kb05vdFVzZUluZGVudEFzTnVtYmVyaW5nVGFiU3RvcCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIudXNlQWx0ZXJuYXRlRWFzdEFzaWFuTGluZUJyZWFrUnVsZXMpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OnVzZUFsdEtpbnNva3VMaW5lQnJlYWtSdWxlc1wiLCBvcHRpb25zMi51c2VBbHRlcm5hdGVFYXN0QXNpYW5MaW5lQnJlYWtSdWxlcykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuYWxsb3dTcGFjZU9mU2FtZVN0eWxlSW5UYWJsZSkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6YWxsb3dTcGFjZU9mU2FtZVN0eWxlSW5UYWJsZVwiLCBvcHRpb25zMi5hbGxvd1NwYWNlT2ZTYW1lU3R5bGVJblRhYmxlKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5kb05vdFN1cHByZXNzSW5kZW50YXRpb24pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmRvTm90U3VwcHJlc3NJbmRlbnRhdGlvblwiLCBvcHRpb25zMi5kb05vdFN1cHByZXNzSW5kZW50YXRpb24pKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmRvTm90QXV0b2ZpdENvbnN0cmFpbmVkVGFibGVzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpkb05vdEF1dG9maXRDb25zdHJhaW5lZFRhYmxlc1wiLCBvcHRpb25zMi5kb05vdEF1dG9maXRDb25zdHJhaW5lZFRhYmxlcykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuYXV0b2ZpdFRvRmlyc3RGaXhlZFdpZHRoQ2VsbCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6YXV0b2ZpdFRvRmlyc3RGaXhlZFdpZHRoQ2VsbFwiLCBvcHRpb25zMi5hdXRvZml0VG9GaXJzdEZpeGVkV2lkdGhDZWxsKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi51bmRlcmxpbmVUYWJJbk51bWJlcmluZ0xpc3QpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OnVuZGVybGluZVRhYkluTnVtTGlzdFwiLCBvcHRpb25zMi51bmRlcmxpbmVUYWJJbk51bWJlcmluZ0xpc3QpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmRpc3BsYXlIYW5ndWxGaXhlZFdpZHRoKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpkaXNwbGF5SGFuZ3VsRml4ZWRXaWR0aFwiLCBvcHRpb25zMi5kaXNwbGF5SGFuZ3VsRml4ZWRXaWR0aCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuc3BsaXRQZ0JyZWFrQW5kUGFyYU1hcmspIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OnNwbGl0UGdCcmVha0FuZFBhcmFNYXJrXCIsIG9wdGlvbnMyLnNwbGl0UGdCcmVha0FuZFBhcmFNYXJrKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5kb05vdFZlcnRpY2FsbHlBbGlnbkNlbGxXaXRoU3ApIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmRvTm90VmVydEFsaWduQ2VsbFdpdGhTcFwiLCBvcHRpb25zMi5kb05vdFZlcnRpY2FsbHlBbGlnbkNlbGxXaXRoU3ApKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmRvTm90QnJlYWtDb25zdHJhaW5lZEZvcmNlZFRhYmxlKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpkb05vdEJyZWFrQ29uc3RyYWluZWRGb3JjZWRUYWJsZVwiLCBvcHRpb25zMi5kb05vdEJyZWFrQ29uc3RyYWluZWRGb3JjZWRUYWJsZSkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuaWdub3JlVmVydGljYWxBbGlnbm1lbnRJblRleHRib3hlcykge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6ZG9Ob3RWZXJ0QWxpZ25JblR4YnhcIiwgb3B0aW9uczIuaWdub3JlVmVydGljYWxBbGlnbm1lbnRJblRleHRib3hlcykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIudXNlQW5zaUtlcm5pbmdQYWlycykge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6dXNlQW5zaUtlcm5pbmdQYWlyc1wiLCBvcHRpb25zMi51c2VBbnNpS2VybmluZ1BhaXJzKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5jYWNoZWRDb2x1bW5CYWxhbmNlKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpjYWNoZWRDb2xCYWxhbmNlXCIsIG9wdGlvbnMyLmNhY2hlZENvbHVtbkJhbGFuY2UpKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIFNldHRpbmdzQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgd3BjOiBcInhtbG5zOndwY1wiLFxuICAgICAgbWM6IFwieG1sbnM6bWNcIixcbiAgICAgIG86IFwieG1sbnM6b1wiLFxuICAgICAgcjogXCJ4bWxuczpyXCIsXG4gICAgICBtOiBcInhtbG5zOm1cIixcbiAgICAgIHY6IFwieG1sbnM6dlwiLFxuICAgICAgd3AxNDogXCJ4bWxuczp3cDE0XCIsXG4gICAgICB3cDogXCJ4bWxuczp3cFwiLFxuICAgICAgdzEwOiBcInhtbG5zOncxMFwiLFxuICAgICAgdzogXCJ4bWxuczp3XCIsXG4gICAgICB3MTQ6IFwieG1sbnM6dzE0XCIsXG4gICAgICB3MTU6IFwieG1sbnM6dzE1XCIsXG4gICAgICB3cGc6IFwieG1sbnM6d3BnXCIsXG4gICAgICB3cGk6IFwieG1sbnM6d3BpXCIsXG4gICAgICB3bmU6IFwieG1sbnM6d25lXCIsXG4gICAgICB3cHM6IFwieG1sbnM6d3BzXCIsXG4gICAgICBJZ25vcmFibGU6IFwibWM6SWdub3JhYmxlXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgU2V0dGluZ3MgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2g7XG4gICAgc3VwZXIoXCJ3OnNldHRpbmdzXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IFNldHRpbmdzQXR0cmlidXRlcyh7XG4gICAgICAgIHdwYzogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdDYW52YXNcIixcbiAgICAgICAgbWM6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL21hcmt1cC1jb21wYXRpYmlsaXR5LzIwMDZcIixcbiAgICAgICAgbzogXCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpvZmZpY2VcIixcbiAgICAgICAgcjogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzXCIsXG4gICAgICAgIG06IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvbWF0aFwiLFxuICAgICAgICB2OiBcInVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206dm1sXCIsXG4gICAgICAgIHdwMTQ6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nRHJhd2luZ1wiLFxuICAgICAgICB3cDogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvZHJhd2luZ21sLzIwMDYvd29yZHByb2Nlc3NpbmdEcmF3aW5nXCIsXG4gICAgICAgIHcxMDogXCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTp3b3JkXCIsXG4gICAgICAgIHc6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL3dvcmRwcm9jZXNzaW5nbWwvMjAwNi9tYWluXCIsXG4gICAgICAgIHcxNDogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZG1sXCIsXG4gICAgICAgIHcxNTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTIvd29yZG1sXCIsXG4gICAgICAgIHdwZzogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdHcm91cFwiLFxuICAgICAgICB3cGk6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nSW5rXCIsXG4gICAgICAgIHduZTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMDYvd29yZG1sXCIsXG4gICAgICAgIHdwczogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdTaGFwZVwiLFxuICAgICAgICBJZ25vcmFibGU6IFwidzE0IHcxNSB3cDE0XCJcbiAgICAgIH0pXG4gICAgKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpkaXNwbGF5QmFja2dyb3VuZFNoYXBlXCIsIHRydWUpKTtcbiAgICBpZiAob3B0aW9uczIudHJhY2tSZXZpc2lvbnMgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6dHJhY2tSZXZpc2lvbnNcIiwgb3B0aW9uczIudHJhY2tSZXZpc2lvbnMpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmV2ZW5BbmRPZGRIZWFkZXJzICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmV2ZW5BbmRPZGRIZWFkZXJzXCIsIG9wdGlvbnMyLmV2ZW5BbmRPZGRIZWFkZXJzKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi51cGRhdGVGaWVsZHMgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6dXBkYXRlRmllbGRzXCIsIG9wdGlvbnMyLnVwZGF0ZUZpZWxkcykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuZGVmYXVsdFRhYlN0b3AgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE51bWJlclZhbHVlRWxlbWVudChcInc6ZGVmYXVsdFRhYlN0b3BcIiwgb3B0aW9uczIuZGVmYXVsdFRhYlN0b3ApKTtcbiAgICB9XG4gICAgaWYgKCgoX2EgPSBvcHRpb25zMi5oeXBoZW5hdGlvbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmF1dG9IeXBoZW5hdGlvbikgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6YXV0b0h5cGhlbmF0aW9uXCIsIG9wdGlvbnMyLmh5cGhlbmF0aW9uLmF1dG9IeXBoZW5hdGlvbikpO1xuICAgIH1cbiAgICBpZiAoKChfYiA9IG9wdGlvbnMyLmh5cGhlbmF0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX2IuaHlwaGVuYXRpb25ab25lKSAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgTnVtYmVyVmFsdWVFbGVtZW50KFwidzpoeXBoZW5hdGlvblpvbmVcIiwgb3B0aW9uczIuaHlwaGVuYXRpb24uaHlwaGVuYXRpb25ab25lKSk7XG4gICAgfVxuICAgIGlmICgoKF9jID0gb3B0aW9uczIuaHlwaGVuYXRpb24pID09IG51bGwgPyB2b2lkIDAgOiBfYy5jb25zZWN1dGl2ZUh5cGhlbkxpbWl0KSAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgTnVtYmVyVmFsdWVFbGVtZW50KFwidzpjb25zZWN1dGl2ZUh5cGhlbkxpbWl0XCIsIG9wdGlvbnMyLmh5cGhlbmF0aW9uLmNvbnNlY3V0aXZlSHlwaGVuTGltaXQpKTtcbiAgICB9XG4gICAgaWYgKCgoX2QgPSBvcHRpb25zMi5oeXBoZW5hdGlvbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9kLmRvTm90SHlwaGVuYXRlQ2FwcykgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6ZG9Ob3RIeXBoZW5hdGVDYXBzXCIsIG9wdGlvbnMyLmh5cGhlbmF0aW9uLmRvTm90SHlwaGVuYXRlQ2FwcykpO1xuICAgIH1cbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBDb21wYXRpYmlsaXR5KF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIChfZSA9IG9wdGlvbnMyLmNvbXBhdGliaWxpdHkpICE9IG51bGwgPyBfZSA6IHt9KSwge1xuICAgICAgICB2ZXJzaW9uOiAoX2ggPSAoX2cgPSAoX2YgPSBvcHRpb25zMi5jb21wYXRpYmlsaXR5KSA9PSBudWxsID8gdm9pZCAwIDogX2YudmVyc2lvbikgIT0gbnVsbCA/IF9nIDogb3B0aW9uczIuY29tcGF0aWJpbGl0eU1vZGVWZXJzaW9uKSAhPSBudWxsID8gX2ggOiAxNVxuICAgICAgfSkpXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgQ29tcG9uZW50QXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwgeyB2YWw6IFwidzp2YWxcIiB9KTtcbiAgfVxufVxuY2xhc3MgTmFtZSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgc3VwZXIoXCJ3Om5hbWVcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IENvbXBvbmVudEF0dHJpYnV0ZXMoeyB2YWw6IHZhbHVlIH0pKTtcbiAgfVxufVxuY2xhc3MgVWlQcmlvcml0eSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgc3VwZXIoXCJ3OnVpUHJpb3JpdHlcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IENvbXBvbmVudEF0dHJpYnV0ZXMoeyB2YWw6IGRlY2ltYWxOdW1iZXIodmFsdWUpIH0pKTtcbiAgfVxufVxuY2xhc3MgU3R5bGVBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICB0eXBlOiBcInc6dHlwZVwiLFxuICAgICAgc3R5bGVJZDogXCJ3OnN0eWxlSWRcIixcbiAgICAgIGRlZmF1bHQ6IFwidzpkZWZhdWx0XCIsXG4gICAgICBjdXN0b21TdHlsZTogXCJ3OmN1c3RvbVN0eWxlXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgU3R5bGUyIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoYXR0cmlidXRlcywgb3B0aW9uczIpIHtcbiAgICBzdXBlcihcInc6c3R5bGVcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IFN0eWxlQXR0cmlidXRlcyhhdHRyaWJ1dGVzKSk7XG4gICAgaWYgKG9wdGlvbnMyLm5hbWUpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBOYW1lKG9wdGlvbnMyLm5hbWUpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmJhc2VkT24pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTdHJpbmdWYWx1ZUVsZW1lbnQoXCJ3OmJhc2VkT25cIiwgb3B0aW9uczIuYmFzZWRPbikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIubmV4dCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFN0cmluZ1ZhbHVlRWxlbWVudChcInc6bmV4dFwiLCBvcHRpb25zMi5uZXh0KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5saW5rKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgU3RyaW5nVmFsdWVFbGVtZW50KFwidzpsaW5rXCIsIG9wdGlvbnMyLmxpbmspKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnVpUHJpb3JpdHkgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFVpUHJpb3JpdHkob3B0aW9uczIudWlQcmlvcml0eSkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuc2VtaUhpZGRlbiAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpzZW1pSGlkZGVuXCIsIG9wdGlvbnMyLnNlbWlIaWRkZW4pKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnVuaGlkZVdoZW5Vc2VkICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OnVuaGlkZVdoZW5Vc2VkXCIsIG9wdGlvbnMyLnVuaGlkZVdoZW5Vc2VkKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5xdWlja0Zvcm1hdCAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpxRm9ybWF0XCIsIG9wdGlvbnMyLnF1aWNrRm9ybWF0KSk7XG4gICAgfVxuICB9XG59XG5jbGFzcyBTdHlsZUZvclBhcmFncmFwaCBleHRlbmRzIFN0eWxlMiB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoeyB0eXBlOiBcInBhcmFncmFwaFwiLCBzdHlsZUlkOiBvcHRpb25zMi5pZCB9LCBvcHRpb25zMik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInBhcmFncmFwaFByb3BlcnRpZXNcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInJ1blByb3BlcnRpZXNcIik7XG4gICAgdGhpcy5wYXJhZ3JhcGhQcm9wZXJ0aWVzID0gbmV3IFBhcmFncmFwaFByb3BlcnRpZXMob3B0aW9uczIucGFyYWdyYXBoKTtcbiAgICB0aGlzLnJ1blByb3BlcnRpZXMgPSBuZXcgUnVuUHJvcGVydGllcyhvcHRpb25zMi5ydW4pO1xuICAgIHRoaXMucm9vdC5wdXNoKHRoaXMucGFyYWdyYXBoUHJvcGVydGllcyk7XG4gICAgdGhpcy5yb290LnB1c2godGhpcy5ydW5Qcm9wZXJ0aWVzKTtcbiAgfVxufVxuY2xhc3MgU3R5bGVGb3JDaGFyYWN0ZXIgZXh0ZW5kcyBTdHlsZTIge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFxuICAgICAgeyB0eXBlOiBcImNoYXJhY3RlclwiLCBzdHlsZUlkOiBvcHRpb25zMi5pZCB9LFxuICAgICAgX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgICB1aVByaW9yaXR5OiA5OSxcbiAgICAgICAgdW5oaWRlV2hlblVzZWQ6IHRydWVcbiAgICAgIH0sIG9wdGlvbnMyKVxuICAgICk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInJ1blByb3BlcnRpZXNcIik7XG4gICAgdGhpcy5ydW5Qcm9wZXJ0aWVzID0gbmV3IFJ1blByb3BlcnRpZXMob3B0aW9uczIucnVuKTtcbiAgICB0aGlzLnJvb3QucHVzaCh0aGlzLnJ1blByb3BlcnRpZXMpO1xuICB9XG59XG5jbGFzcyBIZWFkaW5nU3R5bGUgZXh0ZW5kcyBTdHlsZUZvclBhcmFncmFwaCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgYmFzZWRPbjogXCJOb3JtYWxcIixcbiAgICAgIG5leHQ6IFwiTm9ybWFsXCIsXG4gICAgICBxdWlja0Zvcm1hdDogdHJ1ZVxuICAgIH0sIG9wdGlvbnMyKSk7XG4gIH1cbn1cbmNsYXNzIFRpdGxlU3R5bGUgZXh0ZW5kcyBIZWFkaW5nU3R5bGUge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKF9fc3ByZWFkVmFsdWVzKHtcbiAgICAgIGlkOiBcIlRpdGxlXCIsXG4gICAgICBuYW1lOiBcIlRpdGxlXCJcbiAgICB9LCBvcHRpb25zMikpO1xuICB9XG59XG5jbGFzcyBIZWFkaW5nMVN0eWxlIGV4dGVuZHMgSGVhZGluZ1N0eWxlIHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihfX3NwcmVhZFZhbHVlcyh7XG4gICAgICBpZDogXCJIZWFkaW5nMVwiLFxuICAgICAgbmFtZTogXCJIZWFkaW5nIDFcIlxuICAgIH0sIG9wdGlvbnMyKSk7XG4gIH1cbn1cbmNsYXNzIEhlYWRpbmcyU3R5bGUgZXh0ZW5kcyBIZWFkaW5nU3R5bGUge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKF9fc3ByZWFkVmFsdWVzKHtcbiAgICAgIGlkOiBcIkhlYWRpbmcyXCIsXG4gICAgICBuYW1lOiBcIkhlYWRpbmcgMlwiXG4gICAgfSwgb3B0aW9uczIpKTtcbiAgfVxufVxuY2xhc3MgSGVhZGluZzNTdHlsZSBleHRlbmRzIEhlYWRpbmdTdHlsZSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgaWQ6IFwiSGVhZGluZzNcIixcbiAgICAgIG5hbWU6IFwiSGVhZGluZyAzXCJcbiAgICB9LCBvcHRpb25zMikpO1xuICB9XG59XG5jbGFzcyBIZWFkaW5nNFN0eWxlIGV4dGVuZHMgSGVhZGluZ1N0eWxlIHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihfX3NwcmVhZFZhbHVlcyh7XG4gICAgICBpZDogXCJIZWFkaW5nNFwiLFxuICAgICAgbmFtZTogXCJIZWFkaW5nIDRcIlxuICAgIH0sIG9wdGlvbnMyKSk7XG4gIH1cbn1cbmNsYXNzIEhlYWRpbmc1U3R5bGUgZXh0ZW5kcyBIZWFkaW5nU3R5bGUge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKF9fc3ByZWFkVmFsdWVzKHtcbiAgICAgIGlkOiBcIkhlYWRpbmc1XCIsXG4gICAgICBuYW1lOiBcIkhlYWRpbmcgNVwiXG4gICAgfSwgb3B0aW9uczIpKTtcbiAgfVxufVxuY2xhc3MgSGVhZGluZzZTdHlsZSBleHRlbmRzIEhlYWRpbmdTdHlsZSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgaWQ6IFwiSGVhZGluZzZcIixcbiAgICAgIG5hbWU6IFwiSGVhZGluZyA2XCJcbiAgICB9LCBvcHRpb25zMikpO1xuICB9XG59XG5jbGFzcyBTdHJvbmdTdHlsZSBleHRlbmRzIEhlYWRpbmdTdHlsZSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgaWQ6IFwiU3Ryb25nXCIsXG4gICAgICBuYW1lOiBcIlN0cm9uZ1wiXG4gICAgfSwgb3B0aW9uczIpKTtcbiAgfVxufVxuY2xhc3MgTGlzdFBhcmFncmFwaCBleHRlbmRzIFN0eWxlRm9yUGFyYWdyYXBoIHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihfX3NwcmVhZFZhbHVlcyh7XG4gICAgICBpZDogXCJMaXN0UGFyYWdyYXBoXCIsXG4gICAgICBuYW1lOiBcIkxpc3QgUGFyYWdyYXBoXCIsXG4gICAgICBiYXNlZE9uOiBcIk5vcm1hbFwiLFxuICAgICAgcXVpY2tGb3JtYXQ6IHRydWVcbiAgICB9LCBvcHRpb25zMikpO1xuICB9XG59XG5jbGFzcyBGb290bm90ZVRleHQgZXh0ZW5kcyBTdHlsZUZvclBhcmFncmFwaCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgaWQ6IFwiRm9vdG5vdGVUZXh0XCIsXG4gICAgICBuYW1lOiBcImZvb3Rub3RlIHRleHRcIixcbiAgICAgIGxpbms6IFwiRm9vdG5vdGVUZXh0Q2hhclwiLFxuICAgICAgYmFzZWRPbjogXCJOb3JtYWxcIixcbiAgICAgIHVpUHJpb3JpdHk6IDk5LFxuICAgICAgc2VtaUhpZGRlbjogdHJ1ZSxcbiAgICAgIHVuaGlkZVdoZW5Vc2VkOiB0cnVlLFxuICAgICAgcGFyYWdyYXBoOiB7XG4gICAgICAgIHNwYWNpbmc6IHtcbiAgICAgICAgICBhZnRlcjogMCxcbiAgICAgICAgICBsaW5lOiAyNDAsXG4gICAgICAgICAgbGluZVJ1bGU6IExpbmVSdWxlVHlwZS5BVVRPXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBydW46IHtcbiAgICAgICAgc2l6ZTogMjBcbiAgICAgIH1cbiAgICB9LCBvcHRpb25zMikpO1xuICB9XG59XG5jbGFzcyBGb290bm90ZVJlZmVyZW5jZVN0eWxlIGV4dGVuZHMgU3R5bGVGb3JDaGFyYWN0ZXIge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKF9fc3ByZWFkVmFsdWVzKHtcbiAgICAgIGlkOiBcIkZvb3Rub3RlUmVmZXJlbmNlXCIsXG4gICAgICBuYW1lOiBcImZvb3Rub3RlIHJlZmVyZW5jZVwiLFxuICAgICAgYmFzZWRPbjogXCJEZWZhdWx0UGFyYWdyYXBoRm9udFwiLFxuICAgICAgc2VtaUhpZGRlbjogdHJ1ZSxcbiAgICAgIHJ1bjoge1xuICAgICAgICBzdXBlclNjcmlwdDogdHJ1ZVxuICAgICAgfVxuICAgIH0sIG9wdGlvbnMyKSk7XG4gIH1cbn1cbmNsYXNzIEZvb3Rub3RlVGV4dENoYXIgZXh0ZW5kcyBTdHlsZUZvckNoYXJhY3RlciB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgaWQ6IFwiRm9vdG5vdGVUZXh0Q2hhclwiLFxuICAgICAgbmFtZTogXCJGb290bm90ZSBUZXh0IENoYXJcIixcbiAgICAgIGJhc2VkT246IFwiRGVmYXVsdFBhcmFncmFwaEZvbnRcIixcbiAgICAgIGxpbms6IFwiRm9vdG5vdGVUZXh0XCIsXG4gICAgICBzZW1pSGlkZGVuOiB0cnVlLFxuICAgICAgcnVuOiB7XG4gICAgICAgIHNpemU6IDIwXG4gICAgICB9XG4gICAgfSwgb3B0aW9uczIpKTtcbiAgfVxufVxuY2xhc3MgSHlwZXJsaW5rU3R5bGUgZXh0ZW5kcyBTdHlsZUZvckNoYXJhY3RlciB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgaWQ6IFwiSHlwZXJsaW5rXCIsXG4gICAgICBuYW1lOiBcIkh5cGVybGlua1wiLFxuICAgICAgYmFzZWRPbjogXCJEZWZhdWx0UGFyYWdyYXBoRm9udFwiLFxuICAgICAgcnVuOiB7XG4gICAgICAgIGNvbG9yOiBcIjA1NjNDMVwiLFxuICAgICAgICB1bmRlcmxpbmU6IHtcbiAgICAgICAgICB0eXBlOiBVbmRlcmxpbmVUeXBlLlNJTkdMRVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgb3B0aW9uczIpKTtcbiAgfVxufVxuY2xhc3MgU3R5bGVzIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcInc6c3R5bGVzXCIpO1xuICAgIGlmIChvcHRpb25zMi5pbml0aWFsU3R5bGVzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChvcHRpb25zMi5pbml0aWFsU3R5bGVzKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmltcG9ydGVkU3R5bGVzKSB7XG4gICAgICBmb3IgKGNvbnN0IHN0eWxlIG9mIG9wdGlvbnMyLmltcG9ydGVkU3R5bGVzKSB7XG4gICAgICAgIHRoaXMucm9vdC5wdXNoKHN0eWxlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnBhcmFncmFwaFN0eWxlcykge1xuICAgICAgZm9yIChjb25zdCBzdHlsZSBvZiBvcHRpb25zMi5wYXJhZ3JhcGhTdHlsZXMpIHtcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFN0eWxlRm9yUGFyYWdyYXBoKHN0eWxlKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5jaGFyYWN0ZXJTdHlsZXMpIHtcbiAgICAgIGZvciAoY29uc3Qgc3R5bGUgb2Ygb3B0aW9uczIuY2hhcmFjdGVyU3R5bGVzKSB7XG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTdHlsZUZvckNoYXJhY3RlcihzdHlsZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuY2xhc3MgUGFyYWdyYXBoUHJvcGVydGllc0RlZmF1bHRzIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcInc6cFByRGVmYXVsdFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgUGFyYWdyYXBoUHJvcGVydGllcyhvcHRpb25zMikpO1xuICB9XG59XG5jbGFzcyBSdW5Qcm9wZXJ0aWVzRGVmYXVsdHMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwidzpyUHJEZWZhdWx0XCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBSdW5Qcm9wZXJ0aWVzKG9wdGlvbnMyKSk7XG4gIH1cbn1cbmNsYXNzIERvY3VtZW50RGVmYXVsdHMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwidzpkb2NEZWZhdWx0c1wiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwicnVuUHJvcGVydGllc0RlZmF1bHRzXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJwYXJhZ3JhcGhQcm9wZXJ0aWVzRGVmYXVsdHNcIik7XG4gICAgdGhpcy5ydW5Qcm9wZXJ0aWVzRGVmYXVsdHMgPSBuZXcgUnVuUHJvcGVydGllc0RlZmF1bHRzKG9wdGlvbnMyLnJ1bik7XG4gICAgdGhpcy5wYXJhZ3JhcGhQcm9wZXJ0aWVzRGVmYXVsdHMgPSBuZXcgUGFyYWdyYXBoUHJvcGVydGllc0RlZmF1bHRzKG9wdGlvbnMyLnBhcmFncmFwaCk7XG4gICAgdGhpcy5yb290LnB1c2godGhpcy5ydW5Qcm9wZXJ0aWVzRGVmYXVsdHMpO1xuICAgIHRoaXMucm9vdC5wdXNoKHRoaXMucGFyYWdyYXBoUHJvcGVydGllc0RlZmF1bHRzKTtcbiAgfVxufVxuY2xhc3MgRXh0ZXJuYWxTdHlsZXNGYWN0b3J5IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgbmV3IFN0eWxlIGJhc2VkIG9uIHRoZSBnaXZlbiBzdHlsZXMuXG4gICAqIFBhcnNlcyB0aGUgc3R5bGVzIGFuZCBjb252ZXJ0IHRoZW0gdG8gWG1sQ29tcG9uZW50LlxuICAgKiBFeGFtcGxlIGNvbnRlbnQgZnJvbSBzdHlsZXMueG1sOlxuICAgKiA8P3htbCB2ZXJzaW9uPVwiMS4wXCI+XG4gICAqIDx3OnN0eWxlcyB4bWxuczptYz1cInNvbWUgc2NoZW1hXCIgLi4uPlxuICAgKlxuICAgKiAgIDx3OnN0eWxlIHc6dHlwZT1cInBhcmFncmFwaFwiIHc6c3R5bGVJZD1cIkhlYWRpbmcxXCI+XG4gICAqICAgICAgICAgICA8dzpuYW1lIHc6dmFsPVwiaGVhZGluZyAxXCIvPlxuICAgKiAgICAgICAgICAgLi4uLi5cbiAgICogICA8L3c6c3R5bGU+XG4gICAqXG4gICAqICAgPHc6c3R5bGUgdzp0eXBlPVwicGFyYWdyYXBoXCIgdzpzdHlsZUlkPVwiSGVhZGluZzJcIj5cbiAgICogICAgICAgICAgIDx3Om5hbWUgdzp2YWw9XCJoZWFkaW5nIDJcIi8+XG4gICAqICAgICAgICAgICAuLi4uLlxuICAgKiAgIDwvdzpzdHlsZT5cbiAgICpcbiAgICogICA8dzpkb2NEZWZhdWx0cz5PciBhbnkgb3RoZXIgZWxlbWVudCB3aWxsIGJlIHBhcnNlZCB0bzwvdzpkb2NEZWZhdWx0cz5cbiAgICpcbiAgICogPC93OnN0eWxlcz5cbiAgICpcbiAgICogQHBhcmFtIGV4dGVybmFsU3R5bGVzIGNvbnRleHQgZnJvbSBzdHlsZXMueG1sXG4gICAqL1xuICBuZXdJbnN0YW5jZSh4bWxEYXRhKSB7XG4gICAgY29uc3QgeG1sT2JqID0gbGliLnhtbDJqcyh4bWxEYXRhLCB7IGNvbXBhY3Q6IGZhbHNlIH0pO1xuICAgIGxldCBzdHlsZXNYbWxFbGVtZW50O1xuICAgIGZvciAoY29uc3QgeG1sRWxtIG9mIHhtbE9iai5lbGVtZW50cyB8fCBbXSkge1xuICAgICAgaWYgKHhtbEVsbS5uYW1lID09PSBcInc6c3R5bGVzXCIpIHtcbiAgICAgICAgc3R5bGVzWG1sRWxlbWVudCA9IHhtbEVsbTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN0eWxlc1htbEVsZW1lbnQgPT09IHZvaWQgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2FuIG5vdCBmaW5kIHN0eWxlcyBlbGVtZW50XCIpO1xuICAgIH1cbiAgICBjb25zdCBzdHlsZXNFbGVtZW50cyA9IHN0eWxlc1htbEVsZW1lbnQuZWxlbWVudHMgfHwgW107XG4gICAgY29uc3QgaW1wb3J0ZWRTdHlsZSA9IG5ldyBTdHlsZXMoe1xuICAgICAgaW5pdGlhbFN0eWxlczogbmV3IEltcG9ydGVkUm9vdEVsZW1lbnRBdHRyaWJ1dGVzKHN0eWxlc1htbEVsZW1lbnQuYXR0cmlidXRlcyksXG4gICAgICBpbXBvcnRlZFN0eWxlczogc3R5bGVzRWxlbWVudHMubWFwKChjaGlsZEVsbSkgPT4gY29udmVydFRvWG1sQ29tcG9uZW50KGNoaWxkRWxtKSlcbiAgICB9KTtcbiAgICByZXR1cm4gaW1wb3J0ZWRTdHlsZTtcbiAgfVxufVxuY2xhc3MgRGVmYXVsdFN0eWxlc0ZhY3Rvcnkge1xuICBuZXdJbnN0YW5jZShvcHRpb25zMiA9IHt9KSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGRvY3VtZW50QXR0cmlidXRlcyA9IG5ldyBEb2N1bWVudEF0dHJpYnV0ZXMoe1xuICAgICAgbWM6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL21hcmt1cC1jb21wYXRpYmlsaXR5LzIwMDZcIixcbiAgICAgIHI6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwc1wiLFxuICAgICAgdzogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvd29yZHByb2Nlc3NpbmdtbC8yMDA2L21haW5cIixcbiAgICAgIHcxNDogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZG1sXCIsXG4gICAgICB3MTU6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEyL3dvcmRtbFwiLFxuICAgICAgSWdub3JhYmxlOiBcIncxNCB3MTVcIlxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBpbml0aWFsU3R5bGVzOiBkb2N1bWVudEF0dHJpYnV0ZXMsXG4gICAgICBpbXBvcnRlZFN0eWxlczogW1xuICAgICAgICBuZXcgRG9jdW1lbnREZWZhdWx0cygoX2EgPSBvcHRpb25zMi5kb2N1bWVudCkgIT0gbnVsbCA/IF9hIDoge30pLFxuICAgICAgICBuZXcgVGl0bGVTdHlsZShfX3NwcmVhZFZhbHVlcyh7XG4gICAgICAgICAgcnVuOiB7XG4gICAgICAgICAgICBzaXplOiA1NlxuICAgICAgICAgIH1cbiAgICAgICAgfSwgb3B0aW9uczIudGl0bGUpKSxcbiAgICAgICAgbmV3IEhlYWRpbmcxU3R5bGUoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgICAgIHJ1bjoge1xuICAgICAgICAgICAgY29sb3I6IFwiMkU3NEI1XCIsXG4gICAgICAgICAgICBzaXplOiAzMlxuICAgICAgICAgIH1cbiAgICAgICAgfSwgb3B0aW9uczIuaGVhZGluZzEpKSxcbiAgICAgICAgbmV3IEhlYWRpbmcyU3R5bGUoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgICAgIHJ1bjoge1xuICAgICAgICAgICAgY29sb3I6IFwiMkU3NEI1XCIsXG4gICAgICAgICAgICBzaXplOiAyNlxuICAgICAgICAgIH1cbiAgICAgICAgfSwgb3B0aW9uczIuaGVhZGluZzIpKSxcbiAgICAgICAgbmV3IEhlYWRpbmczU3R5bGUoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgICAgIHJ1bjoge1xuICAgICAgICAgICAgY29sb3I6IFwiMUY0RDc4XCIsXG4gICAgICAgICAgICBzaXplOiAyNFxuICAgICAgICAgIH1cbiAgICAgICAgfSwgb3B0aW9uczIuaGVhZGluZzMpKSxcbiAgICAgICAgbmV3IEhlYWRpbmc0U3R5bGUoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgICAgIHJ1bjoge1xuICAgICAgICAgICAgY29sb3I6IFwiMkU3NEI1XCIsXG4gICAgICAgICAgICBpdGFsaWNzOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9LCBvcHRpb25zMi5oZWFkaW5nNCkpLFxuICAgICAgICBuZXcgSGVhZGluZzVTdHlsZShfX3NwcmVhZFZhbHVlcyh7XG4gICAgICAgICAgcnVuOiB7XG4gICAgICAgICAgICBjb2xvcjogXCIyRTc0QjVcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSwgb3B0aW9uczIuaGVhZGluZzUpKSxcbiAgICAgICAgbmV3IEhlYWRpbmc2U3R5bGUoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgICAgIHJ1bjoge1xuICAgICAgICAgICAgY29sb3I6IFwiMUY0RDc4XCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sIG9wdGlvbnMyLmhlYWRpbmc2KSksXG4gICAgICAgIG5ldyBTdHJvbmdTdHlsZShfX3NwcmVhZFZhbHVlcyh7XG4gICAgICAgICAgcnVuOiB7XG4gICAgICAgICAgICBib2xkOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9LCBvcHRpb25zMi5zdHJvbmcpKSxcbiAgICAgICAgbmV3IExpc3RQYXJhZ3JhcGgob3B0aW9uczIubGlzdFBhcmFncmFwaCB8fCB7fSksXG4gICAgICAgIG5ldyBIeXBlcmxpbmtTdHlsZShvcHRpb25zMi5oeXBlcmxpbmsgfHwge30pLFxuICAgICAgICBuZXcgRm9vdG5vdGVSZWZlcmVuY2VTdHlsZShvcHRpb25zMi5mb290bm90ZVJlZmVyZW5jZSB8fCB7fSksXG4gICAgICAgIG5ldyBGb290bm90ZVRleHQob3B0aW9uczIuZm9vdG5vdGVUZXh0IHx8IHt9KSxcbiAgICAgICAgbmV3IEZvb3Rub3RlVGV4dENoYXIob3B0aW9uczIuZm9vdG5vdGVUZXh0Q2hhciB8fCB7fSlcbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG5jbGFzcyBGaWxlIHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuY3Rpb25hbC9wcmVmZXItcmVhZG9ubHktdHlwZVxuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJjdXJyZW50UmVsYXRpb25zaGlwSWRcIiwgMSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImRvY3VtZW50V3JhcHBlclwiKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuY3Rpb25hbC9wcmVmZXItcmVhZG9ubHktdHlwZVxuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJoZWFkZXJzXCIsIFtdKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuY3Rpb25hbC9wcmVmZXItcmVhZG9ubHktdHlwZVxuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJmb290ZXJzXCIsIFtdKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiY29yZVByb3BlcnRpZXNcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIm51bWJlcmluZ1wiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwibWVkaWFcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImZpbGVSZWxhdGlvbnNoaXBzXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJmb290bm90ZXNXcmFwcGVyXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJzZXR0aW5nc1wiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiY29udGVudFR5cGVzXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJjdXN0b21Qcm9wZXJ0aWVzXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJhcHBQcm9wZXJ0aWVzXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJzdHlsZXNcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImNvbW1lbnRzXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJmb250V3JhcHBlclwiKTtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaSwgX2osIF9rLCBfbDtcbiAgICB0aGlzLmNvcmVQcm9wZXJ0aWVzID0gbmV3IENvcmVQcm9wZXJ0aWVzKF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIG9wdGlvbnMyKSwge1xuICAgICAgY3JlYXRvcjogKF9hID0gb3B0aW9uczIuY3JlYXRvcikgIT0gbnVsbCA/IF9hIDogXCJVbi1uYW1lZFwiLFxuICAgICAgcmV2aXNpb246IChfYiA9IG9wdGlvbnMyLnJldmlzaW9uKSAhPSBudWxsID8gX2IgOiAxLFxuICAgICAgbGFzdE1vZGlmaWVkQnk6IChfYyA9IG9wdGlvbnMyLmxhc3RNb2RpZmllZEJ5KSAhPSBudWxsID8gX2MgOiBcIlVuLW5hbWVkXCJcbiAgICB9KSk7XG4gICAgdGhpcy5udW1iZXJpbmcgPSBuZXcgTnVtYmVyaW5nKG9wdGlvbnMyLm51bWJlcmluZyA/IG9wdGlvbnMyLm51bWJlcmluZyA6IHsgY29uZmlnOiBbXSB9KTtcbiAgICB0aGlzLmNvbW1lbnRzID0gbmV3IENvbW1lbnRzKChfZCA9IG9wdGlvbnMyLmNvbW1lbnRzKSAhPSBudWxsID8gX2QgOiB7IGNoaWxkcmVuOiBbXSB9KTtcbiAgICB0aGlzLmZpbGVSZWxhdGlvbnNoaXBzID0gbmV3IFJlbGF0aW9uc2hpcHMoKTtcbiAgICB0aGlzLmN1c3RvbVByb3BlcnRpZXMgPSBuZXcgQ3VzdG9tUHJvcGVydGllcygoX2UgPSBvcHRpb25zMi5jdXN0b21Qcm9wZXJ0aWVzKSAhPSBudWxsID8gX2UgOiBbXSk7XG4gICAgdGhpcy5hcHBQcm9wZXJ0aWVzID0gbmV3IEFwcFByb3BlcnRpZXMoKTtcbiAgICB0aGlzLmZvb3Rub3Rlc1dyYXBwZXIgPSBuZXcgRm9vdG5vdGVzV3JhcHBlcigpO1xuICAgIHRoaXMuY29udGVudFR5cGVzID0gbmV3IENvbnRlbnRUeXBlcygpO1xuICAgIHRoaXMuZG9jdW1lbnRXcmFwcGVyID0gbmV3IERvY3VtZW50V3JhcHBlcih7IGJhY2tncm91bmQ6IG9wdGlvbnMyLmJhY2tncm91bmQgfSk7XG4gICAgdGhpcy5zZXR0aW5ncyA9IG5ldyBTZXR0aW5ncyh7XG4gICAgICBjb21wYXRpYmlsaXR5TW9kZVZlcnNpb246IG9wdGlvbnMyLmNvbXBhdGFiaWxpdHlNb2RlVmVyc2lvbixcbiAgICAgIGNvbXBhdGliaWxpdHk6IG9wdGlvbnMyLmNvbXBhdGliaWxpdHksXG4gICAgICBldmVuQW5kT2RkSGVhZGVyczogb3B0aW9uczIuZXZlbkFuZE9kZEhlYWRlckFuZEZvb3RlcnMgPyB0cnVlIDogZmFsc2UsXG4gICAgICB0cmFja1JldmlzaW9uczogKF9mID0gb3B0aW9uczIuZmVhdHVyZXMpID09IG51bGwgPyB2b2lkIDAgOiBfZi50cmFja1JldmlzaW9ucyxcbiAgICAgIHVwZGF0ZUZpZWxkczogKF9nID0gb3B0aW9uczIuZmVhdHVyZXMpID09IG51bGwgPyB2b2lkIDAgOiBfZy51cGRhdGVGaWVsZHMsXG4gICAgICBkZWZhdWx0VGFiU3RvcDogb3B0aW9uczIuZGVmYXVsdFRhYlN0b3AsXG4gICAgICBoeXBoZW5hdGlvbjoge1xuICAgICAgICBhdXRvSHlwaGVuYXRpb246IChfaCA9IG9wdGlvbnMyLmh5cGhlbmF0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX2guYXV0b0h5cGhlbmF0aW9uLFxuICAgICAgICBoeXBoZW5hdGlvblpvbmU6IChfaSA9IG9wdGlvbnMyLmh5cGhlbmF0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX2kuaHlwaGVuYXRpb25ab25lLFxuICAgICAgICBjb25zZWN1dGl2ZUh5cGhlbkxpbWl0OiAoX2ogPSBvcHRpb25zMi5oeXBoZW5hdGlvbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9qLmNvbnNlY3V0aXZlSHlwaGVuTGltaXQsXG4gICAgICAgIGRvTm90SHlwaGVuYXRlQ2FwczogKF9rID0gb3B0aW9uczIuaHlwaGVuYXRpb24pID09IG51bGwgPyB2b2lkIDAgOiBfay5kb05vdEh5cGhlbmF0ZUNhcHNcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLm1lZGlhID0gbmV3IE1lZGlhKCk7XG4gICAgaWYgKG9wdGlvbnMyLmV4dGVybmFsU3R5bGVzICE9PSB2b2lkIDApIHtcbiAgICAgIGNvbnN0IHN0eWxlc0ZhY3RvcnkgPSBuZXcgRXh0ZXJuYWxTdHlsZXNGYWN0b3J5KCk7XG4gICAgICB0aGlzLnN0eWxlcyA9IHN0eWxlc0ZhY3RvcnkubmV3SW5zdGFuY2Uob3B0aW9uczIuZXh0ZXJuYWxTdHlsZXMpO1xuICAgIH0gZWxzZSBpZiAob3B0aW9uczIuc3R5bGVzKSB7XG4gICAgICBjb25zdCBzdHlsZXNGYWN0b3J5ID0gbmV3IERlZmF1bHRTdHlsZXNGYWN0b3J5KCk7XG4gICAgICBjb25zdCBkZWZhdWx0U3R5bGVzID0gc3R5bGVzRmFjdG9yeS5uZXdJbnN0YW5jZShvcHRpb25zMi5zdHlsZXMuZGVmYXVsdCk7XG4gICAgICB0aGlzLnN0eWxlcyA9IG5ldyBTdHlsZXMoX19zcHJlYWRWYWx1ZXMoX19zcHJlYWRWYWx1ZXMoe30sIGRlZmF1bHRTdHlsZXMpLCBvcHRpb25zMi5zdHlsZXMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc3R5bGVzRmFjdG9yeSA9IG5ldyBEZWZhdWx0U3R5bGVzRmFjdG9yeSgpO1xuICAgICAgdGhpcy5zdHlsZXMgPSBuZXcgU3R5bGVzKHN0eWxlc0ZhY3RvcnkubmV3SW5zdGFuY2UoKSk7XG4gICAgfVxuICAgIHRoaXMuYWRkRGVmYXVsdFJlbGF0aW9uc2hpcHMoKTtcbiAgICBmb3IgKGNvbnN0IHNlY3Rpb24gb2Ygb3B0aW9uczIuc2VjdGlvbnMpIHtcbiAgICAgIHRoaXMuYWRkU2VjdGlvbihzZWN0aW9uKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmZvb3Rub3Rlcykge1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gb3B0aW9uczIuZm9vdG5vdGVzKSB7XG4gICAgICAgIHRoaXMuZm9vdG5vdGVzV3JhcHBlci5WaWV3LmNyZWF0ZUZvb3ROb3RlKHBhcnNlRmxvYXQoa2V5KSwgb3B0aW9uczIuZm9vdG5vdGVzW2tleV0uY2hpbGRyZW4pO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmZvbnRXcmFwcGVyID0gbmV3IEZvbnRXcmFwcGVyKChfbCA9IG9wdGlvbnMyLmZvbnRzKSAhPSBudWxsID8gX2wgOiBbXSk7XG4gIH1cbiAgYWRkU2VjdGlvbih7IGhlYWRlcnMgPSB7fSwgZm9vdGVycyA9IHt9LCBjaGlsZHJlbiwgcHJvcGVydGllcyB9KSB7XG4gICAgdGhpcy5kb2N1bWVudFdyYXBwZXIuVmlldy5Cb2R5LmFkZFNlY3Rpb24oX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgcHJvcGVydGllcyksIHtcbiAgICAgIGhlYWRlcldyYXBwZXJHcm91cDoge1xuICAgICAgICBkZWZhdWx0OiBoZWFkZXJzLmRlZmF1bHQgPyB0aGlzLmNyZWF0ZUhlYWRlcihoZWFkZXJzLmRlZmF1bHQpIDogdm9pZCAwLFxuICAgICAgICBmaXJzdDogaGVhZGVycy5maXJzdCA/IHRoaXMuY3JlYXRlSGVhZGVyKGhlYWRlcnMuZmlyc3QpIDogdm9pZCAwLFxuICAgICAgICBldmVuOiBoZWFkZXJzLmV2ZW4gPyB0aGlzLmNyZWF0ZUhlYWRlcihoZWFkZXJzLmV2ZW4pIDogdm9pZCAwXG4gICAgICB9LFxuICAgICAgZm9vdGVyV3JhcHBlckdyb3VwOiB7XG4gICAgICAgIGRlZmF1bHQ6IGZvb3RlcnMuZGVmYXVsdCA/IHRoaXMuY3JlYXRlRm9vdGVyKGZvb3RlcnMuZGVmYXVsdCkgOiB2b2lkIDAsXG4gICAgICAgIGZpcnN0OiBmb290ZXJzLmZpcnN0ID8gdGhpcy5jcmVhdGVGb290ZXIoZm9vdGVycy5maXJzdCkgOiB2b2lkIDAsXG4gICAgICAgIGV2ZW46IGZvb3RlcnMuZXZlbiA/IHRoaXMuY3JlYXRlRm9vdGVyKGZvb3RlcnMuZXZlbikgOiB2b2lkIDBcbiAgICAgIH1cbiAgICB9KSk7XG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiBjaGlsZHJlbikge1xuICAgICAgdGhpcy5kb2N1bWVudFdyYXBwZXIuVmlldy5hZGQoY2hpbGQpO1xuICAgIH1cbiAgfVxuICBjcmVhdGVIZWFkZXIoaGVhZGVyKSB7XG4gICAgY29uc3Qgd3JhcHBlciA9IG5ldyBIZWFkZXJXcmFwcGVyKHRoaXMubWVkaWEsIHRoaXMuY3VycmVudFJlbGF0aW9uc2hpcElkKyspO1xuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgaGVhZGVyLm9wdGlvbnMuY2hpbGRyZW4pIHtcbiAgICAgIHdyYXBwZXIuYWRkKGNoaWxkKTtcbiAgICB9XG4gICAgdGhpcy5hZGRIZWFkZXJUb0RvY3VtZW50KHdyYXBwZXIpO1xuICAgIHJldHVybiB3cmFwcGVyO1xuICB9XG4gIGNyZWF0ZUZvb3Rlcihmb290ZXIpIHtcbiAgICBjb25zdCB3cmFwcGVyID0gbmV3IEZvb3RlcldyYXBwZXIodGhpcy5tZWRpYSwgdGhpcy5jdXJyZW50UmVsYXRpb25zaGlwSWQrKyk7XG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiBmb290ZXIub3B0aW9ucy5jaGlsZHJlbikge1xuICAgICAgd3JhcHBlci5hZGQoY2hpbGQpO1xuICAgIH1cbiAgICB0aGlzLmFkZEZvb3RlclRvRG9jdW1lbnQod3JhcHBlcik7XG4gICAgcmV0dXJuIHdyYXBwZXI7XG4gIH1cbiAgYWRkSGVhZGVyVG9Eb2N1bWVudChoZWFkZXIsIHR5cGUyID0gSGVhZGVyRm9vdGVyUmVmZXJlbmNlVHlwZS5ERUZBVUxUKSB7XG4gICAgdGhpcy5oZWFkZXJzLnB1c2goeyBoZWFkZXIsIHR5cGU6IHR5cGUyIH0pO1xuICAgIHRoaXMuZG9jdW1lbnRXcmFwcGVyLlJlbGF0aW9uc2hpcHMuY3JlYXRlUmVsYXRpb25zaGlwKFxuICAgICAgaGVhZGVyLlZpZXcuUmVmZXJlbmNlSWQsXG4gICAgICBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvaGVhZGVyXCIsXG4gICAgICBgaGVhZGVyJHt0aGlzLmhlYWRlcnMubGVuZ3RofS54bWxgXG4gICAgKTtcbiAgICB0aGlzLmNvbnRlbnRUeXBlcy5hZGRIZWFkZXIodGhpcy5oZWFkZXJzLmxlbmd0aCk7XG4gIH1cbiAgYWRkRm9vdGVyVG9Eb2N1bWVudChmb290ZXIsIHR5cGUyID0gSGVhZGVyRm9vdGVyUmVmZXJlbmNlVHlwZS5ERUZBVUxUKSB7XG4gICAgdGhpcy5mb290ZXJzLnB1c2goeyBmb290ZXIsIHR5cGU6IHR5cGUyIH0pO1xuICAgIHRoaXMuZG9jdW1lbnRXcmFwcGVyLlJlbGF0aW9uc2hpcHMuY3JlYXRlUmVsYXRpb25zaGlwKFxuICAgICAgZm9vdGVyLlZpZXcuUmVmZXJlbmNlSWQsXG4gICAgICBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvZm9vdGVyXCIsXG4gICAgICBgZm9vdGVyJHt0aGlzLmZvb3RlcnMubGVuZ3RofS54bWxgXG4gICAgKTtcbiAgICB0aGlzLmNvbnRlbnRUeXBlcy5hZGRGb290ZXIodGhpcy5mb290ZXJzLmxlbmd0aCk7XG4gIH1cbiAgYWRkRGVmYXVsdFJlbGF0aW9uc2hpcHMoKSB7XG4gICAgdGhpcy5maWxlUmVsYXRpb25zaGlwcy5jcmVhdGVSZWxhdGlvbnNoaXAoXG4gICAgICAxLFxuICAgICAgXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL29mZmljZURvY3VtZW50XCIsXG4gICAgICBcIndvcmQvZG9jdW1lbnQueG1sXCJcbiAgICApO1xuICAgIHRoaXMuZmlsZVJlbGF0aW9uc2hpcHMuY3JlYXRlUmVsYXRpb25zaGlwKFxuICAgICAgMixcbiAgICAgIFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL3BhY2thZ2UvMjAwNi9yZWxhdGlvbnNoaXBzL21ldGFkYXRhL2NvcmUtcHJvcGVydGllc1wiLFxuICAgICAgXCJkb2NQcm9wcy9jb3JlLnhtbFwiXG4gICAgKTtcbiAgICB0aGlzLmZpbGVSZWxhdGlvbnNoaXBzLmNyZWF0ZVJlbGF0aW9uc2hpcChcbiAgICAgIDMsXG4gICAgICBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvZXh0ZW5kZWQtcHJvcGVydGllc1wiLFxuICAgICAgXCJkb2NQcm9wcy9hcHAueG1sXCJcbiAgICApO1xuICAgIHRoaXMuZmlsZVJlbGF0aW9uc2hpcHMuY3JlYXRlUmVsYXRpb25zaGlwKFxuICAgICAgNCxcbiAgICAgIFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9jdXN0b20tcHJvcGVydGllc1wiLFxuICAgICAgXCJkb2NQcm9wcy9jdXN0b20ueG1sXCJcbiAgICApO1xuICAgIHRoaXMuZG9jdW1lbnRXcmFwcGVyLlJlbGF0aW9uc2hpcHMuY3JlYXRlUmVsYXRpb25zaGlwKFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmN0aW9uYWwvaW1tdXRhYmxlLWRhdGFcbiAgICAgIHRoaXMuY3VycmVudFJlbGF0aW9uc2hpcElkKyssXG4gICAgICBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvc3R5bGVzXCIsXG4gICAgICBcInN0eWxlcy54bWxcIlxuICAgICk7XG4gICAgdGhpcy5kb2N1bWVudFdyYXBwZXIuUmVsYXRpb25zaGlwcy5jcmVhdGVSZWxhdGlvbnNoaXAoXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuY3Rpb25hbC9pbW11dGFibGUtZGF0YVxuICAgICAgdGhpcy5jdXJyZW50UmVsYXRpb25zaGlwSWQrKyxcbiAgICAgIFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9udW1iZXJpbmdcIixcbiAgICAgIFwibnVtYmVyaW5nLnhtbFwiXG4gICAgKTtcbiAgICB0aGlzLmRvY3VtZW50V3JhcHBlci5SZWxhdGlvbnNoaXBzLmNyZWF0ZVJlbGF0aW9uc2hpcChcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jdGlvbmFsL2ltbXV0YWJsZS1kYXRhXG4gICAgICB0aGlzLmN1cnJlbnRSZWxhdGlvbnNoaXBJZCsrLFxuICAgICAgXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2Zvb3Rub3Rlc1wiLFxuICAgICAgXCJmb290bm90ZXMueG1sXCJcbiAgICApO1xuICAgIHRoaXMuZG9jdW1lbnRXcmFwcGVyLlJlbGF0aW9uc2hpcHMuY3JlYXRlUmVsYXRpb25zaGlwKFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmN0aW9uYWwvaW1tdXRhYmxlLWRhdGFcbiAgICAgIHRoaXMuY3VycmVudFJlbGF0aW9uc2hpcElkKyssXG4gICAgICBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvc2V0dGluZ3NcIixcbiAgICAgIFwic2V0dGluZ3MueG1sXCJcbiAgICApO1xuICAgIHRoaXMuZG9jdW1lbnRXcmFwcGVyLlJlbGF0aW9uc2hpcHMuY3JlYXRlUmVsYXRpb25zaGlwKFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmN0aW9uYWwvaW1tdXRhYmxlLWRhdGFcbiAgICAgIHRoaXMuY3VycmVudFJlbGF0aW9uc2hpcElkKyssXG4gICAgICBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvY29tbWVudHNcIixcbiAgICAgIFwiY29tbWVudHMueG1sXCJcbiAgICApO1xuICB9XG4gIGdldCBEb2N1bWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5kb2N1bWVudFdyYXBwZXI7XG4gIH1cbiAgZ2V0IFN0eWxlcygpIHtcbiAgICByZXR1cm4gdGhpcy5zdHlsZXM7XG4gIH1cbiAgZ2V0IENvcmVQcm9wZXJ0aWVzKCkge1xuICAgIHJldHVybiB0aGlzLmNvcmVQcm9wZXJ0aWVzO1xuICB9XG4gIGdldCBOdW1iZXJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubnVtYmVyaW5nO1xuICB9XG4gIGdldCBNZWRpYSgpIHtcbiAgICByZXR1cm4gdGhpcy5tZWRpYTtcbiAgfVxuICBnZXQgRmlsZVJlbGF0aW9uc2hpcHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmlsZVJlbGF0aW9uc2hpcHM7XG4gIH1cbiAgZ2V0IEhlYWRlcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGVhZGVycy5tYXAoKGl0ZW0pID0+IGl0ZW0uaGVhZGVyKTtcbiAgfVxuICBnZXQgRm9vdGVycygpIHtcbiAgICByZXR1cm4gdGhpcy5mb290ZXJzLm1hcCgoaXRlbSkgPT4gaXRlbS5mb290ZXIpO1xuICB9XG4gIGdldCBDb250ZW50VHlwZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudFR5cGVzO1xuICB9XG4gIGdldCBDdXN0b21Qcm9wZXJ0aWVzKCkge1xuICAgIHJldHVybiB0aGlzLmN1c3RvbVByb3BlcnRpZXM7XG4gIH1cbiAgZ2V0IEFwcFByb3BlcnRpZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwUHJvcGVydGllcztcbiAgfVxuICBnZXQgRm9vdE5vdGVzKCkge1xuICAgIHJldHVybiB0aGlzLmZvb3Rub3Rlc1dyYXBwZXI7XG4gIH1cbiAgZ2V0IFNldHRpbmdzKCkge1xuICAgIHJldHVybiB0aGlzLnNldHRpbmdzO1xuICB9XG4gIGdldCBDb21tZW50cygpIHtcbiAgICByZXR1cm4gdGhpcy5jb21tZW50cztcbiAgfVxuICBnZXQgRm9udFRhYmxlKCkge1xuICAgIHJldHVybiB0aGlzLmZvbnRXcmFwcGVyO1xuICB9XG59XG5jbGFzcyBGaWVsZEluc3RydWN0aW9uIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcGVydGllcyA9IHt9KSB7XG4gICAgc3VwZXIoXCJ3Omluc3RyVGV4dFwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwicHJvcGVydGllc1wiKTtcbiAgICB0aGlzLnByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUZXh0QXR0cmlidXRlcyh7IHNwYWNlOiBTcGFjZVR5cGUuUFJFU0VSVkUgfSkpO1xuICAgIGxldCBpbnN0cnVjdGlvbiA9IFwiVE9DXCI7XG4gICAgaWYgKHRoaXMucHJvcGVydGllcy5jYXB0aW9uTGFiZWwpIHtcbiAgICAgIGluc3RydWN0aW9uID0gYCR7aW5zdHJ1Y3Rpb259IFxcXFxhIFwiJHt0aGlzLnByb3BlcnRpZXMuY2FwdGlvbkxhYmVsfVwiYDtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcGVydGllcy5lbnRyaWVzRnJvbUJvb2ttYXJrKSB7XG4gICAgICBpbnN0cnVjdGlvbiA9IGAke2luc3RydWN0aW9ufSBcXFxcYiBcIiR7dGhpcy5wcm9wZXJ0aWVzLmVudHJpZXNGcm9tQm9va21hcmt9XCJgO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wZXJ0aWVzLmNhcHRpb25MYWJlbEluY2x1ZGluZ051bWJlcnMpIHtcbiAgICAgIGluc3RydWN0aW9uID0gYCR7aW5zdHJ1Y3Rpb259IFxcXFxjIFwiJHt0aGlzLnByb3BlcnRpZXMuY2FwdGlvbkxhYmVsSW5jbHVkaW5nTnVtYmVyc31cImA7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BlcnRpZXMuc2VxdWVuY2VBbmRQYWdlTnVtYmVyc1NlcGFyYXRvcikge1xuICAgICAgaW5zdHJ1Y3Rpb24gPSBgJHtpbnN0cnVjdGlvbn0gXFxcXGQgXCIke3RoaXMucHJvcGVydGllcy5zZXF1ZW5jZUFuZFBhZ2VOdW1iZXJzU2VwYXJhdG9yfVwiYDtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcGVydGllcy50Y0ZpZWxkSWRlbnRpZmllcikge1xuICAgICAgaW5zdHJ1Y3Rpb24gPSBgJHtpbnN0cnVjdGlvbn0gXFxcXGYgXCIke3RoaXMucHJvcGVydGllcy50Y0ZpZWxkSWRlbnRpZmllcn1cImA7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BlcnRpZXMuaHlwZXJsaW5rKSB7XG4gICAgICBpbnN0cnVjdGlvbiA9IGAke2luc3RydWN0aW9ufSBcXFxcaGA7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BlcnRpZXMudGNGaWVsZExldmVsUmFuZ2UpIHtcbiAgICAgIGluc3RydWN0aW9uID0gYCR7aW5zdHJ1Y3Rpb259IFxcXFxsIFwiJHt0aGlzLnByb3BlcnRpZXMudGNGaWVsZExldmVsUmFuZ2V9XCJgO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wZXJ0aWVzLnBhZ2VOdW1iZXJzRW50cnlMZXZlbHNSYW5nZSkge1xuICAgICAgaW5zdHJ1Y3Rpb24gPSBgJHtpbnN0cnVjdGlvbn0gXFxcXG4gXCIke3RoaXMucHJvcGVydGllcy5wYWdlTnVtYmVyc0VudHJ5TGV2ZWxzUmFuZ2V9XCJgO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wZXJ0aWVzLmhlYWRpbmdTdHlsZVJhbmdlKSB7XG4gICAgICBpbnN0cnVjdGlvbiA9IGAke2luc3RydWN0aW9ufSBcXFxcbyBcIiR7dGhpcy5wcm9wZXJ0aWVzLmhlYWRpbmdTdHlsZVJhbmdlfVwiYDtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcGVydGllcy5lbnRyeUFuZFBhZ2VOdW1iZXJTZXBhcmF0b3IpIHtcbiAgICAgIGluc3RydWN0aW9uID0gYCR7aW5zdHJ1Y3Rpb259IFxcXFxwIFwiJHt0aGlzLnByb3BlcnRpZXMuZW50cnlBbmRQYWdlTnVtYmVyU2VwYXJhdG9yfVwiYDtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcGVydGllcy5zZXFGaWVsZElkZW50aWZpZXJGb3JQcmVmaXgpIHtcbiAgICAgIGluc3RydWN0aW9uID0gYCR7aW5zdHJ1Y3Rpb259IFxcXFxzIFwiJHt0aGlzLnByb3BlcnRpZXMuc2VxRmllbGRJZGVudGlmaWVyRm9yUHJlZml4fVwiYDtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcGVydGllcy5zdHlsZXNXaXRoTGV2ZWxzICYmIHRoaXMucHJvcGVydGllcy5zdHlsZXNXaXRoTGV2ZWxzLmxlbmd0aCkge1xuICAgICAgY29uc3Qgc3R5bGVzID0gdGhpcy5wcm9wZXJ0aWVzLnN0eWxlc1dpdGhMZXZlbHMubWFwKChzbCkgPT4gYCR7c2wuc3R5bGVOYW1lfSwke3NsLmxldmVsfWApLmpvaW4oXCIsXCIpO1xuICAgICAgaW5zdHJ1Y3Rpb24gPSBgJHtpbnN0cnVjdGlvbn0gXFxcXHQgXCIke3N0eWxlc31cImA7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BlcnRpZXMudXNlQXBwbGllZFBhcmFncmFwaE91dGxpbmVMZXZlbCkge1xuICAgICAgaW5zdHJ1Y3Rpb24gPSBgJHtpbnN0cnVjdGlvbn0gXFxcXHVgO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wZXJ0aWVzLnByZXNlcnZlVGFiSW5FbnRyaWVzKSB7XG4gICAgICBpbnN0cnVjdGlvbiA9IGAke2luc3RydWN0aW9ufSBcXFxcd2A7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BlcnRpZXMucHJlc2VydmVOZXdMaW5lSW5FbnRyaWVzKSB7XG4gICAgICBpbnN0cnVjdGlvbiA9IGAke2luc3RydWN0aW9ufSBcXFxceGA7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BlcnRpZXMuaGlkZVRhYkFuZFBhZ2VOdW1iZXJzSW5XZWJWaWV3KSB7XG4gICAgICBpbnN0cnVjdGlvbiA9IGAke2luc3RydWN0aW9ufSBcXFxcemA7XG4gICAgfVxuICAgIHRoaXMucm9vdC5wdXNoKGluc3RydWN0aW9uKTtcbiAgfVxufVxuY2xhc3MgU3RydWN0dXJlZERvY3VtZW50VGFnQ29udGVudCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwidzpzZHRDb250ZW50XCIpO1xuICB9XG59XG5jbGFzcyBTdHJ1Y3R1cmVkRG9jdW1lbnRUYWdQcm9wZXJ0aWVzIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoYWxpYXMpIHtcbiAgICBzdXBlcihcInc6c2R0UHJcIik7XG4gICAgaWYgKGFsaWFzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgU3RyaW5nVmFsdWVFbGVtZW50KFwidzphbGlhc1wiLCBhbGlhcykpO1xuICAgIH1cbiAgfVxufVxuY2xhc3MgVGFibGVPZkNvbnRlbnRzIGV4dGVuZHMgRmlsZUNoaWxkIHtcbiAgY29uc3RydWN0b3IoYWxpYXMgPSBcIlRhYmxlIG9mIENvbnRlbnRzXCIsIHByb3BlcnRpZXMpIHtcbiAgICBzdXBlcihcInc6c2R0XCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTdHJ1Y3R1cmVkRG9jdW1lbnRUYWdQcm9wZXJ0aWVzKGFsaWFzKSk7XG4gICAgY29uc3QgY29udGVudCA9IG5ldyBTdHJ1Y3R1cmVkRG9jdW1lbnRUYWdDb250ZW50KCk7XG4gICAgY29uc3QgYmVnaW5QYXJhZ3JhcGggPSBuZXcgUGFyYWdyYXBoKHtcbiAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgIG5ldyBSdW4oe1xuICAgICAgICAgIGNoaWxkcmVuOiBbbmV3IEJlZ2luKHRydWUpLCBuZXcgRmllbGRJbnN0cnVjdGlvbihwcm9wZXJ0aWVzKSwgbmV3IFNlcGFyYXRlKCldXG4gICAgICAgIH0pXG4gICAgICBdXG4gICAgfSk7XG4gICAgY29udGVudC5hZGRDaGlsZEVsZW1lbnQoYmVnaW5QYXJhZ3JhcGgpO1xuICAgIGNvbnN0IGVuZFBhcmFncmFwaCA9IG5ldyBQYXJhZ3JhcGgoe1xuICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgbmV3IFJ1bih7XG4gICAgICAgICAgY2hpbGRyZW46IFtuZXcgRW5kKCldXG4gICAgICAgIH0pXG4gICAgICBdXG4gICAgfSk7XG4gICAgY29udGVudC5hZGRDaGlsZEVsZW1lbnQoZW5kUGFyYWdyYXBoKTtcbiAgICB0aGlzLnJvb3QucHVzaChjb250ZW50KTtcbiAgfVxufVxuY2xhc3MgU3R5bGVMZXZlbCB7XG4gIGNvbnN0cnVjdG9yKHN0eWxlTmFtZSwgbGV2ZWwpIHtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwic3R5bGVOYW1lXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJsZXZlbFwiKTtcbiAgICB0aGlzLnN0eWxlTmFtZSA9IHN0eWxlTmFtZTtcbiAgICB0aGlzLmxldmVsID0gbGV2ZWw7XG4gIH1cbn1cbmNsYXNzIEhlYWRlcjIge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMiA9IHsgY2hpbGRyZW46IFtdIH0pIHtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwib3B0aW9uc1wiKTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zMjtcbiAgfVxufVxuY2xhc3MgRm9vdGVyMiB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyID0geyBjaGlsZHJlbjogW10gfSkge1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJvcHRpb25zXCIpO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMyO1xuICB9XG59XG5jbGFzcyBGb290Tm90ZVJlZmVyZW5jZVJ1bkF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIGlkOiBcInc6aWRcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBGb290bm90ZVJlZmVyZW5jZSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGlkKSB7XG4gICAgc3VwZXIoXCJ3OmZvb3Rub3RlUmVmZXJlbmNlXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IEZvb3ROb3RlUmVmZXJlbmNlUnVuQXR0cmlidXRlcyh7XG4gICAgICAgIGlkXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNsYXNzIEZvb3Rub3RlUmVmZXJlbmNlUnVuIGV4dGVuZHMgUnVuIHtcbiAgY29uc3RydWN0b3IoaWQpIHtcbiAgICBzdXBlcih7IHN0eWxlOiBcIkZvb3Rub3RlUmVmZXJlbmNlXCIgfSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IEZvb3Rub3RlUmVmZXJlbmNlKGlkKSk7XG4gIH1cbn1cbmNsYXNzIEluc2VydGVkVGV4dFJ1biBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJ3Omluc1wiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBDaGFuZ2VBdHRyaWJ1dGVzKHtcbiAgICAgICAgaWQ6IG9wdGlvbnMyLmlkLFxuICAgICAgICBhdXRob3I6IG9wdGlvbnMyLmF1dGhvcixcbiAgICAgICAgZGF0ZTogb3B0aW9uczIuZGF0ZVxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMuYWRkQ2hpbGRFbGVtZW50KG5ldyBUZXh0UnVuKG9wdGlvbnMyKSk7XG4gIH1cbn1cbmNsYXNzIERlbGV0ZWRQYWdlIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJ3OmRlbEluc3RyVGV4dFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgVGV4dEF0dHJpYnV0ZXMoeyBzcGFjZTogU3BhY2VUeXBlLlBSRVNFUlZFIH0pKTtcbiAgICB0aGlzLnJvb3QucHVzaChcIlBBR0VcIik7XG4gIH1cbn1cbmNsYXNzIERlbGV0ZWROdW1iZXJPZlBhZ2VzIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJ3OmRlbEluc3RyVGV4dFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgVGV4dEF0dHJpYnV0ZXMoeyBzcGFjZTogU3BhY2VUeXBlLlBSRVNFUlZFIH0pKTtcbiAgICB0aGlzLnJvb3QucHVzaChcIk5VTVBBR0VTXCIpO1xuICB9XG59XG5jbGFzcyBEZWxldGVkTnVtYmVyT2ZQYWdlc1NlY3Rpb24gZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6ZGVsSW5zdHJUZXh0XCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUZXh0QXR0cmlidXRlcyh7IHNwYWNlOiBTcGFjZVR5cGUuUFJFU0VSVkUgfSkpO1xuICAgIHRoaXMucm9vdC5wdXNoKFwiU0VDVElPTlBBR0VTXCIpO1xuICB9XG59XG5jbGFzcyBEZWxldGVkVGV4dCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHRleHQpIHtcbiAgICBzdXBlcihcInc6ZGVsVGV4dFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgVGV4dEF0dHJpYnV0ZXMoeyBzcGFjZTogU3BhY2VUeXBlLlBSRVNFUlZFIH0pKTtcbiAgICB0aGlzLnJvb3QucHVzaCh0ZXh0KTtcbiAgfVxufVxuY2xhc3MgRGVsZXRlZFRleHRSdW4gZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwidzpkZWxcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImRlbGV0ZWRUZXh0UnVuV3JhcHBlclwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBDaGFuZ2VBdHRyaWJ1dGVzKHtcbiAgICAgICAgaWQ6IG9wdGlvbnMyLmlkLFxuICAgICAgICBhdXRob3I6IG9wdGlvbnMyLmF1dGhvcixcbiAgICAgICAgZGF0ZTogb3B0aW9uczIuZGF0ZVxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMuZGVsZXRlZFRleHRSdW5XcmFwcGVyID0gbmV3IERlbGV0ZWRUZXh0UnVuV3JhcHBlcihvcHRpb25zMik7XG4gICAgdGhpcy5hZGRDaGlsZEVsZW1lbnQodGhpcy5kZWxldGVkVGV4dFJ1bldyYXBwZXIpO1xuICB9XG59XG5jbGFzcyBEZWxldGVkVGV4dFJ1bldyYXBwZXIgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwidzpyXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBSdW5Qcm9wZXJ0aWVzKG9wdGlvbnMyKSk7XG4gICAgaWYgKG9wdGlvbnMyLmNoaWxkcmVuKSB7XG4gICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIG9wdGlvbnMyLmNoaWxkcmVuKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2hpbGQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICBzd2l0Y2ggKGNoaWxkKSB7XG4gICAgICAgICAgICBjYXNlIFBhZ2VOdW1iZXIuQ1VSUkVOVDpcbiAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IEJlZ2luKCkpO1xuICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgRGVsZXRlZFBhZ2UoKSk7XG4gICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTZXBhcmF0ZSgpKTtcbiAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IEVuZCgpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFBhZ2VOdW1iZXIuVE9UQUxfUEFHRVM6XG4gICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCZWdpbigpKTtcbiAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IERlbGV0ZWROdW1iZXJPZlBhZ2VzKCkpO1xuICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgU2VwYXJhdGUoKSk7XG4gICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBFbmQoKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBQYWdlTnVtYmVyLlRPVEFMX1BBR0VTX0lOX1NFQ1RJT046XG4gICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCZWdpbigpKTtcbiAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IERlbGV0ZWROdW1iZXJPZlBhZ2VzU2VjdGlvbigpKTtcbiAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFNlcGFyYXRlKCkpO1xuICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgRW5kKCkpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBEZWxldGVkVGV4dChjaGlsZCkpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yb290LnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3B0aW9uczIudGV4dCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IERlbGV0ZWRUZXh0KG9wdGlvbnMyLnRleHQpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmJyZWFrKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wdGlvbnMyLmJyZWFrOyBpKyspIHtcbiAgICAgICAgdGhpcy5yb290LnNwbGljZSgxLCAwLCBuZXcgQnJlYWskMSgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmNsYXNzIENoZWNrYm94U3ltYm9sQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgdmFsOiBcIncxNDp2YWxcIixcbiAgICAgIHN5bWJvbGZvbnQ6IFwidzE0OmZvbnRcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBDaGVja0JveFN5bWJvbEVsZW1lbnQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihuYW1lLCB2YWwsIGZvbnQpIHtcbiAgICBzdXBlcihuYW1lKTtcbiAgICBpZiAoZm9udCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IENoZWNrYm94U3ltYm9sQXR0cmlidXRlcyh7IHZhbDogc2hvcnRIZXhOdW1iZXIodmFsKSwgc3ltYm9sZm9udDogZm9udCB9KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBDaGVja2JveFN5bWJvbEF0dHJpYnV0ZXMoeyB2YWwgfSkpO1xuICAgIH1cbiAgfVxufVxuY2xhc3MgQ2hlY2tCb3hVdGlsIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oO1xuICAgIHN1cGVyKFwidzE0OmNoZWNrYm94XCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJERUZBVUxUX1VOQ0hFQ0tFRF9TWU1CT0xcIiwgXCIyNjEwXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJERUZBVUxUX0NIRUNLRURfU1lNQk9MXCIsIFwiMjYxMlwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiREVGQVVMVF9GT05UXCIsIFwiTVMgR290aGljXCIpO1xuICAgIGNvbnN0IHZhbHVlID0gKG9wdGlvbnMyID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zMi5jaGVja2VkKSA/IFwiMVwiIDogXCIwXCI7XG4gICAgbGV0IHN5bWJvbDtcbiAgICBsZXQgZm9udDtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgQ2hlY2tCb3hTeW1ib2xFbGVtZW50KFwidzE0OmNoZWNrZWRcIiwgdmFsdWUpKTtcbiAgICBzeW1ib2wgPSAoKF9hID0gb3B0aW9uczIgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMyLmNoZWNrZWRTdGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnZhbHVlKSA/IChfYiA9IG9wdGlvbnMyID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zMi5jaGVja2VkU3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfYi52YWx1ZSA6IHRoaXMuREVGQVVMVF9DSEVDS0VEX1NZTUJPTDtcbiAgICBmb250ID0gKChfYyA9IG9wdGlvbnMyID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zMi5jaGVja2VkU3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfYy5mb250KSA/IChfZCA9IG9wdGlvbnMyID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zMi5jaGVja2VkU3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfZC5mb250IDogdGhpcy5ERUZBVUxUX0ZPTlQ7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IENoZWNrQm94U3ltYm9sRWxlbWVudChcIncxNDpjaGVja2VkU3RhdGVcIiwgc3ltYm9sLCBmb250KSk7XG4gICAgc3ltYm9sID0gKChfZSA9IG9wdGlvbnMyID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zMi51bmNoZWNrZWRTdGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9lLnZhbHVlKSA/IChfZiA9IG9wdGlvbnMyID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zMi51bmNoZWNrZWRTdGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9mLnZhbHVlIDogdGhpcy5ERUZBVUxUX1VOQ0hFQ0tFRF9TWU1CT0w7XG4gICAgZm9udCA9ICgoX2cgPSBvcHRpb25zMiA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9uczIudW5jaGVja2VkU3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfZy5mb250KSA/IChfaCA9IG9wdGlvbnMyID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zMi51bmNoZWNrZWRTdGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9oLmZvbnQgOiB0aGlzLkRFRkFVTFRfRk9OVDtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgQ2hlY2tCb3hTeW1ib2xFbGVtZW50KFwidzE0OnVuY2hlY2tlZFN0YXRlXCIsIHN5bWJvbCwgZm9udCkpO1xuICB9XG59XG5jbGFzcyBDaGVja0JveCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgIHN1cGVyKFwidzpzZHRcIik7XG4gICAgLy8gZGVmYXVsdCB2YWx1ZXMgcGVyIE1pY3Jvc29mdFxuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJERUZBVUxUX1VOQ0hFQ0tFRF9TWU1CT0xcIiwgXCIyNjEwXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJERUZBVUxUX0NIRUNLRURfU1lNQk9MXCIsIFwiMjYxMlwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiREVGQVVMVF9GT05UXCIsIFwiTVMgR290aGljXCIpO1xuICAgIGNvbnN0IHByb3BlcnRpZXMgPSBuZXcgU3RydWN0dXJlZERvY3VtZW50VGFnUHJvcGVydGllcyhvcHRpb25zMiA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9uczIuYWxpYXMpO1xuICAgIHByb3BlcnRpZXMuYWRkQ2hpbGRFbGVtZW50KG5ldyBDaGVja0JveFV0aWwob3B0aW9uczIpKTtcbiAgICB0aGlzLnJvb3QucHVzaChwcm9wZXJ0aWVzKTtcbiAgICBjb25zdCBjb250ZW50ID0gbmV3IFN0cnVjdHVyZWREb2N1bWVudFRhZ0NvbnRlbnQoKTtcbiAgICBjb25zdCBjaGVja2VkRm9udCA9IChfYSA9IG9wdGlvbnMyID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zMi5jaGVja2VkU3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfYS5mb250O1xuICAgIGNvbnN0IGNoZWNrZWRUZXh0ID0gKF9iID0gb3B0aW9uczIgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMyLmNoZWNrZWRTdGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLnZhbHVlO1xuICAgIGNvbnN0IHVuY2hlY2tlZEZvbnQgPSAoX2MgPSBvcHRpb25zMiA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9uczIudW5jaGVja2VkU3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfYy5mb250O1xuICAgIGNvbnN0IHVuY2hlY2tlZFRleHQgPSAoX2QgPSBvcHRpb25zMiA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9uczIudW5jaGVja2VkU3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfZC52YWx1ZTtcbiAgICBsZXQgc3ltYm9sRm9udDtcbiAgICBsZXQgY2hhcjtcbiAgICBpZiAob3B0aW9uczIgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMyLmNoZWNrZWQpIHtcbiAgICAgIHN5bWJvbEZvbnQgPSBjaGVja2VkRm9udCA/IGNoZWNrZWRGb250IDogdGhpcy5ERUZBVUxUX0ZPTlQ7XG4gICAgICBjaGFyID0gY2hlY2tlZFRleHQgPyBjaGVja2VkVGV4dCA6IHRoaXMuREVGQVVMVF9DSEVDS0VEX1NZTUJPTDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3ltYm9sRm9udCA9IHVuY2hlY2tlZEZvbnQgPyB1bmNoZWNrZWRGb250IDogdGhpcy5ERUZBVUxUX0ZPTlQ7XG4gICAgICBjaGFyID0gdW5jaGVja2VkVGV4dCA/IHVuY2hlY2tlZFRleHQgOiB0aGlzLkRFRkFVTFRfVU5DSEVDS0VEX1NZTUJPTDtcbiAgICB9XG4gICAgY29uc3QgaW5pdGlhbFJlbmRlcmVkQ2hhciA9IG5ldyBTeW1ib2xSdW4oe1xuICAgICAgY2hhcixcbiAgICAgIHN5bWJvbGZvbnQ6IHN5bWJvbEZvbnRcbiAgICB9KTtcbiAgICBjb250ZW50LmFkZENoaWxkRWxlbWVudChpbml0aWFsUmVuZGVyZWRDaGFyKTtcbiAgICB0aGlzLnJvb3QucHVzaChjb250ZW50KTtcbiAgfVxufVxuY29uc3QgY3JlYXRlUGljdEVsZW1lbnQgPSAoeyBzaGFwZSB9KSA9PiBuZXcgQnVpbGRlckVsZW1lbnQoe1xuICBuYW1lOiBcInc6cGljdFwiLFxuICBjaGlsZHJlbjogW3NoYXBlXVxufSk7XG5jb25zdCBjcmVhdGVUZXh0Ym94Q29udGVudCA9ICh7IGNoaWxkcmVuID0gW10gfSkgPT4gbmV3IEJ1aWxkZXJFbGVtZW50KHtcbiAgbmFtZTogXCJ3OnR4YnhDb250ZW50XCIsXG4gIGNoaWxkcmVuXG59KTtcbmNvbnN0IGNyZWF0ZVZtbFRleHRib3ggPSAoeyBzdHlsZSwgY2hpbGRyZW4sIGluc2V0IH0pID0+IG5ldyBCdWlsZGVyRWxlbWVudCh7XG4gIG5hbWU6IFwidjp0ZXh0Ym94XCIsXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBzdHlsZToge1xuICAgICAga2V5OiBcInN0eWxlXCIsXG4gICAgICB2YWx1ZTogc3R5bGVcbiAgICB9LFxuICAgIGluc2V0TW9kZToge1xuICAgICAga2V5OiBcImluc2V0bW9kZVwiLFxuICAgICAgdmFsdWU6IGluc2V0ID8gXCJjdXN0b21cIiA6IFwiYXV0b1wiXG4gICAgfSxcbiAgICBpbnNldDoge1xuICAgICAga2V5OiBcImluc2V0XCIsXG4gICAgICB2YWx1ZTogaW5zZXQgPyBgJHtpbnNldC5sZWZ0fSwgJHtpbnNldC50b3B9LCAke2luc2V0LnJpZ2h0fSwgJHtpbnNldC5ib3R0b219YCA6IHZvaWQgMFxuICAgIH1cbiAgfSxcbiAgY2hpbGRyZW46IFtjcmVhdGVUZXh0Ym94Q29udGVudCh7IGNoaWxkcmVuIH0pXVxufSk7XG5jb25zdCBTSEFQRV9UWVBFID0gXCIjX3gwMDAwX3QyMDJcIjtcbmNvbnN0IHN0eWxlVG9LZXlNYXAgPSB7XG4gIGZsaXA6IFwiZmxpcFwiLFxuICBoZWlnaHQ6IFwiaGVpZ2h0XCIsXG4gIGxlZnQ6IFwibGVmdFwiLFxuICBtYXJnaW5Cb3R0b206IFwibWFyZ2luLWJvdHRvbVwiLFxuICBtYXJnaW5MZWZ0OiBcIm1hcmdpbi1sZWZ0XCIsXG4gIG1hcmdpblJpZ2h0OiBcIm1hcmdpbi1yaWdodFwiLFxuICBtYXJnaW5Ub3A6IFwibWFyZ2luLXRvcFwiLFxuICBwb3NpdGlvbkhvcml6b250YWw6IFwibXNvLXBvc2l0aW9uLWhvcml6b250YWxcIixcbiAgcG9zaXRpb25Ib3Jpem9udGFsUmVsYXRpdmU6IFwibXNvLXBvc2l0aW9uLWhvcml6b250YWwtcmVsYXRpdmVcIixcbiAgcG9zaXRpb25WZXJ0aWNhbDogXCJtc28tcG9zaXRpb24tdmVydGljYWxcIixcbiAgcG9zaXRpb25WZXJ0aWNhbFJlbGF0aXZlOiBcIm1zby1wb3NpdGlvbi12ZXJ0aWNhbC1yZWxhdGl2ZVwiLFxuICB3cmFwRGlzdGFuY2VCb3R0b206IFwibXNvLXdyYXAtZGlzdGFuY2UtYm90dG9tXCIsXG4gIHdyYXBEaXN0YW5jZUxlZnQ6IFwibXNvLXdyYXAtZGlzdGFuY2UtbGVmdFwiLFxuICB3cmFwRGlzdGFuY2VSaWdodDogXCJtc28td3JhcC1kaXN0YW5jZS1yaWdodFwiLFxuICB3cmFwRGlzdGFuY2VUb3A6IFwibXNvLXdyYXAtZGlzdGFuY2UtdG9wXCIsXG4gIHdyYXBFZGl0ZWQ6IFwibXNvLXdyYXAtZWRpdGVkXCIsXG4gIHdyYXBTdHlsZTogXCJtc28td3JhcC1zdHlsZVwiLFxuICBwb3NpdGlvbjogXCJwb3NpdGlvblwiLFxuICByb3RhdGlvbjogXCJyb3RhdGlvblwiLFxuICB0b3A6IFwidG9wXCIsXG4gIHZpc2liaWxpdHk6IFwidmlzaWJpbGl0eVwiLFxuICB3aWR0aDogXCJ3aWR0aFwiLFxuICB6SW5kZXg6IFwiei1pbmRleFwiXG59O1xuY29uc3QgZm9ybWF0U2hhcGVTdHlsZSA9IChzdHlsZSkgPT4gc3R5bGUgPyBPYmplY3QuZW50cmllcyhzdHlsZSkubWFwKChba2V5LCB2YWx1ZV0pID0+IGAke3N0eWxlVG9LZXlNYXBba2V5XX06JHt2YWx1ZX1gKS5qb2luKFwiO1wiKSA6IHZvaWQgMDtcbmNvbnN0IGNyZWF0ZVNoYXBlID0gKHtcbiAgaWQsXG4gIGNoaWxkcmVuLFxuICB0eXBlOiB0eXBlMiA9IFNIQVBFX1RZUEUsXG4gIHN0eWxlXG59KSA9PiBuZXcgQnVpbGRlckVsZW1lbnQoe1xuICBuYW1lOiBcInY6c2hhcGVcIixcbiAgYXR0cmlidXRlczoge1xuICAgIGlkOiB7XG4gICAgICBrZXk6IFwiaWRcIixcbiAgICAgIHZhbHVlOiBpZFxuICAgIH0sXG4gICAgdHlwZToge1xuICAgICAga2V5OiBcInR5cGVcIixcbiAgICAgIHZhbHVlOiB0eXBlMlxuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGtleTogXCJzdHlsZVwiLFxuICAgICAgdmFsdWU6IGZvcm1hdFNoYXBlU3R5bGUoc3R5bGUpXG4gICAgfVxuICB9LFxuICBjaGlsZHJlbjogW2NyZWF0ZVZtbFRleHRib3goeyBzdHlsZTogXCJtc28tZml0LXNoYXBlLXRvLXRleHQ6dDtcIiwgY2hpbGRyZW4gfSldXG59KTtcbmNsYXNzIFRleHRib3ggZXh0ZW5kcyBGaWxlQ2hpbGQge1xuICBjb25zdHJ1Y3RvcihfYSkge1xuICAgIHZhciBfYiA9IF9hLCB7IHN0eWxlLCBjaGlsZHJlbiB9ID0gX2IsIHJlc3QgPSBfX29ialJlc3QoX2IsIFtcInN0eWxlXCIsIFwiY2hpbGRyZW5cIl0pO1xuICAgIHN1cGVyKFwidzpwXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBQYXJhZ3JhcGhQcm9wZXJ0aWVzKHJlc3QpKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIGNyZWF0ZVBpY3RFbGVtZW50KHtcbiAgICAgICAgc2hhcGU6IGNyZWF0ZVNoYXBlKHtcbiAgICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgICBpZDogdW5pcXVlSWQoKSxcbiAgICAgICAgICBzdHlsZVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5mdW5jdGlvbiBjb21tb25qc1JlcXVpcmUocGF0aCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBkeW5hbWljYWxseSByZXF1aXJlIFwiJyArIHBhdGggKyAnXCIuIFBsZWFzZSBjb25maWd1cmUgdGhlIGR5bmFtaWNSZXF1aXJlVGFyZ2V0cyBvci9hbmQgaWdub3JlRHluYW1pY1JlcXVpcmVzIG9wdGlvbiBvZiBAcm9sbHVwL3BsdWdpbi1jb21tb25qcyBhcHByb3ByaWF0ZWx5IGZvciB0aGlzIHJlcXVpcmUgY2FsbCB0byB3b3JrLicpO1xufVxudmFyIGpzemlwX21pbiA9IHsgZXhwb3J0czoge30gfTtcbihmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcbiAgIWZ1bmN0aW9uKGUpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGUoKTtcbiAgfShmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gczIoYSwgbywgaCkge1xuICAgICAgZnVuY3Rpb24gdShyMiwgZTIpIHtcbiAgICAgICAgaWYgKCFvW3IyXSkge1xuICAgICAgICAgIGlmICghYVtyMl0pIHtcbiAgICAgICAgICAgIHZhciB0ID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBjb21tb25qc1JlcXVpcmUgJiYgY29tbW9uanNSZXF1aXJlO1xuICAgICAgICAgICAgaWYgKCFlMiAmJiB0KSByZXR1cm4gdChyMiwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAobCkgcmV0dXJuIGwocjIsIHRydWUpO1xuICAgICAgICAgICAgdmFyIG4gPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcjIgKyBcIidcIik7XG4gICAgICAgICAgICB0aHJvdyBuLmNvZGUgPSBcIk1PRFVMRV9OT1RfRk9VTkRcIiwgbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGkgPSBvW3IyXSA9IHsgZXhwb3J0czoge30gfTtcbiAgICAgICAgICBhW3IyXVswXS5jYWxsKGkuZXhwb3J0cywgZnVuY3Rpb24oZTMpIHtcbiAgICAgICAgICAgIHZhciB0MiA9IGFbcjJdWzFdW2UzXTtcbiAgICAgICAgICAgIHJldHVybiB1KHQyIHx8IGUzKTtcbiAgICAgICAgICB9LCBpLCBpLmV4cG9ydHMsIHMyLCBhLCBvLCBoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb1tyMl0uZXhwb3J0cztcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGwgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGNvbW1vbmpzUmVxdWlyZSAmJiBjb21tb25qc1JlcXVpcmUsIGUgPSAwOyBlIDwgaC5sZW5ndGg7IGUrKykgdShoW2VdKTtcbiAgICAgIHJldHVybiB1O1xuICAgIH0oeyAxOiBbZnVuY3Rpb24oZSwgdCwgcjIpIHtcbiAgICAgIHZhciBkID0gZShcIi4vdXRpbHNcIiksIGMgPSBlKFwiLi9zdXBwb3J0XCIpLCBwID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiO1xuICAgICAgcjIuZW5jb2RlID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgZm9yICh2YXIgdDIsIHIzLCBuLCBpLCBzMiwgYSwgbywgaCA9IFtdLCB1ID0gMCwgbCA9IGUyLmxlbmd0aCwgZjIgPSBsLCBjMiA9IFwic3RyaW5nXCIgIT09IGQuZ2V0VHlwZU9mKGUyKTsgdSA8IGUyLmxlbmd0aDsgKSBmMiA9IGwgLSB1LCBuID0gYzIgPyAodDIgPSBlMlt1KytdLCByMyA9IHUgPCBsID8gZTJbdSsrXSA6IDAsIHUgPCBsID8gZTJbdSsrXSA6IDApIDogKHQyID0gZTIuY2hhckNvZGVBdCh1KyspLCByMyA9IHUgPCBsID8gZTIuY2hhckNvZGVBdCh1KyspIDogMCwgdSA8IGwgPyBlMi5jaGFyQ29kZUF0KHUrKykgOiAwKSwgaSA9IHQyID4+IDIsIHMyID0gKDMgJiB0MikgPDwgNCB8IHIzID4+IDQsIGEgPSAxIDwgZjIgPyAoMTUgJiByMykgPDwgMiB8IG4gPj4gNiA6IDY0LCBvID0gMiA8IGYyID8gNjMgJiBuIDogNjQsIGgucHVzaChwLmNoYXJBdChpKSArIHAuY2hhckF0KHMyKSArIHAuY2hhckF0KGEpICsgcC5jaGFyQXQobykpO1xuICAgICAgICByZXR1cm4gaC5qb2luKFwiXCIpO1xuICAgICAgfSwgcjIuZGVjb2RlID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdmFyIHQyLCByMywgbiwgaSwgczIsIGEsIG8gPSAwLCBoID0gMCwgdSA9IFwiZGF0YTpcIjtcbiAgICAgICAgaWYgKGUyLnN1YnN0cigwLCB1Lmxlbmd0aCkgPT09IHUpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYmFzZTY0IGlucHV0LCBpdCBsb29rcyBsaWtlIGEgZGF0YSB1cmwuXCIpO1xuICAgICAgICB2YXIgbCwgZjIgPSAzICogKGUyID0gZTIucmVwbGFjZSgvW15BLVphLXowLTkrLz1dL2csIFwiXCIpKS5sZW5ndGggLyA0O1xuICAgICAgICBpZiAoZTIuY2hhckF0KGUyLmxlbmd0aCAtIDEpID09PSBwLmNoYXJBdCg2NCkgJiYgZjItLSwgZTIuY2hhckF0KGUyLmxlbmd0aCAtIDIpID09PSBwLmNoYXJBdCg2NCkgJiYgZjItLSwgZjIgJSAxICE9IDApIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYmFzZTY0IGlucHV0LCBiYWQgY29udGVudCBsZW5ndGguXCIpO1xuICAgICAgICBmb3IgKGwgPSBjLnVpbnQ4YXJyYXkgPyBuZXcgVWludDhBcnJheSgwIHwgZjIpIDogbmV3IEFycmF5KDAgfCBmMik7IG8gPCBlMi5sZW5ndGg7ICkgdDIgPSBwLmluZGV4T2YoZTIuY2hhckF0KG8rKykpIDw8IDIgfCAoaSA9IHAuaW5kZXhPZihlMi5jaGFyQXQobysrKSkpID4+IDQsIHIzID0gKDE1ICYgaSkgPDwgNCB8IChzMiA9IHAuaW5kZXhPZihlMi5jaGFyQXQobysrKSkpID4+IDIsIG4gPSAoMyAmIHMyKSA8PCA2IHwgKGEgPSBwLmluZGV4T2YoZTIuY2hhckF0KG8rKykpKSwgbFtoKytdID0gdDIsIDY0ICE9PSBzMiAmJiAobFtoKytdID0gcjMpLCA2NCAhPT0gYSAmJiAobFtoKytdID0gbik7XG4gICAgICAgIHJldHVybiBsO1xuICAgICAgfTtcbiAgICB9LCB7IFwiLi9zdXBwb3J0XCI6IDMwLCBcIi4vdXRpbHNcIjogMzIgfV0sIDI6IFtmdW5jdGlvbihlLCB0LCByMikge1xuICAgICAgdmFyIG4gPSBlKFwiLi9leHRlcm5hbFwiKSwgaSA9IGUoXCIuL3N0cmVhbS9EYXRhV29ya2VyXCIpLCBzMiA9IGUoXCIuL3N0cmVhbS9DcmMzMlByb2JlXCIpLCBhID0gZShcIi4vc3RyZWFtL0RhdGFMZW5ndGhQcm9iZVwiKTtcbiAgICAgIGZ1bmN0aW9uIG8oZTIsIHQyLCByMywgbjIsIGkyKSB7XG4gICAgICAgIHRoaXMuY29tcHJlc3NlZFNpemUgPSBlMiwgdGhpcy51bmNvbXByZXNzZWRTaXplID0gdDIsIHRoaXMuY3JjMzIgPSByMywgdGhpcy5jb21wcmVzc2lvbiA9IG4yLCB0aGlzLmNvbXByZXNzZWRDb250ZW50ID0gaTI7XG4gICAgICB9XG4gICAgICBvLnByb3RvdHlwZSA9IHsgZ2V0Q29udGVudFdvcmtlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlMiA9IG5ldyBpKG4uUHJvbWlzZS5yZXNvbHZlKHRoaXMuY29tcHJlc3NlZENvbnRlbnQpKS5waXBlKHRoaXMuY29tcHJlc3Npb24udW5jb21wcmVzc1dvcmtlcigpKS5waXBlKG5ldyBhKFwiZGF0YV9sZW5ndGhcIikpLCB0MiA9IHRoaXM7XG4gICAgICAgIHJldHVybiBlMi5vbihcImVuZFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAodGhpcy5zdHJlYW1JbmZvLmRhdGFfbGVuZ3RoICE9PSB0Mi51bmNvbXByZXNzZWRTaXplKSB0aHJvdyBuZXcgRXJyb3IoXCJCdWcgOiB1bmNvbXByZXNzZWQgZGF0YSBzaXplIG1pc21hdGNoXCIpO1xuICAgICAgICB9KSwgZTI7XG4gICAgICB9LCBnZXRDb21wcmVzc2VkV29ya2VyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBpKG4uUHJvbWlzZS5yZXNvbHZlKHRoaXMuY29tcHJlc3NlZENvbnRlbnQpKS53aXRoU3RyZWFtSW5mbyhcImNvbXByZXNzZWRTaXplXCIsIHRoaXMuY29tcHJlc3NlZFNpemUpLndpdGhTdHJlYW1JbmZvKFwidW5jb21wcmVzc2VkU2l6ZVwiLCB0aGlzLnVuY29tcHJlc3NlZFNpemUpLndpdGhTdHJlYW1JbmZvKFwiY3JjMzJcIiwgdGhpcy5jcmMzMikud2l0aFN0cmVhbUluZm8oXCJjb21wcmVzc2lvblwiLCB0aGlzLmNvbXByZXNzaW9uKTtcbiAgICAgIH0gfSwgby5jcmVhdGVXb3JrZXJGcm9tID0gZnVuY3Rpb24oZTIsIHQyLCByMykge1xuICAgICAgICByZXR1cm4gZTIucGlwZShuZXcgczIoKSkucGlwZShuZXcgYShcInVuY29tcHJlc3NlZFNpemVcIikpLnBpcGUodDIuY29tcHJlc3NXb3JrZXIocjMpKS5waXBlKG5ldyBhKFwiY29tcHJlc3NlZFNpemVcIikpLndpdGhTdHJlYW1JbmZvKFwiY29tcHJlc3Npb25cIiwgdDIpO1xuICAgICAgfSwgdC5leHBvcnRzID0gbztcbiAgICB9LCB7IFwiLi9leHRlcm5hbFwiOiA2LCBcIi4vc3RyZWFtL0NyYzMyUHJvYmVcIjogMjUsIFwiLi9zdHJlYW0vRGF0YUxlbmd0aFByb2JlXCI6IDI2LCBcIi4vc3RyZWFtL0RhdGFXb3JrZXJcIjogMjcgfV0sIDM6IFtmdW5jdGlvbihlLCB0LCByMikge1xuICAgICAgdmFyIG4gPSBlKFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKTtcbiAgICAgIHIyLlNUT1JFID0geyBtYWdpYzogXCJcXDBcXDBcIiwgY29tcHJlc3NXb3JrZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3IG4oXCJTVE9SRSBjb21wcmVzc2lvblwiKTtcbiAgICAgIH0sIHVuY29tcHJlc3NXb3JrZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3IG4oXCJTVE9SRSBkZWNvbXByZXNzaW9uXCIpO1xuICAgICAgfSB9LCByMi5ERUZMQVRFID0gZShcIi4vZmxhdGVcIik7XG4gICAgfSwgeyBcIi4vZmxhdGVcIjogNywgXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCI6IDI4IH1dLCA0OiBbZnVuY3Rpb24oZSwgdCwgcjIpIHtcbiAgICAgIHZhciBuID0gZShcIi4vdXRpbHNcIik7XG4gICAgICB2YXIgbyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IgKHZhciBlMiwgdDIgPSBbXSwgcjMgPSAwOyByMyA8IDI1NjsgcjMrKykge1xuICAgICAgICAgIGUyID0gcjM7XG4gICAgICAgICAgZm9yICh2YXIgbjIgPSAwOyBuMiA8IDg7IG4yKyspIGUyID0gMSAmIGUyID8gMzk4ODI5MjM4NCBeIGUyID4+PiAxIDogZTIgPj4+IDE7XG4gICAgICAgICAgdDJbcjNdID0gZTI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQyO1xuICAgICAgfSgpO1xuICAgICAgdC5leHBvcnRzID0gZnVuY3Rpb24oZTIsIHQyKSB7XG4gICAgICAgIHJldHVybiB2b2lkIDAgIT09IGUyICYmIGUyLmxlbmd0aCA/IFwic3RyaW5nXCIgIT09IG4uZ2V0VHlwZU9mKGUyKSA/IGZ1bmN0aW9uKGUzLCB0MywgcjMsIG4yKSB7XG4gICAgICAgICAgdmFyIGkgPSBvLCBzMiA9IG4yICsgcjM7XG4gICAgICAgICAgZTMgXj0gLTE7XG4gICAgICAgICAgZm9yICh2YXIgYSA9IG4yOyBhIDwgczI7IGErKykgZTMgPSBlMyA+Pj4gOCBeIGlbMjU1ICYgKGUzIF4gdDNbYV0pXTtcbiAgICAgICAgICByZXR1cm4gLTEgXiBlMztcbiAgICAgICAgfSgwIHwgdDIsIGUyLCBlMi5sZW5ndGgsIDApIDogZnVuY3Rpb24oZTMsIHQzLCByMywgbjIpIHtcbiAgICAgICAgICB2YXIgaSA9IG8sIHMyID0gbjIgKyByMztcbiAgICAgICAgICBlMyBePSAtMTtcbiAgICAgICAgICBmb3IgKHZhciBhID0gbjI7IGEgPCBzMjsgYSsrKSBlMyA9IGUzID4+PiA4IF4gaVsyNTUgJiAoZTMgXiB0My5jaGFyQ29kZUF0KGEpKV07XG4gICAgICAgICAgcmV0dXJuIC0xIF4gZTM7XG4gICAgICAgIH0oMCB8IHQyLCBlMiwgZTIubGVuZ3RoLCAwKSA6IDA7XG4gICAgICB9O1xuICAgIH0sIHsgXCIuL3V0aWxzXCI6IDMyIH1dLCA1OiBbZnVuY3Rpb24oZSwgdCwgcjIpIHtcbiAgICAgIHIyLmJhc2U2NCA9IGZhbHNlLCByMi5iaW5hcnkgPSBmYWxzZSwgcjIuZGlyID0gZmFsc2UsIHIyLmNyZWF0ZUZvbGRlcnMgPSB0cnVlLCByMi5kYXRlID0gbnVsbCwgcjIuY29tcHJlc3Npb24gPSBudWxsLCByMi5jb21wcmVzc2lvbk9wdGlvbnMgPSBudWxsLCByMi5jb21tZW50ID0gbnVsbCwgcjIudW5peFBlcm1pc3Npb25zID0gbnVsbCwgcjIuZG9zUGVybWlzc2lvbnMgPSBudWxsO1xuICAgIH0sIHt9XSwgNjogW2Z1bmN0aW9uKGUsIHQsIHIyKSB7XG4gICAgICB2YXIgbiA9IG51bGw7XG4gICAgICBuID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgUHJvbWlzZSA/IFByb21pc2UgOiBlKFwibGllXCIpLCB0LmV4cG9ydHMgPSB7IFByb21pc2U6IG4gfTtcbiAgICB9LCB7IGxpZTogMzcgfV0sIDc6IFtmdW5jdGlvbihlLCB0LCByMikge1xuICAgICAgdmFyIG4gPSBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBVaW50OEFycmF5ICYmIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFVpbnQxNkFycmF5ICYmIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFVpbnQzMkFycmF5LCBpID0gZShcInBha29cIiksIHMyID0gZShcIi4vdXRpbHNcIiksIGEgPSBlKFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKSwgbyA9IG4gPyBcInVpbnQ4YXJyYXlcIiA6IFwiYXJyYXlcIjtcbiAgICAgIGZ1bmN0aW9uIGgoZTIsIHQyKSB7XG4gICAgICAgIGEuY2FsbCh0aGlzLCBcIkZsYXRlV29ya2VyL1wiICsgZTIpLCB0aGlzLl9wYWtvID0gbnVsbCwgdGhpcy5fcGFrb0FjdGlvbiA9IGUyLCB0aGlzLl9wYWtvT3B0aW9ucyA9IHQyLCB0aGlzLm1ldGEgPSB7fTtcbiAgICAgIH1cbiAgICAgIHIyLm1hZ2ljID0gXCJcXGJcXDBcIiwgczIuaW5oZXJpdHMoaCwgYSksIGgucHJvdG90eXBlLnByb2Nlc3NDaHVuayA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHRoaXMubWV0YSA9IGUyLm1ldGEsIG51bGwgPT09IHRoaXMuX3Bha28gJiYgdGhpcy5fY3JlYXRlUGFrbygpLCB0aGlzLl9wYWtvLnB1c2goczIudHJhbnNmb3JtVG8obywgZTIuZGF0YSksIGZhbHNlKTtcbiAgICAgIH0sIGgucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGEucHJvdG90eXBlLmZsdXNoLmNhbGwodGhpcyksIG51bGwgPT09IHRoaXMuX3Bha28gJiYgdGhpcy5fY3JlYXRlUGFrbygpLCB0aGlzLl9wYWtvLnB1c2goW10sIHRydWUpO1xuICAgICAgfSwgaC5wcm90b3R5cGUuY2xlYW5VcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBhLnByb3RvdHlwZS5jbGVhblVwLmNhbGwodGhpcyksIHRoaXMuX3Bha28gPSBudWxsO1xuICAgICAgfSwgaC5wcm90b3R5cGUuX2NyZWF0ZVBha28gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5fcGFrbyA9IG5ldyBpW3RoaXMuX3Bha29BY3Rpb25dKHsgcmF3OiB0cnVlLCBsZXZlbDogdGhpcy5fcGFrb09wdGlvbnMubGV2ZWwgfHwgLTEgfSk7XG4gICAgICAgIHZhciB0MiA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3Bha28ub25EYXRhID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgICB0Mi5wdXNoKHsgZGF0YTogZTIsIG1ldGE6IHQyLm1ldGEgfSk7XG4gICAgICAgIH07XG4gICAgICB9LCByMi5jb21wcmVzc1dvcmtlciA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHJldHVybiBuZXcgaChcIkRlZmxhdGVcIiwgZTIpO1xuICAgICAgfSwgcjIudW5jb21wcmVzc1dvcmtlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3IGgoXCJJbmZsYXRlXCIsIHt9KTtcbiAgICAgIH07XG4gICAgfSwgeyBcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIjogMjgsIFwiLi91dGlsc1wiOiAzMiwgcGFrbzogMzggfV0sIDg6IFtmdW5jdGlvbihlLCB0LCByMikge1xuICAgICAgZnVuY3Rpb24gQShlMiwgdDIpIHtcbiAgICAgICAgdmFyIHIzLCBuMiA9IFwiXCI7XG4gICAgICAgIGZvciAocjMgPSAwOyByMyA8IHQyOyByMysrKSBuMiArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDI1NSAmIGUyKSwgZTIgPj4+PSA4O1xuICAgICAgICByZXR1cm4gbjI7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBuKGUyLCB0MiwgcjMsIG4yLCBpMiwgczMpIHtcbiAgICAgICAgdmFyIGEsIG8sIGggPSBlMi5maWxlLCB1ID0gZTIuY29tcHJlc3Npb24sIGwgPSBzMyAhPT0gTy51dGY4ZW5jb2RlLCBmMiA9IEkudHJhbnNmb3JtVG8oXCJzdHJpbmdcIiwgczMoaC5uYW1lKSksIGMgPSBJLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIsIE8udXRmOGVuY29kZShoLm5hbWUpKSwgZCA9IGguY29tbWVudCwgcCA9IEkudHJhbnNmb3JtVG8oXCJzdHJpbmdcIiwgczMoZCkpLCBtID0gSS50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLCBPLnV0ZjhlbmNvZGUoZCkpLCBfID0gYy5sZW5ndGggIT09IGgubmFtZS5sZW5ndGgsIGcgPSBtLmxlbmd0aCAhPT0gZC5sZW5ndGgsIGIgPSBcIlwiLCB2ID0gXCJcIiwgeSA9IFwiXCIsIHcgPSBoLmRpciwgayA9IGguZGF0ZSwgeCA9IHsgY3JjMzI6IDAsIGNvbXByZXNzZWRTaXplOiAwLCB1bmNvbXByZXNzZWRTaXplOiAwIH07XG4gICAgICAgIHQyICYmICFyMyB8fCAoeC5jcmMzMiA9IGUyLmNyYzMyLCB4LmNvbXByZXNzZWRTaXplID0gZTIuY29tcHJlc3NlZFNpemUsIHgudW5jb21wcmVzc2VkU2l6ZSA9IGUyLnVuY29tcHJlc3NlZFNpemUpO1xuICAgICAgICB2YXIgUyA9IDA7XG4gICAgICAgIHQyICYmIChTIHw9IDgpLCBsIHx8ICFfICYmICFnIHx8IChTIHw9IDIwNDgpO1xuICAgICAgICB2YXIgeiA9IDAsIEMgPSAwO1xuICAgICAgICB3ICYmICh6IHw9IDE2KSwgXCJVTklYXCIgPT09IGkyID8gKEMgPSA3OTgsIHogfD0gZnVuY3Rpb24oZTMsIHQzKSB7XG4gICAgICAgICAgdmFyIHI0ID0gZTM7XG4gICAgICAgICAgcmV0dXJuIGUzIHx8IChyNCA9IHQzID8gMTY4OTMgOiAzMzIwNCksICg2NTUzNSAmIHI0KSA8PCAxNjtcbiAgICAgICAgfShoLnVuaXhQZXJtaXNzaW9ucywgdykpIDogKEMgPSAyMCwgeiB8PSBmdW5jdGlvbihlMykge1xuICAgICAgICAgIHJldHVybiA2MyAmIChlMyB8fCAwKTtcbiAgICAgICAgfShoLmRvc1Blcm1pc3Npb25zKSksIGEgPSBrLmdldFVUQ0hvdXJzKCksIGEgPDw9IDYsIGEgfD0gay5nZXRVVENNaW51dGVzKCksIGEgPDw9IDUsIGEgfD0gay5nZXRVVENTZWNvbmRzKCkgLyAyLCBvID0gay5nZXRVVENGdWxsWWVhcigpIC0gMTk4MCwgbyA8PD0gNCwgbyB8PSBrLmdldFVUQ01vbnRoKCkgKyAxLCBvIDw8PSA1LCBvIHw9IGsuZ2V0VVRDRGF0ZSgpLCBfICYmICh2ID0gQSgxLCAxKSArIEEoQihmMiksIDQpICsgYywgYiArPSBcInVwXCIgKyBBKHYubGVuZ3RoLCAyKSArIHYpLCBnICYmICh5ID0gQSgxLCAxKSArIEEoQihwKSwgNCkgKyBtLCBiICs9IFwidWNcIiArIEEoeS5sZW5ndGgsIDIpICsgeSk7XG4gICAgICAgIHZhciBFID0gXCJcIjtcbiAgICAgICAgcmV0dXJuIEUgKz0gXCJcXG5cXDBcIiwgRSArPSBBKFMsIDIpLCBFICs9IHUubWFnaWMsIEUgKz0gQShhLCAyKSwgRSArPSBBKG8sIDIpLCBFICs9IEEoeC5jcmMzMiwgNCksIEUgKz0gQSh4LmNvbXByZXNzZWRTaXplLCA0KSwgRSArPSBBKHgudW5jb21wcmVzc2VkU2l6ZSwgNCksIEUgKz0gQShmMi5sZW5ndGgsIDIpLCBFICs9IEEoYi5sZW5ndGgsIDIpLCB7IGZpbGVSZWNvcmQ6IFIyLkxPQ0FMX0ZJTEVfSEVBREVSICsgRSArIGYyICsgYiwgZGlyUmVjb3JkOiBSMi5DRU5UUkFMX0ZJTEVfSEVBREVSICsgQShDLCAyKSArIEUgKyBBKHAubGVuZ3RoLCAyKSArIFwiXFwwXFwwXFwwXFwwXCIgKyBBKHosIDQpICsgQShuMiwgNCkgKyBmMiArIGIgKyBwIH07XG4gICAgICB9XG4gICAgICB2YXIgSSA9IGUoXCIuLi91dGlsc1wiKSwgaSA9IGUoXCIuLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKSwgTyA9IGUoXCIuLi91dGY4XCIpLCBCID0gZShcIi4uL2NyYzMyXCIpLCBSMiA9IGUoXCIuLi9zaWduYXR1cmVcIik7XG4gICAgICBmdW5jdGlvbiBzMihlMiwgdDIsIHIzLCBuMikge1xuICAgICAgICBpLmNhbGwodGhpcywgXCJaaXBGaWxlV29ya2VyXCIpLCB0aGlzLmJ5dGVzV3JpdHRlbiA9IDAsIHRoaXMuemlwQ29tbWVudCA9IHQyLCB0aGlzLnppcFBsYXRmb3JtID0gcjMsIHRoaXMuZW5jb2RlRmlsZU5hbWUgPSBuMiwgdGhpcy5zdHJlYW1GaWxlcyA9IGUyLCB0aGlzLmFjY3VtdWxhdGUgPSBmYWxzZSwgdGhpcy5jb250ZW50QnVmZmVyID0gW10sIHRoaXMuZGlyUmVjb3JkcyA9IFtdLCB0aGlzLmN1cnJlbnRTb3VyY2VPZmZzZXQgPSAwLCB0aGlzLmVudHJpZXNDb3VudCA9IDAsIHRoaXMuY3VycmVudEZpbGUgPSBudWxsLCB0aGlzLl9zb3VyY2VzID0gW107XG4gICAgICB9XG4gICAgICBJLmluaGVyaXRzKHMyLCBpKSwgczIucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbihlMikge1xuICAgICAgICB2YXIgdDIgPSBlMi5tZXRhLnBlcmNlbnQgfHwgMCwgcjMgPSB0aGlzLmVudHJpZXNDb3VudCwgbjIgPSB0aGlzLl9zb3VyY2VzLmxlbmd0aDtcbiAgICAgICAgdGhpcy5hY2N1bXVsYXRlID8gdGhpcy5jb250ZW50QnVmZmVyLnB1c2goZTIpIDogKHRoaXMuYnl0ZXNXcml0dGVuICs9IGUyLmRhdGEubGVuZ3RoLCBpLnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcywgeyBkYXRhOiBlMi5kYXRhLCBtZXRhOiB7IGN1cnJlbnRGaWxlOiB0aGlzLmN1cnJlbnRGaWxlLCBwZXJjZW50OiByMyA/ICh0MiArIDEwMCAqIChyMyAtIG4yIC0gMSkpIC8gcjMgOiAxMDAgfSB9KSk7XG4gICAgICB9LCBzMi5wcm90b3R5cGUub3BlbmVkU291cmNlID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50U291cmNlT2Zmc2V0ID0gdGhpcy5ieXRlc1dyaXR0ZW4sIHRoaXMuY3VycmVudEZpbGUgPSBlMi5maWxlLm5hbWU7XG4gICAgICAgIHZhciB0MiA9IHRoaXMuc3RyZWFtRmlsZXMgJiYgIWUyLmZpbGUuZGlyO1xuICAgICAgICBpZiAodDIpIHtcbiAgICAgICAgICB2YXIgcjMgPSBuKGUyLCB0MiwgZmFsc2UsIHRoaXMuY3VycmVudFNvdXJjZU9mZnNldCwgdGhpcy56aXBQbGF0Zm9ybSwgdGhpcy5lbmNvZGVGaWxlTmFtZSk7XG4gICAgICAgICAgdGhpcy5wdXNoKHsgZGF0YTogcjMuZmlsZVJlY29yZCwgbWV0YTogeyBwZXJjZW50OiAwIH0gfSk7XG4gICAgICAgIH0gZWxzZSB0aGlzLmFjY3VtdWxhdGUgPSB0cnVlO1xuICAgICAgfSwgczIucHJvdG90eXBlLmNsb3NlZFNvdXJjZSA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHRoaXMuYWNjdW11bGF0ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgdDIgPSB0aGlzLnN0cmVhbUZpbGVzICYmICFlMi5maWxlLmRpciwgcjMgPSBuKGUyLCB0MiwgdHJ1ZSwgdGhpcy5jdXJyZW50U291cmNlT2Zmc2V0LCB0aGlzLnppcFBsYXRmb3JtLCB0aGlzLmVuY29kZUZpbGVOYW1lKTtcbiAgICAgICAgaWYgKHRoaXMuZGlyUmVjb3Jkcy5wdXNoKHIzLmRpclJlY29yZCksIHQyKSB0aGlzLnB1c2goeyBkYXRhOiBmdW5jdGlvbihlMykge1xuICAgICAgICAgIHJldHVybiBSMi5EQVRBX0RFU0NSSVBUT1IgKyBBKGUzLmNyYzMyLCA0KSArIEEoZTMuY29tcHJlc3NlZFNpemUsIDQpICsgQShlMy51bmNvbXByZXNzZWRTaXplLCA0KTtcbiAgICAgICAgfShlMiksIG1ldGE6IHsgcGVyY2VudDogMTAwIH0gfSk7XG4gICAgICAgIGVsc2UgZm9yICh0aGlzLnB1c2goeyBkYXRhOiByMy5maWxlUmVjb3JkLCBtZXRhOiB7IHBlcmNlbnQ6IDAgfSB9KTsgdGhpcy5jb250ZW50QnVmZmVyLmxlbmd0aDsgKSB0aGlzLnB1c2godGhpcy5jb250ZW50QnVmZmVyLnNoaWZ0KCkpO1xuICAgICAgICB0aGlzLmN1cnJlbnRGaWxlID0gbnVsbDtcbiAgICAgIH0sIHMyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IgKHZhciBlMiA9IHRoaXMuYnl0ZXNXcml0dGVuLCB0MiA9IDA7IHQyIDwgdGhpcy5kaXJSZWNvcmRzLmxlbmd0aDsgdDIrKykgdGhpcy5wdXNoKHsgZGF0YTogdGhpcy5kaXJSZWNvcmRzW3QyXSwgbWV0YTogeyBwZXJjZW50OiAxMDAgfSB9KTtcbiAgICAgICAgdmFyIHIzID0gdGhpcy5ieXRlc1dyaXR0ZW4gLSBlMiwgbjIgPSBmdW5jdGlvbihlMywgdDMsIHI0LCBuMywgaTIpIHtcbiAgICAgICAgICB2YXIgczMgPSBJLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIsIGkyKG4zKSk7XG4gICAgICAgICAgcmV0dXJuIFIyLkNFTlRSQUxfRElSRUNUT1JZX0VORCArIFwiXFwwXFwwXFwwXFwwXCIgKyBBKGUzLCAyKSArIEEoZTMsIDIpICsgQSh0MywgNCkgKyBBKHI0LCA0KSArIEEoczMubGVuZ3RoLCAyKSArIHMzO1xuICAgICAgICB9KHRoaXMuZGlyUmVjb3Jkcy5sZW5ndGgsIHIzLCBlMiwgdGhpcy56aXBDb21tZW50LCB0aGlzLmVuY29kZUZpbGVOYW1lKTtcbiAgICAgICAgdGhpcy5wdXNoKHsgZGF0YTogbjIsIG1ldGE6IHsgcGVyY2VudDogMTAwIH0gfSk7XG4gICAgICB9LCBzMi5wcm90b3R5cGUucHJlcGFyZU5leHRTb3VyY2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5wcmV2aW91cyA9IHRoaXMuX3NvdXJjZXMuc2hpZnQoKSwgdGhpcy5vcGVuZWRTb3VyY2UodGhpcy5wcmV2aW91cy5zdHJlYW1JbmZvKSwgdGhpcy5pc1BhdXNlZCA/IHRoaXMucHJldmlvdXMucGF1c2UoKSA6IHRoaXMucHJldmlvdXMucmVzdW1lKCk7XG4gICAgICB9LCBzMi5wcm90b3R5cGUucmVnaXN0ZXJQcmV2aW91cyA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHRoaXMuX3NvdXJjZXMucHVzaChlMik7XG4gICAgICAgIHZhciB0MiA9IHRoaXM7XG4gICAgICAgIHJldHVybiBlMi5vbihcImRhdGFcIiwgZnVuY3Rpb24oZTMpIHtcbiAgICAgICAgICB0Mi5wcm9jZXNzQ2h1bmsoZTMpO1xuICAgICAgICB9KSwgZTIub24oXCJlbmRcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdDIuY2xvc2VkU291cmNlKHQyLnByZXZpb3VzLnN0cmVhbUluZm8pLCB0Mi5fc291cmNlcy5sZW5ndGggPyB0Mi5wcmVwYXJlTmV4dFNvdXJjZSgpIDogdDIuZW5kKCk7XG4gICAgICAgIH0pLCBlMi5vbihcImVycm9yXCIsIGZ1bmN0aW9uKGUzKSB7XG4gICAgICAgICAgdDIuZXJyb3IoZTMpO1xuICAgICAgICB9KSwgdGhpcztcbiAgICAgIH0sIHMyLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICEhaS5wcm90b3R5cGUucmVzdW1lLmNhbGwodGhpcykgJiYgKCF0aGlzLnByZXZpb3VzICYmIHRoaXMuX3NvdXJjZXMubGVuZ3RoID8gKHRoaXMucHJlcGFyZU5leHRTb3VyY2UoKSwgdHJ1ZSkgOiB0aGlzLnByZXZpb3VzIHx8IHRoaXMuX3NvdXJjZXMubGVuZ3RoIHx8IHRoaXMuZ2VuZXJhdGVkRXJyb3IgPyB2b2lkIDAgOiAodGhpcy5lbmQoKSwgdHJ1ZSkpO1xuICAgICAgfSwgczIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdmFyIHQyID0gdGhpcy5fc291cmNlcztcbiAgICAgICAgaWYgKCFpLnByb3RvdHlwZS5lcnJvci5jYWxsKHRoaXMsIGUyKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBmb3IgKHZhciByMyA9IDA7IHIzIDwgdDIubGVuZ3RoOyByMysrKSB0cnkge1xuICAgICAgICAgIHQyW3IzXS5lcnJvcihlMik7XG4gICAgICAgIH0gY2F0Y2ggKGUzKSB7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9LCBzMi5wcm90b3R5cGUubG9jayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpLnByb3RvdHlwZS5sb2NrLmNhbGwodGhpcyk7XG4gICAgICAgIGZvciAodmFyIGUyID0gdGhpcy5fc291cmNlcywgdDIgPSAwOyB0MiA8IGUyLmxlbmd0aDsgdDIrKykgZTJbdDJdLmxvY2soKTtcbiAgICAgIH0sIHQuZXhwb3J0cyA9IHMyO1xuICAgIH0sIHsgXCIuLi9jcmMzMlwiOiA0LCBcIi4uL3NpZ25hdHVyZVwiOiAyMywgXCIuLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiOiAyOCwgXCIuLi91dGY4XCI6IDMxLCBcIi4uL3V0aWxzXCI6IDMyIH1dLCA5OiBbZnVuY3Rpb24oZSwgdCwgcjIpIHtcbiAgICAgIHZhciB1ID0gZShcIi4uL2NvbXByZXNzaW9uc1wiKSwgbiA9IGUoXCIuL1ppcEZpbGVXb3JrZXJcIik7XG4gICAgICByMi5nZW5lcmF0ZVdvcmtlciA9IGZ1bmN0aW9uKGUyLCBhLCB0Mikge1xuICAgICAgICB2YXIgbyA9IG5ldyBuKGEuc3RyZWFtRmlsZXMsIHQyLCBhLnBsYXRmb3JtLCBhLmVuY29kZUZpbGVOYW1lKSwgaCA9IDA7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZTIuZm9yRWFjaChmdW5jdGlvbihlMywgdDMpIHtcbiAgICAgICAgICAgIGgrKztcbiAgICAgICAgICAgIHZhciByMyA9IGZ1bmN0aW9uKGU0LCB0NCkge1xuICAgICAgICAgICAgICB2YXIgcjQgPSBlNCB8fCB0NCwgbjMgPSB1W3I0XTtcbiAgICAgICAgICAgICAgaWYgKCFuMykgdGhyb3cgbmV3IEVycm9yKHI0ICsgXCIgaXMgbm90IGEgdmFsaWQgY29tcHJlc3Npb24gbWV0aG9kICFcIik7XG4gICAgICAgICAgICAgIHJldHVybiBuMztcbiAgICAgICAgICAgIH0odDMub3B0aW9ucy5jb21wcmVzc2lvbiwgYS5jb21wcmVzc2lvbiksIG4yID0gdDMub3B0aW9ucy5jb21wcmVzc2lvbk9wdGlvbnMgfHwgYS5jb21wcmVzc2lvbk9wdGlvbnMgfHwge30sIGkgPSB0My5kaXIsIHMyID0gdDMuZGF0ZTtcbiAgICAgICAgICAgIHQzLl9jb21wcmVzc1dvcmtlcihyMywgbjIpLndpdGhTdHJlYW1JbmZvKFwiZmlsZVwiLCB7IG5hbWU6IGUzLCBkaXI6IGksIGRhdGU6IHMyLCBjb21tZW50OiB0My5jb21tZW50IHx8IFwiXCIsIHVuaXhQZXJtaXNzaW9uczogdDMudW5peFBlcm1pc3Npb25zLCBkb3NQZXJtaXNzaW9uczogdDMuZG9zUGVybWlzc2lvbnMgfSkucGlwZShvKTtcbiAgICAgICAgICB9KSwgby5lbnRyaWVzQ291bnQgPSBoO1xuICAgICAgICB9IGNhdGNoIChlMykge1xuICAgICAgICAgIG8uZXJyb3IoZTMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvO1xuICAgICAgfTtcbiAgICB9LCB7IFwiLi4vY29tcHJlc3Npb25zXCI6IDMsIFwiLi9aaXBGaWxlV29ya2VyXCI6IDggfV0sIDEwOiBbZnVuY3Rpb24oZSwgdCwgcjIpIHtcbiAgICAgIGZ1bmN0aW9uIG4oKSB7XG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBuKSkgcmV0dXJuIG5ldyBuKCk7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgY29uc3RydWN0b3Igd2l0aCBwYXJhbWV0ZXJzIGhhcyBiZWVuIHJlbW92ZWQgaW4gSlNaaXAgMy4wLCBwbGVhc2UgY2hlY2sgdGhlIHVwZ3JhZGUgZ3VpZGUuXCIpO1xuICAgICAgICB0aGlzLmZpbGVzID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCksIHRoaXMuY29tbWVudCA9IG51bGwsIHRoaXMucm9vdCA9IFwiXCIsIHRoaXMuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgZTIgPSBuZXcgbigpO1xuICAgICAgICAgIGZvciAodmFyIHQyIGluIHRoaXMpIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgdGhpc1t0Ml0gJiYgKGUyW3QyXSA9IHRoaXNbdDJdKTtcbiAgICAgICAgICByZXR1cm4gZTI7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICAobi5wcm90b3R5cGUgPSBlKFwiLi9vYmplY3RcIikpLmxvYWRBc3luYyA9IGUoXCIuL2xvYWRcIiksIG4uc3VwcG9ydCA9IGUoXCIuL3N1cHBvcnRcIiksIG4uZGVmYXVsdHMgPSBlKFwiLi9kZWZhdWx0c1wiKSwgbi52ZXJzaW9uID0gXCIzLjEwLjFcIiwgbi5sb2FkQXN5bmMgPSBmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBuKCkubG9hZEFzeW5jKGUyLCB0Mik7XG4gICAgICB9LCBuLmV4dGVybmFsID0gZShcIi4vZXh0ZXJuYWxcIiksIHQuZXhwb3J0cyA9IG47XG4gICAgfSwgeyBcIi4vZGVmYXVsdHNcIjogNSwgXCIuL2V4dGVybmFsXCI6IDYsIFwiLi9sb2FkXCI6IDExLCBcIi4vb2JqZWN0XCI6IDE1LCBcIi4vc3VwcG9ydFwiOiAzMCB9XSwgMTE6IFtmdW5jdGlvbihlLCB0LCByMikge1xuICAgICAgdmFyIHUgPSBlKFwiLi91dGlsc1wiKSwgaSA9IGUoXCIuL2V4dGVybmFsXCIpLCBuID0gZShcIi4vdXRmOFwiKSwgczIgPSBlKFwiLi96aXBFbnRyaWVzXCIpLCBhID0gZShcIi4vc3RyZWFtL0NyYzMyUHJvYmVcIiksIGwgPSBlKFwiLi9ub2RlanNVdGlsc1wiKTtcbiAgICAgIGZ1bmN0aW9uIGYyKG4yKSB7XG4gICAgICAgIHJldHVybiBuZXcgaS5Qcm9taXNlKGZ1bmN0aW9uKGUyLCB0Mikge1xuICAgICAgICAgIHZhciByMyA9IG4yLmRlY29tcHJlc3NlZC5nZXRDb250ZW50V29ya2VyKCkucGlwZShuZXcgYSgpKTtcbiAgICAgICAgICByMy5vbihcImVycm9yXCIsIGZ1bmN0aW9uKGUzKSB7XG4gICAgICAgICAgICB0MihlMyk7XG4gICAgICAgICAgfSkub24oXCJlbmRcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByMy5zdHJlYW1JbmZvLmNyYzMyICE9PSBuMi5kZWNvbXByZXNzZWQuY3JjMzIgPyB0MihuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwIDogQ1JDMzIgbWlzbWF0Y2hcIikpIDogZTIoKTtcbiAgICAgICAgICB9KS5yZXN1bWUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB0LmV4cG9ydHMgPSBmdW5jdGlvbihlMiwgbykge1xuICAgICAgICB2YXIgaCA9IHRoaXM7XG4gICAgICAgIHJldHVybiBvID0gdS5leHRlbmQobyB8fCB7fSwgeyBiYXNlNjQ6IGZhbHNlLCBjaGVja0NSQzMyOiBmYWxzZSwgb3B0aW1pemVkQmluYXJ5U3RyaW5nOiBmYWxzZSwgY3JlYXRlRm9sZGVyczogZmFsc2UsIGRlY29kZUZpbGVOYW1lOiBuLnV0ZjhkZWNvZGUgfSksIGwuaXNOb2RlICYmIGwuaXNTdHJlYW0oZTIpID8gaS5Qcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJKU1ppcCBjYW4ndCBhY2NlcHQgYSBzdHJlYW0gd2hlbiBsb2FkaW5nIGEgemlwIGZpbGUuXCIpKSA6IHUucHJlcGFyZUNvbnRlbnQoXCJ0aGUgbG9hZGVkIHppcCBmaWxlXCIsIGUyLCB0cnVlLCBvLm9wdGltaXplZEJpbmFyeVN0cmluZywgby5iYXNlNjQpLnRoZW4oZnVuY3Rpb24oZTMpIHtcbiAgICAgICAgICB2YXIgdDIgPSBuZXcgczIobyk7XG4gICAgICAgICAgcmV0dXJuIHQyLmxvYWQoZTMpLCB0MjtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbihlMykge1xuICAgICAgICAgIHZhciB0MiA9IFtpLlByb21pc2UucmVzb2x2ZShlMyldLCByMyA9IGUzLmZpbGVzO1xuICAgICAgICAgIGlmIChvLmNoZWNrQ1JDMzIpIGZvciAodmFyIG4yID0gMDsgbjIgPCByMy5sZW5ndGg7IG4yKyspIHQyLnB1c2goZjIocjNbbjJdKSk7XG4gICAgICAgICAgcmV0dXJuIGkuUHJvbWlzZS5hbGwodDIpO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKGUzKSB7XG4gICAgICAgICAgZm9yICh2YXIgdDIgPSBlMy5zaGlmdCgpLCByMyA9IHQyLmZpbGVzLCBuMiA9IDA7IG4yIDwgcjMubGVuZ3RoOyBuMisrKSB7XG4gICAgICAgICAgICB2YXIgaTIgPSByM1tuMl0sIHMzID0gaTIuZmlsZU5hbWVTdHIsIGEyID0gdS5yZXNvbHZlKGkyLmZpbGVOYW1lU3RyKTtcbiAgICAgICAgICAgIGguZmlsZShhMiwgaTIuZGVjb21wcmVzc2VkLCB7IGJpbmFyeTogdHJ1ZSwgb3B0aW1pemVkQmluYXJ5U3RyaW5nOiB0cnVlLCBkYXRlOiBpMi5kYXRlLCBkaXI6IGkyLmRpciwgY29tbWVudDogaTIuZmlsZUNvbW1lbnRTdHIubGVuZ3RoID8gaTIuZmlsZUNvbW1lbnRTdHIgOiBudWxsLCB1bml4UGVybWlzc2lvbnM6IGkyLnVuaXhQZXJtaXNzaW9ucywgZG9zUGVybWlzc2lvbnM6IGkyLmRvc1Blcm1pc3Npb25zLCBjcmVhdGVGb2xkZXJzOiBvLmNyZWF0ZUZvbGRlcnMgfSksIGkyLmRpciB8fCAoaC5maWxlKGEyKS51bnNhZmVPcmlnaW5hbE5hbWUgPSBzMyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0Mi56aXBDb21tZW50Lmxlbmd0aCAmJiAoaC5jb21tZW50ID0gdDIuemlwQ29tbWVudCksIGg7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9LCB7IFwiLi9leHRlcm5hbFwiOiA2LCBcIi4vbm9kZWpzVXRpbHNcIjogMTQsIFwiLi9zdHJlYW0vQ3JjMzJQcm9iZVwiOiAyNSwgXCIuL3V0ZjhcIjogMzEsIFwiLi91dGlsc1wiOiAzMiwgXCIuL3ppcEVudHJpZXNcIjogMzMgfV0sIDEyOiBbZnVuY3Rpb24oZSwgdCwgcjIpIHtcbiAgICAgIHZhciBuID0gZShcIi4uL3V0aWxzXCIpLCBpID0gZShcIi4uL3N0cmVhbS9HZW5lcmljV29ya2VyXCIpO1xuICAgICAgZnVuY3Rpb24gczIoZTIsIHQyKSB7XG4gICAgICAgIGkuY2FsbCh0aGlzLCBcIk5vZGVqcyBzdHJlYW0gaW5wdXQgYWRhcHRlciBmb3IgXCIgKyBlMiksIHRoaXMuX3Vwc3RyZWFtRW5kZWQgPSBmYWxzZSwgdGhpcy5fYmluZFN0cmVhbSh0Mik7XG4gICAgICB9XG4gICAgICBuLmluaGVyaXRzKHMyLCBpKSwgczIucHJvdG90eXBlLl9iaW5kU3RyZWFtID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdmFyIHQyID0gdGhpcztcbiAgICAgICAgKHRoaXMuX3N0cmVhbSA9IGUyKS5wYXVzZSgpLCBlMi5vbihcImRhdGFcIiwgZnVuY3Rpb24oZTMpIHtcbiAgICAgICAgICB0Mi5wdXNoKHsgZGF0YTogZTMsIG1ldGE6IHsgcGVyY2VudDogMCB9IH0pO1xuICAgICAgICB9KS5vbihcImVycm9yXCIsIGZ1bmN0aW9uKGUzKSB7XG4gICAgICAgICAgdDIuaXNQYXVzZWQgPyB0aGlzLmdlbmVyYXRlZEVycm9yID0gZTMgOiB0Mi5lcnJvcihlMyk7XG4gICAgICAgIH0pLm9uKFwiZW5kXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHQyLmlzUGF1c2VkID8gdDIuX3Vwc3RyZWFtRW5kZWQgPSB0cnVlIDogdDIuZW5kKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSwgczIucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAhIWkucHJvdG90eXBlLnBhdXNlLmNhbGwodGhpcykgJiYgKHRoaXMuX3N0cmVhbS5wYXVzZSgpLCB0cnVlKTtcbiAgICAgIH0sIHMyLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICEhaS5wcm90b3R5cGUucmVzdW1lLmNhbGwodGhpcykgJiYgKHRoaXMuX3Vwc3RyZWFtRW5kZWQgPyB0aGlzLmVuZCgpIDogdGhpcy5fc3RyZWFtLnJlc3VtZSgpLCB0cnVlKTtcbiAgICAgIH0sIHQuZXhwb3J0cyA9IHMyO1xuICAgIH0sIHsgXCIuLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiOiAyOCwgXCIuLi91dGlsc1wiOiAzMiB9XSwgMTM6IFtmdW5jdGlvbihlLCB0LCByMikge1xuICAgICAgdmFyIGkgPSBlKFwicmVhZGFibGUtc3RyZWFtXCIpLlJlYWRhYmxlO1xuICAgICAgZnVuY3Rpb24gbihlMiwgdDIsIHIzKSB7XG4gICAgICAgIGkuY2FsbCh0aGlzLCB0MiksIHRoaXMuX2hlbHBlciA9IGUyO1xuICAgICAgICB2YXIgbjIgPSB0aGlzO1xuICAgICAgICBlMi5vbihcImRhdGFcIiwgZnVuY3Rpb24oZTMsIHQzKSB7XG4gICAgICAgICAgbjIucHVzaChlMykgfHwgbjIuX2hlbHBlci5wYXVzZSgpLCByMyAmJiByMyh0Myk7XG4gICAgICAgIH0pLm9uKFwiZXJyb3JcIiwgZnVuY3Rpb24oZTMpIHtcbiAgICAgICAgICBuMi5lbWl0KFwiZXJyb3JcIiwgZTMpO1xuICAgICAgICB9KS5vbihcImVuZFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBuMi5wdXNoKG51bGwpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGUoXCIuLi91dGlsc1wiKS5pbmhlcml0cyhuLCBpKSwgbi5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5faGVscGVyLnJlc3VtZSgpO1xuICAgICAgfSwgdC5leHBvcnRzID0gbjtcbiAgICB9LCB7IFwiLi4vdXRpbHNcIjogMzIsIFwicmVhZGFibGUtc3RyZWFtXCI6IDE2IH1dLCAxNDogW2Z1bmN0aW9uKGUsIHQsIHIyKSB7XG4gICAgICB0LmV4cG9ydHMgPSB7IGlzTm9kZTogXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgQnVmZmVyLCBuZXdCdWZmZXJGcm9tOiBmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgaWYgKEJ1ZmZlci5mcm9tICYmIEJ1ZmZlci5mcm9tICE9PSBVaW50OEFycmF5LmZyb20pIHJldHVybiBCdWZmZXIuZnJvbShlMiwgdDIpO1xuICAgICAgICBpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgZTIpIHRocm93IG5ldyBFcnJvcignVGhlIFwiZGF0YVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJyk7XG4gICAgICAgIHJldHVybiBuZXcgQnVmZmVyKGUyLCB0Mik7XG4gICAgICB9LCBhbGxvY0J1ZmZlcjogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgaWYgKEJ1ZmZlci5hbGxvYykgcmV0dXJuIEJ1ZmZlci5hbGxvYyhlMik7XG4gICAgICAgIHZhciB0MiA9IG5ldyBCdWZmZXIoZTIpO1xuICAgICAgICByZXR1cm4gdDIuZmlsbCgwKSwgdDI7XG4gICAgICB9LCBpc0J1ZmZlcjogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihlMik7XG4gICAgICB9LCBpc1N0cmVhbTogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgcmV0dXJuIGUyICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZTIub24gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBlMi5wYXVzZSAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUyLnJlc3VtZTtcbiAgICAgIH0gfTtcbiAgICB9LCB7fV0sIDE1OiBbZnVuY3Rpb24oZSwgdCwgcjIpIHtcbiAgICAgIGZ1bmN0aW9uIHMyKGUyLCB0MiwgcjMpIHtcbiAgICAgICAgdmFyIG4yLCBpMiA9IHUuZ2V0VHlwZU9mKHQyKSwgczMgPSB1LmV4dGVuZChyMyB8fCB7fSwgZjIpO1xuICAgICAgICBzMy5kYXRlID0gczMuZGF0ZSB8fCAvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKSwgbnVsbCAhPT0gczMuY29tcHJlc3Npb24gJiYgKHMzLmNvbXByZXNzaW9uID0gczMuY29tcHJlc3Npb24udG9VcHBlckNhc2UoKSksIFwic3RyaW5nXCIgPT0gdHlwZW9mIHMzLnVuaXhQZXJtaXNzaW9ucyAmJiAoczMudW5peFBlcm1pc3Npb25zID0gcGFyc2VJbnQoczMudW5peFBlcm1pc3Npb25zLCA4KSksIHMzLnVuaXhQZXJtaXNzaW9ucyAmJiAxNjM4NCAmIHMzLnVuaXhQZXJtaXNzaW9ucyAmJiAoczMuZGlyID0gdHJ1ZSksIHMzLmRvc1Blcm1pc3Npb25zICYmIDE2ICYgczMuZG9zUGVybWlzc2lvbnMgJiYgKHMzLmRpciA9IHRydWUpLCBzMy5kaXIgJiYgKGUyID0gZyhlMikpLCBzMy5jcmVhdGVGb2xkZXJzICYmIChuMiA9IF8oZTIpKSAmJiBiLmNhbGwodGhpcywgbjIsIHRydWUpO1xuICAgICAgICB2YXIgYTIgPSBcInN0cmluZ1wiID09PSBpMiAmJiBmYWxzZSA9PT0gczMuYmluYXJ5ICYmIGZhbHNlID09PSBzMy5iYXNlNjQ7XG4gICAgICAgIHIzICYmIHZvaWQgMCAhPT0gcjMuYmluYXJ5IHx8IChzMy5iaW5hcnkgPSAhYTIpLCAodDIgaW5zdGFuY2VvZiBjICYmIDAgPT09IHQyLnVuY29tcHJlc3NlZFNpemUgfHwgczMuZGlyIHx8ICF0MiB8fCAwID09PSB0Mi5sZW5ndGgpICYmIChzMy5iYXNlNjQgPSBmYWxzZSwgczMuYmluYXJ5ID0gdHJ1ZSwgdDIgPSBcIlwiLCBzMy5jb21wcmVzc2lvbiA9IFwiU1RPUkVcIiwgaTIgPSBcInN0cmluZ1wiKTtcbiAgICAgICAgdmFyIG8yID0gbnVsbDtcbiAgICAgICAgbzIgPSB0MiBpbnN0YW5jZW9mIGMgfHwgdDIgaW5zdGFuY2VvZiBsID8gdDIgOiBwLmlzTm9kZSAmJiBwLmlzU3RyZWFtKHQyKSA/IG5ldyBtKGUyLCB0MikgOiB1LnByZXBhcmVDb250ZW50KGUyLCB0MiwgczMuYmluYXJ5LCBzMy5vcHRpbWl6ZWRCaW5hcnlTdHJpbmcsIHMzLmJhc2U2NCk7XG4gICAgICAgIHZhciBoMiA9IG5ldyBkKGUyLCBvMiwgczMpO1xuICAgICAgICB0aGlzLmZpbGVzW2UyXSA9IGgyO1xuICAgICAgfVxuICAgICAgdmFyIGkgPSBlKFwiLi91dGY4XCIpLCB1ID0gZShcIi4vdXRpbHNcIiksIGwgPSBlKFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKSwgYSA9IGUoXCIuL3N0cmVhbS9TdHJlYW1IZWxwZXJcIiksIGYyID0gZShcIi4vZGVmYXVsdHNcIiksIGMgPSBlKFwiLi9jb21wcmVzc2VkT2JqZWN0XCIpLCBkID0gZShcIi4vemlwT2JqZWN0XCIpLCBvID0gZShcIi4vZ2VuZXJhdGVcIiksIHAgPSBlKFwiLi9ub2RlanNVdGlsc1wiKSwgbSA9IGUoXCIuL25vZGVqcy9Ob2RlanNTdHJlYW1JbnB1dEFkYXB0ZXJcIiksIF8gPSBmdW5jdGlvbihlMikge1xuICAgICAgICBcIi9cIiA9PT0gZTIuc2xpY2UoLTEpICYmIChlMiA9IGUyLnN1YnN0cmluZygwLCBlMi5sZW5ndGggLSAxKSk7XG4gICAgICAgIHZhciB0MiA9IGUyLmxhc3RJbmRleE9mKFwiL1wiKTtcbiAgICAgICAgcmV0dXJuIDAgPCB0MiA/IGUyLnN1YnN0cmluZygwLCB0MikgOiBcIlwiO1xuICAgICAgfSwgZyA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHJldHVybiBcIi9cIiAhPT0gZTIuc2xpY2UoLTEpICYmIChlMiArPSBcIi9cIiksIGUyO1xuICAgICAgfSwgYiA9IGZ1bmN0aW9uKGUyLCB0Mikge1xuICAgICAgICByZXR1cm4gdDIgPSB2b2lkIDAgIT09IHQyID8gdDIgOiBmMi5jcmVhdGVGb2xkZXJzLCBlMiA9IGcoZTIpLCB0aGlzLmZpbGVzW2UyXSB8fCBzMi5jYWxsKHRoaXMsIGUyLCBudWxsLCB7IGRpcjogdHJ1ZSwgY3JlYXRlRm9sZGVyczogdDIgfSksIHRoaXMuZmlsZXNbZTJdO1xuICAgICAgfTtcbiAgICAgIGZ1bmN0aW9uIGgoZTIpIHtcbiAgICAgICAgcmV0dXJuIFwiW29iamVjdCBSZWdFeHBdXCIgPT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlMik7XG4gICAgICB9XG4gICAgICB2YXIgbiA9IHsgbG9hZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgbWV0aG9kIGhhcyBiZWVuIHJlbW92ZWQgaW4gSlNaaXAgMy4wLCBwbGVhc2UgY2hlY2sgdGhlIHVwZ3JhZGUgZ3VpZGUuXCIpO1xuICAgICAgfSwgZm9yRWFjaDogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdmFyIHQyLCByMywgbjI7XG4gICAgICAgIGZvciAodDIgaW4gdGhpcy5maWxlcykgbjIgPSB0aGlzLmZpbGVzW3QyXSwgKHIzID0gdDIuc2xpY2UodGhpcy5yb290Lmxlbmd0aCwgdDIubGVuZ3RoKSkgJiYgdDIuc2xpY2UoMCwgdGhpcy5yb290Lmxlbmd0aCkgPT09IHRoaXMucm9vdCAmJiBlMihyMywgbjIpO1xuICAgICAgfSwgZmlsdGVyOiBmdW5jdGlvbihyMykge1xuICAgICAgICB2YXIgbjIgPSBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9yRWFjaChmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgICByMyhlMiwgdDIpICYmIG4yLnB1c2godDIpO1xuICAgICAgICB9KSwgbjI7XG4gICAgICB9LCBmaWxlOiBmdW5jdGlvbihlMiwgdDIsIHIzKSB7XG4gICAgICAgIGlmICgxICE9PSBhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZTIgPSB0aGlzLnJvb3QgKyBlMiwgczIuY2FsbCh0aGlzLCBlMiwgdDIsIHIzKSwgdGhpcztcbiAgICAgICAgaWYgKGgoZTIpKSB7XG4gICAgICAgICAgdmFyIG4yID0gZTI7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKGUzLCB0Mykge1xuICAgICAgICAgICAgcmV0dXJuICF0My5kaXIgJiYgbjIudGVzdChlMyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGkyID0gdGhpcy5maWxlc1t0aGlzLnJvb3QgKyBlMl07XG4gICAgICAgIHJldHVybiBpMiAmJiAhaTIuZGlyID8gaTIgOiBudWxsO1xuICAgICAgfSwgZm9sZGVyOiBmdW5jdGlvbihyMykge1xuICAgICAgICBpZiAoIXIzKSByZXR1cm4gdGhpcztcbiAgICAgICAgaWYgKGgocjMpKSByZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24oZTMsIHQzKSB7XG4gICAgICAgICAgcmV0dXJuIHQzLmRpciAmJiByMy50ZXN0KGUzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBlMiA9IHRoaXMucm9vdCArIHIzLCB0MiA9IGIuY2FsbCh0aGlzLCBlMiksIG4yID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXR1cm4gbjIucm9vdCA9IHQyLm5hbWUsIG4yO1xuICAgICAgfSwgcmVtb3ZlOiBmdW5jdGlvbihyMykge1xuICAgICAgICByMyA9IHRoaXMucm9vdCArIHIzO1xuICAgICAgICB2YXIgZTIgPSB0aGlzLmZpbGVzW3IzXTtcbiAgICAgICAgaWYgKGUyIHx8IChcIi9cIiAhPT0gcjMuc2xpY2UoLTEpICYmIChyMyArPSBcIi9cIiksIGUyID0gdGhpcy5maWxlc1tyM10pLCBlMiAmJiAhZTIuZGlyKSBkZWxldGUgdGhpcy5maWxlc1tyM107XG4gICAgICAgIGVsc2UgZm9yICh2YXIgdDIgPSB0aGlzLmZpbHRlcihmdW5jdGlvbihlMywgdDMpIHtcbiAgICAgICAgICByZXR1cm4gdDMubmFtZS5zbGljZSgwLCByMy5sZW5ndGgpID09PSByMztcbiAgICAgICAgfSksIG4yID0gMDsgbjIgPCB0Mi5sZW5ndGg7IG4yKyspIGRlbGV0ZSB0aGlzLmZpbGVzW3QyW24yXS5uYW1lXTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LCBnZW5lcmF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgbWV0aG9kIGhhcyBiZWVuIHJlbW92ZWQgaW4gSlNaaXAgMy4wLCBwbGVhc2UgY2hlY2sgdGhlIHVwZ3JhZGUgZ3VpZGUuXCIpO1xuICAgICAgfSwgZ2VuZXJhdGVJbnRlcm5hbFN0cmVhbTogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdmFyIHQyLCByMyA9IHt9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICgocjMgPSB1LmV4dGVuZChlMiB8fCB7fSwgeyBzdHJlYW1GaWxlczogZmFsc2UsIGNvbXByZXNzaW9uOiBcIlNUT1JFXCIsIGNvbXByZXNzaW9uT3B0aW9uczogbnVsbCwgdHlwZTogXCJcIiwgcGxhdGZvcm06IFwiRE9TXCIsIGNvbW1lbnQ6IG51bGwsIG1pbWVUeXBlOiBcImFwcGxpY2F0aW9uL3ppcFwiLCBlbmNvZGVGaWxlTmFtZTogaS51dGY4ZW5jb2RlIH0pKS50eXBlID0gcjMudHlwZS50b0xvd2VyQ2FzZSgpLCByMy5jb21wcmVzc2lvbiA9IHIzLmNvbXByZXNzaW9uLnRvVXBwZXJDYXNlKCksIFwiYmluYXJ5c3RyaW5nXCIgPT09IHIzLnR5cGUgJiYgKHIzLnR5cGUgPSBcInN0cmluZ1wiKSwgIXIzLnR5cGUpIHRocm93IG5ldyBFcnJvcihcIk5vIG91dHB1dCB0eXBlIHNwZWNpZmllZC5cIik7XG4gICAgICAgICAgdS5jaGVja1N1cHBvcnQocjMudHlwZSksIFwiZGFyd2luXCIgIT09IHIzLnBsYXRmb3JtICYmIFwiZnJlZWJzZFwiICE9PSByMy5wbGF0Zm9ybSAmJiBcImxpbnV4XCIgIT09IHIzLnBsYXRmb3JtICYmIFwic3Vub3NcIiAhPT0gcjMucGxhdGZvcm0gfHwgKHIzLnBsYXRmb3JtID0gXCJVTklYXCIpLCBcIndpbjMyXCIgPT09IHIzLnBsYXRmb3JtICYmIChyMy5wbGF0Zm9ybSA9IFwiRE9TXCIpO1xuICAgICAgICAgIHZhciBuMiA9IHIzLmNvbW1lbnQgfHwgdGhpcy5jb21tZW50IHx8IFwiXCI7XG4gICAgICAgICAgdDIgPSBvLmdlbmVyYXRlV29ya2VyKHRoaXMsIHIzLCBuMik7XG4gICAgICAgIH0gY2F0Y2ggKGUzKSB7XG4gICAgICAgICAgKHQyID0gbmV3IGwoXCJlcnJvclwiKSkuZXJyb3IoZTMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgYSh0MiwgcjMudHlwZSB8fCBcInN0cmluZ1wiLCByMy5taW1lVHlwZSk7XG4gICAgICB9LCBnZW5lcmF0ZUFzeW5jOiBmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVJbnRlcm5hbFN0cmVhbShlMikuYWNjdW11bGF0ZSh0Mik7XG4gICAgICB9LCBnZW5lcmF0ZU5vZGVTdHJlYW06IGZ1bmN0aW9uKGUyLCB0Mikge1xuICAgICAgICByZXR1cm4gKGUyID0gZTIgfHwge30pLnR5cGUgfHwgKGUyLnR5cGUgPSBcIm5vZGVidWZmZXJcIiksIHRoaXMuZ2VuZXJhdGVJbnRlcm5hbFN0cmVhbShlMikudG9Ob2RlanNTdHJlYW0odDIpO1xuICAgICAgfSB9O1xuICAgICAgdC5leHBvcnRzID0gbjtcbiAgICB9LCB7IFwiLi9jb21wcmVzc2VkT2JqZWN0XCI6IDIsIFwiLi9kZWZhdWx0c1wiOiA1LCBcIi4vZ2VuZXJhdGVcIjogOSwgXCIuL25vZGVqcy9Ob2RlanNTdHJlYW1JbnB1dEFkYXB0ZXJcIjogMTIsIFwiLi9ub2RlanNVdGlsc1wiOiAxNCwgXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCI6IDI4LCBcIi4vc3RyZWFtL1N0cmVhbUhlbHBlclwiOiAyOSwgXCIuL3V0ZjhcIjogMzEsIFwiLi91dGlsc1wiOiAzMiwgXCIuL3ppcE9iamVjdFwiOiAzNSB9XSwgMTY6IFtmdW5jdGlvbihlLCB0LCByMikge1xuICAgICAgdC5leHBvcnRzID0gZShcInN0cmVhbVwiKTtcbiAgICB9LCB7IHN0cmVhbTogdm9pZCAwIH1dLCAxNzogW2Z1bmN0aW9uKGUsIHQsIHIyKSB7XG4gICAgICB2YXIgbiA9IGUoXCIuL0RhdGFSZWFkZXJcIik7XG4gICAgICBmdW5jdGlvbiBpKGUyKSB7XG4gICAgICAgIG4uY2FsbCh0aGlzLCBlMik7XG4gICAgICAgIGZvciAodmFyIHQyID0gMDsgdDIgPCB0aGlzLmRhdGEubGVuZ3RoOyB0MisrKSBlMlt0Ml0gPSAyNTUgJiBlMlt0Ml07XG4gICAgICB9XG4gICAgICBlKFwiLi4vdXRpbHNcIikuaW5oZXJpdHMoaSwgbiksIGkucHJvdG90eXBlLmJ5dGVBdCA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFbdGhpcy56ZXJvICsgZTJdO1xuICAgICAgfSwgaS5wcm90b3R5cGUubGFzdEluZGV4T2ZTaWduYXR1cmUgPSBmdW5jdGlvbihlMikge1xuICAgICAgICBmb3IgKHZhciB0MiA9IGUyLmNoYXJDb2RlQXQoMCksIHIzID0gZTIuY2hhckNvZGVBdCgxKSwgbjIgPSBlMi5jaGFyQ29kZUF0KDIpLCBpMiA9IGUyLmNoYXJDb2RlQXQoMyksIHMyID0gdGhpcy5sZW5ndGggLSA0OyAwIDw9IHMyOyAtLXMyKSBpZiAodGhpcy5kYXRhW3MyXSA9PT0gdDIgJiYgdGhpcy5kYXRhW3MyICsgMV0gPT09IHIzICYmIHRoaXMuZGF0YVtzMiArIDJdID09PSBuMiAmJiB0aGlzLmRhdGFbczIgKyAzXSA9PT0gaTIpIHJldHVybiBzMiAtIHRoaXMuemVybztcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfSwgaS5wcm90b3R5cGUucmVhZEFuZENoZWNrU2lnbmF0dXJlID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdmFyIHQyID0gZTIuY2hhckNvZGVBdCgwKSwgcjMgPSBlMi5jaGFyQ29kZUF0KDEpLCBuMiA9IGUyLmNoYXJDb2RlQXQoMiksIGkyID0gZTIuY2hhckNvZGVBdCgzKSwgczIgPSB0aGlzLnJlYWREYXRhKDQpO1xuICAgICAgICByZXR1cm4gdDIgPT09IHMyWzBdICYmIHIzID09PSBzMlsxXSAmJiBuMiA9PT0gczJbMl0gJiYgaTIgPT09IHMyWzNdO1xuICAgICAgfSwgaS5wcm90b3R5cGUucmVhZERhdGEgPSBmdW5jdGlvbihlMikge1xuICAgICAgICBpZiAodGhpcy5jaGVja09mZnNldChlMiksIDAgPT09IGUyKSByZXR1cm4gW107XG4gICAgICAgIHZhciB0MiA9IHRoaXMuZGF0YS5zbGljZSh0aGlzLnplcm8gKyB0aGlzLmluZGV4LCB0aGlzLnplcm8gKyB0aGlzLmluZGV4ICsgZTIpO1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRleCArPSBlMiwgdDI7XG4gICAgICB9LCB0LmV4cG9ydHMgPSBpO1xuICAgIH0sIHsgXCIuLi91dGlsc1wiOiAzMiwgXCIuL0RhdGFSZWFkZXJcIjogMTggfV0sIDE4OiBbZnVuY3Rpb24oZSwgdCwgcjIpIHtcbiAgICAgIHZhciBuID0gZShcIi4uL3V0aWxzXCIpO1xuICAgICAgZnVuY3Rpb24gaShlMikge1xuICAgICAgICB0aGlzLmRhdGEgPSBlMiwgdGhpcy5sZW5ndGggPSBlMi5sZW5ndGgsIHRoaXMuaW5kZXggPSAwLCB0aGlzLnplcm8gPSAwO1xuICAgICAgfVxuICAgICAgaS5wcm90b3R5cGUgPSB7IGNoZWNrT2Zmc2V0OiBmdW5jdGlvbihlMikge1xuICAgICAgICB0aGlzLmNoZWNrSW5kZXgodGhpcy5pbmRleCArIGUyKTtcbiAgICAgIH0sIGNoZWNrSW5kZXg6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIGlmICh0aGlzLmxlbmd0aCA8IHRoaXMuemVybyArIGUyIHx8IGUyIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwiRW5kIG9mIGRhdGEgcmVhY2hlZCAoZGF0YSBsZW5ndGggPSBcIiArIHRoaXMubGVuZ3RoICsgXCIsIGFza2VkIGluZGV4ID0gXCIgKyBlMiArIFwiKS4gQ29ycnVwdGVkIHppcCA/XCIpO1xuICAgICAgfSwgc2V0SW5kZXg6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHRoaXMuY2hlY2tJbmRleChlMiksIHRoaXMuaW5kZXggPSBlMjtcbiAgICAgIH0sIHNraXA6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHRoaXMuc2V0SW5kZXgodGhpcy5pbmRleCArIGUyKTtcbiAgICAgIH0sIGJ5dGVBdDogZnVuY3Rpb24oKSB7XG4gICAgICB9LCByZWFkSW50OiBmdW5jdGlvbihlMikge1xuICAgICAgICB2YXIgdDIsIHIzID0gMDtcbiAgICAgICAgZm9yICh0aGlzLmNoZWNrT2Zmc2V0KGUyKSwgdDIgPSB0aGlzLmluZGV4ICsgZTIgLSAxOyB0MiA+PSB0aGlzLmluZGV4OyB0Mi0tKSByMyA9IChyMyA8PCA4KSArIHRoaXMuYnl0ZUF0KHQyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXggKz0gZTIsIHIzO1xuICAgICAgfSwgcmVhZFN0cmluZzogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgcmV0dXJuIG4udHJhbnNmb3JtVG8oXCJzdHJpbmdcIiwgdGhpcy5yZWFkRGF0YShlMikpO1xuICAgICAgfSwgcmVhZERhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgfSwgbGFzdEluZGV4T2ZTaWduYXR1cmU6IGZ1bmN0aW9uKCkge1xuICAgICAgfSwgcmVhZEFuZENoZWNrU2lnbmF0dXJlOiBmdW5jdGlvbigpIHtcbiAgICAgIH0sIHJlYWREYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGUyID0gdGhpcy5yZWFkSW50KDQpO1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoMTk4MCArIChlMiA+PiAyNSAmIDEyNyksIChlMiA+PiAyMSAmIDE1KSAtIDEsIGUyID4+IDE2ICYgMzEsIGUyID4+IDExICYgMzEsIGUyID4+IDUgJiA2MywgKDMxICYgZTIpIDw8IDEpKTtcbiAgICAgIH0gfSwgdC5leHBvcnRzID0gaTtcbiAgICB9LCB7IFwiLi4vdXRpbHNcIjogMzIgfV0sIDE5OiBbZnVuY3Rpb24oZSwgdCwgcjIpIHtcbiAgICAgIHZhciBuID0gZShcIi4vVWludDhBcnJheVJlYWRlclwiKTtcbiAgICAgIGZ1bmN0aW9uIGkoZTIpIHtcbiAgICAgICAgbi5jYWxsKHRoaXMsIGUyKTtcbiAgICAgIH1cbiAgICAgIGUoXCIuLi91dGlsc1wiKS5pbmhlcml0cyhpLCBuKSwgaS5wcm90b3R5cGUucmVhZERhdGEgPSBmdW5jdGlvbihlMikge1xuICAgICAgICB0aGlzLmNoZWNrT2Zmc2V0KGUyKTtcbiAgICAgICAgdmFyIHQyID0gdGhpcy5kYXRhLnNsaWNlKHRoaXMuemVybyArIHRoaXMuaW5kZXgsIHRoaXMuemVybyArIHRoaXMuaW5kZXggKyBlMik7XG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4ICs9IGUyLCB0MjtcbiAgICAgIH0sIHQuZXhwb3J0cyA9IGk7XG4gICAgfSwgeyBcIi4uL3V0aWxzXCI6IDMyLCBcIi4vVWludDhBcnJheVJlYWRlclwiOiAyMSB9XSwgMjA6IFtmdW5jdGlvbihlLCB0LCByMikge1xuICAgICAgdmFyIG4gPSBlKFwiLi9EYXRhUmVhZGVyXCIpO1xuICAgICAgZnVuY3Rpb24gaShlMikge1xuICAgICAgICBuLmNhbGwodGhpcywgZTIpO1xuICAgICAgfVxuICAgICAgZShcIi4uL3V0aWxzXCIpLmluaGVyaXRzKGksIG4pLCBpLnByb3RvdHlwZS5ieXRlQXQgPSBmdW5jdGlvbihlMikge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmNoYXJDb2RlQXQodGhpcy56ZXJvICsgZTIpO1xuICAgICAgfSwgaS5wcm90b3R5cGUubGFzdEluZGV4T2ZTaWduYXR1cmUgPSBmdW5jdGlvbihlMikge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmxhc3RJbmRleE9mKGUyKSAtIHRoaXMuemVybztcbiAgICAgIH0sIGkucHJvdG90eXBlLnJlYWRBbmRDaGVja1NpZ25hdHVyZSA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHJldHVybiBlMiA9PT0gdGhpcy5yZWFkRGF0YSg0KTtcbiAgICAgIH0sIGkucHJvdG90eXBlLnJlYWREYXRhID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdGhpcy5jaGVja09mZnNldChlMik7XG4gICAgICAgIHZhciB0MiA9IHRoaXMuZGF0YS5zbGljZSh0aGlzLnplcm8gKyB0aGlzLmluZGV4LCB0aGlzLnplcm8gKyB0aGlzLmluZGV4ICsgZTIpO1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRleCArPSBlMiwgdDI7XG4gICAgICB9LCB0LmV4cG9ydHMgPSBpO1xuICAgIH0sIHsgXCIuLi91dGlsc1wiOiAzMiwgXCIuL0RhdGFSZWFkZXJcIjogMTggfV0sIDIxOiBbZnVuY3Rpb24oZSwgdCwgcjIpIHtcbiAgICAgIHZhciBuID0gZShcIi4vQXJyYXlSZWFkZXJcIik7XG4gICAgICBmdW5jdGlvbiBpKGUyKSB7XG4gICAgICAgIG4uY2FsbCh0aGlzLCBlMik7XG4gICAgICB9XG4gICAgICBlKFwiLi4vdXRpbHNcIikuaW5oZXJpdHMoaSwgbiksIGkucHJvdG90eXBlLnJlYWREYXRhID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tPZmZzZXQoZTIpLCAwID09PSBlMikgcmV0dXJuIG5ldyBVaW50OEFycmF5KDApO1xuICAgICAgICB2YXIgdDIgPSB0aGlzLmRhdGEuc3ViYXJyYXkodGhpcy56ZXJvICsgdGhpcy5pbmRleCwgdGhpcy56ZXJvICsgdGhpcy5pbmRleCArIGUyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXggKz0gZTIsIHQyO1xuICAgICAgfSwgdC5leHBvcnRzID0gaTtcbiAgICB9LCB7IFwiLi4vdXRpbHNcIjogMzIsIFwiLi9BcnJheVJlYWRlclwiOiAxNyB9XSwgMjI6IFtmdW5jdGlvbihlLCB0LCByMikge1xuICAgICAgdmFyIG4gPSBlKFwiLi4vdXRpbHNcIiksIGkgPSBlKFwiLi4vc3VwcG9ydFwiKSwgczIgPSBlKFwiLi9BcnJheVJlYWRlclwiKSwgYSA9IGUoXCIuL1N0cmluZ1JlYWRlclwiKSwgbyA9IGUoXCIuL05vZGVCdWZmZXJSZWFkZXJcIiksIGggPSBlKFwiLi9VaW50OEFycmF5UmVhZGVyXCIpO1xuICAgICAgdC5leHBvcnRzID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdmFyIHQyID0gbi5nZXRUeXBlT2YoZTIpO1xuICAgICAgICByZXR1cm4gbi5jaGVja1N1cHBvcnQodDIpLCBcInN0cmluZ1wiICE9PSB0MiB8fCBpLnVpbnQ4YXJyYXkgPyBcIm5vZGVidWZmZXJcIiA9PT0gdDIgPyBuZXcgbyhlMikgOiBpLnVpbnQ4YXJyYXkgPyBuZXcgaChuLnRyYW5zZm9ybVRvKFwidWludDhhcnJheVwiLCBlMikpIDogbmV3IHMyKG4udHJhbnNmb3JtVG8oXCJhcnJheVwiLCBlMikpIDogbmV3IGEoZTIpO1xuICAgICAgfTtcbiAgICB9LCB7IFwiLi4vc3VwcG9ydFwiOiAzMCwgXCIuLi91dGlsc1wiOiAzMiwgXCIuL0FycmF5UmVhZGVyXCI6IDE3LCBcIi4vTm9kZUJ1ZmZlclJlYWRlclwiOiAxOSwgXCIuL1N0cmluZ1JlYWRlclwiOiAyMCwgXCIuL1VpbnQ4QXJyYXlSZWFkZXJcIjogMjEgfV0sIDIzOiBbZnVuY3Rpb24oZSwgdCwgcjIpIHtcbiAgICAgIHIyLkxPQ0FMX0ZJTEVfSEVBREVSID0gXCJQS1x1MDAwM1x1MDAwNFwiLCByMi5DRU5UUkFMX0ZJTEVfSEVBREVSID0gXCJQS1x1MDAwMVx1MDAwMlwiLCByMi5DRU5UUkFMX0RJUkVDVE9SWV9FTkQgPSBcIlBLXHUwMDA1XHUwMDA2XCIsIHIyLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0xPQ0FUT1IgPSBcIlBLXHUwMDA2XFx4MDdcIiwgcjIuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfRU5EID0gXCJQS1x1MDAwNlx1MDAwNlwiLCByMi5EQVRBX0RFU0NSSVBUT1IgPSBcIlBLXFx4MDdcXGJcIjtcbiAgICB9LCB7fV0sIDI0OiBbZnVuY3Rpb24oZSwgdCwgcjIpIHtcbiAgICAgIHZhciBuID0gZShcIi4vR2VuZXJpY1dvcmtlclwiKSwgaSA9IGUoXCIuLi91dGlsc1wiKTtcbiAgICAgIGZ1bmN0aW9uIHMyKGUyKSB7XG4gICAgICAgIG4uY2FsbCh0aGlzLCBcIkNvbnZlcnRXb3JrZXIgdG8gXCIgKyBlMiksIHRoaXMuZGVzdFR5cGUgPSBlMjtcbiAgICAgIH1cbiAgICAgIGkuaW5oZXJpdHMoczIsIG4pLCBzMi5wcm90b3R5cGUucHJvY2Vzc0NodW5rID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdGhpcy5wdXNoKHsgZGF0YTogaS50cmFuc2Zvcm1Ubyh0aGlzLmRlc3RUeXBlLCBlMi5kYXRhKSwgbWV0YTogZTIubWV0YSB9KTtcbiAgICAgIH0sIHQuZXhwb3J0cyA9IHMyO1xuICAgIH0sIHsgXCIuLi91dGlsc1wiOiAzMiwgXCIuL0dlbmVyaWNXb3JrZXJcIjogMjggfV0sIDI1OiBbZnVuY3Rpb24oZSwgdCwgcjIpIHtcbiAgICAgIHZhciBuID0gZShcIi4vR2VuZXJpY1dvcmtlclwiKSwgaSA9IGUoXCIuLi9jcmMzMlwiKTtcbiAgICAgIGZ1bmN0aW9uIHMyKCkge1xuICAgICAgICBuLmNhbGwodGhpcywgXCJDcmMzMlByb2JlXCIpLCB0aGlzLndpdGhTdHJlYW1JbmZvKFwiY3JjMzJcIiwgMCk7XG4gICAgICB9XG4gICAgICBlKFwiLi4vdXRpbHNcIikuaW5oZXJpdHMoczIsIG4pLCBzMi5wcm90b3R5cGUucHJvY2Vzc0NodW5rID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdGhpcy5zdHJlYW1JbmZvLmNyYzMyID0gaShlMi5kYXRhLCB0aGlzLnN0cmVhbUluZm8uY3JjMzIgfHwgMCksIHRoaXMucHVzaChlMik7XG4gICAgICB9LCB0LmV4cG9ydHMgPSBzMjtcbiAgICB9LCB7IFwiLi4vY3JjMzJcIjogNCwgXCIuLi91dGlsc1wiOiAzMiwgXCIuL0dlbmVyaWNXb3JrZXJcIjogMjggfV0sIDI2OiBbZnVuY3Rpb24oZSwgdCwgcjIpIHtcbiAgICAgIHZhciBuID0gZShcIi4uL3V0aWxzXCIpLCBpID0gZShcIi4vR2VuZXJpY1dvcmtlclwiKTtcbiAgICAgIGZ1bmN0aW9uIHMyKGUyKSB7XG4gICAgICAgIGkuY2FsbCh0aGlzLCBcIkRhdGFMZW5ndGhQcm9iZSBmb3IgXCIgKyBlMiksIHRoaXMucHJvcE5hbWUgPSBlMiwgdGhpcy53aXRoU3RyZWFtSW5mbyhlMiwgMCk7XG4gICAgICB9XG4gICAgICBuLmluaGVyaXRzKHMyLCBpKSwgczIucHJvdG90eXBlLnByb2Nlc3NDaHVuayA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIGlmIChlMikge1xuICAgICAgICAgIHZhciB0MiA9IHRoaXMuc3RyZWFtSW5mb1t0aGlzLnByb3BOYW1lXSB8fCAwO1xuICAgICAgICAgIHRoaXMuc3RyZWFtSW5mb1t0aGlzLnByb3BOYW1lXSA9IHQyICsgZTIuZGF0YS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgaS5wcm90b3R5cGUucHJvY2Vzc0NodW5rLmNhbGwodGhpcywgZTIpO1xuICAgICAgfSwgdC5leHBvcnRzID0gczI7XG4gICAgfSwgeyBcIi4uL3V0aWxzXCI6IDMyLCBcIi4vR2VuZXJpY1dvcmtlclwiOiAyOCB9XSwgMjc6IFtmdW5jdGlvbihlLCB0LCByMikge1xuICAgICAgdmFyIG4gPSBlKFwiLi4vdXRpbHNcIiksIGkgPSBlKFwiLi9HZW5lcmljV29ya2VyXCIpO1xuICAgICAgZnVuY3Rpb24gczIoZTIpIHtcbiAgICAgICAgaS5jYWxsKHRoaXMsIFwiRGF0YVdvcmtlclwiKTtcbiAgICAgICAgdmFyIHQyID0gdGhpcztcbiAgICAgICAgdGhpcy5kYXRhSXNSZWFkeSA9IGZhbHNlLCB0aGlzLmluZGV4ID0gMCwgdGhpcy5tYXggPSAwLCB0aGlzLmRhdGEgPSBudWxsLCB0aGlzLnR5cGUgPSBcIlwiLCB0aGlzLl90aWNrU2NoZWR1bGVkID0gZmFsc2UsIGUyLnRoZW4oZnVuY3Rpb24oZTMpIHtcbiAgICAgICAgICB0Mi5kYXRhSXNSZWFkeSA9IHRydWUsIHQyLmRhdGEgPSBlMywgdDIubWF4ID0gZTMgJiYgZTMubGVuZ3RoIHx8IDAsIHQyLnR5cGUgPSBuLmdldFR5cGVPZihlMyksIHQyLmlzUGF1c2VkIHx8IHQyLl90aWNrQW5kUmVwZWF0KCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGUzKSB7XG4gICAgICAgICAgdDIuZXJyb3IoZTMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIG4uaW5oZXJpdHMoczIsIGkpLCBzMi5wcm90b3R5cGUuY2xlYW5VcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpLnByb3RvdHlwZS5jbGVhblVwLmNhbGwodGhpcyksIHRoaXMuZGF0YSA9IG51bGw7XG4gICAgICB9LCBzMi5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAhIWkucHJvdG90eXBlLnJlc3VtZS5jYWxsKHRoaXMpICYmICghdGhpcy5fdGlja1NjaGVkdWxlZCAmJiB0aGlzLmRhdGFJc1JlYWR5ICYmICh0aGlzLl90aWNrU2NoZWR1bGVkID0gdHJ1ZSwgbi5kZWxheSh0aGlzLl90aWNrQW5kUmVwZWF0LCBbXSwgdGhpcykpLCB0cnVlKTtcbiAgICAgIH0sIHMyLnByb3RvdHlwZS5fdGlja0FuZFJlcGVhdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl90aWNrU2NoZWR1bGVkID0gZmFsc2UsIHRoaXMuaXNQYXVzZWQgfHwgdGhpcy5pc0ZpbmlzaGVkIHx8ICh0aGlzLl90aWNrKCksIHRoaXMuaXNGaW5pc2hlZCB8fCAobi5kZWxheSh0aGlzLl90aWNrQW5kUmVwZWF0LCBbXSwgdGhpcyksIHRoaXMuX3RpY2tTY2hlZHVsZWQgPSB0cnVlKSk7XG4gICAgICB9LCBzMi5wcm90b3R5cGUuX3RpY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNQYXVzZWQgfHwgdGhpcy5pc0ZpbmlzaGVkKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBlMiA9IG51bGwsIHQyID0gTWF0aC5taW4odGhpcy5tYXgsIHRoaXMuaW5kZXggKyAxNjM4NCk7XG4gICAgICAgIGlmICh0aGlzLmluZGV4ID49IHRoaXMubWF4KSByZXR1cm4gdGhpcy5lbmQoKTtcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICBlMiA9IHRoaXMuZGF0YS5zdWJzdHJpbmcodGhpcy5pbmRleCwgdDIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcInVpbnQ4YXJyYXlcIjpcbiAgICAgICAgICAgIGUyID0gdGhpcy5kYXRhLnN1YmFycmF5KHRoaXMuaW5kZXgsIHQyKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJhcnJheVwiOlxuICAgICAgICAgIGNhc2UgXCJub2RlYnVmZmVyXCI6XG4gICAgICAgICAgICBlMiA9IHRoaXMuZGF0YS5zbGljZSh0aGlzLmluZGV4LCB0Mik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXggPSB0MiwgdGhpcy5wdXNoKHsgZGF0YTogZTIsIG1ldGE6IHsgcGVyY2VudDogdGhpcy5tYXggPyB0aGlzLmluZGV4IC8gdGhpcy5tYXggKiAxMDAgOiAwIH0gfSk7XG4gICAgICB9LCB0LmV4cG9ydHMgPSBzMjtcbiAgICB9LCB7IFwiLi4vdXRpbHNcIjogMzIsIFwiLi9HZW5lcmljV29ya2VyXCI6IDI4IH1dLCAyODogW2Z1bmN0aW9uKGUsIHQsIHIyKSB7XG4gICAgICBmdW5jdGlvbiBuKGUyKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IGUyIHx8IFwiZGVmYXVsdFwiLCB0aGlzLnN0cmVhbUluZm8gPSB7fSwgdGhpcy5nZW5lcmF0ZWRFcnJvciA9IG51bGwsIHRoaXMuZXh0cmFTdHJlYW1JbmZvID0ge30sIHRoaXMuaXNQYXVzZWQgPSB0cnVlLCB0aGlzLmlzRmluaXNoZWQgPSBmYWxzZSwgdGhpcy5pc0xvY2tlZCA9IGZhbHNlLCB0aGlzLl9saXN0ZW5lcnMgPSB7IGRhdGE6IFtdLCBlbmQ6IFtdLCBlcnJvcjogW10gfSwgdGhpcy5wcmV2aW91cyA9IG51bGw7XG4gICAgICB9XG4gICAgICBuLnByb3RvdHlwZSA9IHsgcHVzaDogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdGhpcy5lbWl0KFwiZGF0YVwiLCBlMik7XG4gICAgICB9LCBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5pc0ZpbmlzaGVkKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmVtaXQoXCJlbmRcIiksIHRoaXMuY2xlYW5VcCgpLCB0aGlzLmlzRmluaXNoZWQgPSB0cnVlO1xuICAgICAgICB9IGNhdGNoIChlMikge1xuICAgICAgICAgIHRoaXMuZW1pdChcImVycm9yXCIsIGUyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0sIGVycm9yOiBmdW5jdGlvbihlMikge1xuICAgICAgICByZXR1cm4gIXRoaXMuaXNGaW5pc2hlZCAmJiAodGhpcy5pc1BhdXNlZCA/IHRoaXMuZ2VuZXJhdGVkRXJyb3IgPSBlMiA6ICh0aGlzLmlzRmluaXNoZWQgPSB0cnVlLCB0aGlzLmVtaXQoXCJlcnJvclwiLCBlMiksIHRoaXMucHJldmlvdXMgJiYgdGhpcy5wcmV2aW91cy5lcnJvcihlMiksIHRoaXMuY2xlYW5VcCgpKSwgdHJ1ZSk7XG4gICAgICB9LCBvbjogZnVuY3Rpb24oZTIsIHQyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9saXN0ZW5lcnNbZTJdLnB1c2godDIpLCB0aGlzO1xuICAgICAgfSwgY2xlYW5VcDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuc3RyZWFtSW5mbyA9IHRoaXMuZ2VuZXJhdGVkRXJyb3IgPSB0aGlzLmV4dHJhU3RyZWFtSW5mbyA9IG51bGwsIHRoaXMuX2xpc3RlbmVycyA9IFtdO1xuICAgICAgfSwgZW1pdDogZnVuY3Rpb24oZTIsIHQyKSB7XG4gICAgICAgIGlmICh0aGlzLl9saXN0ZW5lcnNbZTJdKSBmb3IgKHZhciByMyA9IDA7IHIzIDwgdGhpcy5fbGlzdGVuZXJzW2UyXS5sZW5ndGg7IHIzKyspIHRoaXMuX2xpc3RlbmVyc1tlMl1bcjNdLmNhbGwodGhpcywgdDIpO1xuICAgICAgfSwgcGlwZTogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgcmV0dXJuIGUyLnJlZ2lzdGVyUHJldmlvdXModGhpcyk7XG4gICAgICB9LCByZWdpc3RlclByZXZpb3VzOiBmdW5jdGlvbihlMikge1xuICAgICAgICBpZiAodGhpcy5pc0xvY2tlZCkgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0cmVhbSAnXCIgKyB0aGlzICsgXCInIGhhcyBhbHJlYWR5IGJlZW4gdXNlZC5cIik7XG4gICAgICAgIHRoaXMuc3RyZWFtSW5mbyA9IGUyLnN0cmVhbUluZm8sIHRoaXMubWVyZ2VTdHJlYW1JbmZvKCksIHRoaXMucHJldmlvdXMgPSBlMjtcbiAgICAgICAgdmFyIHQyID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGUyLm9uKFwiZGF0YVwiLCBmdW5jdGlvbihlMykge1xuICAgICAgICAgIHQyLnByb2Nlc3NDaHVuayhlMyk7XG4gICAgICAgIH0pLCBlMi5vbihcImVuZFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0Mi5lbmQoKTtcbiAgICAgICAgfSksIGUyLm9uKFwiZXJyb3JcIiwgZnVuY3Rpb24oZTMpIHtcbiAgICAgICAgICB0Mi5lcnJvcihlMyk7XG4gICAgICAgIH0pLCB0aGlzO1xuICAgICAgfSwgcGF1c2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuaXNQYXVzZWQgJiYgIXRoaXMuaXNGaW5pc2hlZCAmJiAodGhpcy5pc1BhdXNlZCA9IHRydWUsIHRoaXMucHJldmlvdXMgJiYgdGhpcy5wcmV2aW91cy5wYXVzZSgpLCB0cnVlKTtcbiAgICAgIH0sIHJlc3VtZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1BhdXNlZCB8fCB0aGlzLmlzRmluaXNoZWQpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGUyID0gdGhpcy5pc1BhdXNlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZWRFcnJvciAmJiAodGhpcy5lcnJvcih0aGlzLmdlbmVyYXRlZEVycm9yKSwgZTIgPSB0cnVlKSwgdGhpcy5wcmV2aW91cyAmJiB0aGlzLnByZXZpb3VzLnJlc3VtZSgpLCAhZTI7XG4gICAgICB9LCBmbHVzaDogZnVuY3Rpb24oKSB7XG4gICAgICB9LCBwcm9jZXNzQ2h1bms6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHRoaXMucHVzaChlMik7XG4gICAgICB9LCB3aXRoU3RyZWFtSW5mbzogZnVuY3Rpb24oZTIsIHQyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4dHJhU3RyZWFtSW5mb1tlMl0gPSB0MiwgdGhpcy5tZXJnZVN0cmVhbUluZm8oKSwgdGhpcztcbiAgICAgIH0sIG1lcmdlU3RyZWFtSW5mbzogZnVuY3Rpb24oKSB7XG4gICAgICAgIGZvciAodmFyIGUyIGluIHRoaXMuZXh0cmFTdHJlYW1JbmZvKSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5leHRyYVN0cmVhbUluZm8sIGUyKSAmJiAodGhpcy5zdHJlYW1JbmZvW2UyXSA9IHRoaXMuZXh0cmFTdHJlYW1JbmZvW2UyXSk7XG4gICAgICB9LCBsb2NrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNMb2NrZWQpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHJlYW0gJ1wiICsgdGhpcyArIFwiJyBoYXMgYWxyZWFkeSBiZWVuIHVzZWQuXCIpO1xuICAgICAgICB0aGlzLmlzTG9ja2VkID0gdHJ1ZSwgdGhpcy5wcmV2aW91cyAmJiB0aGlzLnByZXZpb3VzLmxvY2soKTtcbiAgICAgIH0sIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGUyID0gXCJXb3JrZXIgXCIgKyB0aGlzLm5hbWU7XG4gICAgICAgIHJldHVybiB0aGlzLnByZXZpb3VzID8gdGhpcy5wcmV2aW91cyArIFwiIC0+IFwiICsgZTIgOiBlMjtcbiAgICAgIH0gfSwgdC5leHBvcnRzID0gbjtcbiAgICB9LCB7fV0sIDI5OiBbZnVuY3Rpb24oZSwgdCwgcjIpIHtcbiAgICAgIHZhciBoID0gZShcIi4uL3V0aWxzXCIpLCBpID0gZShcIi4vQ29udmVydFdvcmtlclwiKSwgczIgPSBlKFwiLi9HZW5lcmljV29ya2VyXCIpLCB1ID0gZShcIi4uL2Jhc2U2NFwiKSwgbiA9IGUoXCIuLi9zdXBwb3J0XCIpLCBhID0gZShcIi4uL2V4dGVybmFsXCIpLCBvID0gbnVsbDtcbiAgICAgIGlmIChuLm5vZGVzdHJlYW0pIHRyeSB7XG4gICAgICAgIG8gPSBlKFwiLi4vbm9kZWpzL05vZGVqc1N0cmVhbU91dHB1dEFkYXB0ZXJcIik7XG4gICAgICB9IGNhdGNoIChlMikge1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gbChlMiwgbzIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBhLlByb21pc2UoZnVuY3Rpb24odDIsIHIzKSB7XG4gICAgICAgICAgdmFyIG4yID0gW10sIGkyID0gZTIuX2ludGVybmFsVHlwZSwgczMgPSBlMi5fb3V0cHV0VHlwZSwgYTIgPSBlMi5fbWltZVR5cGU7XG4gICAgICAgICAgZTIub24oXCJkYXRhXCIsIGZ1bmN0aW9uKGUzLCB0Mykge1xuICAgICAgICAgICAgbjIucHVzaChlMyksIG8yICYmIG8yKHQzKTtcbiAgICAgICAgICB9KS5vbihcImVycm9yXCIsIGZ1bmN0aW9uKGUzKSB7XG4gICAgICAgICAgICBuMiA9IFtdLCByMyhlMyk7XG4gICAgICAgICAgfSkub24oXCJlbmRcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB2YXIgZTMgPSBmdW5jdGlvbihlNCwgdDMsIHI0KSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChlNCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSBcImJsb2JcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGgubmV3QmxvYihoLnRyYW5zZm9ybVRvKFwiYXJyYXlidWZmZXJcIiwgdDMpLCByNCk7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwiYmFzZTY0XCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1LmVuY29kZSh0Myk7XG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaC50cmFuc2Zvcm1UbyhlNCwgdDMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfShzMywgZnVuY3Rpb24oZTQsIHQzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHI0LCBuMyA9IDAsIGkzID0gbnVsbCwgczQgPSAwO1xuICAgICAgICAgICAgICAgIGZvciAocjQgPSAwOyByNCA8IHQzLmxlbmd0aDsgcjQrKykgczQgKz0gdDNbcjRdLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGU0KSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0My5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgY2FzZSBcImFycmF5XCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCB0Myk7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwidWludDhhcnJheVwiOlxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkzID0gbmV3IFVpbnQ4QXJyYXkoczQpLCByNCA9IDA7IHI0IDwgdDMubGVuZ3RoOyByNCsrKSBpMy5zZXQodDNbcjRdLCBuMyksIG4zICs9IHQzW3I0XS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpMztcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJub2RlYnVmZmVyXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBCdWZmZXIuY29uY2F0KHQzKTtcbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImNvbmNhdCA6IHVuc3VwcG9ydGVkIHR5cGUgJ1wiICsgZTQgKyBcIidcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KGkyLCBuMiksIGEyKTtcbiAgICAgICAgICAgICAgdDIoZTMpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZTQpIHtcbiAgICAgICAgICAgICAgcjMoZTQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbjIgPSBbXTtcbiAgICAgICAgICB9KS5yZXN1bWUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBmMihlMiwgdDIsIHIzKSB7XG4gICAgICAgIHZhciBuMiA9IHQyO1xuICAgICAgICBzd2l0Y2ggKHQyKSB7XG4gICAgICAgICAgY2FzZSBcImJsb2JcIjpcbiAgICAgICAgICBjYXNlIFwiYXJyYXlidWZmZXJcIjpcbiAgICAgICAgICAgIG4yID0gXCJ1aW50OGFycmF5XCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiYmFzZTY0XCI6XG4gICAgICAgICAgICBuMiA9IFwic3RyaW5nXCI7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLl9pbnRlcm5hbFR5cGUgPSBuMiwgdGhpcy5fb3V0cHV0VHlwZSA9IHQyLCB0aGlzLl9taW1lVHlwZSA9IHIzLCBoLmNoZWNrU3VwcG9ydChuMiksIHRoaXMuX3dvcmtlciA9IGUyLnBpcGUobmV3IGkobjIpKSwgZTIubG9jaygpO1xuICAgICAgICB9IGNhdGNoIChlMykge1xuICAgICAgICAgIHRoaXMuX3dvcmtlciA9IG5ldyBzMihcImVycm9yXCIpLCB0aGlzLl93b3JrZXIuZXJyb3IoZTMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmMi5wcm90b3R5cGUgPSB7IGFjY3VtdWxhdGU6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHJldHVybiBsKHRoaXMsIGUyKTtcbiAgICAgIH0sIG9uOiBmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgdmFyIHIzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIFwiZGF0YVwiID09PSBlMiA/IHRoaXMuX3dvcmtlci5vbihlMiwgZnVuY3Rpb24oZTMpIHtcbiAgICAgICAgICB0Mi5jYWxsKHIzLCBlMy5kYXRhLCBlMy5tZXRhKTtcbiAgICAgICAgfSkgOiB0aGlzLl93b3JrZXIub24oZTIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGguZGVsYXkodDIsIGFyZ3VtZW50cywgcjMpO1xuICAgICAgICB9KSwgdGhpcztcbiAgICAgIH0sIHJlc3VtZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBoLmRlbGF5KHRoaXMuX3dvcmtlci5yZXN1bWUsIFtdLCB0aGlzLl93b3JrZXIpLCB0aGlzO1xuICAgICAgfSwgcGF1c2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd29ya2VyLnBhdXNlKCksIHRoaXM7XG4gICAgICB9LCB0b05vZGVqc1N0cmVhbTogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgaWYgKGguY2hlY2tTdXBwb3J0KFwibm9kZXN0cmVhbVwiKSwgXCJub2RlYnVmZmVyXCIgIT09IHRoaXMuX291dHB1dFR5cGUpIHRocm93IG5ldyBFcnJvcih0aGlzLl9vdXRwdXRUeXBlICsgXCIgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIG1ldGhvZFwiKTtcbiAgICAgICAgcmV0dXJuIG5ldyBvKHRoaXMsIHsgb2JqZWN0TW9kZTogXCJub2RlYnVmZmVyXCIgIT09IHRoaXMuX291dHB1dFR5cGUgfSwgZTIpO1xuICAgICAgfSB9LCB0LmV4cG9ydHMgPSBmMjtcbiAgICB9LCB7IFwiLi4vYmFzZTY0XCI6IDEsIFwiLi4vZXh0ZXJuYWxcIjogNiwgXCIuLi9ub2RlanMvTm9kZWpzU3RyZWFtT3V0cHV0QWRhcHRlclwiOiAxMywgXCIuLi9zdXBwb3J0XCI6IDMwLCBcIi4uL3V0aWxzXCI6IDMyLCBcIi4vQ29udmVydFdvcmtlclwiOiAyNCwgXCIuL0dlbmVyaWNXb3JrZXJcIjogMjggfV0sIDMwOiBbZnVuY3Rpb24oZSwgdCwgcjIpIHtcbiAgICAgIGlmIChyMi5iYXNlNjQgPSB0cnVlLCByMi5hcnJheSA9IHRydWUsIHIyLnN0cmluZyA9IHRydWUsIHIyLmFycmF5YnVmZmVyID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgQXJyYXlCdWZmZXIgJiYgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgVWludDhBcnJheSwgcjIubm9kZWJ1ZmZlciA9IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIEJ1ZmZlciwgcjIudWludDhhcnJheSA9IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFVpbnQ4QXJyYXksIFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIEFycmF5QnVmZmVyKSByMi5ibG9iID0gZmFsc2U7XG4gICAgICBlbHNlIHtcbiAgICAgICAgdmFyIG4gPSBuZXcgQXJyYXlCdWZmZXIoMCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcjIuYmxvYiA9IDAgPT09IG5ldyBCbG9iKFtuXSwgeyB0eXBlOiBcImFwcGxpY2F0aW9uL3ppcFwiIH0pLnNpemU7XG4gICAgICAgIH0gY2F0Y2ggKGUyKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBpID0gbmV3IChzZWxmLkJsb2JCdWlsZGVyIHx8IHNlbGYuV2ViS2l0QmxvYkJ1aWxkZXIgfHwgc2VsZi5Nb3pCbG9iQnVpbGRlciB8fCBzZWxmLk1TQmxvYkJ1aWxkZXIpKCk7XG4gICAgICAgICAgICBpLmFwcGVuZChuKSwgcjIuYmxvYiA9IDAgPT09IGkuZ2V0QmxvYihcImFwcGxpY2F0aW9uL3ppcFwiKS5zaXplO1xuICAgICAgICAgIH0gY2F0Y2ggKGUzKSB7XG4gICAgICAgICAgICByMi5ibG9iID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICByMi5ub2Rlc3RyZWFtID0gISFlKFwicmVhZGFibGUtc3RyZWFtXCIpLlJlYWRhYmxlO1xuICAgICAgfSBjYXRjaCAoZTIpIHtcbiAgICAgICAgcjIubm9kZXN0cmVhbSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0sIHsgXCJyZWFkYWJsZS1zdHJlYW1cIjogMTYgfV0sIDMxOiBbZnVuY3Rpb24oZSwgdCwgczIpIHtcbiAgICAgIGZvciAodmFyIG8gPSBlKFwiLi91dGlsc1wiKSwgaCA9IGUoXCIuL3N1cHBvcnRcIiksIHIyID0gZShcIi4vbm9kZWpzVXRpbHNcIiksIG4gPSBlKFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKSwgdSA9IG5ldyBBcnJheSgyNTYpLCBpID0gMDsgaSA8IDI1NjsgaSsrKSB1W2ldID0gMjUyIDw9IGkgPyA2IDogMjQ4IDw9IGkgPyA1IDogMjQwIDw9IGkgPyA0IDogMjI0IDw9IGkgPyAzIDogMTkyIDw9IGkgPyAyIDogMTtcbiAgICAgIHVbMjU0XSA9IHVbMjU0XSA9IDE7XG4gICAgICBmdW5jdGlvbiBhKCkge1xuICAgICAgICBuLmNhbGwodGhpcywgXCJ1dGYtOCBkZWNvZGVcIiksIHRoaXMubGVmdE92ZXIgPSBudWxsO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gbCgpIHtcbiAgICAgICAgbi5jYWxsKHRoaXMsIFwidXRmLTggZW5jb2RlXCIpO1xuICAgICAgfVxuICAgICAgczIudXRmOGVuY29kZSA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHJldHVybiBoLm5vZGVidWZmZXIgPyByMi5uZXdCdWZmZXJGcm9tKGUyLCBcInV0Zi04XCIpIDogZnVuY3Rpb24oZTMpIHtcbiAgICAgICAgICB2YXIgdDIsIHIzLCBuMiwgaTIsIHMzLCBhMiA9IGUzLmxlbmd0aCwgbzIgPSAwO1xuICAgICAgICAgIGZvciAoaTIgPSAwOyBpMiA8IGEyOyBpMisrKSA1NTI5NiA9PSAoNjQ1MTIgJiAocjMgPSBlMy5jaGFyQ29kZUF0KGkyKSkpICYmIGkyICsgMSA8IGEyICYmIDU2MzIwID09ICg2NDUxMiAmIChuMiA9IGUzLmNoYXJDb2RlQXQoaTIgKyAxKSkpICYmIChyMyA9IDY1NTM2ICsgKHIzIC0gNTUyOTYgPDwgMTApICsgKG4yIC0gNTYzMjApLCBpMisrKSwgbzIgKz0gcjMgPCAxMjggPyAxIDogcjMgPCAyMDQ4ID8gMiA6IHIzIDwgNjU1MzYgPyAzIDogNDtcbiAgICAgICAgICBmb3IgKHQyID0gaC51aW50OGFycmF5ID8gbmV3IFVpbnQ4QXJyYXkobzIpIDogbmV3IEFycmF5KG8yKSwgaTIgPSBzMyA9IDA7IHMzIDwgbzI7IGkyKyspIDU1Mjk2ID09ICg2NDUxMiAmIChyMyA9IGUzLmNoYXJDb2RlQXQoaTIpKSkgJiYgaTIgKyAxIDwgYTIgJiYgNTYzMjAgPT0gKDY0NTEyICYgKG4yID0gZTMuY2hhckNvZGVBdChpMiArIDEpKSkgJiYgKHIzID0gNjU1MzYgKyAocjMgLSA1NTI5NiA8PCAxMCkgKyAobjIgLSA1NjMyMCksIGkyKyspLCByMyA8IDEyOCA/IHQyW3MzKytdID0gcjMgOiAocjMgPCAyMDQ4ID8gdDJbczMrK10gPSAxOTIgfCByMyA+Pj4gNiA6IChyMyA8IDY1NTM2ID8gdDJbczMrK10gPSAyMjQgfCByMyA+Pj4gMTIgOiAodDJbczMrK10gPSAyNDAgfCByMyA+Pj4gMTgsIHQyW3MzKytdID0gMTI4IHwgcjMgPj4+IDEyICYgNjMpLCB0MltzMysrXSA9IDEyOCB8IHIzID4+PiA2ICYgNjMpLCB0MltzMysrXSA9IDEyOCB8IDYzICYgcjMpO1xuICAgICAgICAgIHJldHVybiB0MjtcbiAgICAgICAgfShlMik7XG4gICAgICB9LCBzMi51dGY4ZGVjb2RlID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgcmV0dXJuIGgubm9kZWJ1ZmZlciA/IG8udHJhbnNmb3JtVG8oXCJub2RlYnVmZmVyXCIsIGUyKS50b1N0cmluZyhcInV0Zi04XCIpIDogZnVuY3Rpb24oZTMpIHtcbiAgICAgICAgICB2YXIgdDIsIHIzLCBuMiwgaTIsIHMzID0gZTMubGVuZ3RoLCBhMiA9IG5ldyBBcnJheSgyICogczMpO1xuICAgICAgICAgIGZvciAodDIgPSByMyA9IDA7IHQyIDwgczM7ICkgaWYgKChuMiA9IGUzW3QyKytdKSA8IDEyOCkgYTJbcjMrK10gPSBuMjtcbiAgICAgICAgICBlbHNlIGlmICg0IDwgKGkyID0gdVtuMl0pKSBhMltyMysrXSA9IDY1NTMzLCB0MiArPSBpMiAtIDE7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKG4yICY9IDIgPT09IGkyID8gMzEgOiAzID09PSBpMiA/IDE1IDogNzsgMSA8IGkyICYmIHQyIDwgczM7ICkgbjIgPSBuMiA8PCA2IHwgNjMgJiBlM1t0MisrXSwgaTItLTtcbiAgICAgICAgICAgIDEgPCBpMiA/IGEyW3IzKytdID0gNjU1MzMgOiBuMiA8IDY1NTM2ID8gYTJbcjMrK10gPSBuMiA6IChuMiAtPSA2NTUzNiwgYTJbcjMrK10gPSA1NTI5NiB8IG4yID4+IDEwICYgMTAyMywgYTJbcjMrK10gPSA1NjMyMCB8IDEwMjMgJiBuMik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBhMi5sZW5ndGggIT09IHIzICYmIChhMi5zdWJhcnJheSA/IGEyID0gYTIuc3ViYXJyYXkoMCwgcjMpIDogYTIubGVuZ3RoID0gcjMpLCBvLmFwcGx5RnJvbUNoYXJDb2RlKGEyKTtcbiAgICAgICAgfShlMiA9IG8udHJhbnNmb3JtVG8oaC51aW50OGFycmF5ID8gXCJ1aW50OGFycmF5XCIgOiBcImFycmF5XCIsIGUyKSk7XG4gICAgICB9LCBvLmluaGVyaXRzKGEsIG4pLCBhLnByb3RvdHlwZS5wcm9jZXNzQ2h1bmsgPSBmdW5jdGlvbihlMikge1xuICAgICAgICB2YXIgdDIgPSBvLnRyYW5zZm9ybVRvKGgudWludDhhcnJheSA/IFwidWludDhhcnJheVwiIDogXCJhcnJheVwiLCBlMi5kYXRhKTtcbiAgICAgICAgaWYgKHRoaXMubGVmdE92ZXIgJiYgdGhpcy5sZWZ0T3Zlci5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAoaC51aW50OGFycmF5KSB7XG4gICAgICAgICAgICB2YXIgcjMgPSB0MjtcbiAgICAgICAgICAgICh0MiA9IG5ldyBVaW50OEFycmF5KHIzLmxlbmd0aCArIHRoaXMubGVmdE92ZXIubGVuZ3RoKSkuc2V0KHRoaXMubGVmdE92ZXIsIDApLCB0Mi5zZXQocjMsIHRoaXMubGVmdE92ZXIubGVuZ3RoKTtcbiAgICAgICAgICB9IGVsc2UgdDIgPSB0aGlzLmxlZnRPdmVyLmNvbmNhdCh0Mik7XG4gICAgICAgICAgdGhpcy5sZWZ0T3ZlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG4yID0gZnVuY3Rpb24oZTMsIHQzKSB7XG4gICAgICAgICAgdmFyIHI0O1xuICAgICAgICAgIGZvciAoKHQzID0gdDMgfHwgZTMubGVuZ3RoKSA+IGUzLmxlbmd0aCAmJiAodDMgPSBlMy5sZW5ndGgpLCByNCA9IHQzIC0gMTsgMCA8PSByNCAmJiAxMjggPT0gKDE5MiAmIGUzW3I0XSk7ICkgcjQtLTtcbiAgICAgICAgICByZXR1cm4gcjQgPCAwID8gdDMgOiAwID09PSByNCA/IHQzIDogcjQgKyB1W2UzW3I0XV0gPiB0MyA/IHI0IDogdDM7XG4gICAgICAgIH0odDIpLCBpMiA9IHQyO1xuICAgICAgICBuMiAhPT0gdDIubGVuZ3RoICYmIChoLnVpbnQ4YXJyYXkgPyAoaTIgPSB0Mi5zdWJhcnJheSgwLCBuMiksIHRoaXMubGVmdE92ZXIgPSB0Mi5zdWJhcnJheShuMiwgdDIubGVuZ3RoKSkgOiAoaTIgPSB0Mi5zbGljZSgwLCBuMiksIHRoaXMubGVmdE92ZXIgPSB0Mi5zbGljZShuMiwgdDIubGVuZ3RoKSkpLCB0aGlzLnB1c2goeyBkYXRhOiBzMi51dGY4ZGVjb2RlKGkyKSwgbWV0YTogZTIubWV0YSB9KTtcbiAgICAgIH0sIGEucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMubGVmdE92ZXIgJiYgdGhpcy5sZWZ0T3Zlci5sZW5ndGggJiYgKHRoaXMucHVzaCh7IGRhdGE6IHMyLnV0ZjhkZWNvZGUodGhpcy5sZWZ0T3ZlciksIG1ldGE6IHt9IH0pLCB0aGlzLmxlZnRPdmVyID0gbnVsbCk7XG4gICAgICB9LCBzMi5VdGY4RGVjb2RlV29ya2VyID0gYSwgby5pbmhlcml0cyhsLCBuKSwgbC5wcm90b3R5cGUucHJvY2Vzc0NodW5rID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdGhpcy5wdXNoKHsgZGF0YTogczIudXRmOGVuY29kZShlMi5kYXRhKSwgbWV0YTogZTIubWV0YSB9KTtcbiAgICAgIH0sIHMyLlV0ZjhFbmNvZGVXb3JrZXIgPSBsO1xuICAgIH0sIHsgXCIuL25vZGVqc1V0aWxzXCI6IDE0LCBcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIjogMjgsIFwiLi9zdXBwb3J0XCI6IDMwLCBcIi4vdXRpbHNcIjogMzIgfV0sIDMyOiBbZnVuY3Rpb24oZSwgdCwgYSkge1xuICAgICAgdmFyIG8gPSBlKFwiLi9zdXBwb3J0XCIpLCBoID0gZShcIi4vYmFzZTY0XCIpLCByMiA9IGUoXCIuL25vZGVqc1V0aWxzXCIpLCB1ID0gZShcIi4vZXh0ZXJuYWxcIik7XG4gICAgICBmdW5jdGlvbiBuKGUyKSB7XG4gICAgICAgIHJldHVybiBlMjtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGwoZTIsIHQyKSB7XG4gICAgICAgIGZvciAodmFyIHIzID0gMDsgcjMgPCBlMi5sZW5ndGg7ICsrcjMpIHQyW3IzXSA9IDI1NSAmIGUyLmNoYXJDb2RlQXQocjMpO1xuICAgICAgICByZXR1cm4gdDI7XG4gICAgICB9XG4gICAgICBlKFwic2V0aW1tZWRpYXRlXCIpLCBhLm5ld0Jsb2IgPSBmdW5jdGlvbih0MiwgcjMpIHtcbiAgICAgICAgYS5jaGVja1N1cHBvcnQoXCJibG9iXCIpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBuZXcgQmxvYihbdDJdLCB7IHR5cGU6IHIzIH0pO1xuICAgICAgICB9IGNhdGNoIChlMikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgbjIgPSBuZXcgKHNlbGYuQmxvYkJ1aWxkZXIgfHwgc2VsZi5XZWJLaXRCbG9iQnVpbGRlciB8fCBzZWxmLk1vekJsb2JCdWlsZGVyIHx8IHNlbGYuTVNCbG9iQnVpbGRlcikoKTtcbiAgICAgICAgICAgIHJldHVybiBuMi5hcHBlbmQodDIpLCBuMi5nZXRCbG9iKHIzKTtcbiAgICAgICAgICB9IGNhdGNoIChlMykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQnVnIDogY2FuJ3QgY29uc3RydWN0IHRoZSBCbG9iLlwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgaSA9IHsgc3RyaW5naWZ5QnlDaHVuazogZnVuY3Rpb24oZTIsIHQyLCByMykge1xuICAgICAgICB2YXIgbjIgPSBbXSwgaTIgPSAwLCBzMyA9IGUyLmxlbmd0aDtcbiAgICAgICAgaWYgKHMzIDw9IHIzKSByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBlMik7XG4gICAgICAgIGZvciAoOyBpMiA8IHMzOyApIFwiYXJyYXlcIiA9PT0gdDIgfHwgXCJub2RlYnVmZmVyXCIgPT09IHQyID8gbjIucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGUyLnNsaWNlKGkyLCBNYXRoLm1pbihpMiArIHIzLCBzMykpKSkgOiBuMi5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgZTIuc3ViYXJyYXkoaTIsIE1hdGgubWluKGkyICsgcjMsIHMzKSkpKSwgaTIgKz0gcjM7XG4gICAgICAgIHJldHVybiBuMi5qb2luKFwiXCIpO1xuICAgICAgfSwgc3RyaW5naWZ5QnlDaGFyOiBmdW5jdGlvbihlMikge1xuICAgICAgICBmb3IgKHZhciB0MiA9IFwiXCIsIHIzID0gMDsgcjMgPCBlMi5sZW5ndGg7IHIzKyspIHQyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZTJbcjNdKTtcbiAgICAgICAgcmV0dXJuIHQyO1xuICAgICAgfSwgYXBwbHlDYW5CZVVzZWQ6IHsgdWludDhhcnJheTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIG8udWludDhhcnJheSAmJiAxID09PSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KDEpKS5sZW5ndGg7XG4gICAgICAgIH0gY2F0Y2ggKGUyKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KCksIG5vZGVidWZmZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBvLm5vZGVidWZmZXIgJiYgMSA9PT0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCByMi5hbGxvY0J1ZmZlcigxKSkubGVuZ3RoO1xuICAgICAgICB9IGNhdGNoIChlMikge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSgpIH0gfTtcbiAgICAgIGZ1bmN0aW9uIHMyKGUyKSB7XG4gICAgICAgIHZhciB0MiA9IDY1NTM2LCByMyA9IGEuZ2V0VHlwZU9mKGUyKSwgbjIgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ1aW50OGFycmF5XCIgPT09IHIzID8gbjIgPSBpLmFwcGx5Q2FuQmVVc2VkLnVpbnQ4YXJyYXkgOiBcIm5vZGVidWZmZXJcIiA9PT0gcjMgJiYgKG4yID0gaS5hcHBseUNhbkJlVXNlZC5ub2RlYnVmZmVyKSwgbjIpIGZvciAoOyAxIDwgdDI7ICkgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gaS5zdHJpbmdpZnlCeUNodW5rKGUyLCByMywgdDIpO1xuICAgICAgICB9IGNhdGNoIChlMykge1xuICAgICAgICAgIHQyID0gTWF0aC5mbG9vcih0MiAvIDIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpLnN0cmluZ2lmeUJ5Q2hhcihlMik7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBmMihlMiwgdDIpIHtcbiAgICAgICAgZm9yICh2YXIgcjMgPSAwOyByMyA8IGUyLmxlbmd0aDsgcjMrKykgdDJbcjNdID0gZTJbcjNdO1xuICAgICAgICByZXR1cm4gdDI7XG4gICAgICB9XG4gICAgICBhLmFwcGx5RnJvbUNoYXJDb2RlID0gczI7XG4gICAgICB2YXIgYyA9IHt9O1xuICAgICAgYy5zdHJpbmcgPSB7IHN0cmluZzogbiwgYXJyYXk6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHJldHVybiBsKGUyLCBuZXcgQXJyYXkoZTIubGVuZ3RoKSk7XG4gICAgICB9LCBhcnJheWJ1ZmZlcjogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgcmV0dXJuIGMuc3RyaW5nLnVpbnQ4YXJyYXkoZTIpLmJ1ZmZlcjtcbiAgICAgIH0sIHVpbnQ4YXJyYXk6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHJldHVybiBsKGUyLCBuZXcgVWludDhBcnJheShlMi5sZW5ndGgpKTtcbiAgICAgIH0sIG5vZGVidWZmZXI6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHJldHVybiBsKGUyLCByMi5hbGxvY0J1ZmZlcihlMi5sZW5ndGgpKTtcbiAgICAgIH0gfSwgYy5hcnJheSA9IHsgc3RyaW5nOiBzMiwgYXJyYXk6IG4sIGFycmF5YnVmZmVyOiBmdW5jdGlvbihlMikge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZTIpLmJ1ZmZlcjtcbiAgICAgIH0sIHVpbnQ4YXJyYXk6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShlMik7XG4gICAgICB9LCBub2RlYnVmZmVyOiBmdW5jdGlvbihlMikge1xuICAgICAgICByZXR1cm4gcjIubmV3QnVmZmVyRnJvbShlMik7XG4gICAgICB9IH0sIGMuYXJyYXlidWZmZXIgPSB7IHN0cmluZzogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgcmV0dXJuIHMyKG5ldyBVaW50OEFycmF5KGUyKSk7XG4gICAgICB9LCBhcnJheTogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgcmV0dXJuIGYyKG5ldyBVaW50OEFycmF5KGUyKSwgbmV3IEFycmF5KGUyLmJ5dGVMZW5ndGgpKTtcbiAgICAgIH0sIGFycmF5YnVmZmVyOiBuLCB1aW50OGFycmF5OiBmdW5jdGlvbihlMikge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZTIpO1xuICAgICAgfSwgbm9kZWJ1ZmZlcjogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgcmV0dXJuIHIyLm5ld0J1ZmZlckZyb20obmV3IFVpbnQ4QXJyYXkoZTIpKTtcbiAgICAgIH0gfSwgYy51aW50OGFycmF5ID0geyBzdHJpbmc6IHMyLCBhcnJheTogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgcmV0dXJuIGYyKGUyLCBuZXcgQXJyYXkoZTIubGVuZ3RoKSk7XG4gICAgICB9LCBhcnJheWJ1ZmZlcjogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgcmV0dXJuIGUyLmJ1ZmZlcjtcbiAgICAgIH0sIHVpbnQ4YXJyYXk6IG4sIG5vZGVidWZmZXI6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHJldHVybiByMi5uZXdCdWZmZXJGcm9tKGUyKTtcbiAgICAgIH0gfSwgYy5ub2RlYnVmZmVyID0geyBzdHJpbmc6IHMyLCBhcnJheTogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgcmV0dXJuIGYyKGUyLCBuZXcgQXJyYXkoZTIubGVuZ3RoKSk7XG4gICAgICB9LCBhcnJheWJ1ZmZlcjogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgcmV0dXJuIGMubm9kZWJ1ZmZlci51aW50OGFycmF5KGUyKS5idWZmZXI7XG4gICAgICB9LCB1aW50OGFycmF5OiBmdW5jdGlvbihlMikge1xuICAgICAgICByZXR1cm4gZjIoZTIsIG5ldyBVaW50OEFycmF5KGUyLmxlbmd0aCkpO1xuICAgICAgfSwgbm9kZWJ1ZmZlcjogbiB9LCBhLnRyYW5zZm9ybVRvID0gZnVuY3Rpb24oZTIsIHQyKSB7XG4gICAgICAgIGlmICh0MiA9IHQyIHx8IFwiXCIsICFlMikgcmV0dXJuIHQyO1xuICAgICAgICBhLmNoZWNrU3VwcG9ydChlMik7XG4gICAgICAgIHZhciByMyA9IGEuZ2V0VHlwZU9mKHQyKTtcbiAgICAgICAgcmV0dXJuIGNbcjNdW2UyXSh0Mik7XG4gICAgICB9LCBhLnJlc29sdmUgPSBmdW5jdGlvbihlMikge1xuICAgICAgICBmb3IgKHZhciB0MiA9IGUyLnNwbGl0KFwiL1wiKSwgcjMgPSBbXSwgbjIgPSAwOyBuMiA8IHQyLmxlbmd0aDsgbjIrKykge1xuICAgICAgICAgIHZhciBpMiA9IHQyW24yXTtcbiAgICAgICAgICBcIi5cIiA9PT0gaTIgfHwgXCJcIiA9PT0gaTIgJiYgMCAhPT0gbjIgJiYgbjIgIT09IHQyLmxlbmd0aCAtIDEgfHwgKFwiLi5cIiA9PT0gaTIgPyByMy5wb3AoKSA6IHIzLnB1c2goaTIpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcjMuam9pbihcIi9cIik7XG4gICAgICB9LCBhLmdldFR5cGVPZiA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHJldHVybiBcInN0cmluZ1wiID09IHR5cGVvZiBlMiA/IFwic3RyaW5nXCIgOiBcIltvYmplY3QgQXJyYXldXCIgPT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlMikgPyBcImFycmF5XCIgOiBvLm5vZGVidWZmZXIgJiYgcjIuaXNCdWZmZXIoZTIpID8gXCJub2RlYnVmZmVyXCIgOiBvLnVpbnQ4YXJyYXkgJiYgZTIgaW5zdGFuY2VvZiBVaW50OEFycmF5ID8gXCJ1aW50OGFycmF5XCIgOiBvLmFycmF5YnVmZmVyICYmIGUyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgPyBcImFycmF5YnVmZmVyXCIgOiB2b2lkIDA7XG4gICAgICB9LCBhLmNoZWNrU3VwcG9ydCA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIGlmICghb1tlMi50b0xvd2VyQ2FzZSgpXSkgdGhyb3cgbmV3IEVycm9yKGUyICsgXCIgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIHBsYXRmb3JtXCIpO1xuICAgICAgfSwgYS5NQVhfVkFMVUVfMTZCSVRTID0gNjU1MzUsIGEuTUFYX1ZBTFVFXzMyQklUUyA9IC0xLCBhLnByZXR0eSA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHZhciB0MiwgcjMsIG4yID0gXCJcIjtcbiAgICAgICAgZm9yIChyMyA9IDA7IHIzIDwgKGUyIHx8IFwiXCIpLmxlbmd0aDsgcjMrKykgbjIgKz0gXCJcXFxceFwiICsgKCh0MiA9IGUyLmNoYXJDb2RlQXQocjMpKSA8IDE2ID8gXCIwXCIgOiBcIlwiKSArIHQyLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICByZXR1cm4gbjI7XG4gICAgICB9LCBhLmRlbGF5ID0gZnVuY3Rpb24oZTIsIHQyLCByMykge1xuICAgICAgICBzZXRJbW1lZGlhdGUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZTIuYXBwbHkocjMgfHwgbnVsbCwgdDIgfHwgW10pO1xuICAgICAgICB9KTtcbiAgICAgIH0sIGEuaW5oZXJpdHMgPSBmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgZnVuY3Rpb24gcjMoKSB7XG4gICAgICAgIH1cbiAgICAgICAgcjMucHJvdG90eXBlID0gdDIucHJvdG90eXBlLCBlMi5wcm90b3R5cGUgPSBuZXcgcjMoKTtcbiAgICAgIH0sIGEuZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlMiwgdDIsIHIzID0ge307XG4gICAgICAgIGZvciAoZTIgPSAwOyBlMiA8IGFyZ3VtZW50cy5sZW5ndGg7IGUyKyspIGZvciAodDIgaW4gYXJndW1lbnRzW2UyXSkgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFyZ3VtZW50c1tlMl0sIHQyKSAmJiB2b2lkIDAgPT09IHIzW3QyXSAmJiAocjNbdDJdID0gYXJndW1lbnRzW2UyXVt0Ml0pO1xuICAgICAgICByZXR1cm4gcjM7XG4gICAgICB9LCBhLnByZXBhcmVDb250ZW50ID0gZnVuY3Rpb24ocjMsIGUyLCBuMiwgaTIsIHMzKSB7XG4gICAgICAgIHJldHVybiB1LlByb21pc2UucmVzb2x2ZShlMikudGhlbihmdW5jdGlvbihuMykge1xuICAgICAgICAgIHJldHVybiBvLmJsb2IgJiYgKG4zIGluc3RhbmNlb2YgQmxvYiB8fCAtMSAhPT0gW1wiW29iamVjdCBGaWxlXVwiLCBcIltvYmplY3QgQmxvYl1cIl0uaW5kZXhPZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobjMpKSkgJiYgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgRmlsZVJlYWRlciA/IG5ldyB1LlByb21pc2UoZnVuY3Rpb24odDIsIHI0KSB7XG4gICAgICAgICAgICB2YXIgZTMgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICAgICAgZTMub25sb2FkID0gZnVuY3Rpb24oZTQpIHtcbiAgICAgICAgICAgICAgdDIoZTQudGFyZ2V0LnJlc3VsdCk7XG4gICAgICAgICAgICB9LCBlMy5vbmVycm9yID0gZnVuY3Rpb24oZTQpIHtcbiAgICAgICAgICAgICAgcjQoZTQudGFyZ2V0LmVycm9yKTtcbiAgICAgICAgICAgIH0sIGUzLnJlYWRBc0FycmF5QnVmZmVyKG4zKTtcbiAgICAgICAgICB9KSA6IG4zO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKGUzKSB7XG4gICAgICAgICAgdmFyIHQyID0gYS5nZXRUeXBlT2YoZTMpO1xuICAgICAgICAgIHJldHVybiB0MiA/IChcImFycmF5YnVmZmVyXCIgPT09IHQyID8gZTMgPSBhLnRyYW5zZm9ybVRvKFwidWludDhhcnJheVwiLCBlMykgOiBcInN0cmluZ1wiID09PSB0MiAmJiAoczMgPyBlMyA9IGguZGVjb2RlKGUzKSA6IG4yICYmIHRydWUgIT09IGkyICYmIChlMyA9IGZ1bmN0aW9uKGU0KSB7XG4gICAgICAgICAgICByZXR1cm4gbChlNCwgby51aW50OGFycmF5ID8gbmV3IFVpbnQ4QXJyYXkoZTQubGVuZ3RoKSA6IG5ldyBBcnJheShlNC5sZW5ndGgpKTtcbiAgICAgICAgICB9KGUzKSkpLCBlMykgOiB1LlByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkNhbid0IHJlYWQgdGhlIGRhdGEgb2YgJ1wiICsgcjMgKyBcIicuIElzIGl0IGluIGEgc3VwcG9ydGVkIEphdmFTY3JpcHQgdHlwZSAoU3RyaW5nLCBCbG9iLCBBcnJheUJ1ZmZlciwgZXRjKSA/XCIpKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH0sIHsgXCIuL2Jhc2U2NFwiOiAxLCBcIi4vZXh0ZXJuYWxcIjogNiwgXCIuL25vZGVqc1V0aWxzXCI6IDE0LCBcIi4vc3VwcG9ydFwiOiAzMCwgc2V0aW1tZWRpYXRlOiA1NCB9XSwgMzM6IFtmdW5jdGlvbihlLCB0LCByMikge1xuICAgICAgdmFyIG4gPSBlKFwiLi9yZWFkZXIvcmVhZGVyRm9yXCIpLCBpID0gZShcIi4vdXRpbHNcIiksIHMyID0gZShcIi4vc2lnbmF0dXJlXCIpLCBhID0gZShcIi4vemlwRW50cnlcIiksIG8gPSBlKFwiLi9zdXBwb3J0XCIpO1xuICAgICAgZnVuY3Rpb24gaChlMikge1xuICAgICAgICB0aGlzLmZpbGVzID0gW10sIHRoaXMubG9hZE9wdGlvbnMgPSBlMjtcbiAgICAgIH1cbiAgICAgIGgucHJvdG90eXBlID0geyBjaGVja1NpZ25hdHVyZTogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgaWYgKCF0aGlzLnJlYWRlci5yZWFkQW5kQ2hlY2tTaWduYXR1cmUoZTIpKSB7XG4gICAgICAgICAgdGhpcy5yZWFkZXIuaW5kZXggLT0gNDtcbiAgICAgICAgICB2YXIgdDIgPSB0aGlzLnJlYWRlci5yZWFkU3RyaW5nKDQpO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXAgb3IgYnVnOiB1bmV4cGVjdGVkIHNpZ25hdHVyZSAoXCIgKyBpLnByZXR0eSh0MikgKyBcIiwgZXhwZWN0ZWQgXCIgKyBpLnByZXR0eShlMikgKyBcIilcIik7XG4gICAgICAgIH1cbiAgICAgIH0sIGlzU2lnbmF0dXJlOiBmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgdmFyIHIzID0gdGhpcy5yZWFkZXIuaW5kZXg7XG4gICAgICAgIHRoaXMucmVhZGVyLnNldEluZGV4KGUyKTtcbiAgICAgICAgdmFyIG4yID0gdGhpcy5yZWFkZXIucmVhZFN0cmluZyg0KSA9PT0gdDI7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRlci5zZXRJbmRleChyMyksIG4yO1xuICAgICAgfSwgcmVhZEJsb2NrRW5kT2ZDZW50cmFsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5kaXNrTnVtYmVyID0gdGhpcy5yZWFkZXIucmVhZEludCgyKSwgdGhpcy5kaXNrV2l0aENlbnRyYWxEaXJTdGFydCA9IHRoaXMucmVhZGVyLnJlYWRJbnQoMiksIHRoaXMuY2VudHJhbERpclJlY29yZHNPblRoaXNEaXNrID0gdGhpcy5yZWFkZXIucmVhZEludCgyKSwgdGhpcy5jZW50cmFsRGlyUmVjb3JkcyA9IHRoaXMucmVhZGVyLnJlYWRJbnQoMiksIHRoaXMuY2VudHJhbERpclNpemUgPSB0aGlzLnJlYWRlci5yZWFkSW50KDQpLCB0aGlzLmNlbnRyYWxEaXJPZmZzZXQgPSB0aGlzLnJlYWRlci5yZWFkSW50KDQpLCB0aGlzLnppcENvbW1lbnRMZW5ndGggPSB0aGlzLnJlYWRlci5yZWFkSW50KDIpO1xuICAgICAgICB2YXIgZTIgPSB0aGlzLnJlYWRlci5yZWFkRGF0YSh0aGlzLnppcENvbW1lbnRMZW5ndGgpLCB0MiA9IG8udWludDhhcnJheSA/IFwidWludDhhcnJheVwiIDogXCJhcnJheVwiLCByMyA9IGkudHJhbnNmb3JtVG8odDIsIGUyKTtcbiAgICAgICAgdGhpcy56aXBDb21tZW50ID0gdGhpcy5sb2FkT3B0aW9ucy5kZWNvZGVGaWxlTmFtZShyMyk7XG4gICAgICB9LCByZWFkQmxvY2taaXA2NEVuZE9mQ2VudHJhbDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuemlwNjRFbmRPZkNlbnRyYWxTaXplID0gdGhpcy5yZWFkZXIucmVhZEludCg4KSwgdGhpcy5yZWFkZXIuc2tpcCg0KSwgdGhpcy5kaXNrTnVtYmVyID0gdGhpcy5yZWFkZXIucmVhZEludCg0KSwgdGhpcy5kaXNrV2l0aENlbnRyYWxEaXJTdGFydCA9IHRoaXMucmVhZGVyLnJlYWRJbnQoNCksIHRoaXMuY2VudHJhbERpclJlY29yZHNPblRoaXNEaXNrID0gdGhpcy5yZWFkZXIucmVhZEludCg4KSwgdGhpcy5jZW50cmFsRGlyUmVjb3JkcyA9IHRoaXMucmVhZGVyLnJlYWRJbnQoOCksIHRoaXMuY2VudHJhbERpclNpemUgPSB0aGlzLnJlYWRlci5yZWFkSW50KDgpLCB0aGlzLmNlbnRyYWxEaXJPZmZzZXQgPSB0aGlzLnJlYWRlci5yZWFkSW50KDgpLCB0aGlzLnppcDY0RXh0ZW5zaWJsZURhdGEgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgZTIsIHQyLCByMywgbjIgPSB0aGlzLnppcDY0RW5kT2ZDZW50cmFsU2l6ZSAtIDQ0OyAwIDwgbjI7ICkgZTIgPSB0aGlzLnJlYWRlci5yZWFkSW50KDIpLCB0MiA9IHRoaXMucmVhZGVyLnJlYWRJbnQoNCksIHIzID0gdGhpcy5yZWFkZXIucmVhZERhdGEodDIpLCB0aGlzLnppcDY0RXh0ZW5zaWJsZURhdGFbZTJdID0geyBpZDogZTIsIGxlbmd0aDogdDIsIHZhbHVlOiByMyB9O1xuICAgICAgfSwgcmVhZEJsb2NrWmlwNjRFbmRPZkNlbnRyYWxMb2NhdG9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuZGlza1dpdGhaaXA2NENlbnRyYWxEaXJTdGFydCA9IHRoaXMucmVhZGVyLnJlYWRJbnQoNCksIHRoaXMucmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpciA9IHRoaXMucmVhZGVyLnJlYWRJbnQoOCksIHRoaXMuZGlza3NDb3VudCA9IHRoaXMucmVhZGVyLnJlYWRJbnQoNCksIDEgPCB0aGlzLmRpc2tzQ291bnQpIHRocm93IG5ldyBFcnJvcihcIk11bHRpLXZvbHVtZXMgemlwIGFyZSBub3Qgc3VwcG9ydGVkXCIpO1xuICAgICAgfSwgcmVhZExvY2FsRmlsZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZTIsIHQyO1xuICAgICAgICBmb3IgKGUyID0gMDsgZTIgPCB0aGlzLmZpbGVzLmxlbmd0aDsgZTIrKykgdDIgPSB0aGlzLmZpbGVzW2UyXSwgdGhpcy5yZWFkZXIuc2V0SW5kZXgodDIubG9jYWxIZWFkZXJPZmZzZXQpLCB0aGlzLmNoZWNrU2lnbmF0dXJlKHMyLkxPQ0FMX0ZJTEVfSEVBREVSKSwgdDIucmVhZExvY2FsUGFydCh0aGlzLnJlYWRlciksIHQyLmhhbmRsZVVURjgoKSwgdDIucHJvY2Vzc0F0dHJpYnV0ZXMoKTtcbiAgICAgIH0sIHJlYWRDZW50cmFsRGlyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGUyO1xuICAgICAgICBmb3IgKHRoaXMucmVhZGVyLnNldEluZGV4KHRoaXMuY2VudHJhbERpck9mZnNldCk7IHRoaXMucmVhZGVyLnJlYWRBbmRDaGVja1NpZ25hdHVyZShzMi5DRU5UUkFMX0ZJTEVfSEVBREVSKTsgKSAoZTIgPSBuZXcgYSh7IHppcDY0OiB0aGlzLnppcDY0IH0sIHRoaXMubG9hZE9wdGlvbnMpKS5yZWFkQ2VudHJhbFBhcnQodGhpcy5yZWFkZXIpLCB0aGlzLmZpbGVzLnB1c2goZTIpO1xuICAgICAgICBpZiAodGhpcy5jZW50cmFsRGlyUmVjb3JkcyAhPT0gdGhpcy5maWxlcy5sZW5ndGggJiYgMCAhPT0gdGhpcy5jZW50cmFsRGlyUmVjb3JkcyAmJiAwID09PSB0aGlzLmZpbGVzLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcCBvciBidWc6IGV4cGVjdGVkIFwiICsgdGhpcy5jZW50cmFsRGlyUmVjb3JkcyArIFwiIHJlY29yZHMgaW4gY2VudHJhbCBkaXIsIGdvdCBcIiArIHRoaXMuZmlsZXMubGVuZ3RoKTtcbiAgICAgIH0sIHJlYWRFbmRPZkNlbnRyYWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZTIgPSB0aGlzLnJlYWRlci5sYXN0SW5kZXhPZlNpZ25hdHVyZShzMi5DRU5UUkFMX0RJUkVDVE9SWV9FTkQpO1xuICAgICAgICBpZiAoZTIgPCAwKSB0aHJvdyAhdGhpcy5pc1NpZ25hdHVyZSgwLCBzMi5MT0NBTF9GSUxFX0hFQURFUikgPyBuZXcgRXJyb3IoXCJDYW4ndCBmaW5kIGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeSA6IGlzIHRoaXMgYSB6aXAgZmlsZSA/IElmIGl0IGlzLCBzZWUgaHR0cHM6Ly9zdHVrLmdpdGh1Yi5pby9qc3ppcC9kb2N1bWVudGF0aW9uL2hvd3RvL3JlYWRfemlwLmh0bWxcIikgOiBuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwOiBjYW4ndCBmaW5kIGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeVwiKTtcbiAgICAgICAgdGhpcy5yZWFkZXIuc2V0SW5kZXgoZTIpO1xuICAgICAgICB2YXIgdDIgPSBlMjtcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tTaWduYXR1cmUoczIuQ0VOVFJBTF9ESVJFQ1RPUllfRU5EKSwgdGhpcy5yZWFkQmxvY2tFbmRPZkNlbnRyYWwoKSwgdGhpcy5kaXNrTnVtYmVyID09PSBpLk1BWF9WQUxVRV8xNkJJVFMgfHwgdGhpcy5kaXNrV2l0aENlbnRyYWxEaXJTdGFydCA9PT0gaS5NQVhfVkFMVUVfMTZCSVRTIHx8IHRoaXMuY2VudHJhbERpclJlY29yZHNPblRoaXNEaXNrID09PSBpLk1BWF9WQUxVRV8xNkJJVFMgfHwgdGhpcy5jZW50cmFsRGlyUmVjb3JkcyA9PT0gaS5NQVhfVkFMVUVfMTZCSVRTIHx8IHRoaXMuY2VudHJhbERpclNpemUgPT09IGkuTUFYX1ZBTFVFXzMyQklUUyB8fCB0aGlzLmNlbnRyYWxEaXJPZmZzZXQgPT09IGkuTUFYX1ZBTFVFXzMyQklUUykge1xuICAgICAgICAgIGlmICh0aGlzLnppcDY0ID0gdHJ1ZSwgKGUyID0gdGhpcy5yZWFkZXIubGFzdEluZGV4T2ZTaWduYXR1cmUoczIuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfTE9DQVRPUikpIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcDogY2FuJ3QgZmluZCB0aGUgWklQNjQgZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5IGxvY2F0b3JcIik7XG4gICAgICAgICAgaWYgKHRoaXMucmVhZGVyLnNldEluZGV4KGUyKSwgdGhpcy5jaGVja1NpZ25hdHVyZShzMi5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9MT0NBVE9SKSwgdGhpcy5yZWFkQmxvY2taaXA2NEVuZE9mQ2VudHJhbExvY2F0b3IoKSwgIXRoaXMuaXNTaWduYXR1cmUodGhpcy5yZWxhdGl2ZU9mZnNldEVuZE9mWmlwNjRDZW50cmFsRGlyLCBzMi5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9FTkQpICYmICh0aGlzLnJlbGF0aXZlT2Zmc2V0RW5kT2ZaaXA2NENlbnRyYWxEaXIgPSB0aGlzLnJlYWRlci5sYXN0SW5kZXhPZlNpZ25hdHVyZShzMi5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9FTkQpLCB0aGlzLnJlbGF0aXZlT2Zmc2V0RW5kT2ZaaXA2NENlbnRyYWxEaXIgPCAwKSkgdGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcDogY2FuJ3QgZmluZCB0aGUgWklQNjQgZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5XCIpO1xuICAgICAgICAgIHRoaXMucmVhZGVyLnNldEluZGV4KHRoaXMucmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpciksIHRoaXMuY2hlY2tTaWduYXR1cmUoczIuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfRU5EKSwgdGhpcy5yZWFkQmxvY2taaXA2NEVuZE9mQ2VudHJhbCgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByMyA9IHRoaXMuY2VudHJhbERpck9mZnNldCArIHRoaXMuY2VudHJhbERpclNpemU7XG4gICAgICAgIHRoaXMuemlwNjQgJiYgKHIzICs9IDIwLCByMyArPSAxMiArIHRoaXMuemlwNjRFbmRPZkNlbnRyYWxTaXplKTtcbiAgICAgICAgdmFyIG4yID0gdDIgLSByMztcbiAgICAgICAgaWYgKDAgPCBuMikgdGhpcy5pc1NpZ25hdHVyZSh0MiwgczIuQ0VOVFJBTF9GSUxFX0hFQURFUikgfHwgKHRoaXMucmVhZGVyLnplcm8gPSBuMik7XG4gICAgICAgIGVsc2UgaWYgKG4yIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcDogbWlzc2luZyBcIiArIE1hdGguYWJzKG4yKSArIFwiIGJ5dGVzLlwiKTtcbiAgICAgIH0sIHByZXBhcmVSZWFkZXI6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHRoaXMucmVhZGVyID0gbihlMik7XG4gICAgICB9LCBsb2FkOiBmdW5jdGlvbihlMikge1xuICAgICAgICB0aGlzLnByZXBhcmVSZWFkZXIoZTIpLCB0aGlzLnJlYWRFbmRPZkNlbnRyYWwoKSwgdGhpcy5yZWFkQ2VudHJhbERpcigpLCB0aGlzLnJlYWRMb2NhbEZpbGVzKCk7XG4gICAgICB9IH0sIHQuZXhwb3J0cyA9IGg7XG4gICAgfSwgeyBcIi4vcmVhZGVyL3JlYWRlckZvclwiOiAyMiwgXCIuL3NpZ25hdHVyZVwiOiAyMywgXCIuL3N1cHBvcnRcIjogMzAsIFwiLi91dGlsc1wiOiAzMiwgXCIuL3ppcEVudHJ5XCI6IDM0IH1dLCAzNDogW2Z1bmN0aW9uKGUsIHQsIHIyKSB7XG4gICAgICB2YXIgbiA9IGUoXCIuL3JlYWRlci9yZWFkZXJGb3JcIiksIHMyID0gZShcIi4vdXRpbHNcIiksIGkgPSBlKFwiLi9jb21wcmVzc2VkT2JqZWN0XCIpLCBhID0gZShcIi4vY3JjMzJcIiksIG8gPSBlKFwiLi91dGY4XCIpLCBoID0gZShcIi4vY29tcHJlc3Npb25zXCIpLCB1ID0gZShcIi4vc3VwcG9ydFwiKTtcbiAgICAgIGZ1bmN0aW9uIGwoZTIsIHQyKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGUyLCB0aGlzLmxvYWRPcHRpb25zID0gdDI7XG4gICAgICB9XG4gICAgICBsLnByb3RvdHlwZSA9IHsgaXNFbmNyeXB0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gMSA9PSAoMSAmIHRoaXMuYml0RmxhZyk7XG4gICAgICB9LCB1c2VVVEY4OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIDIwNDggPT0gKDIwNDggJiB0aGlzLmJpdEZsYWcpO1xuICAgICAgfSwgcmVhZExvY2FsUGFydDogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdmFyIHQyLCByMztcbiAgICAgICAgaWYgKGUyLnNraXAoMjIpLCB0aGlzLmZpbGVOYW1lTGVuZ3RoID0gZTIucmVhZEludCgyKSwgcjMgPSBlMi5yZWFkSW50KDIpLCB0aGlzLmZpbGVOYW1lID0gZTIucmVhZERhdGEodGhpcy5maWxlTmFtZUxlbmd0aCksIGUyLnNraXAocjMpLCAtMSA9PT0gdGhpcy5jb21wcmVzc2VkU2l6ZSB8fCAtMSA9PT0gdGhpcy51bmNvbXByZXNzZWRTaXplKSB0aHJvdyBuZXcgRXJyb3IoXCJCdWcgb3IgY29ycnVwdGVkIHppcCA6IGRpZG4ndCBnZXQgZW5vdWdoIGluZm9ybWF0aW9uIGZyb20gdGhlIGNlbnRyYWwgZGlyZWN0b3J5IChjb21wcmVzc2VkU2l6ZSA9PT0gLTEgfHwgdW5jb21wcmVzc2VkU2l6ZSA9PT0gLTEpXCIpO1xuICAgICAgICBpZiAobnVsbCA9PT0gKHQyID0gZnVuY3Rpb24oZTMpIHtcbiAgICAgICAgICBmb3IgKHZhciB0MyBpbiBoKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGgsIHQzKSAmJiBoW3QzXS5tYWdpYyA9PT0gZTMpIHJldHVybiBoW3QzXTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSh0aGlzLmNvbXByZXNzaW9uTWV0aG9kKSkpIHRocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXAgOiBjb21wcmVzc2lvbiBcIiArIHMyLnByZXR0eSh0aGlzLmNvbXByZXNzaW9uTWV0aG9kKSArIFwiIHVua25vd24gKGlubmVyIGZpbGUgOiBcIiArIHMyLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIsIHRoaXMuZmlsZU5hbWUpICsgXCIpXCIpO1xuICAgICAgICB0aGlzLmRlY29tcHJlc3NlZCA9IG5ldyBpKHRoaXMuY29tcHJlc3NlZFNpemUsIHRoaXMudW5jb21wcmVzc2VkU2l6ZSwgdGhpcy5jcmMzMiwgdDIsIGUyLnJlYWREYXRhKHRoaXMuY29tcHJlc3NlZFNpemUpKTtcbiAgICAgIH0sIHJlYWRDZW50cmFsUGFydDogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdGhpcy52ZXJzaW9uTWFkZUJ5ID0gZTIucmVhZEludCgyKSwgZTIuc2tpcCgyKSwgdGhpcy5iaXRGbGFnID0gZTIucmVhZEludCgyKSwgdGhpcy5jb21wcmVzc2lvbk1ldGhvZCA9IGUyLnJlYWRTdHJpbmcoMiksIHRoaXMuZGF0ZSA9IGUyLnJlYWREYXRlKCksIHRoaXMuY3JjMzIgPSBlMi5yZWFkSW50KDQpLCB0aGlzLmNvbXByZXNzZWRTaXplID0gZTIucmVhZEludCg0KSwgdGhpcy51bmNvbXByZXNzZWRTaXplID0gZTIucmVhZEludCg0KTtcbiAgICAgICAgdmFyIHQyID0gZTIucmVhZEludCgyKTtcbiAgICAgICAgaWYgKHRoaXMuZXh0cmFGaWVsZHNMZW5ndGggPSBlMi5yZWFkSW50KDIpLCB0aGlzLmZpbGVDb21tZW50TGVuZ3RoID0gZTIucmVhZEludCgyKSwgdGhpcy5kaXNrTnVtYmVyU3RhcnQgPSBlMi5yZWFkSW50KDIpLCB0aGlzLmludGVybmFsRmlsZUF0dHJpYnV0ZXMgPSBlMi5yZWFkSW50KDIpLCB0aGlzLmV4dGVybmFsRmlsZUF0dHJpYnV0ZXMgPSBlMi5yZWFkSW50KDQpLCB0aGlzLmxvY2FsSGVhZGVyT2Zmc2V0ID0gZTIucmVhZEludCg0KSwgdGhpcy5pc0VuY3J5cHRlZCgpKSB0aHJvdyBuZXcgRXJyb3IoXCJFbmNyeXB0ZWQgemlwIGFyZSBub3Qgc3VwcG9ydGVkXCIpO1xuICAgICAgICBlMi5za2lwKHQyKSwgdGhpcy5yZWFkRXh0cmFGaWVsZHMoZTIpLCB0aGlzLnBhcnNlWklQNjRFeHRyYUZpZWxkKGUyKSwgdGhpcy5maWxlQ29tbWVudCA9IGUyLnJlYWREYXRhKHRoaXMuZmlsZUNvbW1lbnRMZW5ndGgpO1xuICAgICAgfSwgcHJvY2Vzc0F0dHJpYnV0ZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnVuaXhQZXJtaXNzaW9ucyA9IG51bGwsIHRoaXMuZG9zUGVybWlzc2lvbnMgPSBudWxsO1xuICAgICAgICB2YXIgZTIgPSB0aGlzLnZlcnNpb25NYWRlQnkgPj4gODtcbiAgICAgICAgdGhpcy5kaXIgPSAhISgxNiAmIHRoaXMuZXh0ZXJuYWxGaWxlQXR0cmlidXRlcyksIDAgPT0gZTIgJiYgKHRoaXMuZG9zUGVybWlzc2lvbnMgPSA2MyAmIHRoaXMuZXh0ZXJuYWxGaWxlQXR0cmlidXRlcyksIDMgPT0gZTIgJiYgKHRoaXMudW5peFBlcm1pc3Npb25zID0gdGhpcy5leHRlcm5hbEZpbGVBdHRyaWJ1dGVzID4+IDE2ICYgNjU1MzUpLCB0aGlzLmRpciB8fCBcIi9cIiAhPT0gdGhpcy5maWxlTmFtZVN0ci5zbGljZSgtMSkgfHwgKHRoaXMuZGlyID0gdHJ1ZSk7XG4gICAgICB9LCBwYXJzZVpJUDY0RXh0cmFGaWVsZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmV4dHJhRmllbGRzWzFdKSB7XG4gICAgICAgICAgdmFyIGUyID0gbih0aGlzLmV4dHJhRmllbGRzWzFdLnZhbHVlKTtcbiAgICAgICAgICB0aGlzLnVuY29tcHJlc3NlZFNpemUgPT09IHMyLk1BWF9WQUxVRV8zMkJJVFMgJiYgKHRoaXMudW5jb21wcmVzc2VkU2l6ZSA9IGUyLnJlYWRJbnQoOCkpLCB0aGlzLmNvbXByZXNzZWRTaXplID09PSBzMi5NQVhfVkFMVUVfMzJCSVRTICYmICh0aGlzLmNvbXByZXNzZWRTaXplID0gZTIucmVhZEludCg4KSksIHRoaXMubG9jYWxIZWFkZXJPZmZzZXQgPT09IHMyLk1BWF9WQUxVRV8zMkJJVFMgJiYgKHRoaXMubG9jYWxIZWFkZXJPZmZzZXQgPSBlMi5yZWFkSW50KDgpKSwgdGhpcy5kaXNrTnVtYmVyU3RhcnQgPT09IHMyLk1BWF9WQUxVRV8zMkJJVFMgJiYgKHRoaXMuZGlza051bWJlclN0YXJ0ID0gZTIucmVhZEludCg0KSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHJlYWRFeHRyYUZpZWxkczogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdmFyIHQyLCByMywgbjIsIGkyID0gZTIuaW5kZXggKyB0aGlzLmV4dHJhRmllbGRzTGVuZ3RoO1xuICAgICAgICBmb3IgKHRoaXMuZXh0cmFGaWVsZHMgfHwgKHRoaXMuZXh0cmFGaWVsZHMgPSB7fSk7IGUyLmluZGV4ICsgNCA8IGkyOyApIHQyID0gZTIucmVhZEludCgyKSwgcjMgPSBlMi5yZWFkSW50KDIpLCBuMiA9IGUyLnJlYWREYXRhKHIzKSwgdGhpcy5leHRyYUZpZWxkc1t0Ml0gPSB7IGlkOiB0MiwgbGVuZ3RoOiByMywgdmFsdWU6IG4yIH07XG4gICAgICAgIGUyLnNldEluZGV4KGkyKTtcbiAgICAgIH0sIGhhbmRsZVVURjg6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZTIgPSB1LnVpbnQ4YXJyYXkgPyBcInVpbnQ4YXJyYXlcIiA6IFwiYXJyYXlcIjtcbiAgICAgICAgaWYgKHRoaXMudXNlVVRGOCgpKSB0aGlzLmZpbGVOYW1lU3RyID0gby51dGY4ZGVjb2RlKHRoaXMuZmlsZU5hbWUpLCB0aGlzLmZpbGVDb21tZW50U3RyID0gby51dGY4ZGVjb2RlKHRoaXMuZmlsZUNvbW1lbnQpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgdDIgPSB0aGlzLmZpbmRFeHRyYUZpZWxkVW5pY29kZVBhdGgoKTtcbiAgICAgICAgICBpZiAobnVsbCAhPT0gdDIpIHRoaXMuZmlsZU5hbWVTdHIgPSB0MjtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciByMyA9IHMyLnRyYW5zZm9ybVRvKGUyLCB0aGlzLmZpbGVOYW1lKTtcbiAgICAgICAgICAgIHRoaXMuZmlsZU5hbWVTdHIgPSB0aGlzLmxvYWRPcHRpb25zLmRlY29kZUZpbGVOYW1lKHIzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG4yID0gdGhpcy5maW5kRXh0cmFGaWVsZFVuaWNvZGVDb21tZW50KCk7XG4gICAgICAgICAgaWYgKG51bGwgIT09IG4yKSB0aGlzLmZpbGVDb21tZW50U3RyID0gbjI7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgaTIgPSBzMi50cmFuc2Zvcm1UbyhlMiwgdGhpcy5maWxlQ29tbWVudCk7XG4gICAgICAgICAgICB0aGlzLmZpbGVDb21tZW50U3RyID0gdGhpcy5sb2FkT3B0aW9ucy5kZWNvZGVGaWxlTmFtZShpMik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCBmaW5kRXh0cmFGaWVsZFVuaWNvZGVQYXRoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGUyID0gdGhpcy5leHRyYUZpZWxkc1syODc4OV07XG4gICAgICAgIGlmIChlMikge1xuICAgICAgICAgIHZhciB0MiA9IG4oZTIudmFsdWUpO1xuICAgICAgICAgIHJldHVybiAxICE9PSB0Mi5yZWFkSW50KDEpID8gbnVsbCA6IGEodGhpcy5maWxlTmFtZSkgIT09IHQyLnJlYWRJbnQoNCkgPyBudWxsIDogby51dGY4ZGVjb2RlKHQyLnJlYWREYXRhKGUyLmxlbmd0aCAtIDUpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0sIGZpbmRFeHRyYUZpZWxkVW5pY29kZUNvbW1lbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZTIgPSB0aGlzLmV4dHJhRmllbGRzWzI1NDYxXTtcbiAgICAgICAgaWYgKGUyKSB7XG4gICAgICAgICAgdmFyIHQyID0gbihlMi52YWx1ZSk7XG4gICAgICAgICAgcmV0dXJuIDEgIT09IHQyLnJlYWRJbnQoMSkgPyBudWxsIDogYSh0aGlzLmZpbGVDb21tZW50KSAhPT0gdDIucmVhZEludCg0KSA/IG51bGwgOiBvLnV0ZjhkZWNvZGUodDIucmVhZERhdGEoZTIubGVuZ3RoIC0gNSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSB9LCB0LmV4cG9ydHMgPSBsO1xuICAgIH0sIHsgXCIuL2NvbXByZXNzZWRPYmplY3RcIjogMiwgXCIuL2NvbXByZXNzaW9uc1wiOiAzLCBcIi4vY3JjMzJcIjogNCwgXCIuL3JlYWRlci9yZWFkZXJGb3JcIjogMjIsIFwiLi9zdXBwb3J0XCI6IDMwLCBcIi4vdXRmOFwiOiAzMSwgXCIuL3V0aWxzXCI6IDMyIH1dLCAzNTogW2Z1bmN0aW9uKGUsIHQsIHIyKSB7XG4gICAgICBmdW5jdGlvbiBuKGUyLCB0MiwgcjMpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gZTIsIHRoaXMuZGlyID0gcjMuZGlyLCB0aGlzLmRhdGUgPSByMy5kYXRlLCB0aGlzLmNvbW1lbnQgPSByMy5jb21tZW50LCB0aGlzLnVuaXhQZXJtaXNzaW9ucyA9IHIzLnVuaXhQZXJtaXNzaW9ucywgdGhpcy5kb3NQZXJtaXNzaW9ucyA9IHIzLmRvc1Blcm1pc3Npb25zLCB0aGlzLl9kYXRhID0gdDIsIHRoaXMuX2RhdGFCaW5hcnkgPSByMy5iaW5hcnksIHRoaXMub3B0aW9ucyA9IHsgY29tcHJlc3Npb246IHIzLmNvbXByZXNzaW9uLCBjb21wcmVzc2lvbk9wdGlvbnM6IHIzLmNvbXByZXNzaW9uT3B0aW9ucyB9O1xuICAgICAgfVxuICAgICAgdmFyIHMyID0gZShcIi4vc3RyZWFtL1N0cmVhbUhlbHBlclwiKSwgaSA9IGUoXCIuL3N0cmVhbS9EYXRhV29ya2VyXCIpLCBhID0gZShcIi4vdXRmOFwiKSwgbyA9IGUoXCIuL2NvbXByZXNzZWRPYmplY3RcIiksIGggPSBlKFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKTtcbiAgICAgIG4ucHJvdG90eXBlID0geyBpbnRlcm5hbFN0cmVhbTogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdmFyIHQyID0gbnVsbCwgcjMgPSBcInN0cmluZ1wiO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghZTIpIHRocm93IG5ldyBFcnJvcihcIk5vIG91dHB1dCB0eXBlIHNwZWNpZmllZC5cIik7XG4gICAgICAgICAgdmFyIG4yID0gXCJzdHJpbmdcIiA9PT0gKHIzID0gZTIudG9Mb3dlckNhc2UoKSkgfHwgXCJ0ZXh0XCIgPT09IHIzO1xuICAgICAgICAgIFwiYmluYXJ5c3RyaW5nXCIgIT09IHIzICYmIFwidGV4dFwiICE9PSByMyB8fCAocjMgPSBcInN0cmluZ1wiKSwgdDIgPSB0aGlzLl9kZWNvbXByZXNzV29ya2VyKCk7XG4gICAgICAgICAgdmFyIGkyID0gIXRoaXMuX2RhdGFCaW5hcnk7XG4gICAgICAgICAgaTIgJiYgIW4yICYmICh0MiA9IHQyLnBpcGUobmV3IGEuVXRmOEVuY29kZVdvcmtlcigpKSksICFpMiAmJiBuMiAmJiAodDIgPSB0Mi5waXBlKG5ldyBhLlV0ZjhEZWNvZGVXb3JrZXIoKSkpO1xuICAgICAgICB9IGNhdGNoIChlMykge1xuICAgICAgICAgICh0MiA9IG5ldyBoKFwiZXJyb3JcIikpLmVycm9yKGUzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IHMyKHQyLCByMywgXCJcIik7XG4gICAgICB9LCBhc3luYzogZnVuY3Rpb24oZTIsIHQyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsU3RyZWFtKGUyKS5hY2N1bXVsYXRlKHQyKTtcbiAgICAgIH0sIG5vZGVTdHJlYW06IGZ1bmN0aW9uKGUyLCB0Mikge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbFN0cmVhbShlMiB8fCBcIm5vZGVidWZmZXJcIikudG9Ob2RlanNTdHJlYW0odDIpO1xuICAgICAgfSwgX2NvbXByZXNzV29ya2VyOiBmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RhdGEgaW5zdGFuY2VvZiBvICYmIHRoaXMuX2RhdGEuY29tcHJlc3Npb24ubWFnaWMgPT09IGUyLm1hZ2ljKSByZXR1cm4gdGhpcy5fZGF0YS5nZXRDb21wcmVzc2VkV29ya2VyKCk7XG4gICAgICAgIHZhciByMyA9IHRoaXMuX2RlY29tcHJlc3NXb3JrZXIoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGFCaW5hcnkgfHwgKHIzID0gcjMucGlwZShuZXcgYS5VdGY4RW5jb2RlV29ya2VyKCkpKSwgby5jcmVhdGVXb3JrZXJGcm9tKHIzLCBlMiwgdDIpO1xuICAgICAgfSwgX2RlY29tcHJlc3NXb3JrZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YSBpbnN0YW5jZW9mIG8gPyB0aGlzLl9kYXRhLmdldENvbnRlbnRXb3JrZXIoKSA6IHRoaXMuX2RhdGEgaW5zdGFuY2VvZiBoID8gdGhpcy5fZGF0YSA6IG5ldyBpKHRoaXMuX2RhdGEpO1xuICAgICAgfSB9O1xuICAgICAgZm9yICh2YXIgdSA9IFtcImFzVGV4dFwiLCBcImFzQmluYXJ5XCIsIFwiYXNOb2RlQnVmZmVyXCIsIFwiYXNVaW50OEFycmF5XCIsIFwiYXNBcnJheUJ1ZmZlclwiXSwgbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIG1ldGhvZCBoYXMgYmVlbiByZW1vdmVkIGluIEpTWmlwIDMuMCwgcGxlYXNlIGNoZWNrIHRoZSB1cGdyYWRlIGd1aWRlLlwiKTtcbiAgICAgIH0sIGYyID0gMDsgZjIgPCB1Lmxlbmd0aDsgZjIrKykgbi5wcm90b3R5cGVbdVtmMl1dID0gbDtcbiAgICAgIHQuZXhwb3J0cyA9IG47XG4gICAgfSwgeyBcIi4vY29tcHJlc3NlZE9iamVjdFwiOiAyLCBcIi4vc3RyZWFtL0RhdGFXb3JrZXJcIjogMjcsIFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiOiAyOCwgXCIuL3N0cmVhbS9TdHJlYW1IZWxwZXJcIjogMjksIFwiLi91dGY4XCI6IDMxIH1dLCAzNjogW2Z1bmN0aW9uKGUsIGwsIHQpIHtcbiAgICAgIChmdW5jdGlvbih0Mikge1xuICAgICAgICB2YXIgcjIsIG4sIGUyID0gdDIuTXV0YXRpb25PYnNlcnZlciB8fCB0Mi5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xuICAgICAgICBpZiAoZTIpIHtcbiAgICAgICAgICB2YXIgaSA9IDAsIHMyID0gbmV3IGUyKHUpLCBhID0gdDIuZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJcIik7XG4gICAgICAgICAgczIub2JzZXJ2ZShhLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSksIHIyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBhLmRhdGEgPSBpID0gKytpICUgMjtcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKHQyLnNldEltbWVkaWF0ZSB8fCB2b2lkIDAgPT09IHQyLk1lc3NhZ2VDaGFubmVsKSByMiA9IFwiZG9jdW1lbnRcIiBpbiB0MiAmJiBcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiIGluIHQyLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikgPyBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgZTMgPSB0Mi5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgIGUzLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdSgpLCBlMy5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsLCBlMy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUzKSwgZTMgPSBudWxsO1xuICAgICAgICAgIH0sIHQyLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChlMyk7XG4gICAgICAgIH0gOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KHUsIDApO1xuICAgICAgICB9O1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgbyA9IG5ldyB0Mi5NZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICAgIG8ucG9ydDEub25tZXNzYWdlID0gdSwgcjIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG8ucG9ydDIucG9zdE1lc3NhZ2UoMCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaCA9IFtdO1xuICAgICAgICBmdW5jdGlvbiB1KCkge1xuICAgICAgICAgIHZhciBlMywgdDM7XG4gICAgICAgICAgbiA9IHRydWU7XG4gICAgICAgICAgZm9yICh2YXIgcjMgPSBoLmxlbmd0aDsgcjM7ICkge1xuICAgICAgICAgICAgZm9yICh0MyA9IGgsIGggPSBbXSwgZTMgPSAtMTsgKytlMyA8IHIzOyApIHQzW2UzXSgpO1xuICAgICAgICAgICAgcjMgPSBoLmxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgICAgbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGwuZXhwb3J0cyA9IGZ1bmN0aW9uKGUzKSB7XG4gICAgICAgICAgMSAhPT0gaC5wdXNoKGUzKSB8fCBuIHx8IHIyKCk7XG4gICAgICAgIH07XG4gICAgICB9KS5jYWxsKHRoaXMsIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGNvbW1vbmpzR2xvYmFsID8gY29tbW9uanNHbG9iYWwgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBzZWxmID8gc2VsZiA6IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHdpbmRvdyA/IHdpbmRvdyA6IHt9KTtcbiAgICB9LCB7fV0sIDM3OiBbZnVuY3Rpb24oZSwgdCwgcjIpIHtcbiAgICAgIHZhciBpID0gZShcImltbWVkaWF0ZVwiKTtcbiAgICAgIGZ1bmN0aW9uIHUoKSB7XG4gICAgICB9XG4gICAgICB2YXIgbCA9IHt9LCBzMiA9IFtcIlJFSkVDVEVEXCJdLCBhID0gW1wiRlVMRklMTEVEXCJdLCBuID0gW1wiUEVORElOR1wiXTtcbiAgICAgIGZ1bmN0aW9uIG8oZTIpIHtcbiAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZTIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJyZXNvbHZlciBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBuLCB0aGlzLnF1ZXVlID0gW10sIHRoaXMub3V0Y29tZSA9IHZvaWQgMCwgZTIgIT09IHUgJiYgZCh0aGlzLCBlMik7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBoKGUyLCB0MiwgcjMpIHtcbiAgICAgICAgdGhpcy5wcm9taXNlID0gZTIsIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgdDIgJiYgKHRoaXMub25GdWxmaWxsZWQgPSB0MiwgdGhpcy5jYWxsRnVsZmlsbGVkID0gdGhpcy5vdGhlckNhbGxGdWxmaWxsZWQpLCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHIzICYmICh0aGlzLm9uUmVqZWN0ZWQgPSByMywgdGhpcy5jYWxsUmVqZWN0ZWQgPSB0aGlzLm90aGVyQ2FsbFJlamVjdGVkKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGYyKHQyLCByMywgbjIpIHtcbiAgICAgICAgaShmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgZTI7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGUyID0gcjMobjIpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUzKSB7XG4gICAgICAgICAgICByZXR1cm4gbC5yZWplY3QodDIsIGUzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZTIgPT09IHQyID8gbC5yZWplY3QodDIsIG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVzb2x2ZSBwcm9taXNlIHdpdGggaXRzZWxmXCIpKSA6IGwucmVzb2x2ZSh0MiwgZTIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGMoZTIpIHtcbiAgICAgICAgdmFyIHQyID0gZTIgJiYgZTIudGhlbjtcbiAgICAgICAgaWYgKGUyICYmIChcIm9iamVjdFwiID09IHR5cGVvZiBlMiB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUyKSAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHQyKSByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdDIuYXBwbHkoZTIsIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBkKHQyLCBlMikge1xuICAgICAgICB2YXIgcjMgPSBmYWxzZTtcbiAgICAgICAgZnVuY3Rpb24gbjIoZTMpIHtcbiAgICAgICAgICByMyB8fCAocjMgPSB0cnVlLCBsLnJlamVjdCh0MiwgZTMpKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpMihlMykge1xuICAgICAgICAgIHIzIHx8IChyMyA9IHRydWUsIGwucmVzb2x2ZSh0MiwgZTMpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgczMgPSBwKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGUyKGkyLCBuMik7XG4gICAgICAgIH0pO1xuICAgICAgICBcImVycm9yXCIgPT09IHMzLnN0YXR1cyAmJiBuMihzMy52YWx1ZSk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBwKGUyLCB0Mikge1xuICAgICAgICB2YXIgcjMgPSB7fTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByMy52YWx1ZSA9IGUyKHQyKSwgcjMuc3RhdHVzID0gXCJzdWNjZXNzXCI7XG4gICAgICAgIH0gY2F0Y2ggKGUzKSB7XG4gICAgICAgICAgcjMuc3RhdHVzID0gXCJlcnJvclwiLCByMy52YWx1ZSA9IGUzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByMztcbiAgICAgIH1cbiAgICAgICh0LmV4cG9ydHMgPSBvKS5wcm90b3R5cGUuZmluYWxseSA9IGZ1bmN0aW9uKHQyKSB7XG4gICAgICAgIGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIHQyKSByZXR1cm4gdGhpcztcbiAgICAgICAgdmFyIHIzID0gdGhpcy5jb25zdHJ1Y3RvcjtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbihlMikge1xuICAgICAgICAgIHJldHVybiByMy5yZXNvbHZlKHQyKCkpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZTI7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgICAgcmV0dXJuIHIzLnJlc29sdmUodDIoKSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRocm93IGUyO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0sIG8ucHJvdG90eXBlLmNhdGNoID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBlMik7XG4gICAgICB9LCBvLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24oZTIsIHQyKSB7XG4gICAgICAgIGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUyICYmIHRoaXMuc3RhdGUgPT09IGEgfHwgXCJmdW5jdGlvblwiICE9IHR5cGVvZiB0MiAmJiB0aGlzLnN0YXRlID09PSBzMikgcmV0dXJuIHRoaXM7XG4gICAgICAgIHZhciByMyA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKHUpO1xuICAgICAgICB0aGlzLnN0YXRlICE9PSBuID8gZjIocjMsIHRoaXMuc3RhdGUgPT09IGEgPyBlMiA6IHQyLCB0aGlzLm91dGNvbWUpIDogdGhpcy5xdWV1ZS5wdXNoKG5ldyBoKHIzLCBlMiwgdDIpKTtcbiAgICAgICAgcmV0dXJuIHIzO1xuICAgICAgfSwgaC5wcm90b3R5cGUuY2FsbEZ1bGZpbGxlZCA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIGwucmVzb2x2ZSh0aGlzLnByb21pc2UsIGUyKTtcbiAgICAgIH0sIGgucHJvdG90eXBlLm90aGVyQ2FsbEZ1bGZpbGxlZCA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIGYyKHRoaXMucHJvbWlzZSwgdGhpcy5vbkZ1bGZpbGxlZCwgZTIpO1xuICAgICAgfSwgaC5wcm90b3R5cGUuY2FsbFJlamVjdGVkID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgbC5yZWplY3QodGhpcy5wcm9taXNlLCBlMik7XG4gICAgICB9LCBoLnByb3RvdHlwZS5vdGhlckNhbGxSZWplY3RlZCA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIGYyKHRoaXMucHJvbWlzZSwgdGhpcy5vblJlamVjdGVkLCBlMik7XG4gICAgICB9LCBsLnJlc29sdmUgPSBmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgdmFyIHIzID0gcChjLCB0Mik7XG4gICAgICAgIGlmIChcImVycm9yXCIgPT09IHIzLnN0YXR1cykgcmV0dXJuIGwucmVqZWN0KGUyLCByMy52YWx1ZSk7XG4gICAgICAgIHZhciBuMiA9IHIzLnZhbHVlO1xuICAgICAgICBpZiAobjIpIGQoZTIsIG4yKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZTIuc3RhdGUgPSBhLCBlMi5vdXRjb21lID0gdDI7XG4gICAgICAgICAgZm9yICh2YXIgaTIgPSAtMSwgczMgPSBlMi5xdWV1ZS5sZW5ndGg7ICsraTIgPCBzMzsgKSBlMi5xdWV1ZVtpMl0uY2FsbEZ1bGZpbGxlZCh0Mik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGUyO1xuICAgICAgfSwgbC5yZWplY3QgPSBmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgZTIuc3RhdGUgPSBzMiwgZTIub3V0Y29tZSA9IHQyO1xuICAgICAgICBmb3IgKHZhciByMyA9IC0xLCBuMiA9IGUyLnF1ZXVlLmxlbmd0aDsgKytyMyA8IG4yOyApIGUyLnF1ZXVlW3IzXS5jYWxsUmVqZWN0ZWQodDIpO1xuICAgICAgICByZXR1cm4gZTI7XG4gICAgICB9LCBvLnJlc29sdmUgPSBmdW5jdGlvbihlMikge1xuICAgICAgICBpZiAoZTIgaW5zdGFuY2VvZiB0aGlzKSByZXR1cm4gZTI7XG4gICAgICAgIHJldHVybiBsLnJlc29sdmUobmV3IHRoaXModSksIGUyKTtcbiAgICAgIH0sIG8ucmVqZWN0ID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdmFyIHQyID0gbmV3IHRoaXModSk7XG4gICAgICAgIHJldHVybiBsLnJlamVjdCh0MiwgZTIpO1xuICAgICAgfSwgby5hbGwgPSBmdW5jdGlvbihlMikge1xuICAgICAgICB2YXIgcjMgPSB0aGlzO1xuICAgICAgICBpZiAoXCJbb2JqZWN0IEFycmF5XVwiICE9PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZTIpKSByZXR1cm4gdGhpcy5yZWplY3QobmV3IFR5cGVFcnJvcihcIm11c3QgYmUgYW4gYXJyYXlcIikpO1xuICAgICAgICB2YXIgbjIgPSBlMi5sZW5ndGgsIGkyID0gZmFsc2U7XG4gICAgICAgIGlmICghbjIpIHJldHVybiB0aGlzLnJlc29sdmUoW10pO1xuICAgICAgICB2YXIgczMgPSBuZXcgQXJyYXkobjIpLCBhMiA9IDAsIHQyID0gLTEsIG8yID0gbmV3IHRoaXModSk7XG4gICAgICAgIGZvciAoOyArK3QyIDwgbjI7ICkgaDIoZTJbdDJdLCB0Mik7XG4gICAgICAgIHJldHVybiBvMjtcbiAgICAgICAgZnVuY3Rpb24gaDIoZTMsIHQzKSB7XG4gICAgICAgICAgcjMucmVzb2x2ZShlMykudGhlbihmdW5jdGlvbihlNCkge1xuICAgICAgICAgICAgczNbdDNdID0gZTQsICsrYTIgIT09IG4yIHx8IGkyIHx8IChpMiA9IHRydWUsIGwucmVzb2x2ZShvMiwgczMpKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlNCkge1xuICAgICAgICAgICAgaTIgfHwgKGkyID0gdHJ1ZSwgbC5yZWplY3QobzIsIGU0KSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sIG8ucmFjZSA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHZhciB0MiA9IHRoaXM7XG4gICAgICAgIGlmIChcIltvYmplY3QgQXJyYXldXCIgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlMikpIHJldHVybiB0aGlzLnJlamVjdChuZXcgVHlwZUVycm9yKFwibXVzdCBiZSBhbiBhcnJheVwiKSk7XG4gICAgICAgIHZhciByMyA9IGUyLmxlbmd0aCwgbjIgPSBmYWxzZTtcbiAgICAgICAgaWYgKCFyMykgcmV0dXJuIHRoaXMucmVzb2x2ZShbXSk7XG4gICAgICAgIHZhciBpMiA9IC0xLCBzMyA9IG5ldyB0aGlzKHUpO1xuICAgICAgICBmb3IgKDsgKytpMiA8IHIzOyApIGEyID0gZTJbaTJdLCB0Mi5yZXNvbHZlKGEyKS50aGVuKGZ1bmN0aW9uKGUzKSB7XG4gICAgICAgICAgbjIgfHwgKG4yID0gdHJ1ZSwgbC5yZXNvbHZlKHMzLCBlMykpO1xuICAgICAgICB9LCBmdW5jdGlvbihlMykge1xuICAgICAgICAgIG4yIHx8IChuMiA9IHRydWUsIGwucmVqZWN0KHMzLCBlMykpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGEyO1xuICAgICAgICByZXR1cm4gczM7XG4gICAgICB9O1xuICAgIH0sIHsgaW1tZWRpYXRlOiAzNiB9XSwgMzg6IFtmdW5jdGlvbihlLCB0LCByMikge1xuICAgICAgdmFyIG4gPSB7fTtcbiAgICAgICgwLCBlKFwiLi9saWIvdXRpbHMvY29tbW9uXCIpLmFzc2lnbikobiwgZShcIi4vbGliL2RlZmxhdGVcIiksIGUoXCIuL2xpYi9pbmZsYXRlXCIpLCBlKFwiLi9saWIvemxpYi9jb25zdGFudHNcIikpLCB0LmV4cG9ydHMgPSBuO1xuICAgIH0sIHsgXCIuL2xpYi9kZWZsYXRlXCI6IDM5LCBcIi4vbGliL2luZmxhdGVcIjogNDAsIFwiLi9saWIvdXRpbHMvY29tbW9uXCI6IDQxLCBcIi4vbGliL3psaWIvY29uc3RhbnRzXCI6IDQ0IH1dLCAzOTogW2Z1bmN0aW9uKGUsIHQsIHIyKSB7XG4gICAgICB2YXIgYSA9IGUoXCIuL3psaWIvZGVmbGF0ZVwiKSwgbyA9IGUoXCIuL3V0aWxzL2NvbW1vblwiKSwgaCA9IGUoXCIuL3V0aWxzL3N0cmluZ3NcIiksIGkgPSBlKFwiLi96bGliL21lc3NhZ2VzXCIpLCBzMiA9IGUoXCIuL3psaWIvenN0cmVhbVwiKSwgdSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsIGwgPSAwLCBmMiA9IC0xLCBjID0gMCwgZCA9IDg7XG4gICAgICBmdW5jdGlvbiBwKGUyKSB7XG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBwKSkgcmV0dXJuIG5ldyBwKGUyKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gby5hc3NpZ24oeyBsZXZlbDogZjIsIG1ldGhvZDogZCwgY2h1bmtTaXplOiAxNjM4NCwgd2luZG93Qml0czogMTUsIG1lbUxldmVsOiA4LCBzdHJhdGVneTogYywgdG86IFwiXCIgfSwgZTIgfHwge30pO1xuICAgICAgICB2YXIgdDIgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIHQyLnJhdyAmJiAwIDwgdDIud2luZG93Qml0cyA/IHQyLndpbmRvd0JpdHMgPSAtdDIud2luZG93Qml0cyA6IHQyLmd6aXAgJiYgMCA8IHQyLndpbmRvd0JpdHMgJiYgdDIud2luZG93Qml0cyA8IDE2ICYmICh0Mi53aW5kb3dCaXRzICs9IDE2KSwgdGhpcy5lcnIgPSAwLCB0aGlzLm1zZyA9IFwiXCIsIHRoaXMuZW5kZWQgPSBmYWxzZSwgdGhpcy5jaHVua3MgPSBbXSwgdGhpcy5zdHJtID0gbmV3IHMyKCksIHRoaXMuc3RybS5hdmFpbF9vdXQgPSAwO1xuICAgICAgICB2YXIgcjMgPSBhLmRlZmxhdGVJbml0Mih0aGlzLnN0cm0sIHQyLmxldmVsLCB0Mi5tZXRob2QsIHQyLndpbmRvd0JpdHMsIHQyLm1lbUxldmVsLCB0Mi5zdHJhdGVneSk7XG4gICAgICAgIGlmIChyMyAhPT0gbCkgdGhyb3cgbmV3IEVycm9yKGlbcjNdKTtcbiAgICAgICAgaWYgKHQyLmhlYWRlciAmJiBhLmRlZmxhdGVTZXRIZWFkZXIodGhpcy5zdHJtLCB0Mi5oZWFkZXIpLCB0Mi5kaWN0aW9uYXJ5KSB7XG4gICAgICAgICAgdmFyIG4yO1xuICAgICAgICAgIGlmIChuMiA9IFwic3RyaW5nXCIgPT0gdHlwZW9mIHQyLmRpY3Rpb25hcnkgPyBoLnN0cmluZzJidWYodDIuZGljdGlvbmFyeSkgOiBcIltvYmplY3QgQXJyYXlCdWZmZXJdXCIgPT09IHUuY2FsbCh0Mi5kaWN0aW9uYXJ5KSA/IG5ldyBVaW50OEFycmF5KHQyLmRpY3Rpb25hcnkpIDogdDIuZGljdGlvbmFyeSwgKHIzID0gYS5kZWZsYXRlU2V0RGljdGlvbmFyeSh0aGlzLnN0cm0sIG4yKSkgIT09IGwpIHRocm93IG5ldyBFcnJvcihpW3IzXSk7XG4gICAgICAgICAgdGhpcy5fZGljdF9zZXQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBuKGUyLCB0Mikge1xuICAgICAgICB2YXIgcjMgPSBuZXcgcCh0Mik7XG4gICAgICAgIGlmIChyMy5wdXNoKGUyLCB0cnVlKSwgcjMuZXJyKSB0aHJvdyByMy5tc2cgfHwgaVtyMy5lcnJdO1xuICAgICAgICByZXR1cm4gcjMucmVzdWx0O1xuICAgICAgfVxuICAgICAgcC5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uKGUyLCB0Mikge1xuICAgICAgICB2YXIgcjMsIG4yLCBpMiA9IHRoaXMuc3RybSwgczMgPSB0aGlzLm9wdGlvbnMuY2h1bmtTaXplO1xuICAgICAgICBpZiAodGhpcy5lbmRlZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBuMiA9IHQyID09PSB+fnQyID8gdDIgOiB0cnVlID09PSB0MiA/IDQgOiAwLCBcInN0cmluZ1wiID09IHR5cGVvZiBlMiA/IGkyLmlucHV0ID0gaC5zdHJpbmcyYnVmKGUyKSA6IFwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIiA9PT0gdS5jYWxsKGUyKSA/IGkyLmlucHV0ID0gbmV3IFVpbnQ4QXJyYXkoZTIpIDogaTIuaW5wdXQgPSBlMiwgaTIubmV4dF9pbiA9IDAsIGkyLmF2YWlsX2luID0gaTIuaW5wdXQubGVuZ3RoO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgaWYgKDAgPT09IGkyLmF2YWlsX291dCAmJiAoaTIub3V0cHV0ID0gbmV3IG8uQnVmOChzMyksIGkyLm5leHRfb3V0ID0gMCwgaTIuYXZhaWxfb3V0ID0gczMpLCAxICE9PSAocjMgPSBhLmRlZmxhdGUoaTIsIG4yKSkgJiYgcjMgIT09IGwpIHJldHVybiB0aGlzLm9uRW5kKHIzKSwgISh0aGlzLmVuZGVkID0gdHJ1ZSk7XG4gICAgICAgICAgMCAhPT0gaTIuYXZhaWxfb3V0ICYmICgwICE9PSBpMi5hdmFpbF9pbiB8fCA0ICE9PSBuMiAmJiAyICE9PSBuMikgfHwgKFwic3RyaW5nXCIgPT09IHRoaXMub3B0aW9ucy50byA/IHRoaXMub25EYXRhKGguYnVmMmJpbnN0cmluZyhvLnNocmlua0J1ZihpMi5vdXRwdXQsIGkyLm5leHRfb3V0KSkpIDogdGhpcy5vbkRhdGEoby5zaHJpbmtCdWYoaTIub3V0cHV0LCBpMi5uZXh0X291dCkpKTtcbiAgICAgICAgfSB3aGlsZSAoKDAgPCBpMi5hdmFpbF9pbiB8fCAwID09PSBpMi5hdmFpbF9vdXQpICYmIDEgIT09IHIzKTtcbiAgICAgICAgcmV0dXJuIDQgPT09IG4yID8gKHIzID0gYS5kZWZsYXRlRW5kKHRoaXMuc3RybSksIHRoaXMub25FbmQocjMpLCB0aGlzLmVuZGVkID0gdHJ1ZSwgcjMgPT09IGwpIDogMiAhPT0gbjIgfHwgKHRoaXMub25FbmQobCksICEoaTIuYXZhaWxfb3V0ID0gMCkpO1xuICAgICAgfSwgcC5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdGhpcy5jaHVua3MucHVzaChlMik7XG4gICAgICB9LCBwLnByb3RvdHlwZS5vbkVuZCA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIGUyID09PSBsICYmIChcInN0cmluZ1wiID09PSB0aGlzLm9wdGlvbnMudG8gPyB0aGlzLnJlc3VsdCA9IHRoaXMuY2h1bmtzLmpvaW4oXCJcIikgOiB0aGlzLnJlc3VsdCA9IG8uZmxhdHRlbkNodW5rcyh0aGlzLmNodW5rcykpLCB0aGlzLmNodW5rcyA9IFtdLCB0aGlzLmVyciA9IGUyLCB0aGlzLm1zZyA9IHRoaXMuc3RybS5tc2c7XG4gICAgICB9LCByMi5EZWZsYXRlID0gcCwgcjIuZGVmbGF0ZSA9IG4sIHIyLmRlZmxhdGVSYXcgPSBmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgcmV0dXJuICh0MiA9IHQyIHx8IHt9KS5yYXcgPSB0cnVlLCBuKGUyLCB0Mik7XG4gICAgICB9LCByMi5nemlwID0gZnVuY3Rpb24oZTIsIHQyKSB7XG4gICAgICAgIHJldHVybiAodDIgPSB0MiB8fCB7fSkuZ3ppcCA9IHRydWUsIG4oZTIsIHQyKTtcbiAgICAgIH07XG4gICAgfSwgeyBcIi4vdXRpbHMvY29tbW9uXCI6IDQxLCBcIi4vdXRpbHMvc3RyaW5nc1wiOiA0MiwgXCIuL3psaWIvZGVmbGF0ZVwiOiA0NiwgXCIuL3psaWIvbWVzc2FnZXNcIjogNTEsIFwiLi96bGliL3pzdHJlYW1cIjogNTMgfV0sIDQwOiBbZnVuY3Rpb24oZSwgdCwgcjIpIHtcbiAgICAgIHZhciBjID0gZShcIi4vemxpYi9pbmZsYXRlXCIpLCBkID0gZShcIi4vdXRpbHMvY29tbW9uXCIpLCBwID0gZShcIi4vdXRpbHMvc3RyaW5nc1wiKSwgbSA9IGUoXCIuL3psaWIvY29uc3RhbnRzXCIpLCBuID0gZShcIi4vemxpYi9tZXNzYWdlc1wiKSwgaSA9IGUoXCIuL3psaWIvenN0cmVhbVwiKSwgczIgPSBlKFwiLi96bGliL2d6aGVhZGVyXCIpLCBfID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbiAgICAgIGZ1bmN0aW9uIGEoZTIpIHtcbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIGEpKSByZXR1cm4gbmV3IGEoZTIpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBkLmFzc2lnbih7IGNodW5rU2l6ZTogMTYzODQsIHdpbmRvd0JpdHM6IDAsIHRvOiBcIlwiIH0sIGUyIHx8IHt9KTtcbiAgICAgICAgdmFyIHQyID0gdGhpcy5vcHRpb25zO1xuICAgICAgICB0Mi5yYXcgJiYgMCA8PSB0Mi53aW5kb3dCaXRzICYmIHQyLndpbmRvd0JpdHMgPCAxNiAmJiAodDIud2luZG93Qml0cyA9IC10Mi53aW5kb3dCaXRzLCAwID09PSB0Mi53aW5kb3dCaXRzICYmICh0Mi53aW5kb3dCaXRzID0gLTE1KSksICEoMCA8PSB0Mi53aW5kb3dCaXRzICYmIHQyLndpbmRvd0JpdHMgPCAxNikgfHwgZTIgJiYgZTIud2luZG93Qml0cyB8fCAodDIud2luZG93Qml0cyArPSAzMiksIDE1IDwgdDIud2luZG93Qml0cyAmJiB0Mi53aW5kb3dCaXRzIDwgNDggJiYgMCA9PSAoMTUgJiB0Mi53aW5kb3dCaXRzKSAmJiAodDIud2luZG93Qml0cyB8PSAxNSksIHRoaXMuZXJyID0gMCwgdGhpcy5tc2cgPSBcIlwiLCB0aGlzLmVuZGVkID0gZmFsc2UsIHRoaXMuY2h1bmtzID0gW10sIHRoaXMuc3RybSA9IG5ldyBpKCksIHRoaXMuc3RybS5hdmFpbF9vdXQgPSAwO1xuICAgICAgICB2YXIgcjMgPSBjLmluZmxhdGVJbml0Mih0aGlzLnN0cm0sIHQyLndpbmRvd0JpdHMpO1xuICAgICAgICBpZiAocjMgIT09IG0uWl9PSykgdGhyb3cgbmV3IEVycm9yKG5bcjNdKTtcbiAgICAgICAgdGhpcy5oZWFkZXIgPSBuZXcgczIoKSwgYy5pbmZsYXRlR2V0SGVhZGVyKHRoaXMuc3RybSwgdGhpcy5oZWFkZXIpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gbyhlMiwgdDIpIHtcbiAgICAgICAgdmFyIHIzID0gbmV3IGEodDIpO1xuICAgICAgICBpZiAocjMucHVzaChlMiwgdHJ1ZSksIHIzLmVycikgdGhyb3cgcjMubXNnIHx8IG5bcjMuZXJyXTtcbiAgICAgICAgcmV0dXJuIHIzLnJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGEucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgdmFyIHIzLCBuMiwgaTIsIHMzLCBhMiwgbzIsIGggPSB0aGlzLnN0cm0sIHUgPSB0aGlzLm9wdGlvbnMuY2h1bmtTaXplLCBsID0gdGhpcy5vcHRpb25zLmRpY3Rpb25hcnksIGYyID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmVuZGVkKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIG4yID0gdDIgPT09IH5+dDIgPyB0MiA6IHRydWUgPT09IHQyID8gbS5aX0ZJTklTSCA6IG0uWl9OT19GTFVTSCwgXCJzdHJpbmdcIiA9PSB0eXBlb2YgZTIgPyBoLmlucHV0ID0gcC5iaW5zdHJpbmcyYnVmKGUyKSA6IFwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIiA9PT0gXy5jYWxsKGUyKSA/IGguaW5wdXQgPSBuZXcgVWludDhBcnJheShlMikgOiBoLmlucHV0ID0gZTIsIGgubmV4dF9pbiA9IDAsIGguYXZhaWxfaW4gPSBoLmlucHV0Lmxlbmd0aDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmICgwID09PSBoLmF2YWlsX291dCAmJiAoaC5vdXRwdXQgPSBuZXcgZC5CdWY4KHUpLCBoLm5leHRfb3V0ID0gMCwgaC5hdmFpbF9vdXQgPSB1KSwgKHIzID0gYy5pbmZsYXRlKGgsIG0uWl9OT19GTFVTSCkpID09PSBtLlpfTkVFRF9ESUNUICYmIGwgJiYgKG8yID0gXCJzdHJpbmdcIiA9PSB0eXBlb2YgbCA/IHAuc3RyaW5nMmJ1ZihsKSA6IFwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIiA9PT0gXy5jYWxsKGwpID8gbmV3IFVpbnQ4QXJyYXkobCkgOiBsLCByMyA9IGMuaW5mbGF0ZVNldERpY3Rpb25hcnkodGhpcy5zdHJtLCBvMikpLCByMyA9PT0gbS5aX0JVRl9FUlJPUiAmJiB0cnVlID09PSBmMiAmJiAocjMgPSBtLlpfT0ssIGYyID0gZmFsc2UpLCByMyAhPT0gbS5aX1NUUkVBTV9FTkQgJiYgcjMgIT09IG0uWl9PSykgcmV0dXJuIHRoaXMub25FbmQocjMpLCAhKHRoaXMuZW5kZWQgPSB0cnVlKTtcbiAgICAgICAgICBoLm5leHRfb3V0ICYmICgwICE9PSBoLmF2YWlsX291dCAmJiByMyAhPT0gbS5aX1NUUkVBTV9FTkQgJiYgKDAgIT09IGguYXZhaWxfaW4gfHwgbjIgIT09IG0uWl9GSU5JU0ggJiYgbjIgIT09IG0uWl9TWU5DX0ZMVVNIKSB8fCAoXCJzdHJpbmdcIiA9PT0gdGhpcy5vcHRpb25zLnRvID8gKGkyID0gcC51dGY4Ym9yZGVyKGgub3V0cHV0LCBoLm5leHRfb3V0KSwgczMgPSBoLm5leHRfb3V0IC0gaTIsIGEyID0gcC5idWYyc3RyaW5nKGgub3V0cHV0LCBpMiksIGgubmV4dF9vdXQgPSBzMywgaC5hdmFpbF9vdXQgPSB1IC0gczMsIHMzICYmIGQuYXJyYXlTZXQoaC5vdXRwdXQsIGgub3V0cHV0LCBpMiwgczMsIDApLCB0aGlzLm9uRGF0YShhMikpIDogdGhpcy5vbkRhdGEoZC5zaHJpbmtCdWYoaC5vdXRwdXQsIGgubmV4dF9vdXQpKSkpLCAwID09PSBoLmF2YWlsX2luICYmIDAgPT09IGguYXZhaWxfb3V0ICYmIChmMiA9IHRydWUpO1xuICAgICAgICB9IHdoaWxlICgoMCA8IGguYXZhaWxfaW4gfHwgMCA9PT0gaC5hdmFpbF9vdXQpICYmIHIzICE9PSBtLlpfU1RSRUFNX0VORCk7XG4gICAgICAgIHJldHVybiByMyA9PT0gbS5aX1NUUkVBTV9FTkQgJiYgKG4yID0gbS5aX0ZJTklTSCksIG4yID09PSBtLlpfRklOSVNIID8gKHIzID0gYy5pbmZsYXRlRW5kKHRoaXMuc3RybSksIHRoaXMub25FbmQocjMpLCB0aGlzLmVuZGVkID0gdHJ1ZSwgcjMgPT09IG0uWl9PSykgOiBuMiAhPT0gbS5aX1NZTkNfRkxVU0ggfHwgKHRoaXMub25FbmQobS5aX09LKSwgIShoLmF2YWlsX291dCA9IDApKTtcbiAgICAgIH0sIGEucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHRoaXMuY2h1bmtzLnB1c2goZTIpO1xuICAgICAgfSwgYS5wcm90b3R5cGUub25FbmQgPSBmdW5jdGlvbihlMikge1xuICAgICAgICBlMiA9PT0gbS5aX09LICYmIChcInN0cmluZ1wiID09PSB0aGlzLm9wdGlvbnMudG8gPyB0aGlzLnJlc3VsdCA9IHRoaXMuY2h1bmtzLmpvaW4oXCJcIikgOiB0aGlzLnJlc3VsdCA9IGQuZmxhdHRlbkNodW5rcyh0aGlzLmNodW5rcykpLCB0aGlzLmNodW5rcyA9IFtdLCB0aGlzLmVyciA9IGUyLCB0aGlzLm1zZyA9IHRoaXMuc3RybS5tc2c7XG4gICAgICB9LCByMi5JbmZsYXRlID0gYSwgcjIuaW5mbGF0ZSA9IG8sIHIyLmluZmxhdGVSYXcgPSBmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgcmV0dXJuICh0MiA9IHQyIHx8IHt9KS5yYXcgPSB0cnVlLCBvKGUyLCB0Mik7XG4gICAgICB9LCByMi51bmd6aXAgPSBvO1xuICAgIH0sIHsgXCIuL3V0aWxzL2NvbW1vblwiOiA0MSwgXCIuL3V0aWxzL3N0cmluZ3NcIjogNDIsIFwiLi96bGliL2NvbnN0YW50c1wiOiA0NCwgXCIuL3psaWIvZ3poZWFkZXJcIjogNDcsIFwiLi96bGliL2luZmxhdGVcIjogNDksIFwiLi96bGliL21lc3NhZ2VzXCI6IDUxLCBcIi4vemxpYi96c3RyZWFtXCI6IDUzIH1dLCA0MTogW2Z1bmN0aW9uKGUsIHQsIHIyKSB7XG4gICAgICB2YXIgbiA9IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFVpbnQ4QXJyYXkgJiYgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgVWludDE2QXJyYXkgJiYgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgSW50MzJBcnJheTtcbiAgICAgIHIyLmFzc2lnbiA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIGZvciAodmFyIHQyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsgdDIubGVuZ3RoOyApIHtcbiAgICAgICAgICB2YXIgcjMgPSB0Mi5zaGlmdCgpO1xuICAgICAgICAgIGlmIChyMykge1xuICAgICAgICAgICAgaWYgKFwib2JqZWN0XCIgIT0gdHlwZW9mIHIzKSB0aHJvdyBuZXcgVHlwZUVycm9yKHIzICsgXCJtdXN0IGJlIG5vbi1vYmplY3RcIik7XG4gICAgICAgICAgICBmb3IgKHZhciBuMiBpbiByMykgcjMuaGFzT3duUHJvcGVydHkobjIpICYmIChlMltuMl0gPSByM1tuMl0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZTI7XG4gICAgICB9LCByMi5zaHJpbmtCdWYgPSBmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgcmV0dXJuIGUyLmxlbmd0aCA9PT0gdDIgPyBlMiA6IGUyLnN1YmFycmF5ID8gZTIuc3ViYXJyYXkoMCwgdDIpIDogKGUyLmxlbmd0aCA9IHQyLCBlMik7XG4gICAgICB9O1xuICAgICAgdmFyIGkgPSB7IGFycmF5U2V0OiBmdW5jdGlvbihlMiwgdDIsIHIzLCBuMiwgaTIpIHtcbiAgICAgICAgaWYgKHQyLnN1YmFycmF5ICYmIGUyLnN1YmFycmF5KSBlMi5zZXQodDIuc3ViYXJyYXkocjMsIHIzICsgbjIpLCBpMik7XG4gICAgICAgIGVsc2UgZm9yICh2YXIgczMgPSAwOyBzMyA8IG4yOyBzMysrKSBlMltpMiArIHMzXSA9IHQyW3IzICsgczNdO1xuICAgICAgfSwgZmxhdHRlbkNodW5rczogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdmFyIHQyLCByMywgbjIsIGkyLCBzMywgYTtcbiAgICAgICAgZm9yICh0MiA9IG4yID0gMCwgcjMgPSBlMi5sZW5ndGg7IHQyIDwgcjM7IHQyKyspIG4yICs9IGUyW3QyXS5sZW5ndGg7XG4gICAgICAgIGZvciAoYSA9IG5ldyBVaW50OEFycmF5KG4yKSwgdDIgPSBpMiA9IDAsIHIzID0gZTIubGVuZ3RoOyB0MiA8IHIzOyB0MisrKSBzMyA9IGUyW3QyXSwgYS5zZXQoczMsIGkyKSwgaTIgKz0gczMubGVuZ3RoO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0gfSwgczIgPSB7IGFycmF5U2V0OiBmdW5jdGlvbihlMiwgdDIsIHIzLCBuMiwgaTIpIHtcbiAgICAgICAgZm9yICh2YXIgczMgPSAwOyBzMyA8IG4yOyBzMysrKSBlMltpMiArIHMzXSA9IHQyW3IzICsgczNdO1xuICAgICAgfSwgZmxhdHRlbkNodW5rczogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgcmV0dXJuIFtdLmNvbmNhdC5hcHBseShbXSwgZTIpO1xuICAgICAgfSB9O1xuICAgICAgcjIuc2V0VHlwZWQgPSBmdW5jdGlvbihlMikge1xuICAgICAgICBlMiA/IChyMi5CdWY4ID0gVWludDhBcnJheSwgcjIuQnVmMTYgPSBVaW50MTZBcnJheSwgcjIuQnVmMzIgPSBJbnQzMkFycmF5LCByMi5hc3NpZ24ocjIsIGkpKSA6IChyMi5CdWY4ID0gQXJyYXksIHIyLkJ1ZjE2ID0gQXJyYXksIHIyLkJ1ZjMyID0gQXJyYXksIHIyLmFzc2lnbihyMiwgczIpKTtcbiAgICAgIH0sIHIyLnNldFR5cGVkKG4pO1xuICAgIH0sIHt9XSwgNDI6IFtmdW5jdGlvbihlLCB0LCByMikge1xuICAgICAgdmFyIGggPSBlKFwiLi9jb21tb25cIiksIGkgPSB0cnVlLCBzMiA9IHRydWU7XG4gICAgICB0cnkge1xuICAgICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIFswXSk7XG4gICAgICB9IGNhdGNoIChlMikge1xuICAgICAgICBpID0gZmFsc2U7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KDEpKTtcbiAgICAgIH0gY2F0Y2ggKGUyKSB7XG4gICAgICAgIHMyID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciB1ID0gbmV3IGguQnVmOCgyNTYpLCBuID0gMDsgbiA8IDI1NjsgbisrKSB1W25dID0gMjUyIDw9IG4gPyA2IDogMjQ4IDw9IG4gPyA1IDogMjQwIDw9IG4gPyA0IDogMjI0IDw9IG4gPyAzIDogMTkyIDw9IG4gPyAyIDogMTtcbiAgICAgIGZ1bmN0aW9uIGwoZTIsIHQyKSB7XG4gICAgICAgIGlmICh0MiA8IDY1NTM3ICYmIChlMi5zdWJhcnJheSAmJiBzMiB8fCAhZTIuc3ViYXJyYXkgJiYgaSkpIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGguc2hyaW5rQnVmKGUyLCB0MikpO1xuICAgICAgICBmb3IgKHZhciByMyA9IFwiXCIsIG4yID0gMDsgbjIgPCB0MjsgbjIrKykgcjMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShlMltuMl0pO1xuICAgICAgICByZXR1cm4gcjM7XG4gICAgICB9XG4gICAgICB1WzI1NF0gPSB1WzI1NF0gPSAxLCByMi5zdHJpbmcyYnVmID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdmFyIHQyLCByMywgbjIsIGkyLCBzMywgYSA9IGUyLmxlbmd0aCwgbyA9IDA7XG4gICAgICAgIGZvciAoaTIgPSAwOyBpMiA8IGE7IGkyKyspIDU1Mjk2ID09ICg2NDUxMiAmIChyMyA9IGUyLmNoYXJDb2RlQXQoaTIpKSkgJiYgaTIgKyAxIDwgYSAmJiA1NjMyMCA9PSAoNjQ1MTIgJiAobjIgPSBlMi5jaGFyQ29kZUF0KGkyICsgMSkpKSAmJiAocjMgPSA2NTUzNiArIChyMyAtIDU1Mjk2IDw8IDEwKSArIChuMiAtIDU2MzIwKSwgaTIrKyksIG8gKz0gcjMgPCAxMjggPyAxIDogcjMgPCAyMDQ4ID8gMiA6IHIzIDwgNjU1MzYgPyAzIDogNDtcbiAgICAgICAgZm9yICh0MiA9IG5ldyBoLkJ1ZjgobyksIGkyID0gczMgPSAwOyBzMyA8IG87IGkyKyspIDU1Mjk2ID09ICg2NDUxMiAmIChyMyA9IGUyLmNoYXJDb2RlQXQoaTIpKSkgJiYgaTIgKyAxIDwgYSAmJiA1NjMyMCA9PSAoNjQ1MTIgJiAobjIgPSBlMi5jaGFyQ29kZUF0KGkyICsgMSkpKSAmJiAocjMgPSA2NTUzNiArIChyMyAtIDU1Mjk2IDw8IDEwKSArIChuMiAtIDU2MzIwKSwgaTIrKyksIHIzIDwgMTI4ID8gdDJbczMrK10gPSByMyA6IChyMyA8IDIwNDggPyB0MltzMysrXSA9IDE5MiB8IHIzID4+PiA2IDogKHIzIDwgNjU1MzYgPyB0MltzMysrXSA9IDIyNCB8IHIzID4+PiAxMiA6ICh0MltzMysrXSA9IDI0MCB8IHIzID4+PiAxOCwgdDJbczMrK10gPSAxMjggfCByMyA+Pj4gMTIgJiA2MyksIHQyW3MzKytdID0gMTI4IHwgcjMgPj4+IDYgJiA2MyksIHQyW3MzKytdID0gMTI4IHwgNjMgJiByMyk7XG4gICAgICAgIHJldHVybiB0MjtcbiAgICAgIH0sIHIyLmJ1ZjJiaW5zdHJpbmcgPSBmdW5jdGlvbihlMikge1xuICAgICAgICByZXR1cm4gbChlMiwgZTIubGVuZ3RoKTtcbiAgICAgIH0sIHIyLmJpbnN0cmluZzJidWYgPSBmdW5jdGlvbihlMikge1xuICAgICAgICBmb3IgKHZhciB0MiA9IG5ldyBoLkJ1ZjgoZTIubGVuZ3RoKSwgcjMgPSAwLCBuMiA9IHQyLmxlbmd0aDsgcjMgPCBuMjsgcjMrKykgdDJbcjNdID0gZTIuY2hhckNvZGVBdChyMyk7XG4gICAgICAgIHJldHVybiB0MjtcbiAgICAgIH0sIHIyLmJ1ZjJzdHJpbmcgPSBmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgdmFyIHIzLCBuMiwgaTIsIHMzLCBhID0gdDIgfHwgZTIubGVuZ3RoLCBvID0gbmV3IEFycmF5KDIgKiBhKTtcbiAgICAgICAgZm9yIChyMyA9IG4yID0gMDsgcjMgPCBhOyApIGlmICgoaTIgPSBlMltyMysrXSkgPCAxMjgpIG9bbjIrK10gPSBpMjtcbiAgICAgICAgZWxzZSBpZiAoNCA8IChzMyA9IHVbaTJdKSkgb1tuMisrXSA9IDY1NTMzLCByMyArPSBzMyAtIDE7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGZvciAoaTIgJj0gMiA9PT0gczMgPyAzMSA6IDMgPT09IHMzID8gMTUgOiA3OyAxIDwgczMgJiYgcjMgPCBhOyApIGkyID0gaTIgPDwgNiB8IDYzICYgZTJbcjMrK10sIHMzLS07XG4gICAgICAgICAgMSA8IHMzID8gb1tuMisrXSA9IDY1NTMzIDogaTIgPCA2NTUzNiA/IG9bbjIrK10gPSBpMiA6IChpMiAtPSA2NTUzNiwgb1tuMisrXSA9IDU1Mjk2IHwgaTIgPj4gMTAgJiAxMDIzLCBvW24yKytdID0gNTYzMjAgfCAxMDIzICYgaTIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsKG8sIG4yKTtcbiAgICAgIH0sIHIyLnV0Zjhib3JkZXIgPSBmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgdmFyIHIzO1xuICAgICAgICBmb3IgKCh0MiA9IHQyIHx8IGUyLmxlbmd0aCkgPiBlMi5sZW5ndGggJiYgKHQyID0gZTIubGVuZ3RoKSwgcjMgPSB0MiAtIDE7IDAgPD0gcjMgJiYgMTI4ID09ICgxOTIgJiBlMltyM10pOyApIHIzLS07XG4gICAgICAgIHJldHVybiByMyA8IDAgPyB0MiA6IDAgPT09IHIzID8gdDIgOiByMyArIHVbZTJbcjNdXSA+IHQyID8gcjMgOiB0MjtcbiAgICAgIH07XG4gICAgfSwgeyBcIi4vY29tbW9uXCI6IDQxIH1dLCA0MzogW2Z1bmN0aW9uKGUsIHQsIHIyKSB7XG4gICAgICB0LmV4cG9ydHMgPSBmdW5jdGlvbihlMiwgdDIsIHIzLCBuKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSA2NTUzNSAmIGUyIHwgMCwgczIgPSBlMiA+Pj4gMTYgJiA2NTUzNSB8IDAsIGEgPSAwOyAwICE9PSByMzsgKSB7XG4gICAgICAgICAgZm9yIChyMyAtPSBhID0gMmUzIDwgcjMgPyAyZTMgOiByMzsgczIgPSBzMiArIChpID0gaSArIHQyW24rK10gfCAwKSB8IDAsIC0tYTsgKSA7XG4gICAgICAgICAgaSAlPSA2NTUyMSwgczIgJT0gNjU1MjE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGkgfCBzMiA8PCAxNiB8IDA7XG4gICAgICB9O1xuICAgIH0sIHt9XSwgNDQ6IFtmdW5jdGlvbihlLCB0LCByMikge1xuICAgICAgdC5leHBvcnRzID0geyBaX05PX0ZMVVNIOiAwLCBaX1BBUlRJQUxfRkxVU0g6IDEsIFpfU1lOQ19GTFVTSDogMiwgWl9GVUxMX0ZMVVNIOiAzLCBaX0ZJTklTSDogNCwgWl9CTE9DSzogNSwgWl9UUkVFUzogNiwgWl9PSzogMCwgWl9TVFJFQU1fRU5EOiAxLCBaX05FRURfRElDVDogMiwgWl9FUlJOTzogLTEsIFpfU1RSRUFNX0VSUk9SOiAtMiwgWl9EQVRBX0VSUk9SOiAtMywgWl9CVUZfRVJST1I6IC01LCBaX05PX0NPTVBSRVNTSU9OOiAwLCBaX0JFU1RfU1BFRUQ6IDEsIFpfQkVTVF9DT01QUkVTU0lPTjogOSwgWl9ERUZBVUxUX0NPTVBSRVNTSU9OOiAtMSwgWl9GSUxURVJFRDogMSwgWl9IVUZGTUFOX09OTFk6IDIsIFpfUkxFOiAzLCBaX0ZJWEVEOiA0LCBaX0RFRkFVTFRfU1RSQVRFR1k6IDAsIFpfQklOQVJZOiAwLCBaX1RFWFQ6IDEsIFpfVU5LTk9XTjogMiwgWl9ERUZMQVRFRDogOCB9O1xuICAgIH0sIHt9XSwgNDU6IFtmdW5jdGlvbihlLCB0LCByMikge1xuICAgICAgdmFyIG8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZm9yICh2YXIgZTIsIHQyID0gW10sIHIzID0gMDsgcjMgPCAyNTY7IHIzKyspIHtcbiAgICAgICAgICBlMiA9IHIzO1xuICAgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgODsgbisrKSBlMiA9IDEgJiBlMiA/IDM5ODgyOTIzODQgXiBlMiA+Pj4gMSA6IGUyID4+PiAxO1xuICAgICAgICAgIHQyW3IzXSA9IGUyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0MjtcbiAgICAgIH0oKTtcbiAgICAgIHQuZXhwb3J0cyA9IGZ1bmN0aW9uKGUyLCB0MiwgcjMsIG4pIHtcbiAgICAgICAgdmFyIGkgPSBvLCBzMiA9IG4gKyByMztcbiAgICAgICAgZTIgXj0gLTE7XG4gICAgICAgIGZvciAodmFyIGEgPSBuOyBhIDwgczI7IGErKykgZTIgPSBlMiA+Pj4gOCBeIGlbMjU1ICYgKGUyIF4gdDJbYV0pXTtcbiAgICAgICAgcmV0dXJuIC0xIF4gZTI7XG4gICAgICB9O1xuICAgIH0sIHt9XSwgNDY6IFtmdW5jdGlvbihlLCB0LCByMikge1xuICAgICAgdmFyIGgsIGMgPSBlKFwiLi4vdXRpbHMvY29tbW9uXCIpLCB1ID0gZShcIi4vdHJlZXNcIiksIGQgPSBlKFwiLi9hZGxlcjMyXCIpLCBwID0gZShcIi4vY3JjMzJcIiksIG4gPSBlKFwiLi9tZXNzYWdlc1wiKSwgbCA9IDAsIGYyID0gNCwgbSA9IDAsIF8gPSAtMiwgZyA9IC0xLCBiID0gNCwgaSA9IDIsIHYgPSA4LCB5ID0gOSwgczIgPSAyODYsIGEgPSAzMCwgbyA9IDE5LCB3ID0gMiAqIHMyICsgMSwgayA9IDE1LCB4ID0gMywgUyA9IDI1OCwgeiA9IFMgKyB4ICsgMSwgQyA9IDQyLCBFID0gMTEzLCBBID0gMSwgSSA9IDIsIE8gPSAzLCBCID0gNDtcbiAgICAgIGZ1bmN0aW9uIFIyKGUyLCB0Mikge1xuICAgICAgICByZXR1cm4gZTIubXNnID0gblt0Ml0sIHQyO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gVChlMikge1xuICAgICAgICByZXR1cm4gKGUyIDw8IDEpIC0gKDQgPCBlMiA/IDkgOiAwKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIEQoZTIpIHtcbiAgICAgICAgZm9yICh2YXIgdDIgPSBlMi5sZW5ndGg7IDAgPD0gLS10MjsgKSBlMlt0Ml0gPSAwO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gRihlMikge1xuICAgICAgICB2YXIgdDIgPSBlMi5zdGF0ZSwgcjMgPSB0Mi5wZW5kaW5nO1xuICAgICAgICByMyA+IGUyLmF2YWlsX291dCAmJiAocjMgPSBlMi5hdmFpbF9vdXQpLCAwICE9PSByMyAmJiAoYy5hcnJheVNldChlMi5vdXRwdXQsIHQyLnBlbmRpbmdfYnVmLCB0Mi5wZW5kaW5nX291dCwgcjMsIGUyLm5leHRfb3V0KSwgZTIubmV4dF9vdXQgKz0gcjMsIHQyLnBlbmRpbmdfb3V0ICs9IHIzLCBlMi50b3RhbF9vdXQgKz0gcjMsIGUyLmF2YWlsX291dCAtPSByMywgdDIucGVuZGluZyAtPSByMywgMCA9PT0gdDIucGVuZGluZyAmJiAodDIucGVuZGluZ19vdXQgPSAwKSk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBOKGUyLCB0Mikge1xuICAgICAgICB1Ll90cl9mbHVzaF9ibG9jayhlMiwgMCA8PSBlMi5ibG9ja19zdGFydCA/IGUyLmJsb2NrX3N0YXJ0IDogLTEsIGUyLnN0cnN0YXJ0IC0gZTIuYmxvY2tfc3RhcnQsIHQyKSwgZTIuYmxvY2tfc3RhcnQgPSBlMi5zdHJzdGFydCwgRihlMi5zdHJtKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIFUoZTIsIHQyKSB7XG4gICAgICAgIGUyLnBlbmRpbmdfYnVmW2UyLnBlbmRpbmcrK10gPSB0MjtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIFAoZTIsIHQyKSB7XG4gICAgICAgIGUyLnBlbmRpbmdfYnVmW2UyLnBlbmRpbmcrK10gPSB0MiA+Pj4gOCAmIDI1NSwgZTIucGVuZGluZ19idWZbZTIucGVuZGluZysrXSA9IDI1NSAmIHQyO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gTChlMiwgdDIpIHtcbiAgICAgICAgdmFyIHIzLCBuMiwgaTIgPSBlMi5tYXhfY2hhaW5fbGVuZ3RoLCBzMyA9IGUyLnN0cnN0YXJ0LCBhMiA9IGUyLnByZXZfbGVuZ3RoLCBvMiA9IGUyLm5pY2VfbWF0Y2gsIGgyID0gZTIuc3Ryc3RhcnQgPiBlMi53X3NpemUgLSB6ID8gZTIuc3Ryc3RhcnQgLSAoZTIud19zaXplIC0geikgOiAwLCB1MiA9IGUyLndpbmRvdywgbDIgPSBlMi53X21hc2ssIGYzID0gZTIucHJldiwgYzIgPSBlMi5zdHJzdGFydCArIFMsIGQyID0gdTJbczMgKyBhMiAtIDFdLCBwMiA9IHUyW3MzICsgYTJdO1xuICAgICAgICBlMi5wcmV2X2xlbmd0aCA+PSBlMi5nb29kX21hdGNoICYmIChpMiA+Pj0gMiksIG8yID4gZTIubG9va2FoZWFkICYmIChvMiA9IGUyLmxvb2thaGVhZCk7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBpZiAodTJbKHIzID0gdDIpICsgYTJdID09PSBwMiAmJiB1MltyMyArIGEyIC0gMV0gPT09IGQyICYmIHUyW3IzXSA9PT0gdTJbczNdICYmIHUyWysrcjNdID09PSB1MltzMyArIDFdKSB7XG4gICAgICAgICAgICBzMyArPSAyLCByMysrO1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgfSB3aGlsZSAodTJbKytzM10gPT09IHUyWysrcjNdICYmIHUyWysrczNdID09PSB1MlsrK3IzXSAmJiB1MlsrK3MzXSA9PT0gdTJbKytyM10gJiYgdTJbKytzM10gPT09IHUyWysrcjNdICYmIHUyWysrczNdID09PSB1MlsrK3IzXSAmJiB1MlsrK3MzXSA9PT0gdTJbKytyM10gJiYgdTJbKytzM10gPT09IHUyWysrcjNdICYmIHUyWysrczNdID09PSB1MlsrK3IzXSAmJiBzMyA8IGMyKTtcbiAgICAgICAgICAgIGlmIChuMiA9IFMgLSAoYzIgLSBzMyksIHMzID0gYzIgLSBTLCBhMiA8IG4yKSB7XG4gICAgICAgICAgICAgIGlmIChlMi5tYXRjaF9zdGFydCA9IHQyLCBvMiA8PSAoYTIgPSBuMikpIGJyZWFrO1xuICAgICAgICAgICAgICBkMiA9IHUyW3MzICsgYTIgLSAxXSwgcDIgPSB1MltzMyArIGEyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKCh0MiA9IGYzW3QyICYgbDJdKSA+IGgyICYmIDAgIT0gLS1pMik7XG4gICAgICAgIHJldHVybiBhMiA8PSBlMi5sb29rYWhlYWQgPyBhMiA6IGUyLmxvb2thaGVhZDtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGooZTIpIHtcbiAgICAgICAgdmFyIHQyLCByMywgbjIsIGkyLCBzMywgYTIsIG8yLCBoMiwgdTIsIGwyLCBmMyA9IGUyLndfc2l6ZTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmIChpMiA9IGUyLndpbmRvd19zaXplIC0gZTIubG9va2FoZWFkIC0gZTIuc3Ryc3RhcnQsIGUyLnN0cnN0YXJ0ID49IGYzICsgKGYzIC0geikpIHtcbiAgICAgICAgICAgIGZvciAoYy5hcnJheVNldChlMi53aW5kb3csIGUyLndpbmRvdywgZjMsIGYzLCAwKSwgZTIubWF0Y2hfc3RhcnQgLT0gZjMsIGUyLnN0cnN0YXJ0IC09IGYzLCBlMi5ibG9ja19zdGFydCAtPSBmMywgdDIgPSByMyA9IGUyLmhhc2hfc2l6ZTsgbjIgPSBlMi5oZWFkWy0tdDJdLCBlMi5oZWFkW3QyXSA9IGYzIDw9IG4yID8gbjIgLSBmMyA6IDAsIC0tcjM7ICkgO1xuICAgICAgICAgICAgZm9yICh0MiA9IHIzID0gZjM7IG4yID0gZTIucHJldlstLXQyXSwgZTIucHJldlt0Ml0gPSBmMyA8PSBuMiA/IG4yIC0gZjMgOiAwLCAtLXIzOyApIDtcbiAgICAgICAgICAgIGkyICs9IGYzO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoMCA9PT0gZTIuc3RybS5hdmFpbF9pbikgYnJlYWs7XG4gICAgICAgICAgaWYgKGEyID0gZTIuc3RybSwgbzIgPSBlMi53aW5kb3csIGgyID0gZTIuc3Ryc3RhcnQgKyBlMi5sb29rYWhlYWQsIHUyID0gaTIsIGwyID0gdm9pZCAwLCBsMiA9IGEyLmF2YWlsX2luLCB1MiA8IGwyICYmIChsMiA9IHUyKSwgcjMgPSAwID09PSBsMiA/IDAgOiAoYTIuYXZhaWxfaW4gLT0gbDIsIGMuYXJyYXlTZXQobzIsIGEyLmlucHV0LCBhMi5uZXh0X2luLCBsMiwgaDIpLCAxID09PSBhMi5zdGF0ZS53cmFwID8gYTIuYWRsZXIgPSBkKGEyLmFkbGVyLCBvMiwgbDIsIGgyKSA6IDIgPT09IGEyLnN0YXRlLndyYXAgJiYgKGEyLmFkbGVyID0gcChhMi5hZGxlciwgbzIsIGwyLCBoMikpLCBhMi5uZXh0X2luICs9IGwyLCBhMi50b3RhbF9pbiArPSBsMiwgbDIpLCBlMi5sb29rYWhlYWQgKz0gcjMsIGUyLmxvb2thaGVhZCArIGUyLmluc2VydCA+PSB4KSBmb3IgKHMzID0gZTIuc3Ryc3RhcnQgLSBlMi5pbnNlcnQsIGUyLmluc19oID0gZTIud2luZG93W3MzXSwgZTIuaW5zX2ggPSAoZTIuaW5zX2ggPDwgZTIuaGFzaF9zaGlmdCBeIGUyLndpbmRvd1tzMyArIDFdKSAmIGUyLmhhc2hfbWFzazsgZTIuaW5zZXJ0ICYmIChlMi5pbnNfaCA9IChlMi5pbnNfaCA8PCBlMi5oYXNoX3NoaWZ0IF4gZTIud2luZG93W3MzICsgeCAtIDFdKSAmIGUyLmhhc2hfbWFzaywgZTIucHJldltzMyAmIGUyLndfbWFza10gPSBlMi5oZWFkW2UyLmluc19oXSwgZTIuaGVhZFtlMi5pbnNfaF0gPSBzMywgczMrKywgZTIuaW5zZXJ0LS0sICEoZTIubG9va2FoZWFkICsgZTIuaW5zZXJ0IDwgeCkpOyApIDtcbiAgICAgICAgfSB3aGlsZSAoZTIubG9va2FoZWFkIDwgeiAmJiAwICE9PSBlMi5zdHJtLmF2YWlsX2luKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIFooZTIsIHQyKSB7XG4gICAgICAgIGZvciAodmFyIHIzLCBuMjsgOyApIHtcbiAgICAgICAgICBpZiAoZTIubG9va2FoZWFkIDwgeikge1xuICAgICAgICAgICAgaWYgKGooZTIpLCBlMi5sb29rYWhlYWQgPCB6ICYmIHQyID09PSBsKSByZXR1cm4gQTtcbiAgICAgICAgICAgIGlmICgwID09PSBlMi5sb29rYWhlYWQpIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocjMgPSAwLCBlMi5sb29rYWhlYWQgPj0geCAmJiAoZTIuaW5zX2ggPSAoZTIuaW5zX2ggPDwgZTIuaGFzaF9zaGlmdCBeIGUyLndpbmRvd1tlMi5zdHJzdGFydCArIHggLSAxXSkgJiBlMi5oYXNoX21hc2ssIHIzID0gZTIucHJldltlMi5zdHJzdGFydCAmIGUyLndfbWFza10gPSBlMi5oZWFkW2UyLmluc19oXSwgZTIuaGVhZFtlMi5pbnNfaF0gPSBlMi5zdHJzdGFydCksIDAgIT09IHIzICYmIGUyLnN0cnN0YXJ0IC0gcjMgPD0gZTIud19zaXplIC0geiAmJiAoZTIubWF0Y2hfbGVuZ3RoID0gTChlMiwgcjMpKSwgZTIubWF0Y2hfbGVuZ3RoID49IHgpIGlmIChuMiA9IHUuX3RyX3RhbGx5KGUyLCBlMi5zdHJzdGFydCAtIGUyLm1hdGNoX3N0YXJ0LCBlMi5tYXRjaF9sZW5ndGggLSB4KSwgZTIubG9va2FoZWFkIC09IGUyLm1hdGNoX2xlbmd0aCwgZTIubWF0Y2hfbGVuZ3RoIDw9IGUyLm1heF9sYXp5X21hdGNoICYmIGUyLmxvb2thaGVhZCA+PSB4KSB7XG4gICAgICAgICAgICBmb3IgKGUyLm1hdGNoX2xlbmd0aC0tOyBlMi5zdHJzdGFydCsrLCBlMi5pbnNfaCA9IChlMi5pbnNfaCA8PCBlMi5oYXNoX3NoaWZ0IF4gZTIud2luZG93W2UyLnN0cnN0YXJ0ICsgeCAtIDFdKSAmIGUyLmhhc2hfbWFzaywgcjMgPSBlMi5wcmV2W2UyLnN0cnN0YXJ0ICYgZTIud19tYXNrXSA9IGUyLmhlYWRbZTIuaW5zX2hdLCBlMi5oZWFkW2UyLmluc19oXSA9IGUyLnN0cnN0YXJ0LCAwICE9IC0tZTIubWF0Y2hfbGVuZ3RoOyApIDtcbiAgICAgICAgICAgIGUyLnN0cnN0YXJ0Kys7XG4gICAgICAgICAgfSBlbHNlIGUyLnN0cnN0YXJ0ICs9IGUyLm1hdGNoX2xlbmd0aCwgZTIubWF0Y2hfbGVuZ3RoID0gMCwgZTIuaW5zX2ggPSBlMi53aW5kb3dbZTIuc3Ryc3RhcnRdLCBlMi5pbnNfaCA9IChlMi5pbnNfaCA8PCBlMi5oYXNoX3NoaWZ0IF4gZTIud2luZG93W2UyLnN0cnN0YXJ0ICsgMV0pICYgZTIuaGFzaF9tYXNrO1xuICAgICAgICAgIGVsc2UgbjIgPSB1Ll90cl90YWxseShlMiwgMCwgZTIud2luZG93W2UyLnN0cnN0YXJ0XSksIGUyLmxvb2thaGVhZC0tLCBlMi5zdHJzdGFydCsrO1xuICAgICAgICAgIGlmIChuMiAmJiAoTihlMiwgZmFsc2UpLCAwID09PSBlMi5zdHJtLmF2YWlsX291dCkpIHJldHVybiBBO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlMi5pbnNlcnQgPSBlMi5zdHJzdGFydCA8IHggLSAxID8gZTIuc3Ryc3RhcnQgOiB4IC0gMSwgdDIgPT09IGYyID8gKE4oZTIsIHRydWUpLCAwID09PSBlMi5zdHJtLmF2YWlsX291dCA/IE8gOiBCKSA6IGUyLmxhc3RfbGl0ICYmIChOKGUyLCBmYWxzZSksIDAgPT09IGUyLnN0cm0uYXZhaWxfb3V0KSA/IEEgOiBJO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gVyhlMiwgdDIpIHtcbiAgICAgICAgZm9yICh2YXIgcjMsIG4yLCBpMjsgOyApIHtcbiAgICAgICAgICBpZiAoZTIubG9va2FoZWFkIDwgeikge1xuICAgICAgICAgICAgaWYgKGooZTIpLCBlMi5sb29rYWhlYWQgPCB6ICYmIHQyID09PSBsKSByZXR1cm4gQTtcbiAgICAgICAgICAgIGlmICgwID09PSBlMi5sb29rYWhlYWQpIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocjMgPSAwLCBlMi5sb29rYWhlYWQgPj0geCAmJiAoZTIuaW5zX2ggPSAoZTIuaW5zX2ggPDwgZTIuaGFzaF9zaGlmdCBeIGUyLndpbmRvd1tlMi5zdHJzdGFydCArIHggLSAxXSkgJiBlMi5oYXNoX21hc2ssIHIzID0gZTIucHJldltlMi5zdHJzdGFydCAmIGUyLndfbWFza10gPSBlMi5oZWFkW2UyLmluc19oXSwgZTIuaGVhZFtlMi5pbnNfaF0gPSBlMi5zdHJzdGFydCksIGUyLnByZXZfbGVuZ3RoID0gZTIubWF0Y2hfbGVuZ3RoLCBlMi5wcmV2X21hdGNoID0gZTIubWF0Y2hfc3RhcnQsIGUyLm1hdGNoX2xlbmd0aCA9IHggLSAxLCAwICE9PSByMyAmJiBlMi5wcmV2X2xlbmd0aCA8IGUyLm1heF9sYXp5X21hdGNoICYmIGUyLnN0cnN0YXJ0IC0gcjMgPD0gZTIud19zaXplIC0geiAmJiAoZTIubWF0Y2hfbGVuZ3RoID0gTChlMiwgcjMpLCBlMi5tYXRjaF9sZW5ndGggPD0gNSAmJiAoMSA9PT0gZTIuc3RyYXRlZ3kgfHwgZTIubWF0Y2hfbGVuZ3RoID09PSB4ICYmIDQwOTYgPCBlMi5zdHJzdGFydCAtIGUyLm1hdGNoX3N0YXJ0KSAmJiAoZTIubWF0Y2hfbGVuZ3RoID0geCAtIDEpKSwgZTIucHJldl9sZW5ndGggPj0geCAmJiBlMi5tYXRjaF9sZW5ndGggPD0gZTIucHJldl9sZW5ndGgpIHtcbiAgICAgICAgICAgIGZvciAoaTIgPSBlMi5zdHJzdGFydCArIGUyLmxvb2thaGVhZCAtIHgsIG4yID0gdS5fdHJfdGFsbHkoZTIsIGUyLnN0cnN0YXJ0IC0gMSAtIGUyLnByZXZfbWF0Y2gsIGUyLnByZXZfbGVuZ3RoIC0geCksIGUyLmxvb2thaGVhZCAtPSBlMi5wcmV2X2xlbmd0aCAtIDEsIGUyLnByZXZfbGVuZ3RoIC09IDI7ICsrZTIuc3Ryc3RhcnQgPD0gaTIgJiYgKGUyLmluc19oID0gKGUyLmluc19oIDw8IGUyLmhhc2hfc2hpZnQgXiBlMi53aW5kb3dbZTIuc3Ryc3RhcnQgKyB4IC0gMV0pICYgZTIuaGFzaF9tYXNrLCByMyA9IGUyLnByZXZbZTIuc3Ryc3RhcnQgJiBlMi53X21hc2tdID0gZTIuaGVhZFtlMi5pbnNfaF0sIGUyLmhlYWRbZTIuaW5zX2hdID0gZTIuc3Ryc3RhcnQpLCAwICE9IC0tZTIucHJldl9sZW5ndGg7ICkgO1xuICAgICAgICAgICAgaWYgKGUyLm1hdGNoX2F2YWlsYWJsZSA9IDAsIGUyLm1hdGNoX2xlbmd0aCA9IHggLSAxLCBlMi5zdHJzdGFydCsrLCBuMiAmJiAoTihlMiwgZmFsc2UpLCAwID09PSBlMi5zdHJtLmF2YWlsX291dCkpIHJldHVybiBBO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZTIubWF0Y2hfYXZhaWxhYmxlKSB7XG4gICAgICAgICAgICBpZiAoKG4yID0gdS5fdHJfdGFsbHkoZTIsIDAsIGUyLndpbmRvd1tlMi5zdHJzdGFydCAtIDFdKSkgJiYgTihlMiwgZmFsc2UpLCBlMi5zdHJzdGFydCsrLCBlMi5sb29rYWhlYWQtLSwgMCA9PT0gZTIuc3RybS5hdmFpbF9vdXQpIHJldHVybiBBO1xuICAgICAgICAgIH0gZWxzZSBlMi5tYXRjaF9hdmFpbGFibGUgPSAxLCBlMi5zdHJzdGFydCsrLCBlMi5sb29rYWhlYWQtLTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZTIubWF0Y2hfYXZhaWxhYmxlICYmIChuMiA9IHUuX3RyX3RhbGx5KGUyLCAwLCBlMi53aW5kb3dbZTIuc3Ryc3RhcnQgLSAxXSksIGUyLm1hdGNoX2F2YWlsYWJsZSA9IDApLCBlMi5pbnNlcnQgPSBlMi5zdHJzdGFydCA8IHggLSAxID8gZTIuc3Ryc3RhcnQgOiB4IC0gMSwgdDIgPT09IGYyID8gKE4oZTIsIHRydWUpLCAwID09PSBlMi5zdHJtLmF2YWlsX291dCA/IE8gOiBCKSA6IGUyLmxhc3RfbGl0ICYmIChOKGUyLCBmYWxzZSksIDAgPT09IGUyLnN0cm0uYXZhaWxfb3V0KSA/IEEgOiBJO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gTShlMiwgdDIsIHIzLCBuMiwgaTIpIHtcbiAgICAgICAgdGhpcy5nb29kX2xlbmd0aCA9IGUyLCB0aGlzLm1heF9sYXp5ID0gdDIsIHRoaXMubmljZV9sZW5ndGggPSByMywgdGhpcy5tYXhfY2hhaW4gPSBuMiwgdGhpcy5mdW5jID0gaTI7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBIKCkge1xuICAgICAgICB0aGlzLnN0cm0gPSBudWxsLCB0aGlzLnN0YXR1cyA9IDAsIHRoaXMucGVuZGluZ19idWYgPSBudWxsLCB0aGlzLnBlbmRpbmdfYnVmX3NpemUgPSAwLCB0aGlzLnBlbmRpbmdfb3V0ID0gMCwgdGhpcy5wZW5kaW5nID0gMCwgdGhpcy53cmFwID0gMCwgdGhpcy5nemhlYWQgPSBudWxsLCB0aGlzLmd6aW5kZXggPSAwLCB0aGlzLm1ldGhvZCA9IHYsIHRoaXMubGFzdF9mbHVzaCA9IC0xLCB0aGlzLndfc2l6ZSA9IDAsIHRoaXMud19iaXRzID0gMCwgdGhpcy53X21hc2sgPSAwLCB0aGlzLndpbmRvdyA9IG51bGwsIHRoaXMud2luZG93X3NpemUgPSAwLCB0aGlzLnByZXYgPSBudWxsLCB0aGlzLmhlYWQgPSBudWxsLCB0aGlzLmluc19oID0gMCwgdGhpcy5oYXNoX3NpemUgPSAwLCB0aGlzLmhhc2hfYml0cyA9IDAsIHRoaXMuaGFzaF9tYXNrID0gMCwgdGhpcy5oYXNoX3NoaWZ0ID0gMCwgdGhpcy5ibG9ja19zdGFydCA9IDAsIHRoaXMubWF0Y2hfbGVuZ3RoID0gMCwgdGhpcy5wcmV2X21hdGNoID0gMCwgdGhpcy5tYXRjaF9hdmFpbGFibGUgPSAwLCB0aGlzLnN0cnN0YXJ0ID0gMCwgdGhpcy5tYXRjaF9zdGFydCA9IDAsIHRoaXMubG9va2FoZWFkID0gMCwgdGhpcy5wcmV2X2xlbmd0aCA9IDAsIHRoaXMubWF4X2NoYWluX2xlbmd0aCA9IDAsIHRoaXMubWF4X2xhenlfbWF0Y2ggPSAwLCB0aGlzLmxldmVsID0gMCwgdGhpcy5zdHJhdGVneSA9IDAsIHRoaXMuZ29vZF9tYXRjaCA9IDAsIHRoaXMubmljZV9tYXRjaCA9IDAsIHRoaXMuZHluX2x0cmVlID0gbmV3IGMuQnVmMTYoMiAqIHcpLCB0aGlzLmR5bl9kdHJlZSA9IG5ldyBjLkJ1ZjE2KDIgKiAoMiAqIGEgKyAxKSksIHRoaXMuYmxfdHJlZSA9IG5ldyBjLkJ1ZjE2KDIgKiAoMiAqIG8gKyAxKSksIEQodGhpcy5keW5fbHRyZWUpLCBEKHRoaXMuZHluX2R0cmVlKSwgRCh0aGlzLmJsX3RyZWUpLCB0aGlzLmxfZGVzYyA9IG51bGwsIHRoaXMuZF9kZXNjID0gbnVsbCwgdGhpcy5ibF9kZXNjID0gbnVsbCwgdGhpcy5ibF9jb3VudCA9IG5ldyBjLkJ1ZjE2KGsgKyAxKSwgdGhpcy5oZWFwID0gbmV3IGMuQnVmMTYoMiAqIHMyICsgMSksIEQodGhpcy5oZWFwKSwgdGhpcy5oZWFwX2xlbiA9IDAsIHRoaXMuaGVhcF9tYXggPSAwLCB0aGlzLmRlcHRoID0gbmV3IGMuQnVmMTYoMiAqIHMyICsgMSksIEQodGhpcy5kZXB0aCksIHRoaXMubF9idWYgPSAwLCB0aGlzLmxpdF9idWZzaXplID0gMCwgdGhpcy5sYXN0X2xpdCA9IDAsIHRoaXMuZF9idWYgPSAwLCB0aGlzLm9wdF9sZW4gPSAwLCB0aGlzLnN0YXRpY19sZW4gPSAwLCB0aGlzLm1hdGNoZXMgPSAwLCB0aGlzLmluc2VydCA9IDAsIHRoaXMuYmlfYnVmID0gMCwgdGhpcy5iaV92YWxpZCA9IDA7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBHKGUyKSB7XG4gICAgICAgIHZhciB0MjtcbiAgICAgICAgcmV0dXJuIGUyICYmIGUyLnN0YXRlID8gKGUyLnRvdGFsX2luID0gZTIudG90YWxfb3V0ID0gMCwgZTIuZGF0YV90eXBlID0gaSwgKHQyID0gZTIuc3RhdGUpLnBlbmRpbmcgPSAwLCB0Mi5wZW5kaW5nX291dCA9IDAsIHQyLndyYXAgPCAwICYmICh0Mi53cmFwID0gLXQyLndyYXApLCB0Mi5zdGF0dXMgPSB0Mi53cmFwID8gQyA6IEUsIGUyLmFkbGVyID0gMiA9PT0gdDIud3JhcCA/IDAgOiAxLCB0Mi5sYXN0X2ZsdXNoID0gbCwgdS5fdHJfaW5pdCh0MiksIG0pIDogUjIoZTIsIF8pO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gSzIoZTIpIHtcbiAgICAgICAgdmFyIHQyID0gRyhlMik7XG4gICAgICAgIHJldHVybiB0MiA9PT0gbSAmJiBmdW5jdGlvbihlMykge1xuICAgICAgICAgIGUzLndpbmRvd19zaXplID0gMiAqIGUzLndfc2l6ZSwgRChlMy5oZWFkKSwgZTMubWF4X2xhenlfbWF0Y2ggPSBoW2UzLmxldmVsXS5tYXhfbGF6eSwgZTMuZ29vZF9tYXRjaCA9IGhbZTMubGV2ZWxdLmdvb2RfbGVuZ3RoLCBlMy5uaWNlX21hdGNoID0gaFtlMy5sZXZlbF0ubmljZV9sZW5ndGgsIGUzLm1heF9jaGFpbl9sZW5ndGggPSBoW2UzLmxldmVsXS5tYXhfY2hhaW4sIGUzLnN0cnN0YXJ0ID0gMCwgZTMuYmxvY2tfc3RhcnQgPSAwLCBlMy5sb29rYWhlYWQgPSAwLCBlMy5pbnNlcnQgPSAwLCBlMy5tYXRjaF9sZW5ndGggPSBlMy5wcmV2X2xlbmd0aCA9IHggLSAxLCBlMy5tYXRjaF9hdmFpbGFibGUgPSAwLCBlMy5pbnNfaCA9IDA7XG4gICAgICAgIH0oZTIuc3RhdGUpLCB0MjtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIFkoZTIsIHQyLCByMywgbjIsIGkyLCBzMykge1xuICAgICAgICBpZiAoIWUyKSByZXR1cm4gXztcbiAgICAgICAgdmFyIGEyID0gMTtcbiAgICAgICAgaWYgKHQyID09PSBnICYmICh0MiA9IDYpLCBuMiA8IDAgPyAoYTIgPSAwLCBuMiA9IC1uMikgOiAxNSA8IG4yICYmIChhMiA9IDIsIG4yIC09IDE2KSwgaTIgPCAxIHx8IHkgPCBpMiB8fCByMyAhPT0gdiB8fCBuMiA8IDggfHwgMTUgPCBuMiB8fCB0MiA8IDAgfHwgOSA8IHQyIHx8IHMzIDwgMCB8fCBiIDwgczMpIHJldHVybiBSMihlMiwgXyk7XG4gICAgICAgIDggPT09IG4yICYmIChuMiA9IDkpO1xuICAgICAgICB2YXIgbzIgPSBuZXcgSCgpO1xuICAgICAgICByZXR1cm4gKGUyLnN0YXRlID0gbzIpLnN0cm0gPSBlMiwgbzIud3JhcCA9IGEyLCBvMi5nemhlYWQgPSBudWxsLCBvMi53X2JpdHMgPSBuMiwgbzIud19zaXplID0gMSA8PCBvMi53X2JpdHMsIG8yLndfbWFzayA9IG8yLndfc2l6ZSAtIDEsIG8yLmhhc2hfYml0cyA9IGkyICsgNywgbzIuaGFzaF9zaXplID0gMSA8PCBvMi5oYXNoX2JpdHMsIG8yLmhhc2hfbWFzayA9IG8yLmhhc2hfc2l6ZSAtIDEsIG8yLmhhc2hfc2hpZnQgPSB+figobzIuaGFzaF9iaXRzICsgeCAtIDEpIC8geCksIG8yLndpbmRvdyA9IG5ldyBjLkJ1ZjgoMiAqIG8yLndfc2l6ZSksIG8yLmhlYWQgPSBuZXcgYy5CdWYxNihvMi5oYXNoX3NpemUpLCBvMi5wcmV2ID0gbmV3IGMuQnVmMTYobzIud19zaXplKSwgbzIubGl0X2J1ZnNpemUgPSAxIDw8IGkyICsgNiwgbzIucGVuZGluZ19idWZfc2l6ZSA9IDQgKiBvMi5saXRfYnVmc2l6ZSwgbzIucGVuZGluZ19idWYgPSBuZXcgYy5CdWY4KG8yLnBlbmRpbmdfYnVmX3NpemUpLCBvMi5kX2J1ZiA9IDEgKiBvMi5saXRfYnVmc2l6ZSwgbzIubF9idWYgPSAzICogbzIubGl0X2J1ZnNpemUsIG8yLmxldmVsID0gdDIsIG8yLnN0cmF0ZWd5ID0gczMsIG8yLm1ldGhvZCA9IHIzLCBLMihlMik7XG4gICAgICB9XG4gICAgICBoID0gW25ldyBNKDAsIDAsIDAsIDAsIGZ1bmN0aW9uKGUyLCB0Mikge1xuICAgICAgICB2YXIgcjMgPSA2NTUzNTtcbiAgICAgICAgZm9yIChyMyA+IGUyLnBlbmRpbmdfYnVmX3NpemUgLSA1ICYmIChyMyA9IGUyLnBlbmRpbmdfYnVmX3NpemUgLSA1KTsgOyApIHtcbiAgICAgICAgICBpZiAoZTIubG9va2FoZWFkIDw9IDEpIHtcbiAgICAgICAgICAgIGlmIChqKGUyKSwgMCA9PT0gZTIubG9va2FoZWFkICYmIHQyID09PSBsKSByZXR1cm4gQTtcbiAgICAgICAgICAgIGlmICgwID09PSBlMi5sb29rYWhlYWQpIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlMi5zdHJzdGFydCArPSBlMi5sb29rYWhlYWQsIGUyLmxvb2thaGVhZCA9IDA7XG4gICAgICAgICAgdmFyIG4yID0gZTIuYmxvY2tfc3RhcnQgKyByMztcbiAgICAgICAgICBpZiAoKDAgPT09IGUyLnN0cnN0YXJ0IHx8IGUyLnN0cnN0YXJ0ID49IG4yKSAmJiAoZTIubG9va2FoZWFkID0gZTIuc3Ryc3RhcnQgLSBuMiwgZTIuc3Ryc3RhcnQgPSBuMiwgTihlMiwgZmFsc2UpLCAwID09PSBlMi5zdHJtLmF2YWlsX291dCkpIHJldHVybiBBO1xuICAgICAgICAgIGlmIChlMi5zdHJzdGFydCAtIGUyLmJsb2NrX3N0YXJ0ID49IGUyLndfc2l6ZSAtIHogJiYgKE4oZTIsIGZhbHNlKSwgMCA9PT0gZTIuc3RybS5hdmFpbF9vdXQpKSByZXR1cm4gQTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZTIuaW5zZXJ0ID0gMCwgdDIgPT09IGYyID8gKE4oZTIsIHRydWUpLCAwID09PSBlMi5zdHJtLmF2YWlsX291dCA/IE8gOiBCKSA6IChlMi5zdHJzdGFydCA+IGUyLmJsb2NrX3N0YXJ0ICYmIChOKGUyLCBmYWxzZSksIGUyLnN0cm0uYXZhaWxfb3V0KSwgQSk7XG4gICAgICB9KSwgbmV3IE0oNCwgNCwgOCwgNCwgWiksIG5ldyBNKDQsIDUsIDE2LCA4LCBaKSwgbmV3IE0oNCwgNiwgMzIsIDMyLCBaKSwgbmV3IE0oNCwgNCwgMTYsIDE2LCBXKSwgbmV3IE0oOCwgMTYsIDMyLCAzMiwgVyksIG5ldyBNKDgsIDE2LCAxMjgsIDEyOCwgVyksIG5ldyBNKDgsIDMyLCAxMjgsIDI1NiwgVyksIG5ldyBNKDMyLCAxMjgsIDI1OCwgMTAyNCwgVyksIG5ldyBNKDMyLCAyNTgsIDI1OCwgNDA5NiwgVyldLCByMi5kZWZsYXRlSW5pdCA9IGZ1bmN0aW9uKGUyLCB0Mikge1xuICAgICAgICByZXR1cm4gWShlMiwgdDIsIHYsIDE1LCA4LCAwKTtcbiAgICAgIH0sIHIyLmRlZmxhdGVJbml0MiA9IFksIHIyLmRlZmxhdGVSZXNldCA9IEsyLCByMi5kZWZsYXRlUmVzZXRLZWVwID0gRywgcjIuZGVmbGF0ZVNldEhlYWRlciA9IGZ1bmN0aW9uKGUyLCB0Mikge1xuICAgICAgICByZXR1cm4gZTIgJiYgZTIuc3RhdGUgPyAyICE9PSBlMi5zdGF0ZS53cmFwID8gXyA6IChlMi5zdGF0ZS5nemhlYWQgPSB0MiwgbSkgOiBfO1xuICAgICAgfSwgcjIuZGVmbGF0ZSA9IGZ1bmN0aW9uKGUyLCB0Mikge1xuICAgICAgICB2YXIgcjMsIG4yLCBpMiwgczM7XG4gICAgICAgIGlmICghZTIgfHwgIWUyLnN0YXRlIHx8IDUgPCB0MiB8fCB0MiA8IDApIHJldHVybiBlMiA/IFIyKGUyLCBfKSA6IF87XG4gICAgICAgIGlmIChuMiA9IGUyLnN0YXRlLCAhZTIub3V0cHV0IHx8ICFlMi5pbnB1dCAmJiAwICE9PSBlMi5hdmFpbF9pbiB8fCA2NjYgPT09IG4yLnN0YXR1cyAmJiB0MiAhPT0gZjIpIHJldHVybiBSMihlMiwgMCA9PT0gZTIuYXZhaWxfb3V0ID8gLTUgOiBfKTtcbiAgICAgICAgaWYgKG4yLnN0cm0gPSBlMiwgcjMgPSBuMi5sYXN0X2ZsdXNoLCBuMi5sYXN0X2ZsdXNoID0gdDIsIG4yLnN0YXR1cyA9PT0gQykgaWYgKDIgPT09IG4yLndyYXApIGUyLmFkbGVyID0gMCwgVShuMiwgMzEpLCBVKG4yLCAxMzkpLCBVKG4yLCA4KSwgbjIuZ3poZWFkID8gKFUobjIsIChuMi5nemhlYWQudGV4dCA/IDEgOiAwKSArIChuMi5nemhlYWQuaGNyYyA/IDIgOiAwKSArIChuMi5nemhlYWQuZXh0cmEgPyA0IDogMCkgKyAobjIuZ3poZWFkLm5hbWUgPyA4IDogMCkgKyAobjIuZ3poZWFkLmNvbW1lbnQgPyAxNiA6IDApKSwgVShuMiwgMjU1ICYgbjIuZ3poZWFkLnRpbWUpLCBVKG4yLCBuMi5nemhlYWQudGltZSA+PiA4ICYgMjU1KSwgVShuMiwgbjIuZ3poZWFkLnRpbWUgPj4gMTYgJiAyNTUpLCBVKG4yLCBuMi5nemhlYWQudGltZSA+PiAyNCAmIDI1NSksIFUobjIsIDkgPT09IG4yLmxldmVsID8gMiA6IDIgPD0gbjIuc3RyYXRlZ3kgfHwgbjIubGV2ZWwgPCAyID8gNCA6IDApLCBVKG4yLCAyNTUgJiBuMi5nemhlYWQub3MpLCBuMi5nemhlYWQuZXh0cmEgJiYgbjIuZ3poZWFkLmV4dHJhLmxlbmd0aCAmJiAoVShuMiwgMjU1ICYgbjIuZ3poZWFkLmV4dHJhLmxlbmd0aCksIFUobjIsIG4yLmd6aGVhZC5leHRyYS5sZW5ndGggPj4gOCAmIDI1NSkpLCBuMi5nemhlYWQuaGNyYyAmJiAoZTIuYWRsZXIgPSBwKGUyLmFkbGVyLCBuMi5wZW5kaW5nX2J1ZiwgbjIucGVuZGluZywgMCkpLCBuMi5nemluZGV4ID0gMCwgbjIuc3RhdHVzID0gNjkpIDogKFUobjIsIDApLCBVKG4yLCAwKSwgVShuMiwgMCksIFUobjIsIDApLCBVKG4yLCAwKSwgVShuMiwgOSA9PT0gbjIubGV2ZWwgPyAyIDogMiA8PSBuMi5zdHJhdGVneSB8fCBuMi5sZXZlbCA8IDIgPyA0IDogMCksIFUobjIsIDMpLCBuMi5zdGF0dXMgPSBFKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFyIGEyID0gdiArIChuMi53X2JpdHMgLSA4IDw8IDQpIDw8IDg7XG4gICAgICAgICAgYTIgfD0gKDIgPD0gbjIuc3RyYXRlZ3kgfHwgbjIubGV2ZWwgPCAyID8gMCA6IG4yLmxldmVsIDwgNiA/IDEgOiA2ID09PSBuMi5sZXZlbCA/IDIgOiAzKSA8PCA2LCAwICE9PSBuMi5zdHJzdGFydCAmJiAoYTIgfD0gMzIpLCBhMiArPSAzMSAtIGEyICUgMzEsIG4yLnN0YXR1cyA9IEUsIFAobjIsIGEyKSwgMCAhPT0gbjIuc3Ryc3RhcnQgJiYgKFAobjIsIGUyLmFkbGVyID4+PiAxNiksIFAobjIsIDY1NTM1ICYgZTIuYWRsZXIpKSwgZTIuYWRsZXIgPSAxO1xuICAgICAgICB9XG4gICAgICAgIGlmICg2OSA9PT0gbjIuc3RhdHVzKSBpZiAobjIuZ3poZWFkLmV4dHJhKSB7XG4gICAgICAgICAgZm9yIChpMiA9IG4yLnBlbmRpbmc7IG4yLmd6aW5kZXggPCAoNjU1MzUgJiBuMi5nemhlYWQuZXh0cmEubGVuZ3RoKSAmJiAobjIucGVuZGluZyAhPT0gbjIucGVuZGluZ19idWZfc2l6ZSB8fCAobjIuZ3poZWFkLmhjcmMgJiYgbjIucGVuZGluZyA+IGkyICYmIChlMi5hZGxlciA9IHAoZTIuYWRsZXIsIG4yLnBlbmRpbmdfYnVmLCBuMi5wZW5kaW5nIC0gaTIsIGkyKSksIEYoZTIpLCBpMiA9IG4yLnBlbmRpbmcsIG4yLnBlbmRpbmcgIT09IG4yLnBlbmRpbmdfYnVmX3NpemUpKTsgKSBVKG4yLCAyNTUgJiBuMi5nemhlYWQuZXh0cmFbbjIuZ3ppbmRleF0pLCBuMi5nemluZGV4Kys7XG4gICAgICAgICAgbjIuZ3poZWFkLmhjcmMgJiYgbjIucGVuZGluZyA+IGkyICYmIChlMi5hZGxlciA9IHAoZTIuYWRsZXIsIG4yLnBlbmRpbmdfYnVmLCBuMi5wZW5kaW5nIC0gaTIsIGkyKSksIG4yLmd6aW5kZXggPT09IG4yLmd6aGVhZC5leHRyYS5sZW5ndGggJiYgKG4yLmd6aW5kZXggPSAwLCBuMi5zdGF0dXMgPSA3Myk7XG4gICAgICAgIH0gZWxzZSBuMi5zdGF0dXMgPSA3MztcbiAgICAgICAgaWYgKDczID09PSBuMi5zdGF0dXMpIGlmIChuMi5nemhlYWQubmFtZSkge1xuICAgICAgICAgIGkyID0gbjIucGVuZGluZztcbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAobjIucGVuZGluZyA9PT0gbjIucGVuZGluZ19idWZfc2l6ZSAmJiAobjIuZ3poZWFkLmhjcmMgJiYgbjIucGVuZGluZyA+IGkyICYmIChlMi5hZGxlciA9IHAoZTIuYWRsZXIsIG4yLnBlbmRpbmdfYnVmLCBuMi5wZW5kaW5nIC0gaTIsIGkyKSksIEYoZTIpLCBpMiA9IG4yLnBlbmRpbmcsIG4yLnBlbmRpbmcgPT09IG4yLnBlbmRpbmdfYnVmX3NpemUpKSB7XG4gICAgICAgICAgICAgIHMzID0gMTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzMyA9IG4yLmd6aW5kZXggPCBuMi5nemhlYWQubmFtZS5sZW5ndGggPyAyNTUgJiBuMi5nemhlYWQubmFtZS5jaGFyQ29kZUF0KG4yLmd6aW5kZXgrKykgOiAwLCBVKG4yLCBzMyk7XG4gICAgICAgICAgfSB3aGlsZSAoMCAhPT0gczMpO1xuICAgICAgICAgIG4yLmd6aGVhZC5oY3JjICYmIG4yLnBlbmRpbmcgPiBpMiAmJiAoZTIuYWRsZXIgPSBwKGUyLmFkbGVyLCBuMi5wZW5kaW5nX2J1ZiwgbjIucGVuZGluZyAtIGkyLCBpMikpLCAwID09PSBzMyAmJiAobjIuZ3ppbmRleCA9IDAsIG4yLnN0YXR1cyA9IDkxKTtcbiAgICAgICAgfSBlbHNlIG4yLnN0YXR1cyA9IDkxO1xuICAgICAgICBpZiAoOTEgPT09IG4yLnN0YXR1cykgaWYgKG4yLmd6aGVhZC5jb21tZW50KSB7XG4gICAgICAgICAgaTIgPSBuMi5wZW5kaW5nO1xuICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmIChuMi5wZW5kaW5nID09PSBuMi5wZW5kaW5nX2J1Zl9zaXplICYmIChuMi5nemhlYWQuaGNyYyAmJiBuMi5wZW5kaW5nID4gaTIgJiYgKGUyLmFkbGVyID0gcChlMi5hZGxlciwgbjIucGVuZGluZ19idWYsIG4yLnBlbmRpbmcgLSBpMiwgaTIpKSwgRihlMiksIGkyID0gbjIucGVuZGluZywgbjIucGVuZGluZyA9PT0gbjIucGVuZGluZ19idWZfc2l6ZSkpIHtcbiAgICAgICAgICAgICAgczMgPSAxO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHMzID0gbjIuZ3ppbmRleCA8IG4yLmd6aGVhZC5jb21tZW50Lmxlbmd0aCA/IDI1NSAmIG4yLmd6aGVhZC5jb21tZW50LmNoYXJDb2RlQXQobjIuZ3ppbmRleCsrKSA6IDAsIFUobjIsIHMzKTtcbiAgICAgICAgICB9IHdoaWxlICgwICE9PSBzMyk7XG4gICAgICAgICAgbjIuZ3poZWFkLmhjcmMgJiYgbjIucGVuZGluZyA+IGkyICYmIChlMi5hZGxlciA9IHAoZTIuYWRsZXIsIG4yLnBlbmRpbmdfYnVmLCBuMi5wZW5kaW5nIC0gaTIsIGkyKSksIDAgPT09IHMzICYmIChuMi5zdGF0dXMgPSAxMDMpO1xuICAgICAgICB9IGVsc2UgbjIuc3RhdHVzID0gMTAzO1xuICAgICAgICBpZiAoMTAzID09PSBuMi5zdGF0dXMgJiYgKG4yLmd6aGVhZC5oY3JjID8gKG4yLnBlbmRpbmcgKyAyID4gbjIucGVuZGluZ19idWZfc2l6ZSAmJiBGKGUyKSwgbjIucGVuZGluZyArIDIgPD0gbjIucGVuZGluZ19idWZfc2l6ZSAmJiAoVShuMiwgMjU1ICYgZTIuYWRsZXIpLCBVKG4yLCBlMi5hZGxlciA+PiA4ICYgMjU1KSwgZTIuYWRsZXIgPSAwLCBuMi5zdGF0dXMgPSBFKSkgOiBuMi5zdGF0dXMgPSBFKSwgMCAhPT0gbjIucGVuZGluZykge1xuICAgICAgICAgIGlmIChGKGUyKSwgMCA9PT0gZTIuYXZhaWxfb3V0KSByZXR1cm4gbjIubGFzdF9mbHVzaCA9IC0xLCBtO1xuICAgICAgICB9IGVsc2UgaWYgKDAgPT09IGUyLmF2YWlsX2luICYmIFQodDIpIDw9IFQocjMpICYmIHQyICE9PSBmMikgcmV0dXJuIFIyKGUyLCAtNSk7XG4gICAgICAgIGlmICg2NjYgPT09IG4yLnN0YXR1cyAmJiAwICE9PSBlMi5hdmFpbF9pbikgcmV0dXJuIFIyKGUyLCAtNSk7XG4gICAgICAgIGlmICgwICE9PSBlMi5hdmFpbF9pbiB8fCAwICE9PSBuMi5sb29rYWhlYWQgfHwgdDIgIT09IGwgJiYgNjY2ICE9PSBuMi5zdGF0dXMpIHtcbiAgICAgICAgICB2YXIgbzIgPSAyID09PSBuMi5zdHJhdGVneSA/IGZ1bmN0aW9uKGUzLCB0Mykge1xuICAgICAgICAgICAgZm9yICh2YXIgcjQ7IDsgKSB7XG4gICAgICAgICAgICAgIGlmICgwID09PSBlMy5sb29rYWhlYWQgJiYgKGooZTMpLCAwID09PSBlMy5sb29rYWhlYWQpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHQzID09PSBsKSByZXR1cm4gQTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoZTMubWF0Y2hfbGVuZ3RoID0gMCwgcjQgPSB1Ll90cl90YWxseShlMywgMCwgZTMud2luZG93W2UzLnN0cnN0YXJ0XSksIGUzLmxvb2thaGVhZC0tLCBlMy5zdHJzdGFydCsrLCByNCAmJiAoTihlMywgZmFsc2UpLCAwID09PSBlMy5zdHJtLmF2YWlsX291dCkpIHJldHVybiBBO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGUzLmluc2VydCA9IDAsIHQzID09PSBmMiA/IChOKGUzLCB0cnVlKSwgMCA9PT0gZTMuc3RybS5hdmFpbF9vdXQgPyBPIDogQikgOiBlMy5sYXN0X2xpdCAmJiAoTihlMywgZmFsc2UpLCAwID09PSBlMy5zdHJtLmF2YWlsX291dCkgPyBBIDogSTtcbiAgICAgICAgICB9KG4yLCB0MikgOiAzID09PSBuMi5zdHJhdGVneSA/IGZ1bmN0aW9uKGUzLCB0Mykge1xuICAgICAgICAgICAgZm9yICh2YXIgcjQsIG4zLCBpMywgczQsIGEzID0gZTMud2luZG93OyA7ICkge1xuICAgICAgICAgICAgICBpZiAoZTMubG9va2FoZWFkIDw9IFMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaihlMyksIGUzLmxvb2thaGVhZCA8PSBTICYmIHQzID09PSBsKSByZXR1cm4gQTtcbiAgICAgICAgICAgICAgICBpZiAoMCA9PT0gZTMubG9va2FoZWFkKSBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoZTMubWF0Y2hfbGVuZ3RoID0gMCwgZTMubG9va2FoZWFkID49IHggJiYgMCA8IGUzLnN0cnN0YXJ0ICYmIChuMyA9IGEzW2kzID0gZTMuc3Ryc3RhcnQgLSAxXSkgPT09IGEzWysraTNdICYmIG4zID09PSBhM1srK2kzXSAmJiBuMyA9PT0gYTNbKytpM10pIHtcbiAgICAgICAgICAgICAgICBzNCA9IGUzLnN0cnN0YXJ0ICsgUztcbiAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgfSB3aGlsZSAobjMgPT09IGEzWysraTNdICYmIG4zID09PSBhM1srK2kzXSAmJiBuMyA9PT0gYTNbKytpM10gJiYgbjMgPT09IGEzWysraTNdICYmIG4zID09PSBhM1srK2kzXSAmJiBuMyA9PT0gYTNbKytpM10gJiYgbjMgPT09IGEzWysraTNdICYmIG4zID09PSBhM1srK2kzXSAmJiBpMyA8IHM0KTtcbiAgICAgICAgICAgICAgICBlMy5tYXRjaF9sZW5ndGggPSBTIC0gKHM0IC0gaTMpLCBlMy5tYXRjaF9sZW5ndGggPiBlMy5sb29rYWhlYWQgJiYgKGUzLm1hdGNoX2xlbmd0aCA9IGUzLmxvb2thaGVhZCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGUzLm1hdGNoX2xlbmd0aCA+PSB4ID8gKHI0ID0gdS5fdHJfdGFsbHkoZTMsIDEsIGUzLm1hdGNoX2xlbmd0aCAtIHgpLCBlMy5sb29rYWhlYWQgLT0gZTMubWF0Y2hfbGVuZ3RoLCBlMy5zdHJzdGFydCArPSBlMy5tYXRjaF9sZW5ndGgsIGUzLm1hdGNoX2xlbmd0aCA9IDApIDogKHI0ID0gdS5fdHJfdGFsbHkoZTMsIDAsIGUzLndpbmRvd1tlMy5zdHJzdGFydF0pLCBlMy5sb29rYWhlYWQtLSwgZTMuc3Ryc3RhcnQrKyksIHI0ICYmIChOKGUzLCBmYWxzZSksIDAgPT09IGUzLnN0cm0uYXZhaWxfb3V0KSkgcmV0dXJuIEE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZTMuaW5zZXJ0ID0gMCwgdDMgPT09IGYyID8gKE4oZTMsIHRydWUpLCAwID09PSBlMy5zdHJtLmF2YWlsX291dCA/IE8gOiBCKSA6IGUzLmxhc3RfbGl0ICYmIChOKGUzLCBmYWxzZSksIDAgPT09IGUzLnN0cm0uYXZhaWxfb3V0KSA/IEEgOiBJO1xuICAgICAgICAgIH0objIsIHQyKSA6IGhbbjIubGV2ZWxdLmZ1bmMobjIsIHQyKTtcbiAgICAgICAgICBpZiAobzIgIT09IE8gJiYgbzIgIT09IEIgfHwgKG4yLnN0YXR1cyA9IDY2NiksIG8yID09PSBBIHx8IG8yID09PSBPKSByZXR1cm4gMCA9PT0gZTIuYXZhaWxfb3V0ICYmIChuMi5sYXN0X2ZsdXNoID0gLTEpLCBtO1xuICAgICAgICAgIGlmIChvMiA9PT0gSSAmJiAoMSA9PT0gdDIgPyB1Ll90cl9hbGlnbihuMikgOiA1ICE9PSB0MiAmJiAodS5fdHJfc3RvcmVkX2Jsb2NrKG4yLCAwLCAwLCBmYWxzZSksIDMgPT09IHQyICYmIChEKG4yLmhlYWQpLCAwID09PSBuMi5sb29rYWhlYWQgJiYgKG4yLnN0cnN0YXJ0ID0gMCwgbjIuYmxvY2tfc3RhcnQgPSAwLCBuMi5pbnNlcnQgPSAwKSkpLCBGKGUyKSwgMCA9PT0gZTIuYXZhaWxfb3V0KSkgcmV0dXJuIG4yLmxhc3RfZmx1c2ggPSAtMSwgbTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDIgIT09IGYyID8gbSA6IG4yLndyYXAgPD0gMCA/IDEgOiAoMiA9PT0gbjIud3JhcCA/IChVKG4yLCAyNTUgJiBlMi5hZGxlciksIFUobjIsIGUyLmFkbGVyID4+IDggJiAyNTUpLCBVKG4yLCBlMi5hZGxlciA+PiAxNiAmIDI1NSksIFUobjIsIGUyLmFkbGVyID4+IDI0ICYgMjU1KSwgVShuMiwgMjU1ICYgZTIudG90YWxfaW4pLCBVKG4yLCBlMi50b3RhbF9pbiA+PiA4ICYgMjU1KSwgVShuMiwgZTIudG90YWxfaW4gPj4gMTYgJiAyNTUpLCBVKG4yLCBlMi50b3RhbF9pbiA+PiAyNCAmIDI1NSkpIDogKFAobjIsIGUyLmFkbGVyID4+PiAxNiksIFAobjIsIDY1NTM1ICYgZTIuYWRsZXIpKSwgRihlMiksIDAgPCBuMi53cmFwICYmIChuMi53cmFwID0gLW4yLndyYXApLCAwICE9PSBuMi5wZW5kaW5nID8gbSA6IDEpO1xuICAgICAgfSwgcjIuZGVmbGF0ZUVuZCA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHZhciB0MjtcbiAgICAgICAgcmV0dXJuIGUyICYmIGUyLnN0YXRlID8gKHQyID0gZTIuc3RhdGUuc3RhdHVzKSAhPT0gQyAmJiA2OSAhPT0gdDIgJiYgNzMgIT09IHQyICYmIDkxICE9PSB0MiAmJiAxMDMgIT09IHQyICYmIHQyICE9PSBFICYmIDY2NiAhPT0gdDIgPyBSMihlMiwgXykgOiAoZTIuc3RhdGUgPSBudWxsLCB0MiA9PT0gRSA/IFIyKGUyLCAtMykgOiBtKSA6IF87XG4gICAgICB9LCByMi5kZWZsYXRlU2V0RGljdGlvbmFyeSA9IGZ1bmN0aW9uKGUyLCB0Mikge1xuICAgICAgICB2YXIgcjMsIG4yLCBpMiwgczMsIGEyLCBvMiwgaDIsIHUyLCBsMiA9IHQyLmxlbmd0aDtcbiAgICAgICAgaWYgKCFlMiB8fCAhZTIuc3RhdGUpIHJldHVybiBfO1xuICAgICAgICBpZiAoMiA9PT0gKHMzID0gKHIzID0gZTIuc3RhdGUpLndyYXApIHx8IDEgPT09IHMzICYmIHIzLnN0YXR1cyAhPT0gQyB8fCByMy5sb29rYWhlYWQpIHJldHVybiBfO1xuICAgICAgICBmb3IgKDEgPT09IHMzICYmIChlMi5hZGxlciA9IGQoZTIuYWRsZXIsIHQyLCBsMiwgMCkpLCByMy53cmFwID0gMCwgbDIgPj0gcjMud19zaXplICYmICgwID09PSBzMyAmJiAoRChyMy5oZWFkKSwgcjMuc3Ryc3RhcnQgPSAwLCByMy5ibG9ja19zdGFydCA9IDAsIHIzLmluc2VydCA9IDApLCB1MiA9IG5ldyBjLkJ1ZjgocjMud19zaXplKSwgYy5hcnJheVNldCh1MiwgdDIsIGwyIC0gcjMud19zaXplLCByMy53X3NpemUsIDApLCB0MiA9IHUyLCBsMiA9IHIzLndfc2l6ZSksIGEyID0gZTIuYXZhaWxfaW4sIG8yID0gZTIubmV4dF9pbiwgaDIgPSBlMi5pbnB1dCwgZTIuYXZhaWxfaW4gPSBsMiwgZTIubmV4dF9pbiA9IDAsIGUyLmlucHV0ID0gdDIsIGoocjMpOyByMy5sb29rYWhlYWQgPj0geDsgKSB7XG4gICAgICAgICAgZm9yIChuMiA9IHIzLnN0cnN0YXJ0LCBpMiA9IHIzLmxvb2thaGVhZCAtICh4IC0gMSk7IHIzLmluc19oID0gKHIzLmluc19oIDw8IHIzLmhhc2hfc2hpZnQgXiByMy53aW5kb3dbbjIgKyB4IC0gMV0pICYgcjMuaGFzaF9tYXNrLCByMy5wcmV2W24yICYgcjMud19tYXNrXSA9IHIzLmhlYWRbcjMuaW5zX2hdLCByMy5oZWFkW3IzLmluc19oXSA9IG4yLCBuMisrLCAtLWkyOyApIDtcbiAgICAgICAgICByMy5zdHJzdGFydCA9IG4yLCByMy5sb29rYWhlYWQgPSB4IC0gMSwgaihyMyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHIzLnN0cnN0YXJ0ICs9IHIzLmxvb2thaGVhZCwgcjMuYmxvY2tfc3RhcnQgPSByMy5zdHJzdGFydCwgcjMuaW5zZXJ0ID0gcjMubG9va2FoZWFkLCByMy5sb29rYWhlYWQgPSAwLCByMy5tYXRjaF9sZW5ndGggPSByMy5wcmV2X2xlbmd0aCA9IHggLSAxLCByMy5tYXRjaF9hdmFpbGFibGUgPSAwLCBlMi5uZXh0X2luID0gbzIsIGUyLmlucHV0ID0gaDIsIGUyLmF2YWlsX2luID0gYTIsIHIzLndyYXAgPSBzMywgbTtcbiAgICAgIH0sIHIyLmRlZmxhdGVJbmZvID0gXCJwYWtvIGRlZmxhdGUgKGZyb20gTm9kZWNhIHByb2plY3QpXCI7XG4gICAgfSwgeyBcIi4uL3V0aWxzL2NvbW1vblwiOiA0MSwgXCIuL2FkbGVyMzJcIjogNDMsIFwiLi9jcmMzMlwiOiA0NSwgXCIuL21lc3NhZ2VzXCI6IDUxLCBcIi4vdHJlZXNcIjogNTIgfV0sIDQ3OiBbZnVuY3Rpb24oZSwgdCwgcjIpIHtcbiAgICAgIHQuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnRleHQgPSAwLCB0aGlzLnRpbWUgPSAwLCB0aGlzLnhmbGFncyA9IDAsIHRoaXMub3MgPSAwLCB0aGlzLmV4dHJhID0gbnVsbCwgdGhpcy5leHRyYV9sZW4gPSAwLCB0aGlzLm5hbWUgPSBcIlwiLCB0aGlzLmNvbW1lbnQgPSBcIlwiLCB0aGlzLmhjcmMgPSAwLCB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIH07XG4gICAgfSwge31dLCA0ODogW2Z1bmN0aW9uKGUsIHQsIHIyKSB7XG4gICAgICB0LmV4cG9ydHMgPSBmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgdmFyIHIzLCBuLCBpLCBzMiwgYSwgbywgaCwgdSwgbCwgZjIsIGMsIGQsIHAsIG0sIF8sIGcsIGIsIHYsIHksIHcsIGssIHgsIFMsIHosIEM7XG4gICAgICAgIHIzID0gZTIuc3RhdGUsIG4gPSBlMi5uZXh0X2luLCB6ID0gZTIuaW5wdXQsIGkgPSBuICsgKGUyLmF2YWlsX2luIC0gNSksIHMyID0gZTIubmV4dF9vdXQsIEMgPSBlMi5vdXRwdXQsIGEgPSBzMiAtICh0MiAtIGUyLmF2YWlsX291dCksIG8gPSBzMiArIChlMi5hdmFpbF9vdXQgLSAyNTcpLCBoID0gcjMuZG1heCwgdSA9IHIzLndzaXplLCBsID0gcjMud2hhdmUsIGYyID0gcjMud25leHQsIGMgPSByMy53aW5kb3csIGQgPSByMy5ob2xkLCBwID0gcjMuYml0cywgbSA9IHIzLmxlbmNvZGUsIF8gPSByMy5kaXN0Y29kZSwgZyA9ICgxIDw8IHIzLmxlbmJpdHMpIC0gMSwgYiA9ICgxIDw8IHIzLmRpc3RiaXRzKSAtIDE7XG4gICAgICAgIGU6IGRvIHtcbiAgICAgICAgICBwIDwgMTUgJiYgKGQgKz0geltuKytdIDw8IHAsIHAgKz0gOCwgZCArPSB6W24rK10gPDwgcCwgcCArPSA4KSwgdiA9IG1bZCAmIGddO1xuICAgICAgICAgIHQ6IGZvciAoOyA7ICkge1xuICAgICAgICAgICAgaWYgKGQgPj4+PSB5ID0gdiA+Pj4gMjQsIHAgLT0geSwgMCA9PT0gKHkgPSB2ID4+PiAxNiAmIDI1NSkpIENbczIrK10gPSA2NTUzNSAmIHY7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKCEoMTYgJiB5KSkge1xuICAgICAgICAgICAgICAgIGlmICgwID09ICg2NCAmIHkpKSB7XG4gICAgICAgICAgICAgICAgICB2ID0gbVsoNjU1MzUgJiB2KSArIChkICYgKDEgPDwgeSkgLSAxKV07XG4gICAgICAgICAgICAgICAgICBjb250aW51ZSB0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoMzIgJiB5KSB7XG4gICAgICAgICAgICAgICAgICByMy5tb2RlID0gMTI7XG4gICAgICAgICAgICAgICAgICBicmVhayBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlMi5tc2cgPSBcImludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZVwiLCByMy5tb2RlID0gMzA7XG4gICAgICAgICAgICAgICAgYnJlYWsgZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB3ID0gNjU1MzUgJiB2LCAoeSAmPSAxNSkgJiYgKHAgPCB5ICYmIChkICs9IHpbbisrXSA8PCBwLCBwICs9IDgpLCB3ICs9IGQgJiAoMSA8PCB5KSAtIDEsIGQgPj4+PSB5LCBwIC09IHkpLCBwIDwgMTUgJiYgKGQgKz0geltuKytdIDw8IHAsIHAgKz0gOCwgZCArPSB6W24rK10gPDwgcCwgcCArPSA4KSwgdiA9IF9bZCAmIGJdO1xuICAgICAgICAgICAgICByOiBmb3IgKDsgOyApIHtcbiAgICAgICAgICAgICAgICBpZiAoZCA+Pj49IHkgPSB2ID4+PiAyNCwgcCAtPSB5LCAhKDE2ICYgKHkgPSB2ID4+PiAxNiAmIDI1NSkpKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoMCA9PSAoNjQgJiB5KSkge1xuICAgICAgICAgICAgICAgICAgICB2ID0gX1soNjU1MzUgJiB2KSArIChkICYgKDEgPDwgeSkgLSAxKV07XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIHI7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBlMi5tc2cgPSBcImludmFsaWQgZGlzdGFuY2UgY29kZVwiLCByMy5tb2RlID0gMzA7XG4gICAgICAgICAgICAgICAgICBicmVhayBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoayA9IDY1NTM1ICYgdiwgcCA8ICh5ICY9IDE1KSAmJiAoZCArPSB6W24rK10gPDwgcCwgKHAgKz0gOCkgPCB5ICYmIChkICs9IHpbbisrXSA8PCBwLCBwICs9IDgpKSwgaCA8IChrICs9IGQgJiAoMSA8PCB5KSAtIDEpKSB7XG4gICAgICAgICAgICAgICAgICBlMi5tc2cgPSBcImludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrXCIsIHIzLm1vZGUgPSAzMDtcbiAgICAgICAgICAgICAgICAgIGJyZWFrIGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkID4+Pj0geSwgcCAtPSB5LCAoeSA9IHMyIC0gYSkgPCBrKSB7XG4gICAgICAgICAgICAgICAgICBpZiAobCA8ICh5ID0gayAtIHkpICYmIHIzLnNhbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgZTIubXNnID0gXCJpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFja1wiLCByMy5tb2RlID0gMzA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrIGU7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAoUyA9IGMsICh4ID0gMCkgPT09IGYyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh4ICs9IHUgLSB5LCB5IDwgdykge1xuICAgICAgICAgICAgICAgICAgICAgIGZvciAodyAtPSB5OyBDW3MyKytdID0gY1t4KytdLCAtLXk7ICkgO1xuICAgICAgICAgICAgICAgICAgICAgIHggPSBzMiAtIGssIFMgPSBDO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGYyIDwgeSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoeCArPSB1ICsgZjIgLSB5LCAoeSAtPSBmMikgPCB3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgZm9yICh3IC09IHk7IENbczIrK10gPSBjW3grK10sIC0teTsgKSA7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHggPSAwLCBmMiA8IHcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodyAtPSB5ID0gZjI7IENbczIrK10gPSBjW3grK10sIC0teTsgKSA7XG4gICAgICAgICAgICAgICAgICAgICAgICB4ID0gczIgLSBrLCBTID0gQztcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoeCArPSBmMiAtIHksIHkgPCB3KSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodyAtPSB5OyBDW3MyKytdID0gY1t4KytdLCAtLXk7ICkgO1xuICAgICAgICAgICAgICAgICAgICB4ID0gczIgLSBrLCBTID0gQztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGZvciAoOyAyIDwgdzsgKSBDW3MyKytdID0gU1t4KytdLCBDW3MyKytdID0gU1t4KytdLCBDW3MyKytdID0gU1t4KytdLCB3IC09IDM7XG4gICAgICAgICAgICAgICAgICB3ICYmIChDW3MyKytdID0gU1t4KytdLCAxIDwgdyAmJiAoQ1tzMisrXSA9IFNbeCsrXSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKHggPSBzMiAtIGs7IENbczIrK10gPSBDW3grK10sIENbczIrK10gPSBDW3grK10sIENbczIrK10gPSBDW3grK10sIDIgPCAodyAtPSAzKTsgKSA7XG4gICAgICAgICAgICAgICAgICB3ICYmIChDW3MyKytdID0gQ1t4KytdLCAxIDwgdyAmJiAoQ1tzMisrXSA9IENbeCsrXSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlIChuIDwgaSAmJiBzMiA8IG8pO1xuICAgICAgICBuIC09IHcgPSBwID4+IDMsIGQgJj0gKDEgPDwgKHAgLT0gdyA8PCAzKSkgLSAxLCBlMi5uZXh0X2luID0gbiwgZTIubmV4dF9vdXQgPSBzMiwgZTIuYXZhaWxfaW4gPSBuIDwgaSA/IGkgLSBuICsgNSA6IDUgLSAobiAtIGkpLCBlMi5hdmFpbF9vdXQgPSBzMiA8IG8gPyBvIC0gczIgKyAyNTcgOiAyNTcgLSAoczIgLSBvKSwgcjMuaG9sZCA9IGQsIHIzLmJpdHMgPSBwO1xuICAgICAgfTtcbiAgICB9LCB7fV0sIDQ5OiBbZnVuY3Rpb24oZSwgdCwgcjIpIHtcbiAgICAgIHZhciBJID0gZShcIi4uL3V0aWxzL2NvbW1vblwiKSwgTyA9IGUoXCIuL2FkbGVyMzJcIiksIEIgPSBlKFwiLi9jcmMzMlwiKSwgUjIgPSBlKFwiLi9pbmZmYXN0XCIpLCBUID0gZShcIi4vaW5mdHJlZXNcIiksIEQgPSAxLCBGID0gMiwgTiA9IDAsIFUgPSAtMiwgUCA9IDEsIG4gPSA4NTIsIGkgPSA1OTI7XG4gICAgICBmdW5jdGlvbiBMKGUyKSB7XG4gICAgICAgIHJldHVybiAoZTIgPj4+IDI0ICYgMjU1KSArIChlMiA+Pj4gOCAmIDY1MjgwKSArICgoNjUyODAgJiBlMikgPDwgOCkgKyAoKDI1NSAmIGUyKSA8PCAyNCk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBzMigpIHtcbiAgICAgICAgdGhpcy5tb2RlID0gMCwgdGhpcy5sYXN0ID0gZmFsc2UsIHRoaXMud3JhcCA9IDAsIHRoaXMuaGF2ZWRpY3QgPSBmYWxzZSwgdGhpcy5mbGFncyA9IDAsIHRoaXMuZG1heCA9IDAsIHRoaXMuY2hlY2sgPSAwLCB0aGlzLnRvdGFsID0gMCwgdGhpcy5oZWFkID0gbnVsbCwgdGhpcy53Yml0cyA9IDAsIHRoaXMud3NpemUgPSAwLCB0aGlzLndoYXZlID0gMCwgdGhpcy53bmV4dCA9IDAsIHRoaXMud2luZG93ID0gbnVsbCwgdGhpcy5ob2xkID0gMCwgdGhpcy5iaXRzID0gMCwgdGhpcy5sZW5ndGggPSAwLCB0aGlzLm9mZnNldCA9IDAsIHRoaXMuZXh0cmEgPSAwLCB0aGlzLmxlbmNvZGUgPSBudWxsLCB0aGlzLmRpc3Rjb2RlID0gbnVsbCwgdGhpcy5sZW5iaXRzID0gMCwgdGhpcy5kaXN0Yml0cyA9IDAsIHRoaXMubmNvZGUgPSAwLCB0aGlzLm5sZW4gPSAwLCB0aGlzLm5kaXN0ID0gMCwgdGhpcy5oYXZlID0gMCwgdGhpcy5uZXh0ID0gbnVsbCwgdGhpcy5sZW5zID0gbmV3IEkuQnVmMTYoMzIwKSwgdGhpcy53b3JrID0gbmV3IEkuQnVmMTYoMjg4KSwgdGhpcy5sZW5keW4gPSBudWxsLCB0aGlzLmRpc3RkeW4gPSBudWxsLCB0aGlzLnNhbmUgPSAwLCB0aGlzLmJhY2sgPSAwLCB0aGlzLndhcyA9IDA7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBhKGUyKSB7XG4gICAgICAgIHZhciB0MjtcbiAgICAgICAgcmV0dXJuIGUyICYmIGUyLnN0YXRlID8gKHQyID0gZTIuc3RhdGUsIGUyLnRvdGFsX2luID0gZTIudG90YWxfb3V0ID0gdDIudG90YWwgPSAwLCBlMi5tc2cgPSBcIlwiLCB0Mi53cmFwICYmIChlMi5hZGxlciA9IDEgJiB0Mi53cmFwKSwgdDIubW9kZSA9IFAsIHQyLmxhc3QgPSAwLCB0Mi5oYXZlZGljdCA9IDAsIHQyLmRtYXggPSAzMjc2OCwgdDIuaGVhZCA9IG51bGwsIHQyLmhvbGQgPSAwLCB0Mi5iaXRzID0gMCwgdDIubGVuY29kZSA9IHQyLmxlbmR5biA9IG5ldyBJLkJ1ZjMyKG4pLCB0Mi5kaXN0Y29kZSA9IHQyLmRpc3RkeW4gPSBuZXcgSS5CdWYzMihpKSwgdDIuc2FuZSA9IDEsIHQyLmJhY2sgPSAtMSwgTikgOiBVO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gbyhlMikge1xuICAgICAgICB2YXIgdDI7XG4gICAgICAgIHJldHVybiBlMiAmJiBlMi5zdGF0ZSA/ICgodDIgPSBlMi5zdGF0ZSkud3NpemUgPSAwLCB0Mi53aGF2ZSA9IDAsIHQyLnduZXh0ID0gMCwgYShlMikpIDogVTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGgoZTIsIHQyKSB7XG4gICAgICAgIHZhciByMywgbjI7XG4gICAgICAgIHJldHVybiBlMiAmJiBlMi5zdGF0ZSA/IChuMiA9IGUyLnN0YXRlLCB0MiA8IDAgPyAocjMgPSAwLCB0MiA9IC10MikgOiAocjMgPSAxICsgKHQyID4+IDQpLCB0MiA8IDQ4ICYmICh0MiAmPSAxNSkpLCB0MiAmJiAodDIgPCA4IHx8IDE1IDwgdDIpID8gVSA6IChudWxsICE9PSBuMi53aW5kb3cgJiYgbjIud2JpdHMgIT09IHQyICYmIChuMi53aW5kb3cgPSBudWxsKSwgbjIud3JhcCA9IHIzLCBuMi53Yml0cyA9IHQyLCBvKGUyKSkpIDogVTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHUoZTIsIHQyKSB7XG4gICAgICAgIHZhciByMywgbjI7XG4gICAgICAgIHJldHVybiBlMiA/IChuMiA9IG5ldyBzMigpLCAoZTIuc3RhdGUgPSBuMikud2luZG93ID0gbnVsbCwgKHIzID0gaChlMiwgdDIpKSAhPT0gTiAmJiAoZTIuc3RhdGUgPSBudWxsKSwgcjMpIDogVTtcbiAgICAgIH1cbiAgICAgIHZhciBsLCBmMiwgYyA9IHRydWU7XG4gICAgICBmdW5jdGlvbiBqKGUyKSB7XG4gICAgICAgIGlmIChjKSB7XG4gICAgICAgICAgdmFyIHQyO1xuICAgICAgICAgIGZvciAobCA9IG5ldyBJLkJ1ZjMyKDUxMiksIGYyID0gbmV3IEkuQnVmMzIoMzIpLCB0MiA9IDA7IHQyIDwgMTQ0OyApIGUyLmxlbnNbdDIrK10gPSA4O1xuICAgICAgICAgIGZvciAoOyB0MiA8IDI1NjsgKSBlMi5sZW5zW3QyKytdID0gOTtcbiAgICAgICAgICBmb3IgKDsgdDIgPCAyODA7ICkgZTIubGVuc1t0MisrXSA9IDc7XG4gICAgICAgICAgZm9yICg7IHQyIDwgMjg4OyApIGUyLmxlbnNbdDIrK10gPSA4O1xuICAgICAgICAgIGZvciAoVChELCBlMi5sZW5zLCAwLCAyODgsIGwsIDAsIGUyLndvcmssIHsgYml0czogOSB9KSwgdDIgPSAwOyB0MiA8IDMyOyApIGUyLmxlbnNbdDIrK10gPSA1O1xuICAgICAgICAgIFQoRiwgZTIubGVucywgMCwgMzIsIGYyLCAwLCBlMi53b3JrLCB7IGJpdHM6IDUgfSksIGMgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlMi5sZW5jb2RlID0gbCwgZTIubGVuYml0cyA9IDksIGUyLmRpc3Rjb2RlID0gZjIsIGUyLmRpc3RiaXRzID0gNTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIFooZTIsIHQyLCByMywgbjIpIHtcbiAgICAgICAgdmFyIGkyLCBzMyA9IGUyLnN0YXRlO1xuICAgICAgICByZXR1cm4gbnVsbCA9PT0gczMud2luZG93ICYmIChzMy53c2l6ZSA9IDEgPDwgczMud2JpdHMsIHMzLnduZXh0ID0gMCwgczMud2hhdmUgPSAwLCBzMy53aW5kb3cgPSBuZXcgSS5CdWY4KHMzLndzaXplKSksIG4yID49IHMzLndzaXplID8gKEkuYXJyYXlTZXQoczMud2luZG93LCB0MiwgcjMgLSBzMy53c2l6ZSwgczMud3NpemUsIDApLCBzMy53bmV4dCA9IDAsIHMzLndoYXZlID0gczMud3NpemUpIDogKG4yIDwgKGkyID0gczMud3NpemUgLSBzMy53bmV4dCkgJiYgKGkyID0gbjIpLCBJLmFycmF5U2V0KHMzLndpbmRvdywgdDIsIHIzIC0gbjIsIGkyLCBzMy53bmV4dCksIChuMiAtPSBpMikgPyAoSS5hcnJheVNldChzMy53aW5kb3csIHQyLCByMyAtIG4yLCBuMiwgMCksIHMzLnduZXh0ID0gbjIsIHMzLndoYXZlID0gczMud3NpemUpIDogKHMzLnduZXh0ICs9IGkyLCBzMy53bmV4dCA9PT0gczMud3NpemUgJiYgKHMzLnduZXh0ID0gMCksIHMzLndoYXZlIDwgczMud3NpemUgJiYgKHMzLndoYXZlICs9IGkyKSkpLCAwO1xuICAgICAgfVxuICAgICAgcjIuaW5mbGF0ZVJlc2V0ID0gbywgcjIuaW5mbGF0ZVJlc2V0MiA9IGgsIHIyLmluZmxhdGVSZXNldEtlZXAgPSBhLCByMi5pbmZsYXRlSW5pdCA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHJldHVybiB1KGUyLCAxNSk7XG4gICAgICB9LCByMi5pbmZsYXRlSW5pdDIgPSB1LCByMi5pbmZsYXRlID0gZnVuY3Rpb24oZTIsIHQyKSB7XG4gICAgICAgIHZhciByMywgbjIsIGkyLCBzMywgYTIsIG8yLCBoMiwgdTIsIGwyLCBmMywgYzIsIGQsIHAsIG0sIF8sIGcsIGIsIHYsIHksIHcsIGssIHgsIFMsIHosIEMgPSAwLCBFID0gbmV3IEkuQnVmOCg0KSwgQSA9IFsxNiwgMTcsIDE4LCAwLCA4LCA3LCA5LCA2LCAxMCwgNSwgMTEsIDQsIDEyLCAzLCAxMywgMiwgMTQsIDEsIDE1XTtcbiAgICAgICAgaWYgKCFlMiB8fCAhZTIuc3RhdGUgfHwgIWUyLm91dHB1dCB8fCAhZTIuaW5wdXQgJiYgMCAhPT0gZTIuYXZhaWxfaW4pIHJldHVybiBVO1xuICAgICAgICAxMiA9PT0gKHIzID0gZTIuc3RhdGUpLm1vZGUgJiYgKHIzLm1vZGUgPSAxMyksIGEyID0gZTIubmV4dF9vdXQsIGkyID0gZTIub3V0cHV0LCBoMiA9IGUyLmF2YWlsX291dCwgczMgPSBlMi5uZXh0X2luLCBuMiA9IGUyLmlucHV0LCBvMiA9IGUyLmF2YWlsX2luLCB1MiA9IHIzLmhvbGQsIGwyID0gcjMuYml0cywgZjMgPSBvMiwgYzIgPSBoMiwgeCA9IE47XG4gICAgICAgIGU6IGZvciAoOyA7ICkgc3dpdGNoIChyMy5tb2RlKSB7XG4gICAgICAgICAgY2FzZSBQOlxuICAgICAgICAgICAgaWYgKDAgPT09IHIzLndyYXApIHtcbiAgICAgICAgICAgICAgcjMubW9kZSA9IDEzO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoOyBsMiA8IDE2OyApIHtcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG8yKSBicmVhayBlO1xuICAgICAgICAgICAgICBvMi0tLCB1MiArPSBuMltzMysrXSA8PCBsMiwgbDIgKz0gODtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgyICYgcjMud3JhcCAmJiAzNTYxNSA9PT0gdTIpIHtcbiAgICAgICAgICAgICAgRVtyMy5jaGVjayA9IDBdID0gMjU1ICYgdTIsIEVbMV0gPSB1MiA+Pj4gOCAmIDI1NSwgcjMuY2hlY2sgPSBCKHIzLmNoZWNrLCBFLCAyLCAwKSwgbDIgPSB1MiA9IDAsIHIzLm1vZGUgPSAyO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyMy5mbGFncyA9IDAsIHIzLmhlYWQgJiYgKHIzLmhlYWQuZG9uZSA9IGZhbHNlKSwgISgxICYgcjMud3JhcCkgfHwgKCgoMjU1ICYgdTIpIDw8IDgpICsgKHUyID4+IDgpKSAlIDMxKSB7XG4gICAgICAgICAgICAgIGUyLm1zZyA9IFwiaW5jb3JyZWN0IGhlYWRlciBjaGVja1wiLCByMy5tb2RlID0gMzA7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKDggIT0gKDE1ICYgdTIpKSB7XG4gICAgICAgICAgICAgIGUyLm1zZyA9IFwidW5rbm93biBjb21wcmVzc2lvbiBtZXRob2RcIiwgcjMubW9kZSA9IDMwO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsMiAtPSA0LCBrID0gOCArICgxNSAmICh1MiA+Pj49IDQpKSwgMCA9PT0gcjMud2JpdHMpIHIzLndiaXRzID0gaztcbiAgICAgICAgICAgIGVsc2UgaWYgKGsgPiByMy53Yml0cykge1xuICAgICAgICAgICAgICBlMi5tc2cgPSBcImludmFsaWQgd2luZG93IHNpemVcIiwgcjMubW9kZSA9IDMwO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHIzLmRtYXggPSAxIDw8IGssIGUyLmFkbGVyID0gcjMuY2hlY2sgPSAxLCByMy5tb2RlID0gNTEyICYgdTIgPyAxMCA6IDEyLCBsMiA9IHUyID0gMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGZvciAoOyBsMiA8IDE2OyApIHtcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG8yKSBicmVhayBlO1xuICAgICAgICAgICAgICBvMi0tLCB1MiArPSBuMltzMysrXSA8PCBsMiwgbDIgKz0gODtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyMy5mbGFncyA9IHUyLCA4ICE9ICgyNTUgJiByMy5mbGFncykpIHtcbiAgICAgICAgICAgICAgZTIubXNnID0gXCJ1bmtub3duIGNvbXByZXNzaW9uIG1ldGhvZFwiLCByMy5tb2RlID0gMzA7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKDU3MzQ0ICYgcjMuZmxhZ3MpIHtcbiAgICAgICAgICAgICAgZTIubXNnID0gXCJ1bmtub3duIGhlYWRlciBmbGFncyBzZXRcIiwgcjMubW9kZSA9IDMwO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHIzLmhlYWQgJiYgKHIzLmhlYWQudGV4dCA9IHUyID4+IDggJiAxKSwgNTEyICYgcjMuZmxhZ3MgJiYgKEVbMF0gPSAyNTUgJiB1MiwgRVsxXSA9IHUyID4+PiA4ICYgMjU1LCByMy5jaGVjayA9IEIocjMuY2hlY2ssIEUsIDIsIDApKSwgbDIgPSB1MiA9IDAsIHIzLm1vZGUgPSAzO1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGZvciAoOyBsMiA8IDMyOyApIHtcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG8yKSBicmVhayBlO1xuICAgICAgICAgICAgICBvMi0tLCB1MiArPSBuMltzMysrXSA8PCBsMiwgbDIgKz0gODtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHIzLmhlYWQgJiYgKHIzLmhlYWQudGltZSA9IHUyKSwgNTEyICYgcjMuZmxhZ3MgJiYgKEVbMF0gPSAyNTUgJiB1MiwgRVsxXSA9IHUyID4+PiA4ICYgMjU1LCBFWzJdID0gdTIgPj4+IDE2ICYgMjU1LCBFWzNdID0gdTIgPj4+IDI0ICYgMjU1LCByMy5jaGVjayA9IEIocjMuY2hlY2ssIEUsIDQsIDApKSwgbDIgPSB1MiA9IDAsIHIzLm1vZGUgPSA0O1xuICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIGZvciAoOyBsMiA8IDE2OyApIHtcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG8yKSBicmVhayBlO1xuICAgICAgICAgICAgICBvMi0tLCB1MiArPSBuMltzMysrXSA8PCBsMiwgbDIgKz0gODtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHIzLmhlYWQgJiYgKHIzLmhlYWQueGZsYWdzID0gMjU1ICYgdTIsIHIzLmhlYWQub3MgPSB1MiA+PiA4KSwgNTEyICYgcjMuZmxhZ3MgJiYgKEVbMF0gPSAyNTUgJiB1MiwgRVsxXSA9IHUyID4+PiA4ICYgMjU1LCByMy5jaGVjayA9IEIocjMuY2hlY2ssIEUsIDIsIDApKSwgbDIgPSB1MiA9IDAsIHIzLm1vZGUgPSA1O1xuICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgIGlmICgxMDI0ICYgcjMuZmxhZ3MpIHtcbiAgICAgICAgICAgICAgZm9yICg7IGwyIDwgMTY7ICkge1xuICAgICAgICAgICAgICAgIGlmICgwID09PSBvMikgYnJlYWsgZTtcbiAgICAgICAgICAgICAgICBvMi0tLCB1MiArPSBuMltzMysrXSA8PCBsMiwgbDIgKz0gODtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByMy5sZW5ndGggPSB1MiwgcjMuaGVhZCAmJiAocjMuaGVhZC5leHRyYV9sZW4gPSB1MiksIDUxMiAmIHIzLmZsYWdzICYmIChFWzBdID0gMjU1ICYgdTIsIEVbMV0gPSB1MiA+Pj4gOCAmIDI1NSwgcjMuY2hlY2sgPSBCKHIzLmNoZWNrLCBFLCAyLCAwKSksIGwyID0gdTIgPSAwO1xuICAgICAgICAgICAgfSBlbHNlIHIzLmhlYWQgJiYgKHIzLmhlYWQuZXh0cmEgPSBudWxsKTtcbiAgICAgICAgICAgIHIzLm1vZGUgPSA2O1xuICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgIGlmICgxMDI0ICYgcjMuZmxhZ3MgJiYgKG8yIDwgKGQgPSByMy5sZW5ndGgpICYmIChkID0gbzIpLCBkICYmIChyMy5oZWFkICYmIChrID0gcjMuaGVhZC5leHRyYV9sZW4gLSByMy5sZW5ndGgsIHIzLmhlYWQuZXh0cmEgfHwgKHIzLmhlYWQuZXh0cmEgPSBuZXcgQXJyYXkocjMuaGVhZC5leHRyYV9sZW4pKSwgSS5hcnJheVNldChyMy5oZWFkLmV4dHJhLCBuMiwgczMsIGQsIGspKSwgNTEyICYgcjMuZmxhZ3MgJiYgKHIzLmNoZWNrID0gQihyMy5jaGVjaywgbjIsIGQsIHMzKSksIG8yIC09IGQsIHMzICs9IGQsIHIzLmxlbmd0aCAtPSBkKSwgcjMubGVuZ3RoKSkgYnJlYWsgZTtcbiAgICAgICAgICAgIHIzLmxlbmd0aCA9IDAsIHIzLm1vZGUgPSA3O1xuICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgIGlmICgyMDQ4ICYgcjMuZmxhZ3MpIHtcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG8yKSBicmVhayBlO1xuICAgICAgICAgICAgICBmb3IgKGQgPSAwOyBrID0gbjJbczMgKyBkKytdLCByMy5oZWFkICYmIGsgJiYgcjMubGVuZ3RoIDwgNjU1MzYgJiYgKHIzLmhlYWQubmFtZSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGspKSwgayAmJiBkIDwgbzI7ICkgO1xuICAgICAgICAgICAgICBpZiAoNTEyICYgcjMuZmxhZ3MgJiYgKHIzLmNoZWNrID0gQihyMy5jaGVjaywgbjIsIGQsIHMzKSksIG8yIC09IGQsIHMzICs9IGQsIGspIGJyZWFrIGU7XG4gICAgICAgICAgICB9IGVsc2UgcjMuaGVhZCAmJiAocjMuaGVhZC5uYW1lID0gbnVsbCk7XG4gICAgICAgICAgICByMy5sZW5ndGggPSAwLCByMy5tb2RlID0gODtcbiAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICBpZiAoNDA5NiAmIHIzLmZsYWdzKSB7XG4gICAgICAgICAgICAgIGlmICgwID09PSBvMikgYnJlYWsgZTtcbiAgICAgICAgICAgICAgZm9yIChkID0gMDsgayA9IG4yW3MzICsgZCsrXSwgcjMuaGVhZCAmJiBrICYmIHIzLmxlbmd0aCA8IDY1NTM2ICYmIChyMy5oZWFkLmNvbW1lbnQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShrKSksIGsgJiYgZCA8IG8yOyApIDtcbiAgICAgICAgICAgICAgaWYgKDUxMiAmIHIzLmZsYWdzICYmIChyMy5jaGVjayA9IEIocjMuY2hlY2ssIG4yLCBkLCBzMykpLCBvMiAtPSBkLCBzMyArPSBkLCBrKSBicmVhayBlO1xuICAgICAgICAgICAgfSBlbHNlIHIzLmhlYWQgJiYgKHIzLmhlYWQuY29tbWVudCA9IG51bGwpO1xuICAgICAgICAgICAgcjMubW9kZSA9IDk7XG4gICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgaWYgKDUxMiAmIHIzLmZsYWdzKSB7XG4gICAgICAgICAgICAgIGZvciAoOyBsMiA8IDE2OyApIHtcbiAgICAgICAgICAgICAgICBpZiAoMCA9PT0gbzIpIGJyZWFrIGU7XG4gICAgICAgICAgICAgICAgbzItLSwgdTIgKz0gbjJbczMrK10gPDwgbDIsIGwyICs9IDg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHUyICE9PSAoNjU1MzUgJiByMy5jaGVjaykpIHtcbiAgICAgICAgICAgICAgICBlMi5tc2cgPSBcImhlYWRlciBjcmMgbWlzbWF0Y2hcIiwgcjMubW9kZSA9IDMwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGwyID0gdTIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcjMuaGVhZCAmJiAocjMuaGVhZC5oY3JjID0gcjMuZmxhZ3MgPj4gOSAmIDEsIHIzLmhlYWQuZG9uZSA9IHRydWUpLCBlMi5hZGxlciA9IHIzLmNoZWNrID0gMCwgcjMubW9kZSA9IDEyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgIGZvciAoOyBsMiA8IDMyOyApIHtcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG8yKSBicmVhayBlO1xuICAgICAgICAgICAgICBvMi0tLCB1MiArPSBuMltzMysrXSA8PCBsMiwgbDIgKz0gODtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGUyLmFkbGVyID0gcjMuY2hlY2sgPSBMKHUyKSwgbDIgPSB1MiA9IDAsIHIzLm1vZGUgPSAxMTtcbiAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgaWYgKDAgPT09IHIzLmhhdmVkaWN0KSByZXR1cm4gZTIubmV4dF9vdXQgPSBhMiwgZTIuYXZhaWxfb3V0ID0gaDIsIGUyLm5leHRfaW4gPSBzMywgZTIuYXZhaWxfaW4gPSBvMiwgcjMuaG9sZCA9IHUyLCByMy5iaXRzID0gbDIsIDI7XG4gICAgICAgICAgICBlMi5hZGxlciA9IHIzLmNoZWNrID0gMSwgcjMubW9kZSA9IDEyO1xuICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICBpZiAoNSA9PT0gdDIgfHwgNiA9PT0gdDIpIGJyZWFrIGU7XG4gICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgIGlmIChyMy5sYXN0KSB7XG4gICAgICAgICAgICAgIHUyID4+Pj0gNyAmIGwyLCBsMiAtPSA3ICYgbDIsIHIzLm1vZGUgPSAyNztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKDsgbDIgPCAzOyApIHtcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG8yKSBicmVhayBlO1xuICAgICAgICAgICAgICBvMi0tLCB1MiArPSBuMltzMysrXSA8PCBsMiwgbDIgKz0gODtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAocjMubGFzdCA9IDEgJiB1MiwgbDIgLT0gMSwgMyAmICh1MiA+Pj49IDEpKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByMy5tb2RlID0gMTQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBpZiAoaihyMyksIHIzLm1vZGUgPSAyMCwgNiAhPT0gdDIpIGJyZWFrO1xuICAgICAgICAgICAgICAgIHUyID4+Pj0gMiwgbDIgLT0gMjtcbiAgICAgICAgICAgICAgICBicmVhayBlO1xuICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgcjMubW9kZSA9IDE3O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgZTIubXNnID0gXCJpbnZhbGlkIGJsb2NrIHR5cGVcIiwgcjMubW9kZSA9IDMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdTIgPj4+PSAyLCBsMiAtPSAyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgICAgIGZvciAodTIgPj4+PSA3ICYgbDIsIGwyIC09IDcgJiBsMjsgbDIgPCAzMjsgKSB7XG4gICAgICAgICAgICAgIGlmICgwID09PSBvMikgYnJlYWsgZTtcbiAgICAgICAgICAgICAgbzItLSwgdTIgKz0gbjJbczMrK10gPDwgbDIsIGwyICs9IDg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKDY1NTM1ICYgdTIpICE9ICh1MiA+Pj4gMTYgXiA2NTUzNSkpIHtcbiAgICAgICAgICAgICAgZTIubXNnID0gXCJpbnZhbGlkIHN0b3JlZCBibG9jayBsZW5ndGhzXCIsIHIzLm1vZGUgPSAzMDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocjMubGVuZ3RoID0gNjU1MzUgJiB1MiwgbDIgPSB1MiA9IDAsIHIzLm1vZGUgPSAxNSwgNiA9PT0gdDIpIGJyZWFrIGU7XG4gICAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgICAgIHIzLm1vZGUgPSAxNjtcbiAgICAgICAgICBjYXNlIDE2OlxuICAgICAgICAgICAgaWYgKGQgPSByMy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgaWYgKG8yIDwgZCAmJiAoZCA9IG8yKSwgaDIgPCBkICYmIChkID0gaDIpLCAwID09PSBkKSBicmVhayBlO1xuICAgICAgICAgICAgICBJLmFycmF5U2V0KGkyLCBuMiwgczMsIGQsIGEyKSwgbzIgLT0gZCwgczMgKz0gZCwgaDIgLT0gZCwgYTIgKz0gZCwgcjMubGVuZ3RoIC09IGQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcjMubW9kZSA9IDEyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxNzpcbiAgICAgICAgICAgIGZvciAoOyBsMiA8IDE0OyApIHtcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG8yKSBicmVhayBlO1xuICAgICAgICAgICAgICBvMi0tLCB1MiArPSBuMltzMysrXSA8PCBsMiwgbDIgKz0gODtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyMy5ubGVuID0gMjU3ICsgKDMxICYgdTIpLCB1MiA+Pj49IDUsIGwyIC09IDUsIHIzLm5kaXN0ID0gMSArICgzMSAmIHUyKSwgdTIgPj4+PSA1LCBsMiAtPSA1LCByMy5uY29kZSA9IDQgKyAoMTUgJiB1MiksIHUyID4+Pj0gNCwgbDIgLT0gNCwgMjg2IDwgcjMubmxlbiB8fCAzMCA8IHIzLm5kaXN0KSB7XG4gICAgICAgICAgICAgIGUyLm1zZyA9IFwidG9vIG1hbnkgbGVuZ3RoIG9yIGRpc3RhbmNlIHN5bWJvbHNcIiwgcjMubW9kZSA9IDMwO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHIzLmhhdmUgPSAwLCByMy5tb2RlID0gMTg7XG4gICAgICAgICAgY2FzZSAxODpcbiAgICAgICAgICAgIGZvciAoOyByMy5oYXZlIDwgcjMubmNvZGU7ICkge1xuICAgICAgICAgICAgICBmb3IgKDsgbDIgPCAzOyApIHtcbiAgICAgICAgICAgICAgICBpZiAoMCA9PT0gbzIpIGJyZWFrIGU7XG4gICAgICAgICAgICAgICAgbzItLSwgdTIgKz0gbjJbczMrK10gPDwgbDIsIGwyICs9IDg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcjMubGVuc1tBW3IzLmhhdmUrK11dID0gNyAmIHUyLCB1MiA+Pj49IDMsIGwyIC09IDM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKDsgcjMuaGF2ZSA8IDE5OyApIHIzLmxlbnNbQVtyMy5oYXZlKytdXSA9IDA7XG4gICAgICAgICAgICBpZiAocjMubGVuY29kZSA9IHIzLmxlbmR5biwgcjMubGVuYml0cyA9IDcsIFMgPSB7IGJpdHM6IHIzLmxlbmJpdHMgfSwgeCA9IFQoMCwgcjMubGVucywgMCwgMTksIHIzLmxlbmNvZGUsIDAsIHIzLndvcmssIFMpLCByMy5sZW5iaXRzID0gUy5iaXRzLCB4KSB7XG4gICAgICAgICAgICAgIGUyLm1zZyA9IFwiaW52YWxpZCBjb2RlIGxlbmd0aHMgc2V0XCIsIHIzLm1vZGUgPSAzMDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByMy5oYXZlID0gMCwgcjMubW9kZSA9IDE5O1xuICAgICAgICAgIGNhc2UgMTk6XG4gICAgICAgICAgICBmb3IgKDsgcjMuaGF2ZSA8IHIzLm5sZW4gKyByMy5uZGlzdDsgKSB7XG4gICAgICAgICAgICAgIGZvciAoOyBnID0gKEMgPSByMy5sZW5jb2RlW3UyICYgKDEgPDwgcjMubGVuYml0cykgLSAxXSkgPj4+IDE2ICYgMjU1LCBiID0gNjU1MzUgJiBDLCAhKChfID0gQyA+Pj4gMjQpIDw9IGwyKTsgKSB7XG4gICAgICAgICAgICAgICAgaWYgKDAgPT09IG8yKSBicmVhayBlO1xuICAgICAgICAgICAgICAgIG8yLS0sIHUyICs9IG4yW3MzKytdIDw8IGwyLCBsMiArPSA4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChiIDwgMTYpIHUyID4+Pj0gXywgbDIgLT0gXywgcjMubGVuc1tyMy5oYXZlKytdID0gYjtcbiAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKDE2ID09PSBiKSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKHogPSBfICsgMjsgbDIgPCB6OyApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IG8yKSBicmVhayBlO1xuICAgICAgICAgICAgICAgICAgICBvMi0tLCB1MiArPSBuMltzMysrXSA8PCBsMiwgbDIgKz0gODtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmICh1MiA+Pj49IF8sIGwyIC09IF8sIDAgPT09IHIzLmhhdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgZTIubXNnID0gXCJpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0XCIsIHIzLm1vZGUgPSAzMDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBrID0gcjMubGVuc1tyMy5oYXZlIC0gMV0sIGQgPSAzICsgKDMgJiB1MiksIHUyID4+Pj0gMiwgbDIgLT0gMjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKDE3ID09PSBiKSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKHogPSBfICsgMzsgbDIgPCB6OyApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IG8yKSBicmVhayBlO1xuICAgICAgICAgICAgICAgICAgICBvMi0tLCB1MiArPSBuMltzMysrXSA8PCBsMiwgbDIgKz0gODtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGwyIC09IF8sIGsgPSAwLCBkID0gMyArICg3ICYgKHUyID4+Pj0gXykpLCB1MiA+Pj49IDMsIGwyIC09IDM7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGZvciAoeiA9IF8gKyA3OyBsMiA8IHo7ICkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gbzIpIGJyZWFrIGU7XG4gICAgICAgICAgICAgICAgICAgIG8yLS0sIHUyICs9IG4yW3MzKytdIDw8IGwyLCBsMiArPSA4O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgbDIgLT0gXywgayA9IDAsIGQgPSAxMSArICgxMjcgJiAodTIgPj4+PSBfKSksIHUyID4+Pj0gNywgbDIgLT0gNztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHIzLmhhdmUgKyBkID4gcjMubmxlbiArIHIzLm5kaXN0KSB7XG4gICAgICAgICAgICAgICAgICBlMi5tc2cgPSBcImludmFsaWQgYml0IGxlbmd0aCByZXBlYXRcIiwgcjMubW9kZSA9IDMwO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAoOyBkLS07ICkgcjMubGVuc1tyMy5oYXZlKytdID0gaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKDMwID09PSByMy5tb2RlKSBicmVhaztcbiAgICAgICAgICAgIGlmICgwID09PSByMy5sZW5zWzI1Nl0pIHtcbiAgICAgICAgICAgICAgZTIubXNnID0gXCJpbnZhbGlkIGNvZGUgLS0gbWlzc2luZyBlbmQtb2YtYmxvY2tcIiwgcjMubW9kZSA9IDMwO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyMy5sZW5iaXRzID0gOSwgUyA9IHsgYml0czogcjMubGVuYml0cyB9LCB4ID0gVChELCByMy5sZW5zLCAwLCByMy5ubGVuLCByMy5sZW5jb2RlLCAwLCByMy53b3JrLCBTKSwgcjMubGVuYml0cyA9IFMuYml0cywgeCkge1xuICAgICAgICAgICAgICBlMi5tc2cgPSBcImludmFsaWQgbGl0ZXJhbC9sZW5ndGhzIHNldFwiLCByMy5tb2RlID0gMzA7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHIzLmRpc3RiaXRzID0gNiwgcjMuZGlzdGNvZGUgPSByMy5kaXN0ZHluLCBTID0geyBiaXRzOiByMy5kaXN0Yml0cyB9LCB4ID0gVChGLCByMy5sZW5zLCByMy5ubGVuLCByMy5uZGlzdCwgcjMuZGlzdGNvZGUsIDAsIHIzLndvcmssIFMpLCByMy5kaXN0Yml0cyA9IFMuYml0cywgeCkge1xuICAgICAgICAgICAgICBlMi5tc2cgPSBcImludmFsaWQgZGlzdGFuY2VzIHNldFwiLCByMy5tb2RlID0gMzA7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHIzLm1vZGUgPSAyMCwgNiA9PT0gdDIpIGJyZWFrIGU7XG4gICAgICAgICAgY2FzZSAyMDpcbiAgICAgICAgICAgIHIzLm1vZGUgPSAyMTtcbiAgICAgICAgICBjYXNlIDIxOlxuICAgICAgICAgICAgaWYgKDYgPD0gbzIgJiYgMjU4IDw9IGgyKSB7XG4gICAgICAgICAgICAgIGUyLm5leHRfb3V0ID0gYTIsIGUyLmF2YWlsX291dCA9IGgyLCBlMi5uZXh0X2luID0gczMsIGUyLmF2YWlsX2luID0gbzIsIHIzLmhvbGQgPSB1MiwgcjMuYml0cyA9IGwyLCBSMihlMiwgYzIpLCBhMiA9IGUyLm5leHRfb3V0LCBpMiA9IGUyLm91dHB1dCwgaDIgPSBlMi5hdmFpbF9vdXQsIHMzID0gZTIubmV4dF9pbiwgbjIgPSBlMi5pbnB1dCwgbzIgPSBlMi5hdmFpbF9pbiwgdTIgPSByMy5ob2xkLCBsMiA9IHIzLmJpdHMsIDEyID09PSByMy5tb2RlICYmIChyMy5iYWNrID0gLTEpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAocjMuYmFjayA9IDA7IGcgPSAoQyA9IHIzLmxlbmNvZGVbdTIgJiAoMSA8PCByMy5sZW5iaXRzKSAtIDFdKSA+Pj4gMTYgJiAyNTUsIGIgPSA2NTUzNSAmIEMsICEoKF8gPSBDID4+PiAyNCkgPD0gbDIpOyApIHtcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG8yKSBicmVhayBlO1xuICAgICAgICAgICAgICBvMi0tLCB1MiArPSBuMltzMysrXSA8PCBsMiwgbDIgKz0gODtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChnICYmIDAgPT0gKDI0MCAmIGcpKSB7XG4gICAgICAgICAgICAgIGZvciAodiA9IF8sIHkgPSBnLCB3ID0gYjsgZyA9IChDID0gcjMubGVuY29kZVt3ICsgKCh1MiAmICgxIDw8IHYgKyB5KSAtIDEpID4+IHYpXSkgPj4+IDE2ICYgMjU1LCBiID0gNjU1MzUgJiBDLCAhKHYgKyAoXyA9IEMgPj4+IDI0KSA8PSBsMik7ICkge1xuICAgICAgICAgICAgICAgIGlmICgwID09PSBvMikgYnJlYWsgZTtcbiAgICAgICAgICAgICAgICBvMi0tLCB1MiArPSBuMltzMysrXSA8PCBsMiwgbDIgKz0gODtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB1MiA+Pj49IHYsIGwyIC09IHYsIHIzLmJhY2sgKz0gdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1MiA+Pj49IF8sIGwyIC09IF8sIHIzLmJhY2sgKz0gXywgcjMubGVuZ3RoID0gYiwgMCA9PT0gZykge1xuICAgICAgICAgICAgICByMy5tb2RlID0gMjY7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKDMyICYgZykge1xuICAgICAgICAgICAgICByMy5iYWNrID0gLTEsIHIzLm1vZGUgPSAxMjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoNjQgJiBnKSB7XG4gICAgICAgICAgICAgIGUyLm1zZyA9IFwiaW52YWxpZCBsaXRlcmFsL2xlbmd0aCBjb2RlXCIsIHIzLm1vZGUgPSAzMDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByMy5leHRyYSA9IDE1ICYgZywgcjMubW9kZSA9IDIyO1xuICAgICAgICAgIGNhc2UgMjI6XG4gICAgICAgICAgICBpZiAocjMuZXh0cmEpIHtcbiAgICAgICAgICAgICAgZm9yICh6ID0gcjMuZXh0cmE7IGwyIDwgejsgKSB7XG4gICAgICAgICAgICAgICAgaWYgKDAgPT09IG8yKSBicmVhayBlO1xuICAgICAgICAgICAgICAgIG8yLS0sIHUyICs9IG4yW3MzKytdIDw8IGwyLCBsMiArPSA4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHIzLmxlbmd0aCArPSB1MiAmICgxIDw8IHIzLmV4dHJhKSAtIDEsIHUyID4+Pj0gcjMuZXh0cmEsIGwyIC09IHIzLmV4dHJhLCByMy5iYWNrICs9IHIzLmV4dHJhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcjMud2FzID0gcjMubGVuZ3RoLCByMy5tb2RlID0gMjM7XG4gICAgICAgICAgY2FzZSAyMzpcbiAgICAgICAgICAgIGZvciAoOyBnID0gKEMgPSByMy5kaXN0Y29kZVt1MiAmICgxIDw8IHIzLmRpc3RiaXRzKSAtIDFdKSA+Pj4gMTYgJiAyNTUsIGIgPSA2NTUzNSAmIEMsICEoKF8gPSBDID4+PiAyNCkgPD0gbDIpOyApIHtcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG8yKSBicmVhayBlO1xuICAgICAgICAgICAgICBvMi0tLCB1MiArPSBuMltzMysrXSA8PCBsMiwgbDIgKz0gODtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgwID09ICgyNDAgJiBnKSkge1xuICAgICAgICAgICAgICBmb3IgKHYgPSBfLCB5ID0gZywgdyA9IGI7IGcgPSAoQyA9IHIzLmRpc3Rjb2RlW3cgKyAoKHUyICYgKDEgPDwgdiArIHkpIC0gMSkgPj4gdildKSA+Pj4gMTYgJiAyNTUsIGIgPSA2NTUzNSAmIEMsICEodiArIChfID0gQyA+Pj4gMjQpIDw9IGwyKTsgKSB7XG4gICAgICAgICAgICAgICAgaWYgKDAgPT09IG8yKSBicmVhayBlO1xuICAgICAgICAgICAgICAgIG8yLS0sIHUyICs9IG4yW3MzKytdIDw8IGwyLCBsMiArPSA4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHUyID4+Pj0gdiwgbDIgLT0gdiwgcjMuYmFjayArPSB2O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHUyID4+Pj0gXywgbDIgLT0gXywgcjMuYmFjayArPSBfLCA2NCAmIGcpIHtcbiAgICAgICAgICAgICAgZTIubXNnID0gXCJpbnZhbGlkIGRpc3RhbmNlIGNvZGVcIiwgcjMubW9kZSA9IDMwO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHIzLm9mZnNldCA9IGIsIHIzLmV4dHJhID0gMTUgJiBnLCByMy5tb2RlID0gMjQ7XG4gICAgICAgICAgY2FzZSAyNDpcbiAgICAgICAgICAgIGlmIChyMy5leHRyYSkge1xuICAgICAgICAgICAgICBmb3IgKHogPSByMy5leHRyYTsgbDIgPCB6OyApIHtcbiAgICAgICAgICAgICAgICBpZiAoMCA9PT0gbzIpIGJyZWFrIGU7XG4gICAgICAgICAgICAgICAgbzItLSwgdTIgKz0gbjJbczMrK10gPDwgbDIsIGwyICs9IDg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcjMub2Zmc2V0ICs9IHUyICYgKDEgPDwgcjMuZXh0cmEpIC0gMSwgdTIgPj4+PSByMy5leHRyYSwgbDIgLT0gcjMuZXh0cmEsIHIzLmJhY2sgKz0gcjMuZXh0cmE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocjMub2Zmc2V0ID4gcjMuZG1heCkge1xuICAgICAgICAgICAgICBlMi5tc2cgPSBcImludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrXCIsIHIzLm1vZGUgPSAzMDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByMy5tb2RlID0gMjU7XG4gICAgICAgICAgY2FzZSAyNTpcbiAgICAgICAgICAgIGlmICgwID09PSBoMikgYnJlYWsgZTtcbiAgICAgICAgICAgIGlmIChkID0gYzIgLSBoMiwgcjMub2Zmc2V0ID4gZCkge1xuICAgICAgICAgICAgICBpZiAoKGQgPSByMy5vZmZzZXQgLSBkKSA+IHIzLndoYXZlICYmIHIzLnNhbmUpIHtcbiAgICAgICAgICAgICAgICBlMi5tc2cgPSBcImludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrXCIsIHIzLm1vZGUgPSAzMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwID0gZCA+IHIzLnduZXh0ID8gKGQgLT0gcjMud25leHQsIHIzLndzaXplIC0gZCkgOiByMy53bmV4dCAtIGQsIGQgPiByMy5sZW5ndGggJiYgKGQgPSByMy5sZW5ndGgpLCBtID0gcjMud2luZG93O1xuICAgICAgICAgICAgfSBlbHNlIG0gPSBpMiwgcCA9IGEyIC0gcjMub2Zmc2V0LCBkID0gcjMubGVuZ3RoO1xuICAgICAgICAgICAgZm9yIChoMiA8IGQgJiYgKGQgPSBoMiksIGgyIC09IGQsIHIzLmxlbmd0aCAtPSBkOyBpMlthMisrXSA9IG1bcCsrXSwgLS1kOyApIDtcbiAgICAgICAgICAgIDAgPT09IHIzLmxlbmd0aCAmJiAocjMubW9kZSA9IDIxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMjY6XG4gICAgICAgICAgICBpZiAoMCA9PT0gaDIpIGJyZWFrIGU7XG4gICAgICAgICAgICBpMlthMisrXSA9IHIzLmxlbmd0aCwgaDItLSwgcjMubW9kZSA9IDIxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICAgIGlmIChyMy53cmFwKSB7XG4gICAgICAgICAgICAgIGZvciAoOyBsMiA8IDMyOyApIHtcbiAgICAgICAgICAgICAgICBpZiAoMCA9PT0gbzIpIGJyZWFrIGU7XG4gICAgICAgICAgICAgICAgbzItLSwgdTIgfD0gbjJbczMrK10gPDwgbDIsIGwyICs9IDg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGMyIC09IGgyLCBlMi50b3RhbF9vdXQgKz0gYzIsIHIzLnRvdGFsICs9IGMyLCBjMiAmJiAoZTIuYWRsZXIgPSByMy5jaGVjayA9IHIzLmZsYWdzID8gQihyMy5jaGVjaywgaTIsIGMyLCBhMiAtIGMyKSA6IE8ocjMuY2hlY2ssIGkyLCBjMiwgYTIgLSBjMikpLCBjMiA9IGgyLCAocjMuZmxhZ3MgPyB1MiA6IEwodTIpKSAhPT0gcjMuY2hlY2spIHtcbiAgICAgICAgICAgICAgICBlMi5tc2cgPSBcImluY29ycmVjdCBkYXRhIGNoZWNrXCIsIHIzLm1vZGUgPSAzMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsMiA9IHUyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHIzLm1vZGUgPSAyODtcbiAgICAgICAgICBjYXNlIDI4OlxuICAgICAgICAgICAgaWYgKHIzLndyYXAgJiYgcjMuZmxhZ3MpIHtcbiAgICAgICAgICAgICAgZm9yICg7IGwyIDwgMzI7ICkge1xuICAgICAgICAgICAgICAgIGlmICgwID09PSBvMikgYnJlYWsgZTtcbiAgICAgICAgICAgICAgICBvMi0tLCB1MiArPSBuMltzMysrXSA8PCBsMiwgbDIgKz0gODtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAodTIgIT09ICg0Mjk0OTY3Mjk1ICYgcjMudG90YWwpKSB7XG4gICAgICAgICAgICAgICAgZTIubXNnID0gXCJpbmNvcnJlY3QgbGVuZ3RoIGNoZWNrXCIsIHIzLm1vZGUgPSAzMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsMiA9IHUyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHIzLm1vZGUgPSAyOTtcbiAgICAgICAgICBjYXNlIDI5OlxuICAgICAgICAgICAgeCA9IDE7XG4gICAgICAgICAgICBicmVhayBlO1xuICAgICAgICAgIGNhc2UgMzA6XG4gICAgICAgICAgICB4ID0gLTM7XG4gICAgICAgICAgICBicmVhayBlO1xuICAgICAgICAgIGNhc2UgMzE6XG4gICAgICAgICAgICByZXR1cm4gLTQ7XG4gICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGUyLm5leHRfb3V0ID0gYTIsIGUyLmF2YWlsX291dCA9IGgyLCBlMi5uZXh0X2luID0gczMsIGUyLmF2YWlsX2luID0gbzIsIHIzLmhvbGQgPSB1MiwgcjMuYml0cyA9IGwyLCAocjMud3NpemUgfHwgYzIgIT09IGUyLmF2YWlsX291dCAmJiByMy5tb2RlIDwgMzAgJiYgKHIzLm1vZGUgPCAyNyB8fCA0ICE9PSB0MikpICYmIFooZTIsIGUyLm91dHB1dCwgZTIubmV4dF9vdXQsIGMyIC0gZTIuYXZhaWxfb3V0KSA/IChyMy5tb2RlID0gMzEsIC00KSA6IChmMyAtPSBlMi5hdmFpbF9pbiwgYzIgLT0gZTIuYXZhaWxfb3V0LCBlMi50b3RhbF9pbiArPSBmMywgZTIudG90YWxfb3V0ICs9IGMyLCByMy50b3RhbCArPSBjMiwgcjMud3JhcCAmJiBjMiAmJiAoZTIuYWRsZXIgPSByMy5jaGVjayA9IHIzLmZsYWdzID8gQihyMy5jaGVjaywgaTIsIGMyLCBlMi5uZXh0X291dCAtIGMyKSA6IE8ocjMuY2hlY2ssIGkyLCBjMiwgZTIubmV4dF9vdXQgLSBjMikpLCBlMi5kYXRhX3R5cGUgPSByMy5iaXRzICsgKHIzLmxhc3QgPyA2NCA6IDApICsgKDEyID09PSByMy5tb2RlID8gMTI4IDogMCkgKyAoMjAgPT09IHIzLm1vZGUgfHwgMTUgPT09IHIzLm1vZGUgPyAyNTYgOiAwKSwgKDAgPT0gZjMgJiYgMCA9PT0gYzIgfHwgNCA9PT0gdDIpICYmIHggPT09IE4gJiYgKHggPSAtNSksIHgpO1xuICAgICAgfSwgcjIuaW5mbGF0ZUVuZCA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIGlmICghZTIgfHwgIWUyLnN0YXRlKSByZXR1cm4gVTtcbiAgICAgICAgdmFyIHQyID0gZTIuc3RhdGU7XG4gICAgICAgIHJldHVybiB0Mi53aW5kb3cgJiYgKHQyLndpbmRvdyA9IG51bGwpLCBlMi5zdGF0ZSA9IG51bGwsIE47XG4gICAgICB9LCByMi5pbmZsYXRlR2V0SGVhZGVyID0gZnVuY3Rpb24oZTIsIHQyKSB7XG4gICAgICAgIHZhciByMztcbiAgICAgICAgcmV0dXJuIGUyICYmIGUyLnN0YXRlID8gMCA9PSAoMiAmIChyMyA9IGUyLnN0YXRlKS53cmFwKSA/IFUgOiAoKHIzLmhlYWQgPSB0MikuZG9uZSA9IGZhbHNlLCBOKSA6IFU7XG4gICAgICB9LCByMi5pbmZsYXRlU2V0RGljdGlvbmFyeSA9IGZ1bmN0aW9uKGUyLCB0Mikge1xuICAgICAgICB2YXIgcjMsIG4yID0gdDIubGVuZ3RoO1xuICAgICAgICByZXR1cm4gZTIgJiYgZTIuc3RhdGUgPyAwICE9PSAocjMgPSBlMi5zdGF0ZSkud3JhcCAmJiAxMSAhPT0gcjMubW9kZSA/IFUgOiAxMSA9PT0gcjMubW9kZSAmJiBPKDEsIHQyLCBuMiwgMCkgIT09IHIzLmNoZWNrID8gLTMgOiBaKGUyLCB0MiwgbjIsIG4yKSA/IChyMy5tb2RlID0gMzEsIC00KSA6IChyMy5oYXZlZGljdCA9IDEsIE4pIDogVTtcbiAgICAgIH0sIHIyLmluZmxhdGVJbmZvID0gXCJwYWtvIGluZmxhdGUgKGZyb20gTm9kZWNhIHByb2plY3QpXCI7XG4gICAgfSwgeyBcIi4uL3V0aWxzL2NvbW1vblwiOiA0MSwgXCIuL2FkbGVyMzJcIjogNDMsIFwiLi9jcmMzMlwiOiA0NSwgXCIuL2luZmZhc3RcIjogNDgsIFwiLi9pbmZ0cmVlc1wiOiA1MCB9XSwgNTA6IFtmdW5jdGlvbihlLCB0LCByMikge1xuICAgICAgdmFyIEQgPSBlKFwiLi4vdXRpbHMvY29tbW9uXCIpLCBGID0gWzMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTMsIDE1LCAxNywgMTksIDIzLCAyNywgMzEsIDM1LCA0MywgNTEsIDU5LCA2NywgODMsIDk5LCAxMTUsIDEzMSwgMTYzLCAxOTUsIDIyNywgMjU4LCAwLCAwXSwgTiA9IFsxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE3LCAxNywgMTcsIDE3LCAxOCwgMTgsIDE4LCAxOCwgMTksIDE5LCAxOSwgMTksIDIwLCAyMCwgMjAsIDIwLCAyMSwgMjEsIDIxLCAyMSwgMTYsIDcyLCA3OF0sIFUgPSBbMSwgMiwgMywgNCwgNSwgNywgOSwgMTMsIDE3LCAyNSwgMzMsIDQ5LCA2NSwgOTcsIDEyOSwgMTkzLCAyNTcsIDM4NSwgNTEzLCA3NjksIDEwMjUsIDE1MzcsIDIwNDksIDMwNzMsIDQwOTcsIDYxNDUsIDgxOTMsIDEyMjg5LCAxNjM4NSwgMjQ1NzcsIDAsIDBdLCBQID0gWzE2LCAxNiwgMTYsIDE2LCAxNywgMTcsIDE4LCAxOCwgMTksIDE5LCAyMCwgMjAsIDIxLCAyMSwgMjIsIDIyLCAyMywgMjMsIDI0LCAyNCwgMjUsIDI1LCAyNiwgMjYsIDI3LCAyNywgMjgsIDI4LCAyOSwgMjksIDY0LCA2NF07XG4gICAgICB0LmV4cG9ydHMgPSBmdW5jdGlvbihlMiwgdDIsIHIzLCBuLCBpLCBzMiwgYSwgbykge1xuICAgICAgICB2YXIgaCwgdSwgbCwgZjIsIGMsIGQsIHAsIG0sIF8sIGcgPSBvLmJpdHMsIGIgPSAwLCB2ID0gMCwgeSA9IDAsIHcgPSAwLCBrID0gMCwgeCA9IDAsIFMgPSAwLCB6ID0gMCwgQyA9IDAsIEUgPSAwLCBBID0gbnVsbCwgSSA9IDAsIE8gPSBuZXcgRC5CdWYxNigxNiksIEIgPSBuZXcgRC5CdWYxNigxNiksIFIyID0gbnVsbCwgVCA9IDA7XG4gICAgICAgIGZvciAoYiA9IDA7IGIgPD0gMTU7IGIrKykgT1tiXSA9IDA7XG4gICAgICAgIGZvciAodiA9IDA7IHYgPCBuOyB2KyspIE9bdDJbcjMgKyB2XV0rKztcbiAgICAgICAgZm9yIChrID0gZywgdyA9IDE1OyAxIDw9IHcgJiYgMCA9PT0gT1t3XTsgdy0tKSA7XG4gICAgICAgIGlmICh3IDwgayAmJiAoayA9IHcpLCAwID09PSB3KSByZXR1cm4gaVtzMisrXSA9IDIwOTcxNTIwLCBpW3MyKytdID0gMjA5NzE1MjAsIG8uYml0cyA9IDEsIDA7XG4gICAgICAgIGZvciAoeSA9IDE7IHkgPCB3ICYmIDAgPT09IE9beV07IHkrKykgO1xuICAgICAgICBmb3IgKGsgPCB5ICYmIChrID0geSksIGIgPSB6ID0gMTsgYiA8PSAxNTsgYisrKSBpZiAoeiA8PD0gMSwgKHogLT0gT1tiXSkgPCAwKSByZXR1cm4gLTE7XG4gICAgICAgIGlmICgwIDwgeiAmJiAoMCA9PT0gZTIgfHwgMSAhPT0gdykpIHJldHVybiAtMTtcbiAgICAgICAgZm9yIChCWzFdID0gMCwgYiA9IDE7IGIgPCAxNTsgYisrKSBCW2IgKyAxXSA9IEJbYl0gKyBPW2JdO1xuICAgICAgICBmb3IgKHYgPSAwOyB2IDwgbjsgdisrKSAwICE9PSB0MltyMyArIHZdICYmIChhW0JbdDJbcjMgKyB2XV0rK10gPSB2KTtcbiAgICAgICAgaWYgKGQgPSAwID09PSBlMiA/IChBID0gUjIgPSBhLCAxOSkgOiAxID09PSBlMiA/IChBID0gRiwgSSAtPSAyNTcsIFIyID0gTiwgVCAtPSAyNTcsIDI1NikgOiAoQSA9IFUsIFIyID0gUCwgLTEpLCBiID0geSwgYyA9IHMyLCBTID0gdiA9IEUgPSAwLCBsID0gLTEsIGYyID0gKEMgPSAxIDw8ICh4ID0gaykpIC0gMSwgMSA9PT0gZTIgJiYgODUyIDwgQyB8fCAyID09PSBlMiAmJiA1OTIgPCBDKSByZXR1cm4gMTtcbiAgICAgICAgZm9yICg7IDsgKSB7XG4gICAgICAgICAgZm9yIChwID0gYiAtIFMsIF8gPSBhW3ZdIDwgZCA/IChtID0gMCwgYVt2XSkgOiBhW3ZdID4gZCA/IChtID0gUjJbVCArIGFbdl1dLCBBW0kgKyBhW3ZdXSkgOiAobSA9IDk2LCAwKSwgaCA9IDEgPDwgYiAtIFMsIHkgPSB1ID0gMSA8PCB4OyBpW2MgKyAoRSA+PiBTKSArICh1IC09IGgpXSA9IHAgPDwgMjQgfCBtIDw8IDE2IHwgXyB8IDAsIDAgIT09IHU7ICkgO1xuICAgICAgICAgIGZvciAoaCA9IDEgPDwgYiAtIDE7IEUgJiBoOyApIGggPj49IDE7XG4gICAgICAgICAgaWYgKDAgIT09IGggPyAoRSAmPSBoIC0gMSwgRSArPSBoKSA6IEUgPSAwLCB2KyssIDAgPT0gLS1PW2JdKSB7XG4gICAgICAgICAgICBpZiAoYiA9PT0gdykgYnJlYWs7XG4gICAgICAgICAgICBiID0gdDJbcjMgKyBhW3ZdXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGsgPCBiICYmIChFICYgZjIpICE9PSBsKSB7XG4gICAgICAgICAgICBmb3IgKDAgPT09IFMgJiYgKFMgPSBrKSwgYyArPSB5LCB6ID0gMSA8PCAoeCA9IGIgLSBTKTsgeCArIFMgPCB3ICYmICEoKHogLT0gT1t4ICsgU10pIDw9IDApOyApIHgrKywgeiA8PD0gMTtcbiAgICAgICAgICAgIGlmIChDICs9IDEgPDwgeCwgMSA9PT0gZTIgJiYgODUyIDwgQyB8fCAyID09PSBlMiAmJiA1OTIgPCBDKSByZXR1cm4gMTtcbiAgICAgICAgICAgIGlbbCA9IEUgJiBmMl0gPSBrIDw8IDI0IHwgeCA8PCAxNiB8IGMgLSBzMiB8IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwICE9PSBFICYmIChpW2MgKyBFXSA9IGIgLSBTIDw8IDI0IHwgNjQgPDwgMTYgfCAwKSwgby5iaXRzID0gaywgMDtcbiAgICAgIH07XG4gICAgfSwgeyBcIi4uL3V0aWxzL2NvbW1vblwiOiA0MSB9XSwgNTE6IFtmdW5jdGlvbihlLCB0LCByMikge1xuICAgICAgdC5leHBvcnRzID0geyAyOiBcIm5lZWQgZGljdGlvbmFyeVwiLCAxOiBcInN0cmVhbSBlbmRcIiwgMDogXCJcIiwgXCItMVwiOiBcImZpbGUgZXJyb3JcIiwgXCItMlwiOiBcInN0cmVhbSBlcnJvclwiLCBcIi0zXCI6IFwiZGF0YSBlcnJvclwiLCBcIi00XCI6IFwiaW5zdWZmaWNpZW50IG1lbW9yeVwiLCBcIi01XCI6IFwiYnVmZmVyIGVycm9yXCIsIFwiLTZcIjogXCJpbmNvbXBhdGlibGUgdmVyc2lvblwiIH07XG4gICAgfSwge31dLCA1MjogW2Z1bmN0aW9uKGUsIHQsIHIyKSB7XG4gICAgICB2YXIgaSA9IGUoXCIuLi91dGlscy9jb21tb25cIiksIG8gPSAwLCBoID0gMTtcbiAgICAgIGZ1bmN0aW9uIG4oZTIpIHtcbiAgICAgICAgZm9yICh2YXIgdDIgPSBlMi5sZW5ndGg7IDAgPD0gLS10MjsgKSBlMlt0Ml0gPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHMyID0gMCwgYSA9IDI5LCB1ID0gMjU2LCBsID0gdSArIDEgKyBhLCBmMiA9IDMwLCBjID0gMTksIF8gPSAyICogbCArIDEsIGcgPSAxNSwgZCA9IDE2LCBwID0gNywgbSA9IDI1NiwgYiA9IDE2LCB2ID0gMTcsIHkgPSAxOCwgdyA9IFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAxLCAxLCAxLCAxLCAyLCAyLCAyLCAyLCAzLCAzLCAzLCAzLCA0LCA0LCA0LCA0LCA1LCA1LCA1LCA1LCAwXSwgayA9IFswLCAwLCAwLCAwLCAxLCAxLCAyLCAyLCAzLCAzLCA0LCA0LCA1LCA1LCA2LCA2LCA3LCA3LCA4LCA4LCA5LCA5LCAxMCwgMTAsIDExLCAxMSwgMTIsIDEyLCAxMywgMTNdLCB4ID0gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDIsIDMsIDddLCBTID0gWzE2LCAxNywgMTgsIDAsIDgsIDcsIDksIDYsIDEwLCA1LCAxMSwgNCwgMTIsIDMsIDEzLCAyLCAxNCwgMSwgMTVdLCB6ID0gbmV3IEFycmF5KDIgKiAobCArIDIpKTtcbiAgICAgIG4oeik7XG4gICAgICB2YXIgQyA9IG5ldyBBcnJheSgyICogZjIpO1xuICAgICAgbihDKTtcbiAgICAgIHZhciBFID0gbmV3IEFycmF5KDUxMik7XG4gICAgICBuKEUpO1xuICAgICAgdmFyIEEgPSBuZXcgQXJyYXkoMjU2KTtcbiAgICAgIG4oQSk7XG4gICAgICB2YXIgSSA9IG5ldyBBcnJheShhKTtcbiAgICAgIG4oSSk7XG4gICAgICB2YXIgTywgQiwgUjIsIFQgPSBuZXcgQXJyYXkoZjIpO1xuICAgICAgZnVuY3Rpb24gRChlMiwgdDIsIHIzLCBuMiwgaTIpIHtcbiAgICAgICAgdGhpcy5zdGF0aWNfdHJlZSA9IGUyLCB0aGlzLmV4dHJhX2JpdHMgPSB0MiwgdGhpcy5leHRyYV9iYXNlID0gcjMsIHRoaXMuZWxlbXMgPSBuMiwgdGhpcy5tYXhfbGVuZ3RoID0gaTIsIHRoaXMuaGFzX3N0cmVlID0gZTIgJiYgZTIubGVuZ3RoO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gRihlMiwgdDIpIHtcbiAgICAgICAgdGhpcy5keW5fdHJlZSA9IGUyLCB0aGlzLm1heF9jb2RlID0gMCwgdGhpcy5zdGF0X2Rlc2MgPSB0MjtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIE4oZTIpIHtcbiAgICAgICAgcmV0dXJuIGUyIDwgMjU2ID8gRVtlMl0gOiBFWzI1NiArIChlMiA+Pj4gNyldO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gVShlMiwgdDIpIHtcbiAgICAgICAgZTIucGVuZGluZ19idWZbZTIucGVuZGluZysrXSA9IDI1NSAmIHQyLCBlMi5wZW5kaW5nX2J1ZltlMi5wZW5kaW5nKytdID0gdDIgPj4+IDggJiAyNTU7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBQKGUyLCB0MiwgcjMpIHtcbiAgICAgICAgZTIuYmlfdmFsaWQgPiBkIC0gcjMgPyAoZTIuYmlfYnVmIHw9IHQyIDw8IGUyLmJpX3ZhbGlkICYgNjU1MzUsIFUoZTIsIGUyLmJpX2J1ZiksIGUyLmJpX2J1ZiA9IHQyID4+IGQgLSBlMi5iaV92YWxpZCwgZTIuYmlfdmFsaWQgKz0gcjMgLSBkKSA6IChlMi5iaV9idWYgfD0gdDIgPDwgZTIuYmlfdmFsaWQgJiA2NTUzNSwgZTIuYmlfdmFsaWQgKz0gcjMpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gTChlMiwgdDIsIHIzKSB7XG4gICAgICAgIFAoZTIsIHIzWzIgKiB0Ml0sIHIzWzIgKiB0MiArIDFdKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGooZTIsIHQyKSB7XG4gICAgICAgIGZvciAodmFyIHIzID0gMDsgcjMgfD0gMSAmIGUyLCBlMiA+Pj49IDEsIHIzIDw8PSAxLCAwIDwgLS10MjsgKSA7XG4gICAgICAgIHJldHVybiByMyA+Pj4gMTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIFooZTIsIHQyLCByMykge1xuICAgICAgICB2YXIgbjIsIGkyLCBzMyA9IG5ldyBBcnJheShnICsgMSksIGEyID0gMDtcbiAgICAgICAgZm9yIChuMiA9IDE7IG4yIDw9IGc7IG4yKyspIHMzW24yXSA9IGEyID0gYTIgKyByM1tuMiAtIDFdIDw8IDE7XG4gICAgICAgIGZvciAoaTIgPSAwOyBpMiA8PSB0MjsgaTIrKykge1xuICAgICAgICAgIHZhciBvMiA9IGUyWzIgKiBpMiArIDFdO1xuICAgICAgICAgIDAgIT09IG8yICYmIChlMlsyICogaTJdID0gaihzM1tvMl0rKywgbzIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZnVuY3Rpb24gVyhlMikge1xuICAgICAgICB2YXIgdDI7XG4gICAgICAgIGZvciAodDIgPSAwOyB0MiA8IGw7IHQyKyspIGUyLmR5bl9sdHJlZVsyICogdDJdID0gMDtcbiAgICAgICAgZm9yICh0MiA9IDA7IHQyIDwgZjI7IHQyKyspIGUyLmR5bl9kdHJlZVsyICogdDJdID0gMDtcbiAgICAgICAgZm9yICh0MiA9IDA7IHQyIDwgYzsgdDIrKykgZTIuYmxfdHJlZVsyICogdDJdID0gMDtcbiAgICAgICAgZTIuZHluX2x0cmVlWzIgKiBtXSA9IDEsIGUyLm9wdF9sZW4gPSBlMi5zdGF0aWNfbGVuID0gMCwgZTIubGFzdF9saXQgPSBlMi5tYXRjaGVzID0gMDtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIE0oZTIpIHtcbiAgICAgICAgOCA8IGUyLmJpX3ZhbGlkID8gVShlMiwgZTIuYmlfYnVmKSA6IDAgPCBlMi5iaV92YWxpZCAmJiAoZTIucGVuZGluZ19idWZbZTIucGVuZGluZysrXSA9IGUyLmJpX2J1ZiksIGUyLmJpX2J1ZiA9IDAsIGUyLmJpX3ZhbGlkID0gMDtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIEgoZTIsIHQyLCByMywgbjIpIHtcbiAgICAgICAgdmFyIGkyID0gMiAqIHQyLCBzMyA9IDIgKiByMztcbiAgICAgICAgcmV0dXJuIGUyW2kyXSA8IGUyW3MzXSB8fCBlMltpMl0gPT09IGUyW3MzXSAmJiBuMlt0Ml0gPD0gbjJbcjNdO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gRyhlMiwgdDIsIHIzKSB7XG4gICAgICAgIGZvciAodmFyIG4yID0gZTIuaGVhcFtyM10sIGkyID0gcjMgPDwgMTsgaTIgPD0gZTIuaGVhcF9sZW4gJiYgKGkyIDwgZTIuaGVhcF9sZW4gJiYgSCh0MiwgZTIuaGVhcFtpMiArIDFdLCBlMi5oZWFwW2kyXSwgZTIuZGVwdGgpICYmIGkyKyssICFIKHQyLCBuMiwgZTIuaGVhcFtpMl0sIGUyLmRlcHRoKSk7ICkgZTIuaGVhcFtyM10gPSBlMi5oZWFwW2kyXSwgcjMgPSBpMiwgaTIgPDw9IDE7XG4gICAgICAgIGUyLmhlYXBbcjNdID0gbjI7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBLMihlMiwgdDIsIHIzKSB7XG4gICAgICAgIHZhciBuMiwgaTIsIHMzLCBhMiwgbzIgPSAwO1xuICAgICAgICBpZiAoMCAhPT0gZTIubGFzdF9saXQpIGZvciAoOyBuMiA9IGUyLnBlbmRpbmdfYnVmW2UyLmRfYnVmICsgMiAqIG8yXSA8PCA4IHwgZTIucGVuZGluZ19idWZbZTIuZF9idWYgKyAyICogbzIgKyAxXSwgaTIgPSBlMi5wZW5kaW5nX2J1ZltlMi5sX2J1ZiArIG8yXSwgbzIrKywgMCA9PT0gbjIgPyBMKGUyLCBpMiwgdDIpIDogKEwoZTIsIChzMyA9IEFbaTJdKSArIHUgKyAxLCB0MiksIDAgIT09IChhMiA9IHdbczNdKSAmJiBQKGUyLCBpMiAtPSBJW3MzXSwgYTIpLCBMKGUyLCBzMyA9IE4oLS1uMiksIHIzKSwgMCAhPT0gKGEyID0ga1tzM10pICYmIFAoZTIsIG4yIC09IFRbczNdLCBhMikpLCBvMiA8IGUyLmxhc3RfbGl0OyApIDtcbiAgICAgICAgTChlMiwgbSwgdDIpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gWShlMiwgdDIpIHtcbiAgICAgICAgdmFyIHIzLCBuMiwgaTIsIHMzID0gdDIuZHluX3RyZWUsIGEyID0gdDIuc3RhdF9kZXNjLnN0YXRpY190cmVlLCBvMiA9IHQyLnN0YXRfZGVzYy5oYXNfc3RyZWUsIGgyID0gdDIuc3RhdF9kZXNjLmVsZW1zLCB1MiA9IC0xO1xuICAgICAgICBmb3IgKGUyLmhlYXBfbGVuID0gMCwgZTIuaGVhcF9tYXggPSBfLCByMyA9IDA7IHIzIDwgaDI7IHIzKyspIDAgIT09IHMzWzIgKiByM10gPyAoZTIuaGVhcFsrK2UyLmhlYXBfbGVuXSA9IHUyID0gcjMsIGUyLmRlcHRoW3IzXSA9IDApIDogczNbMiAqIHIzICsgMV0gPSAwO1xuICAgICAgICBmb3IgKDsgZTIuaGVhcF9sZW4gPCAyOyApIHMzWzIgKiAoaTIgPSBlMi5oZWFwWysrZTIuaGVhcF9sZW5dID0gdTIgPCAyID8gKyt1MiA6IDApXSA9IDEsIGUyLmRlcHRoW2kyXSA9IDAsIGUyLm9wdF9sZW4tLSwgbzIgJiYgKGUyLnN0YXRpY19sZW4gLT0gYTJbMiAqIGkyICsgMV0pO1xuICAgICAgICBmb3IgKHQyLm1heF9jb2RlID0gdTIsIHIzID0gZTIuaGVhcF9sZW4gPj4gMTsgMSA8PSByMzsgcjMtLSkgRyhlMiwgczMsIHIzKTtcbiAgICAgICAgZm9yIChpMiA9IGgyOyByMyA9IGUyLmhlYXBbMV0sIGUyLmhlYXBbMV0gPSBlMi5oZWFwW2UyLmhlYXBfbGVuLS1dLCBHKGUyLCBzMywgMSksIG4yID0gZTIuaGVhcFsxXSwgZTIuaGVhcFstLWUyLmhlYXBfbWF4XSA9IHIzLCBlMi5oZWFwWy0tZTIuaGVhcF9tYXhdID0gbjIsIHMzWzIgKiBpMl0gPSBzM1syICogcjNdICsgczNbMiAqIG4yXSwgZTIuZGVwdGhbaTJdID0gKGUyLmRlcHRoW3IzXSA+PSBlMi5kZXB0aFtuMl0gPyBlMi5kZXB0aFtyM10gOiBlMi5kZXB0aFtuMl0pICsgMSwgczNbMiAqIHIzICsgMV0gPSBzM1syICogbjIgKyAxXSA9IGkyLCBlMi5oZWFwWzFdID0gaTIrKywgRyhlMiwgczMsIDEpLCAyIDw9IGUyLmhlYXBfbGVuOyApIDtcbiAgICAgICAgZTIuaGVhcFstLWUyLmhlYXBfbWF4XSA9IGUyLmhlYXBbMV0sIGZ1bmN0aW9uKGUzLCB0Mykge1xuICAgICAgICAgIHZhciByNCwgbjMsIGkzLCBzNCwgYTMsIG8zLCBoMyA9IHQzLmR5bl90cmVlLCB1MyA9IHQzLm1heF9jb2RlLCBsMiA9IHQzLnN0YXRfZGVzYy5zdGF0aWNfdHJlZSwgZjMgPSB0My5zdGF0X2Rlc2MuaGFzX3N0cmVlLCBjMiA9IHQzLnN0YXRfZGVzYy5leHRyYV9iaXRzLCBkMiA9IHQzLnN0YXRfZGVzYy5leHRyYV9iYXNlLCBwMiA9IHQzLnN0YXRfZGVzYy5tYXhfbGVuZ3RoLCBtMiA9IDA7XG4gICAgICAgICAgZm9yIChzNCA9IDA7IHM0IDw9IGc7IHM0KyspIGUzLmJsX2NvdW50W3M0XSA9IDA7XG4gICAgICAgICAgZm9yIChoM1syICogZTMuaGVhcFtlMy5oZWFwX21heF0gKyAxXSA9IDAsIHI0ID0gZTMuaGVhcF9tYXggKyAxOyByNCA8IF87IHI0KyspIHAyIDwgKHM0ID0gaDNbMiAqIGgzWzIgKiAobjMgPSBlMy5oZWFwW3I0XSkgKyAxXSArIDFdICsgMSkgJiYgKHM0ID0gcDIsIG0yKyspLCBoM1syICogbjMgKyAxXSA9IHM0LCB1MyA8IG4zIHx8IChlMy5ibF9jb3VudFtzNF0rKywgYTMgPSAwLCBkMiA8PSBuMyAmJiAoYTMgPSBjMltuMyAtIGQyXSksIG8zID0gaDNbMiAqIG4zXSwgZTMub3B0X2xlbiArPSBvMyAqIChzNCArIGEzKSwgZjMgJiYgKGUzLnN0YXRpY19sZW4gKz0gbzMgKiAobDJbMiAqIG4zICsgMV0gKyBhMykpKTtcbiAgICAgICAgICBpZiAoMCAhPT0gbTIpIHtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgZm9yIChzNCA9IHAyIC0gMTsgMCA9PT0gZTMuYmxfY291bnRbczRdOyApIHM0LS07XG4gICAgICAgICAgICAgIGUzLmJsX2NvdW50W3M0XS0tLCBlMy5ibF9jb3VudFtzNCArIDFdICs9IDIsIGUzLmJsX2NvdW50W3AyXS0tLCBtMiAtPSAyO1xuICAgICAgICAgICAgfSB3aGlsZSAoMCA8IG0yKTtcbiAgICAgICAgICAgIGZvciAoczQgPSBwMjsgMCAhPT0gczQ7IHM0LS0pIGZvciAobjMgPSBlMy5ibF9jb3VudFtzNF07IDAgIT09IG4zOyApIHUzIDwgKGkzID0gZTMuaGVhcFstLXI0XSkgfHwgKGgzWzIgKiBpMyArIDFdICE9PSBzNCAmJiAoZTMub3B0X2xlbiArPSAoczQgLSBoM1syICogaTMgKyAxXSkgKiBoM1syICogaTNdLCBoM1syICogaTMgKyAxXSA9IHM0KSwgbjMtLSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KGUyLCB0MiksIFooczMsIHUyLCBlMi5ibF9jb3VudCk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBYKGUyLCB0MiwgcjMpIHtcbiAgICAgICAgdmFyIG4yLCBpMiwgczMgPSAtMSwgYTIgPSB0MlsxXSwgbzIgPSAwLCBoMiA9IDcsIHUyID0gNDtcbiAgICAgICAgZm9yICgwID09PSBhMiAmJiAoaDIgPSAxMzgsIHUyID0gMyksIHQyWzIgKiAocjMgKyAxKSArIDFdID0gNjU1MzUsIG4yID0gMDsgbjIgPD0gcjM7IG4yKyspIGkyID0gYTIsIGEyID0gdDJbMiAqIChuMiArIDEpICsgMV0sICsrbzIgPCBoMiAmJiBpMiA9PT0gYTIgfHwgKG8yIDwgdTIgPyBlMi5ibF90cmVlWzIgKiBpMl0gKz0gbzIgOiAwICE9PSBpMiA/IChpMiAhPT0gczMgJiYgZTIuYmxfdHJlZVsyICogaTJdKyssIGUyLmJsX3RyZWVbMiAqIGJdKyspIDogbzIgPD0gMTAgPyBlMi5ibF90cmVlWzIgKiB2XSsrIDogZTIuYmxfdHJlZVsyICogeV0rKywgczMgPSBpMiwgdTIgPSAobzIgPSAwKSA9PT0gYTIgPyAoaDIgPSAxMzgsIDMpIDogaTIgPT09IGEyID8gKGgyID0gNiwgMykgOiAoaDIgPSA3LCA0KSk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBWKGUyLCB0MiwgcjMpIHtcbiAgICAgICAgdmFyIG4yLCBpMiwgczMgPSAtMSwgYTIgPSB0MlsxXSwgbzIgPSAwLCBoMiA9IDcsIHUyID0gNDtcbiAgICAgICAgZm9yICgwID09PSBhMiAmJiAoaDIgPSAxMzgsIHUyID0gMyksIG4yID0gMDsgbjIgPD0gcjM7IG4yKyspIGlmIChpMiA9IGEyLCBhMiA9IHQyWzIgKiAobjIgKyAxKSArIDFdLCAhKCsrbzIgPCBoMiAmJiBpMiA9PT0gYTIpKSB7XG4gICAgICAgICAgaWYgKG8yIDwgdTIpIGZvciAoOyBMKGUyLCBpMiwgZTIuYmxfdHJlZSksIDAgIT0gLS1vMjsgKSA7XG4gICAgICAgICAgZWxzZSAwICE9PSBpMiA/IChpMiAhPT0gczMgJiYgKEwoZTIsIGkyLCBlMi5ibF90cmVlKSwgbzItLSksIEwoZTIsIGIsIGUyLmJsX3RyZWUpLCBQKGUyLCBvMiAtIDMsIDIpKSA6IG8yIDw9IDEwID8gKEwoZTIsIHYsIGUyLmJsX3RyZWUpLCBQKGUyLCBvMiAtIDMsIDMpKSA6IChMKGUyLCB5LCBlMi5ibF90cmVlKSwgUChlMiwgbzIgLSAxMSwgNykpO1xuICAgICAgICAgIHMzID0gaTIsIHUyID0gKG8yID0gMCkgPT09IGEyID8gKGgyID0gMTM4LCAzKSA6IGkyID09PSBhMiA/IChoMiA9IDYsIDMpIDogKGgyID0gNywgNCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG4oVCk7XG4gICAgICB2YXIgcSA9IGZhbHNlO1xuICAgICAgZnVuY3Rpb24gSihlMiwgdDIsIHIzLCBuMikge1xuICAgICAgICBQKGUyLCAoczIgPDwgMSkgKyAobjIgPyAxIDogMCksIDMpLCBmdW5jdGlvbihlMywgdDMsIHI0LCBuMykge1xuICAgICAgICAgIE0oZTMpLCBVKGUzLCByNCksIFUoZTMsIH5yNCksIGkuYXJyYXlTZXQoZTMucGVuZGluZ19idWYsIGUzLndpbmRvdywgdDMsIHI0LCBlMy5wZW5kaW5nKSwgZTMucGVuZGluZyArPSByNDtcbiAgICAgICAgfShlMiwgdDIsIHIzKTtcbiAgICAgIH1cbiAgICAgIHIyLl90cl9pbml0ID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgcSB8fCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGUzLCB0MiwgcjMsIG4yLCBpMiwgczMgPSBuZXcgQXJyYXkoZyArIDEpO1xuICAgICAgICAgIGZvciAobjIgPSByMyA9IDA7IG4yIDwgYSAtIDE7IG4yKyspIGZvciAoSVtuMl0gPSByMywgZTMgPSAwOyBlMyA8IDEgPDwgd1tuMl07IGUzKyspIEFbcjMrK10gPSBuMjtcbiAgICAgICAgICBmb3IgKEFbcjMgLSAxXSA9IG4yLCBuMiA9IGkyID0gMDsgbjIgPCAxNjsgbjIrKykgZm9yIChUW24yXSA9IGkyLCBlMyA9IDA7IGUzIDwgMSA8PCBrW24yXTsgZTMrKykgRVtpMisrXSA9IG4yO1xuICAgICAgICAgIGZvciAoaTIgPj49IDc7IG4yIDwgZjI7IG4yKyspIGZvciAoVFtuMl0gPSBpMiA8PCA3LCBlMyA9IDA7IGUzIDwgMSA8PCBrW24yXSAtIDc7IGUzKyspIEVbMjU2ICsgaTIrK10gPSBuMjtcbiAgICAgICAgICBmb3IgKHQyID0gMDsgdDIgPD0gZzsgdDIrKykgczNbdDJdID0gMDtcbiAgICAgICAgICBmb3IgKGUzID0gMDsgZTMgPD0gMTQzOyApIHpbMiAqIGUzICsgMV0gPSA4LCBlMysrLCBzM1s4XSsrO1xuICAgICAgICAgIGZvciAoOyBlMyA8PSAyNTU7ICkgelsyICogZTMgKyAxXSA9IDksIGUzKyssIHMzWzldKys7XG4gICAgICAgICAgZm9yICg7IGUzIDw9IDI3OTsgKSB6WzIgKiBlMyArIDFdID0gNywgZTMrKywgczNbN10rKztcbiAgICAgICAgICBmb3IgKDsgZTMgPD0gMjg3OyApIHpbMiAqIGUzICsgMV0gPSA4LCBlMysrLCBzM1s4XSsrO1xuICAgICAgICAgIGZvciAoWih6LCBsICsgMSwgczMpLCBlMyA9IDA7IGUzIDwgZjI7IGUzKyspIENbMiAqIGUzICsgMV0gPSA1LCBDWzIgKiBlM10gPSBqKGUzLCA1KTtcbiAgICAgICAgICBPID0gbmV3IEQoeiwgdywgdSArIDEsIGwsIGcpLCBCID0gbmV3IEQoQywgaywgMCwgZjIsIGcpLCBSMiA9IG5ldyBEKG5ldyBBcnJheSgwKSwgeCwgMCwgYywgcCk7XG4gICAgICAgIH0oKSwgcSA9IHRydWUpLCBlMi5sX2Rlc2MgPSBuZXcgRihlMi5keW5fbHRyZWUsIE8pLCBlMi5kX2Rlc2MgPSBuZXcgRihlMi5keW5fZHRyZWUsIEIpLCBlMi5ibF9kZXNjID0gbmV3IEYoZTIuYmxfdHJlZSwgUjIpLCBlMi5iaV9idWYgPSAwLCBlMi5iaV92YWxpZCA9IDAsIFcoZTIpO1xuICAgICAgfSwgcjIuX3RyX3N0b3JlZF9ibG9jayA9IEosIHIyLl90cl9mbHVzaF9ibG9jayA9IGZ1bmN0aW9uKGUyLCB0MiwgcjMsIG4yKSB7XG4gICAgICAgIHZhciBpMiwgczMsIGEyID0gMDtcbiAgICAgICAgMCA8IGUyLmxldmVsID8gKDIgPT09IGUyLnN0cm0uZGF0YV90eXBlICYmIChlMi5zdHJtLmRhdGFfdHlwZSA9IGZ1bmN0aW9uKGUzKSB7XG4gICAgICAgICAgdmFyIHQzLCByNCA9IDQwOTM2MjQ0NDc7XG4gICAgICAgICAgZm9yICh0MyA9IDA7IHQzIDw9IDMxOyB0MysrLCByNCA+Pj49IDEpIGlmICgxICYgcjQgJiYgMCAhPT0gZTMuZHluX2x0cmVlWzIgKiB0M10pIHJldHVybiBvO1xuICAgICAgICAgIGlmICgwICE9PSBlMy5keW5fbHRyZWVbMThdIHx8IDAgIT09IGUzLmR5bl9sdHJlZVsyMF0gfHwgMCAhPT0gZTMuZHluX2x0cmVlWzI2XSkgcmV0dXJuIGg7XG4gICAgICAgICAgZm9yICh0MyA9IDMyOyB0MyA8IHU7IHQzKyspIGlmICgwICE9PSBlMy5keW5fbHRyZWVbMiAqIHQzXSkgcmV0dXJuIGg7XG4gICAgICAgICAgcmV0dXJuIG87XG4gICAgICAgIH0oZTIpKSwgWShlMiwgZTIubF9kZXNjKSwgWShlMiwgZTIuZF9kZXNjKSwgYTIgPSBmdW5jdGlvbihlMykge1xuICAgICAgICAgIHZhciB0MztcbiAgICAgICAgICBmb3IgKFgoZTMsIGUzLmR5bl9sdHJlZSwgZTMubF9kZXNjLm1heF9jb2RlKSwgWChlMywgZTMuZHluX2R0cmVlLCBlMy5kX2Rlc2MubWF4X2NvZGUpLCBZKGUzLCBlMy5ibF9kZXNjKSwgdDMgPSBjIC0gMTsgMyA8PSB0MyAmJiAwID09PSBlMy5ibF90cmVlWzIgKiBTW3QzXSArIDFdOyB0My0tKSA7XG4gICAgICAgICAgcmV0dXJuIGUzLm9wdF9sZW4gKz0gMyAqICh0MyArIDEpICsgNSArIDUgKyA0LCB0MztcbiAgICAgICAgfShlMiksIGkyID0gZTIub3B0X2xlbiArIDMgKyA3ID4+PiAzLCAoczMgPSBlMi5zdGF0aWNfbGVuICsgMyArIDcgPj4+IDMpIDw9IGkyICYmIChpMiA9IHMzKSkgOiBpMiA9IHMzID0gcjMgKyA1LCByMyArIDQgPD0gaTIgJiYgLTEgIT09IHQyID8gSihlMiwgdDIsIHIzLCBuMikgOiA0ID09PSBlMi5zdHJhdGVneSB8fCBzMyA9PT0gaTIgPyAoUChlMiwgMiArIChuMiA/IDEgOiAwKSwgMyksIEsyKGUyLCB6LCBDKSkgOiAoUChlMiwgNCArIChuMiA/IDEgOiAwKSwgMyksIGZ1bmN0aW9uKGUzLCB0MywgcjQsIG4zKSB7XG4gICAgICAgICAgdmFyIGkzO1xuICAgICAgICAgIGZvciAoUChlMywgdDMgLSAyNTcsIDUpLCBQKGUzLCByNCAtIDEsIDUpLCBQKGUzLCBuMyAtIDQsIDQpLCBpMyA9IDA7IGkzIDwgbjM7IGkzKyspIFAoZTMsIGUzLmJsX3RyZWVbMiAqIFNbaTNdICsgMV0sIDMpO1xuICAgICAgICAgIFYoZTMsIGUzLmR5bl9sdHJlZSwgdDMgLSAxKSwgVihlMywgZTMuZHluX2R0cmVlLCByNCAtIDEpO1xuICAgICAgICB9KGUyLCBlMi5sX2Rlc2MubWF4X2NvZGUgKyAxLCBlMi5kX2Rlc2MubWF4X2NvZGUgKyAxLCBhMiArIDEpLCBLMihlMiwgZTIuZHluX2x0cmVlLCBlMi5keW5fZHRyZWUpKSwgVyhlMiksIG4yICYmIE0oZTIpO1xuICAgICAgfSwgcjIuX3RyX3RhbGx5ID0gZnVuY3Rpb24oZTIsIHQyLCByMykge1xuICAgICAgICByZXR1cm4gZTIucGVuZGluZ19idWZbZTIuZF9idWYgKyAyICogZTIubGFzdF9saXRdID0gdDIgPj4+IDggJiAyNTUsIGUyLnBlbmRpbmdfYnVmW2UyLmRfYnVmICsgMiAqIGUyLmxhc3RfbGl0ICsgMV0gPSAyNTUgJiB0MiwgZTIucGVuZGluZ19idWZbZTIubF9idWYgKyBlMi5sYXN0X2xpdF0gPSAyNTUgJiByMywgZTIubGFzdF9saXQrKywgMCA9PT0gdDIgPyBlMi5keW5fbHRyZWVbMiAqIHIzXSsrIDogKGUyLm1hdGNoZXMrKywgdDItLSwgZTIuZHluX2x0cmVlWzIgKiAoQVtyM10gKyB1ICsgMSldKyssIGUyLmR5bl9kdHJlZVsyICogTih0MildKyspLCBlMi5sYXN0X2xpdCA9PT0gZTIubGl0X2J1ZnNpemUgLSAxO1xuICAgICAgfSwgcjIuX3RyX2FsaWduID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgUChlMiwgMiwgMyksIEwoZTIsIG0sIHopLCBmdW5jdGlvbihlMykge1xuICAgICAgICAgIDE2ID09PSBlMy5iaV92YWxpZCA/IChVKGUzLCBlMy5iaV9idWYpLCBlMy5iaV9idWYgPSAwLCBlMy5iaV92YWxpZCA9IDApIDogOCA8PSBlMy5iaV92YWxpZCAmJiAoZTMucGVuZGluZ19idWZbZTMucGVuZGluZysrXSA9IDI1NSAmIGUzLmJpX2J1ZiwgZTMuYmlfYnVmID4+PSA4LCBlMy5iaV92YWxpZCAtPSA4KTtcbiAgICAgICAgfShlMik7XG4gICAgICB9O1xuICAgIH0sIHsgXCIuLi91dGlscy9jb21tb25cIjogNDEgfV0sIDUzOiBbZnVuY3Rpb24oZSwgdCwgcjIpIHtcbiAgICAgIHQuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmlucHV0ID0gbnVsbCwgdGhpcy5uZXh0X2luID0gMCwgdGhpcy5hdmFpbF9pbiA9IDAsIHRoaXMudG90YWxfaW4gPSAwLCB0aGlzLm91dHB1dCA9IG51bGwsIHRoaXMubmV4dF9vdXQgPSAwLCB0aGlzLmF2YWlsX291dCA9IDAsIHRoaXMudG90YWxfb3V0ID0gMCwgdGhpcy5tc2cgPSBcIlwiLCB0aGlzLnN0YXRlID0gbnVsbCwgdGhpcy5kYXRhX3R5cGUgPSAyLCB0aGlzLmFkbGVyID0gMDtcbiAgICAgIH07XG4gICAgfSwge31dLCA1NDogW2Z1bmN0aW9uKGUsIHQsIHIyKSB7XG4gICAgICAoZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgIWZ1bmN0aW9uKHIzLCBuKSB7XG4gICAgICAgICAgaWYgKCFyMy5zZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgICAgIHZhciBpLCBzMiwgdDIsIGEsIG8gPSAxLCBoID0ge30sIHUgPSBmYWxzZSwgbCA9IHIzLmRvY3VtZW50LCBlMyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YocjMpO1xuICAgICAgICAgICAgZTMgPSBlMyAmJiBlMy5zZXRUaW1lb3V0ID8gZTMgOiByMywgaSA9IFwiW29iamVjdCBwcm9jZXNzXVwiID09PSB7fS50b1N0cmluZy5jYWxsKHIzLnByb2Nlc3MpID8gZnVuY3Rpb24oZTQpIHtcbiAgICAgICAgICAgICAgcHJvY2VzcyQxLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGMoZTQpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKHIzLnBvc3RNZXNzYWdlICYmICFyMy5pbXBvcnRTY3JpcHRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGU0ID0gdHJ1ZSwgdDMgPSByMy5vbm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHIzLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgZTQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9LCByMy5wb3N0TWVzc2FnZShcIlwiLCBcIipcIiksIHIzLm9ubWVzc2FnZSA9IHQzLCBlNDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSgpID8gKGEgPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIiwgcjMuYWRkRXZlbnRMaXN0ZW5lciA/IHIzLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGQsIGZhbHNlKSA6IHIzLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIGQpLCBmdW5jdGlvbihlNCkge1xuICAgICAgICAgICAgICByMy5wb3N0TWVzc2FnZShhICsgZTQsIFwiKlwiKTtcbiAgICAgICAgICAgIH0pIDogcjMuTWVzc2FnZUNoYW5uZWwgPyAoKHQyID0gbmV3IE1lc3NhZ2VDaGFubmVsKCkpLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGU0KSB7XG4gICAgICAgICAgICAgIGMoZTQuZGF0YSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbihlNCkge1xuICAgICAgICAgICAgICB0Mi5wb3J0Mi5wb3N0TWVzc2FnZShlNCk7XG4gICAgICAgICAgICB9KSA6IGwgJiYgXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiBpbiBsLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikgPyAoczIgPSBsLmRvY3VtZW50RWxlbWVudCwgZnVuY3Rpb24oZTQpIHtcbiAgICAgICAgICAgICAgdmFyIHQzID0gbC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgICB0My5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjKGU0KSwgdDMub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbCwgczIucmVtb3ZlQ2hpbGQodDMpLCB0MyA9IG51bGw7XG4gICAgICAgICAgICAgIH0sIHMyLmFwcGVuZENoaWxkKHQzKTtcbiAgICAgICAgICAgIH0pIDogZnVuY3Rpb24oZTQpIHtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChjLCAwLCBlNCk7XG4gICAgICAgICAgICB9LCBlMy5zZXRJbW1lZGlhdGUgPSBmdW5jdGlvbihlNCkge1xuICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGU0ICYmIChlNCA9IG5ldyBGdW5jdGlvbihcIlwiICsgZTQpKTtcbiAgICAgICAgICAgICAgZm9yICh2YXIgdDMgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpLCByNCA9IDA7IHI0IDwgdDMubGVuZ3RoOyByNCsrKSB0M1tyNF0gPSBhcmd1bWVudHNbcjQgKyAxXTtcbiAgICAgICAgICAgICAgdmFyIG4yID0geyBjYWxsYmFjazogZTQsIGFyZ3M6IHQzIH07XG4gICAgICAgICAgICAgIHJldHVybiBoW29dID0gbjIsIGkobyksIG8rKztcbiAgICAgICAgICAgIH0sIGUzLmNsZWFySW1tZWRpYXRlID0gZjI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGYyKGU0KSB7XG4gICAgICAgICAgICBkZWxldGUgaFtlNF07XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGMoZTQpIHtcbiAgICAgICAgICAgIGlmICh1KSBzZXRUaW1lb3V0KGMsIDAsIGU0KTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgdDMgPSBoW2U0XTtcbiAgICAgICAgICAgICAgaWYgKHQzKSB7XG4gICAgICAgICAgICAgICAgdSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICFmdW5jdGlvbihlNSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdDQgPSBlNS5jYWxsYmFjaywgcjQgPSBlNS5hcmdzO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHI0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHQ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICB0NChyNFswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0NChyNFswXSwgcjRbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgdDQocjRbMF0sIHI0WzFdLCByNFsyXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgdDQuYXBwbHkobiwgcjQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KHQzKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgZjIoZTQpLCB1ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGQoZTQpIHtcbiAgICAgICAgICAgIGU0LnNvdXJjZSA9PT0gcjMgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgZTQuZGF0YSAmJiAwID09PSBlNC5kYXRhLmluZGV4T2YoYSkgJiYgYygrZTQuZGF0YS5zbGljZShhLmxlbmd0aCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfShcInVuZGVmaW5lZFwiID09IHR5cGVvZiBzZWxmID8gdm9pZCAwID09PSBlMiA/IHRoaXMgOiBlMiA6IHNlbGYpO1xuICAgICAgfSkuY2FsbCh0aGlzLCBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBjb21tb25qc0dsb2JhbCA/IGNvbW1vbmpzR2xvYmFsIDogXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2Ygc2VsZiA/IHNlbGYgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiB3aW5kb3cgPyB3aW5kb3cgOiB7fSk7XG4gICAgfSwge31dIH0sIHt9LCBbMTBdKSgxMCk7XG4gIH0pO1xufSkoanN6aXBfbWluKTtcbnZhciBqc3ppcF9taW5FeHBvcnRzID0ganN6aXBfbWluLmV4cG9ydHM7XG5jb25zdCBKU1ppcCA9IC8qIEBfX1BVUkVfXyAqLyBnZXREZWZhdWx0RXhwb3J0RnJvbUNqcyQxKGpzemlwX21pbkV4cG9ydHMpO1xudmFyIHhtbCQyID0geyBleHBvcnRzOiB7fSB9O1xudmFyIFhNTF9DSEFSQUNURVJfTUFQID0ge1xuICBcIiZcIjogXCImYW1wO1wiLFxuICAnXCInOiBcIiZxdW90O1wiLFxuICBcIidcIjogXCImYXBvcztcIixcbiAgXCI8XCI6IFwiJmx0O1wiLFxuICBcIj5cIjogXCImZ3Q7XCJcbn07XG5mdW5jdGlvbiBlc2NhcGVGb3JYTUwkMShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZyAmJiBzdHJpbmcucmVwbGFjZSA/IHN0cmluZy5yZXBsYWNlKC8oWyZcIjw+J10pL2csIGZ1bmN0aW9uKHN0ciwgaXRlbSkge1xuICAgIHJldHVybiBYTUxfQ0hBUkFDVEVSX01BUFtpdGVtXTtcbiAgfSkgOiBzdHJpbmc7XG59XG52YXIgZXNjYXBlRm9yWE1MXzEgPSBlc2NhcGVGb3JYTUwkMTtcbnZhciBlc2NhcGVGb3JYTUwgPSBlc2NhcGVGb3JYTUxfMTtcbnZhciBTdHJlYW0gPSBzdHJlYW1Ccm93c2VyaWZ5LlN0cmVhbTtcbnZhciBERUZBVUxUX0lOREVOVCA9IFwiICAgIFwiO1xuZnVuY3Rpb24geG1sKGlucHV0LCBvcHRpb25zMikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMyICE9PSBcIm9iamVjdFwiKSB7XG4gICAgb3B0aW9uczIgPSB7XG4gICAgICBpbmRlbnQ6IG9wdGlvbnMyXG4gICAgfTtcbiAgfVxuICB2YXIgc3RyZWFtID0gb3B0aW9uczIuc3RyZWFtID8gbmV3IFN0cmVhbSgpIDogbnVsbCwgb3V0cHV0ID0gXCJcIiwgaW50ZXJydXB0ZWQgPSBmYWxzZSwgaW5kZW50ID0gIW9wdGlvbnMyLmluZGVudCA/IFwiXCIgOiBvcHRpb25zMi5pbmRlbnQgPT09IHRydWUgPyBERUZBVUxUX0lOREVOVCA6IG9wdGlvbnMyLmluZGVudCwgaW5zdGFudCA9IHRydWU7XG4gIGZ1bmN0aW9uIGRlbGF5KGZ1bmMpIHtcbiAgICBpZiAoIWluc3RhbnQpIHtcbiAgICAgIGZ1bmMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvY2VzcyQxLm5leHRUaWNrKGZ1bmMpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBhcHBlbmQoaW50ZXJydXB0LCBvdXQpIHtcbiAgICBpZiAob3V0ICE9PSB2b2lkIDApIHtcbiAgICAgIG91dHB1dCArPSBvdXQ7XG4gICAgfVxuICAgIGlmIChpbnRlcnJ1cHQgJiYgIWludGVycnVwdGVkKSB7XG4gICAgICBzdHJlYW0gPSBzdHJlYW0gfHwgbmV3IFN0cmVhbSgpO1xuICAgICAgaW50ZXJydXB0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoaW50ZXJydXB0ICYmIGludGVycnVwdGVkKSB7XG4gICAgICB2YXIgZGF0YSA9IG91dHB1dDtcbiAgICAgIGRlbGF5KGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0uZW1pdChcImRhdGFcIiwgZGF0YSk7XG4gICAgICB9KTtcbiAgICAgIG91dHB1dCA9IFwiXCI7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGFkZCh2YWx1ZSwgbGFzdCkge1xuICAgIGZvcm1hdChhcHBlbmQsIHJlc29sdmUodmFsdWUsIGluZGVudCwgaW5kZW50ID8gMSA6IDApLCBsYXN0KTtcbiAgfVxuICBmdW5jdGlvbiBlbmQoKSB7XG4gICAgaWYgKHN0cmVhbSkge1xuICAgICAgdmFyIGRhdGEgPSBvdXRwdXQ7XG4gICAgICBkZWxheShmdW5jdGlvbigpIHtcbiAgICAgICAgc3RyZWFtLmVtaXQoXCJkYXRhXCIsIGRhdGEpO1xuICAgICAgICBzdHJlYW0uZW1pdChcImVuZFwiKTtcbiAgICAgICAgc3RyZWFtLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgICAgIHN0cmVhbS5lbWl0KFwiY2xvc2VcIik7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gYWRkWG1sRGVjbGFyYXRpb24oZGVjbGFyYXRpb24pIHtcbiAgICB2YXIgZW5jb2RpbmcgPSBkZWNsYXJhdGlvbi5lbmNvZGluZyB8fCBcIlVURi04XCIsIGF0dHIgPSB7IHZlcnNpb246IFwiMS4wXCIsIGVuY29kaW5nIH07XG4gICAgaWYgKGRlY2xhcmF0aW9uLnN0YW5kYWxvbmUpIHtcbiAgICAgIGF0dHIuc3RhbmRhbG9uZSA9IGRlY2xhcmF0aW9uLnN0YW5kYWxvbmU7XG4gICAgfVxuICAgIGFkZCh7IFwiP3htbFwiOiB7IF9hdHRyOiBhdHRyIH0gfSk7XG4gICAgb3V0cHV0ID0gb3V0cHV0LnJlcGxhY2UoXCIvPlwiLCBcIj8+XCIpO1xuICB9XG4gIGRlbGF5KGZ1bmN0aW9uKCkge1xuICAgIGluc3RhbnQgPSBmYWxzZTtcbiAgfSk7XG4gIGlmIChvcHRpb25zMi5kZWNsYXJhdGlvbikge1xuICAgIGFkZFhtbERlY2xhcmF0aW9uKG9wdGlvbnMyLmRlY2xhcmF0aW9uKTtcbiAgfVxuICBpZiAoaW5wdXQgJiYgaW5wdXQuZm9yRWFjaCkge1xuICAgIGlucHV0LmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGkpIHtcbiAgICAgIHZhciBsYXN0O1xuICAgICAgaWYgKGkgKyAxID09PSBpbnB1dC5sZW5ndGgpXG4gICAgICAgIGxhc3QgPSBlbmQ7XG4gICAgICBhZGQodmFsdWUsIGxhc3QpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGFkZChpbnB1dCwgZW5kKTtcbiAgfVxuICBpZiAoc3RyZWFtKSB7XG4gICAgc3RyZWFtLnJlYWRhYmxlID0gdHJ1ZTtcbiAgICByZXR1cm4gc3RyZWFtO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5mdW5jdGlvbiBlbGVtZW50KCkge1xuICB2YXIgaW5wdXQgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLCBzZWxmMiA9IHtcbiAgICBfZWxlbTogcmVzb2x2ZShpbnB1dClcbiAgfTtcbiAgc2VsZjIucHVzaCA9IGZ1bmN0aW9uKGlucHV0Mikge1xuICAgIGlmICghdGhpcy5hcHBlbmQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vdCBhc3NpZ25lZCB0byBhIHBhcmVudCFcIik7XG4gICAgfVxuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICB2YXIgaW5kZW50ID0gdGhpcy5fZWxlbS5pbmRlbnQ7XG4gICAgZm9ybWF0KFxuICAgICAgdGhpcy5hcHBlbmQsXG4gICAgICByZXNvbHZlKFxuICAgICAgICBpbnB1dDIsXG4gICAgICAgIGluZGVudCxcbiAgICAgICAgdGhpcy5fZWxlbS5pY291bnQgKyAoaW5kZW50ID8gMSA6IDApXG4gICAgICApLFxuICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoYXQuYXBwZW5kKHRydWUpO1xuICAgICAgfVxuICAgICk7XG4gIH07XG4gIHNlbGYyLmNsb3NlID0gZnVuY3Rpb24oaW5wdXQyKSB7XG4gICAgaWYgKGlucHV0MiAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnB1c2goaW5wdXQyKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuZW5kKSB7XG4gICAgICB0aGlzLmVuZCgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHNlbGYyO1xufVxuZnVuY3Rpb24gY3JlYXRlX2luZGVudChjaGFyYWN0ZXIsIGNvdW50KSB7XG4gIHJldHVybiBuZXcgQXJyYXkoY291bnQgfHwgMCkuam9pbihjaGFyYWN0ZXIgfHwgXCJcIik7XG59XG5mdW5jdGlvbiByZXNvbHZlKGRhdGEsIGluZGVudCwgaW5kZW50X2NvdW50KSB7XG4gIGluZGVudF9jb3VudCA9IGluZGVudF9jb3VudCB8fCAwO1xuICB2YXIgaW5kZW50X3NwYWNlcyA9IGNyZWF0ZV9pbmRlbnQoaW5kZW50LCBpbmRlbnRfY291bnQpO1xuICB2YXIgbmFtZTtcbiAgdmFyIHZhbHVlcyA9IGRhdGE7XG4gIHZhciBpbnRlcnJ1cHQgPSBmYWxzZTtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKTtcbiAgICBuYW1lID0ga2V5c1swXTtcbiAgICB2YWx1ZXMgPSBkYXRhW25hbWVdO1xuICAgIGlmICh2YWx1ZXMgJiYgdmFsdWVzLl9lbGVtKSB7XG4gICAgICB2YWx1ZXMuX2VsZW0ubmFtZSA9IG5hbWU7XG4gICAgICB2YWx1ZXMuX2VsZW0uaWNvdW50ID0gaW5kZW50X2NvdW50O1xuICAgICAgdmFsdWVzLl9lbGVtLmluZGVudCA9IGluZGVudDtcbiAgICAgIHZhbHVlcy5fZWxlbS5pbmRlbnRzID0gaW5kZW50X3NwYWNlcztcbiAgICAgIHZhbHVlcy5fZWxlbS5pbnRlcnJ1cHQgPSB2YWx1ZXM7XG4gICAgICByZXR1cm4gdmFsdWVzLl9lbGVtO1xuICAgIH1cbiAgfVxuICB2YXIgYXR0cmlidXRlcyA9IFtdLCBjb250ZW50ID0gW107XG4gIHZhciBpc1N0cmluZ0NvbnRlbnQ7XG4gIGZ1bmN0aW9uIGdldF9hdHRyaWJ1dGVzKG9iaikge1xuICAgIHZhciBrZXlzMiA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAga2V5czIuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgIGF0dHJpYnV0ZXMucHVzaChhdHRyaWJ1dGUoa2V5LCBvYmpba2V5XSkpO1xuICAgIH0pO1xuICB9XG4gIHN3aXRjaCAodHlwZW9mIHZhbHVlcykge1xuICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgIGlmICh2YWx1ZXMgPT09IG51bGwpIGJyZWFrO1xuICAgICAgaWYgKHZhbHVlcy5fYXR0cikge1xuICAgICAgICBnZXRfYXR0cmlidXRlcyh2YWx1ZXMuX2F0dHIpO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlcy5fY2RhdGEpIHtcbiAgICAgICAgY29udGVudC5wdXNoKFxuICAgICAgICAgIChcIjwhW0NEQVRBW1wiICsgdmFsdWVzLl9jZGF0YSkucmVwbGFjZSgvXFxdXFxdPi9nLCBcIl1dXV0+PCFbQ0RBVEFbPlwiKSArIFwiXV0+XCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZXMuZm9yRWFjaCkge1xuICAgICAgICBpc1N0cmluZ0NvbnRlbnQgPSBmYWxzZTtcbiAgICAgICAgY29udGVudC5wdXNoKFwiXCIpO1xuICAgICAgICB2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgdmFyIF9uYW1lID0gT2JqZWN0LmtleXModmFsdWUpWzBdO1xuICAgICAgICAgICAgaWYgKF9uYW1lID09IFwiX2F0dHJcIikge1xuICAgICAgICAgICAgICBnZXRfYXR0cmlidXRlcyh2YWx1ZS5fYXR0cik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb250ZW50LnB1c2gocmVzb2x2ZShcbiAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICBpbmRlbnQsXG4gICAgICAgICAgICAgICAgaW5kZW50X2NvdW50ICsgMVxuICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29udGVudC5wb3AoKTtcbiAgICAgICAgICAgIGlzU3RyaW5nQ29udGVudCA9IHRydWU7XG4gICAgICAgICAgICBjb250ZW50LnB1c2goZXNjYXBlRm9yWE1MKHZhbHVlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFpc1N0cmluZ0NvbnRlbnQpIHtcbiAgICAgICAgICBjb250ZW50LnB1c2goXCJcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBjb250ZW50LnB1c2goZXNjYXBlRm9yWE1MKHZhbHVlcykpO1xuICB9XG4gIHJldHVybiB7XG4gICAgbmFtZSxcbiAgICBpbnRlcnJ1cHQsXG4gICAgYXR0cmlidXRlcyxcbiAgICBjb250ZW50LFxuICAgIGljb3VudDogaW5kZW50X2NvdW50LFxuICAgIGluZGVudHM6IGluZGVudF9zcGFjZXMsXG4gICAgaW5kZW50XG4gIH07XG59XG5mdW5jdGlvbiBmb3JtYXQoYXBwZW5kLCBlbGVtLCBlbmQpIHtcbiAgaWYgKHR5cGVvZiBlbGVtICE9IFwib2JqZWN0XCIpIHtcbiAgICByZXR1cm4gYXBwZW5kKGZhbHNlLCBlbGVtKTtcbiAgfVxuICB2YXIgbGVuID0gZWxlbS5pbnRlcnJ1cHQgPyAxIDogZWxlbS5jb250ZW50Lmxlbmd0aDtcbiAgZnVuY3Rpb24gcHJvY2VlZCgpIHtcbiAgICB3aGlsZSAoZWxlbS5jb250ZW50Lmxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gZWxlbS5jb250ZW50LnNoaWZ0KCk7XG4gICAgICBpZiAodmFsdWUgPT09IHZvaWQgMCkgY29udGludWU7XG4gICAgICBpZiAoaW50ZXJydXB0KHZhbHVlKSkgcmV0dXJuO1xuICAgICAgZm9ybWF0KGFwcGVuZCwgdmFsdWUpO1xuICAgIH1cbiAgICBhcHBlbmQoZmFsc2UsIChsZW4gPiAxID8gZWxlbS5pbmRlbnRzIDogXCJcIikgKyAoZWxlbS5uYW1lID8gXCI8L1wiICsgZWxlbS5uYW1lICsgXCI+XCIgOiBcIlwiKSArIChlbGVtLmluZGVudCAmJiAhZW5kID8gXCJcXG5cIiA6IFwiXCIpKTtcbiAgICBpZiAoZW5kKSB7XG4gICAgICBlbmQoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gaW50ZXJydXB0KHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlLmludGVycnVwdCkge1xuICAgICAgdmFsdWUuaW50ZXJydXB0LmFwcGVuZCA9IGFwcGVuZDtcbiAgICAgIHZhbHVlLmludGVycnVwdC5lbmQgPSBwcm9jZWVkO1xuICAgICAgdmFsdWUuaW50ZXJydXB0ID0gZmFsc2U7XG4gICAgICBhcHBlbmQodHJ1ZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGFwcGVuZChmYWxzZSwgZWxlbS5pbmRlbnRzICsgKGVsZW0ubmFtZSA/IFwiPFwiICsgZWxlbS5uYW1lIDogXCJcIikgKyAoZWxlbS5hdHRyaWJ1dGVzLmxlbmd0aCA/IFwiIFwiICsgZWxlbS5hdHRyaWJ1dGVzLmpvaW4oXCIgXCIpIDogXCJcIikgKyAobGVuID8gZWxlbS5uYW1lID8gXCI+XCIgOiBcIlwiIDogZWxlbS5uYW1lID8gXCIvPlwiIDogXCJcIikgKyAoZWxlbS5pbmRlbnQgJiYgbGVuID4gMSA/IFwiXFxuXCIgOiBcIlwiKSk7XG4gIGlmICghbGVuKSB7XG4gICAgcmV0dXJuIGFwcGVuZChmYWxzZSwgZWxlbS5pbmRlbnQgPyBcIlxcblwiIDogXCJcIik7XG4gIH1cbiAgaWYgKCFpbnRlcnJ1cHQoZWxlbSkpIHtcbiAgICBwcm9jZWVkKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGF0dHJpYnV0ZShrZXksIHZhbHVlKSB7XG4gIHJldHVybiBrZXkgKyAnPVwiJyArIGVzY2FwZUZvclhNTCh2YWx1ZSkgKyAnXCInO1xufVxueG1sJDIuZXhwb3J0cyA9IHhtbDtcbnhtbCQyLmV4cG9ydHMuZWxlbWVudCA9IHhtbCQyLmV4cG9ydHMuRWxlbWVudCA9IGVsZW1lbnQ7XG52YXIgeG1sRXhwb3J0cyA9IHhtbCQyLmV4cG9ydHM7XG5jb25zdCB4bWwkMSA9IC8qIEBfX1BVUkVfXyAqLyBnZXREZWZhdWx0RXhwb3J0RnJvbUNqcyQxKHhtbEV4cG9ydHMpO1xuY29uc3Qgb2JmdXNjYXRlZFN0YXJ0T2Zmc2V0ID0gMDtcbmNvbnN0IG9iZnVzY2F0ZWRFbmRPZmZzZXQgPSAzMjtcbmNvbnN0IGd1aWRTaXplID0gMzI7XG5jb25zdCBvYmZ1c2NhdGUgPSAoYnVmLCBmb250S2V5KSA9PiB7XG4gIGNvbnN0IGd1aWQgPSBmb250S2V5LnJlcGxhY2UoLy0vZywgXCJcIik7XG4gIGlmIChndWlkLmxlbmd0aCAhPT0gZ3VpZFNpemUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yOiBDYW5ub3QgZXh0cmFjdCBHVUlEIGZyb20gZm9udCBmaWxlbmFtZTogJHtmb250S2V5fWApO1xuICB9XG4gIGNvbnN0IGhleFN0cmluZ3MgPSBndWlkLnJlcGxhY2UoLyguLikvZywgXCIkMSBcIikudHJpbSgpLnNwbGl0KFwiIFwiKTtcbiAgY29uc3QgaGV4TnVtYmVycyA9IGhleFN0cmluZ3MubWFwKChoZXhTdHJpbmcpID0+IHBhcnNlSW50KGhleFN0cmluZywgMTYpKTtcbiAgaGV4TnVtYmVycy5yZXZlcnNlKCk7XG4gIGNvbnN0IGJ5dGVzVG9PYmZ1c2NhdGUgPSBidWYuc2xpY2Uob2JmdXNjYXRlZFN0YXJ0T2Zmc2V0LCBvYmZ1c2NhdGVkRW5kT2Zmc2V0KTtcbiAgY29uc3Qgb2JmdXNjYXRlZEJ5dGVzID0gYnl0ZXNUb09iZnVzY2F0ZS5tYXAoKGJ5dGUsIGkpID0+IGJ5dGUgXiBoZXhOdW1iZXJzW2kgJSBoZXhOdW1iZXJzLmxlbmd0aF0pO1xuICBjb25zdCBvdXQgPSBCdWZmZXIuY29uY2F0KFtidWYuc2xpY2UoMCwgb2JmdXNjYXRlZFN0YXJ0T2Zmc2V0KSwgb2JmdXNjYXRlZEJ5dGVzLCBidWYuc2xpY2Uob2JmdXNjYXRlZEVuZE9mZnNldCldKTtcbiAgcmV0dXJuIG91dDtcbn07XG5jbGFzcyBGb3JtYXR0ZXIge1xuICBmb3JtYXQoaW5wdXQsIGNvbnRleHQgPSB7IHN0YWNrOiBbXSB9KSB7XG4gICAgY29uc3Qgb3V0cHV0ID0gaW5wdXQucHJlcEZvclhtbChjb250ZXh0KTtcbiAgICBpZiAob3V0cHV0KSB7XG4gICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBFcnJvcihcIlhNTENvbXBvbmVudCBkaWQgbm90IGZvcm1hdCBjb3JyZWN0bHlcIik7XG4gICAgfVxuICB9XG59XG5jbGFzcyBJbWFnZVJlcGxhY2VyIHtcbiAgcmVwbGFjZSh4bWxEYXRhLCBtZWRpYURhdGEsIG9mZnNldCkge1xuICAgIGxldCBjdXJyZW50WG1sRGF0YSA9IHhtbERhdGE7XG4gICAgbWVkaWFEYXRhLmZvckVhY2goKGltYWdlLCBpKSA9PiB7XG4gICAgICBjdXJyZW50WG1sRGF0YSA9IGN1cnJlbnRYbWxEYXRhLnJlcGxhY2UobmV3IFJlZ0V4cChgeyR7aW1hZ2UuZmlsZU5hbWV9fWAsIFwiZ1wiKSwgKG9mZnNldCArIGkpLnRvU3RyaW5nKCkpO1xuICAgIH0pO1xuICAgIHJldHVybiBjdXJyZW50WG1sRGF0YTtcbiAgfVxuICBnZXRNZWRpYURhdGEoeG1sRGF0YSwgbWVkaWEpIHtcbiAgICByZXR1cm4gbWVkaWEuQXJyYXkuZmlsdGVyKChpbWFnZSkgPT4geG1sRGF0YS5zZWFyY2goYHske2ltYWdlLmZpbGVOYW1lfX1gKSA+IDApO1xuICB9XG59XG5jbGFzcyBOdW1iZXJpbmdSZXBsYWNlciB7XG4gIHJlcGxhY2UoeG1sRGF0YSwgY29uY3JldGVOdW1iZXJpbmdzKSB7XG4gICAgbGV0IGN1cnJlbnRYbWxEYXRhID0geG1sRGF0YTtcbiAgICBmb3IgKGNvbnN0IGNvbmNyZXRlTnVtYmVyaW5nIG9mIGNvbmNyZXRlTnVtYmVyaW5ncykge1xuICAgICAgY3VycmVudFhtbERhdGEgPSBjdXJyZW50WG1sRGF0YS5yZXBsYWNlKFxuICAgICAgICBuZXcgUmVnRXhwKGB7JHtjb25jcmV0ZU51bWJlcmluZy5yZWZlcmVuY2V9LSR7Y29uY3JldGVOdW1iZXJpbmcuaW5zdGFuY2V9fWAsIFwiZ1wiKSxcbiAgICAgICAgY29uY3JldGVOdW1iZXJpbmcubnVtSWQudG9TdHJpbmcoKVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGN1cnJlbnRYbWxEYXRhO1xuICB9XG59XG5jbGFzcyBDb21waWxlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJmb3JtYXR0ZXJcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImltYWdlUmVwbGFjZXJcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIm51bWJlcmluZ1JlcGxhY2VyXCIpO1xuICAgIHRoaXMuZm9ybWF0dGVyID0gbmV3IEZvcm1hdHRlcigpO1xuICAgIHRoaXMuaW1hZ2VSZXBsYWNlciA9IG5ldyBJbWFnZVJlcGxhY2VyKCk7XG4gICAgdGhpcy5udW1iZXJpbmdSZXBsYWNlciA9IG5ldyBOdW1iZXJpbmdSZXBsYWNlcigpO1xuICB9XG4gIGNvbXBpbGUoZmlsZSwgcHJldHRpZnlYbWwpIHtcbiAgICBjb25zdCB6aXAgPSBuZXcgSlNaaXAoKTtcbiAgICBjb25zdCB4bWxpZmllZEZpbGVNYXBwaW5nID0gdGhpcy54bWxpZnlGaWxlKGZpbGUsIHByZXR0aWZ5WG1sKTtcbiAgICBjb25zdCBtYXAgPSBuZXcgTWFwKE9iamVjdC5lbnRyaWVzKHhtbGlmaWVkRmlsZU1hcHBpbmcpKTtcbiAgICBmb3IgKGNvbnN0IFssIG9ial0gb2YgbWFwKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgICAgIGZvciAoY29uc3Qgc3ViRmlsZSBvZiBvYmopIHtcbiAgICAgICAgICB6aXAuZmlsZShzdWJGaWxlLnBhdGgsIHN1YkZpbGUuZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHppcC5maWxlKG9iai5wYXRoLCBvYmouZGF0YSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3QgZGF0YSBvZiBmaWxlLk1lZGlhLkFycmF5KSB7XG4gICAgICBpZiAoZGF0YS50eXBlICE9PSBcInN2Z1wiKSB7XG4gICAgICAgIHppcC5maWxlKGB3b3JkL21lZGlhLyR7ZGF0YS5maWxlTmFtZX1gLCBkYXRhLmRhdGEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgemlwLmZpbGUoYHdvcmQvbWVkaWEvJHtkYXRhLmZpbGVOYW1lfWAsIGRhdGEuZGF0YSk7XG4gICAgICAgIHppcC5maWxlKGB3b3JkL21lZGlhLyR7ZGF0YS5mYWxsYmFjay5maWxlTmFtZX1gLCBkYXRhLmZhbGxiYWNrLmRhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IHsgZGF0YTogYnVmZmVyMiwgbmFtZSwgZm9udEtleSB9IG9mIGZpbGUuRm9udFRhYmxlLmZvbnRPcHRpb25zV2l0aEtleSkge1xuICAgICAgY29uc3QgW25hbWVXaXRob3V0RXh0ZW5zaW9uXSA9IG5hbWUuc3BsaXQoXCIuXCIpO1xuICAgICAgemlwLmZpbGUoYHdvcmQvZm9udHMvJHtuYW1lV2l0aG91dEV4dGVuc2lvbn0ub2R0dGZgLCBvYmZ1c2NhdGUoYnVmZmVyMiwgZm9udEtleSkpO1xuICAgIH1cbiAgICByZXR1cm4gemlwO1xuICB9XG4gIHhtbGlmeUZpbGUoZmlsZSwgcHJldHRpZnkpIHtcbiAgICBjb25zdCBkb2N1bWVudFJlbGF0aW9uc2hpcENvdW50ID0gZmlsZS5Eb2N1bWVudC5SZWxhdGlvbnNoaXBzLlJlbGF0aW9uc2hpcENvdW50ICsgMTtcbiAgICBjb25zdCBkb2N1bWVudFhtbERhdGEgPSB4bWwkMShcbiAgICAgIHRoaXMuZm9ybWF0dGVyLmZvcm1hdChmaWxlLkRvY3VtZW50LlZpZXcsIHtcbiAgICAgICAgdmlld1dyYXBwZXI6IGZpbGUuRG9jdW1lbnQsXG4gICAgICAgIGZpbGUsXG4gICAgICAgIHN0YWNrOiBbXVxuICAgICAgfSksXG4gICAgICB7XG4gICAgICAgIGluZGVudDogcHJldHRpZnksXG4gICAgICAgIGRlY2xhcmF0aW9uOiB7XG4gICAgICAgICAgc3RhbmRhbG9uZTogXCJ5ZXNcIixcbiAgICAgICAgICBlbmNvZGluZzogXCJVVEYtOFwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICAgIGNvbnN0IGRvY3VtZW50TWVkaWFEYXRhcyA9IHRoaXMuaW1hZ2VSZXBsYWNlci5nZXRNZWRpYURhdGEoZG9jdW1lbnRYbWxEYXRhLCBmaWxlLk1lZGlhKTtcbiAgICByZXR1cm4ge1xuICAgICAgUmVsYXRpb25zaGlwczoge1xuICAgICAgICBkYXRhOiAoKCkgPT4ge1xuICAgICAgICAgIGRvY3VtZW50TWVkaWFEYXRhcy5mb3JFYWNoKChtZWRpYURhdGEsIGkpID0+IHtcbiAgICAgICAgICAgIGZpbGUuRG9jdW1lbnQuUmVsYXRpb25zaGlwcy5jcmVhdGVSZWxhdGlvbnNoaXAoXG4gICAgICAgICAgICAgIGRvY3VtZW50UmVsYXRpb25zaGlwQ291bnQgKyBpLFxuICAgICAgICAgICAgICBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvaW1hZ2VcIixcbiAgICAgICAgICAgICAgYG1lZGlhLyR7bWVkaWFEYXRhLmZpbGVOYW1lfWBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZmlsZS5Eb2N1bWVudC5SZWxhdGlvbnNoaXBzLmNyZWF0ZVJlbGF0aW9uc2hpcChcbiAgICAgICAgICAgIGZpbGUuRG9jdW1lbnQuUmVsYXRpb25zaGlwcy5SZWxhdGlvbnNoaXBDb3VudCArIDEsXG4gICAgICAgICAgICBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvZm9udFRhYmxlXCIsXG4gICAgICAgICAgICBcImZvbnRUYWJsZS54bWxcIlxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIHhtbCQxKFxuICAgICAgICAgICAgdGhpcy5mb3JtYXR0ZXIuZm9ybWF0KGZpbGUuRG9jdW1lbnQuUmVsYXRpb25zaGlwcywge1xuICAgICAgICAgICAgICB2aWV3V3JhcHBlcjogZmlsZS5Eb2N1bWVudCxcbiAgICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgICAgc3RhY2s6IFtdXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaW5kZW50OiBwcmV0dGlmeSxcbiAgICAgICAgICAgICAgZGVjbGFyYXRpb246IHtcbiAgICAgICAgICAgICAgICBlbmNvZGluZzogXCJVVEYtOFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuICAgICAgICB9KSgpLFxuICAgICAgICBwYXRoOiBcIndvcmQvX3JlbHMvZG9jdW1lbnQueG1sLnJlbHNcIlxuICAgICAgfSxcbiAgICAgIERvY3VtZW50OiB7XG4gICAgICAgIGRhdGE6ICgoKSA9PiB7XG4gICAgICAgICAgY29uc3QgeG1sRGF0YSA9IHRoaXMuaW1hZ2VSZXBsYWNlci5yZXBsYWNlKGRvY3VtZW50WG1sRGF0YSwgZG9jdW1lbnRNZWRpYURhdGFzLCBkb2N1bWVudFJlbGF0aW9uc2hpcENvdW50KTtcbiAgICAgICAgICBjb25zdCByZWZlcmVuZWRYbWxEYXRhID0gdGhpcy5udW1iZXJpbmdSZXBsYWNlci5yZXBsYWNlKHhtbERhdGEsIGZpbGUuTnVtYmVyaW5nLkNvbmNyZXRlTnVtYmVyaW5nKTtcbiAgICAgICAgICByZXR1cm4gcmVmZXJlbmVkWG1sRGF0YTtcbiAgICAgICAgfSkoKSxcbiAgICAgICAgcGF0aDogXCJ3b3JkL2RvY3VtZW50LnhtbFwiXG4gICAgICB9LFxuICAgICAgU3R5bGVzOiB7XG4gICAgICAgIGRhdGE6ICgoKSA9PiB7XG4gICAgICAgICAgY29uc3QgeG1sU3R5bGVzID0geG1sJDEoXG4gICAgICAgICAgICB0aGlzLmZvcm1hdHRlci5mb3JtYXQoZmlsZS5TdHlsZXMsIHtcbiAgICAgICAgICAgICAgdmlld1dyYXBwZXI6IGZpbGUuRG9jdW1lbnQsXG4gICAgICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgICAgIHN0YWNrOiBbXVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGluZGVudDogcHJldHRpZnksXG4gICAgICAgICAgICAgIGRlY2xhcmF0aW9uOiB7XG4gICAgICAgICAgICAgICAgc3RhbmRhbG9uZTogXCJ5ZXNcIixcbiAgICAgICAgICAgICAgICBlbmNvZGluZzogXCJVVEYtOFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IHJlZmVyZW5jZWRYbWxTdHlsZXMgPSB0aGlzLm51bWJlcmluZ1JlcGxhY2VyLnJlcGxhY2UoeG1sU3R5bGVzLCBmaWxlLk51bWJlcmluZy5Db25jcmV0ZU51bWJlcmluZyk7XG4gICAgICAgICAgcmV0dXJuIHJlZmVyZW5jZWRYbWxTdHlsZXM7XG4gICAgICAgIH0pKCksXG4gICAgICAgIHBhdGg6IFwid29yZC9zdHlsZXMueG1sXCJcbiAgICAgIH0sXG4gICAgICBQcm9wZXJ0aWVzOiB7XG4gICAgICAgIGRhdGE6IHhtbCQxKFxuICAgICAgICAgIHRoaXMuZm9ybWF0dGVyLmZvcm1hdChmaWxlLkNvcmVQcm9wZXJ0aWVzLCB7XG4gICAgICAgICAgICB2aWV3V3JhcHBlcjogZmlsZS5Eb2N1bWVudCxcbiAgICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgICBzdGFjazogW11cbiAgICAgICAgICB9KSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbmRlbnQ6IHByZXR0aWZ5LFxuICAgICAgICAgICAgZGVjbGFyYXRpb246IHtcbiAgICAgICAgICAgICAgc3RhbmRhbG9uZTogXCJ5ZXNcIixcbiAgICAgICAgICAgICAgZW5jb2Rpbmc6IFwiVVRGLThcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgKSxcbiAgICAgICAgcGF0aDogXCJkb2NQcm9wcy9jb3JlLnhtbFwiXG4gICAgICB9LFxuICAgICAgTnVtYmVyaW5nOiB7XG4gICAgICAgIGRhdGE6IHhtbCQxKFxuICAgICAgICAgIHRoaXMuZm9ybWF0dGVyLmZvcm1hdChmaWxlLk51bWJlcmluZywge1xuICAgICAgICAgICAgdmlld1dyYXBwZXI6IGZpbGUuRG9jdW1lbnQsXG4gICAgICAgICAgICBmaWxlLFxuICAgICAgICAgICAgc3RhY2s6IFtdXG4gICAgICAgICAgfSksXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW5kZW50OiBwcmV0dGlmeSxcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uOiB7XG4gICAgICAgICAgICAgIHN0YW5kYWxvbmU6IFwieWVzXCIsXG4gICAgICAgICAgICAgIGVuY29kaW5nOiBcIlVURi04XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICksXG4gICAgICAgIHBhdGg6IFwid29yZC9udW1iZXJpbmcueG1sXCJcbiAgICAgIH0sXG4gICAgICBGaWxlUmVsYXRpb25zaGlwczoge1xuICAgICAgICBkYXRhOiB4bWwkMShcbiAgICAgICAgICB0aGlzLmZvcm1hdHRlci5mb3JtYXQoZmlsZS5GaWxlUmVsYXRpb25zaGlwcywge1xuICAgICAgICAgICAgdmlld1dyYXBwZXI6IGZpbGUuRG9jdW1lbnQsXG4gICAgICAgICAgICBmaWxlLFxuICAgICAgICAgICAgc3RhY2s6IFtdXG4gICAgICAgICAgfSksXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW5kZW50OiBwcmV0dGlmeSxcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uOiB7XG4gICAgICAgICAgICAgIGVuY29kaW5nOiBcIlVURi04XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICksXG4gICAgICAgIHBhdGg6IFwiX3JlbHMvLnJlbHNcIlxuICAgICAgfSxcbiAgICAgIEhlYWRlclJlbGF0aW9uc2hpcHM6IGZpbGUuSGVhZGVycy5tYXAoKGhlYWRlcldyYXBwZXIsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHhtbERhdGEgPSB4bWwkMShcbiAgICAgICAgICB0aGlzLmZvcm1hdHRlci5mb3JtYXQoaGVhZGVyV3JhcHBlci5WaWV3LCB7XG4gICAgICAgICAgICB2aWV3V3JhcHBlcjogaGVhZGVyV3JhcHBlcixcbiAgICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgICBzdGFjazogW11cbiAgICAgICAgICB9KSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbmRlbnQ6IHByZXR0aWZ5LFxuICAgICAgICAgICAgZGVjbGFyYXRpb246IHtcbiAgICAgICAgICAgICAgZW5jb2Rpbmc6IFwiVVRGLThcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgbWVkaWFEYXRhcyA9IHRoaXMuaW1hZ2VSZXBsYWNlci5nZXRNZWRpYURhdGEoeG1sRGF0YSwgZmlsZS5NZWRpYSk7XG4gICAgICAgIG1lZGlhRGF0YXMuZm9yRWFjaCgobWVkaWFEYXRhLCBpKSA9PiB7XG4gICAgICAgICAgaGVhZGVyV3JhcHBlci5SZWxhdGlvbnNoaXBzLmNyZWF0ZVJlbGF0aW9uc2hpcChcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvaW1hZ2VcIixcbiAgICAgICAgICAgIGBtZWRpYS8ke21lZGlhRGF0YS5maWxlTmFtZX1gXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGF0YTogeG1sJDEoXG4gICAgICAgICAgICB0aGlzLmZvcm1hdHRlci5mb3JtYXQoaGVhZGVyV3JhcHBlci5SZWxhdGlvbnNoaXBzLCB7XG4gICAgICAgICAgICAgIHZpZXdXcmFwcGVyOiBoZWFkZXJXcmFwcGVyLFxuICAgICAgICAgICAgICBmaWxlLFxuICAgICAgICAgICAgICBzdGFjazogW11cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBpbmRlbnQ6IHByZXR0aWZ5LFxuICAgICAgICAgICAgICBkZWNsYXJhdGlvbjoge1xuICAgICAgICAgICAgICAgIGVuY29kaW5nOiBcIlVURi04XCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICksXG4gICAgICAgICAgcGF0aDogYHdvcmQvX3JlbHMvaGVhZGVyJHtpbmRleCArIDF9LnhtbC5yZWxzYFxuICAgICAgICB9O1xuICAgICAgfSksXG4gICAgICBGb290ZXJSZWxhdGlvbnNoaXBzOiBmaWxlLkZvb3RlcnMubWFwKChmb290ZXJXcmFwcGVyLCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB4bWxEYXRhID0geG1sJDEoXG4gICAgICAgICAgdGhpcy5mb3JtYXR0ZXIuZm9ybWF0KGZvb3RlcldyYXBwZXIuVmlldywge1xuICAgICAgICAgICAgdmlld1dyYXBwZXI6IGZvb3RlcldyYXBwZXIsXG4gICAgICAgICAgICBmaWxlLFxuICAgICAgICAgICAgc3RhY2s6IFtdXG4gICAgICAgICAgfSksXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW5kZW50OiBwcmV0dGlmeSxcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uOiB7XG4gICAgICAgICAgICAgIGVuY29kaW5nOiBcIlVURi04XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IG1lZGlhRGF0YXMgPSB0aGlzLmltYWdlUmVwbGFjZXIuZ2V0TWVkaWFEYXRhKHhtbERhdGEsIGZpbGUuTWVkaWEpO1xuICAgICAgICBtZWRpYURhdGFzLmZvckVhY2goKG1lZGlhRGF0YSwgaSkgPT4ge1xuICAgICAgICAgIGZvb3RlcldyYXBwZXIuUmVsYXRpb25zaGlwcy5jcmVhdGVSZWxhdGlvbnNoaXAoXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2ltYWdlXCIsXG4gICAgICAgICAgICBgbWVkaWEvJHttZWRpYURhdGEuZmlsZU5hbWV9YFxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRhdGE6IHhtbCQxKFxuICAgICAgICAgICAgdGhpcy5mb3JtYXR0ZXIuZm9ybWF0KGZvb3RlcldyYXBwZXIuUmVsYXRpb25zaGlwcywge1xuICAgICAgICAgICAgICB2aWV3V3JhcHBlcjogZm9vdGVyV3JhcHBlcixcbiAgICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgICAgc3RhY2s6IFtdXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaW5kZW50OiBwcmV0dGlmeSxcbiAgICAgICAgICAgICAgZGVjbGFyYXRpb246IHtcbiAgICAgICAgICAgICAgICBlbmNvZGluZzogXCJVVEYtOFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICApLFxuICAgICAgICAgIHBhdGg6IGB3b3JkL19yZWxzL2Zvb3RlciR7aW5kZXggKyAxfS54bWwucmVsc2BcbiAgICAgICAgfTtcbiAgICAgIH0pLFxuICAgICAgSGVhZGVyczogZmlsZS5IZWFkZXJzLm1hcCgoaGVhZGVyV3JhcHBlciwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdGVtcFhtbERhdGEgPSB4bWwkMShcbiAgICAgICAgICB0aGlzLmZvcm1hdHRlci5mb3JtYXQoaGVhZGVyV3JhcHBlci5WaWV3LCB7XG4gICAgICAgICAgICB2aWV3V3JhcHBlcjogaGVhZGVyV3JhcHBlcixcbiAgICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgICBzdGFjazogW11cbiAgICAgICAgICB9KSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbmRlbnQ6IHByZXR0aWZ5LFxuICAgICAgICAgICAgZGVjbGFyYXRpb246IHtcbiAgICAgICAgICAgICAgZW5jb2Rpbmc6IFwiVVRGLThcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgbWVkaWFEYXRhcyA9IHRoaXMuaW1hZ2VSZXBsYWNlci5nZXRNZWRpYURhdGEodGVtcFhtbERhdGEsIGZpbGUuTWVkaWEpO1xuICAgICAgICBjb25zdCB4bWxEYXRhID0gdGhpcy5pbWFnZVJlcGxhY2VyLnJlcGxhY2UodGVtcFhtbERhdGEsIG1lZGlhRGF0YXMsIDApO1xuICAgICAgICBjb25zdCByZWZlcmVuZWRYbWxEYXRhID0gdGhpcy5udW1iZXJpbmdSZXBsYWNlci5yZXBsYWNlKHhtbERhdGEsIGZpbGUuTnVtYmVyaW5nLkNvbmNyZXRlTnVtYmVyaW5nKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkYXRhOiByZWZlcmVuZWRYbWxEYXRhLFxuICAgICAgICAgIHBhdGg6IGB3b3JkL2hlYWRlciR7aW5kZXggKyAxfS54bWxgXG4gICAgICAgIH07XG4gICAgICB9KSxcbiAgICAgIEZvb3RlcnM6IGZpbGUuRm9vdGVycy5tYXAoKGZvb3RlcldyYXBwZXIsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRlbXBYbWxEYXRhID0geG1sJDEoXG4gICAgICAgICAgdGhpcy5mb3JtYXR0ZXIuZm9ybWF0KGZvb3RlcldyYXBwZXIuVmlldywge1xuICAgICAgICAgICAgdmlld1dyYXBwZXI6IGZvb3RlcldyYXBwZXIsXG4gICAgICAgICAgICBmaWxlLFxuICAgICAgICAgICAgc3RhY2s6IFtdXG4gICAgICAgICAgfSksXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW5kZW50OiBwcmV0dGlmeSxcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uOiB7XG4gICAgICAgICAgICAgIGVuY29kaW5nOiBcIlVURi04XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IG1lZGlhRGF0YXMgPSB0aGlzLmltYWdlUmVwbGFjZXIuZ2V0TWVkaWFEYXRhKHRlbXBYbWxEYXRhLCBmaWxlLk1lZGlhKTtcbiAgICAgICAgY29uc3QgeG1sRGF0YSA9IHRoaXMuaW1hZ2VSZXBsYWNlci5yZXBsYWNlKHRlbXBYbWxEYXRhLCBtZWRpYURhdGFzLCAwKTtcbiAgICAgICAgY29uc3QgcmVmZXJlbmVkWG1sRGF0YSA9IHRoaXMubnVtYmVyaW5nUmVwbGFjZXIucmVwbGFjZSh4bWxEYXRhLCBmaWxlLk51bWJlcmluZy5Db25jcmV0ZU51bWJlcmluZyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGF0YTogcmVmZXJlbmVkWG1sRGF0YSxcbiAgICAgICAgICBwYXRoOiBgd29yZC9mb290ZXIke2luZGV4ICsgMX0ueG1sYFxuICAgICAgICB9O1xuICAgICAgfSksXG4gICAgICBDb250ZW50VHlwZXM6IHtcbiAgICAgICAgZGF0YTogeG1sJDEoXG4gICAgICAgICAgdGhpcy5mb3JtYXR0ZXIuZm9ybWF0KGZpbGUuQ29udGVudFR5cGVzLCB7XG4gICAgICAgICAgICB2aWV3V3JhcHBlcjogZmlsZS5Eb2N1bWVudCxcbiAgICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgICBzdGFjazogW11cbiAgICAgICAgICB9KSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbmRlbnQ6IHByZXR0aWZ5LFxuICAgICAgICAgICAgZGVjbGFyYXRpb246IHtcbiAgICAgICAgICAgICAgZW5jb2Rpbmc6IFwiVVRGLThcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgKSxcbiAgICAgICAgcGF0aDogXCJbQ29udGVudF9UeXBlc10ueG1sXCJcbiAgICAgIH0sXG4gICAgICBDdXN0b21Qcm9wZXJ0aWVzOiB7XG4gICAgICAgIGRhdGE6IHhtbCQxKFxuICAgICAgICAgIHRoaXMuZm9ybWF0dGVyLmZvcm1hdChmaWxlLkN1c3RvbVByb3BlcnRpZXMsIHtcbiAgICAgICAgICAgIHZpZXdXcmFwcGVyOiBmaWxlLkRvY3VtZW50LFxuICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgIHN0YWNrOiBbXVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGluZGVudDogcHJldHRpZnksXG4gICAgICAgICAgICBkZWNsYXJhdGlvbjoge1xuICAgICAgICAgICAgICBzdGFuZGFsb25lOiBcInllc1wiLFxuICAgICAgICAgICAgICBlbmNvZGluZzogXCJVVEYtOFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApLFxuICAgICAgICBwYXRoOiBcImRvY1Byb3BzL2N1c3RvbS54bWxcIlxuICAgICAgfSxcbiAgICAgIEFwcFByb3BlcnRpZXM6IHtcbiAgICAgICAgZGF0YTogeG1sJDEoXG4gICAgICAgICAgdGhpcy5mb3JtYXR0ZXIuZm9ybWF0KGZpbGUuQXBwUHJvcGVydGllcywge1xuICAgICAgICAgICAgdmlld1dyYXBwZXI6IGZpbGUuRG9jdW1lbnQsXG4gICAgICAgICAgICBmaWxlLFxuICAgICAgICAgICAgc3RhY2s6IFtdXG4gICAgICAgICAgfSksXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW5kZW50OiBwcmV0dGlmeSxcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uOiB7XG4gICAgICAgICAgICAgIHN0YW5kYWxvbmU6IFwieWVzXCIsXG4gICAgICAgICAgICAgIGVuY29kaW5nOiBcIlVURi04XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICksXG4gICAgICAgIHBhdGg6IFwiZG9jUHJvcHMvYXBwLnhtbFwiXG4gICAgICB9LFxuICAgICAgRm9vdE5vdGVzOiB7XG4gICAgICAgIGRhdGE6IHhtbCQxKFxuICAgICAgICAgIHRoaXMuZm9ybWF0dGVyLmZvcm1hdChmaWxlLkZvb3ROb3Rlcy5WaWV3LCB7XG4gICAgICAgICAgICB2aWV3V3JhcHBlcjogZmlsZS5Gb290Tm90ZXMsXG4gICAgICAgICAgICBmaWxlLFxuICAgICAgICAgICAgc3RhY2s6IFtdXG4gICAgICAgICAgfSksXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW5kZW50OiBwcmV0dGlmeSxcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uOiB7XG4gICAgICAgICAgICAgIGVuY29kaW5nOiBcIlVURi04XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICksXG4gICAgICAgIHBhdGg6IFwid29yZC9mb290bm90ZXMueG1sXCJcbiAgICAgIH0sXG4gICAgICBGb290Tm90ZXNSZWxhdGlvbnNoaXBzOiB7XG4gICAgICAgIGRhdGE6IHhtbCQxKFxuICAgICAgICAgIHRoaXMuZm9ybWF0dGVyLmZvcm1hdChmaWxlLkZvb3ROb3Rlcy5SZWxhdGlvbnNoaXBzLCB7XG4gICAgICAgICAgICB2aWV3V3JhcHBlcjogZmlsZS5Gb290Tm90ZXMsXG4gICAgICAgICAgICBmaWxlLFxuICAgICAgICAgICAgc3RhY2s6IFtdXG4gICAgICAgICAgfSksXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW5kZW50OiBwcmV0dGlmeSxcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uOiB7XG4gICAgICAgICAgICAgIGVuY29kaW5nOiBcIlVURi04XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICksXG4gICAgICAgIHBhdGg6IFwid29yZC9fcmVscy9mb290bm90ZXMueG1sLnJlbHNcIlxuICAgICAgfSxcbiAgICAgIFNldHRpbmdzOiB7XG4gICAgICAgIGRhdGE6IHhtbCQxKFxuICAgICAgICAgIHRoaXMuZm9ybWF0dGVyLmZvcm1hdChmaWxlLlNldHRpbmdzLCB7XG4gICAgICAgICAgICB2aWV3V3JhcHBlcjogZmlsZS5Eb2N1bWVudCxcbiAgICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgICBzdGFjazogW11cbiAgICAgICAgICB9KSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbmRlbnQ6IHByZXR0aWZ5LFxuICAgICAgICAgICAgZGVjbGFyYXRpb246IHtcbiAgICAgICAgICAgICAgc3RhbmRhbG9uZTogXCJ5ZXNcIixcbiAgICAgICAgICAgICAgZW5jb2Rpbmc6IFwiVVRGLThcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgKSxcbiAgICAgICAgcGF0aDogXCJ3b3JkL3NldHRpbmdzLnhtbFwiXG4gICAgICB9LFxuICAgICAgQ29tbWVudHM6IHtcbiAgICAgICAgZGF0YTogeG1sJDEoXG4gICAgICAgICAgdGhpcy5mb3JtYXR0ZXIuZm9ybWF0KGZpbGUuQ29tbWVudHMsIHtcbiAgICAgICAgICAgIHZpZXdXcmFwcGVyOiBmaWxlLkRvY3VtZW50LFxuICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgIHN0YWNrOiBbXVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGluZGVudDogcHJldHRpZnksXG4gICAgICAgICAgICBkZWNsYXJhdGlvbjoge1xuICAgICAgICAgICAgICBzdGFuZGFsb25lOiBcInllc1wiLFxuICAgICAgICAgICAgICBlbmNvZGluZzogXCJVVEYtOFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApLFxuICAgICAgICBwYXRoOiBcIndvcmQvY29tbWVudHMueG1sXCJcbiAgICAgIH0sXG4gICAgICBGb250VGFibGU6IHtcbiAgICAgICAgZGF0YTogeG1sJDEoXG4gICAgICAgICAgdGhpcy5mb3JtYXR0ZXIuZm9ybWF0KGZpbGUuRm9udFRhYmxlLlZpZXcsIHtcbiAgICAgICAgICAgIHZpZXdXcmFwcGVyOiBmaWxlLkRvY3VtZW50LFxuICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgIHN0YWNrOiBbXVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGluZGVudDogcHJldHRpZnksXG4gICAgICAgICAgICBkZWNsYXJhdGlvbjoge1xuICAgICAgICAgICAgICBzdGFuZGFsb25lOiBcInllc1wiLFxuICAgICAgICAgICAgICBlbmNvZGluZzogXCJVVEYtOFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApLFxuICAgICAgICBwYXRoOiBcIndvcmQvZm9udFRhYmxlLnhtbFwiXG4gICAgICB9LFxuICAgICAgRm9udFRhYmxlUmVsYXRpb25zaGlwczoge1xuICAgICAgICBkYXRhOiAoKCkgPT4geG1sJDEoXG4gICAgICAgICAgdGhpcy5mb3JtYXR0ZXIuZm9ybWF0KGZpbGUuRm9udFRhYmxlLlJlbGF0aW9uc2hpcHMsIHtcbiAgICAgICAgICAgIHZpZXdXcmFwcGVyOiBmaWxlLkRvY3VtZW50LFxuICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgIHN0YWNrOiBbXVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGluZGVudDogcHJldHRpZnksXG4gICAgICAgICAgICBkZWNsYXJhdGlvbjoge1xuICAgICAgICAgICAgICBlbmNvZGluZzogXCJVVEYtOFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApKSgpLFxuICAgICAgICBwYXRoOiBcIndvcmQvX3JlbHMvZm9udFRhYmxlLnhtbC5yZWxzXCJcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5jb25zdCBQcmV0dGlmeVR5cGUgPSB7XG4gIE5PTkU6IFwiXCIsXG4gIFdJVEhfMl9CTEFOS1M6IFwiICBcIixcbiAgV0lUSF80X0JMQU5LUzogXCIgICAgXCIsXG4gIFdJVEhfVEFCOiBcIlx0XCJcbn07XG5jb25zdCBjb252ZXJ0UHJldHRpZnlUeXBlID0gKHByZXR0aWZ5KSA9PiBwcmV0dGlmeSA9PT0gdHJ1ZSA/IFByZXR0aWZ5VHlwZS5XSVRIXzJfQkxBTktTIDogcHJldHRpZnkgPT09IGZhbHNlID8gdm9pZCAwIDogcHJldHRpZnk7XG5jbGFzcyBQYWNrZXIge1xuICBzdGF0aWMgdG9TdHJpbmcoZmlsZSwgcHJldHRpZnkpIHtcbiAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgY29uc3QgemlwID0gdGhpcy5jb21waWxlci5jb21waWxlKGZpbGUsIGNvbnZlcnRQcmV0dGlmeVR5cGUocHJldHRpZnkpKTtcbiAgICAgIGNvbnN0IHppcERhdGEgPSB5aWVsZCB6aXAuZ2VuZXJhdGVBc3luYyh7XG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgIG1pbWVUeXBlOiBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmRvY3VtZW50XCIsXG4gICAgICAgIGNvbXByZXNzaW9uOiBcIkRFRkxBVEVcIlxuICAgICAgfSk7XG4gICAgICByZXR1cm4gemlwRGF0YTtcbiAgICB9KTtcbiAgfVxuICBzdGF0aWMgdG9CdWZmZXIoZmlsZSwgcHJldHRpZnkpIHtcbiAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgY29uc3QgemlwID0gdGhpcy5jb21waWxlci5jb21waWxlKGZpbGUsIGNvbnZlcnRQcmV0dGlmeVR5cGUocHJldHRpZnkpKTtcbiAgICAgIGNvbnN0IHppcERhdGEgPSB5aWVsZCB6aXAuZ2VuZXJhdGVBc3luYyh7XG4gICAgICAgIHR5cGU6IFwibm9kZWJ1ZmZlclwiLFxuICAgICAgICBtaW1lVHlwZTogXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudFwiLFxuICAgICAgICBjb21wcmVzc2lvbjogXCJERUZMQVRFXCJcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHppcERhdGE7XG4gICAgfSk7XG4gIH1cbiAgc3RhdGljIHRvQmFzZTY0U3RyaW5nKGZpbGUsIHByZXR0aWZ5KSB7XG4gICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgIGNvbnN0IHppcCA9IHRoaXMuY29tcGlsZXIuY29tcGlsZShmaWxlLCBjb252ZXJ0UHJldHRpZnlUeXBlKHByZXR0aWZ5KSk7XG4gICAgICBjb25zdCB6aXBEYXRhID0geWllbGQgemlwLmdlbmVyYXRlQXN5bmMoe1xuICAgICAgICB0eXBlOiBcImJhc2U2NFwiLFxuICAgICAgICBtaW1lVHlwZTogXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudFwiLFxuICAgICAgICBjb21wcmVzc2lvbjogXCJERUZMQVRFXCJcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHppcERhdGE7XG4gICAgfSk7XG4gIH1cbiAgc3RhdGljIHRvQmxvYihmaWxlLCBwcmV0dGlmeSkge1xuICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICBjb25zdCB6aXAgPSB0aGlzLmNvbXBpbGVyLmNvbXBpbGUoZmlsZSwgY29udmVydFByZXR0aWZ5VHlwZShwcmV0dGlmeSkpO1xuICAgICAgY29uc3QgemlwRGF0YSA9IHlpZWxkIHppcC5nZW5lcmF0ZUFzeW5jKHtcbiAgICAgICAgdHlwZTogXCJibG9iXCIsXG4gICAgICAgIG1pbWVUeXBlOiBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmRvY3VtZW50XCIsXG4gICAgICAgIGNvbXByZXNzaW9uOiBcIkRFRkxBVEVcIlxuICAgICAgfSk7XG4gICAgICByZXR1cm4gemlwRGF0YTtcbiAgICB9KTtcbiAgfVxuICBzdGF0aWMgdG9TdHJlYW0oZmlsZSwgcHJldHRpZnkpIHtcbiAgICBjb25zdCBzdHJlYW0gPSBuZXcgc3RyZWFtQnJvd3NlcmlmeS5TdHJlYW0oKTtcbiAgICBjb25zdCB6aXAgPSB0aGlzLmNvbXBpbGVyLmNvbXBpbGUoZmlsZSwgY29udmVydFByZXR0aWZ5VHlwZShwcmV0dGlmeSkpO1xuICAgIHppcC5nZW5lcmF0ZUFzeW5jKHtcbiAgICAgIHR5cGU6IFwibm9kZWJ1ZmZlclwiLFxuICAgICAgbWltZVR5cGU6IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnRcIixcbiAgICAgIGNvbXByZXNzaW9uOiBcIkRFRkxBVEVcIlxuICAgIH0pLnRoZW4oKHopID0+IHtcbiAgICAgIHN0cmVhbS5lbWl0KFwiZGF0YVwiLCB6KTtcbiAgICAgIHN0cmVhbS5lbWl0KFwiZW5kXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBzdHJlYW07XG4gIH1cbn1cbl9fcHVibGljRmllbGQoUGFja2VyLCBcImNvbXBpbGVyXCIsIG5ldyBDb21waWxlcigpKTtcbmNvbnN0IGZvcm1hdHRlciQxID0gbmV3IEZvcm1hdHRlcigpO1xuY29uc3QgdG9Kc29uID0gKHhtbERhdGEpID0+IHtcbiAgY29uc3QgeG1sT2JqID0gbGliLnhtbDJqcyh4bWxEYXRhLCB7IGNvbXBhY3Q6IGZhbHNlLCBjYXB0dXJlU3BhY2VzQmV0d2VlbkVsZW1lbnRzOiB0cnVlIH0pO1xuICByZXR1cm4geG1sT2JqO1xufTtcbmNvbnN0IGNyZWF0ZVRleHRFbGVtZW50Q29udGVudHMgPSAodGV4dCkgPT4ge1xuICB2YXIgX2E7XG4gIGNvbnN0IHRleHRKc29uID0gdG9Kc29uKHhtbCQxKGZvcm1hdHRlciQxLmZvcm1hdChuZXcgVGV4dCh7IHRleHQgfSkpKSk7XG4gIHJldHVybiAoX2EgPSB0ZXh0SnNvbi5lbGVtZW50c1swXS5lbGVtZW50cykgIT0gbnVsbCA/IF9hIDogW107XG59O1xuY29uc3QgcGF0Y2hTcGFjZUF0dHJpYnV0ZSA9IChlbGVtZW50MikgPT4gX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgZWxlbWVudDIpLCB7XG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBcInhtbDpzcGFjZVwiOiBcInByZXNlcnZlXCJcbiAgfVxufSk7XG5jb25zdCBnZXRGaXJzdExldmVsRWxlbWVudHMgPSAocmVsYXRpb25zaGlwcywgaWQpID0+IHtcbiAgdmFyIF9hLCBfYjtcbiAgcmV0dXJuIChfYiA9IChfYSA9IHJlbGF0aW9uc2hpcHMuZWxlbWVudHMpID09IG51bGwgPyB2b2lkIDAgOiBfYS5maWx0ZXIoKGUpID0+IGUubmFtZSA9PT0gaWQpWzBdLmVsZW1lbnRzKSAhPSBudWxsID8gX2IgOiBbXTtcbn07XG5jb25zdCBhcHBlbmRDb250ZW50VHlwZSA9IChlbGVtZW50MiwgY29udGVudFR5cGUsIGV4dGVuc2lvbikgPT4ge1xuICBjb25zdCByZWxhdGlvbnNoaXBFbGVtZW50cyA9IGdldEZpcnN0TGV2ZWxFbGVtZW50cyhlbGVtZW50MiwgXCJUeXBlc1wiKTtcbiAgY29uc3QgZXhpc3QgPSByZWxhdGlvbnNoaXBFbGVtZW50cy5zb21lKFxuICAgIChlbCkgPT4ge1xuICAgICAgdmFyIF9hLCBfYjtcbiAgICAgIHJldHVybiBlbC50eXBlID09PSBcImVsZW1lbnRcIiAmJiBlbC5uYW1lID09PSBcIkRlZmF1bHRcIiAmJiAoKF9hID0gZWwgPT0gbnVsbCA/IHZvaWQgMCA6IGVsLmF0dHJpYnV0ZXMpID09IG51bGwgPyB2b2lkIDAgOiBfYS5Db250ZW50VHlwZSkgPT09IGNvbnRlbnRUeXBlICYmICgoX2IgPSBlbCA9PSBudWxsID8gdm9pZCAwIDogZWwuYXR0cmlidXRlcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLkV4dGVuc2lvbikgPT09IGV4dGVuc2lvbjtcbiAgICB9XG4gICk7XG4gIGlmIChleGlzdCkge1xuICAgIHJldHVybjtcbiAgfVxuICByZWxhdGlvbnNoaXBFbGVtZW50cy5wdXNoKHtcbiAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICBDb250ZW50VHlwZTogY29udGVudFR5cGUsXG4gICAgICBFeHRlbnNpb246IGV4dGVuc2lvblxuICAgIH0sXG4gICAgbmFtZTogXCJEZWZhdWx0XCIsXG4gICAgdHlwZTogXCJlbGVtZW50XCJcbiAgfSk7XG59O1xuY29uc3QgZ2V0SWRGcm9tUmVsYXRpb25zaGlwSWQgPSAocmVsYXRpb25zaGlwSWQpID0+IHtcbiAgY29uc3Qgb3V0cHV0ID0gcGFyc2VJbnQocmVsYXRpb25zaGlwSWQuc3Vic3RyaW5nKDMpLCAxMCk7XG4gIHJldHVybiBpc05hTihvdXRwdXQpID8gMCA6IG91dHB1dDtcbn07XG5jb25zdCBnZXROZXh0UmVsYXRpb25zaGlwSW5kZXggPSAocmVsYXRpb25zaGlwcykgPT4ge1xuICBjb25zdCByZWxhdGlvbnNoaXBFbGVtZW50cyA9IGdldEZpcnN0TGV2ZWxFbGVtZW50cyhyZWxhdGlvbnNoaXBzLCBcIlJlbGF0aW9uc2hpcHNcIik7XG4gIHJldHVybiByZWxhdGlvbnNoaXBFbGVtZW50cy5tYXAoKGUpID0+IHtcbiAgICB2YXIgX2EsIF9iLCBfYztcbiAgICByZXR1cm4gZ2V0SWRGcm9tUmVsYXRpb25zaGlwSWQoKF9jID0gKF9iID0gKF9hID0gZS5hdHRyaWJ1dGVzKSA9PSBudWxsID8gdm9pZCAwIDogX2EuSWQpID09IG51bGwgPyB2b2lkIDAgOiBfYi50b1N0cmluZygpKSAhPSBudWxsID8gX2MgOiBcIlwiKTtcbiAgfSkucmVkdWNlKChhY2MsIGN1cnIpID0+IE1hdGgubWF4KGFjYywgY3VyciksIDApICsgMTtcbn07XG5jb25zdCBhcHBlbmRSZWxhdGlvbnNoaXAgPSAocmVsYXRpb25zaGlwcywgaWQsIHR5cGUyLCB0YXJnZXQsIHRhcmdldE1vZGUpID0+IHtcbiAgY29uc3QgcmVsYXRpb25zaGlwRWxlbWVudHMgPSBnZXRGaXJzdExldmVsRWxlbWVudHMocmVsYXRpb25zaGlwcywgXCJSZWxhdGlvbnNoaXBzXCIpO1xuICByZWxhdGlvbnNoaXBFbGVtZW50cy5wdXNoKHtcbiAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICBJZDogYHJJZCR7aWR9YCxcbiAgICAgIFR5cGU6IHR5cGUyLFxuICAgICAgVGFyZ2V0OiB0YXJnZXQsXG4gICAgICBUYXJnZXRNb2RlOiB0YXJnZXRNb2RlXG4gICAgfSxcbiAgICBuYW1lOiBcIlJlbGF0aW9uc2hpcFwiLFxuICAgIHR5cGU6IFwiZWxlbWVudFwiXG4gIH0pO1xuICByZXR1cm4gcmVsYXRpb25zaGlwRWxlbWVudHM7XG59O1xuY29uc3QgZmluZFJ1bkVsZW1lbnRJbmRleFdpdGhUb2tlbiA9IChwYXJhZ3JhcGhFbGVtZW50LCB0b2tlbikgPT4ge1xuICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgKChfYSA9IHBhcmFncmFwaEVsZW1lbnQuZWxlbWVudHMpICE9IG51bGwgPyBfYSA6IFtdKS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGVsZW1lbnQyID0gcGFyYWdyYXBoRWxlbWVudC5lbGVtZW50c1tpXTtcbiAgICBpZiAoZWxlbWVudDIudHlwZSA9PT0gXCJlbGVtZW50XCIgJiYgZWxlbWVudDIubmFtZSA9PT0gXCJ3OnJcIikge1xuICAgICAgY29uc3QgdGV4dEVsZW1lbnQgPSAoKF9iID0gZWxlbWVudDIuZWxlbWVudHMpICE9IG51bGwgPyBfYiA6IFtdKS5maWx0ZXIoKGUpID0+IGUudHlwZSA9PT0gXCJlbGVtZW50XCIgJiYgZS5uYW1lID09PSBcInc6dFwiKTtcbiAgICAgIGZvciAoY29uc3QgdGV4dCBvZiB0ZXh0RWxlbWVudCkge1xuICAgICAgICBpZiAoISgoX2MgPSB0ZXh0LmVsZW1lbnRzKSA9PSBudWxsID8gdm9pZCAwIDogX2NbMF0pKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChfZCA9IHRleHQuZWxlbWVudHNbMF0udGV4dCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kLmluY2x1ZGVzKHRva2VuKSkge1xuICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHRocm93IG5ldyBFcnJvcihcIlRva2VuIG5vdCBmb3VuZFwiKTtcbn07XG5jb25zdCBzcGxpdFJ1bkVsZW1lbnQgPSAocnVuRWxlbWVudCwgdG9rZW4pID0+IHtcbiAgdmFyIF9hLCBfYjtcbiAgbGV0IHNwbGl0SW5kZXggPSAwO1xuICBjb25zdCBzcGxpdEVsZW1lbnRzID0gKF9iID0gKF9hID0gcnVuRWxlbWVudC5lbGVtZW50cykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLm1hcCgoZSwgaSkgPT4ge1xuICAgIHZhciBfYTIsIF9iMiwgX2M7XG4gICAgaWYgKGUudHlwZSA9PT0gXCJlbGVtZW50XCIgJiYgZS5uYW1lID09PSBcInc6dFwiKSB7XG4gICAgICBjb25zdCB0ZXh0ID0gKF9jID0gKF9iMiA9IChfYTIgPSBlLmVsZW1lbnRzKSA9PSBudWxsID8gdm9pZCAwIDogX2EyWzBdKSA9PSBudWxsID8gdm9pZCAwIDogX2IyLnRleHQpICE9IG51bGwgPyBfYyA6IFwiXCI7XG4gICAgICBjb25zdCBzcGxpdFRleHQgPSB0ZXh0LnNwbGl0KHRva2VuKTtcbiAgICAgIGNvbnN0IG5ld0VsZW1lbnRzID0gc3BsaXRUZXh0Lm1hcCgodCkgPT4gX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7fSwgZSksIHBhdGNoU3BhY2VBdHRyaWJ1dGUoZSkpLCB7XG4gICAgICAgIGVsZW1lbnRzOiBjcmVhdGVUZXh0RWxlbWVudENvbnRlbnRzKHQpXG4gICAgICB9KSk7XG4gICAgICBzcGxpdEluZGV4ID0gaTtcbiAgICAgIHJldHVybiBuZXdFbGVtZW50cztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICB9KS5mbGF0KCkpICE9IG51bGwgPyBfYiA6IFtdO1xuICBjb25zdCBsZWZ0UnVuRWxlbWVudCA9IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocnVuRWxlbWVudCkpKSwge1xuICAgIGVsZW1lbnRzOiBzcGxpdEVsZW1lbnRzLnNsaWNlKDAsIHNwbGl0SW5kZXggKyAxKVxuICB9KTtcbiAgY29uc3QgcmlnaHRSdW5FbGVtZW50ID0gX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShydW5FbGVtZW50KSkpLCB7XG4gICAgZWxlbWVudHM6IHNwbGl0RWxlbWVudHMuc2xpY2Uoc3BsaXRJbmRleCArIDEpXG4gIH0pO1xuICByZXR1cm4geyBsZWZ0OiBsZWZ0UnVuRWxlbWVudCwgcmlnaHQ6IHJpZ2h0UnVuRWxlbWVudCB9O1xufTtcbmNvbnN0IFJlcGxhY2VNb2RlID0ge1xuICBTVEFSVDogMCxcbiAgTUlERExFOiAxLFxuICBFTkQ6IDJcbn07XG5jb25zdCByZXBsYWNlVG9rZW5JblBhcmFncmFwaEVsZW1lbnQgPSAoe1xuICBwYXJhZ3JhcGhFbGVtZW50LFxuICByZW5kZXJlZFBhcmFncmFwaCxcbiAgb3JpZ2luYWxUZXh0LFxuICByZXBsYWNlbWVudFRleHRcbn0pID0+IHtcbiAgY29uc3Qgc3RhcnRJbmRleCA9IHJlbmRlcmVkUGFyYWdyYXBoLnRleHQuaW5kZXhPZihvcmlnaW5hbFRleHQpO1xuICBjb25zdCBlbmRJbmRleCA9IHN0YXJ0SW5kZXggKyBvcmlnaW5hbFRleHQubGVuZ3RoIC0gMTtcbiAgbGV0IHJlcGxhY2VNb2RlID0gUmVwbGFjZU1vZGUuU1RBUlQ7XG4gIGZvciAoY29uc3QgcnVuIG9mIHJlbmRlcmVkUGFyYWdyYXBoLnJ1bnMpIHtcbiAgICBmb3IgKGNvbnN0IHsgdGV4dCwgaW5kZXgsIHN0YXJ0LCBlbmQgfSBvZiBydW4ucGFydHMpIHtcbiAgICAgIHN3aXRjaCAocmVwbGFjZU1vZGUpIHtcbiAgICAgICAgY2FzZSBSZXBsYWNlTW9kZS5TVEFSVDpcbiAgICAgICAgICBpZiAoc3RhcnRJbmRleCA+PSBzdGFydCkge1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0U3RhcnRJbmRleCA9IHN0YXJ0SW5kZXggLSBzdGFydDtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldEVuZEluZGV4ID0gTWF0aC5taW4oZW5kSW5kZXgsIGVuZCkgLSBzdGFydDtcbiAgICAgICAgICAgIGNvbnN0IHBhcnRUb1JlcGxhY2UgPSBydW4udGV4dC5zdWJzdHJpbmcob2Zmc2V0U3RhcnRJbmRleCwgb2Zmc2V0RW5kSW5kZXggKyAxKTtcbiAgICAgICAgICAgIGlmIChwYXJ0VG9SZXBsYWNlID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZmlyc3RQYXJ0ID0gdGV4dC5yZXBsYWNlKHBhcnRUb1JlcGxhY2UsIHJlcGxhY2VtZW50VGV4dCk7XG4gICAgICAgICAgICBwYXRjaFRleHRFbGVtZW50KHBhcmFncmFwaEVsZW1lbnQuZWxlbWVudHNbcnVuLmluZGV4XS5lbGVtZW50c1tpbmRleF0sIGZpcnN0UGFydCk7XG4gICAgICAgICAgICByZXBsYWNlTW9kZSA9IFJlcGxhY2VNb2RlLk1JRERMRTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBSZXBsYWNlTW9kZS5NSURETEU6XG4gICAgICAgICAgaWYgKGVuZEluZGV4IDw9IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgbGFzdFBhcnQgPSB0ZXh0LnN1YnN0cmluZyhlbmRJbmRleCAtIHN0YXJ0ICsgMSk7XG4gICAgICAgICAgICBwYXRjaFRleHRFbGVtZW50KHBhcmFncmFwaEVsZW1lbnQuZWxlbWVudHNbcnVuLmluZGV4XS5lbGVtZW50c1tpbmRleF0sIGxhc3RQYXJ0KTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRFbGVtZW50MiA9IHBhcmFncmFwaEVsZW1lbnQuZWxlbWVudHNbcnVuLmluZGV4XS5lbGVtZW50c1tpbmRleF07XG4gICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50LmVsZW1lbnRzW3J1bi5pbmRleF0uZWxlbWVudHNbaW5kZXhdID0gcGF0Y2hTcGFjZUF0dHJpYnV0ZShjdXJyZW50RWxlbWVudDIpO1xuICAgICAgICAgICAgcmVwbGFjZU1vZGUgPSBSZXBsYWNlTW9kZS5FTkQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhdGNoVGV4dEVsZW1lbnQocGFyYWdyYXBoRWxlbWVudC5lbGVtZW50c1tydW4uaW5kZXhdLmVsZW1lbnRzW2luZGV4XSwgXCJcIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcGFyYWdyYXBoRWxlbWVudDtcbn07XG5jb25zdCBwYXRjaFRleHRFbGVtZW50ID0gKGVsZW1lbnQyLCB0ZXh0KSA9PiB7XG4gIGVsZW1lbnQyLmVsZW1lbnRzID0gY3JlYXRlVGV4dEVsZW1lbnRDb250ZW50cyh0ZXh0KTtcbiAgcmV0dXJuIGVsZW1lbnQyO1xufTtcbmNvbnN0IHJlbmRlclBhcmFncmFwaE5vZGUgPSAobm9kZSkgPT4ge1xuICBpZiAobm9kZS5lbGVtZW50Lm5hbWUgIT09IFwidzpwXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgbm9kZSB0eXBlOiAke25vZGUuZWxlbWVudC5uYW1lfWApO1xuICB9XG4gIGlmICghbm9kZS5lbGVtZW50LmVsZW1lbnRzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRleHQ6IFwiXCIsXG4gICAgICBydW5zOiBbXSxcbiAgICAgIGluZGV4OiAtMSxcbiAgICAgIHBhdGhUb1BhcmFncmFwaDogW11cbiAgICB9O1xuICB9XG4gIGxldCBjdXJyZW50UnVuU3RyaW5nTGVuZ3RoID0gMDtcbiAgY29uc3QgcnVucyA9IG5vZGUuZWxlbWVudC5lbGVtZW50cy5tYXAoKGVsZW1lbnQyLCBpKSA9PiAoeyBlbGVtZW50OiBlbGVtZW50MiwgaSB9KSkuZmlsdGVyKCh7IGVsZW1lbnQ6IGVsZW1lbnQyIH0pID0+IGVsZW1lbnQyLm5hbWUgPT09IFwidzpyXCIpLm1hcCgoeyBlbGVtZW50OiBlbGVtZW50MiwgaSB9KSA9PiB7XG4gICAgY29uc3QgcmVuZGVyZWRSdW5Ob2RlID0gcmVuZGVyUnVuTm9kZShlbGVtZW50MiwgaSwgY3VycmVudFJ1blN0cmluZ0xlbmd0aCk7XG4gICAgY3VycmVudFJ1blN0cmluZ0xlbmd0aCArPSByZW5kZXJlZFJ1bk5vZGUudGV4dC5sZW5ndGg7XG4gICAgcmV0dXJuIHJlbmRlcmVkUnVuTm9kZTtcbiAgfSkuZmlsdGVyKChlKSA9PiAhIWUpO1xuICBjb25zdCB0ZXh0ID0gcnVucy5yZWR1Y2UoKGFjYywgY3VycikgPT4gYWNjICsgY3Vyci50ZXh0LCBcIlwiKTtcbiAgcmV0dXJuIHtcbiAgICB0ZXh0LFxuICAgIHJ1bnMsXG4gICAgaW5kZXg6IG5vZGUuaW5kZXgsXG4gICAgcGF0aFRvUGFyYWdyYXBoOiBidWlsZE5vZGVQYXRoKG5vZGUpXG4gIH07XG59O1xuY29uc3QgcmVuZGVyUnVuTm9kZSA9IChub2RlLCBpbmRleCwgY3VycmVudFJ1blN0cmluZ0luZGV4KSA9PiB7XG4gIGlmICghbm9kZS5lbGVtZW50cykge1xuICAgIHJldHVybiB7XG4gICAgICB0ZXh0OiBcIlwiLFxuICAgICAgcGFydHM6IFtdLFxuICAgICAgaW5kZXg6IC0xLFxuICAgICAgc3RhcnQ6IGN1cnJlbnRSdW5TdHJpbmdJbmRleCxcbiAgICAgIGVuZDogY3VycmVudFJ1blN0cmluZ0luZGV4XG4gICAgfTtcbiAgfVxuICBsZXQgY3VycmVudFRleHRTdHJpbmdJbmRleCA9IGN1cnJlbnRSdW5TdHJpbmdJbmRleDtcbiAgY29uc3QgcGFydHMgPSBub2RlLmVsZW1lbnRzLm1hcChcbiAgICAoZWxlbWVudDIsIGkpID0+IHtcbiAgICAgIHZhciBfYSwgX2I7XG4gICAgICByZXR1cm4gZWxlbWVudDIubmFtZSA9PT0gXCJ3OnRcIiAmJiBlbGVtZW50Mi5lbGVtZW50cyAmJiBlbGVtZW50Mi5lbGVtZW50cy5sZW5ndGggPiAwID8ge1xuICAgICAgICB0ZXh0OiAoX2IgPSAoX2EgPSBlbGVtZW50Mi5lbGVtZW50c1swXS50ZXh0KSA9PSBudWxsID8gdm9pZCAwIDogX2EudG9TdHJpbmcoKSkgIT0gbnVsbCA/IF9iIDogXCJcIixcbiAgICAgICAgaW5kZXg6IGksXG4gICAgICAgIHN0YXJ0OiBjdXJyZW50VGV4dFN0cmluZ0luZGV4LFxuICAgICAgICBlbmQ6ICgoKSA9PiB7XG4gICAgICAgICAgdmFyIF9hMiwgX2IyO1xuICAgICAgICAgIGN1cnJlbnRUZXh0U3RyaW5nSW5kZXggKz0gKChfYjIgPSAoX2EyID0gZWxlbWVudDIuZWxlbWVudHNbMF0udGV4dCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi50b1N0cmluZygpKSAhPSBudWxsID8gX2IyIDogXCJcIikubGVuZ3RoIC0gMTtcbiAgICAgICAgICByZXR1cm4gY3VycmVudFRleHRTdHJpbmdJbmRleDtcbiAgICAgICAgfSkoKVxuICAgICAgfSA6IHZvaWQgMDtcbiAgICB9XG4gICkuZmlsdGVyKChlKSA9PiAhIWUpLm1hcCgoZSkgPT4gZSk7XG4gIGNvbnN0IHRleHQgPSBwYXJ0cy5yZWR1Y2UoKGFjYywgY3VycikgPT4gYWNjICsgY3Vyci50ZXh0LCBcIlwiKTtcbiAgcmV0dXJuIHtcbiAgICB0ZXh0LFxuICAgIHBhcnRzLFxuICAgIGluZGV4LFxuICAgIHN0YXJ0OiBjdXJyZW50UnVuU3RyaW5nSW5kZXgsXG4gICAgZW5kOiBjdXJyZW50VGV4dFN0cmluZ0luZGV4XG4gIH07XG59O1xuY29uc3QgYnVpbGROb2RlUGF0aCA9IChub2RlKSA9PiBub2RlLnBhcmVudCA/IFsuLi5idWlsZE5vZGVQYXRoKG5vZGUucGFyZW50KSwgbm9kZS5pbmRleF0gOiBbbm9kZS5pbmRleF07XG5jb25zdCBlbGVtZW50c1RvV3JhcHBlciA9ICh3cmFwcGVyKSA9PiB7XG4gIHZhciBfYSwgX2I7XG4gIHJldHVybiAoX2IgPSAoX2EgPSB3cmFwcGVyLmVsZW1lbnQuZWxlbWVudHMpID09IG51bGwgPyB2b2lkIDAgOiBfYS5tYXAoKGUsIGkpID0+ICh7XG4gICAgZWxlbWVudDogZSxcbiAgICBpbmRleDogaSxcbiAgICBwYXJlbnQ6IHdyYXBwZXJcbiAgfSkpKSAhPSBudWxsID8gX2IgOiBbXTtcbn07XG5jb25zdCB0cmF2ZXJzZSA9IChub2RlKSA9PiB7XG4gIGxldCByZW5kZXJlZFBhcmFncmFwaHMgPSBbXTtcbiAgY29uc3QgcXVldWUyID0gW1xuICAgIC4uLmVsZW1lbnRzVG9XcmFwcGVyKHtcbiAgICAgIGVsZW1lbnQ6IG5vZGUsXG4gICAgICBpbmRleDogMCxcbiAgICAgIHBhcmVudDogdm9pZCAwXG4gICAgfSlcbiAgXTtcbiAgbGV0IGN1cnJlbnROb2RlO1xuICB3aGlsZSAocXVldWUyLmxlbmd0aCA+IDApIHtcbiAgICBjdXJyZW50Tm9kZSA9IHF1ZXVlMi5zaGlmdCgpO1xuICAgIGlmIChjdXJyZW50Tm9kZS5lbGVtZW50Lm5hbWUgPT09IFwidzpwXCIpIHtcbiAgICAgIHJlbmRlcmVkUGFyYWdyYXBocyA9IFsuLi5yZW5kZXJlZFBhcmFncmFwaHMsIHJlbmRlclBhcmFncmFwaE5vZGUoY3VycmVudE5vZGUpXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcXVldWUyLnB1c2goLi4uZWxlbWVudHNUb1dyYXBwZXIoY3VycmVudE5vZGUpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlbmRlcmVkUGFyYWdyYXBocztcbn07XG5jb25zdCBmaW5kTG9jYXRpb25PZlRleHQgPSAobm9kZSwgdGV4dCkgPT4gdHJhdmVyc2Uobm9kZSkuZmlsdGVyKChwKSA9PiBwLnRleHQuaW5jbHVkZXModGV4dCkpO1xuY29uc3QgZm9ybWF0dGVyID0gbmV3IEZvcm1hdHRlcigpO1xuY29uc3QgU1BMSVRfVE9LRU4gPSBcIsm1XCI7XG5jb25zdCByZXBsYWNlciA9ICh7XG4gIGpzb24sXG4gIHBhdGNoLFxuICBwYXRjaFRleHQsXG4gIGNvbnRleHQsXG4gIGtlZXBPcmlnaW5hbFN0eWxlcyA9IHRydWVcbn0pID0+IHtcbiAgY29uc3QgcmVuZGVyZWRQYXJhZ3JhcGhzID0gZmluZExvY2F0aW9uT2ZUZXh0KGpzb24sIHBhdGNoVGV4dCk7XG4gIGlmIChyZW5kZXJlZFBhcmFncmFwaHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHsgZWxlbWVudDoganNvbiwgZGlkRmluZE9jY3VycmVuY2U6IGZhbHNlIH07XG4gIH1cbiAgZm9yIChjb25zdCByZW5kZXJlZFBhcmFncmFwaCBvZiByZW5kZXJlZFBhcmFncmFwaHMpIHtcbiAgICBjb25zdCB0ZXh0SnNvbiA9IHBhdGNoLmNoaWxkcmVuLm1hcCgoYykgPT4gdG9Kc29uKHhtbCQxKGZvcm1hdHRlci5mb3JtYXQoYywgY29udGV4dCkpKSkubWFwKChjKSA9PiBjLmVsZW1lbnRzWzBdKTtcbiAgICBzd2l0Y2ggKHBhdGNoLnR5cGUpIHtcbiAgICAgIGNhc2UgUGF0Y2hUeXBlLkRPQ1VNRU5UOiB7XG4gICAgICAgIGNvbnN0IHBhcmVudEVsZW1lbnQgPSBnb1RvUGFyZW50RWxlbWVudEZyb21QYXRoKGpzb24sIHJlbmRlcmVkUGFyYWdyYXBoLnBhdGhUb1BhcmFncmFwaCk7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRJbmRleCA9IGdldExhc3RFbGVtZW50SW5kZXhGcm9tUGF0aChyZW5kZXJlZFBhcmFncmFwaC5wYXRoVG9QYXJhZ3JhcGgpO1xuICAgICAgICBwYXJlbnRFbGVtZW50LmVsZW1lbnRzLnNwbGljZShlbGVtZW50SW5kZXgsIDEsIC4uLnRleHRKc29uKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFBhdGNoVHlwZS5QQVJBR1JBUEg6XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGNvbnN0IHBhcmFncmFwaEVsZW1lbnQgPSBnb1RvRWxlbWVudEZyb21QYXRoKGpzb24sIHJlbmRlcmVkUGFyYWdyYXBoLnBhdGhUb1BhcmFncmFwaCk7XG4gICAgICAgIHJlcGxhY2VUb2tlbkluUGFyYWdyYXBoRWxlbWVudCh7XG4gICAgICAgICAgcGFyYWdyYXBoRWxlbWVudCxcbiAgICAgICAgICByZW5kZXJlZFBhcmFncmFwaCxcbiAgICAgICAgICBvcmlnaW5hbFRleHQ6IHBhdGNoVGV4dCxcbiAgICAgICAgICByZXBsYWNlbWVudFRleHQ6IFNQTElUX1RPS0VOXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBpbmRleCA9IGZpbmRSdW5FbGVtZW50SW5kZXhXaXRoVG9rZW4ocGFyYWdyYXBoRWxlbWVudCwgU1BMSVRfVE9LRU4pO1xuICAgICAgICBjb25zdCBydW5FbGVtZW50VG9CZVJlcGxhY2VkID0gcGFyYWdyYXBoRWxlbWVudC5lbGVtZW50c1tpbmRleF07XG4gICAgICAgIGNvbnN0IHsgbGVmdCwgcmlnaHQgfSA9IHNwbGl0UnVuRWxlbWVudChydW5FbGVtZW50VG9CZVJlcGxhY2VkLCBTUExJVF9UT0tFTik7XG4gICAgICAgIGxldCBuZXdSdW5FbGVtZW50cyA9IHRleHRKc29uO1xuICAgICAgICBsZXQgcGF0Y2hlZFJpZ2h0RWxlbWVudCA9IHJpZ2h0O1xuICAgICAgICBpZiAoa2VlcE9yaWdpbmFsU3R5bGVzKSB7XG4gICAgICAgICAgY29uc3QgcnVuRWxlbWVudE5vblRleHR1YWxFbGVtZW50cyA9IHJ1bkVsZW1lbnRUb0JlUmVwbGFjZWQuZWxlbWVudHMuZmlsdGVyKFxuICAgICAgICAgICAgKGUpID0+IGUudHlwZSA9PT0gXCJlbGVtZW50XCIgJiYgZS5uYW1lID09PSBcInc6clByXCJcbiAgICAgICAgICApO1xuICAgICAgICAgIG5ld1J1bkVsZW1lbnRzID0gdGV4dEpzb24ubWFwKChlKSA9PiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBlKSwge1xuICAgICAgICAgICAgZWxlbWVudHM6IFsuLi5ydW5FbGVtZW50Tm9uVGV4dHVhbEVsZW1lbnRzLCAuLi5lLmVsZW1lbnRzXVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgICBwYXRjaGVkUmlnaHRFbGVtZW50ID0gX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgcmlnaHQpLCB7XG4gICAgICAgICAgICBlbGVtZW50czogWy4uLnJ1bkVsZW1lbnROb25UZXh0dWFsRWxlbWVudHMsIC4uLnJpZ2h0LmVsZW1lbnRzXVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFncmFwaEVsZW1lbnQuZWxlbWVudHMuc3BsaWNlKGluZGV4LCAxLCBsZWZ0LCAuLi5uZXdSdW5FbGVtZW50cywgcGF0Y2hlZFJpZ2h0RWxlbWVudCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4geyBlbGVtZW50OiBqc29uLCBkaWRGaW5kT2NjdXJyZW5jZTogdHJ1ZSB9O1xufTtcbmNvbnN0IGdvVG9FbGVtZW50RnJvbVBhdGggPSAoanNvbiwgcGF0aCkgPT4ge1xuICBsZXQgZWxlbWVudDIgPSBqc29uO1xuICBmb3IgKGxldCBpID0gMTsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBpbmRleCA9IHBhdGhbaV07XG4gICAgY29uc3QgbmV4dEVsZW1lbnRzID0gZWxlbWVudDIuZWxlbWVudHM7XG4gICAgZWxlbWVudDIgPSBuZXh0RWxlbWVudHNbaW5kZXhdO1xuICB9XG4gIHJldHVybiBlbGVtZW50Mjtcbn07XG5jb25zdCBnb1RvUGFyZW50RWxlbWVudEZyb21QYXRoID0gKGpzb24sIHBhdGgpID0+IGdvVG9FbGVtZW50RnJvbVBhdGgoanNvbiwgcGF0aC5zbGljZSgwLCBwYXRoLmxlbmd0aCAtIDEpKTtcbmNvbnN0IGdldExhc3RFbGVtZW50SW5kZXhGcm9tUGF0aCA9IChwYXRoKSA9PiBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG5jb25zdCBQYXRjaFR5cGUgPSB7XG4gIERPQ1VNRU5UOiBcImZpbGVcIixcbiAgUEFSQUdSQVBIOiBcInBhcmFncmFwaFwiXG59O1xuY29uc3QgaW1hZ2VSZXBsYWNlciA9IG5ldyBJbWFnZVJlcGxhY2VyKCk7XG5jb25zdCBwYXRjaERvY3VtZW50ID0gKF8wKSA9PiBfX2FzeW5jKHZvaWQgMCwgW18wXSwgZnVuY3Rpb24qICh7XG4gIG91dHB1dFR5cGUsXG4gIGRhdGEsXG4gIHBhdGNoZXMsXG4gIGtlZXBPcmlnaW5hbFN0eWxlc1xufSkge1xuICB2YXIgX2EsIF9iO1xuICBjb25zdCB6aXBDb250ZW50ID0geWllbGQgSlNaaXAubG9hZEFzeW5jKGRhdGEpO1xuICBjb25zdCBjb250ZXh0cyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGNvbnN0IGZpbGUgPSB7XG4gICAgTWVkaWE6IG5ldyBNZWRpYSgpXG4gIH07XG4gIGNvbnN0IG1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGNvbnN0IGltYWdlUmVsYXRpb25zaGlwQWRkaXRpb25zID0gW107XG4gIGNvbnN0IGh5cGVybGlua1JlbGF0aW9uc2hpcEFkZGl0aW9ucyA9IFtdO1xuICBsZXQgaGFzTWVkaWEgPSBmYWxzZTtcbiAgY29uc3QgYmluYXJ5Q29udGVudE1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHppcENvbnRlbnQuZmlsZXMpKSB7XG4gICAgaWYgKCFrZXkuZW5kc1dpdGgoXCIueG1sXCIpICYmICFrZXkuZW5kc1dpdGgoXCIucmVsc1wiKSkge1xuICAgICAgYmluYXJ5Q29udGVudE1hcC5zZXQoa2V5LCB5aWVsZCB2YWx1ZS5hc3luYyhcInVpbnQ4YXJyYXlcIikpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IGpzb24gPSB0b0pzb24oeWllbGQgdmFsdWUuYXN5bmMoXCJ0ZXh0XCIpKTtcbiAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoXCJ3b3JkL1wiKSAmJiAha2V5LmVuZHNXaXRoKFwiLnhtbC5yZWxzXCIpKSB7XG4gICAgICBjb25zdCBjb250ZXh0ID0ge1xuICAgICAgICBmaWxlLFxuICAgICAgICB2aWV3V3JhcHBlcjoge1xuICAgICAgICAgIFJlbGF0aW9uc2hpcHM6IHtcbiAgICAgICAgICAgIGNyZWF0ZVJlbGF0aW9uc2hpcDogKGxpbmtJZCwgXywgdGFyZ2V0LCBfXykgPT4ge1xuICAgICAgICAgICAgICBoeXBlcmxpbmtSZWxhdGlvbnNoaXBBZGRpdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIGh5cGVybGluazoge1xuICAgICAgICAgICAgICAgICAgaWQ6IGxpbmtJZCxcbiAgICAgICAgICAgICAgICAgIGxpbms6IHRhcmdldFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzdGFjazogW11cbiAgICAgIH07XG4gICAgICBjb250ZXh0cy5zZXQoa2V5LCBjb250ZXh0KTtcbiAgICAgIGZvciAoY29uc3QgW3BhdGNoS2V5LCBwYXRjaFZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhwYXRjaGVzKSkge1xuICAgICAgICBjb25zdCBwYXRjaFRleHQgPSBge3ske3BhdGNoS2V5fX19YDtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICBjb25zdCB7IGRpZEZpbmRPY2N1cnJlbmNlIH0gPSByZXBsYWNlcih7XG4gICAgICAgICAgICBqc29uLFxuICAgICAgICAgICAgcGF0Y2g6IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIHBhdGNoVmFsdWUpLCB7XG4gICAgICAgICAgICAgIGNoaWxkcmVuOiBwYXRjaFZhbHVlLmNoaWxkcmVuLm1hcCgoZWxlbWVudDIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudDIgaW5zdGFuY2VvZiBFeHRlcm5hbEh5cGVybGluaykge1xuICAgICAgICAgICAgICAgICAgY29uc3QgY29uY3JldGVIeXBlcmxpbmsgPSBuZXcgQ29uY3JldGVIeXBlcmxpbmsoZWxlbWVudDIub3B0aW9ucy5jaGlsZHJlbiwgdW5pcXVlSWQoKSk7XG4gICAgICAgICAgICAgICAgICBoeXBlcmxpbmtSZWxhdGlvbnNoaXBBZGRpdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICAgICAgaHlwZXJsaW5rOiB7XG4gICAgICAgICAgICAgICAgICAgICAgaWQ6IGNvbmNyZXRlSHlwZXJsaW5rLmxpbmtJZCxcbiAgICAgICAgICAgICAgICAgICAgICBsaW5rOiBlbGVtZW50Mi5vcHRpb25zLmxpbmtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gY29uY3JldGVIeXBlcmxpbms7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50MjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHBhdGNoVGV4dCxcbiAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICBrZWVwT3JpZ2luYWxTdHlsZXNcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoIWRpZEZpbmRPY2N1cnJlbmNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IG1lZGlhRGF0YXMgPSBpbWFnZVJlcGxhY2VyLmdldE1lZGlhRGF0YShKU09OLnN0cmluZ2lmeShqc29uKSwgY29udGV4dC5maWxlLk1lZGlhKTtcbiAgICAgIGlmIChtZWRpYURhdGFzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaGFzTWVkaWEgPSB0cnVlO1xuICAgICAgICBpbWFnZVJlbGF0aW9uc2hpcEFkZGl0aW9ucy5wdXNoKHtcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgbWVkaWFEYXRhc1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgbWFwLnNldChrZXksIGpzb24pO1xuICB9XG4gIGZvciAoY29uc3QgeyBrZXksIG1lZGlhRGF0YXMgfSBvZiBpbWFnZVJlbGF0aW9uc2hpcEFkZGl0aW9ucykge1xuICAgIGNvbnN0IHJlbGF0aW9uc2hpcEtleSA9IGB3b3JkL19yZWxzLyR7a2V5LnNwbGl0KFwiL1wiKS5wb3AoKX0ucmVsc2A7XG4gICAgY29uc3QgcmVsYXRpb25zaGlwc0pzb24gPSAoX2EgPSBtYXAuZ2V0KHJlbGF0aW9uc2hpcEtleSkpICE9IG51bGwgPyBfYSA6IGNyZWF0ZVJlbGF0aW9uc2hpcEZpbGUoKTtcbiAgICBtYXAuc2V0KHJlbGF0aW9uc2hpcEtleSwgcmVsYXRpb25zaGlwc0pzb24pO1xuICAgIGNvbnN0IGluZGV4ID0gZ2V0TmV4dFJlbGF0aW9uc2hpcEluZGV4KHJlbGF0aW9uc2hpcHNKc29uKTtcbiAgICBjb25zdCBuZXdKc29uID0gaW1hZ2VSZXBsYWNlci5yZXBsYWNlKEpTT04uc3RyaW5naWZ5KG1hcC5nZXQoa2V5KSksIG1lZGlhRGF0YXMsIGluZGV4KTtcbiAgICBtYXAuc2V0KGtleSwgSlNPTi5wYXJzZShuZXdKc29uKSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZWRpYURhdGFzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB7IGZpbGVOYW1lIH0gPSBtZWRpYURhdGFzW2ldO1xuICAgICAgYXBwZW5kUmVsYXRpb25zaGlwKFxuICAgICAgICByZWxhdGlvbnNoaXBzSnNvbixcbiAgICAgICAgaW5kZXggKyBpLFxuICAgICAgICBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvaW1hZ2VcIixcbiAgICAgICAgYG1lZGlhLyR7ZmlsZU5hbWV9YFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgZm9yIChjb25zdCB7IGtleSwgaHlwZXJsaW5rIH0gb2YgaHlwZXJsaW5rUmVsYXRpb25zaGlwQWRkaXRpb25zKSB7XG4gICAgY29uc3QgcmVsYXRpb25zaGlwS2V5ID0gYHdvcmQvX3JlbHMvJHtrZXkuc3BsaXQoXCIvXCIpLnBvcCgpfS5yZWxzYDtcbiAgICBjb25zdCByZWxhdGlvbnNoaXBzSnNvbiA9IChfYiA9IG1hcC5nZXQocmVsYXRpb25zaGlwS2V5KSkgIT0gbnVsbCA/IF9iIDogY3JlYXRlUmVsYXRpb25zaGlwRmlsZSgpO1xuICAgIG1hcC5zZXQocmVsYXRpb25zaGlwS2V5LCByZWxhdGlvbnNoaXBzSnNvbik7XG4gICAgYXBwZW5kUmVsYXRpb25zaGlwKFxuICAgICAgcmVsYXRpb25zaGlwc0pzb24sXG4gICAgICBoeXBlcmxpbmsuaWQsXG4gICAgICBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvaHlwZXJsaW5rXCIsXG4gICAgICBoeXBlcmxpbmsubGluayxcbiAgICAgIFRhcmdldE1vZGVUeXBlLkVYVEVSTkFMXG4gICAgKTtcbiAgfVxuICBpZiAoaGFzTWVkaWEpIHtcbiAgICBjb25zdCBjb250ZW50VHlwZXNKc29uID0gbWFwLmdldChcIltDb250ZW50X1R5cGVzXS54bWxcIik7XG4gICAgaWYgKCFjb250ZW50VHlwZXNKc29uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCBjb250ZW50IHR5cGVzIGZpbGVcIik7XG4gICAgfVxuICAgIGFwcGVuZENvbnRlbnRUeXBlKGNvbnRlbnRUeXBlc0pzb24sIFwiaW1hZ2UvcG5nXCIsIFwicG5nXCIpO1xuICAgIGFwcGVuZENvbnRlbnRUeXBlKGNvbnRlbnRUeXBlc0pzb24sIFwiaW1hZ2UvanBlZ1wiLCBcImpwZWdcIik7XG4gICAgYXBwZW5kQ29udGVudFR5cGUoY29udGVudFR5cGVzSnNvbiwgXCJpbWFnZS9qcGVnXCIsIFwianBnXCIpO1xuICAgIGFwcGVuZENvbnRlbnRUeXBlKGNvbnRlbnRUeXBlc0pzb24sIFwiaW1hZ2UvYm1wXCIsIFwiYm1wXCIpO1xuICAgIGFwcGVuZENvbnRlbnRUeXBlKGNvbnRlbnRUeXBlc0pzb24sIFwiaW1hZ2UvZ2lmXCIsIFwiZ2lmXCIpO1xuICAgIGFwcGVuZENvbnRlbnRUeXBlKGNvbnRlbnRUeXBlc0pzb24sIFwiaW1hZ2Uvc3ZnK3htbFwiLCBcInN2Z1wiKTtcbiAgfVxuICBjb25zdCB6aXAgPSBuZXcgSlNaaXAoKTtcbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgbWFwKSB7XG4gICAgY29uc3Qgb3V0cHV0ID0gdG9YbWwodmFsdWUpO1xuICAgIHppcC5maWxlKGtleSwgb3V0cHV0KTtcbiAgfVxuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBiaW5hcnlDb250ZW50TWFwKSB7XG4gICAgemlwLmZpbGUoa2V5LCB2YWx1ZSk7XG4gIH1cbiAgZm9yIChjb25zdCB7IGRhdGE6IHN0cmVhbSwgZmlsZU5hbWUgfSBvZiBmaWxlLk1lZGlhLkFycmF5KSB7XG4gICAgemlwLmZpbGUoYHdvcmQvbWVkaWEvJHtmaWxlTmFtZX1gLCBzdHJlYW0pO1xuICB9XG4gIHJldHVybiB6aXAuZ2VuZXJhdGVBc3luYyh7XG4gICAgdHlwZTogb3V0cHV0VHlwZSxcbiAgICBtaW1lVHlwZTogXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudFwiLFxuICAgIGNvbXByZXNzaW9uOiBcIkRFRkxBVEVcIlxuICB9KTtcbn0pO1xuY29uc3QgdG9YbWwgPSAoanNvbk9iaikgPT4ge1xuICBjb25zdCBvdXRwdXQgPSBsaWIuanMyeG1sKGpzb25PYmopO1xuICByZXR1cm4gb3V0cHV0O1xufTtcbmNvbnN0IGNyZWF0ZVJlbGF0aW9uc2hpcEZpbGUgPSAoKSA9PiAoe1xuICBkZWNsYXJhdGlvbjoge1xuICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgIHZlcnNpb246IFwiMS4wXCIsXG4gICAgICBlbmNvZGluZzogXCJVVEYtOFwiLFxuICAgICAgc3RhbmRhbG9uZTogXCJ5ZXNcIlxuICAgIH1cbiAgfSxcbiAgZWxlbWVudHM6IFtcbiAgICB7XG4gICAgICB0eXBlOiBcImVsZW1lbnRcIixcbiAgICAgIG5hbWU6IFwiUmVsYXRpb25zaGlwc1wiLFxuICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICB4bWxuczogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvcGFja2FnZS8yMDA2L3JlbGF0aW9uc2hpcHNcIlxuICAgICAgfSxcbiAgICAgIGVsZW1lbnRzOiBbXVxuICAgIH1cbiAgXVxufSk7XG5jb25zdCBwYXRjaERldGVjdG9yID0gKF8wKSA9PiBfX2FzeW5jKHZvaWQgMCwgW18wXSwgZnVuY3Rpb24qICh7IGRhdGEgfSkge1xuICBjb25zdCB6aXBDb250ZW50ID0geWllbGQgSlNaaXAubG9hZEFzeW5jKGRhdGEpO1xuICBjb25zdCBwYXRjaGVzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoemlwQ29udGVudC5maWxlcykpIHtcbiAgICBpZiAoIWtleS5lbmRzV2l0aChcIi54bWxcIikgJiYgIWtleS5lbmRzV2l0aChcIi5yZWxzXCIpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGtleS5zdGFydHNXaXRoKFwid29yZC9cIikgJiYgIWtleS5lbmRzV2l0aChcIi54bWwucmVsc1wiKSkge1xuICAgICAgY29uc3QganNvbiA9IHRvSnNvbih5aWVsZCB2YWx1ZS5hc3luYyhcInRleHRcIikpO1xuICAgICAgdHJhdmVyc2UoanNvbikuZm9yRWFjaCgocCkgPT4gZmluZFBhdGNoS2V5cyhwLnRleHQpLmZvckVhY2goKHBhdGNoKSA9PiBwYXRjaGVzLmFkZChwYXRjaCkpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIEFycmF5LmZyb20ocGF0Y2hlcyk7XG59KTtcbmNvbnN0IGZpbmRQYXRjaEtleXMgPSAodGV4dCkgPT4ge1xuICB2YXIgX2E7XG4gIGNvbnN0IHBhdHRlcm4gPSBuZXcgUmVnRXhwKFwiKD88PVxcXFx7XFxcXHspLis/KD89XFxcXH1cXFxcfSlcIiwgXCJnc1wiKTtcbiAgcmV0dXJuIChfYSA9IHRleHQubWF0Y2gocGF0dGVybikpICE9IG51bGwgPyBfYSA6IFtdO1xufTtcbmV4cG9ydCB7XG4gIEFic3RyYWN0TnVtYmVyaW5nLFxuICBBbGlnbm1lbnQsXG4gIEFsaWdubWVudEF0dHJpYnV0ZXMsXG4gIEFsaWdubWVudFR5cGUsXG4gIEFubm90YXRpb25SZWZlcmVuY2UsXG4gIEF0dHJpYnV0ZXMsXG4gIEJhc2VFbXBoYXNpc01hcmssXG4gIEJhc2VYbWxDb21wb25lbnQsXG4gIEJvZHksXG4gIEJvb2ttYXJrLFxuICBCb29rbWFya0VuZCxcbiAgQm9va21hcmtTdGFydCxcbiAgQm9yZGVyLFxuICBCb3JkZXJFbGVtZW50LFxuICBCb3JkZXJTdHlsZSxcbiAgQnVpbGRlckVsZW1lbnQsXG4gIENhcnJpYWdlUmV0dXJuLFxuICBDaGFyYWN0ZXJTZXQsXG4gIENoZWNrQm94LFxuICBDaGVja0JveFN5bWJvbEVsZW1lbnQsXG4gIENoZWNrQm94VXRpbCxcbiAgQ29sdW1uLFxuICBDb2x1bW5CcmVhayxcbiAgQ29sdW1ucyxcbiAgQ29tbWVudCxcbiAgQ29tbWVudFJhbmdlRW5kLFxuICBDb21tZW50UmFuZ2VTdGFydCxcbiAgQ29tbWVudFJlZmVyZW5jZSxcbiAgQ29tbWVudHMsXG4gIENvbmNyZXRlSHlwZXJsaW5rLFxuICBDb25jcmV0ZU51bWJlcmluZyxcbiAgQ29udGludWF0aW9uU2VwYXJhdG9yLFxuICBEYXlMb25nLFxuICBEYXlTaG9ydCxcbiAgRGVsZXRlZFRleHRSdW4sXG4gIERvY0dyaWRBdHRyaWJ1dGVzLFxuICBGaWxlIGFzIERvY3VtZW50LFxuICBEb2N1bWVudEF0dHJpYnV0ZXMsXG4gIERvY3VtZW50QmFja2dyb3VuZCxcbiAgRG9jdW1lbnRCYWNrZ3JvdW5kQXR0cmlidXRlcyxcbiAgRG9jdW1lbnREZWZhdWx0cyxcbiAgRG9jdW1lbnRHcmlkLFxuICBEb2N1bWVudEdyaWRUeXBlLFxuICBEb3RFbXBoYXNpc01hcmssXG4gIERyYXdpbmcsXG4gIERyb3BDYXBUeXBlLFxuICBFTVBUWV9PQkpFQ1QsXG4gIEVtcGhhc2lzTWFyayxcbiAgRW1waGFzaXNNYXJrVHlwZSxcbiAgRW1wdHlFbGVtZW50LFxuICBFbmRub3RlUmVmZXJlbmNlLFxuICBFeHRlcm5hbEh5cGVybGluayxcbiAgRmlsZSxcbiAgRmlsZUNoaWxkLFxuICBGb290Tm90ZVJlZmVyZW5jZVJ1bkF0dHJpYnV0ZXMsXG4gIEZvb3ROb3RlcyxcbiAgRm9vdGVyMiBhcyBGb290ZXIsXG4gIEZvb3RlcldyYXBwZXIsXG4gIEZvb3Rub3RlUmVmZXJlbmNlLFxuICBGb290bm90ZVJlZmVyZW5jZUVsZW1lbnQsXG4gIEZvb3Rub3RlUmVmZXJlbmNlUnVuLFxuICBGcmFtZUFuY2hvclR5cGUsXG4gIEZyYW1lV3JhcCxcbiAgR3JpZFNwYW4sXG4gIEhlYWRlcjIgYXMgSGVhZGVyLFxuICBIZWFkZXJGb290ZXJSZWZlcmVuY2UsXG4gIEhlYWRlckZvb3RlclJlZmVyZW5jZVR5cGUsXG4gIEhlYWRlckZvb3RlclR5cGUsXG4gIEhlYWRlcldyYXBwZXIsXG4gIEhlYWRpbmdMZXZlbCxcbiAgSGVpZ2h0UnVsZSxcbiAgSGlnaGxpZ2h0Q29sb3IsXG4gIEhvcml6b250YWxQb3NpdGlvbixcbiAgSG9yaXpvbnRhbFBvc2l0aW9uQWxpZ24sXG4gIEhvcml6b250YWxQb3NpdGlvblJlbGF0aXZlRnJvbSxcbiAgSHBzTWVhc3VyZUVsZW1lbnQsXG4gIEh5cGVybGlua1R5cGUsXG4gIElnbm9yZUlmRW1wdHlYbWxDb21wb25lbnQsXG4gIEltYWdlUnVuLFxuICBJbXBvcnRlZFJvb3RFbGVtZW50QXR0cmlidXRlcyxcbiAgSW1wb3J0ZWRYbWxDb21wb25lbnQsXG4gIEluZGVudCxcbiAgSW5pdGlhbGl6YWJsZVhtbENvbXBvbmVudCxcbiAgSW5zZXJ0ZWRUZXh0UnVuLFxuICBJbnRlcm5hbEh5cGVybGluayxcbiAgTGFzdFJlbmRlcmVkUGFnZUJyZWFrLFxuICBMZWFkZXJUeXBlLFxuICBMZXZlbCxcbiAgTGV2ZWxCYXNlLFxuICBMZXZlbEZvck92ZXJyaWRlLFxuICBMZXZlbEZvcm1hdCxcbiAgTGV2ZWxPdmVycmlkZSxcbiAgTGV2ZWxTdWZmaXgsXG4gIExpbmVOdW1iZXJSZXN0YXJ0Rm9ybWF0LFxuICBMaW5lUnVsZVR5cGUsXG4gIE1hdGgkMSBhcyBNYXRoLFxuICBNYXRoQWNjZW50Q2hhcmFjdGVyLFxuICBNYXRoQW5nbGVkQnJhY2tldHMsXG4gIE1hdGhCYXNlLFxuICBNYXRoQ3VybHlCcmFja2V0cyxcbiAgTWF0aERlZ3JlZSxcbiAgTWF0aERlbm9taW5hdG9yLFxuICBNYXRoRnJhY3Rpb24sXG4gIE1hdGhGdW5jdGlvbixcbiAgTWF0aEZ1bmN0aW9uTmFtZSxcbiAgTWF0aEZ1bmN0aW9uUHJvcGVydGllcyxcbiAgTWF0aEludGVncmFsLFxuICBNYXRoTGltaXQsXG4gIE1hdGhMaW1pdExvY2F0aW9uLFxuICBNYXRoTGltaXRMb3dlcixcbiAgTWF0aExpbWl0VXBwZXIsXG4gIE1hdGhOQXJ5UHJvcGVydGllcyxcbiAgTWF0aE51bWVyYXRvcixcbiAgTWF0aFByZVN1YlN1cGVyU2NyaXB0LFxuICBNYXRoUHJlU3ViU3VwZXJTY3JpcHRQcm9wZXJ0aWVzLFxuICBNYXRoUmFkaWNhbCxcbiAgTWF0aFJhZGljYWxQcm9wZXJ0aWVzLFxuICBNYXRoUm91bmRCcmFja2V0cyxcbiAgTWF0aFJ1bixcbiAgTWF0aFNxdWFyZUJyYWNrZXRzLFxuICBNYXRoU3ViU2NyaXB0LFxuICBNYXRoU3ViU2NyaXB0RWxlbWVudCxcbiAgTWF0aFN1YlNjcmlwdFByb3BlcnRpZXMsXG4gIE1hdGhTdWJTdXBlclNjcmlwdCxcbiAgTWF0aFN1YlN1cGVyU2NyaXB0UHJvcGVydGllcyxcbiAgTWF0aFN1bSxcbiAgTWF0aFN1cGVyU2NyaXB0LFxuICBNYXRoU3VwZXJTY3JpcHRFbGVtZW50LFxuICBNYXRoU3VwZXJTY3JpcHRQcm9wZXJ0aWVzLFxuICBNZWRpYSxcbiAgTW9udGhMb25nLFxuICBNb250aFNob3J0LFxuICBOZXh0QXR0cmlidXRlQ29tcG9uZW50LFxuICBOb0JyZWFrSHlwaGVuLFxuICBOdW1iZXJGb3JtYXQkMSBhcyBOdW1iZXJGb3JtYXQsXG4gIE51bWJlclByb3BlcnRpZXMsXG4gIE51bWJlclZhbHVlRWxlbWVudCxcbiAgTnVtYmVyaW5nLFxuICBPbk9mZkVsZW1lbnQsXG4gIE91dGxpbmVMZXZlbCxcbiAgT3ZlcmxhcFR5cGUsXG4gIFBhY2tlcixcbiAgUGFnZUJvcmRlckRpc3BsYXksXG4gIFBhZ2VCb3JkZXJPZmZzZXRGcm9tLFxuICBQYWdlQm9yZGVyWk9yZGVyLFxuICBQYWdlQm9yZGVycyxcbiAgUGFnZUJyZWFrLFxuICBQYWdlQnJlYWtCZWZvcmUsXG4gIFBhZ2VNYXJnaW4sXG4gIFBhZ2VOdW1iZXIsXG4gIFBhZ2VOdW1iZXJFbGVtZW50LFxuICBQYWdlTnVtYmVyU2VwYXJhdG9yLFxuICBQYWdlTnVtYmVyVHlwZSxcbiAgUGFnZU51bWJlclR5cGVBdHRyaWJ1dGVzLFxuICBQYWdlT3JpZW50YXRpb24sXG4gIFBhZ2VSZWZlcmVuY2UsXG4gIFBhZ2VTaXplLFxuICBQYWdlVGV4dERpcmVjdGlvbixcbiAgUGFnZVRleHREaXJlY3Rpb25UeXBlLFxuICBQYXJhZ3JhcGgsXG4gIFBhcmFncmFwaFByb3BlcnRpZXMsXG4gIFBhcmFncmFwaFByb3BlcnRpZXNEZWZhdWx0cyxcbiAgUGF0Y2hUeXBlLFxuICBQb3NpdGlvbmFsVGFiLFxuICBQb3NpdGlvbmFsVGFiQWxpZ25tZW50LFxuICBQb3NpdGlvbmFsVGFiTGVhZGVyLFxuICBQb3NpdGlvbmFsVGFiUmVsYXRpdmVUbyxcbiAgUHJldHRpZnlUeXBlLFxuICBSZWxhdGl2ZUhvcml6b250YWxQb3NpdGlvbixcbiAgUmVsYXRpdmVWZXJ0aWNhbFBvc2l0aW9uLFxuICBSdW4sXG4gIFJ1bkZvbnRzLFxuICBSdW5Qcm9wZXJ0aWVzLFxuICBSdW5Qcm9wZXJ0aWVzQ2hhbmdlLFxuICBSdW5Qcm9wZXJ0aWVzRGVmYXVsdHMsXG4gIFNlY3Rpb25Qcm9wZXJ0aWVzLFxuICBTZWN0aW9uVHlwZSxcbiAgU2VjdGlvblR5cGVBdHRyaWJ1dGVzLFxuICBTZXBhcmF0b3IsXG4gIFNlcXVlbnRpYWxJZGVudGlmaWVyLFxuICBTaGFkaW5nLFxuICBTaGFkaW5nVHlwZSxcbiAgU2ltcGxlRmllbGQsXG4gIFNpbXBsZU1haWxNZXJnZUZpZWxkLFxuICBTaW1wbGVQb3MsXG4gIFNvZnRIeXBoZW4sXG4gIFNwYWNlVHlwZSxcbiAgU3BhY2luZyxcbiAgU3RyaW5nQ29udGFpbmVyLFxuICBTdHJpbmdFbnVtVmFsdWVFbGVtZW50LFxuICBTdHJpbmdWYWx1ZUVsZW1lbnQsXG4gIFN0eWxlJDEgYXMgU3R5bGUsXG4gIFN0eWxlRm9yQ2hhcmFjdGVyLFxuICBTdHlsZUZvclBhcmFncmFwaCxcbiAgU3R5bGVMZXZlbCxcbiAgU3R5bGVzLFxuICBTeW1ib2xSdW4sXG4gIFREaXJlY3Rpb24sXG4gIFRhYixcbiAgVGFiQXR0cmlidXRlcyxcbiAgVGFiU3RvcCxcbiAgVGFiU3RvcEl0ZW0sXG4gIFRhYlN0b3BQb3NpdGlvbixcbiAgVGFiU3RvcFR5cGUsXG4gIFRhYmxlLFxuICBUYWJsZUFuY2hvclR5cGUsXG4gIFRhYmxlQm9yZGVycyxcbiAgVGFibGVDZWxsLFxuICBUYWJsZUNlbGxCb3JkZXJzLFxuICBUYWJsZUZsb2F0UHJvcGVydGllcyxcbiAgVGFibGVMYXlvdXQsXG4gIFRhYmxlTGF5b3V0VHlwZSxcbiAgVGFibGVPZkNvbnRlbnRzLFxuICBUYWJsZVByb3BlcnRpZXMsXG4gIFRhYmxlUm93LFxuICBUYWJsZVJvd0hlaWdodCxcbiAgVGFibGVSb3dIZWlnaHRBdHRyaWJ1dGVzLFxuICBUYWJsZVJvd1Byb3BlcnRpZXMsXG4gIFRhYmxlV2lkdGhFbGVtZW50LFxuICBUZXh0RGlyZWN0aW9uLFxuICBUZXh0RWZmZWN0LFxuICBUZXh0UnVuLFxuICBUZXh0V3JhcHBpbmdTaWRlLFxuICBUZXh0V3JhcHBpbmdUeXBlLFxuICBUZXh0Ym94LFxuICBUaGVtYXRpY0JyZWFrLFxuICBUeXBlLFxuICBVbmRlcmxpbmUsXG4gIFVuZGVybGluZVR5cGUsXG4gIFZlcnRpY2FsQWxpZ24yIGFzIFZlcnRpY2FsQWxpZ24sXG4gIFZlcnRpY2FsQWxpZ25BdHRyaWJ1dGVzLFxuICBWZXJ0aWNhbEFsaWduRWxlbWVudCxcbiAgVmVydGljYWxNZXJnZSxcbiAgVmVydGljYWxNZXJnZVR5cGUsXG4gIFZlcnRpY2FsUG9zaXRpb24sXG4gIFZlcnRpY2FsUG9zaXRpb25BbGlnbixcbiAgVmVydGljYWxQb3NpdGlvblJlbGF0aXZlRnJvbSxcbiAgV09SS0FST1VORDIsXG4gIFdPUktBUk9VTkQzLFxuICBXT1JLQVJPVU5ENCxcbiAgV2lkdGhUeXBlLFxuICBXcmFwTm9uZSxcbiAgV3JhcFNxdWFyZSxcbiAgV3JhcFRpZ2h0LFxuICBXcmFwVG9wQW5kQm90dG9tLFxuICBYbWxBdHRyaWJ1dGVDb21wb25lbnQsXG4gIFhtbENvbXBvbmVudCxcbiAgWWVhckxvbmcsXG4gIFllYXJTaG9ydCxcbiAgYWJzdHJhY3ROdW1VbmlxdWVOdW1lcmljSWRHZW4sXG4gIGJvb2ttYXJrVW5pcXVlTnVtZXJpY0lkR2VuLFxuICBjb25jcmV0ZU51bVVuaXF1ZU51bWVyaWNJZEdlbixcbiAgY29udmVydEluY2hlc1RvVHdpcCxcbiAgY29udmVydE1pbGxpbWV0ZXJzVG9Ud2lwLFxuICBjb252ZXJ0VG9YbWxDb21wb25lbnQsXG4gIGNyZWF0ZUZyYW1lUHJvcGVydGllcyxcbiAgY3JlYXRlTGluZU51bWJlclR5cGUsXG4gIGNyZWF0ZVN0cmluZ0VsZW1lbnQsXG4gIGRhdGVUaW1lVmFsdWUsXG4gIGRlY2ltYWxOdW1iZXIsXG4gIGRvY1Byb3BlcnRpZXNVbmlxdWVOdW1lcmljSWRHZW4sXG4gIGVpZ2h0aFBvaW50TWVhc3VyZVZhbHVlLFxuICBoYXNoZWRJZCxcbiAgaGV4Q29sb3JWYWx1ZSxcbiAgaHBzTWVhc3VyZVZhbHVlLFxuICBsb25nSGV4TnVtYmVyLFxuICBtZWFzdXJlbWVudE9yUGVyY2VudFZhbHVlLFxuICBwYXRjaERldGVjdG9yLFxuICBwYXRjaERvY3VtZW50LFxuICBwZXJjZW50YWdlVmFsdWUsXG4gIHBvaW50TWVhc3VyZVZhbHVlLFxuICBwb3NpdGl2ZVVuaXZlcnNhbE1lYXN1cmVWYWx1ZSxcbiAgc2VjdGlvbk1hcmdpbkRlZmF1bHRzLFxuICBzZWN0aW9uUGFnZVNpemVEZWZhdWx0cyxcbiAgc2hvcnRIZXhOdW1iZXIsXG4gIHNpZ25lZEhwc01lYXN1cmVWYWx1ZSxcbiAgc2lnbmVkVHdpcHNNZWFzdXJlVmFsdWUsXG4gIHR3aXBzTWVhc3VyZVZhbHVlLFxuICB1Q2hhckhleE51bWJlcixcbiAgdW5pcXVlSWQsXG4gIHVuaXF1ZU51bWVyaWNJZENyZWF0b3IsXG4gIHVuaXF1ZVV1aWQsXG4gIHVuaXZlcnNhbE1lYXN1cmVWYWx1ZSxcbiAgdW5zaWduZWREZWNpbWFsTnVtYmVyXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docx/build/index.mjs\n");

/***/ })

};
;